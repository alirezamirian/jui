{"version":3,"file":"assets/js/5ce6b499.98c899e1.js","mappings":"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","sources":["webpack://website/./docs/guides/ActionSystem.mdx"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Actions';\nexport const metadata = {\n  \"unversionedId\": \"guides/ActionSystem\",\n  \"id\": \"guides/ActionSystem\",\n  \"title\": \"Actions\",\n  \"description\": \"The current implementation of the action system is experimental and is likely to undergo significant revisions to meet\",\n  \"source\": \"@site/docs/guides/ActionSystem.mdx\",\n  \"sourceDirName\": \"guides\",\n  \"slug\": \"/guides/ActionSystem\",\n  \"permalink\": \"/jui/-/pre-combobox/docs/guides/ActionSystem\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/guides/ActionSystem.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Theming\",\n    \"permalink\": \"/jui/-/pre-combobox/docs/guides/Theming\"\n  },\n  \"next\": {\n    \"title\": \"Collections\",\n    \"permalink\": \"/jui/-/pre-combobox/docs/guides/Collections\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'Defining actions',\n  id: 'defining-actions',\n  level: 2\n}, {\n  value: 'Action Groups',\n  id: 'action-groups',\n  level: 3\n}, {\n  value: 'Default action group',\n  id: 'default-action-group',\n  level: 3\n}, {\n  value: 'Using actions',\n  id: 'using-actions',\n  level: 2\n}, {\n  value: 'Query actions based on DOM elements',\n  id: 'query-actions-based-on-dom-elements',\n  level: 3\n}, {\n  value: 'UI components',\n  id: 'ui-components',\n  level: 3\n}, {\n  value: 'Menu',\n  id: 'menu',\n  level: 3\n}, {\n  value: 'ActionButton',\n  id: 'actionbutton',\n  level: 3\n}, {\n  value: 'Shortcuts and key mapping',\n  id: 'shortcuts-and-key-mapping',\n  level: 2\n}, {\n  value: 'Differences with the Intellij Platform',\n  id: 'differences-with-the-intellij-platform',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"actions\"\n    }}>{`Actions`}</h1>\n    <admonition {...{\n      \"title\": \"Experimental\",\n      \"type\": \"warning\"\n    }}><p parentName=\"admonition\">{`The current implementation of the action system is experimental and is likely to undergo significant revisions to meet\nthe performance demands of real-world applications with thousands of actions.`}</p></admonition>\n    <p>{`An `}<em parentName=\"p\">{`action`}</em>{` represents an available functionality, without specifying how it's invoked. Shortcuts can separately be\nassigned to actions via a `}<inlineCode parentName=\"p\">{`keymap`}</inlineCode>{`, allowing for a customizable and personalized user experience. The action system,\nat its core, is only about defining actions for each part of the UI and associating these actions with\nshortcuts, without any direct dependencies on other aspects of the design system. However, there are\n`}<a parentName=\"p\" {...{\n        \"href\": \"#ui-components\"\n      }}>{`UI components`}</a>{` available to facilitate creation of toolbars and menus based on actions.`}</p>\n    <admonition {...{\n      \"type\": \"note\"\n    }}><p parentName=\"admonition\">{`The core functionality of the action system may be extracted into a standalone package in the future,\nmaking it a reusable component for applications built using any design system.`}</p></admonition>\n    <p>{`The action system consists of the following primary components:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ActionsProvider`}</inlineCode>{` component, which allows for defining actions for a UI area.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`KeymapProvider`}</inlineCode>{` component, which allows for assigning shortcut(s) to actions.`}</li>\n      <li parentName=\"ul\">{`UI components that helps with creating menus, toolbars, etc. based on action system abstractions.`}</li>\n    </ul>\n    <p>{`Below is a basic example of how these components are used.\nSubsequent sections will provide detailed explanations of the components and interfaces involved.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live noInline noPadding themed\",\n        \"live\": true,\n        \"noInline\": true,\n        \"noPadding\": true,\n        \"themed\": true\n      }}>{`const StyledDiv = styled.div\\`\n  &:focus {\n    outline: 4px solid \\${({ theme }) => theme.color(\"Button.focusedBorderColor\")}!important;\n    outline-offset: 2px;\n  }\n\\`;\nrender(\n  <KeymapProvider\n    keymap={{\n      MY_ACTION: [\n        {\n          type: \"keyboard\",\n          firstKeyStroke: { modifiers: [\"Shift\"], code: \"KeyD\" },\n        },\n      ],\n    }}\n  >\n    <ActionsProvider\n      actions={[\n        {\n          id: \"MY_ACTION\",\n          title: \"My Action\",\n          icon: <PlatformIcon icon=\"general/information.svg\" />,\n          actionPerformed: () => alert(\"My Action performed\"),\n        },\n      ]}\n    >\n      {({ shortcutHandlerProps }) => (\n        <div {...shortcutHandlerProps} style={{ padding: \"1rem\" }}>\n          <StyledDiv tabIndex={0}>\n            Click here to focus, then press <code>Shift+D</code>\n          </StyledDiv>\n          <br />\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \"0.5rem\" }}>\n            Or press this button: <ActionButton actionId=\"MY_ACTION\" />\n          </div>\n        </div>\n      )}\n    </ActionsProvider>\n  </KeymapProvider>\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"defining-actions\"\n    }}>{`Defining actions`}</h2>\n    <p><inlineCode parentName=\"p\">{`ActionsProvider`}</inlineCode>{` is used as a wrapper component that defines available actions for the wrapped UI.\nMultiple, potentially nested `}<inlineCode parentName=\"p\">{`ActionsProvider`}</inlineCode>{` may be rendered in an application. `}<inlineCode parentName=\"p\">{`ActionProvider`}</inlineCode>{` itself doesn't render\nany wrapper element. Shortcut event handler props are passed to `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` which is expected to be a render function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<ActionsProvider actions={actions}>\n  {({ shortcutHandlerProps }) => <div {...shortcutHandlerProps}>...</div>}\n</ActionsProvider>\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`actions`}</inlineCode>{` is an array of objects implementing `}<inlineCode parentName=\"p\">{`ActionDefinition`}</inlineCode>{` interface. At minimum, an action must have:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`id`}</inlineCode>{`: A unique identifier based on which shortcuts are assigned in `}<inlineCode parentName=\"li\">{`keymap`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`actionPerformed`}</inlineCode>{`: A function to be invoked when the action is triggered, e.g. via a shortcut.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`title`}</inlineCode>{`: The only mandatory presentation information for the action.`}</li>\n    </ul>\n    <p>{`Moreover, an action has the following optional properties:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`isDisabled`}</inlineCode>{`: If `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, prevents action from being performed. `}<a parentName=\"li\" {...{\n          \"href\": \"#ui-components\"\n        }}>{`Action UI components`}</a>{` will also utilize\nthis field to either disable or hide the corresponding UI component.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`icon`}</inlineCode>{`: A React node to be used as the associated icon for the action. It's required if the action is to be rendered\nas an `}<a parentName=\"li\" {...{\n          \"href\": \"#actionbutton\"\n        }}>{`ActionButton`}</a>{`, and optional for `}<a parentName=\"li\" {...{\n          \"href\": \"#menu\"\n        }}>{`menu items`}</a>{`.`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`description`}</inlineCode>{`: Plain text, additional description about the action. Not used in `}<a parentName=\"li\" {...{\n          \"href\": \"#actionbutton\"\n        }}>{`ActionButton`}</a>{`, or\n`}<a parentName=\"li\" {...{\n          \"href\": \"#menu\"\n        }}>{`menu items`}</a>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"action-groups\"\n    }}>{`Action Groups`}</h3>\n    <p>{`An ActionGroup is a special type of action with a list of children actions. An action group itself can be performed.`}</p>\n    <h3 {...{\n      \"id\": \"default-action-group\"\n    }}>{`Default action group`}</h3>\n    <p>{`A default implementation of action group is available, which when performed, opens a `}<a parentName=\"p\" {...{\n        \"href\": \"../components/popup\"\n      }}>{`Popup`}</a>{`,\npresenting the children actions in a `}<a parentName=\"p\" {...{\n        \"href\": \"../components/Menu#speedsearchmenu\"\n      }}>{`SpeedSearchMenu`}</a>{`. The default action\ngroup requires `}<a parentName=\"p\" {...{\n        \"href\": \"../components/Popup#popupmanager\"\n      }}>{`PopupManager`}</a>{`, for opening the popup.`}</p>\n    <p><inlineCode parentName=\"p\">{`useCreateDefaultActionGroup`}</inlineCode>{` returns a function that creates action groups:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import { useCreateDefaultActionGroup } from \"@intellij-platform/core\";\n\nconst createDefaultActionGroup = useCreateDefaultActionGroup();\n\ncreateDefaultActionGroup({\n  id: \"MY_ACTION_GROUP\",\n  title: \"My Action Group\",\n  children: [\n    /* action definitions */\n  ],\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"themed live noInline\",\n        \"themed\": true,\n        \"live\": true,\n        \"noInline\": true\n      }}>{`function ExampleApp({ children }) {\n  return (\n    <PopupManager>\n      <KeymapProvider\n        keymap={{\n          Changelists: [\n            {\n              type: \"keyboard\",\n              firstKeyStroke: { modifiers: [\"Shift\"], code: \"KeyD\" },\n            },\n          ],\n        }}\n      >\n        {children}\n      </KeymapProvider>\n    </PopupManager>\n  );\n}\nfunction DefaultActionGroupExample() {\n  const createDefaultActionGroup = useCreateDefaultActionGroup();\n\n  return (\n    <ActionsProvider\n      actions={[\n        createDefaultActionGroup({\n          id: \"Changelists\",\n          title: \"Changelists\",\n          icon: <PlatformIcon icon=\"vcs/changelist.svg\" />,\n          children: [\n            {\n              id: \"New Changelist...\",\n              title: \"New Changelist...\",\n              icon: <PlatformIcon icon=\"general/add.svg\" />,\n              actionPerformed: () => alert(\"New Changelist...\"),\n            },\n            {\n              id: \"Edit Changelist...\",\n              title: \"Edit Changelist...\",\n              icon: <PlatformIcon icon=\"actions/edit.svg\" />,\n              actionPerformed: () => alert(\"Edit Changelist...\"),\n            },\n            {\n              id: \"Move to another changelist...\",\n              title: \"Move to another changelist...\",\n              actionPerformed: () => alert(\"Edit Changelist...\"),\n            },\n          ],\n        }),\n      ]}\n    >\n      {({ shortcutHandlerProps }) => (\n        <div {...shortcutHandlerProps}>\n          <ActionButton actionId=\"Changelists\" />\n        </div>\n      )}\n    </ActionsProvider>\n  );\n}\n\nrender(\n  <ExampleApp>\n    <DefaultActionGroupExample />\n  </ExampleApp>\n);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-actions\"\n    }}>{`Using actions`}</h2>\n    <p><inlineCode parentName=\"p\">{`useActions`}</inlineCode>{` can be used to query the list of all provided actions. Use `}<inlineCode parentName=\"p\">{`useAction`}</inlineCode>{` instead to query an specific action,\nby id. The queried `}<inlineCode parentName=\"p\">{`Action`}</inlineCode>{` object has a `}<inlineCode parentName=\"p\">{`perform`}</inlineCode>{` method which can be invoked e.g. when a menu item or a button is\npressed. Note that `}<inlineCode parentName=\"p\">{`Action`}</inlineCode>{` interface is quite similar but not identical to `}<inlineCode parentName=\"p\">{`ActionDefinition`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`function MyActionButton() {\n  const action = useAction(\"MY_ACTION\");\n  return action && <Button onPress={() => action.perform()}>My Action</Button>;\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`useActionGroup`}</inlineCode>{` is also similar to `}<inlineCode parentName=\"p\">{`useAction`}</inlineCode>{`, but it asserts the queried action is a group.`}</p>\n    <h3 {...{\n      \"id\": \"query-actions-based-on-dom-elements\"\n    }}>{`Query actions based on DOM elements`}</h3>\n    <p><inlineCode parentName=\"p\">{`useAction`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`useActions`}</inlineCode>{` is the canonical API for accessing currently provided actions from a React component.\n`}<inlineCode parentName=\"p\">{`getAvailableActionsFor`}</inlineCode>{` is an alternative API that allows for querying available actions from a DOM element. This can\nbe useful in specific scenarios such as the implementation of the `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.jetbrains.com/idea/guide/tutorials/presenting/find-action\"\n      }}>{`find action`}</a>{`.\nYou can also check out the implementation of \"find action\" action `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/alirezamirian/jui/blob/master/packages/example-app/src/SearchEverywhere/contributors/action/actionsSearchContributor.tsx\"\n      }}>{`in the example app`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"ui-components\"\n    }}>{`UI components`}</h3>\n    <p><inlineCode parentName=\"p\">{`useAction`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`useActionGroup`}</inlineCode>{` can be used to query actions and create a menu or toolbar out of them. For typical\nuse cases, however, there are convenient components that interface on `}<inlineCode parentName=\"p\">{`Action`}</inlineCode>{` or action id.`}</p>\n    <h3 {...{\n      \"id\": \"menu\"\n    }}>{`Menu`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`ActionsMenu`}</inlineCode>{` to render a list of action objects as a menu. `}<inlineCode parentName=\"p\">{`ActionGroup`}</inlineCode>{` items are rendered as a section or a\nsubmenu, depending on `}<inlineCode parentName=\"p\">{`menuPresentation`}</inlineCode>{` property of the action group object.\nNote that `}<inlineCode parentName=\"p\">{`ActionsMenu`}</inlineCode>{` just provides an interface based on action items, but it doesn't query any action from the\nactions context, and just uses action properties to create menu items from it.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"themed live\",\n        \"themed\": true,\n        \"live\": true\n      }}>{`<ActionsMenu\n  // actions would normally be coming from useAction calls, rather than hard coded like this, but this example\n  // shows how ActionsMenu is a dump component mapping Action objects to menu items.\n  actions={[\n    {\n      id: \"Cut\",\n      title: \"Cut\",\n      icon: <PlatformIcon icon=\"actions/menu-cut.svg\" />,\n      shortcut: \"⌘X\",\n      perform: () => alert(\"Cut\"),\n    },\n    {\n      id: \"Copy\",\n      title: \"Copy\",\n      icon: <PlatformIcon icon=\"actions/copy.svg\" />,\n      shortcut: \"⌘C\",\n      perform: () => alert(\"Copy\"),\n    },\n    {\n      id: \"Copy Path/Reference...\",\n      title: \"Copy Path/Reference...\",\n      perform: () => alert(\"Copy Path/Reference...\"),\n    },\n    {\n      id: \"Paste\",\n      title: \"Paste\",\n      icon: <PlatformIcon icon=\"actions/menu-paste.svg\" />,\n      shortcut: \"⌘V\",\n      perform: () => alert(\"Paste\"),\n    },\n    new DividerItem(),\n    {\n      id: \"Compare with...\",\n      title: \"Diff\",\n      icon: <PlatformIcon icon=\"actions/diff.svg\" />,\n      shortcut: \"⌘D\",\n      perform: () => alert(\"Diff\"),\n    },\n  ]}\n/>\n`}</code></pre>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`ActionGroupMenu`}</inlineCode>{` to render actions of an action group, as a menu:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"themed live\",\n        \"themed\": true,\n        \"live\": true\n      }}>{`<ActionGroupMenu\n  // actions would normally be coming from useAction calls, rather than hard coded like this, but this example\n  // shows how ActionsMenu is a dump component mapping Action objects to menu items.\n  actionGroup={{\n    id: \"FILE_ACTIONS\",\n    title: \"File Actions\",\n    children: [\n      {\n        id: \"Cut\",\n        title: \"Cut\",\n        icon: <PlatformIcon icon=\"actions/menu-cut.svg\" />,\n        shortcut: \"⌘X\",\n        perform: () => alert(\"Cut\"),\n      },\n      {\n        id: \"Copy\",\n        title: \"Copy\",\n        icon: <PlatformIcon icon=\"actions/copy.svg\" />,\n        shortcut: \"⌘C\",\n        perform: () => alert(\"Copy\"),\n      },\n      {\n        id: \"Copy Path/Reference...\",\n        title: \"Copy Path/Reference...\",\n        perform: () => alert(\"Copy Path/Reference...\"),\n      },\n      {\n        id: \"Paste\",\n        title: \"Paste\",\n        icon: <PlatformIcon icon=\"actions/menu-paste.svg\" />,\n        shortcut: \"⌘V\",\n        perform: () => alert(\"Paste\"),\n      },\n      {\n        id: \"DIFF_ACTION_GROUP\",\n        title: \"Diff actions\",\n        children: [\n          {\n            id: \"Compare with...\",\n            title: \"Diff\",\n            icon: <PlatformIcon icon=\"actions/diff.svg\" />,\n            shortcut: \"⌘D\",\n            perform: () => alert(\"Diff\"),\n          },\n        ],\n      },\n    ],\n  }}\n/>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"actionbutton\"\n    }}>{`ActionButton`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`ActionButton`}</inlineCode>{` to create an `}<inlineCode parentName=\"p\">{`IconButton`}</inlineCode>{` based on a provided action. Unlike `}<inlineCode parentName=\"p\">{`ActionsMenu`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`ActionGroupMenu`}</inlineCode>{`,\n`}<inlineCode parentName=\"p\">{`ActionButton`}</inlineCode>{` interfaces on action ID, and queries the target action via `}<inlineCode parentName=\"p\">{`useAction`}</inlineCode>{`. If the action doesn't exist,\nit renders nothing.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed noPadding\",\n        \"live\": true,\n        \"themed\": true,\n        \"noPadding\": true\n      }}>{`<ActionsProvider\n  actions={[\n    {\n      id: \"refresh\",\n      title: \"Refresh\",\n      icon: <PlatformIcon icon=\"actions/refresh.svg\" />,\n      actionPerformed: () => alert(\"Refresh\"),\n    },\n  ]}\n>\n  {({ shortcutHandlerProps }) => (\n    <div {...shortcutHandlerProps} style={{ padding: \"1rem\" }}>\n      <ActionButton actionId=\"refresh\" />\n    </div>\n  )}\n</ActionsProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shortcuts-and-key-mapping\"\n    }}>{`Shortcuts and key mapping`}</h2>\n    <p>{`A `}<inlineCode parentName=\"p\">{`Keymap`}</inlineCode>{` is a mapping from action ids to a list of associated shortcuts. In an application that uses actions, the\n`}<inlineCode parentName=\"p\">{`KeymapProvider`}</inlineCode>{` is typically used as a top level wrapper, to provide a keymap.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`import {Keymap, KeymapProvider} from '@intellij-platform/core';\n\nconst keymap: Keymap = isMac() ? macKeymap : defaultKeymap;\n<KeymapProvider keymap={keymap}>...</KeyMapProvider>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"differences-with-the-intellij-platform\"\n    }}>{`Differences with the Intellij Platform`}</h2>\n    <p>{`While the action system almost replicates `}<a parentName=\"p\" {...{\n        \"href\": \"https://plugins.jetbrains.com/docs/intellij/basic-action-system.html\"\n      }}>{`Intellij Platform's Action System`}</a>{`, there are some design\ndifferences worth noting:`}</p>\n    <p>{`TODO`}</p>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXLayout","MDXContent","_ref","components","props","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}