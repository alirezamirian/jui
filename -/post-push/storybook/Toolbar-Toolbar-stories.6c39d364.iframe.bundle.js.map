{"version":3,"file":"Toolbar-Toolbar-stories.6c39d364.iframe.bundle.js","mappings":";;;;;;AAuJA;AACA;;AAEA;;AAIA","sources":["webpack://@intellij-platform/core/./src/Toolbar/Toolbar.stories.tsx"],"sourcesContent":["import React from \"react\";\nimport { ArgTypes, Meta, StoryObj } from \"@storybook/react\";\nimport {\n  ActionTooltip,\n  IconButton,\n  Item,\n  Menu,\n  MenuTrigger,\n  PlatformIcon,\n  styled,\n  ToolbarSeparator,\n  TooltipTrigger,\n} from \"@intellij-platform/core\";\nimport { Toolbar, ToolbarProps as OriginalToolbarProps } from \"./Toolbar\";\n\n// The way overflowBehavior is defined on toolbar props breaks how composeStories infers the type of stories.\n// This is a patch to solve that type issue. Would be nicer to isolate the patch to Toolbar.cy.tsx, but couldn't figure\n// a good way of doing so.\ntype ToolbarProps = Omit<OriginalToolbarProps, \"overflowBehavior\"> & {\n  overflowBehavior: \"wrap\" | \"popup\";\n};\n\nexport default {\n  title: \"Components/Toolbar\",\n  component: Toolbar,\n  args: {\n    children: (\n      <>\n        <IconButton aria-label=\"Hide\">\n          <PlatformIcon icon=\"actions/arrowCollapse\" />\n        </IconButton>\n        <ToolbarSeparator />\n        <IconButton aria-label=\"Add\">\n          <PlatformIcon icon=\"general/add\" />\n        </IconButton>\n        <IconButton aria-label=\"Checkout\">\n          <PlatformIcon icon=\"actions/checkOut\" />\n        </IconButton>\n        <IconButton aria-label=\"Delete\">\n          <PlatformIcon icon=\"actions/gc\" />\n        </IconButton>\n        <IconButton aria-label=\"Show Diff\">\n          <PlatformIcon icon=\"actions/diff\" />\n        </IconButton>\n        <IconButton aria-label=\"Find\">\n          <PlatformIcon icon=\"actions/find\" />\n        </IconButton>\n        <ToolbarSeparator />\n        <IconButton aria-label=\"Expand All\">\n          <PlatformIcon icon=\"actions/expandall\" />\n        </IconButton>\n        <IconButton aria-label=\"Collapse All\">\n          <PlatformIcon icon=\"actions/collapseall\" />\n        </IconButton>\n      </>\n    ),\n  },\n  argTypes: {},\n} as Meta<ToolbarProps>;\n\nconst render = (props: ToolbarProps) => {\n  return <Toolbar {...props}></Toolbar>;\n};\n\nexport const Horizontal: StoryObj<ToolbarProps> = {\n  render,\n  args: {\n    orientation: \"horizontal\",\n  },\n};\n\nconst sizeArgType: ArgTypes[string] = {\n  control: {\n    type: \"range\",\n    min: 0,\n    max: 300,\n    step: 10,\n  },\n};\n\ntype HorizontalOverflowProps = ToolbarProps & { containerWidth: number };\ntype VerticalOverflowProps = ToolbarProps & { containerHeight: number };\nexport const HorizontalOverflow: StoryObj<HorizontalOverflowProps> = {\n  render: ({\n    containerWidth = 140,\n    children,\n    ...props\n  }: HorizontalOverflowProps) => (\n    <div style={{ width: containerWidth }}>\n      <Toolbar {...props}>{children}</Toolbar>\n    </div>\n  ),\n  args: {\n    orientation: \"horizontal\",\n  },\n  argTypes: {\n    containerWidth: sizeArgType,\n  },\n};\n\nexport const OverflowWrap: StoryObj<HorizontalOverflowProps> = {\n  ...HorizontalOverflow,\n  args: {\n    ...HorizontalOverflow.args,\n    overflowBehavior: \"wrap\",\n  },\n};\n\nexport const Vertical: StoryObj<ToolbarProps> = {\n  render,\n  args: {\n    orientation: \"vertical\",\n  },\n};\nexport const VerticalOverflow: StoryObj<VerticalOverflowProps> = {\n  render: ({\n    containerHeight = 140,\n    children,\n    ...props\n  }: VerticalOverflowProps) => (\n    <div style={{ height: containerHeight }}>\n      <Toolbar {...props}>{children}</Toolbar>\n    </div>\n  ),\n  args: {\n    orientation: \"vertical\",\n  },\n  argTypes: {\n    containerHeight: sizeArgType,\n  },\n};\nexport const OverflowFittedInViewport: StoryObj<HorizontalOverflowProps> = {\n  render: (props: HorizontalOverflowProps, context: any) => (\n    <div style={{ display: \"flex\", justifyContent: \"end\", paddingRight: 20 }}>\n      {HorizontalOverflow.render?.(props as any, context)}\n    </div>\n  ),\n  args: {\n    orientation: \"horizontal\",\n  },\n  argTypes: {\n    containerWidth: sizeArgType,\n  },\n};\n\nconst StyledDropdownButton = styled.button`\n  all: unset;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem;\n  padding-left: 0.25rem;\n  background: ${({ theme }) => theme.color(\"ComboBoxButton.background\")};\n  color: ${({ theme }) => theme.color(\"ComboBox.disabledForeground\")};\n  &:hover {\n    color: ${({ theme }) => theme.color(\"*.foreground\")};\n  }\n`;\n\nexport const OverflowWithCustomItems: StoryObj<HorizontalOverflowProps> = {\n  render: ({ containerWidth = 140, ...props }: HorizontalOverflowProps) => (\n    <div style={{ width: containerWidth }}>\n      <Toolbar {...props}>\n        <MenuTrigger\n          renderMenu={({ menuProps }) => (\n            <Menu {...menuProps}>\n              <Item>Select...</Item>\n              <Item>Last 24 hours</Item>\n              <Item>Last 7 days</Item>\n            </Menu>\n          )}\n        >\n          {(props, ref) => (\n            <StyledDropdownButton {...props} ref={ref}>\n              Date <PlatformIcon icon=\"general/arrowDownSmall.svg\" />\n            </StyledDropdownButton>\n          )}\n        </MenuTrigger>\n        <MenuTrigger\n          renderMenu={({ menuProps }) => (\n            <Menu {...menuProps}>\n              <Item>Select...</Item>\n              <Item>me</Item>\n            </Menu>\n          )}\n        >\n          {(props, ref) => (\n            <StyledDropdownButton {...props} ref={ref}>\n              User <PlatformIcon icon=\"general/arrowDownSmall.svg\" />\n            </StyledDropdownButton>\n          )}\n        </MenuTrigger>\n        <MenuTrigger\n          renderMenu={({ menuProps }) => (\n            <Menu {...menuProps}>\n              <Item>Select in...</Item>\n              <Item>Select in Tree...</Item>\n            </Menu>\n          )}\n        >\n          {(props, ref) => (\n            <StyledDropdownButton {...props} ref={ref}>\n              Paths <PlatformIcon icon=\"general/arrowDownSmall.svg\" />\n            </StyledDropdownButton>\n          )}\n        </MenuTrigger>\n        <ToolbarSeparator />\n        <TooltipTrigger\n          tooltip={<ActionTooltip actionName={\"Open New Git Log Tab\"} />}\n        >\n          <IconButton aria-label=\"Checkout\">\n            <PlatformIcon icon=\"actions/openNewTab.svg\" />\n          </IconButton>\n        </TooltipTrigger>\n      </Toolbar>\n    </div>\n  ),\n  args: {\n    orientation: \"horizontal\",\n  },\n  argTypes: {\n    containerWidth: sizeArgType,\n  },\n};\n\nexport const LastItemDivider: StoryObj<ToolbarProps> = {\n  render: ({ children, ...props }: ToolbarProps) => (\n    <Toolbar {...props}>\n      {children}\n      <ToolbarSeparator />\n    </Toolbar>\n  ),\n};\n\nexport const FirstItemDivider: StoryObj<ToolbarProps> = {\n  render: ({ children, ...props }: ToolbarProps) => (\n    <Toolbar {...props}>\n      <ToolbarSeparator />\n      {children}\n    </Toolbar>\n  ),\n};\n"],"names":[],"sourceRoot":""}