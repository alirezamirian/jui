"use strict";(self.webpackChunk_intellij_platform_core=self.webpackChunk_intellij_platform_core||[]).push([[7432],{"./src/Button/Button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>Button});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_react_aria_button__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/@react-aria/button/dist/useButton.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@react-aria/utils/dist/useObjectRef.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@react-aria/utils/dist/filterDOMProps.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/Button/StyledButton.tsx"),_intellij_platform_core_Mnemonic__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/Mnemonic/MnemonicTrigger.tsx");const variants={default:_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_1__.TA,icon:_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_1__.Bj},Button=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((function Button({variant,style,className,mnemonic,...props},forwardedRef){const ref=(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_2__.U)(forwardedRef),{elementType=props.href?"a":"button"}=props,{buttonProps}=(0,_react_aria_button__WEBPACK_IMPORTED_MODULE_3__.s)({...props,elementType},ref),domProps=(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.$)(props),{autoFocus,form}=props,Component=variant&&variants[variant]||_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_1__.OV;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{as:elementType,...(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_5__.v)(domProps,buttonProps,{autoFocus,form}),style,className,ref},mnemonic?react__WEBPACK_IMPORTED_MODULE_0__.createElement(_intellij_platform_core_Mnemonic__WEBPACK_IMPORTED_MODULE_6__.$,{mnemonic,isDisabled:props.isDisabled,onTriggered:props.onPress},props.children):props.children)}));Button.__docgenInfo={description:'https://jetbrains.github.io/ui/controls/button/\n\nTODO:\n- Support for "default" button behaviour. it\'s kind of similar to a <button type="submit" /> in html, but textarea\nbehaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\nCmd+Enter should always trigger onPress. Plus, maybe it should work independent of "form" being used? or maybe it\'s\nnot a big deal to expect an ancestor "form" element, when variant is "default"?\n- "Default" style differences in Windows.\n- Gradient colors (low hanging fruit, but negligible added value).\n\nKnown issues:\n- In the original impl, default button looks the same as normal button, when focus is not within the same area that\nthe button is. For example in the commit tool window, "Commit" button which is default, is not blue, unless the\n"Commit" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n"default" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\nDefaultToolWindow is used. But we need to see if the same requirement exists in various places.\nNOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\nwhich enables "default" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n- In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\nbehaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.',methods:[],displayName:"Button",props:{variant:{required:!1,tsType:{name:"union",raw:'"default" | "icon"',elements:[{name:"literal",value:'"default"'},{name:"literal",value:'"icon"'}]},description:""},preventFocusOnPress:{required:!1,tsType:{name:"boolean"},description:""},form:{required:!1,tsType:{name:'ButtonHTMLAttributes["form"]',raw:'ButtonHTMLAttributes<HTMLButtonElement>["form"]'},description:""},style:{required:!1,tsType:{name:"CSSProperties"},description:""},mnemonic:{required:!1,tsType:{name:"string"},description:"A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\nIt will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\nNote: if you use mnemonic, and the direct child of the button is not a string, you should use `MnemonicText`\nto render the button text, to have the underlining behavior."},className:{required:!1,tsType:{name:"string"},description:""},onPress:{required:!1,tsType:{name:"signature",type:"function",raw:"(e?: PressEvent) => void",signature:{arguments:[{type:{name:"PressEvent"},name:"e"}],return:{name:"void"}}},description:"Called when the button is pressed, or triggered via mnemonic. If mnemonic is used, there won't be any event\npassed to onPress callback."}},composes:["AriaButtonProps"]}},"./src/Button/StyledButton.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Bj:()=>StyledIconButton,OV:()=>StyledButton,TA:()=>StyledDefaultButton});var _intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/styled.ts");const StyledButton=_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__.I4.button`
  box-sizing: border-box;
  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28
  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28
  height: 1.5rem;
  font-family: inherit;
  background-color: ${({theme,disabled})=>disabled?"transparent":theme.color("Button.startBackground")};
  color: ${({theme,disabled})=>disabled?theme.color("Button.disabledText"):theme.color("Button.foreground")};
  border: 1px solid
    ${({theme,disabled})=>disabled?theme.color("Button.disabledBorderColor"):theme.color("Button.startBorderColor")};
  border-radius: ${({theme})=>(theme.value("Button.arc")??6)/2}px;
  box-shadow: ${({theme})=>theme.value("Button.paintShadow")?`0 0 0 ${theme.value("Button.shadowWidth")??2}px ${theme.color("Button.shadowColor")??(theme.dark?"#36363680":"#a6a6a633")}`:""};
  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29

  flex-shrink: 0; // button should not shrink when rendered in a flex container

  a&,
  a&:hover {
    text-decoration: none;
    align-content: center;
    text-align: center;
    display: inline-block;
  }

  &:focus,
  &.focus /* for testing purposes*/ {
    border-color: ${({theme})=>theme.color("Button.focusedBorderColor","#87afda")};
    outline: none;
    box-shadow: ${({theme})=>`0 0 0 2px ${theme.color("Component.focusColor")??theme.color("Focus.borderColor","#8ab2eb")}`};
  }
`,StyledDefaultButton=(0,_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__.I4)(StyledButton)`
  background-color: ${({theme,disabled})=>!disabled&&theme.color("Button.default.startBackground","#384f6b")};
  color: ${({theme,disabled})=>!disabled&&theme.color("Button.default.foreground")};
  border-color: ${({theme,disabled})=>!disabled&&theme.color("Button.default.startBorderColor","#BFBFBF")};
  &:focus,
  &.focus /* for testing purposes*/ {
    border-color: ${({theme})=>theme.color("Button.default.focusedBorderColor","#87afda")};
  }
`,StyledIconButton=(0,_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__.I4)(StyledButton)`
  border-radius: 1000px;
  padding: 0;
  line-height: 0;
  min-width: 0;
  height: 1.5rem;
  width: 1.5rem;
`},"./src/ButtonGroup/ButtonGroup.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{e:()=>ButtonGroup});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_react_aria_focus__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("../../node_modules/@react-aria/focus/dist/FocusScope.mjs"),_react_aria_interactions__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@react-aria/interactions/dist/useKeyboard.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),_intellij_platform_core_utils_keyboard_utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/utils/keyboard-utils.ts");const StyledButtonGroup=__webpack_require__("./src/styled.ts").I4.div`
  display: inline-flex;
  align-items: center;
  gap: 0.75rem;
`;function ButtonGroup(props){return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.n1,null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(HorizontalArrowKeyNavigation,null,(arrowKeyNavigationProps=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledButtonGroup,(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.v)(props,arrowKeyNavigationProps)))))}function HorizontalArrowKeyNavigation({children}){const focusManager=(0,_react_aria_focus__WEBPACK_IMPORTED_MODULE_2__.H8)(),{keyboardProps}=(0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_4__.d)({onKeyDown:e=>{if(!(0,_intellij_platform_core_utils_keyboard_utils__WEBPACK_IMPORTED_MODULE_5__.w)(e)){if("ArrowLeft"===e.key)return focusManager?.focusPrevious({wrap:!0});if("ArrowRight"===e.key)return focusManager?.focusNext({wrap:!0})}e.continuePropagation()}});return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,children(keyboardProps))}ButtonGroup.__docgenInfo={description:"`ButtonGroup` should be used as a wrapper around related {@link Button Buttons}, in places such as the\nfooter of a dialog. It does two things:\n- allows for moving the focus between the buttons with left/right arrow keys.\n- applies the right spacing between the buttons\n\n@see Button",methods:[],displayName:"ButtonGroup",props:{children:{required:!0,tsType:{name:"ReactNode"},description:""},className:{required:!1,tsType:{name:"string"},description:""},style:{required:!1,tsType:{name:"CSSProperties"},description:""}}}},"./src/Checkbox/Checkbox.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{S:()=>Checkbox});var react=__webpack_require__("../../node_modules/react/index.js"),useToggleState=__webpack_require__("../../node_modules/@react-stately/toggle/dist/useToggleState.mjs"),useCheckbox=__webpack_require__("../../node_modules/@react-aria/checkbox/dist/useCheckbox.mjs"),useFocusRing=__webpack_require__("../../node_modules/@react-aria/focus/dist/useFocusRing.mjs"),mergeProps=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),styled=__webpack_require__("./src/styled.ts"),LafIcon=__webpack_require__("./src/Icon/LafIcon.tsx");const CheckboxIcon=({isDisabled,isFocused,isIndeterminate,isSelected,...otherProps})=>react.createElement(LafIcon.j,{...otherProps,size:20,icon:{name:isIndeterminate?"checkBoxIndeterminate":"checkBox",modifiers:{Disabled:isDisabled,Selected:isSelected||isIndeterminate,Focused:isFocused}}});CheckboxIcon.__docgenInfo={description:"Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\nwith the interactions",methods:[],displayName:"CheckboxIcon",props:{isIndeterminate:{required:!0,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isFocused:{required:!0,tsType:{name:"boolean"},description:""},isDisabled:{required:!0,tsType:{name:"union",raw:"boolean | undefined",elements:[{name:"boolean"},{name:"undefined"}]},description:""},isSelected:{required:!0,tsType:{name:"boolean"},description:""}}};var MnemonicTrigger=__webpack_require__("./src/Mnemonic/MnemonicTrigger.tsx");const StyledWrapperLabel=styled.I4.label`
  position: relative;
  display: inline-flex;
  align-items: center;
`,StyledCheckboxLabelText=styled.I4.span`
  margin-left: 0.25rem;
  color: ${({theme,isDisabled})=>isDisabled?theme.color("CheckBox.disabledText","#808080"):theme.color("*.foreground")};
`,StyledInput=styled.I4.input`
  opacity: 0.0001;
  position: absolute;
  z-index: 1;
  inset: 0;
  cursor: default;
  &:disabled {
    cursor: default;
  }
`,Checkbox=({preventFocus,className,disableFocusAlwaysVisible,mnemonic,...props})=>{const state=(0,useToggleState.H)(props),ref=react.useRef(null),{inputProps}=(0,useCheckbox.v)(props,state,ref),{isFocusVisible,isFocused,focusProps}=(0,useFocusRing.o)({autoFocus:props.autoFocus}),focusDisabledProps=preventFocus?{onFocusCapture:event=>{event.stopPropagation(),event.preventDefault(),event.relatedTarget instanceof HTMLElement?event.relatedTarget.focus():event.target.blur()},tabIndex:-1}:{};return react.createElement(StyledWrapperLabel,{className},react.createElement(StyledInput,{...(0,mergeProps.v)(inputProps,focusProps,focusDisabledProps),ref}),react.createElement(CheckboxIcon,{isIndeterminate:props.isIndeterminate,isFocused:disableFocusAlwaysVisible?isFocusVisible:isFocused,isSelected:props.isIndeterminate||state.isSelected,isDisabled:props.isDisabled,"aria-hidden":"true",style:{pointerEvents:"none"}}),props.children&&react.createElement(StyledCheckboxLabelText,{isDisabled:props.isDisabled},mnemonic?react.createElement(MnemonicTrigger.$,{mnemonic,isDisabled:props.isDisabled,onTriggered:state.toggle},props.children):props.children))};Checkbox.__docgenInfo={description:"Checkbox component to be used with or without a label.\n\nWhile the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\nuse a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\nany input, state, etc.",methods:[],displayName:"Checkbox",props:{preventFocus:{required:!1,tsType:{name:"boolean"},description:'If set to true, the checkbox won\'t be focusable.\nCommon use cases:\n- When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n  from that container.\n- "Amend" checkbox in "Commit" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n  a questionably better UX.\nNote: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn\'t\nlet the component get focused at all.\nTODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.'},disableFocusAlwaysVisible:{required:!1,tsType:{name:"boolean"},description:"By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\nif set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\nSimilar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works."},isIndeterminate:{required:!1,tsType:{name:"boolean"},description:"Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction."},children:{required:!1,tsType:{name:"ReactNode"},description:"The label for the element."},defaultSelected:{required:!1,tsType:{name:"boolean"},description:"Whether the element should be selected (uncontrolled)."},isSelected:{required:!1,tsType:{name:"boolean"},description:"Whether the element should be selected (controlled)."},onChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(isSelected: boolean) => void",signature:{arguments:[{type:{name:"boolean"},name:"isSelected"}],return:{name:"void"}}},description:"Handler that is called when the element's selection state changes."},value:{required:!1,tsType:{name:"string"},description:"The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue)."},name:{required:!1,tsType:{name:"string"},description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname)."},className:{required:!1,tsType:{name:"string"},description:""},mnemonic:{required:!1,tsType:{name:"string"},description:"A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\nIt will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\nNote: if you use mnemonic, and the direct child of the button is not a string, you should use `Mnemonic.Text`\nto render the button text, to have the underlining behavior."}},composes:["InputBase","FocusableDOMProps","AriaLabelingProps","FocusableProps"]}},"./src/Mnemonic/MnemonicTrigger.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{$:()=>MnemonicTrigger,y:()=>MnemonicText});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_intellij_platform_core_utils_useEventCallback__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/utils/useEventCallback.ts");const MnemonicContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({character:null,active:!1,rendered:()=>{}}),MnemonicTrigger=({children,mnemonic,isDisabled,onTriggered:onTriggeredProp=(()=>{})})=>{const ref=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),onTriggered=(0,_intellij_platform_core_utils_useEventCallback__WEBPACK_IMPORTED_MODULE_1__.D)(onTriggeredProp),[active,setActive]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),keydownListener=(0,_intellij_platform_core_utils_useEventCallback__WEBPACK_IMPORTED_MODULE_1__.D)((e=>{if(!isDisabled){if(active&&!e.repeat){const character=e.code.match(/Key([A-Z])/)?.[1];character&&character.toLowerCase()===mnemonic.toLowerCase()&&(e.preventDefault(),onTriggered())}"Alt"===e.key&&ref.current&&function isAccessible(element){return!element.closest("[aria-hidden]")&&null!==element.parentElement&&function isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}(element.parentElement)}(ref.current)&&setActive(!0)}}));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{function onBlur(){setActive(!1)}function keyupListener(e){"Alt"===e.key&&setActive(!1)}return document.addEventListener("keydown",keydownListener),document.addEventListener("keyup",keyupListener),window.addEventListener("blur",onBlur),()=>{document.removeEventListener("keydown",keydownListener),document.removeEventListener("keyup",keyupListener),window.removeEventListener("blur",onBlur)}}),[]);const renderedMnemonicRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)("");return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const timerId=setTimeout((()=>{renderedMnemonicRef.current!==mnemonic&&console.warn(`Mnemonic ${mnemonic} was set but not rendered to the user. \nMake sure the specified character is rendered directly in MnemonicTrigger, or wrapped by MnemonicText inside MnemonicTrigger children. \nElement:`,ref.current?.parentElement)}));return()=>{clearTimeout(timerId)}}),[mnemonic]),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MnemonicContext.Provider,{value:{character:mnemonic,active,rendered:()=>{renderedMnemonicRef.current=mnemonic}}},react__WEBPACK_IMPORTED_MODULE_0__.createElement("span",{hidden:!0,ref}),"string"==typeof children?react__WEBPACK_IMPORTED_MODULE_0__.createElement(MnemonicText,null,children):children)};function MnemonicText({children}){const{character,active,rendered}=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MnemonicContext);if(character){const index=[children.match(new RegExp(`^${character}`,"i"))?.index??-1,(children.match(new RegExp(` ${character}`,"i"))?.index??-2)+1,children.toLowerCase().indexOf(character.toLowerCase())].find((index=>index>=0))??-1,found=index>-1;if(found&&rendered(),found&&active)return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,children.slice(0,index),react__WEBPACK_IMPORTED_MODULE_0__.createElement("u",null,children.slice(index,index+1)),children.slice(index+1))}return react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment,null,children)}MnemonicTrigger.__docgenInfo={description:"",methods:[],displayName:"MnemonicTrigger",props:{children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},mnemonic:{required:!0,tsType:{name:"string"},description:"Character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic}."},onTriggered:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when mnemonic key is pressed with the activator key",defaultValue:{value:"() => {}",computed:!1}},isDisabled:{required:!1,tsType:{name:"boolean"},description:"Whether the mnemonic is disabled. Useful when setting mnemonic on disable-able components, to just pass\nisDisabled prop down to MnemonicTrigger"}}},MnemonicText.__docgenInfo={description:'Used inside MnemonicTrigger children, when the direct child can\'t be a string.\n@example\n```tsx\n<MnemonicTrigger mnemonic="D">\n   <>\n     <MnemonicText>Disconnect</MnemonicText>\n   </>\n</MnemonicTrigger>\n```',methods:[],displayName:"MnemonicText",props:{children:{required:!0,tsType:{name:"string"},description:""}}}},"./src/ModalWindow/ModalWindow.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{QI:()=>ModalWindow,HV:()=>StyledWindowContainer,Gq:()=>WindowControllerContext});var react=__webpack_require__("../../node_modules/react/index.js"),useOverlayTriggerState=__webpack_require__("../../node_modules/@react-stately/overlays/dist/useOverlayTriggerState.mjs"),useModalOverlay=__webpack_require__("../../node_modules/@react-aria/overlays/dist/useModalOverlay.mjs"),usePreventScroll=__webpack_require__("../../node_modules/@react-aria/overlays/dist/usePreventScroll.mjs"),Overlay=__webpack_require__("../../node_modules/@react-aria/overlays/dist/Overlay.mjs"),FocusScope=__webpack_require__("../../node_modules/@react-aria/focus/dist/FocusScope.mjs"),useDialog=__webpack_require__("../../node_modules/@react-aria/dialog/dist/useDialog.mjs"),styled=__webpack_require__("./src/styled.ts"),platform=__webpack_require__("../../node_modules/@react-aria/utils/dist/platform.mjs"),mergeProps=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),useResizableMovableOverlay=__webpack_require__("./src/Overlay/useResizableMovableOverlay.tsx"),OverlayInteractionHandler=__webpack_require__("./src/Overlay/OverlayInteractionHandler.tsx"),OverlayResizeHandles=__webpack_require__("./src/Overlay/OverlayResizeHandles.tsx"),WindowContext=__webpack_require__("./src/ModalWindow/WindowContext.ts"),useEventCallback=__webpack_require__("./src/utils/useEventCallback.ts");function UNSAFE_React17SuspenseFix({measureContentSize,children}){return react.version.startsWith("17")?react.createElement(react.Suspense,{fallback:react.createElement(NullSuspenseFallback,{afterUnsuspended:measureContentSize})},children):react.createElement(react.Fragment,null,children)}function NullSuspenseFallback({afterSuspended:afterSuspendedProp=(()=>{}),afterUnsuspended:afterUnsuspendedProp=(()=>{})}){const afterSuspended=(0,useEventCallback.D)(afterSuspendedProp),afterUnsuspended=(0,useEventCallback.D)(afterUnsuspendedProp);return(0,react.useEffect)((()=>(afterSuspended?.(),()=>{afterUnsuspended?.()})),[]),null}UNSAFE_React17SuspenseFix.__docgenInfo={description:"A workaround for an issue in measuring overlay size, caused by a limitation/bug in how React 17 runs effects when\nchildren suspend rendering: https://github.com/facebook/react/issues/21510\n\nHere is a simplified demonstration of the issue:\nExpected behavior (React 18): https://codesandbox.io/s/parent-effects-suspense-v18-38m8p7?file=/src/App.tsx\nBroken behavior (React 17): https://codesandbox.io/s/parent-effects-suspense-v17-h39g4g\n\nThe overlay content size measuring runs in an effect, and that effect won't run when the content is rendered after\nsuspense.",methods:[],displayName:"UNSAFE_React17SuspenseFix",props:{measureContentSize:{required:!0,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}}};var DelayedLoadingSpinner=__webpack_require__("./src/LoadingSpinner/DelayedLoadingSpinner.tsx");const StyledWindowUnderlay=styled.I4.div`
  position: fixed;
  z-index: 1000; // FIXME: z-index should not be hard-coded like this
  inset: 0;
  align-content: center; // for loading
`,WINDOW_SHADOW=(0,platform.cX)()?styled.AH`
      box-shadow: 0 22px 70px 4px rgba(0, 0, 0, 0.56),
        0 0 0 1px #747474
          /* FIXME: it's not accurate. In macOS the outline has a gradient*/;
    `:styled.AH`
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.15), 0 8px 12px rgba(0, 0, 0, 0.1),
        inset 0 0 0 1px #515355;
    `,StyledWindowContainer=styled.I4.div`
  position: fixed;
  // not checked if there should be a better substitute for * in the following colors. Maybe "Component"?
  background-color: ${({theme})=>theme.color("*.background")};
  color: ${({theme})=>theme.color("*.foreground")};
  border-radius: 8px;
  outline: none;
  ${WINDOW_SHADOW};
`,StyledWindowInnerContainer=styled.I4.div`
  height: inherit;
  overflow: hidden;
  display: flex;
  flex-direction: column;
`,WindowControllerContext=react.createContext({}),StyledDelayedLoadingSpinner=(0,styled.I4)(DelayedLoadingSpinner.e)`
  display: block;
  margin: auto;
`,ModalWindow=({interactions="all",minWidth=50,minHeight=24,className,suspense,...props})=>{const propsContext=(0,react.useContext)(WindowControllerContext),ref=react.useRef(null),{modalProps,underlayProps}=(0,useModalOverlay.l)({isDismissable:!1,isKeyboardDismissDisabled:!1},(0,useOverlayTriggerState.T)({isOpen:!0,onOpenChange:isOpen=>{isOpen||(propsContext.onClose?.(),props.onClose?.())}}),ref);(0,usePreventScroll.H)();const MaybeSuspend=!1===suspense?react.Fragment:react.Suspense;return react.createElement(Overlay.hJ,{disableFocusManagement:!0},react.createElement(StyledWindowUnderlay,{...underlayProps,className},react.createElement(MaybeSuspend,{fallback:void 0===suspense?react.createElement(StyledDelayedLoadingSpinner,null):suspense},react.createElement(WindowFrame,{modalProps,windowRef:ref,modalWindowProps:{...props,minHeight,minWidth,interactions}}))))};function WindowFrame({windowRef,modalProps,modalWindowProps:{minWidth,minHeight,interactions,children,...modalWindowProps}}){const{dialogProps,titleProps}=(0,useDialog.s)(modalWindowProps,windowRef),{bounds:style,overlayInteractionHandlerProps,UNSAFE_measureContentSize}=(0,useResizableMovableOverlay.b)(windowRef,{...modalWindowProps,minHeight,minWidth});return react.createElement(OverlayInteractionHandler.D,overlayInteractionHandlerProps,react.createElement(FocusScope.n1,{contain:!0,restoreFocus:!0,autoFocus:!0},react.createElement(StyledWindowContainer,{...(0,mergeProps.v)(dialogProps,modalProps,{style}),ref:windowRef},react.createElement(StyledWindowInnerContainer,null,react.createElement(WindowContext._.Provider,{value:{isActive:!0,titleProps,movable:"none"!==interactions}},react.createElement(UNSAFE_React17SuspenseFix,{measureContentSize:UNSAFE_measureContentSize},children))),"all"===interactions&&react.createElement(OverlayResizeHandles.e,null))))}ModalWindow.__docgenInfo={description:'A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\nIn the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\nare not relevant here since they wouldn\'t be os-native windows. A close button is still relevant (and kind of\nnecessary) and will be added in next iterations.\n\nThe content container doesn\'t come with any padding. Other related components should be used for common layouts in\nmodal windows.\nExample use cases: Window for git operations such as push, update, revert, new branch, etc.\n\n![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n\nNOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\noverlay container could be extracted into a component which is then used to create custom resizable/movable overlay\ndialogs, like "Branches", or "Search Everywhere".\n\nTODO: show close button (maybe os-aware styles?)',methods:[],displayName:"ModalWindow",props:{onBoundsChange:{required:!1,tsType:{name:"signature",type:"function",raw:'(bounds: Bounds, interactionType: "move" | "resize") => void',signature:{arguments:[{type:{name:"signature",type:"object",raw:"{\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}",signature:{properties:[{key:"top",value:{name:"number",required:!0}},{key:"left",value:{name:"number",required:!0}},{key:"width",value:{name:"number",required:!0}},{key:"height",value:{name:"number",required:!0}}]}},name:"bounds"},{type:{name:"union",raw:'"move" | "resize"',elements:[{name:"literal",value:'"move"'},{name:"literal",value:'"resize"'}]},name:"interactionType"}],return:{name:"void"}}},description:""},onBoundsChanging:{required:!1,tsType:{name:"signature",type:"function",raw:'(\n  newBounds: Bounds,\n  /**\n   * Whether the interaction is a "move" or "resize" considering the initial bounds when interaction was started.\n   */\n  interactionType: "move" | "resize"\n) => Bounds',signature:{arguments:[{type:{name:"signature",type:"object",raw:"{\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}",signature:{properties:[{key:"top",value:{name:"number",required:!0}},{key:"left",value:{name:"number",required:!0}},{key:"width",value:{name:"number",required:!0}},{key:"height",value:{name:"number",required:!0}}]}},name:"newBounds"},{type:{name:"union",raw:'"move" | "resize"',elements:[{name:"literal",value:'"move"'},{name:"literal",value:'"resize"'}]},name:"interactionType"}],return:{name:"signature",type:"object",raw:"{\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}",signature:{properties:[{key:"top",value:{name:"number",required:!0}},{key:"left",value:{name:"number",required:!0}},{key:"width",value:{name:"number",required:!0}},{key:"height",value:{name:"number",required:!0}}]}}}},description:"For performance reason, overlay bounds is kept in a local state during a resize or move interaction, and\n`onBoundsChange` is called once at the end of interaction. `onBoundsChanging` gives a chance of rectifying\nbounds changes during an interaction to for example apply custom size/placement constraints."},bounds:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}",signature:{properties:[{key:"top",value:{name:"number",required:!0}},{key:"left",value:{name:"number",required:!0}},{key:"width",value:{name:"number",required:!0}},{key:"height",value:{name:"number",required:!0}}]}}],raw:"Partial<Bounds>"},description:"Controlled bounds. Can be a partially specified bounds.\n- If `top` not specified, the returned bounds will be centered vertically.\n- If `left` not specified, the returned bounds will be centered horizontally.\n- If `width` not specified, the width of the bounds will be based on content width.\n- If `height` not specified, the height of the bounds will be based on content height.\nNote that regardless of `bounds`, `onBoundsChange` always receives a full `bounds` object which is solely\nbased on the bounds of the overlay, at the end of an interaction."},defaultBounds:{required:!1,tsType:{name:"Partial",elements:[{name:"signature",type:"object",raw:"{\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n}",signature:{properties:[{key:"top",value:{name:"number",required:!0}},{key:"left",value:{name:"number",required:!0}},{key:"width",value:{name:"number",required:!0}},{key:"height",value:{name:"number",required:!0}}]}}],raw:"Partial<Bounds>"},description:"Default bounds in uncontrolled mode. Can be a partially specified bounds.\n- If `top` not specified, the returned bounds will be centered vertically.\n- If `left` not specified, the returned bounds will be centered horizontally.\n- If `width` not specified, the width of the bounds will be based on content width.\n- If `height` not specified, the height of the bounds will be based on content height.\nNote that regardless of `defaultBounds`, `onBoundsChange` always receives a full `bounds` object which is solely\nbased on the bounds of the overlay, at the end of an interaction."},minWidth:{required:!1,tsType:{name:"union",raw:'number | "content"',elements:[{name:"number"},{name:"literal",value:'"content"'}]},description:"",defaultValue:{value:"50",computed:!1}},minHeight:{required:!1,tsType:{name:"union",raw:'number | "content"',elements:[{name:"number"},{name:"literal",value:'"content"'}]},description:"",defaultValue:{value:"24",computed:!1}},interactions:{required:!1,tsType:{name:"union",raw:'"all" | "move" | "none"',elements:[{name:"literal",value:'"all"'},{name:"literal",value:'"move"'},{name:"literal",value:'"none"'}]},description:'Allowed interactions:\n- "all": both resizable and movable\n- "move": movable, but not resizable\n- "none": fixed size and position\nThe reason there are no `resizable` and `movable` boolean props is that resizable=true,movable=false doesn\'t make\nsense from UX perspective.\n@default "all"',defaultValue:{value:'"all"',computed:!1}},observeContentResize:{required:!1,tsType:{name:"boolean"},description:"When the size is not specified by `bounds` or `defaultBounds` props, the content size is measured and used in the\nreturned bounds. By default, the content size is measured initially. If `observeContentSize` is true, the DOM\nmutations will be observed and the content is re-measured as changes are observed."},children:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},className:{required:!1,tsType:{name:"string"},description:""},onClose:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:""},suspense:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"By default, a Suspense boundary is included around the overlays\nto avoid suspended renders from bubbling up into\nthe higher levels of the application.\nThe suspense boundary is around the overlay itself, and *inside* the modal\nunderlay (if any), which means the interaction with background content\nwill immediately get blocked until rendering is unsuspended.\nPass `false` if you don't want this behavior.\nPass anything else to render a custom Suspense fallback."}},composes:["AriaDialogProps"]}},"./src/ModalWindow/WindowContext.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{_:()=>WindowContext});const WindowContext=__webpack_require__("../../node_modules/react/index.js").createContext({isActive:!1,movable:!0,titleProps:{}})},"./src/Tooltip/HelpTooltip.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{V:()=>HelpTooltip});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/Tooltip/Tooltip.tsx");const HelpTooltip=({helpText,shortcut,link,...tooltipProps})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_1__.m_,{multiline:!0,...tooltipProps},react__WEBPACK_IMPORTED_MODULE_0__.createElement(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_1__.m_.Header,null,helpText),shortcut&&react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null,react__WEBPACK_IMPORTED_MODULE_0__.createElement(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_1__.m_.Shortcut,null,shortcut)),link&&react__WEBPACK_IMPORTED_MODULE_0__.createElement(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_1__.m_.Link,null,link));HelpTooltip.__docgenInfo={description:'Tooltip of type "Help"\n@see {@link ActionTooltip} {@link ActionHelpTooltip}\n@see https://jetbrains.github.io/ui/controls/tooltip/#02',methods:[],displayName:"HelpTooltip",props:{helpText:{required:!0,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},shortcut:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""},link:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:""}},composes:["Omit"]}}}]);
//# sourceMappingURL=7432.807a9da4.iframe.bundle.js.map