{"version":3,"file":"Menu-Menu-stories.67111ff4.iframe.bundle.js","mappings":";AAsOA;AACA;;;;;AAOA;;;;AC3NA;;AAIA;;;;AAIA;AAMA","sources":["webpack://@intellij-platform/core/./src/Menu/Menu.stories.tsx","webpack://@intellij-platform/core/./src/Menu/MenuItemLayout.tsx"],"sourcesContent":["import React, { ReactNode } from \"react\";\nimport { StoryObj, StoryFn, Meta } from \"@storybook/react\";\nimport { Item } from \"@react-stately/collections\";\nimport { ContextMenuContainer, styled } from \"@intellij-platform/core\";\n\nimport { IconButton } from \"../IconButton\";\nimport { Toolbar } from \"../Toolbar/Toolbar\";\nimport { Divider, DividerItem } from \"../Collections/Divider\";\nimport { PlatformIcon } from \"../Icon\";\nimport { styledComponentsControlsExclude } from \"../story-helpers\";\nimport { Menu, MenuProps } from \"./Menu\";\nimport { MenuItemLayout } from \"./MenuItemLayout\";\nimport { MenuTrigger, MenuTriggerProps } from \"./MenuTrigger\";\nimport { ExampleMenuItem, renderItem, viewModeItems } from \"./story-helpers\";\n\nconst exampleMenuItems: Array<ExampleMenuItem> = [\n  {\n    title: \"View Mode\",\n    subItems: viewModeItems,\n  },\n  new DividerItem(),\n  {\n    title: \"Group tabs\",\n    icon: \"toolwindows/documentation\",\n    shortcut: \"^G\",\n  },\n];\n\nexport default {\n  title: \"Components/Menu\",\n  component: Menu,\n  parameters: {\n    controls: { exclude: styledComponentsControlsExclude },\n  },\n  args: {\n    items: exampleMenuItems,\n    \"aria-label\": \"Menu\",\n    children: renderItem,\n    onAction: (key) => {\n      alert(`action: ${key}`);\n    },\n    onClose: () => {\n      console.log(\"close\");\n    },\n  },\n} as Meta<MenuProps<unknown>>;\n\nconst Template: StoryFn<MenuProps<ExampleMenuItem>> = (\n  props: MenuProps<ExampleMenuItem>\n) => <Menu {...props} />;\n\nexport const Static = Template.bind(null);\n\nStatic.args = {\n  disabledKeys: [\"jumpToExternalEditor\"],\n  children: (\n    <>\n      <Item textValue=\"Cut\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n          content=\"Cut\"\n          shortcut={\"⌘X\"}\n        />\n      </Item>\n      <Item textValue=\"Copy\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/copy\"} />}\n          content=\"Copy\"\n          shortcut={\"⌘C\"}\n        />\n      </Item>\n      <Item textValue=\"Paste\" key=\"Paste\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/menu-paste\"} />}\n          content=\"Paste\"\n          shortcut={\"⌘V\"}\n        />\n      </Item>\n      <Divider />\n      <Item>Reformat Code</Item>\n      <Item textValue=\"Optimize Imports\">\n        <MenuItemLayout content=\"Optimize Imports\" shortcut={\"⌃⌥O\"} />\n      </Item>\n      <Item textValue=\"Delete\">\n        <MenuItemLayout content=\"Delete\" shortcut={\"⌫\"} />\n      </Item>\n      <Divider />\n      <Item textValue=\"Compare with...\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/diff\"} />}\n          content=\"Compare with...\"\n        />\n      </Item>\n      <Divider />\n      <Item key=\"jumpToExternalEditor\" textValue=\"Jump to external editor\">\n        <MenuItemLayout content=\"Jump to external editor\" shortcut={\"⌥⌘F4\"} />\n      </Item>\n    </>\n  ).props.children,\n};\n\nexport const AutoFocusFirst = Template.bind(null);\nAutoFocusFirst.args = {\n  autoFocus: \"first\",\n};\n\nexport const StaticWithTextItems: StoryFn = () => (\n  <Menu>\n    <Item>Restart Typescript Service</Item>\n    <Item title=\"Compile\">\n      <Item>packages/jui/tsconfig.json</Item>\n      <Item>packages/jui/src/StatusBar/StatusBar.stories.tsx</Item>\n      <Item>Compile All</Item>\n    </Item>\n  </Menu>\n);\n\nexport const Nested = Template.bind(null);\n\nNested.args = {\n  items: exampleMenuItems,\n  disabledKeys: [\"Float\"],\n};\n\nexport const Position = {\n  render: ({ offsetRight = 230 }: { offsetRight: number }) => {\n    return (\n      <div style={{ paddingLeft: `calc(100% - ${offsetRight}px)` }}>\n        <Menu items={exampleMenuItems}>{renderItem}</Menu>\n      </div>\n    );\n  },\n};\n\nexport const ToggleSubmenuOnPress = Template.bind(null);\nToggleSubmenuOnPress.args = {\n  submenuBehavior: \"toggleOnPress\",\n};\n\nexport const SubmenuWithAction = Template.bind(null);\nSubmenuWithAction.args = {\n  submenuBehavior: \"actionOnPress\",\n};\n\nexport const Sections = Template.bind(null);\nSections.args = {\n  items: [\n    {\n      title: \"Local Branches\",\n      subItems: [\n        { title: \"master\", subItems: [{ title: \"Pull\" }, { title: \"Update\" }] },\n        { title: \"dev\" },\n      ],\n      section: true,\n    },\n    {\n      title: \"Remote Branches\",\n      subItems: [\n        {\n          title: \"origin/master\",\n          subItems: [{ title: \"Checkout\" }],\n        },\n        { title: \"origin/dev\" },\n      ],\n      section: true,\n    },\n    {\n      title: \"Empty section\",\n      subItems: [],\n      section: true,\n    },\n  ],\n};\n\nexport const MenuWithTrigger: StoryObj<\n  {\n    offsetRight?: number;\n    offsetBottom?: number;\n    menuProps: Partial<MenuProps<any>>;\n  } & Pick<MenuTriggerProps, \"preventFocusOnPress\" | \"restoreFocus\">\n> = {\n  render: ({\n    offsetRight,\n    offsetBottom,\n    menuProps: otherMenuProps,\n    ...otherProps\n  }) => {\n    return (\n      <div\n        style={{\n          paddingLeft:\n            offsetRight != undefined\n              ? `calc(100% - ${offsetRight + 24}px)`\n              : undefined,\n          paddingTop:\n            offsetBottom != undefined\n              ? `calc(100% - ${offsetBottom + 24}px)`\n              : undefined,\n        }}\n      >\n        <Toolbar>\n          <MenuTrigger\n            {...otherProps}\n            renderMenu={({ menuProps }) => (\n              <Menu\n                items={exampleMenuItems}\n                disabledKeys={[\"Float\"]}\n                {...menuProps}\n                {...otherMenuProps}\n                onAction={(key) => {\n                  console.log(\"onAction\", key);\n                }}\n              >\n                {renderItem}\n              </Menu>\n            )}\n          >\n            {(props, ref) => (\n              <IconButton {...props} ref={ref}>\n                <PlatformIcon icon={\"general/gearPlain\"} />\n              </IconButton>\n            )}\n          </MenuTrigger>\n        </Toolbar>\n      </div>\n    );\n  },\n};\n\nconst StyledContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground};\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100vh;\n`;\n\nexport const ContextMenu: StoryObj<{\n  children?: ReactNode;\n  noScroll?: boolean;\n  menuProps?: Partial<MenuProps<object>>;\n}> = {\n  render: ({ children, noScroll, menuProps = {} }) => {\n    return (\n      <>\n        <div\n          style={{\n            height: \"25vh\",\n            background: `repeating-linear-gradient(45deg, #aaa, #aaa 10px, #999 10px, #999 20px)`,\n          }}\n        />\n        <ContextMenuContainer\n          id=\"context-menu-container\"\n          renderMenu={() => (\n            <Menu aria-label=\"Editor Context Menu\" {...menuProps}>\n              <Item textValue=\"Column Selection Mode\">\n                <MenuItemLayout\n                  content=\"Column Selection Mode\"\n                  shortcut=\"⇧⌘8\"\n                />\n              </Item>\n              <Divider />\n              <Item title=\"Go to\">\n                <Item textValue=\"Navigation Bar\">\n                  <MenuItemLayout content=\"Navigation Bar\" shortcut=\"`⌘↑`\" />\n                </Item>\n                <Item textValue=\"Implementation(s)\">\n                  <MenuItemLayout content=\"Implementation(s)\" shortcut=\"⌥⌘B\" />\n                </Item>\n              </Item>\n              <Item textValue=\"Generate\">\n                <MenuItemLayout content=\"Generate\" shortcut=\"⌘N\" />\n              </Item>\n              <Divider />\n              <Item title=\"Local History\">\n                <Item>Show History</Item>\n                <Item>Put Label...</Item>\n              </Item>\n              <Divider />\n              <Item textValue=\"Compare with Clipboard\">\n                <MenuItemLayout\n                  icon={<PlatformIcon icon={\"actions/diff\"} />}\n                  content=\"Compare with Clipboard\"\n                />\n              </Item>\n            </Menu>\n          )}\n        >\n          <StyledContainer style={{ height: noScroll ? \"75vh\" : undefined }}>\n            Right click somewhere. {children}\n          </StyledContainer>\n        </ContextMenuContainer>\n      </>\n    );\n  },\n\n  parameters: {\n    layout: \"fullscreen\",\n  },\n};\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n"],"names":[],"sourceRoot":""}