{"version":3,"file":"assets/js/32fce562.fa0a5ad5.js","mappings":"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","sources":["webpack://website/./src/components/ExampleContext.tsx","webpack://website/./docs/components/Checkbox.mdx"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport BrowserOnly from \"@docusaurus/BrowserOnly\";\n\nimport darculaTheme from \"../../../jui/themes/darcula.theme.json\";\nimport highContrastTheme from \"../../../jui/themes/HighContrast.theme.json\";\nimport lightTheme from \"../../../jui/themes/intellijlaf.theme.json\";\nimport { Theme, ThemeProvider } from \"../../../jui/src\";\n\nexport type ExampleContextThemeName = \"light\" | \"darcula\" | \"highContrast\";\n\nexport const ExampleContext: React.FC<{\n  themeName?: ExampleContextThemeName;\n  children?: React.ReactNode;\n}> = ({ children, themeName = \"darcula\" }) => {\n  const themeJson = (\n    {\n      light: lightTheme,\n      highContrast: highContrastTheme,\n      darcula: darculaTheme,\n    } as const\n  )[themeName];\n\n  // IMPORTANT: passing a function that returns Theme is crucial in get it working. Otherwise, ThemeProvider will try\n  // to \"merge\" themes, and the end result is an POJO, with prototype link lost.\n  // @ts-expect-error ThemeJson type is not accurate ATM.\n  const theme = useMemo(() => new Theme(themeJson), [themeJson]);\n\n  useFixDocusaurusStyleBleeds();\n  return (\n    <BrowserOnly fallback={<>Loading...</>}>\n      {() => <ThemeProvider theme={theme}>{children}</ThemeProvider>}\n    </BrowserOnly>\n  );\n};\n\n/**\n * TODO: add a surrounding UI for examples, with tools for theme selection for example.\n */\nexport const Example: React.FC<{ children: React.ReactNode }> = ({\n  children,\n}) => (\n  <ExampleContext>\n    <div\n      // @ts-expect-error: css prop is not working for some reason\n      css={`\n        background: ${({ theme }: { theme: Theme }) =>\n          theme.color(\"*.background\")};\n      `}\n    >\n      {children}\n    </div>\n  </ExampleContext>\n);\n\nexport const withExampleContext = <P extends {}>(\n  Component: React.ComponentType<P>\n) => {\n  function WithExampleContext(props: P) {\n    return (\n      <ExampleContext>\n        <Component {...props} />\n      </ExampleContext>\n    );\n  }\n\n  return WithExampleContext;\n};\n\nconst useFixDocusaurusStyleBleeds = () => {\n  useEffect(() => {\n    const FLAG_CLASSNAME = \"example-context-patch\";\n    if (!document.body.classList.contains(FLAG_CLASSNAME)) {\n      try {\n        undoUseKeyboardNavigation();\n        document.body.classList.add(FLAG_CLASSNAME);\n      } catch (e) {\n        console.error(\"Could not undo useKeyboardNavigation\");\n      }\n    }\n  }, []);\n};\n\n/**\n * Reverts the \"improvement\" [useKeyboardNavigation][1] does :|\n *\n * [1]: https://github.com/facebook/docusaurus/blob/f87a3ead4664b301901c12466cb2c82cd95d141b/packages/docusaurus-theme-common/src/hooks/useKeyboardNavigation.ts#L14\n */\nfunction undoUseKeyboardNavigation() {\n  document\n    .querySelectorAll<HTMLLinkElement>(\"link[rel=stylesheet]\")\n    .forEach((linkEl) => {\n      if (linkEl.sheet) {\n        for (let i = 0; i < linkEl.sheet.cssRules.length; i++) {\n          const rule = linkEl.sheet.cssRules.item(i);\n          if (\n            rule?.cssText?.startsWith(\"body:not(.navigation-with-keyboard)\")\n          ) {\n            linkEl.sheet.deleteRule(i); // We can change the rule to only disable it within the boundary of example\n          }\n        }\n      }\n    });\n}\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Checkbox';\nexport const metadata = {\n  \"unversionedId\": \"components/Checkbox\",\n  \"id\": \"components/Checkbox\",\n  \"title\": \"Checkbox\",\n  \"description\": \"Checkbox with or without a label.\",\n  \"source\": \"@site/docs/components/Checkbox.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Checkbox\",\n  \"permalink\": \"/jui/-/pre-jotai/docs/components/Checkbox\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Checkbox.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"ButtonGroup\",\n    \"permalink\": \"/jui/-/pre-jotai/docs/components/ButtonGroup\"\n  },\n  \"next\": {\n    \"title\": \"ComboBox\",\n    \"permalink\": \"/jui/-/pre-jotai/docs/components/ComboBox\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { Example } from \"@site/src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Simple usage',\n  id: 'simple-usage',\n  level: 2\n}, {\n  value: 'Focus options',\n  id: 'focus-options',\n  level: 2\n}, {\n  value: 'Usage without label',\n  id: 'usage-without-label',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"checkbox\"\n    }}>{`Checkbox`}</h1>\n    <p>{`Checkbox with or without a label.`}</p>\n    <h2 {...{\n      \"id\": \"simple-usage\"\n    }}>{`Simple usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Checkbox } from \"@intellij-platform/core\";\n<>\n  <Checkbox>Default behavior</Checkbox> <br />\n  <Checkbox isSelected>Controlled selected.</Checkbox> <br />\n  <Checkbox isIndeterminate>Indeterminate state</Checkbox> <br />\n  <Checkbox isSelected isDisabled>\n    Disabled\n  </Checkbox> <br />\n  <Checkbox mnemonic=\"W\">With Mnemonics</Checkbox>\n</>\n`}</code></pre>\n    <admonition {...{\n      \"title\": \"Note\",\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`When `}<inlineCode parentName=\"p\">{`isIndeterminate`}</inlineCode>{` is true, `}<inlineCode parentName=\"p\">{`isSelected`}</inlineCode>{` state is independently maintained, and `}<inlineCode parentName=\"p\">{`onChange`}</inlineCode>{` is still called with the\ntoggled value upon interaction. But regardless of that state, the indeterminate UI is shown. It's important to note\nthat it's not a\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/util/ui/src/com/intellij/util/ui/ThreeStateCheckBox.java#L23-L22\"\n        }}>{`three state checkbox`}</a>{`\nin that sense and the implementation rather follows the\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#attr-indeterminate\"\n        }}>{`web standard implementation`}</a>{`,\nwhere `}<inlineCode parentName=\"p\">{`indeterminate`}</inlineCode>{` is independent of `}<inlineCode parentName=\"p\">{`checked`}</inlineCode>{` state.`}</p></admonition>\n    <h2 {...{\n      \"id\": \"focus-options\"\n    }}>{`Focus options`}</h2>\n    <p>{`By default, Checkbox gets focused when it's interacted with. This is inline with the default browser's behaviour for\ncheckboxes. However, the focus ring is always shown when the Checkbox has focus, regardless of the interaction type.\nThis is not inline with browser's default behavior of showing focus ring based\non `}<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible\" target=\"_blank\">{`\nfocus-visible heuristics `}</a>{`, which in turn depends on the input device.`}</p>\n    <admonition {...{\n      \"title\": \"Tip\",\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Use `}<inlineCode parentName=\"p\">{`disableFocusAlwaysVisible`}</inlineCode>{` to switch to the browser default focus-visible behaviour.`}</p></admonition>\n    <p>{`In some use cases, you may want to prevent checkbox from obtaining the focus when it's interacted with. A legitimate\nexample could be `}<a parentName=\"p\" {...{\n        \"href\": \"#usage-without-label\"\n      }}>{`label-less checkboxes`}</a>{` in List items or Table cells, where the checkbox is a\npart of a focusable container (list item, table cell) already, and that focusable container handles keyboard interaction\nfor toggling checkbox, for example by `}<inlineCode parentName=\"p\">{`Space`}</inlineCode>{` key. Another use case, which perhaps is more controversial with respect to\ni11y practices, is where the checkbox is next to more important focusable element that you don't want to take the focus\naway from. \"Amend\" checkbox in \"Commit\" tool window is an example of that use case. When the commit message editor is\nfocused, toggling \"Amend\" checkbox won't take focus away from the commit message editor. It's important to note that\nthe checkbox is still keyboard-accessible in such cases, because of the\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://plugins.jetbrains.com/docs/intellij/basic-action-system.html\"\n      }}>{`Action System`}</a>{` and also\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.jetbrains.com/help/idea/adding-mnemonics.html\"\n      }}>{`mnemonics`}</a>{`.`}</p>\n    <admonition {...{\n      \"title\": \"Tip\",\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Use `}<inlineCode parentName=\"p\">{`preventFocus`}</inlineCode>{` to not allow checkbox get focused when it's interacted with.`}</p></admonition>\n    <p>{`Last thing about focus management is that you can disable focus by Tab key, while the checkbox is still focusable.`}</p>\n    <admonition {...{\n      \"title\": \"Tip\",\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Use `}<inlineCode parentName=\"p\">{`excludeFromTabOrder`}</inlineCode>{` to exclude the checkbox from getting focus by Tab key.`}</p></admonition>\n    <p>{`Below is an example of the focus management options:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Checkbox } from \"@intellij-platform/core\";\n<>\n  <Checkbox>Default behavior</Checkbox> <br />\n  <Checkbox excludeFromTabOrder>\n    Excluded from tab order. Try focusing the previous checkbox and press tab.\n  </Checkbox> <br />\n  <Checkbox disableFocusAlwaysVisible>\n    Focus ring only shown based on \\`focus-visible\\` heuristics.\n  </Checkbox>\n  <br />\n  <Checkbox preventFocus>Doesn't get focused when toggled</Checkbox>\n</>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"usage-without-label\"\n    }}>{`Usage without label`}</h2>\n    <p>{`A use case for checkboxes without label is in list or tree items.\nThat kind of use case is usually together with `}<inlineCode parentName=\"p\">{`preventFocus`}</inlineCode>{` option, since the checkbox is a part of a focusable\ncontainer (list/tree items), and the focus should not be taken away from that focusable container.`}</p>\n    <admonition {...{\n      \"title\": \"Note\",\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`You should always pass `}<inlineCode parentName=\"p\">{`aria-label`}</inlineCode>{` for checkboxes without label.`}</p></admonition>\n    <p>{`Here is an example of rendering checkboxes inside tree items:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Checkbox, List, Item, SpeedSearchTree, HighlightedTextValue } from \"@intellij-platform/core\";\n// TODO: Space doesn't toggle selection on tree items\nfunction Example() {\n  const [selectedKeys, setSelectedKeys] = useState(new Set([\"Vicente Amigo\"]));\n  const [checkedKeys, setCheckedKeys] = useState([\"Paco de Lucia\"]);\n\n  const isChecked = (item) =>\n    checkedKeys.includes(item.name) ||\n    (item.children && getLeafNodes(item).every(isChecked));\n\n  const getLeafNodes = (root) => {\n    if (root.children) {\n      return root.children\n        .map((child) => (child.children ? getLeafNodes(child) : [child]))\n        .flat();\n    }\n    return [];\n  };\n\n  const toggle = (item, checked) => {\n    setSelectedKeys(() => new Set([item.name]));\n    if (item.children) {\n      const allChildren = getLeafNodes(item);\n      if (!allChildren.every(isChecked)) {\n        setCheckedKeys(allChildren.map((child) => child.name));\n      } else {\n        setCheckedKeys((checkedKeys) =>\n          checkedKeys.filter(\n            (key) => !allChildren.find((child) => child.name === key)\n          )\n        );\n      }\n    } else {\n      if (checked) {\n        setCheckedKeys((checkedKeys) => checkedKeys.concat(item.name));\n      } else {\n        setCheckedKeys((checkedKeys) =>\n          checkedKeys.filter((key) => key !== item.name)\n        );\n      }\n    }\n  };\n\n  const isIndeterminate = (item) => {\n    if (!item.children) {\n      return false;\n    }\n    const leafNodes = getLeafNodes(item);\n    const checkedLeafNodes = leafNodes.filter(isChecked);\n    return (\n      checkedLeafNodes.length > 0 && checkedLeafNodes.length < leafNodes.length\n    );\n  };\n  return (\n    <SpeedSearchTree\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"Heros\"]}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      items={[\n        {\n          name: \"Heros\",\n          children: [\n            { name: \"Paco de Lucia\", children: null },\n            { name: \"Vicente Amigo\", children: null },\n            { name: \"Gerardo Nunez\", children: null },\n          ],\n        },\n      ]}\n    >\n      {(item) => (\n        <Item key={item.name} childItems={item.children} textValue={item.name}>\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: \".2rem\" }}>\n            {\n              <>\n                <span style={{ display: \"inline-flex\" }}>\n                  <Checkbox\n                    aria-label={\\`Select \\${item.name}\\`}\n                    preventFocus\n                    isSelected={isChecked(item)}\n                    onChange={(checked) => toggle(item, checked)}\n                    isIndeterminate={item.children && isIndeterminate(item)}\n                  />\n                </span>\n              </>\n            }\n            <span>\n              <HighlightedTextValue />\n            </span>\n          </div>\n        </Item>\n      )}\n    </SpeedSearchTree>\n  );\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["ExampleContext","_ref","children","themeName","themeJson","light","lightTheme","highContrast","highContrastTheme","darcula","darculaTheme","theme","useMemo","Theme","useFixDocusaurusStyleBleeds","React","BrowserOnly","fallback","ThemeProvider","Example","_ref2","_StyledDiv","useEffect","FLAG_CLASSNAME","document","body","classList","contains","querySelectorAll","forEach","linkEl","sheet","i","cssRules","length","rule","item","cssText","startsWith","deleteRule","add","e","console","error","_styled","withConfig","displayName","componentId","_ref3","color","__docgenInfo","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXLayout","MDXContent","components","props","mdx","_extends","mdxType","parentName","href","target","isMDXComponent"],"sourceRoot":""}