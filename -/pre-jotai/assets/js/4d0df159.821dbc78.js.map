{"version":3,"file":"assets/js/4d0df159.821dbc78.js","mappings":"6OAUO,MAAMA,EAAc,CAAC,EACfC,EAAe,cACfC,EAAW,CACtB,cAAiB,qBACjB,GAAM,qBACN,MAAS,cACT,YAAe,kGACf,OAAU,oCACV,cAAiB,SACjB,KAAQ,sBACR,UAAa,2CACb,OAAS,EACT,QAAW,gGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,kBACX,SAAY,CACV,MAAS,UACT,UAAa,6CAEf,KAAQ,CACN,MAAS,cACT,UAAa,iDAGJC,EAAS,CAEtB,EAGaC,EAAM,CAAC,CAClBC,MAAO,gCACPC,GAAI,gCACJC,MAAO,GACN,CACDF,MAAO,gBACPC,GAAI,gBACJC,MAAO,GACN,CACDF,MAAO,kCACPC,GAAI,kCACJC,MAAO,GACN,CACDF,MAAO,8BACPC,GAAI,8BACJC,MAAO,IAGHC,EAAc,CAClBJ,OAEIK,EAAY,UACH,SAASC,EAAUC,GAG9B,IAH+B,WACjCC,KACGC,GACJF,EACC,OAAOG,EAAAA,EAAAA,IAACL,GAASM,EAAAA,EAAAA,GAAA,GAAKP,EAAiBK,EAAK,CAAED,WAAYA,EAAYI,QAAQ,eAE5EF,EAAAA,EAAAA,IAAA,MACE,GAAM,eACH,gBACLA,EAAAA,EAAAA,IAAA,SAAK,qGACPA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,IACR,KAAQ,mEACL,8BAAkC,2IAEzCH,EAAAA,EAAAA,IAAA,MACE,GAAM,iCACH,kCACLA,EAAAA,EAAAA,IAAA,SAAK,oCAAkCA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,SAAsB,mCAAiCH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,YAAyB,gDAC9KH,EAAAA,EAAAA,IAAA,KAAGG,WAAW,IACb,KAAQ,qFACL,yBAA6B,kMAGpCH,EAAAA,EAAAA,IAAA,cACE,KAAQ,SACPA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,cAAe,2HAChCH,EAAAA,EAAAA,IAAA,SAAK,0JACLA,EAAAA,EAAAA,IAAA,MACE,GAAM,iBACH,kBACLA,EAAAA,EAAAA,IAAA,SAAK,qPACLA,EAAAA,EAAAA,IAAA,MACE,GAAM,mCACH,oCACLA,EAAAA,EAAAA,IAAA,SAAK,SACLA,EAAAA,EAAAA,IAAA,MACE,GAAM,+BACH,gCACLA,EAAAA,EAAAA,IAAA,SAAK,2EAAyEA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,qBAAkC,mBAAiBH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,QAAqB,+IAA6IH,EAAAA,EAAAA,IAAA,KAAGG,WAAW,IACvW,KAAQ,sBACL,QAAY,iFACnBH,EAAAA,EAAAA,IAAA,SAAK,oHACLA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,gBACV,gFAEPH,EAAAA,EAAAA,IAAA,SAAK,2DAAyDA,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,mBAAgC,aAE/H,CAEAP,EAAWQ,gBAAiB,C","sources":["webpack://website/./docs/guides/Collections.mdx"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Collections';\nexport const metadata = {\n  \"unversionedId\": \"guides/Collections\",\n  \"id\": \"guides/Collections\",\n  \"title\": \"Collections\",\n  \"description\": \"A good number of components such as List, Tree, Menu, Tabs, etc. display a collection of items.\",\n  \"source\": \"@site/docs/guides/Collections.mdx\",\n  \"sourceDirName\": \"guides\",\n  \"slug\": \"/guides/Collections\",\n  \"permalink\": \"/jui/-/pre-jotai/docs/guides/Collections\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/guides/Collections.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Actions\",\n    \"permalink\": \"/jui/-/pre-jotai/docs/guides/ActionSystem\"\n  },\n  \"next\": {\n    \"title\": \"AlertDialog\",\n    \"permalink\": \"/jui/-/pre-jotai/docs/components/AlertDialog\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'Rendering optimization caveat',\n  id: 'rendering-optimization-caveat',\n  level: 2\n}, {\n  value: 'Using context',\n  id: 'using-context',\n  level: 3\n}, {\n  value: 'Wrapping items with extra state',\n  id: 'wrapping-items-with-extra-state',\n  level: 3\n}, {\n  value: 'Disabling or limiting cache',\n  id: 'disabling-or-limiting-cache',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"collections\"\n    }}>{`Collections`}</h1>\n    <p>{`A good number of components such as List, Tree, Menu, Tabs, etc. display a collection of items.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://react-spectrum.adobe.com/react-stately/collections.html\"\n      }}>{`@react-stately/collections`}</a>{` is used for all of them\nto provide a uniform and flexible API that would allow for both static jsx-based or dynamic source of items.`}</p>\n    <h2 {...{\n      \"id\": \"rendering-optimization-caveat\"\n    }}>{`Rendering optimization caveat`}</h2>\n    <p>{`When the API for dynamic items (`}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` prop and a render function as `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`) is used, the render result for each\nitem `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-spectrum.adobe.com/react-stately/collections.html#why-not-array-map\"\n      }}>{`is subject to caching`}</a>{` based\non the item object. It's important to understand this assumption that the rendering should only depend on the item, and\nnot any other piece of state, for example, from the closure.`}</p>\n    <admonition {...{\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`The item renderer function should be a pure function that relies exclusively on its single argument: the item object.`}</p></admonition>\n    <p>{`However, in certain scenarios, you might need to render UI elements based on factors other than the item object. Here are a few ways to achieve this:`}</p>\n    <h3 {...{\n      \"id\": \"using-context\"\n    }}>{`Using context`}</h3>\n    <p>{`TODO (This is particularly useful for components implementing virtual rendering, where only a limited number of items are mounted at a time, and changes to additional state should affect only those without rebuilding the entire collection).`}</p>\n    <h3 {...{\n      \"id\": \"wrapping-items-with-extra-state\"\n    }}>{`Wrapping items with extra state`}</h3>\n    <p>{`TODO`}</p>\n    <h3 {...{\n      \"id\": \"disabling-or-limiting-cache\"\n    }}>{`Disabling or limiting cache`}</h3>\n    <p>{`For components that support it, you can control caching by setting the `}<inlineCode parentName=\"p\">{`cacheInvalidation`}</inlineCode>{` prop. Passing `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` to this prop will disable caching entirely, but it may significantly reduce performance for large collections. In a performance test on a `}<a parentName=\"p\" {...{\n        \"href\": \"../components/Tree\"\n      }}>{`Tree`}</a>{` with 400 elements, disabling the cache resulted in a ~10x slower rendering.`}</p>\n    <p>{`A middle-ground approach is to pass an array of cache invalidators instead of completely turning off the cache:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Tree cacheInvalidation={{ invalidators: [nestedSelection] }}>...</Tree>\n`}</code></pre>\n    <p>{`This configuration will only invalidate the cache when `}<inlineCode parentName=\"p\">{`nestedSelection`}</inlineCode>{` changes.`}</p>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXLayout","MDXContent","_ref","components","props","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}