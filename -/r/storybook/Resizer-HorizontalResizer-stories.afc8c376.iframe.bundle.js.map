{"version":3,"file":"Resizer-HorizontalResizer-stories.afc8c376.iframe.bundle.js","mappings":";;;AAqCA;;;;AAMA;;;AAKA;;;;AAMA;;;AAKA;;;;AAUA;;;;;;;AAqDA;;;AAKA;;;;AAOA","sources":["webpack://@intellij-platform/core/./src/Resizer/HorizontalResizer.stories.tsx"],"sourcesContent":["import { Meta, StoryObj } from \"@storybook/react\";\nimport React, { CSSProperties, useState } from \"react\";\nimport { css } from \"styled-components\";\nimport {\n  ComponentArgTypes,\n  styledComponentsControlsExclude,\n} from \"../story-helpers\";\nimport { styled } from \"../styled\";\nimport { BottomResizer } from \"./BottomResizer\";\nimport { LeftResizer } from \"./LeftResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { RightResizer } from \"./RightResizer\";\n\nconst meta: Meta = {\n  title: \"Components/HorizontalResizer\",\n  parameters: {\n    layout: \"fullscreen\",\n    controls: { exclude: styledComponentsControlsExclude },\n    component: LeftResizer,\n  },\n  argTypes: {\n    orientation: {\n      defaultValue: \"horizontal\",\n      options: [\"horizontal\", \"vertical\"],\n      control: { type: \"radio\" },\n    },\n    background: { defaultValue: \"red\" },\n    size: { defaultValue: 5 },\n    outerPadding: { defaultValue: 10 },\n  } as ComponentArgTypes<ResizerProps>,\n};\nexport default meta;\n\nconst HorizontalContainer = styled.div`\n  height: 100vh;\n  display: flex;\n`;\nconst VerticalContainer = styled.div`\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst LeftSide = styled.div`\n  background: lightseagreen;\n  height: 100%;\n`;\n\nconst RightSide = styled.div`\n  background: lightslategray;\n  height: 100%;\n  flex: 1;\n`;\n\nconst TopSize = styled.div`\n  background: lightseagreen;\n  width: 100%;\n`;\n\nconst BottomSide = styled.div`\n  background: lightslategray;\n  width: 100%;\n  flex: 1;\n`;\n\ntype StoryProps = Omit<ResizerProps, \"cursor\"> & {\n  orientation: \"horizontal\" | \"vertical\";\n};\n\nconst getComponentsAndProps = (\n  orientation: \"horizontal\" | \"vertical\",\n  size: number\n) => {\n  return orientation === \"horizontal\"\n    ? {\n        Container: HorizontalContainer,\n        FirstSide: LeftSide,\n        SecondSide: RightSide,\n        Resizer: RightResizer,\n        sizeStyles: { width: size },\n      }\n    : {\n        Container: VerticalContainer,\n        FirstSide: TopSize,\n        SecondSide: BottomSide,\n        Resizer: BottomResizer,\n        sizeStyles: { height: size },\n      };\n};\n\nexport const Default: StoryObj<StoryProps> = {\n  render: ({ orientation, ...props }) => {\n    const [size, setSize] = useState(200);\n    const { Resizer, Container, FirstSide, SecondSide, sizeStyles } =\n      getComponentsAndProps(orientation, size);\n    return (\n      <Container>\n        <FirstSide style={sizeStyles}>Resizable panel</FirstSide>\n        <Resizer\n          {...props}\n          onResizeStarted={(...args) => {\n            props.onResizeStarted(...args);\n            return size;\n          }}\n          onResize={(...args) => {\n            setSize(args[0]);\n            props.onResize(...args);\n          }}\n        />\n        <SecondSide />\n      </Container>\n    );\n  },\n};\n\nconst Handle = styled.div<{ orientation: \"horizontal\" | \"vertical\" }>`\n  background: grey;\n  border-radius: 100px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  ${({ orientation }) =>\n    orientation === \"horizontal\"\n      ? css`\n          height: 42px;\n          width: 50%;\n        `\n      : css`\n          width: 42px;\n          height: 50%;\n        `}\n`;\n\nexport const CustomAppearance: StoryObj<StoryProps> = {\n  render: ({ orientation, ...props }: StoryProps) => {\n    const [size, setSize] = useState(200);\n    const { Resizer, Container, FirstSide, SecondSide, sizeStyles } =\n      getComponentsAndProps(orientation, size);\n\n    return (\n      <Container>\n        <FirstSide style={sizeStyles}>Resizable panel</FirstSide>\n        <Resizer\n          {...props}\n          onResizeStarted={(...args) => {\n            props.onResizeStarted(...args);\n            return size;\n          }}\n          onResize={(...args) => {\n            setSize(args[0]);\n            props.onResize(...args);\n          }}\n        >\n          <Handle orientation={orientation} />\n        </Resizer>\n        <SecondSide />\n      </Container>\n    );\n  },\n\n  argTypes: {\n    ...meta.argTypes,\n    background: { defaultValue: \"lightgrey\" },\n    size: { defaultValue: 10 },\n  },\n};\n\nexport const WithMinSize = {\n  render: ({\n    orientation,\n    minSize,\n    ...props\n  }: StoryProps & { minSize: CSSProperties[\"minWidth\" | \"minHeight\"] }) => {\n    const [size, setSize] = useState(200);\n    const { Resizer, Container, FirstSide, SecondSide, sizeStyles } =\n      getComponentsAndProps(orientation, size);\n    return (\n      <Container>\n        <FirstSide\n          style={{\n            ...sizeStyles,\n            [orientation === \"horizontal\" ? \"minWidth\" : \"minHeight\"]: minSize,\n          }}\n        >\n          Resizable panel\n        </FirstSide>\n        <Resizer\n          {...props}\n          onResizeStarted={(...args) => {\n            props.onResizeStarted(...args);\n            return size;\n          }}\n          onResize={(...args) => {\n            setSize(args[0]);\n            props.onResize(...args);\n          }}\n        />\n        <SecondSide />\n      </Container>\n    );\n  },\n\n  argTypes: {\n    ...meta.argTypes,\n    minSize: {\n      type: \"string\",\n      options: [\"100px\", \"fit-content\", \"min-content\", undefined],\n      control: {\n        type: \"select\",\n      },\n      defaultValue: \"100px\",\n    },\n  },\n};\n"],"names":[],"sourceRoot":""}