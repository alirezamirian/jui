"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8021],{47295:(e,t,n)=>{n.d(t,{Ui:()=>u,en:()=>d});var s=n(75545),i=n(2784),o=n(69979),a=n(6308),l=n(2333),r=n(62336),m=n(97202),c=n(70570);const u=e=>{let{children:t,themeName:n="darcula"}=e;const s={light:r,highContrast:l,darcula:a}[n],u=(0,i.useMemo)((()=>new m.Q(s)),[s]);return p(),i.createElement(o.Z,{fallback:i.createElement(i.Fragment,null,"Loading...")},(()=>i.createElement(c.f,{theme:u},t)))},d=e=>{let{children:t}=e;return i.createElement(u,null,i.createElement(h,null,t))},p=()=>{(0,i.useEffect)((()=>{const e="example-context-patch";if(!document.body.classList.contains(e))try{document.querySelectorAll("link[rel=stylesheet]").forEach((e=>{if(e.sheet)for(let t=0;t<e.sheet.cssRules.length;t++){const n=e.sheet.cssRules.item(t);n?.cssText?.startsWith("body:not(.navigation-with-keyboard)")&&e.sheet.deleteRule(t)}})),document.body.classList.add(e)}catch(t){console.error("Could not undo useKeyboardNavigation")}}),[])};var h=(0,s.ZP)("div").withConfig({displayName:"ExampleContext___StyledDiv",componentId:"sc-14mtscb-0"})(["background:",";"],(e=>{let{theme:t}=e;return t.color("*.background")}));u.__docgenInfo={description:"",methods:[],displayName:"ExampleContext",props:{themeName:{defaultValue:{value:'"darcula"',computed:!1},required:!1}}},d.__docgenInfo={description:"TODO: add a surrounding UI for examples, with tools for theme selection for example.",methods:[],displayName:"Example"}},84131:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var s=n(7896),i=(n(2784),n(30876));n(47295);const o={},a="List",l={unversionedId:"components/List",id:"components/List",title:"List",description:"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for",source:"@site/docs/components/List.mdx",sourceDirName:"components",slug:"/components/List",permalink:"/jui/-/r/docs/components/List",draft:!1,editUrl:"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/List.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Link",permalink:"/jui/-/r/docs/components/Link"},next:{title:"Menu",permalink:"/jui/-/r/docs/components/Menu"}},r={},m=[{value:"SpeedSearchList",id:"speedsearchlist",level:2},{value:"ItemLayout",id:"itemlayout",level:2},{value:"ContextMenu",id:"contextmenu",level:2},{value:"Advanced use",id:"advanced-use",level:2},{value:"Custom list component with useList and useSpeedSearchList",id:"custom-list-component-with-uselist-and-usespeedsearchlist",level:3}],c={toc:m},u="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(u,(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"list"},"List"),(0,i.kt)("p",null,"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\na list of items with a single attribute. Here is some examples from JetBrains IDEs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Settings -> Tools -> SSH Configurations")," (master-detail)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Settings -> Appearance & Behavior -> Scopes")," (master-detail)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Settings -> Editor -> General -> Console -> Exceptions")," (single attribute list of items)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Settings -> Editor -> File and Code Templates")," (master-detail)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Settings -> Editor -> Natural Languages")," (single attribute list of items)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Show Local History")," window (advanced layout)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"themed live",themed:!0,live:!0},'<List selectionMode="multiple" fillAvailableSpace>\n  <Item>Paco de lucia</Item>\n  <Divider />\n  <Item>Vicente Amigo</Item>\n  <Section title="Other">\n    <Item>Gerardo Nunez</Item>\n    <Item>El Amir</Item>\n  </Section>\n</List>\n')),(0,i.kt)("h2",{id:"speedsearchlist"},"SpeedSearchList"),(0,i.kt)("p",null,"TODO"),(0,i.kt)("h2",{id:"itemlayout"},"ItemLayout"),(0,i.kt)("p",null,"While you can render any custom content in ",(0,i.kt)("inlineCode",{parentName:"p"},"Item"),"s of a list, ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemLayout")," is a useful helper component implementing\nthe most common cases. Render different parts of an item, such as icon, text, etc. inside a ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemLayout")," and it handles\nthe layout, and the spacing between them. Some common parts that require a special style are implemented as components\naccessible on ",(0,i.kt)("inlineCode",{parentName:"p"},"ItemLayout"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'<SpeedSearchList selectionMode="multiple">\n  <Item textValue="jui">\n    <ItemLayout>\n      <PlatformIcon icon="nodes/folder" />\n      <HighlightedTextValue />\n      <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n    </ItemLayout>\n  </Item>\n</SpeedSearchList>\n')),(0,i.kt)("h2",{id:"contextmenu"},"ContextMenu"),(0,i.kt)("p",null,"In order to have context menu for list items, just wrap the list in a ",(0,i.kt)("inlineCode",{parentName:"p"},"ContextMenuContainer"),". When the context menu\nis triggered on an item, the selection is also updated right before the context menu opens, so you can render the\ncontext menu based on the selected item(s)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed noPadding",live:!0,themed:!0,noPadding:!0},'function ListContextMenuExample() {\n  const [selectedKeys, setSelectedKeys] = useState(new Set());\n\n  return (\n    <ContextMenuContainer\n      renderMenu={() => {\n        const selectedKey = Array.from(selectedKeys)[0];\n        if (!selectedKey) {\n          return (\n            <Menu>\n              <Item>Nothing here</Item>\n            </Menu>\n          );\n        }\n        return (\n          <Menu>\n            <Item textValue={`Run \'${selectedKey}\'`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="debugger/threadRunning.svg" />}\n                content={`Run \'${selectedKey}\'`}\n                shortcut="\u21e7\u23ce"\n              />\n            </Item>\n            <Item textValue={`Debug \'${selectedKey}\'`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/startDebugger.svg" />}\n                content={`Debug \'${selectedKey}\'`}\n                shortcut="\u2303\u21e7D"\n              />\n            </Item>\n            <Item textValue={`Edit \'${selectedKey}\' Settings...`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/editSource.svg" />}\n                content={`Edit \'${selectedKey}\' Settings...`}\n              />\n            </Item>\n            <Divider />\n            <Item textValue="Jump to source">\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/editSource.svg" />}\n                content="Jump to source"\n                shortcut="\u2318\u2193"\n              />\n            </Item>\n          </Menu>\n        );\n      }}\n    >\n      <List\n        selectionMode="single"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key="start">start</Item>\n        <Item key="build">build</Item>\n        <Item key="test">test</Item>\n        <Item key="deploy">deploy</Item>\n      </List>\n    </ContextMenuContainer>\n  );\n}\n')),(0,i.kt)("h2",{id:"advanced-use"},"Advanced use"),(0,i.kt)("h3",{id:"custom-list-component-with-uselist-and-usespeedsearchlist"},"Custom list component with useList and useSpeedSearchList"))}d.isMDXComponent=!0}}]);
//# sourceMappingURL=b54e7c57.6dd061ae.js.map