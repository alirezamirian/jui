{"version":3,"file":"assets/js/f585c41b.3c0e1c52.js","mappings":"6OAUO,MAAMA,EAAc,CAAC,EACfC,EAAe,WACfC,EAAW,CACtB,cAAiB,oBACjB,GAAM,oBACN,MAAS,WACT,YAAe,6DACf,OAAU,mCACV,cAAiB,WACjB,KAAQ,qBACR,UAAa,kCACb,OAAS,EACT,QAAW,+FACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,kBACX,SAAY,CACV,MAAS,OACT,UAAa,iCAEf,KAAQ,CACN,MAAS,UACT,UAAa,mCAGJC,EAAS,CAEtB,EAGaC,EAAM,CAAC,CAClBC,MAAO,eACPC,GAAI,eACJC,MAAO,IAGHC,EAAc,CAClBJ,OAEIK,EAAY,UACH,SAASC,EAAUC,GAG9B,IAH+B,WACjCC,KACGC,GACJF,EACC,OAAOG,EAAAA,EAAAA,IAACL,GAASM,EAAAA,EAAAA,GAAA,GAAKP,EAAiBK,EAAK,CAAED,WAAYA,EAAYI,QAAQ,eAE5EF,EAAAA,EAAAA,IAAA,MACE,GAAM,YACH,aACLA,EAAAA,EAAAA,IAAA,SAAK,eAAaA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,IAC5B,KAAQ,sDACL,YAAgB,6CACzBH,EAAAA,EAAAA,IAAA,KAAGG,WAAW,IACR,KAAQ,wDACL,YAAgB,MACvBH,EAAAA,EAAAA,IAAA,cACE,KAAQ,QACPA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,eAAaH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,mBAAgC,+EAA6EH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,UAAuB,SAAOH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,YAAyB,6EAEzRH,EAAAA,EAAAA,IAAA,MACE,GAAM,gBACH,iBACLA,EAAAA,EAAAA,IAAA,YAAKA,EAAAA,EAAAA,IAAA,QAAMG,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GACP,iZAkBPH,EAAAA,EAAAA,IAAA,cACE,KAAQ,SACPA,EAAAA,EAAAA,IAAA,KAAGG,WAAW,cAAe,mCAAiCH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,QAAqB,0CAAwCH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,mBAAgC,2GACvIH,EAAAA,EAAAA,IAAA,cAAYG,WAAW,KAAM,OAAoB,OAEtI,CAEAP,EAAWQ,gBAAiB,C","sources":["webpack://website/./docs/advanced/Mnemonic.mdx"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Mnemonic';\nexport const metadata = {\n  \"unversionedId\": \"advanced/Mnemonic\",\n  \"id\": \"advanced/Mnemonic\",\n  \"title\": \"Mnemonic\",\n  \"description\": \"Implements mnemonic UX pattern, for actionable components.\",\n  \"source\": \"@site/docs/advanced/Mnemonic.mdx\",\n  \"sourceDirName\": \"advanced\",\n  \"slug\": \"/advanced/Mnemonic\",\n  \"permalink\": \"/jui/-/r/docs/advanced/Mnemonic\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/advanced/Mnemonic.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Tree\",\n    \"permalink\": \"/jui/-/r/docs/components/Tree\"\n  },\n  \"next\": {\n    \"title\": \"Resizer\",\n    \"permalink\": \"/jui/-/r/docs/advanced/Resizer\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'Live example',\n  id: 'live-example',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"mnemonic\"\n    }}>{`Mnemonic`}</h1>\n    <p>{`Implements `}<a parentName=\"p\" {...{\n        \"href\": \"https://en.wikipedia.org/wiki/Mnemonics_(keyboard)\"\n      }}>{`mnemonic`}</a>{` UX pattern, for actionable components.\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://jetbrains.github.io/ui/principles/mnemonics/\"\n      }}>{`See more`}</a>{`.`}</p>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\"><inlineCode parentName=\"p\">{`MnemonicTrigger`}</inlineCode>{` is typically not used directly as it's used internally in components like `}<inlineCode parentName=\"p\">{`Button`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`Checkbox`}</inlineCode>{`.\nOnly use it if implementing the same pattern for a custom component.`}</p></admonition>\n    <h3 {...{\n      \"id\": \"live-example\"\n    }}>{`Live example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<>\n  <MnemonicTrigger\n    mnemonic=\"P\"\n    onTriggered={() => alert(\"First!\")}\n    isDisabled={false}\n  >\n    Press Alt+P to activate mnemonic\n  </MnemonicTrigger>\n  <br />\n  <MnemonicTrigger\n    mnemonic=\"m\"\n    onTriggered={() => alert(\"Second!\")}\n    isDisabled={false}\n  >\n    Hold <code>Alt</code> to activate <MnemonicText>mnemonic</MnemonicText>\n  </MnemonicTrigger>\n</>\n`}</code></pre>\n    <admonition {...{\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`Implementation of mnemonic for `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` (currently not done) doesn't require `}<inlineCode parentName=\"p\">{`MnemonicTrigger`}</inlineCode>{` as it's activated\nbased on the focus being on the menu, without requiring a separate activation key (`}<inlineCode parentName=\"p\">{`Alt`}</inlineCode>{`).`}</p></admonition>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXLayout","MDXContent","_ref","components","props","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}