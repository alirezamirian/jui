{"version":3,"file":"ToolWindows-stories-ToolWindows-stories.ff846575.iframe.bundle.js","mappings":";;;;;;;;AAkGA;AACA;;;AC5FA;AAEA","sources":["webpack://@intellij-platform/core/./src/ToolWindows/stories/components/FakeExecution.tsx","webpack://@intellij-platform/core/./src/story-components.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Toolbar } from \"../../../Toolbar/Toolbar\";\nimport { IconButton } from \"../../../IconButton\";\nimport { PlatformIcon } from \"../../../Icon\";\nimport { StyledHorizontalSeparator } from \"../../../StyledSeparator\";\nimport { styled } from \"../../../styled\";\n\ninterface Execution {\n  id: string;\n  isRunning: boolean;\n  title: string;\n}\n\nexport function useFakeExecution(scripts: Record<string, string>) {\n  const [executions, setExecutions] = useState<Array<Execution>>([]);\n\n  useEffect(() => {\n    addExecution(true);\n    addExecution();\n  }, []);\n\n  const addExecution = (run = false, scriptName?: string) => {\n    const scriptNames = Object.keys(scripts);\n    return setExecutions((executions) => {\n      const title =\n        scriptName ||\n        scriptNames.find((name) =>\n          executions.every(({ title }) => title !== name)\n        ) ||\n        scriptNames[0];\n      return executions.concat({\n        id: `${Math.max(...executions.map(({ id }) => parseInt(id)), 0) + 1}`,\n        isRunning: run,\n        title,\n      });\n    });\n  };\n  const runScript = (name: string) => {\n    const execution = executions.find((process) => process.title === name);\n    if (execution) {\n      if (!execution.isRunning) {\n        toggle(execution.id);\n      }\n    } else {\n      addExecution(true, name);\n    }\n  };\n  const toggle = (executionId: string) => {\n    setExecutions((executions) =>\n      executions.map((execution) =>\n        execution.id === executionId\n          ? {\n              ...execution,\n              isRunning: !execution.isRunning,\n            }\n          : execution\n      )\n    );\n  };\n\n  const close = (executionId: string) => {\n    setExecutions((executions) => {\n      return executions.filter(({ id }) => executionId !== id);\n    });\n  };\n\n  return { executions, runScript, toggle, close };\n}\n\nexport const FakeExecutionToolbar = ({\n  execution: { isRunning, id },\n  toggle,\n}: {\n  execution: Execution;\n  toggle: (executionId: string) => void;\n}) => (\n  <Toolbar border=\"bottom\">\n    <IconButton onPress={() => toggle(id)}>\n      <PlatformIcon icon={isRunning ? \"actions/restart\" : \"actions/execute\"} />\n    </IconButton>\n    <IconButton isDisabled={!isRunning} onPress={() => toggle(id)}>\n      <PlatformIcon icon=\"actions/suspend\" />\n    </IconButton>\n    <StyledHorizontalSeparator />\n    <IconButton isDisabled>\n      <PlatformIcon icon=\"runConfigurations/scroll_down\" />\n    </IconButton>\n    <IconButton>\n      <PlatformIcon icon=\"actions/gc\" />\n    </IconButton>\n  </Toolbar>\n);\n\nexport const VerticalFlexContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\nexport const RunConsoleOutput = styled.div`\n  background: ${({ theme }) => (theme.dark ? \"#2b2b2b\" : \"#fff\")}; // FIXME\n  flex: 1;\n`;\n","import { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree, TreeRefValue } from \"@intellij-platform/core/Tree\";\nimport { staticSpeedSearchTreeItems } from \"@intellij-platform/core/Tree/story-helpers\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Iterable<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = [\"BasicList\"],\n  onSelectedKeysChange,\n  treeRef,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: Selection) => void;\n  treeRef?: React.RefObject<TreeRefValue>;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      treeRef={treeRef}\n      autoFocus\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={new Set(defaultSelectedKeys)}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      {staticSpeedSearchTreeItems}\n    </SpeedSearchTree>\n  );\n};\n"],"names":[],"sourceRoot":""}