{"version":3,"file":"ModalWindow-ModalWindow-stories.0ec8066c.iframe.bundle.js","mappings":";;;;;;AAwBA;AACA;;;AAKA;;;AAGA;AAGA;;;;;;;;ACTA;;;;;;;AChBA;AAGA;;;AAQA;;ACbA;;;AAOA;;ACeA;AACA;AAEA;;AAEA;AACA;;AC9BA;AAEA","sources":["webpack://@intellij-platform/core/./src/ModalWindow/ModalWindow.stories.tsx","webpack://@intellij-platform/core/./src/ModalWindow/WindowHeader.tsx","webpack://@intellij-platform/core/./src/ModalWindow/WindowFooter.tsx","webpack://@intellij-platform/core/./src/ModalWindow/WindowLayout.tsx","webpack://@intellij-platform/core/./src/StyledSeparator.tsx","webpack://@intellij-platform/core/./src/story-components.tsx"],"sourcesContent":["import { Meta, StoryObj } from \"@storybook/react\";\nimport React, { useEffect, useState } from \"react\";\nimport { ModalWindow, ModalWindowProps } from \"./ModalWindow\";\nimport { SpeedSearchTreeSample } from \"@intellij-platform/core/story-components\";\nimport { Bounds, containedWithin } from \"@intellij-platform/core/Overlay\";\nimport {\n  IconButton,\n  Toolbar,\n  Button,\n  Checkbox,\n  PlatformIcon,\n  styled,\n  WindowLayout,\n  TooltipTrigger,\n  HelpTooltip,\n} from \"@intellij-platform/core\";\n\nconst StyledContainer = styled.div`\n  box-sizing: border-box;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 1rem 0.75rem;\n`;\nconst StyledFrame = styled.div`\n  border: 1px solid ${({ theme }) => theme.commonColors.contrastBorder};\n  flex: 1;\n  overflow: auto;\n`;\n\nconst StyledLine = styled.div`\n  line-height: 2;\n  padding-left: 0.5rem;\n  color: ${({ theme }) => theme.commonColors.green};\n`;\n\nconst RenderCount = () => {\n  const ref = React.useRef(1);\n  useEffect(() => {\n    ref.current++;\n  });\n  return <div>Number of re-renders {ref.current}</div>;\n};\n\nexport default {\n  title: \"Components/ModalWindow\",\n  component: ModalWindow,\n  args: {\n    children: (\n      <WindowLayout\n        header=\"Window title\"\n        content={\n          <StyledContainer>\n            <StyledFrame>\n              <SpeedSearchTreeSample />\n            </StyledFrame>\n          </StyledContainer>\n        }\n      />\n    ),\n  },\n  // argTypes: {},\n} as Meta<ModalWindowProps>;\n\nexport const ControlledBounds: StoryObj<ModalWindowProps> = {\n  render: (props) => {\n    const [bounds, setBounds] = useState<Bounds>({\n      left: 100,\n      top: 100,\n      width: 450,\n      height: 300,\n    });\n    return (\n      <ModalWindow {...props} bounds={bounds} onBoundsChange={setBounds}>\n        <WindowLayout\n          header=\"Window title\"\n          content={\n            <div style={{ padding: 16 }}>\n              bounds: {JSON.stringify(bounds, null, 2)}\n              <RenderCount />\n            </div>\n          }\n        />\n      </ModalWindow>\n    );\n  },\n};\n\nexport const Default: StoryObj<ModalWindowProps> = {};\n\nexport const NoResize: StoryObj<ModalWindowProps> = {\n  args: {\n    interactions: \"move\",\n  },\n};\n\nexport const DefaultSize: StoryObj<ModalWindowProps> = {\n  args: {\n    defaultBounds: { width: 300, height: 300 },\n  },\n};\n\nexport const DefaultPosition: StoryObj<ModalWindowProps> = {\n  args: {\n    defaultBounds: { left: 100, top: 100 },\n  },\n};\n\nexport const DefaultSizeAndPosition: StoryObj<ModalWindowProps> = {\n  args: {\n    defaultBounds: { left: 100, top: 100, width: 300, height: 300 },\n  },\n};\n\nexport const NoInteraction: StoryObj<ModalWindowProps> = {\n  args: {\n    interactions: \"none\",\n  },\n};\n\nexport const LimitedMovement: StoryObj<\n  Omit<ModalWindowProps, \"onBoundsChanging\"> & { containerBounds: Bounds }\n> = {\n  render: ({ containerBounds, ...props }) => (\n    <>\n      <ModalWindow\n        {...props}\n        onBoundsChanging={containedWithin(containerBounds)}\n      />\n      <WindowLayout\n        header=\"Window title\"\n        content={\n          <div\n            style={{\n              position: \"fixed\",\n              boxShadow: \"0 0 0 2px rgb(255 0 0 / 50%)\",\n              ...containerBounds,\n            }}\n          />\n        }\n      />\n    </>\n  ),\n\n  args: {\n    containerBounds: {\n      left: 20,\n      top: 20,\n      width: window.innerWidth - 100,\n      height: window.innerHeight - 100,\n    },\n  },\n};\n\nconst NestedWindowExample = () => {\n  const [open, setOpen] = useState(false);\n  const close = () => setOpen(false);\n  return (\n    <div style={{ padding: \"1rem\" }}>\n      <Button onPress={() => setOpen(true)}>Open another window</Button>\n      {open && (\n        <ModalWindow minWidth=\"content\" onClose={close}>\n          <WindowLayout\n            header=\"Nested window\"\n            content={\n              <StyledContainer>\n                Press Escape or any button to close this window.\n              </StyledContainer>\n            }\n            footer={\n              <WindowLayout.Footer\n                right={\n                  <>\n                    <Button autoFocus onPress={close}>\n                      Cancel\n                    </Button>\n                    <Button variant=\"default\" onPress={close}>\n                      OK\n                    </Button>\n                  </>\n                }\n              />\n            }\n          />\n        </ModalWindow>\n      )}\n    </div>\n  );\n};\n\nexport const Nested: StoryObj<ModalWindowProps> = {\n  args: {\n    children: <NestedWindowExample />,\n    minWidth: window.innerWidth / 3,\n    minHeight: window.innerHeight / 3,\n  },\n};\n\nexport const MinSize: StoryObj<ModalWindowProps> = {\n  args: {\n    minWidth: 300,\n    minHeight: 200,\n    children: (\n      <div style={{ padding: 16 }}>\n        Minimum size is set to 300x200 pixels. You can resize to a bigger size.\n      </div>\n    ),\n  },\n};\n\nexport const MinSizeContent: StoryObj<ModalWindowProps> = {\n  args: {\n    minWidth: \"content\",\n    minHeight: \"content\",\n    children: (\n      <div style={{ padding: 16, outline: \"none\" }} contentEditable>\n        Window Content. Window Content. Window Content. <br />\n        Window Content. Window Content. Window Content. <br />\n        Window Content. Window Content. Window Content.\n      </div>\n    ),\n  },\n};\n\nexport const WithTallFooter: StoryObj<ModalWindowProps> = {\n  args: {\n    minHeight: 200,\n    minWidth: 275,\n    children: (\n      <WindowLayout\n        header=\"Rollback Changes\"\n        content={\n          <StyledContainer style={{ paddingBottom: 0 }}>\n            <div style={{ display: \"flex\" }}>\n              <Toolbar>\n                <IconButton>\n                  <PlatformIcon icon=\"actions/diff\" />\n                </IconButton>\n                <IconButton>\n                  <PlatformIcon icon=\"actions/groupBy\" />\n                </IconButton>\n              </Toolbar>\n              <span style={{ flex: 1 }} />\n              <Toolbar>\n                <IconButton>\n                  <PlatformIcon icon=\"actions/expandall\" />\n                </IconButton>\n                <IconButton>\n                  <PlatformIcon icon=\"actions/collapseall\" />\n                </IconButton>\n              </Toolbar>\n            </div>\n\n            <StyledFrame>\n              <SpeedSearchTreeSample />\n            </StyledFrame>\n          </StyledContainer>\n        }\n        footer={\n          <>\n            <div\n              style={{\n                padding: \"0 .75rem\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <StyledLine>1 added</StyledLine>\n              <Checkbox>Delete local copies of the added files</Checkbox>\n            </div>\n            <WindowLayout.Footer\n              right={\n                <>\n                  <Button autoFocus>Cancel</Button>\n                  <Button variant=\"default\">Rollback</Button>\n                </>\n              }\n            />\n          </>\n        }\n      />\n    ),\n  },\n};\n\nexport const WithFooter: StoryObj<ModalWindowProps> = {\n  args: {\n    children: (\n      <WindowLayout\n        header=\"Dialog title\"\n        content={\n          <StyledContainer>\n            <StyledFrame>\n              <SpeedSearchTreeSample />\n            </StyledFrame>\n          </StyledContainer>\n        }\n        footer={\n          <WindowLayout.Footer\n            left={\n              <>\n                <TooltipTrigger\n                  tooltip={<HelpTooltip helpText=\"Show Help Contents\" />}\n                >\n                  <Button variant=\"icon\">\n                    <PlatformIcon icon=\"actions/help\"></PlatformIcon>\n                  </Button>\n                </TooltipTrigger>\n                <Checkbox>Open in editor</Checkbox>\n              </>\n            }\n            right={\n              <>\n                <Button autoFocus>Cancel</Button>\n                <Button variant=\"default\">Ok</Button>\n              </>\n            }\n          />\n        }\n      />\n    ),\n  },\n};\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { WindowContext } from \"./WindowContext\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 24px; // Double check\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\n/**\n * Implements appearance of Window header, and also acts as a handle for moving the window.\n * Expected to be used with {@link WindowLayout}:\n *\n * @example\n * ```tsx\n * <ModalWindow>\n *    <WindowLayout header={<WindowHeader>header</WindowHeader>} />\n * </ModalWindow>\n * ```\n */\nexport const WindowHeader = ({ children }: { children?: React.ReactNode }) => {\n  const { movable, titleProps } = useContext(WindowContext);\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {children || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderTitle()\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { ButtonGroup } from \"@intellij-platform/core/ButtonGroup\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nexport function WindowFooter({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer.\n   * {@link Button}s are usually used inside the right content.\n   * A {@link ButtonGroup} is rendered around the content to allow for keyboard navigation with arrow keys.\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>\n        <ButtonGroup>{right}</ButtonGroup>\n      </StyledFooterSide>\n    </StyledFooter>\n  );\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { WindowHeader } from \"./WindowHeader\";\nimport { WindowFooter } from \"@intellij-platform/core/ModalWindow/WindowFooter\";\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\n/**\n * Window content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function WindowLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the window at the top. Use {@link WindowLayout.Header} for the default window header,\n   * which also acts as a move handle for the window. If a string is passed, it will be wrapped by\n   * {@link WindowLayout.Header} automatically.\n   */\n  header: React.ReactNode;\n  /**\n   * Scrollable content of the window.\n   */\n  content: React.ReactNode;\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `content`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <>\n      {header &&\n        (typeof header === \"string\" ? (\n          <WindowHeader>{header}</WindowHeader>\n        ) : (\n          header\n        ))}\n      <StyledWindowContentWrapper>{content}</StyledWindowContentWrapper>\n      {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n    </>\n  );\n}\n\n// Just for improved discoverability. Might as well export WindowFooter and WindowHeader instead.\nWindowLayout.Footer = WindowFooter;\nWindowLayout.Header = WindowHeader;\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree, TreeRefValue } from \"@intellij-platform/core/Tree\";\nimport { staticSpeedSearchTreeItems } from \"@intellij-platform/core/Tree/story-helpers\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Iterable<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = [\"BasicList\"],\n  onSelectedKeysChange,\n  treeRef,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: Selection) => void;\n  treeRef?: React.RefObject<TreeRefValue>;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      treeRef={treeRef}\n      autoFocus\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={new Set(defaultSelectedKeys)}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      {staticSpeedSearchTreeItems}\n    </SpeedSearchTree>\n  );\n};\n"],"names":[],"sourceRoot":""}