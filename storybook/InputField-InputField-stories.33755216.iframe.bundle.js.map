{"version":3,"file":"InputField-InputField-stories.33755216.iframe.bundle.js","mappings":";;;;AAsBA;;AAKA;;AAOA;;AAUA;;;;;AAKA;AAIA;;AAMA;;AAKA;AAIA;;;AAMA;;AAoBA;AC3FA;;;AC8EA;;;AAMA;;;AAIA;AACA;AAGA;;;;;AAUA;;AC1EA;AAUA;;;AAGA;AAIA;AAEA;AAEA;;;AAQA;AAEA;AAEA;AAGA;;AAEA;AAOA;AACA;;;AAIA;AACA;AAKA;AAIA;AACA;;;;;;AA4BA;;;ACzGA;AAEA;;AAGA;AAGA;AACA;AAEA;AAQA","sources":["webpack://@intellij-platform/core/./src/InputField/Input.tsx","webpack://@intellij-platform/core/./src/Label/StyledLabel.ts","webpack://@intellij-platform/core/./src/InputField/InputField.tsx","webpack://@intellij-platform/core/./src/Tooltip/Tooltip.tsx","webpack://@intellij-platform/core/./src/Tooltip/ValidationTooltip.tsx"],"sourcesContent":["import React, {\n  ForwardedRef,\n  HTMLProps,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { ValidationState } from \"@react-types/shared\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\n\nconst StyledInputBox = styled.div<{\n  disabled?: boolean;\n  focused?: boolean;\n  validationState: ValidationState | undefined;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  min-width: 4rem; // https://jetbrains.github.io/ui/controls/input_field/#28\n  background: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"TextField.disabledBackground\")\n      : theme.color(\"TextField.background\")};\n  border: 1px solid\n    ${({ theme, focused, disabled, validationState }) =>\n      theme.commonColors.border({\n        focused: focused,\n        disabled: disabled,\n        invalid: validationState === \"invalid\",\n      })};\n  box-shadow: 0 0 0 0.125rem\n    ${({ theme, focused = false, validationState, disabled }) =>\n      disabled\n        ? \"transparent\"\n        : theme.commonColors.focusRing({\n            invalid: validationState === \"invalid\",\n            focused: focused,\n          })};\n  border-radius: 1px;\n`;\n\nconst StyledInput = styled.input<{ disabled?: boolean }>`\n  all: unset;\n  padding: 0.1875rem 0.375rem;\n  flex: 1; // fill in the available space within the input box\n  line-height: 1rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )};\n  color: ${({ theme, disabled }) =>\n    disabled &&\n    theme.color(\n      \"TextField.inactiveForeground\" as UnknownThemeProp<\"TextField.inactiveForeground\">\n    )};\n\n  caret-color: ${({ theme }) =>\n    theme.color(\n      \"TextField.caretForeground\" as UnknownThemeProp<\"TextField.caretForeground\">\n    )};\n  &::selection {\n    background: ${({ theme }) =>\n      theme.color(\n        \"*.selectionBackground\"\n      )}; // Not checked with the reference impl\n    color: ${({ theme }) =>\n      theme.color(\n        \"*.selectionForeground\"\n      )}; // Not checked with the reference impl\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  }\n`;\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  validationState?: ValidationState;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n}\n\n/**\n * Bare input, themed, and with a few extra features:\n * - Support for \"invalid\" state ({@param validationState}\n * - Support for autoSelect.\n * - Disables spell check by default. It can be overwritten.\n * - TODO: support for addons within the input box, before and after the input area.\n * Use {@link InputField} for more features like an associated label, error message and context help.\n */\nexport const Input = React.forwardRef(function Input(\n  { validationState, autoSelect, ...props }: InputProps,\n  forwardedRef: ForwardedRef<HTMLInputElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable(\n    {\n      isDisabled: props.disabled,\n      ...(props as HTMLProps<Element>),\n    },\n    ref\n  );\n  const [isFocused, setIsFocused] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setIsFocused,\n  });\n\n  useEffect(() => {\n    if (autoSelect) {\n      ref.current.select();\n    }\n  }, [autoSelect]);\n\n  return (\n    <StyledInputBox\n      spellCheck={false}\n      {...mergeProps(focusWithinProps)}\n      focused={isFocused}\n      validationState={validationState}\n      disabled={props.disabled}\n    >\n      <StyledInput ref={ref} {...mergeProps(props, focusableProps)} />\n    </StyledInputBox>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledLabel = styled.label<{ disabled?: boolean }>`\n  color: ${({ theme, disabled }) => theme.commonColors.label({ disabled })};\n`;\n","import React, {\n  ChangeEvent,\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n} from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { AriaFieldProps, useField } from \"@react-aria/label\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableProps } from \"@react-types/shared\";\nimport { Label } from \"@intellij-platform/core/Label\";\nimport {\n  PositionedTooltipTrigger,\n  ValidationTooltip,\n} from \"@intellij-platform/core/Tooltip\";\nimport { Input } from \"@intellij-platform/core/InputField/Input\";\n\ntype LabelPlacement = \"above\" | \"before\";\n\nexport interface InputFieldProps\n  extends Omit<AriaFieldProps, \"labelElementType\">,\n    FocusableProps {\n  /**\n   * className applied on the field's wrapper div.\n   */\n  className?: string;\n  /**\n   * style applied on the field's wrapper div.\n   */\n  style?: CSSProperties;\n  /**\n   * Label to be associated with the input.\n   */\n  label?: React.ReactNode;\n  /**\n   * Context help, shown below the input. A typical use case is\n   * [to provide example values](https://jetbrains.github.io/ui/principles/context_help/#07).\n   */\n  contextHelp?: React.ReactNode;\n  /**\n   * Placement of the label with respect to the input box.\n   */\n  labelPlacement?: LabelPlacement;\n\n  /**\n   * Whether the input is disabled. Use this prop\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Convenient prop to be used instead of inputProps.placeholder\n   **/\n  placeholder?: string;\n  /**\n   * Convenient prop to be used instead of inputProps.value\n   **/\n  value?: HTMLProps<HTMLInputElement>[\"value\"];\n  /**\n   * Convenient prop to be used instead of inputProps.defaultValue\n   **/\n  defaultValue?: HTMLProps<HTMLInputElement>[\"defaultValue\"];\n  /**\n   * Convenient prop to be used instead of inputProps.onChange. It also calls the passed callback with the\n   * change value instead of input.\n   **/\n  onChange?: (newValue: string) => void;\n  /**\n   * Props to be passed to the underlying input element.\n   **/\n  inputProps?: Omit<\n    HTMLProps<HTMLInputElement>,\n    \"as\" | \"ref\" | \"disabled\" //isDisabled should be used\n  >;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n}\n\nconst StyledInputContainer = styled.div<{ labelPlacement?: LabelPlacement }>`\n  display: inline-flex;\n  flex-direction: ${({ labelPlacement }) =>\n    labelPlacement === \"above\" ? \"column\" : \"row\"};\n  align-items: start;\n  gap: 0.375rem;\n`;\n\nconst StyledLabel = styled(Label)`\n  margin-top: 0.25rem;\n  line-height: 1.2;\n`;\nconst StyledContextHelp = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n`;\n\nconst StyledBoxAndContextHelpWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: 0.25rem; /* Not checked with the reference impl */\n`;\n\n/**\n * An input box with an associated label, error message, and context help.\n */\nexport const InputField = React.forwardRef(function InputField(\n  {\n    className,\n    style,\n    labelPlacement = \"before\",\n    contextHelp,\n    inputProps = {},\n    ...props\n  }: InputFieldProps,\n  forwardedRef: ForwardedRef<HTMLInputElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { fieldProps, errorMessageProps, labelProps, descriptionProps } =\n    useField(props);\n\n  return (\n    <StyledInputContainer\n      labelPlacement={labelPlacement}\n      className={className}\n      style={style}\n    >\n      <StyledLabel {...labelProps} disabled={props.isDisabled}>\n        {props.label}\n      </StyledLabel>\n      <StyledBoxAndContextHelpWrapper>\n        <PositionedTooltipTrigger\n          placement=\"top start\"\n          crossOffset={36}\n          showOnFocus\n          isDisabled={!props.errorMessage}\n          tooltip={\n            <ValidationTooltip>\n              <div {...errorMessageProps}>{props.errorMessage}</div>\n            </ValidationTooltip>\n          }\n          delay={0}\n        >\n          <Input\n            ref={ref}\n            placeholder={props.placeholder}\n            disabled={props.isDisabled}\n            validationState={props.validationState}\n            autoSelect={props.autoSelect}\n            autoFocus={props.autoFocus}\n            {...mergeProps(fieldProps, inputProps, {\n              value: props.value,\n              defaultValue: props.defaultValue,\n              onChange: (e: ChangeEvent<HTMLInputElement>) =>\n                props.onChange?.(e.target.value),\n            })}\n          />\n        </PositionedTooltipTrigger>\n        {contextHelp && (\n          <StyledContextHelp {...descriptionProps}>\n            {contextHelp}\n          </StyledContextHelp>\n        )}\n      </StyledBoxAndContextHelpWrapper>\n    </StyledInputContainer>\n  );\n});\n","import React, { ForwardedRef, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n  className?: string;\n}\n\n// Providing default value for paddings, based on intellijlaf theme. In Intellij Platform, themes extend either\n// intellijlaf or darcula. Which means some properties can be omitted in the custom theme, relying on the values\n// in the base theme. This is not how theming works here, at the moment, and there are other similar issues, but\n// this is just a mitigation for one case, spacing in tooltip.\nconst DEFAULT_TEXT_BORDER_INSETS = \"0.5rem 0.8125rem 0.625rem 0.625rem\";\nconst DEFAULT_SMALL_TEXT_BORDER_INSETS = \"0.375rem 0.75rem 0.4375rem 0.625rem\";\n\nconst StyledTooltip = styled.div<{ multiline?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${({ theme }) =>\n    theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\")};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\") ||\n        DEFAULT_TEXT_BORDER_INSETS\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\") ||\n        DEFAULT_SMALL_TEXT_BORDER_INSETS};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") ? \"1px\" : \"0px\"};\n  border-color: ${({ theme }) =>\n    theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\")};\n  ${WINDOW_SHADOW};\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { state, isInteractive } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  return (\n    <StyledTooltip\n      multiline={multiline}\n      {...tooltipProps}\n      className={props.className}\n      ref={ref}\n    >\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ValidationTooltipProps {\n  children: React.ReactNode;\n  /**\n   * @default error\n   */\n  type?: \"error\" | \"warning\";\n}\n\nconst StyledValidationTooltip = styled(Tooltip)`\n  box-shadow: none;\n  padding: 0.25rem 0.5rem; // from ComponentValidator class in the reference impl\n  max-width: ${({ theme }) =>\n    `${theme.value<number>(\"ValidationTooltip.maxWidth\")}px`};\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.errorBackground\")};\n  border: 1px solid\n    ${({ theme }) => theme.color(\"ValidationTooltip.errorBorderColor\")};\n`;\n\nconst StyledWarningValidationTooltip = styled(StyledValidationTooltip)`\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBackground\")};\n  border-color: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBorderColor\")};\n`;\n\n/**\n * Tooltip to be used for validation error messages\n * @see https://jetbrains.github.io/ui/principles/validation_errors/\n */\nexport const ValidationTooltip = ({\n  type = \"error\",\n  children,\n}: ValidationTooltipProps): JSX.Element => {\n  const Component =\n    type === \"error\" ? StyledValidationTooltip : StyledWarningValidationTooltip;\n  return <Component multiline>{children}</Component>;\n};\n"],"names":[],"sourceRoot":""}