{"version":3,"file":"main.9251eb44.iframe.bundle.js","mappings":";AAuCA;AACA;AAGA;;AAEA;;;;AAiBA","sources":["webpack://@intellij-platform/core/./src/Theme/ThemeProvider.tsx"],"sourcesContent":["import React, { CSSProperties, ReactNode } from \"react\";\nimport { ModalProvider } from \"@react-aria/overlays\";\nimport { createGlobalStyle, css, ThemeContext } from \"styled-components\";\n\nimport { Theme } from \"./Theme\";\n\ninterface ThemeProviderProps {\n  theme: Theme;\n  children: ReactNode;\n  /**\n   * Global style options. Those, in addition to a few de-facto standard style normalization rules will be applied to\n   * the body, unless, `false` is passed for the value. In that case, you should render a custom wrapper that\n   * implements the necessary styles:\n   * ```ts\n   * import { FontStyles } from '@intellij-platform/core';\n   *\n   * const MyWrapper = styled.div`\n   *   ${FontStyles};\n   * `;\n   *\n   * <ThemeProvider>\n   *    <MyWrapper>\n   *      <App />\n   *    </MyWrapper>\n   * </ThemeProvider>\n   * ```\n   * @default true\n   */\n  globalStyles?: false | FontStyleOptions;\n}\n\ntype FontStyleOptions = Pick<CSSProperties, \"fontFamily\" | \"fontSize\">;\n\n/**\n * Font styles to be applied on a wrapper for the whole app. All components rely on this to be used on either body\n * or a top level wrapper.\n * **You don't need to use this** unless {@link ThemeProviderProps#globalStyles} is set to false.\n */\nexport const FontStyles = css<FontStyleOptions>`\n  font-family: ${({ fontFamily = \"system-ui\" }) => fontFamily};\n  font-size: ${({ fontSize = \"13px\" }) => fontSize};\n`;\n\nconst GlobalStyles = createGlobalStyle<FontStyleOptions>`\n  body {\n    ${FontStyles};\n    margin: 0;\n    text-rendering: optimizeLegibility;\n  }\n`;\n\n/**\n * Similar to styled-component's [ThemeProvider][1], provides [ThemeContext][2]. With a few additions and nuances:\n *\n * - It also provides the default font styles (overridable via props), as well as a minimal normalization style on\n *   `body`. Global styles can be disabled via {@link ThemeProviderProps#globalStyles}, if needed.\n * - Unlike styled-component's `ThemeProvider`, it doesn't [merge][3] nested themes, into a plain object. That's\n *   important, because a theme must be an instance of {@link Theme} class.\n *\n * [1]: https://styled-components.com/docs/api#themeprovider\n * [2]: https://styled-components.com/docs/advanced#via-usecontext-react-hook\n * [3]: https://github.com/styled-components/styled-components/blob/86d40770d35cfa359748998628182af35aa8983b/packages/styled-components/src/models/ThemeProvider.tsx#L75\n */\nexport const ThemeProvider = ({\n  theme,\n  children,\n  globalStyles = {},\n}: ThemeProviderProps) => {\n  return (\n    <ModalProvider>\n      <ThemeContext.Provider value={theme}>\n        {globalStyles !== false && <GlobalStyles {...globalStyles} />}\n        {children}\n      </ThemeContext.Provider>\n    </ModalProvider>\n  );\n};\n"],"names":[],"sourceRoot":""}