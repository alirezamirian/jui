{"version":3,"file":"4824.89345e14.iframe.bundle.js","mappings":";;AAoCA;;;;AAMA;;;;AAyGA;;;;;;AChIA;;;;;;;;AAQA;AACA;AAEA;AACA;AAIA;;AAKA;AACA;AACA;;;AAGA;AACA;AACA;AAEA;AAEA;;AAGA;;;;;;;;;;AAYA;;;;AAIA;;;;;;;;AAQA;;;;;;;AAOA;;;;;;AC9EA;;;;AAMA;AACA;AAMA;AAKA;AACA;;AAMA;AACA;;AAIA;;;;;;;AAUA;AACA;AACA;;;;;;;;;;;AC9BA;AAMA;;;AAKA;;ACCA;AACA;AAEA;;AAEA;AACA","sources":["webpack://@intellij-platform/core/./src/Menu/MenuItem.tsx","webpack://@intellij-platform/core/./src/Menu/StyledMenu.tsx","webpack://@intellij-platform/core/./src/Menu/StyledMenuItem.tsx","webpack://@intellij-platform/core/./src/Menu/MenuSection.tsx","webpack://@intellij-platform/core/./src/StyledSeparator.tsx"],"sourcesContent":["import React, { HTMLAttributes, ReactNode, RefObject, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!)!;\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const hasSubmenu = item.hasChildNodes;\n  const { menuItemProps: ariaMenuItemProps, ...result } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: hasSubmenu ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n\n  // useMenuItem in react aria utilizes useHover to focus item on hover. The logic there conflicts with nested menus\n  // requirements (at least based on how nested menu is implemented here currently). Also, submenuBehavior requires\n  // some more customization. So we delete the handlers set by useHover in useMenuItem, and add a custom useHover.\n  delete ariaMenuItemProps.onMouseEnter;\n  delete ariaMenuItemProps.onPointerEnter;\n\n  if (submenuBehavior === \"default\" && isExpanded) {\n    // When menu item has its submenu opened, clicking it should not move focus or do anything.\n    delete ariaMenuItemProps.onPointerDown;\n  }\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled,\n    onHoverStart: () => {\n      const isAnySubmenuOpen = [...state.expandedKeys].some(\n        (expandedKey) =>\n          state.collection.getItem(expandedKey)?.parentKey === item.parentKey\n      );\n\n      if (submenuBehavior === \"default\" && !isExpanded) {\n        state.toggleKey(item.key);\n      }\n\n      if (!isFocusVisible()) {\n        const shouldFocus =\n          submenuBehavior === \"default\" ? !isExpanded : !isAnySubmenuOpen;\n        if (shouldFocus) {\n          state.selectionManager.setFocused(true);\n        }\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  return {\n    ...result,\n    menuItemProps: mergeProps(\n      hasSubmenu\n        ? {\n            \"aria-expanded\": isExpanded,\n            \"aria-haspopup\": \"menu\",\n          }\n        : {},\n      ariaMenuItemProps,\n      hoverProps,\n      keyboardProps,\n      submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n    ),\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...menuItemProps}\n        $disabled={isDisabled}\n        $active={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using Overlay:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         *\n         */\n        <Overlay\n          OverlayComponent={\n            /**\n             *  The FocusScope included in the default Overlay, messes with a particular expected behavior. So we use\n             *  SimpleOverlay, which just renders its children as a portal. There may be a better solution for that\n             *  problem, which would eliminate the need for the funky `OverlayComponent` prop on our `Overlay`\n             *  component. Something to look into in the future.\n             */\n            SimpleOverlay\n          }\n        >\n          <div ref={nestedMenuRef} {...positionProps}>\n            {renderSubmenu({ parentState: state, rootKey: item.key })}\n          </div>\n        </Overlay>\n      )}\n    </>\n  );\n}\n\n/**\n * A replacement for react-aria Overlay, which doesn't render FocusScope\n */\nfunction SimpleOverlay({\n  children,\n  portalContainer = document.body,\n}: {\n  children: ReactNode;\n  portalContainer?: Element | undefined;\n}) {\n  return ReactDOM.createPortal(children, portalContainer);\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ $fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ $fillAvailableSpace }) =>\n    $fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  $disabled: boolean;\n  $active: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ $active }) => $active && highlightedStyle};\n  ${({ $disabled }) => $disabled && disabledStyle};\n\n  padding-right: 1.25rem;\n  line-height: 1.3125rem; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.div`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n"],"names":[],"sourceRoot":""}