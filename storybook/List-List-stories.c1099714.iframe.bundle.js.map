{"version":3,"file":"List-List-stories.c1099714.iframe.bundle.js","mappings":";AAyDA;;;;AAKA;;;;AC3CA;;AAIA;;;;AAIA;AAMA;;;;ACqBA","sources":["webpack://@intellij-platform/core/./src/List/List.stories.tsx","webpack://@intellij-platform/core/./src/Menu/MenuItemLayout.tsx","webpack://@intellij-platform/core/./src/Menu/MenuOverlayFromOrigin.tsx"],"sourcesContent":["import React, { Key, useState } from \"react\";\nimport { Meta, StoryFn, StoryObj } from \"@storybook/react\";\nimport { List, ListProps } from \"./List\";\nimport { legends } from \"../../test-data\";\nimport { Divider } from \"../Collections/Divider\";\nimport { Pane } from \"../story-components\";\nimport {\n  commonListStories,\n  itemRenderer,\n  renderItemCustomUI,\n  renderItemText,\n} from \"./story-helpers\";\nimport {\n  ContextMenuContainer,\n  Item,\n  Menu,\n  MenuItemLayout,\n  PlatformIcon,\n  Section,\n  styled,\n} from \"@intellij-platform/core\";\n\nexport default {\n  title: \"Components/List (Basic)\",\n  component: List,\n  args: {\n    items: legends,\n    children: itemRenderer(renderItemText),\n    fillAvailableSpace: true,\n  },\n} as Meta<ListProps<object>>;\n\nconst renderInPane = (props: ListProps<(typeof legends)[number]>) => (\n  <Pane>\n    <List {...props} />\n  </Pane>\n);\nexport const SingleSelection: StoryObj<ListProps<(typeof legends)[number]>> = {\n  render: renderInPane,\n  args: {\n    selectionMode: \"single\",\n  },\n};\n\nexport const allowEmptySelection: StoryObj<\n  ListProps<(typeof legends)[number]>\n> = {\n  render: renderInPane,\n  args: {\n    selectionMode: \"single\",\n    allowEmptySelection: true,\n  },\n};\n\nexport const WithConnectedInput = commonListStories.withConnectedInput(List);\n\nconst StyledLabel = styled.label`\n  color: ${({ theme }) => theme.commonColors.label()};\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem;\n`;\nexport const shownAsFocused: StoryFn = () => {\n  const [shownAsFocused, setShowAsFocused] = useState(false);\n  return (\n    <Pane>\n      <StyledLabel>\n        <input\n          type=\"checkbox\"\n          checked={shownAsFocused}\n          onChange={(e) => setShowAsFocused(e.target.checked)}\n        />\n        Show as focused\n      </StyledLabel>\n      <br />\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        estimatedItemHeight={40}\n        showAsFocused={shownAsFocused}\n      >\n        {itemRenderer(renderItemCustomUI)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const WithStaticData: StoryFn = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"multiple\" fillAvailableSpace>\n        <Item>Paco de lucia</Item>\n        <Divider />\n        <Item>Vicente Amigo</Item>\n        <Section title=\"Other\">\n          <Item>Gerardo Nunez</Item>\n          <Item>El Amir</Item>\n        </Section>\n      </List>\n    </Pane>\n  );\n};\n\nexport const MultiSelect: StoryObj<ListProps<object>> = {\n  render: ({ fillAvailableSpace, shouldFocusWrap, showAsFocused }: any) => {\n    return (\n      <Pane>\n        <List\n          selectionMode=\"multiple\"\n          items={legends}\n          fillAvailableSpace={fillAvailableSpace}\n          shouldFocusWrap={shouldFocusWrap}\n          showAsFocused={showAsFocused}\n        >\n          {itemRenderer(renderItemText)}\n        </List>\n      </Pane>\n    );\n  },\n};\n\nexport const WithContextMenu: StoryFn = () => {\n  const [selectedKeys, setSelectedKeys] = useState<\"all\" | Set<Key>>(\n    new Set([])\n  );\n  return (\n    <Pane>\n      <ContextMenuContainer\n        renderMenu={() => {\n          const renderActions = () => {\n            if (typeof selectedKeys !== \"string\" && selectedKeys.size === 0) {\n              return <Item>Nothing here</Item>;\n            } else {\n              return [\n                <Item textValue={`Cut`} key=\"Cut\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n                    content={`Cut`}\n                    shortcut={\"⌘X\"}\n                  />\n                </Item>,\n                <Item textValue={`Copy`} key=\"Copy\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/copy\"} />}\n                    content={`Copy`}\n                    shortcut={\"⌘C\"}\n                  />\n                </Item>,\n                <Item textValue={`Delete`} key=\"Paste\">\n                  <MenuItemLayout content={`Delete`} shortcut=\"⌫\" />\n                </Item>,\n              ];\n            }\n          };\n          return <Menu aria-label=\"Tree Context Menu\">{renderActions()}</Menu>;\n        }}\n      >\n        <List\n          selectionMode=\"single\"\n          selectedKeys={selectedKeys}\n          onSelectionChange={setSelectedKeys}\n          items={legends}\n          fillAvailableSpace\n        >\n          {itemRenderer(renderItemText)}\n        </List>\n      </ContextMenuContainer>\n    </Pane>\n  );\n};\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { ForwardedRef, useEffect, useMemo } from \"react\";\nimport {\n  MenuOverlay,\n  MenuOverlayProps,\n} from \"@intellij-platform/core/Menu/MenuOverlay\";\nimport { useOverlayPositionFromOrigin } from \"@intellij-platform/core/Menu/useOverlayPositionFromOrigin\";\nimport { getScrollParent, isScrollable, useObjectRef } from \"@react-aria/utils\";\nimport { createGlobalStyle } from \"styled-components\";\n\ninterface MenuOverlayFromOriginProps\n  extends Pick<MenuOverlayProps, \"onClose\" | \"defaultAutoFocus\"> {\n  /**\n   * Origin point within the viewport, based on which the menu overlay should be positioned.\n   * Any pointer/mouse event, or a plain object with clientX and clientY can be passed.\n   */\n  origin:\n    | {\n        /**\n         * Horizontal coordinate of the origin point within the viewport.\n         * See {@link MouseEvent.clientX}\n         */\n        clientX: number;\n        /**\n         * Vertical coordinate of the origin point within the viewport.\n         * See {@link MouseEvent.clientX}\n         */\n        clientY: number;\n\n        /**\n         * Origin's target element.\n         * Used to find the scrollable parent and disable scrolling while\n         * the overlay is rendered.\n         */\n        target?: EventTarget | HTMLElement | null;\n      }\n    | undefined;\n  children: React.ReactNode;\n  /**\n   * Weather the content of the popover should not grab the focus upon open\n   * @default false\n   */\n  disableAutoFocus?: boolean;\n}\n\nconst DisableScrollStyles = createGlobalStyle`\n  .disable-scroll {\n      overflow: hidden !important;\n  }\n`;\n\n/**\n * Menu overlay position based on an origin point on the screen.\n * Useful when the menu is opened by a pointer event.\n * TODO: Decouple from menu and make it OverlayFromOrigin\n */\nexport const MenuOverlayFromOrigin = React.forwardRef(\n  function MenuOverlayFromOrigin(\n    {\n      children,\n      origin,\n      disableAutoFocus = false,\n      ...otherProps\n    }: MenuOverlayFromOriginProps,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) {\n    const overlayRef = useObjectRef(forwardedRef);\n    const { positionProps } = useOverlayPositionFromOrigin({\n      overlayRef,\n      origin,\n      containerPadding: { x: 0, y: 4 },\n    });\n\n    const scrollParent: null | Element = useMemo(() => {\n      if (!(origin?.target instanceof HTMLElement)) {\n        return null;\n      }\n      return isScrollable(origin.target)\n        ? origin.target\n        : getScrollParent(origin.target);\n    }, [origin?.target]);\n\n    useEffect(() => {\n      // Known issue: closing contextmenu causes a jump in scroll (see project view in example app)\n      // It's an issue that existed before the change to disable scroll when the contextmenu is open,\n      // so it should not have anythign to do with changing overflow hidden when the menu is open.\n      scrollParent?.classList?.add(\"disable-scroll\");\n      return () => {\n        scrollParent?.classList?.remove(\"disable-scroll\");\n      };\n    }, []);\n\n    return (\n      <>\n        <DisableScrollStyles />\n        {Boolean(origin) && (\n          <MenuOverlay\n            overlayProps={positionProps}\n            overlayRef={overlayRef}\n            restoreFocus\n            autoFocus={!disableAutoFocus}\n            {...otherProps}\n          >\n            {children}\n          </MenuOverlay>\n        )}\n      </>\n    );\n  }\n);\n"],"names":[],"sourceRoot":""}