{"version":3,"file":"SearchInput-SearchInput-stories.0c7cf8a4.iframe.bundle.js","mappings":";;AA0BA;AAEA;;;;;;;;;ACSA;AACA;;;;;;;AAOA;AAEA;;;;AAKA;AAEA;;;;AAQA;AAEA;;AAQA;;;;;;;;;;ACwBA","sources":["webpack://@intellij-platform/core/./src/SearchInput/SearchInput.stories.tsx","webpack://@intellij-platform/core/./src/IconButton/IconButton.tsx","webpack://@intellij-platform/core/./src/SearchInput/SearchInput.tsx"],"sourcesContent":["import React from \"react\";\nimport { Meta, StoryObj } from \"@storybook/react\";\n\nimport { SearchInput, SearchInputProps } from \"./SearchInput\";\nimport {\n  ActionTooltip,\n  AutoHoverPlatformIcon,\n  IconButton,\n  styled,\n  StyledHoverContainer,\n  TooltipTrigger,\n} from \"@intellij-platform/core\";\n\nexport default {\n  title: \"Components/SearchInput\",\n  component: SearchInput,\n  args: {\n    style: {\n      width: 250,\n    },\n  },\n  argTypes: {},\n} as Meta<SearchInputProps>;\n\nconst StyledSearchValueResult = styled.div`\n  margin-top: 1rem;\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nconst render = (props: SearchInputProps) => {\n  const [submittedValue, setSubmittedValue] = React.useState(\"\");\n  return (\n    <>\n      <SearchInput {...props} onSubmit={setSubmittedValue} />\n      <StyledSearchValueResult>\n        Submitted value: {submittedValue}\n      </StyledSearchValueResult>\n    </>\n  );\n};\n\nexport const Default: StoryObj<SearchInputProps> = {\n  render,\n};\n\nexport const WithHistory: StoryObj<SearchInputProps> = {\n  render,\n  args: {\n    searchHistory: [\"search query 1\", \"search query 2\"],\n  },\n};\n\nexport const WithAfterAddons: StoryObj<SearchInputProps> = {\n  render,\n  args: {\n    addonAfter: (\n      <>\n        <TooltipTrigger tooltip={<ActionTooltip actionName=\"Match Case\" />}>\n          <StyledHoverContainer as={IconButton} excludeFromTabOrder={false}>\n            <AutoHoverPlatformIcon\n              icon=\"actions/regex\"\n              hoverIcon=\"actions/regexHovered\"\n            />\n          </StyledHoverContainer>\n        </TooltipTrigger>\n        <TooltipTrigger tooltip={<ActionTooltip actionName=\"Regex\" />}>\n          <StyledHoverContainer as={IconButton} excludeFromTabOrder={false}>\n            <AutoHoverPlatformIcon\n              icon=\"actions/matchCase.svg\"\n              hoverIcon=\"actions/matchCaseHovered.svg\"\n            />\n          </StyledHoverContainer>\n        </TooltipTrigger>\n      </>\n    ),\n  },\n};\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { ComponentProps, useState } from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n  CommonActionId,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { Item } from \"@intellij-platform/core/Collections\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport interface SearchInputProps\n  extends Omit<InputProps, \"onSubmit\" | \"onChange\"> {\n  /**\n   * Search history to be shown as a menu when the search icon is pressed.\n   */\n  searchHistory?: Array<string>;\n  /**\n   * The content of \"show history\" button tooltip, and the corresponding action title.\n   * @default \"Recent Search\"\n   */\n  historyButtonTitle?: string;\n  /**\n   * Called when the search input is cleared by either clear button or `Escape` key.\n   * `onChange` is also called with an empty string, whenever the input is cleared,\n   * so there is no need for updating the state using `onClear`, when the value is controlled.\n   *\n   * @param clearedValue the value before clearing.\n   */\n  onClear?: (clearedValue: string) => void;\n  /**\n   * Called when the search is submitted by pressing `Enter`\n   * @param value submitted text\n   */\n  onSubmit?: (value: string) => void;\n  /**\n   * Controlled value of the search input\n   */\n  value?: string;\n  /**\n   * Default value of the search input, used for initialization when value is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * Called when the value is changed.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Called when a history item is selected. `onChange` is called with the selected text, so\n   * there is no need for updating the state using `onHistoryItemSelected`, when the value is controlled.\n   *\n   * @param value text selected from history.\n   * @param previousValue the value of the input before the history item was selected.\n   */\n  onHistoryItemSelected?: (value: string, previousValue: string) => void;\n}\n\nconst StyledInput = styled(Input)`\n  input[type=\"search\"] {\n    -webkit-appearance: none;\n    &::-webkit-search-cancel-button {\n      -webkit-appearance: none;\n    }\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n  }\n`;\n\n/**\n * A wrapper around {@link Input} with a few additions:\n * - A Search icon, added as an {@link InputProps#addonBefore addonBefore}.\n * - A clear button, added as an {@link InputProps#addonAfter addonAfter}, when the input has value.\n *   {@link SearchInputProps#onClear onClear} is called when the clear button is clicked.\n * - A list of search queries shown as a menu, when the search icon is clicked,\n *   if {@link SearchInputProps#searchHistory searchHistory} is provided.\n * - An action provided on the input element, to open the search history via\n *   {@link CommonActionId.SHOW_SEARCH_HISTORY} shortcut.\n * - Search submission callback ({@link SearchInputProps#onSubmit onSubmit}) called when search is submitted by pressing Enter\n *\n * {@link InputProps#onChange onChange} and {@link InputProps#onSubmit onSubmit} props are also different in SearchInput, compared to\n * the corresponding props of the native input.\n *\n * Caveat: If the width is not set (either explicitly or via the entailing layout), the width of the input will change when clear button shows/hides.\n *\n * @see Input\n * @see InputField\n */\nexport const SearchInput = React.forwardRef(function SearchInput(\n  {\n    addonBefore,\n    addonAfter,\n    searchHistory,\n    onClear,\n    onSubmit,\n    onHistoryItemSelected,\n    historyButtonTitle = \"Recent Search\",\n    value: valueProp,\n    defaultValue = \"\",\n    onChange,\n    type = \"search\",\n    inputRef: inputRefProp,\n    ...props\n  }: SearchInputProps,\n  forwardedRef: React.Ref<HTMLDivElement>\n) {\n  const [value, setValue] = useControlledState(\n    valueProp!,\n    defaultValue,\n    onChange!\n  );\n  const inputContainerRef = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const [isSearchHistoryOpen, setSearchHistoryOpen] = useState(false);\n  const showSearchHistoryAction: ActionDefinition = {\n    id: CommonActionId.SHOW_SEARCH_HISTORY,\n    title: historyButtonTitle,\n    actionPerformed: () => {\n      setSearchHistoryOpen(true);\n    },\n  };\n  // TODO: rename HelpTooltip, ActionTooltip, etc. to Tooltip.Action Tooltip.Help, then add ActionTooltip in action\n  //  components, and use that instead of the more low-level API used here.\n  const getShortcut = useGetActionShortcut();\n  const searchIcon = searchHistory ? (\n    <MenuTrigger\n      isOpen={isSearchHistoryOpen}\n      onOpenChange={setSearchHistoryOpen}\n      positioningTargetRef={inputContainerRef}\n      renderMenu={({ menuProps }) => (\n        <Menu\n          {...menuProps}\n          autoFocus=\"first\"\n          onAction={(key) => {\n            const historyItemText =\n              searchHistory[parseInt(`${key}`.split(\"_\")[0])];\n            if (historyItemText !== undefined) {\n              setValue(historyItemText);\n              onHistoryItemSelected?.(historyItemText, value);\n              inputRef.current?.focus();\n            }\n          }}\n        >\n          {searchHistory.map((historyItem, index) => (\n            <Item key={`${index}_${historyItem}`}>{historyItem}</Item>\n          ))}\n        </Menu>\n      )}\n    >\n      {(menuTriggerProps, ref) => (\n        <TooltipTrigger\n          tooltip={\n            <ActionTooltip\n              actionName={historyButtonTitle}\n              shortcut={getShortcut(CommonActionId.SHOW_SEARCH_HISTORY)}\n            />\n          }\n        >\n          {(tooltipTriggerProps) => (\n            <PlatformIcon\n              {...mergeProps(tooltipTriggerProps, menuTriggerProps)}\n              ref={ref}\n              icon=\"actions/searchWithHistory.svg\"\n              role=\"button\"\n              aria-label={historyButtonTitle}\n            />\n          )}\n        </TooltipTrigger>\n      )}\n    </MenuTrigger>\n  ) : (\n    <PlatformIcon icon=\"actions/search.svg\" />\n  );\n  const clear = () => {\n    setValue(\"\");\n    onClear?.(value);\n  };\n  const inputProps = mergeProps<ComponentProps<typeof Input>[]>(props, {\n    ref: inputContainerRef,\n    inputRef,\n    value,\n    type,\n    onChange: (event) => {\n      setValue(event.target.value);\n    },\n    addonBefore: (\n      <>\n        {searchIcon}\n        {addonBefore}\n      </>\n    ),\n    addonAfter: (\n      <>\n        {value && (\n          <AutoHoverPlatformIcon\n            onClick={clear}\n            role=\"button\"\n            aria-label=\"Clear search\"\n            icon=\"actions/close\"\n            hoverIcon=\"actions/closeHovered\"\n          />\n        )}\n        {addonAfter}\n      </>\n    ),\n    onKeyDown: (event) => {\n      if (event.repeat) {\n        return;\n      }\n      if (event.key === \"Enter\") {\n        onSubmit?.(event.currentTarget.value);\n      } else if (event.key === \"Escape\") {\n        clear();\n      }\n    },\n  });\n  if (searchHistory) {\n    return (\n      <ActionsProvider actions={[showSearchHistoryAction]}>\n        {({ shortcutHandlerProps }) => (\n          <StyledInput {...mergeProps(inputProps, shortcutHandlerProps)} />\n        )}\n      </ActionsProvider>\n    );\n  }\n  return <StyledInput {...inputProps} />;\n});\n"],"names":[],"sourceRoot":""}