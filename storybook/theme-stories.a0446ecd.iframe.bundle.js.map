{"version":3,"file":"theme-stories.a0446ecd.iframe.bundle.js","mappings":";;;;;;;;AAcA;;;;;ACoFA;AACA","sources":["webpack://@intellij-platform/core/./src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://@intellij-platform/core/./src/ToolWindows/stories/components/FakeExecution.tsx"],"sourcesContent":["import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { Toolbar } from \"../../../Toolbar/Toolbar\";\nimport { IconButton } from \"../../../IconButton\";\nimport { PlatformIcon } from \"../../../Icon\";\nimport { StyledHorizontalSeparator } from \"../../../StyledSeparator\";\nimport { styled } from \"../../../styled\";\n\ninterface Execution {\n  id: string;\n  isRunning: boolean;\n  title: string;\n}\n\nexport function useFakeExecution(scripts: Record<string, string>) {\n  const [executions, setExecutions] = useState<Array<Execution>>([]);\n\n  useEffect(() => {\n    addExecution(true);\n    addExecution();\n  }, []);\n\n  const addExecution = (run = false, scriptName?: string) => {\n    const scriptNames = Object.keys(scripts);\n    return setExecutions((executions) => {\n      const title =\n        scriptName ||\n        scriptNames.find((name) =>\n          executions.every(({ title }) => title !== name)\n        ) ||\n        scriptNames[0];\n      return executions.concat({\n        id: `${Math.max(...executions.map(({ id }) => parseInt(id)), 0) + 1}`,\n        isRunning: run,\n        title,\n      });\n    });\n  };\n  const runScript = (name: string) => {\n    const execution = executions.find((process) => process.title === name);\n    if (execution) {\n      if (!execution.isRunning) {\n        toggle(execution.id);\n      }\n    } else {\n      addExecution(true, name);\n    }\n  };\n  const toggle = (executionId: string) => {\n    setExecutions((executions) =>\n      executions.map((execution) =>\n        execution.id === executionId\n          ? {\n              ...execution,\n              isRunning: !execution.isRunning,\n            }\n          : execution\n      )\n    );\n  };\n\n  const close = (executionId: string) => {\n    setExecutions((executions) => {\n      return executions.filter(({ id }) => executionId !== id);\n    });\n  };\n\n  return { executions, runScript, toggle, close };\n}\n\nexport const FakeExecutionToolbar = ({\n  execution: { isRunning, id },\n  toggle,\n}: {\n  execution: Execution;\n  toggle: (executionId: string) => void;\n}) => (\n  <Toolbar hasBorder>\n    <IconButton onPress={() => toggle(id)}>\n      <PlatformIcon icon={isRunning ? \"actions/restart\" : \"actions/execute\"} />\n    </IconButton>\n    <IconButton isDisabled={!isRunning} onPress={() => toggle(id)}>\n      <PlatformIcon icon=\"actions/suspend\" />\n    </IconButton>\n    <StyledHorizontalSeparator />\n    <IconButton isDisabled>\n      <PlatformIcon icon=\"runConfigurations/scroll_down\" />\n    </IconButton>\n    <IconButton>\n      <PlatformIcon icon=\"actions/gc\" />\n    </IconButton>\n  </Toolbar>\n);\n\nexport const VerticalFlexContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\nexport const RunConsoleOutput = styled.div`\n  background: ${({ theme }) => (theme.dark ? \"#2b2b2b\" : \"#fff\")}; // FIXME\n  flex: 1;\n`;\n"],"names":[],"sourceRoot":""}