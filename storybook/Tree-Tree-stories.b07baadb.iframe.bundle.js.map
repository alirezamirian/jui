{"version":3,"file":"Tree-Tree-stories.b07baadb.iframe.bundle.js","mappings":";AAwJA;;;;AAMA;;;;AC3IA;;AAIA;;;;AAIA;AAMA;AC1BA;AAEA","sources":["webpack://@intellij-platform/core/./src/Tree/Tree.stories.tsx","webpack://@intellij-platform/core/./src/Menu/MenuItemLayout.tsx","webpack://@intellij-platform/core/./src/story-components.tsx"],"sourcesContent":["import { Item } from \"@react-stately/collections\";\nimport { Meta, StoryFn, StoryObj } from \"@storybook/react\";\nimport React, { Key, useState } from \"react\";\nimport { Tree, TreeProps } from \"./Tree\";\nimport { treeItems } from \"./story-helpers\";\nimport { Pane, SelectionLog } from \"../story-components\";\nimport {\n  ContextMenuContainer,\n  Menu,\n  MenuItemLayout,\n  PlatformIcon,\n  styled,\n} from \"@intellij-platform/core\";\n\nexport default {\n  title: \"Components/Tree (Basic)\",\n  Component: Tree,\n} as Meta;\n\nexport const Static: StoryObj<TreeProps<never>> = {\n  render: (props) => {\n    const [selectedKeys, setSelectedKeys] = useState<\"all\" | Set<Key>>(\n      new Set([\"Theme\", \"index.ts\"])\n    );\n    return (\n      <div style={{ display: \"flex\" }}>\n        <Pane>\n          <Tree\n            fillAvailableSpace\n            selectionMode=\"multiple\"\n            defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n            selectedKeys={selectedKeys}\n            disabledKeys={[\"SpeedSearchList.tsx\"]}\n            onSelectionChange={setSelectedKeys}\n            {...props}\n          >\n            <Item key=\"index.ts\">index.ts</Item>\n            <Item title=\"List\" key=\"List\">\n              <Item title=\"BasicList\" key=\"BasicList\">\n                <Item>BasicList.stories.tsx</Item>\n                <Item>BasicList.tsx</Item>\n                <Item>BasicListItem.tsx</Item>\n                <Item>useBasicList.ts</Item>\n              </Item>\n\n              <Item title=\"SpeedSearchList\" key=\"SpeedSearchList\">\n                <Item>SpeedSearchList.stories.tsx</Item>\n                <Item key=\"SpeedSearchList.tsx\">SpeedSearchList.tsx</Item>\n                <Item>SpeedSearchListItem.tsx</Item>\n                <Item>useSpeedSearchList.ts</Item>\n              </Item>\n\n              <Item>ListDivider.tsx</Item>\n            </Item>\n            <Item title=\"Theme\" key=\"Theme\">\n              <Item>createTheme.ts</Item>\n            </Item>\n            <Item title=\"Foo\">\n              <Item title=\"Bar\">\n                <Item title=\"FooBar\">\n                  <Item title=\"Baz\">\n                    <Item>Baz.ts</Item>\n                  </Item>\n                  <Item>Foo.ts</Item>\n                  <Item>Bar.ts</Item>\n                </Item>\n              </Item>\n            </Item>\n          </Tree>\n        </Pane>\n        <div style={{ marginLeft: 20 }}>\n          <h4>Selection</h4>\n          <SelectionLog selection={selectedKeys} />\n        </div>\n      </div>\n    );\n  },\n};\n\nexport const Dynamic: StoryFn = () => {\n  const [selectedKeys, setSelectedKeys] = useState<\"all\" | Set<Key>>(\n    new Set([\"Theme\", \"index.ts\"])\n  );\n  return (\n    <div style={{ display: \"flex\" }}>\n      <Pane>\n        <Tree\n          fillAvailableSpace\n          selectionMode=\"multiple\"\n          defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n          items={treeItems}\n          selectedKeys={selectedKeys}\n          disabledKeys={[\"SpeedSearchList.tsx\"]}\n          onSelectionChange={setSelectedKeys}\n        >\n          {(item) => (\n            <Item\n              key={item.name}\n              title={item.children ? item.name : undefined}\n              childItems={item.children}\n            >\n              {item.name}\n            </Item>\n          )}\n        </Tree>\n      </Pane>\n      <div style={{ marginLeft: 20 }}>\n        <h4>Selection</h4>\n        <SelectionLog selection={selectedKeys} />\n      </div>\n    </div>\n  );\n};\n\nconst containerWidthItems: typeof treeItems = [\n  ...Array(30)\n    .fill(null)\n    .map((_, index) => ({ name: Array(index).fill(\"~~\").join(\" \") })),\n];\n\nexport const ScrollAndContainerWidth: StoryObj<{ width: number }> = {\n  render: ({ width }) => {\n    return (\n      <>\n        <div style={{ width, height: 200 }}>\n          <Tree\n            data-testid=\"tree\"\n            selectionMode=\"multiple\"\n            fillAvailableSpace\n            items={containerWidthItems}\n            defaultSelectedKeys={[\"~~ ~~\"]}\n          >\n            {(item) => (\n              <Item\n                key={item.name}\n                title={item.name}\n                childItems={item.children}\n              >\n                {item.name}\n              </Item>\n            )}\n          </Tree>\n        </div>\n      </>\n    );\n  },\n\n  args: { width: 400 },\n  name: \"Scroll & Container Width\",\n};\n\nconst StyledLabel = styled.label`\n  color: ${({ theme }) => theme.commonColors.label()};\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem;\n`;\n\nexport const shownAsFocused: StoryFn = () => {\n  const [shownAsFocused, setShowAsFocused] = useState(false);\n  return (\n    <Pane>\n      <StyledLabel>\n        <input\n          type=\"checkbox\"\n          checked={shownAsFocused}\n          onChange={(e) => setShowAsFocused(e.target.checked)}\n        />\n        Show as focused\n      </StyledLabel>\n      <br />\n      <Tree\n        fillAvailableSpace\n        selectionMode=\"multiple\"\n        defaultSelectedKeys={[\"List\"]}\n        defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n        items={treeItems}\n        showAsFocused={shownAsFocused}\n      >\n        {(item) => (\n          <Item key={item.name} title={item.name} childItems={item.children}>\n            {item.name}\n          </Item>\n        )}\n      </Tree>\n    </Pane>\n  );\n};\n\nexport const WithContextMenu: StoryFn = () => {\n  const [selectedKeys, setSelectedKeys] = useState<\"all\" | Set<Key>>(\n    new Set([])\n  );\n  return (\n    <Pane>\n      <ContextMenuContainer\n        renderMenu={() => {\n          const renderActions = () => {\n            if (typeof selectedKeys !== \"string\" && selectedKeys.size === 0) {\n              return <Item>Nothing here</Item>;\n            } else {\n              let text = \"\";\n              if (selectedKeys === \"all\") {\n                text = \"all\";\n              } else if (selectedKeys.size > 1) {\n                text = `${selectedKeys.size} items`;\n              }\n              return [\n                <Item textValue={`Cut ${text}`} key=\"Cut\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n                    content={`Cut ${text}`}\n                    shortcut={\"⌘X\"}\n                  />\n                </Item>,\n                <Item textValue={`Copy ${text}`} key=\"Copy\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/copy\"} />}\n                    content={`Copy ${text}`}\n                    shortcut={\"⌘C\"}\n                  />\n                </Item>,\n                <Item textValue={`Delete ${text}`} key=\"Paste\">\n                  <MenuItemLayout content={`Delete ${text}`} shortcut=\"⌫\" />\n                </Item>,\n              ];\n            }\n          };\n          return <Menu aria-label=\"Tree Context Menu\">{renderActions()}</Menu>;\n        }}\n      >\n        <Tree\n          fillAvailableSpace\n          selectionMode=\"multiple\"\n          defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n          items={treeItems}\n          selectedKeys={selectedKeys}\n          onSelectionChange={setSelectedKeys}\n        >\n          {(item) => (\n            <Item key={item.name} title={item.name} childItems={item.children}>\n              {item.name}\n            </Item>\n          )}\n        </Tree>{\" \"}\n      </ContextMenuContainer>\n    </Pane>\n  );\n};\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree, TreeRefValue } from \"@intellij-platform/core/Tree\";\nimport { staticSpeedSearchTreeItems } from \"@intellij-platform/core/Tree/story-helpers\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Iterable<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = [\"BasicList\"],\n  onSelectedKeysChange,\n  treeRef,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: Selection) => void;\n  treeRef?: React.RefObject<TreeRefValue>;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      treeRef={treeRef}\n      autoFocus\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={new Set(defaultSelectedKeys)}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      {staticSpeedSearchTreeItems}\n    </SpeedSearchTree>\n  );\n};\n"],"names":[],"sourceRoot":""}