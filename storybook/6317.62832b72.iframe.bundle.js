"use strict";(self.webpackChunk_intellij_platform_core=self.webpackChunk_intellij_platform_core||[]).push([[6317],{"./src/Resizer/BottomResizer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{I:()=>BottomResizer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_useResizer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/Resizer/useResizer.ts"),_VerticalResizer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/Resizer/VerticalResizer.tsx");const BottomResizer=({onResize,onResizeEnd,onResizeStarted,...props})=>{const{resizerProps}=(0,_useResizer__WEBPACK_IMPORTED_MODULE_1__.vS)({onResize,onResizeEnd,onResizeStarted});return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_VerticalResizer__WEBPACK_IMPORTED_MODULE_2__.H,{resizerProps,...props})};BottomResizer.__docgenInfo={description:"Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\nmoving mouse to bottom/top will increase/decrease the height",methods:[],displayName:"BottomResizer",props:{onResizeStarted:{required:!0,tsType:{name:"signature",type:"function",raw:"() => number | void",signature:{arguments:[],return:{name:"union",raw:"number | void",elements:[{name:"number"},{name:"void"}]}}},description:"Called when the resize starts by a move action. The callback can optionally\nreturn the initial width of the view for which the resize handle\nis used. The amount of resize will be added to this initial value and\npassed to `onResize`, when movement happens."},onResize:{required:!0,tsType:{name:"signature",type:"function",raw:"(size: number) => void",signature:{arguments:[{type:{name:"number"},name:"size"}],return:{name:"void"}}},description:"Called when resize is happening.\n@param size: New size based on the diff and the initial size returned\nby onResizeStarted, or zero if initial size is not returned."},onResizeEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when movement interaction is finished, e.g. by a mouse up event."},background:{required:!1,tsType:{name:'CSSProperties["background"]',raw:'CSSProperties["background"]'},description:"Background color of the visible space-occupying part of the resize handle."},size:{required:!1,tsType:{name:"number"},description:"Visible and space-occupying part of the resize handle. Total grab-able\nwidth will be `size` + `outerPadding`\n@default 0"},outerPadding:{required:!1,tsType:{name:"number"},description:"Length of the extra grab-able zone around the resize handle.\nFor example, if set to 10 there will be an area of length 5 pixels in each\nside of the handle which still can be used for resizing.\n@default 10"},cursor:{required:!1,tsType:{name:"unknown"},description:"Resizer cursor."},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Any arbitrary content for customizing look and feel of the resizer.\nFor example for showing a rounded handle kind of thing in the middle,\nor showing shadows, etc."},style:{required:!1,tsType:{name:"Omit",elements:[{name:"CSSProperties"},{name:"union",raw:'(Orientation extends "horizontal" ? "width" : "height") | "background"',elements:[{name:"unknown"},{name:"literal",value:'"background"'}]}],raw:'Omit<\n  CSSProperties,\n  (Orientation extends "horizontal" ? "width" : "height") | "background"\n>'},description:"styles passed to the root resizer element. `width` and `background` is not allowed and will be overridden.\nNOTE: it's added to allow use case of absolutely positioned resizers in float tool windows. Might be a better\nidea to add a `absolute` instead option and apply the necessary style based on it, if it can be seen as a re-usable\nand legit feature."}}}},"./src/Resizer/HorizontalResizer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{v:()=>HorizontalResizer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/styled-components/dist/styled-components.browser.esm.js");const StyledHorizontalResizer=styled_components__WEBPACK_IMPORTED_MODULE_1__.Ay.div`
  top: 0;
  height: 100%;
  width: 0;
  position: relative;
  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static
`,StyledHorizontalResizerArea=styled_components__WEBPACK_IMPORTED_MODULE_1__.Ay.div`
  position: absolute;
  cursor: ${({$cursor})=>`${$cursor}-resize`};
  width: ${({$handleSize})=>`calc(100% + ${$handleSize}px)`};
  height: 100%;
  left: ${({$handleSize})=>`-${$handleSize/2}px`};
`,HorizontalResizer=({outerPadding=10,background,size=0,cursor="col",children,style={},resizerProps})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledHorizontalResizer,{...resizerProps,style:{...style,background,width:size}},children,react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledHorizontalResizerArea,{$handleSize:outerPadding,$cursor:cursor}));HorizontalResizer.__docgenInfo={description:"Handle for resizing views in a horizontal layout. It just handles the\nmovement event and calls onResize with the new size. It has nothing to do\nwith actually applying the size.",methods:[],displayName:"HorizontalResizer",props:{outerPadding:{defaultValue:{value:"10",computed:!1},required:!1},size:{defaultValue:{value:"0",computed:!1},required:!1},cursor:{defaultValue:{value:'"col"',computed:!1},required:!1},style:{defaultValue:{value:"{}",computed:!1},required:!1}}}},"./src/Resizer/LeftResizer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>LeftResizer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_HorizontalResizer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/Resizer/HorizontalResizer.tsx"),_useResizer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/Resizer/useResizer.ts");const LeftResizer=({onResize,onResizeEnd,onResizeStarted,...props})=>{const{resizerProps}=(0,_useResizer__WEBPACK_IMPORTED_MODULE_1__.PZ)({onResize,onResizeEnd,onResizeStarted});return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_HorizontalResizer__WEBPACK_IMPORTED_MODULE_2__.v,{resizerProps,...props})};LeftResizer.__docgenInfo={description:"Handle for resizing views in a horizontal layout, where the resizer is at the left side of the resizable view. i.e.\nmoving mouse to right/left will decrease/increase the width",methods:[],displayName:"LeftResizer",props:{onResizeStarted:{required:!0,tsType:{name:"signature",type:"function",raw:"() => number | void",signature:{arguments:[],return:{name:"union",raw:"number | void",elements:[{name:"number"},{name:"void"}]}}},description:"Called when the resize starts by a move action. The callback can optionally\nreturn the initial width of the view for which the resize handle\nis used. The amount of resize will be added to this initial value and\npassed to `onResize`, when movement happens."},onResize:{required:!0,tsType:{name:"signature",type:"function",raw:"(size: number) => void",signature:{arguments:[{type:{name:"number"},name:"size"}],return:{name:"void"}}},description:"Called when resize is happening.\n@param size: New size based on the diff and the initial size returned\nby onResizeStarted, or zero if initial size is not returned."},onResizeEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when movement interaction is finished, e.g. by a mouse up event."},background:{required:!1,tsType:{name:'CSSProperties["background"]',raw:'CSSProperties["background"]'},description:"Background color of the visible space-occupying part of the resize handle."},size:{required:!1,tsType:{name:"number"},description:"Visible and space-occupying part of the resize handle. Total grab-able\nwidth will be `size` + `outerPadding`\n@default 0"},outerPadding:{required:!1,tsType:{name:"number"},description:"Length of the extra grab-able zone around the resize handle.\nFor example, if set to 10 there will be an area of length 5 pixels in each\nside of the handle which still can be used for resizing.\n@default 10"},cursor:{required:!1,tsType:{name:"unknown"},description:"Resizer cursor."},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Any arbitrary content for customizing look and feel of the resizer.\nFor example for showing a rounded handle kind of thing in the middle,\nor showing shadows, etc."},style:{required:!1,tsType:{name:"Omit",elements:[{name:"CSSProperties"},{name:"union",raw:'(Orientation extends "horizontal" ? "width" : "height") | "background"',elements:[{name:"unknown"},{name:"literal",value:'"background"'}]}],raw:'Omit<\n  CSSProperties,\n  (Orientation extends "horizontal" ? "width" : "height") | "background"\n>'},description:"styles passed to the root resizer element. `width` and `background` is not allowed and will be overridden.\nNOTE: it's added to allow use case of absolutely positioned resizers in float tool windows. Might be a better\nidea to add a `absolute` instead option and apply the necessary style based on it, if it can be seen as a re-usable\nand legit feature."}}}},"./src/Resizer/RightResizer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{R:()=>RightResizer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_HorizontalResizer__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/Resizer/HorizontalResizer.tsx"),_useResizer__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./src/Resizer/useResizer.ts");const RightResizer=({onResize,onResizeEnd,onResizeStarted,...props})=>{const{resizerProps}=(0,_useResizer__WEBPACK_IMPORTED_MODULE_1__.EZ)({onResize,onResizeEnd,onResizeStarted});return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_HorizontalResizer__WEBPACK_IMPORTED_MODULE_2__.v,{resizerProps,...props})};RightResizer.__docgenInfo={description:"Handle for resizing views in a horizontal layout, where the resizer is at the right side of the resizable view. i.e.\nmoving mouse to right/left will increase/decrease the width",methods:[],displayName:"RightResizer",props:{onResizeStarted:{required:!0,tsType:{name:"signature",type:"function",raw:"() => number | void",signature:{arguments:[],return:{name:"union",raw:"number | void",elements:[{name:"number"},{name:"void"}]}}},description:"Called when the resize starts by a move action. The callback can optionally\nreturn the initial width of the view for which the resize handle\nis used. The amount of resize will be added to this initial value and\npassed to `onResize`, when movement happens."},onResize:{required:!0,tsType:{name:"signature",type:"function",raw:"(size: number) => void",signature:{arguments:[{type:{name:"number"},name:"size"}],return:{name:"void"}}},description:"Called when resize is happening.\n@param size: New size based on the diff and the initial size returned\nby onResizeStarted, or zero if initial size is not returned."},onResizeEnd:{required:!1,tsType:{name:"signature",type:"function",raw:"() => void",signature:{arguments:[],return:{name:"void"}}},description:"Called when movement interaction is finished, e.g. by a mouse up event."},background:{required:!1,tsType:{name:'CSSProperties["background"]',raw:'CSSProperties["background"]'},description:"Background color of the visible space-occupying part of the resize handle."},size:{required:!1,tsType:{name:"number"},description:"Visible and space-occupying part of the resize handle. Total grab-able\nwidth will be `size` + `outerPadding`\n@default 0"},outerPadding:{required:!1,tsType:{name:"number"},description:"Length of the extra grab-able zone around the resize handle.\nFor example, if set to 10 there will be an area of length 5 pixels in each\nside of the handle which still can be used for resizing.\n@default 10"},cursor:{required:!1,tsType:{name:"unknown"},description:"Resizer cursor."},children:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Any arbitrary content for customizing look and feel of the resizer.\nFor example for showing a rounded handle kind of thing in the middle,\nor showing shadows, etc."},style:{required:!1,tsType:{name:"Omit",elements:[{name:"CSSProperties"},{name:"union",raw:'(Orientation extends "horizontal" ? "width" : "height") | "background"',elements:[{name:"unknown"},{name:"literal",value:'"background"'}]}],raw:'Omit<\n  CSSProperties,\n  (Orientation extends "horizontal" ? "width" : "height") | "background"\n>'},description:"styles passed to the root resizer element. `width` and `background` is not allowed and will be overridden.\nNOTE: it's added to allow use case of absolutely positioned resizers in float tool windows. Might be a better\nidea to add a `absolute` instead option and apply the necessary style based on it, if it can be seen as a re-usable\nand legit feature."}}}},"./src/Resizer/VerticalResizer.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>VerticalResizer});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),styled_components__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/styled-components/dist/styled-components.browser.esm.js");const StyledVerticalResizer=styled_components__WEBPACK_IMPORTED_MODULE_1__.Ay.div`
  width: 100%;
  height: 0;
  position: relative;
  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static
`,StyledVerticalResizerArea=styled_components__WEBPACK_IMPORTED_MODULE_1__.Ay.div`
  position: absolute;
  cursor: ${({$cursor})=>`${$cursor}-resize`};
  height: ${({$handleSize})=>`calc(100% + ${$handleSize}px)`};
  width: 100%;
  top: ${({$handleSize})=>`-${$handleSize/2}px`};
`,VerticalResizer=({outerPadding=10,background,size=0,cursor="row",resizerProps,children,style={}})=>react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledVerticalResizer,{...resizerProps,style:{...style,background,height:size}},children,react__WEBPACK_IMPORTED_MODULE_0__.createElement(StyledVerticalResizerArea,{$handleSize:outerPadding,$cursor:cursor}));VerticalResizer.__docgenInfo={description:"Handle for resizing views in a vertical layout. It just handles the\nmovement event and calls onResize with the new size. It has nothing to do\nwith actually applying the size.",methods:[],displayName:"VerticalResizer",props:{outerPadding:{defaultValue:{value:"10",computed:!1},required:!1},size:{defaultValue:{value:"0",computed:!1},required:!1},cursor:{defaultValue:{value:'"row"',computed:!1},required:!1},style:{defaultValue:{value:"{}",computed:!1},required:!1}}}},"./src/Resizer/useResizer.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{EZ:()=>useRightResizer,LO:()=>useTopResizer,PZ:()=>useLeftResizer,vS:()=>useBottomResizer});var _utils_interaction_utils_useMove__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/utils/interaction-utils/useMove.tsx");const useResizer=(orientation,invert,{onResizeStarted,onResize,onResizeEnd})=>({resizerProps:(0,_utils_interaction_utils_useMove__WEBPACK_IMPORTED_MODULE_0__.f)({dragThreshold:0,onMoveStart:()=>onResizeStarted()||0,onMoveEnd:()=>onResizeEnd?.(),onMove:({movement,startState})=>onResize(startState+(invert?-1:1)*movement["horizontal"===orientation?"x":"y"])})}),useLeftResizer=props=>useResizer("horizontal",!0,props),useRightResizer=props=>useResizer("horizontal",!1,props),useTopResizer=props=>useResizer("vertical",!0,props),useBottomResizer=props=>useResizer("vertical",!1,props)},"./src/utils/interaction-utils/useMove.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{o:()=>isEventOnEmptySpaces,f:()=>useMove});__webpack_require__("../../node_modules/react/index.js");var runAfterTransition=__webpack_require__("../../node_modules/@react-aria/utils/dist/runAfterTransition.mjs");let state="default",savedUserSelect="";var useLatest=__webpack_require__("./src/utils/useLatest.ts");function isEventOnEmptySpaces({target,currentTarget}){return currentTarget===target||target instanceof HTMLElement&&[...target.childNodes].every((child=>child instanceof HTMLElement))}function useMove({dragThreshold=0,disabled,onMoveStart,onMove,onMoveEnd,canMoveStart=()=>!0}){const handlersRef=(0,useLatest.F)({onMove,onMoveEnd});return disabled?{}:{onMouseDown:event=>{if(0!==event.button||!canMoveStart(event))return;event.preventDefault(),function disableTextSelection(){"default"===state&&(savedUserSelect=document.documentElement.style.webkitUserSelect,document.documentElement.style.webkitUserSelect="none"),state="disabled"}();const from={x:event.pageX,y:event.pageY};let startState,dragStarted=!1;const onMouseMove=event=>{const{pageX:x,pageY:y}=event,movement={x:x-from.x,y:y-from.y};(Math.abs(movement.x)>=dragThreshold||Math.abs(movement.y)>=dragThreshold)&&!dragStarted&&(dragStarted=!0,startState=onMoveStart({from})),dragStarted&&handlersRef.current.onMove({from,to:{x:from.x+movement.x,y:from.y+movement.y},movement,startState})};document.addEventListener("mousemove",onMouseMove),document.addEventListener("mouseup",(()=>{!function restoreTextSelection(){"disabled"===state&&(state="restoring",setTimeout((()=>{(0,runAfterTransition.v)((()=>{"restoring"===state&&("none"===document.documentElement.style.webkitUserSelect&&(document.documentElement.style.webkitUserSelect=savedUserSelect||""),savedUserSelect="",state="default")}))}),300))}(),dragStarted&&handlersRef.current.onMoveEnd?.({startState}),document.removeEventListener("mousemove",onMouseMove)}),{once:!0})}}}}}]);
//# sourceMappingURL=6317.62832b72.iframe.bundle.js.map