{"version":3,"file":"ButtonGroup-ButtonGroup-stories.0e107cad.iframe.bundle.js","mappings":";;;;;;AASA;AAEA;;AAOA;AAIA;AAEA;;;;;;;;;;;;;;;AAqBA;;AAGA;;AAWA;AACA;AAEA;AAEA;;;AAIA;;AAKA;;;;;;;;;;;AC9CA;;;;;;ACZA;AACA;;AAEA;;;;;;;;;;ACmBA;AACA;;;;;;;AAOA;AAEA;;;;AAKA;AAEA;;;;AAQA;AAEA;;AAQA","sources":["webpack://@intellij-platform/core/./src/Button/StyledButton.tsx","webpack://@intellij-platform/core/./src/ButtonGroup/ButtonGroup.tsx","webpack://@intellij-platform/core/./src/Icon/StyledIconWrapper.tsx","webpack://@intellij-platform/core/./src/IconButton/IconButton.tsx"],"sourcesContent":["import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  height: 1.5rem;\n  font-family: inherit;\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  a&,\n  a&:hover {\n    text-decoration: none;\n    align-content: center;\n    text-align: center;\n    display: inline-block;\n  }\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, { CSSProperties, ReactNode } from \"react\";\nimport { DOMAttributes, FocusableElement } from \"@react-types/shared\";\nimport { FocusScope, useFocusManager } from \"@react-aria/focus\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ButtonGroupProps {\n  children: ReactNode;\n  className?: string;\n  style?: CSSProperties;\n}\n\nconst StyledButtonGroup = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 0.75rem;\n`;\n\n/**\n * `ButtonGroup` should be used as a wrapper around related {@link Button Buttons}, in places such as the\n * footer of a dialog. It does two things:\n * - allows for moving the focus between the buttons with left/right arrow keys.\n * - applies the right spacing between the buttons\n *\n * @see Button\n */\nexport function ButtonGroup(props: ButtonGroupProps) {\n  return (\n    <FocusScope>\n      <HorizontalArrowKeyNavigation>\n        {(arrowKeyNavigationProps) => (\n          <StyledButtonGroup {...mergeProps(props, arrowKeyNavigationProps)} />\n        )}\n      </HorizontalArrowKeyNavigation>\n    </FocusScope>\n  );\n}\n\nfunction HorizontalArrowKeyNavigation({\n  children,\n}: {\n  children: (props: DOMAttributes<FocusableElement>) => ReactNode;\n}) {\n  const focusManager = useFocusManager();\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!hasAnyModifier(e)) {\n        if (e.key === \"ArrowLeft\") {\n          return focusManager?.focusPrevious({ wrap: true });\n        } else if (e.key === \"ArrowRight\") {\n          return focusManager?.focusNext({ wrap: true });\n        }\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return <>{children(keyboardProps)}</>;\n}\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n"],"names":[],"sourceRoot":""}