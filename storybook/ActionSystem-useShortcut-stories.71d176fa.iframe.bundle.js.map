{"version":3,"file":"ActionSystem-useShortcut-stories.71d176fa.iframe.bundle.js","mappings":";AAuBA;;;;AAIA;;;;;;;AAQA;;;;;;;;;AAUA","sources":["webpack://@intellij-platform/core/./src/ActionSystem/useShortcut.stories.tsx"],"sourcesContent":["import { Meta, StoryFn } from \"@storybook/react\";\nimport React, { useEffect, useRef } from \"react\";\nimport { Color } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useShortcuts } from \"./useShortcut\";\nimport { shortcutToString } from \"./shortcutToString\";\nimport { isKeyboardShortcut } from \"./Shortcut\";\n\ntype Args = {\n  shortcuts: Parameters<typeof useShortcuts>[0];\n  onAction: Parameters<typeof useShortcuts>[1];\n};\nexport default {\n  title: \"ActionSystem/useShortcut\",\n  args: {},\n  argTypes: {\n    onAction: {\n      type: \"function\",\n    },\n  },\n} as Meta<Args>;\n\nconst StyledContainer = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  padding: 0.5rem;\n  &:focus {\n    outline: none;\n    background: ${({ theme }) =>\n      Color.brighter(theme.commonColors.panelBackground)};\n  }\n  &:focus::after {\n    content: \"Focused. Type to trigger keyboard shortcuts\";\n    position: absolute;\n    margin-top: 0.75rem;\n    font-size: 0.85em;\n    color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  }\n  table {\n    width: 400px;\n    max-width: 100%;\n  }\n  th {\n    text-align: left;\n  }\n`;\nconst Template: StoryFn<Args> = ({ onAction, shortcuts }: Args) => {\n  const { shortcutHandlerProps } = useShortcuts(shortcuts, onAction);\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    ref.current?.focus();\n  });\n  return (\n    <div {...shortcutHandlerProps}>\n      <StyledContainer\n        tabIndex={0}\n        ref={ref}\n        onClick={() => ref.current?.focus()}\n      >\n        <table>\n          <thead>\n            <tr>\n              <th>Action ID</th>\n              <th>Keyboard Shortcuts</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.entries(shortcuts).map(([actionId, shortcuts]) => (\n              <tr key={actionId}>\n                <td>{actionId}</td>\n                <td>\n                  {shortcuts.filter(isKeyboardShortcut).map((shortcut) => (\n                    <code>{shortcutToString(shortcut)}</code>\n                  ))}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </StyledContainer>\n    </div>\n  );\n};\nexport const Default = Template.bind(null);\nDefault.args = {\n  shortcuts: {\n    action1: [\n      {\n        type: \"keyboard\",\n        firstKeyStroke: { modifiers: [\"Control\"], code: \"KeyC\" },\n      },\n    ],\n  },\n};\nexport const MultiKeyStroke = Template.bind(null);\nMultiKeyStroke.args = {\n  shortcuts: {\n    action1: [\n      {\n        type: \"keyboard\",\n        firstKeyStroke: { modifiers: [\"Control\"], code: \"KeyC\" },\n        secondKeyStroke: { code: \"KeyD\" },\n      },\n    ],\n  },\n};\n\nexport const SecondKeyStrokePriority = Template.bind(null);\nSecondKeyStrokePriority.args = {\n  shortcuts: {\n    action1: [{ type: \"keyboard\", firstKeyStroke: { code: \"KeyD\" } }],\n    action2: [\n      {\n        type: \"keyboard\",\n        firstKeyStroke: { modifiers: [\"Control\"], code: \"KeyC\" },\n        secondKeyStroke: { code: \"KeyD\" },\n      },\n    ],\n  },\n};\n\nexport const ConflictingShortcuts = Template.bind(null);\nConflictingShortcuts.args = {\n  shortcuts: {\n    action1: [{ type: \"keyboard\", firstKeyStroke: { code: \"KeyD\" } }],\n    action2: [{ type: \"keyboard\", firstKeyStroke: { code: \"KeyD\" } }],\n  },\n};\n"],"names":[],"sourceRoot":""}