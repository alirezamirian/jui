{"version":3,"file":"SpeedSearch-SpeedSearch-stories.bec1138d.iframe.bundle.js","mappings":";;;AAeA;AACA;AAGA;;;;;;ACJA;AACA;;AAEA;;;;;;;;ACCA;;;;AAiBA;;AAMA;AAKA;;;;;;;AC1CA;;;AAYA","sources":["webpack://@intellij-platform/core/./src/SpeedSearch/SpeedSearch.stories.tsx","webpack://@intellij-platform/core/./src/Icon/StyledIconWrapper.tsx","webpack://@intellij-platform/core/./src/SpeedSearch/SpeedSearchPopup.tsx","webpack://@intellij-platform/core/./src/TextWithHighlights/TextWithHighlights.tsx"],"sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { Meta, StoryObj } from \"@storybook/react\";\nimport { SpeedSearch } from \"./SpeedSearch\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { TextWithHighlights } from \"../TextWithHighlights/TextWithHighlights\";\nimport { styled } from \"../styled\";\n\nexport default {\n  title: \"Components/SpeedSearch\",\n  component: SpeedSearch,\n} as Meta<typeof SpeedSearch>;\n\nconst SpeedSearchContainer = styled(SpeedSearch)`\n  width: 400px;\n  margin-top: 25px;\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n`;\n\nexport const Default: StoryObj<typeof SpeedSearch> = {\n  render: ({\n    onSearchTermChange,\n    onIsSearchActiveChange,\n  }: {\n    onSearchTermChange?: (searchTerm: string) => void;\n    onIsSearchActiveChange?: (active: boolean) => void;\n  }) => {\n    const [searchTerm, setSearchTerm] = useState(\"\");\n    const [isActive, setIsActive] = useState(false);\n\n    return (\n      <SpeedSearchContainer\n        searchTerm={searchTerm}\n        onSearchTermChange={(searchTerm) => {\n          setSearchTerm(searchTerm);\n          onSearchTermChange?.(searchTerm);\n        }}\n        isSearchActive={isActive}\n        onIsSearchActiveChange={(active) => {\n          setIsActive(active);\n          onIsSearchActiveChange?.(active);\n        }}\n        match // search is done within the searchable text component in this dummy example, and we don't have information about match.\n        keepSearchActiveOnBlur\n      >\n        <ul>\n          <li>\n            <SearchableText searchTerm={searchTerm}>Item one.</SearchableText>\n          </li>\n          <li>\n            <SearchableText searchTerm={searchTerm}>Item two.</SearchableText>{\" \"}\n            <input />\n          </li>\n          <li>\n            <SearchableText searchTerm={searchTerm}>\n              Paco de lucia\n            </SearchableText>{\" \"}\n            <button>test</button>\n          </li>\n          <li>\n            <SearchableText searchTerm={searchTerm}>\n              Paco de lucia, godOfTheGuitar\n            </SearchableText>{\" \"}\n            <button>test</button>\n          </li>\n          <li>\n            <input type=\"checkbox\" />\n            <SearchableText searchTerm={searchTerm}>Item four</SearchableText>\n          </li>\n        </ul>\n      </SpeedSearchContainer>\n    );\n  },\n};\n\nfunction SearchableText({\n  children,\n  searchTerm,\n}: {\n  children: string;\n  searchTerm: string;\n}) {\n  const highlights = useMemo(\n    () => minusculeMatch(children, searchTerm),\n    [children, searchTerm]\n  );\n  return (\n    <TextWithHighlights highlights={highlights}>{children}</TextWithHighlights>\n  );\n}\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  $size?: IconSize;\n  $useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ $size = DEFAULT_ICON_SIZE }) => `${$size}px`};\n  height: ${({ $size = DEFAULT_ICON_SIZE }) => `${$size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown in the top left corner of list, tree, etc., which shows the search\n * query.\n * @see SpeedSearchInput\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} $noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ $noMatch?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ $noMatch, theme }) =>\n    $noMatch\n      ? theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)\n      : theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n"],"names":[],"sourceRoot":""}