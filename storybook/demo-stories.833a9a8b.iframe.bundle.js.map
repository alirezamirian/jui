{"version":3,"file":"demo-stories.833a9a8b.iframe.bundle.js","mappings":";;;;;;;;;;;AA0BA;;;;;;AC0MA;AASA;;;;;;;;;;;;;;;;;;;ACzNA;;AAKA;;;;;;;ACfA;AAYA;;ACAA;;;;AAQA;;;;AAIA;;;;;AASA;;;;AAKA;;;;;;AAMA;AAEA;;;;AClCA;;AAGA;;;;AAIA;;AAIA;;;;ACTA;;;AAOA;;ACXA;;AAIA;;ACbA;;;;;;ACkCA;;;;;;AAQA;;;;;;ACJA;AACA;;;AAKA;;;AAKA;;;;ACrDA;;;;AAKA;AACA;;;ACUA;;;ACkBA;;AAGA;AAEA;;AAEA;AAEA;AAEA;AAEA;;;;;AAMA;;;AAIA;;;;;;;;;;;;;;AAcA;AACA;;;AAIA;;;;AAKA;;;;;AAKA;AAEA;AACA;;AAKA;AACA;;;AAQA;AACA;;;;;AAQA;;;;;;AC5FA;;;;AAMA;;;;;ACAA;;;;ACJA;;;AAGA;AACA;;AAEA;;AASA;;;;;AAUA;;;;;;;;AC1BA;;;;;;;AClBA;AAGA;;;AASA;;ACbA;;;AAQA","sources":["webpack://@intellij-platform/core/../example-app/src/Editor/Editor.tsx","webpack://@intellij-platform/core/../example-app/src/Editor/FileEditor.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Changes/ChangesView/StyledRepoColorSquare.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Changes/ChangesView/StyledCurrentBranchTag.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Changes/ChangesView/CommitView.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Changes/ChangesView/CommitActionsRow.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Changes/ChangesView/ChangesViewSplitter.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Branches/RenameBranchWindow.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Branches/BranchFavoriteButton.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Branches/BranchesPopup.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Changes/Rollback/RollbackWindow.tsx","webpack://@intellij-platform/core/../example-app/src/SearchEverywhere/contributors/ItemHelpers.tsx","webpack://@intellij-platform/core/../example-app/src/SearchEverywhere/contributors/action/ActionItem.tsx","webpack://@intellij-platform/core/../example-app/src/SearchEverywhere/SearchEverywherePopup.tsx","webpack://@intellij-platform/core/../example-app/src/VersionControl/Branches/CreateNewBranchWindow.tsx","webpack://@intellij-platform/core/../example-app/src/Project/Project.tsx","webpack://@intellij-platform/core/./src/ModalWindow/ModalWindow.tsx","webpack://@intellij-platform/core/./src/ModalWindow/WindowHeader.tsx","webpack://@intellij-platform/core/./src/ModalWindow/WindowFooter.tsx","webpack://@intellij-platform/core/./src/ModalWindow/WindowLayout.tsx"],"sourcesContent":["import MonacoEditor, { EditorProps } from \"@monaco-editor/react\";\nimport { styled } from \"@intellij-platform/core\";\nimport React from \"react\";\nimport { useEditorTheme } from \"./useEditorTheme\";\n\nexport const StyledEditor = styled(MonacoEditor)`\n  .monaco-editor {\n    .margin-view-overlays .line-numbers {\n      text-align: left;\n      padding-left: 7px;\n    }\n\n    .scrollbar .slider {\n      border-radius: 0.25rem;\n    }\n  }\n`;\n/**\n * Monaco Editor styled to look like Intellij Platform's editor.\n * TODO:\n *  - folding controls appearance is different and should be changed\n *  - highlighting pairs of parens, brackets, etc. is different.\n *  - context menu look different.\n *  - selection look different.\n *  - BUG: height is more than necessary. Needs investigation first.\n */\nexport const Editor = (props: Omit<EditorProps, \"theme\">) => {\n  const editorTheme = useEditorTheme();\n  return (\n    <StyledEditor\n      {...props}\n      options={{\n        minimap: { enabled: false },\n        lineHeight: 20,\n        showFoldingControls: \"always\",\n        renderIndentGuides: true,\n        overviewRulerBorder: false,\n        scrollbar: {\n          verticalScrollbarSize: 14,\n          horizontalScrollbarSize: 8,\n          verticalSliderSize: 8,\n          horizontalSliderSize: 8,\n          horizontal: \"auto\",\n          vertical: \"visible\",\n          alwaysConsumeMouseWheel: false, // to let example-app be rendered as a part of a page.\n        },\n        ...props.options,\n      }}\n      theme={editorTheme as any} // FIXME\n    />\n  );\n};\n","import { Monaco } from \"@monaco-editor/react\";\nimport {\n  ActionTooltip,\n  ContextMenuContainer,\n  EditorTabContent,\n  EditorTabs,\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  Item,\n  Menu,\n  MenuItemLayout,\n  PlatformIcon,\n  styled,\n  TabCloseButton,\n  TabItem,\n  TooltipTrigger,\n  useLatest,\n} from \"@intellij-platform/core\";\nimport { editor, languages } from \"monaco-editor\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport {\n  useRecoilValue,\n  useRecoilValueLoadable,\n  useSetRecoilState,\n} from \"recoil\";\nimport { getIconForFile } from \"../file-utils\";\nimport { LoadingGif } from \"../LoadingGif\";\nimport { Editor } from \"./Editor\";\nimport {\n  activeEditorTabState,\n  editorCursorPositionState,\n  editorRefState,\n  useEditorStateManager,\n} from \"./editor.state\";\nimport { fileContent } from \"../fs/fs.state\";\nimport { useUpdateFileStatus } from \"../VersionControl/file-status.state\";\nimport * as path from \"path\";\nimport { FileStatusColor } from \"../VersionControl/FileStatusColor\";\nimport { useAction } from \"@intellij-platform/core\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useActivePathsProvider } from \"../Project/project.state\";\nimport { notImplemented } from \"../Project/notImplemented\";\n\n/**\n * Used as main content in the main ToolWindows. Shows currently opened files tabs and the editor.\n *\n * TODO: preserve editor state when switching between tabs\n * TODO: support multiple editors in split view.\n */\nexport const FileEditor = () => {\n  const editorStateManager = useEditorStateManager();\n  const activeTab = useRecoilValue(activeEditorTabState);\n  const editorRef = useRef<editor.IEditor>();\n  const [active, setActive] = useState(false);\n  const hideAllAction = useAction(HIDE_ALL_WINDOWS_ACTION_ID);\n  const setCursorPositionState = useSetRecoilState(editorCursorPositionState);\n\n  // For functions that are needed in tab action callbacks. Because items are cached and referencing anything\n  // other than the collection item (tab) itself has a risk of working with stale data because of the caching\n  // More info: https://react-spectrum.adobe.com/react-stately/collections.html#why-not-array-map\n  // We can alternatively switch to mapping over tabs array, instead of using the Collection's dynamic api (items),\n  // which is subject to this caching.\n  const tabActionsRef = useLatest({\n    closePath: editorStateManager.closePath,\n    closeOthersTabs: editorStateManager.closeOthersTabs,\n  });\n\n  const setEditorRef = useSetRecoilState(editorRefState);\n\n  const fileContentState = fileContent(activeTab?.filePath);\n  const contentLoadable = useRecoilValueLoadable(fileContentState);\n  const setContent = useSetRecoilState(fileContentState);\n  const updateFileStatus = useUpdateFileStatus();\n\n  const updateContent = (newContent: string = \"\") => {\n    setActive(false);\n    setContent(newContent);\n    if (activeTab) {\n      updateFileStatus(activeTab.filePath).catch((e) => {\n        console.error(\"Could not update file status\", e);\n      });\n    }\n  };\n\n  // For now, when the first tab content is changed, we focus the editor.\n  // FIXME when action system is implemented and there is an action like \"open project file\".\n  // Note that it's event currently buggy\n  useEffect(() => {\n    editorRef.current?.focus();\n    if (activeTab?.editorState.cursorPos) {\n      editorRef.current?.setPosition(activeTab?.editorState.cursorPos);\n    }\n  }, [activeTab?.filePath]);\n\n  const activePathsProviderProps = useActivePathsProvider(\n    activeTab ? [activeTab.filePath] : []\n  );\n\n  const content = contentLoadable.valueMaybe();\n\n  return (\n    <StyledFileEditorContainer\n      {...mergeProps(activePathsProviderProps, {\n        onFocus: () => {\n          setActive(true);\n          setEditorRef({\n            focus: () => editorRef.current?.focus(),\n          });\n        },\n      })}\n    >\n      {editorStateManager.tabs.length > 0 && (\n        <ContextMenuContainer\n          renderMenu={() => (\n            <Menu\n              // TODO: detect which tab was triggering context menu and handle the action accordingly\n              //  One idea is to use use the data-key attribute, from the closes parent that has one. Maybe a\n              //  CollectionContextMenuContainer component which implements that, while ContextMenuContainer is\n              //  modified to pass the MouseEvent object, in renderMenu.\n              onAction={notImplemented}\n            >\n              <Item key=\"close\">Close</Item>\n              <Item key=\"closeOthers\">Close Other tabs</Item>\n              <Item key=\"closeAll\">Close all tabs</Item>\n              <Item key=\"closeLeft\">Close tabs to the left</Item>\n              <Item key=\"closeRight\">Close tabs to the right</Item>\n            </Menu>\n          )}\n        >\n          <EditorTabs\n            items={editorStateManager.tabs}\n            active={active}\n            selectedKey={activeTab?.filePath}\n            onSelectionChange={(key) =>\n              editorStateManager.select(\n                editorStateManager.tabs.findIndex((tab) => tab.filePath === key)\n              )\n            }\n            noBorders\n          >\n            {(tab) => {\n              const filename = path.basename(tab.filePath);\n              const icon = <PlatformIcon icon={getIconForFile(tab.filePath)} />;\n              return (\n                <TabItem\n                  key={tab.filePath}\n                  textValue={filename}\n                  inOverflowMenu={\n                    <MenuItemLayout content={filename} icon={icon} />\n                  }\n                >\n                  <TooltipTrigger\n                    tooltip={<ActionTooltip actionName={tab.filePath} />}\n                  >\n                    <EditorTabContent\n                      icon={icon}\n                      title={\n                        <FileStatusColor filepath={tab.filePath}>\n                          {filename}\n                        </FileStatusColor>\n                      }\n                      closeButton={\n                        <TooltipTrigger\n                          tooltip={\n                            <ActionTooltip actionName=\"Close. Alt-Click to Close Others\" />\n                          }\n                        >\n                          <TabCloseButton\n                            onPress={(e) => {\n                              if (e.altKey) {\n                                tabActionsRef.current.closeOthersTabs(\n                                  editorStateManager.tabs.indexOf(tab)\n                                );\n                              } else {\n                                tabActionsRef.current.closePath(tab.filePath);\n                              }\n                            }}\n                          />\n                        </TooltipTrigger>\n                      }\n                      containerProps={{\n                        onDoubleClick: () => {\n                          hideAllAction?.perform();\n                        },\n                      }}\n                    />\n                  </TooltipTrigger>\n                </TabItem>\n              );\n            }}\n          </EditorTabs>\n        </ContextMenuContainer>\n      )}\n      {activeTab &&\n        (typeof content === \"string\" ? (\n          <Editor\n            height=\"100%\"\n            path={activeTab.filePath}\n            onMount={(monacoEditor, monaco) => {\n              monacoEditor.focus();\n              enableJsx(monaco);\n              editorRef.current = monacoEditor;\n              monacoEditor.onDidChangeCursorPosition((e) => {\n                setCursorPositionState(e.position);\n              });\n              monacoEditor.onDidChangeModel(() => {\n                const position = editorRef.current?.getPosition();\n                if (position) {\n                  setCursorPositionState(position);\n                }\n              });\n            }}\n            onChange={updateContent}\n            value={content}\n          />\n        ) : (\n          content && \"UNSUPPORTED CONTENT\"\n        ))}\n      {contentLoadable.state === \"loading\" && <FileEditorLoading />}\n    </StyledFileEditorContainer>\n  );\n};\n\nconst StyledFileEditorContainer = styled.div`\n  position: relative;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  background: ${({ theme }) =>\n    theme.color(\n      \"Editor.background\",\n      theme.isUnderDarcula()\n        ? \"rgb(40,40,40)\"\n        : theme.commonColors.panelBackground // FIXME: ColorUtil.darker(theme.commonColors.panelBackground, 3)\n    )};\n`;\n\nconst FileEditorLoading = styled(LoadingGif)`\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n`;\n\nfunction enableJsx(monaco: Monaco) {\n  monaco.languages.typescript.typescriptDefaults.setCompilerOptions({\n    jsx: languages.typescript.JsxEmit.React,\n  });\n\n  monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n    noSemanticValidation: false,\n    noSyntaxValidation: false,\n  });\n}\n","import { styled, Theme } from \"@intellij-platform/core\";\nimport React from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { vcsRootsState } from \"../../file-status.state\";\nimport { useTheme } from \"styled-components\";\n\nconst StyledRepoColorSquare = styled.span`\n  width: 14px;\n  height: 14px;\n  align-self: center;\n  margin-right: 0.1rem;\n  position: relative;\n\n  //  after pseudo element is used to create the color mixing implemented here:\n  //  https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/vcs-log/impl/src/com/intellij/vcs/log/ui/VcsLogColorManagerImpl.java#L60\n  &&:after {\n    content: \"\";\n    position: absolute;\n    inset: 0;\n    opacity: 0.75;\n    background: ${({ theme }) =>\n      theme.color(\"Table.background\") || (theme.dark ? \"#3C3F41\" : \"#fff\")};\n  }\n`;\n\nconst useRepoRootColor = (rootPath: string) => {\n  const index = useRecoilValue(vcsRootsState).findIndex(\n    (root) => root.dir === rootPath\n  );\n  const theme = useTheme() as Theme;\n  const colors = [theme.commonColors.red, theme.commonColors.blue];\n  return colors[index % colors.length] ?? colors[0];\n};\n\nexport const RepoColorIcon = ({ rootPath }: { rootPath: string }) => (\n  <StyledRepoColorSquare\n    style={{ backgroundColor: useRepoRootColor(rootPath) }}\n  />\n);\n","import React from \"react\";\nimport { Color, styled } from \"@intellij-platform/core\";\n\nexport const StyledCurrentBranchTag = styled.span`\n  display: inline-flex;\n  align-self: center;\n  height: 1.1rem;\n  line-height: 1.1rem;\n  padding: 0 0.25rem;\n\n  background: ${({ theme }) =>\n    new Color(\n      theme.color(\n        \"VersionControl.RefLabel.backgroundBase\",\n        theme.dark ? \"#fff\" : \"#000\"\n      )\n    )\n      .withTransparency(\n        theme.value<number>(\"VersionControl.RefLabel.backgroundBrightness\") ??\n          0.08\n      )\n      .toString()};\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\n        \"VersionControl.RefLabel.foreground\",\n        theme.dark ? \"#909090\" : \"#7a7a7a\"\n      )\n    )};\n`;\n","import { IntlMessageFormat } from \"intl-messageformat\";\nimport React, { useEffect, useImperativeHandle, useRef } from \"react\";\nimport { useRecoilCallback, useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  Button,\n  PlatformIcon,\n  styled,\n  useBalloonManager,\n  useDefaultToolWindowContext,\n} from \"@intellij-platform/core\";\n\nimport { notImplemented } from \"../../../Project/notImplemented\";\nimport {\n  amendCommitState,\n  commitErrorMessageState,\n  commitMessageState,\n  includedChangesState,\n  isCommitInProgressState,\n} from \"./ChangesView.state\";\nimport { useCommit } from \"./useCommit\";\n\nconst StyledCommitMessageContainer = styled.div`\n  background: ${({ theme }) =>\n    theme.dark\n      ? \"#2b2b2b\" /*FIXME: should come from color scheme. attributes.TEXT.BACKGROUND*/\n      : \"#fff\"};\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledCommitMessageTextArea = styled.textarea`\n  flex: 1;\n  background: none;\n  padding: 0.25rem 0.375rem;\n  color: ${({ theme }) =>\n    theme.dark\n      ? \"#a9b7c6\" /*FIXME: should come from color scheme. attributes.TEXT.BACKGROUND*/\n      : \"#000\"};\n  font-family: inherit;\n  border: none;\n  resize: none;\n  outline: none;\n`;\nconst StyledCommitActionsRow = styled.div`\n  display: flex;\n  gap: 0.3rem;\n  padding: 0.4rem;\n`;\nconst StyledErrorMessage = styled.div`\n  display: flex;\n  align-items: center;\n  padding: 0.125rem 0.5rem;\n  gap: 0.25rem;\n  position: sticky; // prevents commit message scroll jump when message is toggled on and off\n  color: ${({ theme }) => theme.commonColors.red};\n`;\nconst commitSuccessfulMessage = new IntlMessageFormat(\n  `{count, plural,\n    =1 {1 file committed}\n    other {# files committed}\n  }`,\n  \"en-US\"\n);\n\n/**\n * Commit message and commit buttons shown in the bottom/right split view of the commit toolwindow\n */\nexport function CommitView({\n  editorRef,\n}: {\n  editorRef: React.RefObject<{ focus: () => void }>;\n}) {\n  const commitMessageTextAreaRef = useRef<HTMLTextAreaElement>(null);\n  const [commitMessage, setCommitMessage] = useRecoilState(commitMessageState);\n  const commit = useCommit();\n  const balloonManager = useBalloonManager();\n  const [errorMessage, setErrorMessage] = useRecoilState(\n    commitErrorMessageState\n  );\n  const isCommitInProgress = useRecoilValue(isCommitInProgressState);\n\n  useEffect(() => {\n    if (commitMessage) {\n      setErrorMessage(\"\");\n    }\n  }, [commitMessage]);\n\n  const commitSelectedChanges = useRecoilCallback(({ snapshot, set }) => {\n    const includedChanges = snapshot\n      .getLoadable(includedChangesState)\n      .getValue();\n    const commitMessage = snapshot.getLoadable(commitMessageState).getValue();\n    return () => {\n      if (includedChanges.length === 0) {\n        setErrorMessage(\"Select files to commit\");\n        return;\n      }\n      if (!commitMessage) {\n        setErrorMessage(\"Specify commit message\");\n        return;\n      }\n      if (snapshot.getLoadable(amendCommitState).getValue()) {\n        balloonManager.show({\n          icon: \"Error\",\n          title: \"Unsupported action\",\n          body: \"Amending commits is not yet supported.\",\n        });\n        return;\n      }\n      set(isCommitInProgressState, true);\n      return commit(includedChanges, commitMessage)\n        .then(\n          () => {\n            balloonManager.show({\n              icon: \"Info\",\n              body: (\n                <>\n                  {`${commitSuccessfulMessage.format({\n                    count: includedChanges.length,\n                  })}: `}\n                  {commitMessage\n                    .split(\"\\n\")\n                    .flatMap((part, index) => [<br key={index} />, part])\n                    .slice(1)}\n                </>\n              ),\n            });\n          },\n          (e) => {\n            balloonManager.show({\n              icon: \"Error\",\n              title: \"Commit failed!\",\n              body: \"Could not commit files.\",\n            });\n            console.error(\"Commit error\", e);\n          }\n        )\n        .finally(() => {\n          set(isCommitInProgressState, false);\n        });\n    };\n  }, []);\n\n  const { hasFocus } = useDefaultToolWindowContext();\n\n  useImperativeHandle(\n    editorRef,\n    () => ({\n      focus: () => {\n        commitMessageTextAreaRef.current?.focus();\n      },\n    }),\n    []\n  );\n\n  return (\n    <StyledCommitMessageContainer>\n      <StyledCommitMessageTextArea\n        ref={commitMessageTextAreaRef}\n        value={commitMessage}\n        onChange={(event) => {\n          setCommitMessage(event.target.value);\n        }}\n        placeholder=\"Commit Message\"\n        data-gramm=\"false\"\n      />\n      {errorMessage && (\n        <StyledErrorMessage>\n          <PlatformIcon icon=\"general/error.svg\" /> {errorMessage}\n        </StyledErrorMessage>\n      )}\n      <StyledCommitActionsRow>\n        <Button\n          preventFocusOnPress\n          variant={hasFocus ? \"default\" : undefined}\n          onPress={commitSelectedChanges}\n          isDisabled={isCommitInProgress}\n        >\n          Commit\n        </Button>\n        <Button preventFocusOnPress onPress={notImplemented}>\n          Commit and Push...\n        </Button>\n      </StyledCommitActionsRow>\n    </StyledCommitMessageContainer>\n  );\n}\n","import React from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  ActionButton,\n  ActionHelpTooltip,\n  ActionTooltip,\n  Checkbox,\n  PlatformIcon,\n  styled,\n  TooltipTrigger,\n  UnknownThemeProp,\n} from \"@intellij-platform/core\";\n\nimport { ChangesSummary } from \"../ChangesSummary\";\nimport { notImplemented } from \"../../../Project/notImplemented\";\nimport { amendCommitState, includedChangesState } from \"./ChangesView.state\";\n\nconst StyledActionsRow = styled.div`\n  display: flex;\n  padding: 0.125rem;\n  position: relative;\n`;\nconst StyledAmendCheckbox = styled(Checkbox)`\n  padding-right: 0.625rem;\n`;\nconst StyledChangesSummaryContainer = styled.span`\n  position: absolute;\n  right: 0.5rem;\n  top: 0.25rem;\n  background: ${({ theme }) =>\n    theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)};\n  z-index: 1;\n`;\nconst ChangesViewChangesSummary = () => {\n  const changes = useRecoilValue(includedChangesState);\n  return <ChangesSummary changes={changes} />;\n};\n\n/**\n * Amend checkbox, commit message history button, and summary of included changes, shown as a row\n * bellow changes tree, in commit tool window.\n */\nexport function CommitActionsRow() {\n  const [amend, setAmend] = useRecoilState(amendCommitState);\n\n  return (\n    <StyledActionsRow>\n      <TooltipTrigger\n        tooltip={\n          <ActionHelpTooltip\n            actionName=\"Amend Commit\"\n            helpText=\"Modify the latest commit of the current branch\"\n          />\n        }\n      >\n        {(props) => (\n          <span {...props}>\n            <StyledAmendCheckbox\n              isSelected={amend}\n              onChange={setAmend}\n              preventFocus\n            >\n              Amend\n            </StyledAmendCheckbox>\n          </span>\n        )}\n      </TooltipTrigger>\n      <TooltipTrigger\n        tooltip={<ActionTooltip actionName=\"Show Commit Options\" />}\n      >\n        <ActionButton onPress={notImplemented}>\n          <PlatformIcon icon=\"general/gear.svg\" />\n        </ActionButton>\n      </TooltipTrigger>\n      <TooltipTrigger\n        tooltip={<ActionTooltip actionName=\"Commit Message History\" />}\n      >\n        <ActionButton isDisabled onPress={notImplemented}>\n          <PlatformIcon icon=\"vcs/historyInline.svg\" />\n        </ActionButton>\n      </TooltipTrigger>\n      <StyledChangesSummaryContainer>\n        <ChangesViewChangesSummary />\n      </StyledChangesSummaryContainer>\n    </StyledActionsRow>\n  );\n}\n","import {\n  ActionsProvider,\n  getAnchorOrientation,\n  styled,\n  ThreeViewSplitter,\n  TreeRefValue,\n  useToolWindowState,\n  useTreeActions,\n} from \"@intellij-platform/core\";\nimport { useRecoilState } from \"recoil\";\n\nimport { commitMessageSizeState } from \"./ChangesView.state\";\nimport React, { useRef } from \"react\";\nimport { ChangeViewTree } from \"./ChangeViewTree\";\nimport { ChangesViewToolbar } from \"./ChangesViewToolbar\";\nimport { CommitView } from \"./CommitView\";\nimport { CommitActionsRow } from \"./CommitActionsRow\";\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n\nconst StyledTreeViewWrapper = styled.div`\n  flex: 1;\n  overflow: auto;\n`;\n\n// Not so ideal solution for allowing imperatively focusing commit message. Should be ok, since there will\n// be at most only one instance of change view rendered.\nlet editor: { focus: () => void } | null = null;\n\nexport let focusCommitMessage = () => {\n  setTimeout(() => {\n    editor?.focus();\n  });\n};\n\nexport const ChangesViewSplitter = () => {\n  const {\n    state: { anchor },\n  } = useToolWindowState();\n  const treeRef = useRef<TreeRefValue>(null);\n  const editorRef = useRef<{ focus: () => void }>(null);\n  const orientation = getAnchorOrientation(anchor);\n  const [commitMessageSize, setCommitMessageSize] = useRecoilState(\n    commitMessageSizeState(orientation)\n  );\n  const treeActions = useTreeActions({ treeRef });\n  // TODO(lib-candidate): ToolWindowAwareSplitter. A wrapper around ThreeViewSplitter which sets orientation based\n  //  on anchor orientation from useToolWindowState.\n  editor = editorRef.current;\n\n  return (\n    <ThreeViewSplitter\n      orientation={orientation}\n      innerView={\n        <ActionsProvider actions={treeActions}>\n          {({ shortcutHandlerProps }) => (\n            <StyledContainer {...shortcutHandlerProps}>\n              <ChangesViewToolbar />\n              <StyledTreeViewWrapper>\n                <ChangeViewTree treeRef={treeRef} />\n              </StyledTreeViewWrapper>\n              <CommitActionsRow />\n            </StyledContainer>\n          )}\n        </ActionsProvider>\n      }\n      innerViewMinSize={50}\n      lastView={<CommitView editorRef={editorRef} />}\n      lastSize={commitMessageSize}\n      onLastResize={setCommitMessageSize}\n    />\n  );\n};\n","import {\n  Button,\n  InputField,\n  ModalWindow,\n  styled,\n  useBalloonManager,\n  WindowLayout,\n} from \"@intellij-platform/core\";\nimport React, { FormEvent, ReactNode, useState } from \"react\";\nimport {\n  BranchNameError,\n  cleanUpBranchName,\n  validateBranchName,\n} from \"./branch-name-utils\";\nimport { useRecoilValue } from \"recoil\";\nimport { repoBranchesState, useRenameBranch } from \"./branches.state\";\n\nconst StyledContainer = styled.div`\n  padding: 0.5rem 1rem;\n`;\nconst StyledInputField = styled(InputField)`\n  width: 100%;\n`;\n\nexport const ErrorMessages: Record<\n  BranchNameError,\n  (branchName: string) => ReactNode\n> = {\n  EXISTING: (branchName: string) => (\n    <>\n      Branch name {branchName} already exists <br />\n    </>\n  ),\n  CLASHING_WITH_REMOTE: (branchName: string) => (\n    <>\n      Branch name {branchName} clashes with remote branch <br />\n      with the same name\n    </>\n  ),\n};\n\nexport function RenameBranchWindow({\n  branchName,\n  repoRoot,\n  close,\n}: {\n  branchName: string;\n  repoRoot: string;\n  close: () => void;\n}) {\n  const [newBranchName, setNewBranchName] = useState(branchName);\n  const [touched, setTouched] = useState(false);\n  const balloonManager = useBalloonManager();\n  const branches = useRecoilValue(repoBranchesState(repoRoot));\n  const renameBranch = useRenameBranch();\n\n  const error = validateBranchName(branches, newBranchName);\n  const validationState = error && touched ? \"invalid\" : \"valid\";\n\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (!error) {\n      renameBranch(branches.repoRoot, branchName, newBranchName)\n        .catch((e) => {\n          balloonManager.show({\n            icon: \"Error\",\n            title: \"Unexpected error\",\n            body: `Could not rename branch ${branchName} to ${newBranchName}.`,\n          });\n          console.error(\"Branch rename error: \", e);\n        })\n        .then(() => {\n          close();\n          // TODO: show toolwindow balloon, when/if git toolwindow is added\n        });\n    } else {\n      setTouched(true);\n    }\n  };\n  return (\n    <ModalWindow minWidth=\"content\" minHeight=\"content\">\n      <WindowLayout\n        header={`Rename branch ${branchName}`}\n        content={\n          <StyledContainer>\n            <form id=\"branch_rename_form\" onSubmit={onSubmit}>\n              <StyledInputField\n                labelPlacement=\"above\"\n                label=\"New branch name:\"\n                value={newBranchName}\n                onChange={(newValue) => {\n                  setNewBranchName(cleanUpBranchName(newValue));\n                  setTouched(true);\n                }}\n                validationState={validationState}\n                errorMessage={\n                  error && validationState === \"invalid\"\n                    ? ErrorMessages[error]?.(branchName)\n                    : undefined\n                }\n              />\n            </form>\n          </StyledContainer>\n        }\n        footer={\n          <WindowLayout.Footer\n            right={\n              <>\n                <Button onPress={close}>Cancel</Button>\n                <Button\n                  variant=\"default\"\n                  type=\"submit\"\n                  form=\"branch_rename_form\"\n                  isDisabled={Boolean(error) && touched}\n                >\n                  Rename\n                </Button>\n              </>\n            }\n          />\n        }\n      />\n    </ModalWindow>\n  );\n}\n","import React from \"react\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n  styled,\n} from \"@intellij-platform/core\";\n\nconst StyledMenuIconButton = styled.span.attrs({ role: \"button\" })`\n  display: inline-flex;\n`;\n\nexport function BranchFavoriteButton({\n  onClick,\n  isFavorite,\n  isCurrent,\n}: {\n  isCurrent?: boolean;\n  isFavorite: boolean;\n  onClick: () => void;\n}) {\n  const getIcon = () => {\n    if (isCurrent) {\n      return (\n        <AutoHoverPlatformIcon\n          icon={\n            isFavorite\n              ? \"/platform/dvcs-impl/resources/icons/currentBranchFavoriteLabel.svg\"\n              : \"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\"\n          }\n          hoverIcon={\n            isFavorite ? \"nodes/favorite.svg\" : \"nodes/notFavoriteOnHover.svg\"\n          }\n          hoverContainerSelector=\"[role='menuitem']\"\n        />\n      );\n    }\n    if (isFavorite) {\n      return <PlatformIcon icon=\"nodes/favorite.svg\" />;\n    } else {\n      return (\n        <AutoHoverPlatformIcon\n          icon=\"nodes/emptyNode.svg\"\n          hoverIcon=\"nodes/notFavoriteOnHover.svg\"\n          hoverContainerSelector=\"[role='menuitem']\"\n        />\n      );\n    }\n  };\n  return (\n    <StyledMenuIconButton\n      onPointerUp={(e) => {\n        e.stopPropagation();\n      }}\n      onClick={onClick}\n    >\n      {getIcon()}\n    </StyledMenuIconButton>\n  );\n}\n","import path from \"path\";\nimport React, { useState } from \"react\";\nimport {\n  ActionButton,\n  ActionToolbar,\n  ActionTooltip,\n  BalloonActionLink,\n  Bounds,\n  Divider,\n  Item,\n  ItemLayout,\n  MenuItemLayout,\n  PlatformIcon,\n  Popup,\n  PopupLayout,\n  Section,\n  SpeedSearchMenu,\n  styled,\n  TooltipTrigger,\n  useAction,\n  useBalloonManager,\n  useWindowManager,\n} from \"@intellij-platform/core\";\n\nimport { useLatestRecoilValue } from \"../../recoil-utils\";\nimport {\n  allBranchesState,\n  useCheckoutBranch,\n  useDeleteBranch,\n  useFavoriteBranches,\n} from \"./branches.state\";\nimport { notImplemented } from \"../../Project/notImplemented\";\nimport { VcsActionIds } from \"../VcsActionIds\";\nimport { atom, useRecoilState } from \"recoil\";\nimport { RenameBranchWindow } from \"./RenameBranchWindow\";\nimport { Errors } from \"isomorphic-git\";\nimport { BranchFavoriteButton } from \"./BranchFavoriteButton\";\n\nconst StyledHeader = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.375rem;\n  display: flex;\n  align-items: center;\n  width: 100%;\n`;\nconst StyledTitle = styled.div`\n  flex: 1;\n  text-align: center;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  margin: 0 0.625rem;\n`;\n\nexport const branchesPopupSizeState = atom<\n  | {\n      width: number;\n      height: number;\n    }\n  | undefined\n>({\n  key: \"branchesPopup.bounds\",\n  default: undefined,\n});\n\nexport function BranchesPopup({ onClose }: { onClose: () => void }) {\n  const repoBranches = useLatestRecoilValue(allBranchesState);\n  const [branchesPopupPersistedSize, setBranchesPopupPersistedSize] =\n    useRecoilState(branchesPopupSizeState);\n  const [branchesPopupBounds, setBranchesPopupBounds] = useState<\n    Partial<Bounds>\n  >(branchesPopupPersistedSize ?? {});\n\n  const newBranchAction = useAction(VcsActionIds.GIT_CREATE_NEW_BRANCH);\n  const deleteBranch = useDeleteBranch();\n  const balloonManager = useBalloonManager();\n  const windowManager = useWindowManager();\n  const checkoutBranch = useCheckoutBranch();\n\n  // useRefreshRecoilValueOnMount(allBranchesState);\n\n  const { isFavorite, toggleFavorite } = useFavoriteBranches();\n\n  if (!repoBranches) {\n    return null;\n  }\n  const title =\n    repoBranches.length === 1\n      ? `Git Branches in ${path.basename(repoBranches[0].repoRoot)}`\n      : \"Git Branches\";\n  return (\n    <Popup\n      interactions=\"all\"\n      minHeight={55}\n      minWidth={300}\n      bounds={branchesPopupBounds}\n      onBoundsChange={(bounds, interactionType) => {\n        if (interactionType === \"resize\") {\n          setBranchesPopupPersistedSize({\n            width: bounds.width,\n            height: bounds.height,\n          });\n        }\n        setBranchesPopupBounds(bounds);\n      }}\n    >\n      <PopupLayout\n        header={\n          <Popup.Header hasControls>\n            <StyledHeader>\n              <StyledTitle>{title}</StyledTitle>\n              <ActionToolbar>\n                <TooltipTrigger tooltip={<ActionTooltip actionName=\"Fetch\" />}>\n                  <ActionButton\n                    onPress={() => {\n                      notImplemented();\n                      onClose();\n                    }}\n                  >\n                    <PlatformIcon icon=\"vcs/fetch.svg\" />\n                  </ActionButton>\n                </TooltipTrigger>\n                <TooltipTrigger\n                  tooltip={<ActionTooltip actionName=\"Restore Popup Size\" />}\n                >\n                  <ActionButton\n                    isDisabled={branchesPopupPersistedSize === undefined}\n                    onPress={() => {\n                      setBranchesPopupPersistedSize(undefined);\n                      setBranchesPopupBounds(\n                        ({ width, height, ...currentBounds }) => ({\n                          ...currentBounds,\n                        })\n                      );\n                    }}\n                  >\n                    <PlatformIcon icon=\"general/fitContent.svg\" />\n                  </ActionButton>\n                </TooltipTrigger>\n              </ActionToolbar>\n            </StyledHeader>\n          </Popup.Header>\n        }\n        content={\n          <SpeedSearchMenu\n            aria-label={title}\n            submenuBehavior=\"toggleOnPress\"\n            fillAvailableSpace\n            autoFocus=\"first\"\n            disabledKeys={repoBranches.flatMap(({ localBranches, repoRoot }) =>\n              localBranches\n                .filter(({ trackingBranch }) => !trackingBranch)\n                .map(({ name }) => `${repoRoot}/pull-${name}`)\n            )}\n            onAction={(key) => {\n              const [repoRoot, branch, operation] = `${key}`.split(\"//\");\n\n              async function tryCheckout(checkout: () => Promise<unknown>) {\n                try {\n                  await checkout();\n                  // TODO: show toolwindow balloon, when/if git toolwindow is added\n                } catch (e) {\n                  if (e instanceof Errors.CheckoutConflictError) {\n                    // TODO: open Git Checkout Problem window.\n                    balloonManager.show({\n                      icon: \"Error\",\n                      title: \"Git Checkout Problem\",\n                      body: e.message,\n                    });\n                  } else {\n                    balloonManager.show({\n                      icon: \"Error\",\n                      title: \"Checkout failed\",\n                      body: `Could not checkout branch ${branch}`,\n                    });\n                  }\n                }\n              }\n\n              function checkoutLocalBranch() {\n                return tryCheckout(() => checkoutBranch(repoRoot, branch));\n              }\n\n              function checkoutRemoteBranch() {\n                const remoteBranch = repoBranches\n                  ?.find(({ repoRoot: aRepoRoot }) => aRepoRoot === repoRoot)\n                  ?.remoteBranches.find(\n                    ({ name, remote }) => `${remote}/${name}` === branch\n                  );\n                if (remoteBranch) {\n                  return tryCheckout(() =>\n                    checkoutBranch(\n                      repoRoot,\n                      remoteBranch.name,\n                      remoteBranch.remote\n                    )\n                  );\n                }\n              }\n\n              switch (key) {\n                case newBranchAction?.id:\n                  return newBranchAction?.perform();\n                default:\n                  switch (operation) {\n                    case \"delete\":\n                      return deleteBranch(repoRoot, branch).then(\n                        () => {\n                          balloonManager.show({\n                            title: `Deleted branch: ${branch}`,\n                            icon: \"Info\",\n                            actions: (\n                              <BalloonActionLink onPress={notImplemented}>\n                                Restore\n                              </BalloonActionLink>\n                            ),\n                          });\n                        },\n                        () => {\n                          balloonManager.show({\n                            title: `Could not deleted branch: ${branch}`,\n                            icon: \"Error\",\n                          });\n                        }\n                      );\n                    case \"rename\":\n                      return windowManager.open(({ close }) => (\n                        <RenameBranchWindow\n                          repoRoot={repoRoot}\n                          branchName={branch}\n                          close={close}\n                        />\n                      ));\n                    case \"checkout\":\n                      return checkoutLocalBranch();\n                    case \"remote-checkout\":\n                      return checkoutRemoteBranch();\n                    default:\n                      return notImplemented();\n                  }\n              }\n            }}\n            onClose={onClose}\n          >\n            {newBranchAction && (\n              <Item key={newBranchAction.id} textValue={newBranchAction.title}>\n                <MenuItemLayout\n                  icon={newBranchAction.icon}\n                  content={newBranchAction.title}\n                />\n              </Item>\n            )}\n            <Item key=\"checkout_revision\">Checkout Tag or Revision...</Item>\n            {\n              repoBranches.flatMap(\n                ({\n                  remoteBranches,\n                  localBranches,\n                  repoRoot,\n                  currentBranch,\n                }) => {\n                  const getSectionLabel = (label: string, repoRoot: string) =>\n                    repoBranches.length > 1\n                      ? `${label} in ${path.basename(repoRoot)}`\n                      : label;\n                  const compareActions = (\n                    branchName: string,\n                    isCurrent: boolean\n                  ) => [\n                    !isCurrent && (\n                      <Item\n                        key={`${repoRoot}//${branchName}//compare-with-branch`}\n                      >{`Compare with '${branchName}'`}</Item>\n                    ),\n                    <Item\n                      key={`${repoRoot}//${branchName}//show-diff-with-working-tree`}\n                    >\n                      Show Diff with Working Tree\n                    </Item>,\n                    <Divider key=\"compare-actions-divider\" />,\n                  ];\n                  const mergeActions = (\n                    branchName: string,\n                    currentBranch: string | undefined\n                  ) =>\n                    currentBranch &&\n                    branchName !== currentBranch && [\n                      <Item\n                        key={`${repoRoot}//${branchName}//rebase-current-onto`}\n                      >{`Rebase '${currentBranch}' onto '${branchName}'`}</Item>,\n                      <Item\n                        key={`${repoRoot}//${branchName}//merge-into-current`}\n                      >{`Merge '${branchName}' onto '${currentBranch}'`}</Item>,\n                      <Divider key=\"merge-actions-divider\" />,\n                    ];\n\n                  return [\n                    <Section\n                      key={`${repoRoot}//local_branches`}\n                      title={getSectionLabel(\"Local Branches\", repoRoot)}\n                    >\n                      {localBranches.map(({ name, trackingBranch }) => {\n                        const isCurrent = name === currentBranch?.name;\n                        const favoriteBranchArgs = {\n                          branchName: name,\n                          branchType: \"LOCAL\",\n                          repoRoot,\n                        } as const;\n                        return (\n                          <Item\n                            key={`${repoRoot}//${name}`}\n                            textValue={name}\n                            title={\n                              <MenuItemLayout\n                                content={name}\n                                icon={\n                                  <BranchFavoriteButton\n                                    isFavorite={isFavorite(favoriteBranchArgs)}\n                                    isCurrent={isCurrent}\n                                    onClick={() => {\n                                      toggleFavorite(favoriteBranchArgs);\n                                    }}\n                                  />\n                                }\n                                shortcut={\n                                  trackingBranch && (\n                                    <ItemLayout.Hint small>\n                                      {trackingBranch}\n                                    </ItemLayout.Hint>\n                                  )\n                                }\n                              />\n                            }\n                          >\n                            {!isCurrent && (\n                              <Item key={`${repoRoot}//${name}//checkout`}>\n                                Checkout\n                              </Item>\n                            )}\n                            <Item\n                              key={`${repoRoot}//${name}//new-branch-from`}\n                            >{`New Branch from '${name}'...`}</Item>\n                            {!isCurrent && (\n                              <Item\n                                key={`${repoRoot}//${name}//checkout-and-rebase-onto`}\n                              >{`Checkout and rebase onto '${name}'`}</Item>\n                            )}\n                            <Divider key=\"new-branch-actions-divider\" />\n                            {compareActions(name, isCurrent)}\n                            {mergeActions(name, currentBranch?.name)}\n                            <Item key={`${repoRoot}//${name}//pull`}>\n                              Update\n                            </Item>\n                            <Item key={`${repoRoot}//${name}//push`}>\n                              Push...\n                            </Item>\n                            <Divider key=\"push-divider\" />\n                            <Item key={`${repoRoot}//${name}//rename`}>\n                              Rename...\n                            </Item>\n                            {!isCurrent && (\n                              <Item key={`${repoRoot}//${name}//delete`}>\n                                Delete\n                              </Item>\n                            )}\n                          </Item>\n                        );\n                      })}\n                    </Section>,\n                    <Section\n                      key={`${repoRoot}//remote_branches`}\n                      title={getSectionLabel(\"Remote Branches\", repoRoot)}\n                    >\n                      {remoteBranches.map((branch) => {\n                        const branchName = `${branch.remote}/${branch.name}`;\n                        const favoriteBranchArgs = {\n                          branchName,\n                          branchType: \"REMOTE\",\n                          repoRoot,\n                        } as const;\n                        return (\n                          <Item\n                            key={`${repoRoot}//${branchName}`}\n                            textValue={branchName}\n                            title={\n                              <MenuItemLayout\n                                content={branchName}\n                                icon={\n                                  <BranchFavoriteButton\n                                    isFavorite={isFavorite(favoriteBranchArgs)}\n                                    onClick={() => {\n                                      toggleFavorite(favoriteBranchArgs);\n                                    }}\n                                  />\n                                }\n                              />\n                            }\n                          >\n                            <Item\n                              key={`${repoRoot}//${branchName}//remote-checkout`}\n                            >\n                              Checkout\n                            </Item>\n                            <Item\n                              key={`${repoRoot}//${branchName}//new-branch-from`}\n                            >{`New Branch from '${branchName}'...`}</Item>\n                            <Item\n                              key={`${repoRoot}//${branchName}//checkout-and-rebase-onto`}\n                            >{`Checkout and rebase onto '${branchName}'`}</Item>\n                            <Divider key=\"new-branch-actions-divider\" />\n                            {compareActions(branchName, false)}\n                            {mergeActions(branchName, currentBranch?.name)}\n                            <Item\n                              key={`${repoRoot}//${branchName}//pull-into-using-merge`}\n                            >{`Pull into '${branchName}' Using Merge`}</Item>\n                            <Item\n                              key={`${repoRoot}//${branchName}//pull-into-using-rebase`}\n                            >{`Pull into '${branchName}' Using Rebase`}</Item>\n                            <Divider />\n                            <Item key={`${repoRoot}//${branchName}//delete`}>\n                              Delete\n                            </Item>\n                          </Item>\n                        );\n                      })}\n                    </Section>,\n                  ];\n                }\n              ) as any\n            }\n          </SpeedSearchMenu>\n        }\n      />\n    </Popup>\n  );\n}\n","import React, { Key, useRef, useState } from \"react\";\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { Selection } from \"@react-types/shared\";\nimport {\n  ActionButton,\n  ActionButtonWithMenu,\n  ActionsProvider,\n  ActionToolbar,\n  Button,\n  Checkbox,\n  CommonActionId,\n  ContextMenuContainer,\n  Item,\n  Menu,\n  ModalWindow,\n  PlatformIcon,\n  Section,\n  SpeedSearchTreeWithCheckboxes,\n  styled,\n  TreeNodeCheckbox,\n  TreeRefValue,\n  useBalloonManager,\n  useNestedSelectionState,\n  useTreeActions,\n  WindowLayout,\n} from \"@intellij-platform/core\";\nimport { Action } from \"@intellij-platform/core/ActionSystem/components\";\n\nimport { changesTreeNodesState } from \"../ChangesView/ChangesView.state\";\nimport { getChangeListTreeItemProps } from \"../ChangesView/changesTreeNodeRenderers\";\nimport { rollbackViewState } from \"./rollbackView.state\";\nimport { allChangesState, useRollbackChanges } from \"../change-lists.state\";\nimport { ChangesSummary } from \"../ChangesSummary\";\nimport { groupings } from \"../ChangesView/changesGroupings\";\nimport { RollbackTreeContextMenu } from \"./RollbackTreeContextMenu\";\nimport { notImplemented } from \"../../../Project/notImplemented\";\nimport {\n  AnyNode,\n  getNodeKeyForChange,\n  isGroupNode,\n} from \"../ChangesView/change-view-nodes\";\n\nconst StyledContainer = styled.div`\n  box-sizing: border-box;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  padding: 1rem 0.75rem 0;\n`;\nconst StyledFrame = styled.div`\n  border: 1px solid ${({ theme }) => theme.commonColors.contrastBorder};\n  flex: 1;\n  overflow: auto;\n`;\n\nconst StyledLine = styled.div`\n  line-height: 2;\n  padding-left: 0.5rem;\n`;\n\nexport function RollbackWindow() {\n  const defaultExpandedKeys = useRecoilValue(\n    rollbackViewState.initiallyExpandedKeys\n  );\n  const initiallyIncludedChangeKeys = useRecoilValue(\n    rollbackViewState.initiallyIncludedChanges\n  ).map(getNodeKeyForChange);\n  const { fileCountsMap } = useRecoilValue(changesTreeNodesState);\n  const [windowBounds, setWindowBounds] = useRecoilState(\n    rollbackViewState.windowBounds\n  );\n  const rootNodes = useRecoilValue(rollbackViewState.rootNodes);\n  const [selectedKeys, setSelectedKeys] = useState<Selection>(\n    new Set<Key>(initiallyIncludedChangeKeys.slice(0, 1))\n  );\n  const [expandedKeys, setExpandedKeys] =\n    useState<Set<Key>>(defaultExpandedKeys);\n  const [includedChangeKeys, setIncludedChangeKeys] = useState(\n    new Set<Key>(initiallyIncludedChangeKeys)\n  );\n  const nestedSelection = useNestedSelectionState<AnyNode>(\n    {\n      rootNodes,\n      getKey: (node) => node.key,\n      getChildren: (node) => (isGroupNode(node) ? node.children : null),\n    },\n    {\n      selectedKeys: includedChangeKeys,\n      onSelectedKeysChange: setIncludedChangeKeys,\n    }\n  );\n  const allChanges = useRecoilValue(allChangesState);\n  const includedChanges = allChanges.filter((change) =>\n    includedChangeKeys.has(getNodeKeyForChange(change))\n  );\n  const rollbackChanges = useRollbackChanges();\n  const balloons = useBalloonManager();\n  const setOpen = useSetRecoilState(rollbackViewState.isOpen);\n  const close = () => setOpen(false);\n\n  const treeRef = useRef<TreeRefValue>(null);\n  const treeActions = useTreeActions({ treeRef });\n\n  return (\n    <ModalWindow\n      onClose={close}\n      bounds={windowBounds}\n      onBoundsChange={setWindowBounds}\n      minHeight={200}\n      minWidth={275}\n    >\n      <WindowLayout\n        header=\"Rollback changes\"\n        content={\n          <ActionsProvider actions={treeActions}>\n            {({ shortcutHandlerProps }) => (\n              <StyledContainer {...shortcutHandlerProps}>\n                <div style={{ display: \"flex\" }}>\n                  <ActionToolbar>\n                    <ActionButton isDisabled>\n                      <PlatformIcon icon=\"actions/diff\" />\n                    </ActionButton>\n                    <ActionButtonWithMenu\n                      renderMenu={({ menuProps }) => (\n                        <Menu\n                          {...menuProps}\n                          selectedKeys={[] /* FIXME */}\n                          // FIXME\n                          onAction={notImplemented}\n                        >\n                          <Section title=\"Group By\">\n                            {\n                              // FIXME\n                              groupings.map((grouping) => (\n                                <Item key={grouping.id}>{grouping.title}</Item>\n                              ))\n                            }\n                          </Section>\n                        </Menu>\n                      )}\n                    >\n                      <PlatformIcon icon=\"actions/groupBy.svg\" />\n                    </ActionButtonWithMenu>\n                  </ActionToolbar>\n                  <span style={{ flex: 1 }} />\n                  <ActionToolbar>\n                    <Action.Button actionId={CommonActionId.EXPAND_ALL} />\n                    <Action.Button actionId={CommonActionId.COLLAPSE_ALL} />\n                  </ActionToolbar>\n                </div>\n\n                <StyledFrame>\n                  <ContextMenuContainer\n                    renderMenu={() => <RollbackTreeContextMenu />}\n                    style={{ height: \"100%\" }}\n                  >\n                    <SpeedSearchTreeWithCheckboxes\n                      ref={treeRef}\n                      items={rootNodes}\n                      selectionMode=\"multiple\"\n                      selectedKeys={selectedKeys}\n                      onSelectionChange={setSelectedKeys}\n                      expandedKeys={expandedKeys}\n                      onExpandedChange={setExpandedKeys}\n                      nestedSelection={nestedSelection}\n                      fillAvailableSpace\n                    >\n                      {(node) => {\n                        const props = getChangeListTreeItemProps({\n                          node,\n                          fileCountsMap,\n                        });\n                        return (\n                          <Item {...props}>\n                            {node.children?.length !== 0 && (\n                              <TreeNodeCheckbox\n                                selectionState={nestedSelection.getSelectionState(\n                                  node\n                                )}\n                                onToggle={() => nestedSelection.toggle(node)}\n                              />\n                            )}\n                            {props.children}\n                          </Item>\n                        );\n                      }}\n                    </SpeedSearchTreeWithCheckboxes>\n                  </ContextMenuContainer>\n                </StyledFrame>\n              </StyledContainer>\n            )}\n          </ActionsProvider>\n        }\n        footer={\n          <>\n            <div\n              style={{\n                padding: \"0 .75rem\",\n                display: \"flex\",\n                flexDirection: \"column\",\n              }}\n            >\n              <StyledLine>\n                <ChangesSummary changes={includedChanges} />\n              </StyledLine>\n              <Checkbox isDisabled>\n                Delete local copies of the added files\n              </Checkbox>\n            </div>\n            <WindowLayout.Footer\n              right={\n                <>\n                  <Button onPress={close}>Cancel</Button>\n                  <Button\n                    variant=\"default\"\n                    onPress={() => {\n                      rollbackChanges(includedChanges)\n                        .catch((e) => {\n                          balloons.show({\n                            title: \"Reverting changes failed\",\n                            icon: \"Error\",\n                            body: \"Could not revert selected changes. See console for more info\",\n                          });\n                          console.error(\"Git revert error:\", e);\n                        })\n                        .finally(close);\n                    }}\n                  >\n                    Rollback\n                  </Button>\n                </>\n              }\n            />\n          </>\n        }\n      />\n    </ModalWindow>\n  );\n}\n","import { ItemLayout, styled } from \"@intellij-platform/core\";\n\nexport const StyledIconWrapper = styled.span`\n  width: 1.125rem;\n  display: inline-flex;\n  justify-content: center;\n`;\nexport const StyledItemLayout = styled(ItemLayout)`\n  min-height: 1.375rem;\n  width: 100%;\n  padding: 0;\n`;\nexport const StyledTitleWrapper = styled.span<{ isDisabled?: boolean }>`\n  color: ${({ theme, isDisabled }) =>\n    isDisabled &&\n    theme.currentForegroundAware(theme.commonColors.inactiveTextColor)};\n`;\n","import React, { useContext } from \"react\";\nimport {\n  Action,\n  ActionGroup,\n  ItemLayout,\n  ItemStateContext,\n  TextRange,\n  TextWithHighlights,\n  isInResolvedActionGroup,\n  styled,\n} from \"@intellij-platform/core\";\nimport {\n  StyledIconWrapper,\n  StyledItemLayout,\n  StyledTitleWrapper,\n} from \"../ItemHelpers\";\n\nconst StyledSpacer = styled.div`\n  flex: 1;\n`;\n/**\n * UI of actions in SearchEverywhere list\n */\nexport function ActionItem({\n  action,\n  highlights,\n}: {\n  action: Action;\n  highlights: null | TextRange[];\n}) {\n  const { isSelected } = useContext(ItemStateContext) || {};\n  return (\n    <StyledItemLayout>\n      <StyledIconWrapper>{action.icon}</StyledIconWrapper>\n      <StyledTitleWrapper isDisabled={action.isDisabled}>\n        {isSelected ? (\n          <TextWithHighlights highlights={highlights}>\n            {action.title}\n          </TextWithHighlights>\n        ) : (\n          action.title\n        )}\n      </StyledTitleWrapper>\n      <ItemLayout.Hint style={{ fontSize: \".85em\", fontWeight: \"bold\" }}>\n        {action.shortcut}\n      </ItemLayout.Hint>\n      <StyledSpacer />\n      <ItemLayout.Hint\n        style={{\n          marginRight:\n            \"-0.375rem\" /* to kill the default list padding on right. */,\n        }}\n      >\n        {getActionBreadcrumb(action, \"title\").join(\" | \")}\n      </ItemLayout.Hint>\n    </StyledItemLayout>\n  );\n}\n\nfunction getActionBreadcrumb<T extends keyof ActionGroup>(\n  action: Action,\n  field: T\n): Array<ActionGroup[T]>;\nfunction getActionBreadcrumb(action: Action): Array<ActionGroup>;\nfunction getActionBreadcrumb(action: Action, field?: keyof ActionGroup) {\n  let parent = isInResolvedActionGroup(action) ? action.parent : null;\n  const breadcrumb: Array<ActionGroup | ActionGroup[keyof ActionGroup]> = [];\n  while (parent) {\n    breadcrumb.unshift(field ? parent[field] : parent);\n    parent = parent.parent;\n  }\n  return breadcrumb;\n}\n","import React, { useEffect, useMemo, useRef, useState } from \"react\";\nimport { useRecoilState, useSetRecoilState } from \"recoil\";\nimport {\n  ActionButton,\n  ActionDefinition,\n  ActionsProvider,\n  FocusScope,\n  Item,\n  Link,\n  List,\n  PlatformIcon,\n  Popup,\n  Selection,\n  SelectionManager,\n  styled,\n  StyledTabProps,\n  Tabs,\n  Tooltip,\n  TooltipTrigger,\n  useCollectionSearchInput,\n  useGetActionShortcut,\n} from \"@intellij-platform/core\";\nimport { useTips } from \"./useTips\";\nimport { Input } from \"./Input\";\nimport {\n  searchEverywhereState,\n  SearchEveryWhereTab,\n} from \"./searchEverywhere.state\";\nimport { ContentAwarePopup } from \"./ContentAwarePopup\";\nimport {\n  SearchEverywhereContributor,\n  SearchEverywhereContributorResult,\n} from \"./SearchEverywhereContributor\";\nimport { actionsSearchContributor } from \"./contributors/action/actionsSearchContributor\";\nimport { filesSearchContributor } from \"./contributors/file/filesSearchContributor\";\nimport { SearchEverywhereActionIds } from \"./SearchEverywhereActionIds\";\nimport { useRecoilInitialValue } from \"../recoil-utils\";\n\nconst StyledHeader = styled.div`\n  display: flex;\n  width: 100%;\n  background: ${({ theme }) =>\n    theme.color(\"SearchEverywhere.Header.background\")};\n  border-bottom: 1px solid\n    ${({ theme }) => theme.color(\"SearchEverywhere.SearchField.borderColor\")};\n`;\nconst StyledTab = styled.button<StyledTabProps>`\n  all: unset;\n  background: ${({ theme, selected }) =>\n    selected && theme.color(\"SearchEverywhere.Tab.selectedBackground\")};\n  color: ${({ theme }) =>\n    theme.color(\"SearchEverywhere.Tab.selectedForeground\")};\n  opacity: ${({ disabled }) => disabled && \".5\"};\n`;\nconst StyledTabContent = styled.span`\n  display: flex;\n  padding: 0 0.75rem;\n  height: 1.8rem;\n  align-items: center;\n`;\nconst StyledTabs = styled.div`\n  line-height: normal;\n  border-bottom: none;\n`;\nconst StyledSearchFieldContainer = styled.div`\n  display: flex;\n  flex-shrink: 0;\n  height: 1.85rem;\n  align-items: center;\n  padding: 0 0.75rem 0;\n  gap: 0.75rem;\n\n  input {\n    all: unset;\n    flex: 1;\n    line-height: 1.25;\n\n    &::selection {\n      color: ${({ theme }) => theme.color(\"*.selectionForeground\")};\n      background: ${({ theme }) => theme.color(\"*.selectionBackground\")};\n    }\n  }\n`;\nconst StyledSearchResultsContainer = styled.div`\n  height: 24rem;\n  flex: 1;\n  min-height: 0; // for it to properly fill the remaining height and not to exceed that\n`;\nconst StyledDivider = styled.hr`\n  all: unset;\n  height: 1px;\n  width: 100%;\n  border-bottom: 1px solid\n    ${({ theme }) => theme.color(\"SearchEverywhere.SearchField.borderColor\")};\n`;\nconst StyledSearchFieldHint = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\"SearchEverywhere.SearchField.infoForeground\")};\n  white-space: nowrap;\n`;\n\nconst StyledLoadMore = styled.div`\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"SearchEverywhere.SearchField.infoForeground\")\n    )};\n  font-size: 0.7rem;\n  min-height: 1.375rem;\n`;\n\nconst StyledPlaceholder = styled.div`\n  color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  position: absolute;\n  text-align: center;\n  width: 100%;\n  top: 50%;\n`;\nconst SEARCH_RESULT_LIMIT = 30;\n\nconst contributors = [actionsSearchContributor, filesSearchContributor];\n\nconst LOAD_MORE_ITEM = {};\nconst LOAD_MORE_ITEM_KEY = \"LOAD_MORE_ITEM_KEY\";\n\n/**\n * TODO: implement history navigation\n */\nexport function SearchEverywherePopup() {\n  const setOpen = useSetRecoilState(searchEverywhereState.isOpen);\n  const [tab, setTab] = useRecoilState(searchEverywhereState.tab);\n  const [everyWhereAutoSet, setEveryWhereAutoSet] = useState(false);\n  const [pattern, setPattern] = useState(\n    useRecoilInitialValue(searchEverywhereState.initialSearchQuery(tab))\n  );\n  const persistInitialSearchQuery = useSetRecoilState(\n    searchEverywhereState.initialSearchQuery(tab)\n  );\n\n  const getShortcut = useGetActionShortcut();\n  const [selectedKeys, setSelectedKeys] = useState<Selection>(new Set());\n  const idToContributor: Record<\n    string,\n    SearchEverywhereContributorResult<{}> &\n      Omit<SearchEverywhereContributor<{}>, \"use\">\n  > = {};\n  contributors.forEach((contributor) => {\n    idToContributor[contributor.id] = {\n      ...contributor,\n      ...contributor.use({ everyWhereAutoSet }),\n    };\n  });\n\n  const activeContributors = contributors\n    .filter((contributor) => tab === \"\" || contributor.id === tab)\n    .map(({ id }) => idToContributor[id]);\n\n  const [searchResultLimit, setSearchResultLimit] =\n    useState(SEARCH_RESULT_LIMIT);\n  const { searchResult } = useMemo(() => {\n    // TODO: sort results\n    const searchResult = activeContributors.flatMap((contributor) =>\n      contributor.search(pattern).map((item) => ({\n        key: `${contributor.id}_${contributor.getKey(item)}`,\n        contributor,\n        item,\n      }))\n    );\n    return {\n      searchResult,\n    };\n  }, [\n    pattern,\n    tab,\n    ...activeContributors.flatMap(({ searchDeps }) => searchDeps),\n  ]);\n  const currentTabContributor = idToContributor[tab];\n\n  const visibleSearchResult = useMemo(() => {\n    const visibleSearchResult = searchResult.slice(0, searchResultLimit);\n    const hasMore = searchResult.length > visibleSearchResult.length;\n    if (hasMore) {\n      visibleSearchResult.push({\n        key: LOAD_MORE_ITEM_KEY,\n        item: LOAD_MORE_ITEM,\n        contributor: null!,\n      });\n    }\n    return visibleSearchResult;\n  }, [searchResultLimit, searchResult]);\n\n  const notFoundPatternRef = useRef<string | null>(null);\n\n  const onPatternChanged = (newPattern: string) => {\n    const newPatternContainsPrevious =\n      notFoundPatternRef.current &&\n      newPattern.includes(notFoundPatternRef.current);\n    // TODO: improve isEverywhere support. It should be supported it in \"All\" tabs too.\n    if (currentTabContributor?.isEverywhere && !newPatternContainsPrevious) {\n      setEveryWhereAutoSet(false);\n    }\n    setPattern(newPattern);\n  };\n\n  useEffect(() => {\n    if (pattern) {\n      persistInitialSearchQuery(pattern);\n    }\n  }, [pattern, tab]);\n\n  useEffect(() => {\n    if (searchResult[0]) {\n      // Currently, list auto selects the first item, only in first render. But not when the collection is changed.\n      // So we make sure the first item is selected, after each search. Perhaps, List should be changed instead to\n      // react to collection changes.\n      const { key } = searchResult[0];\n      setSelectedKeys(new Set([key]));\n      selectionManagerRef.current?.setFocusedKey(key);\n\n      // A workaround for a mysterious issue that happens only in docusaurus build.\n      // The ref value is not up-to-date, when the effect runs.\n      // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n      requestAnimationFrame(() => {\n        selectionManagerRef.current?.setFocusedKey(key);\n      });\n    }\n    setSearchResultLimit(SEARCH_RESULT_LIMIT);\n  }, [searchResult]);\n\n  const localActions: ActionDefinition[] = [\n    {\n      id: SearchEverywhereActionIds.PREVIOUS_TAB,\n      title: \"Prev tab\",\n      description: \"Switch to previous tab in Search Everywhere dialog\",\n      actionPerformed: () => {\n        const currentContributorIndex = contributors.findIndex(\n          ({ id }) => tab === id\n        );\n\n        setTab(\n          tab === \"\"\n            ? contributors.slice(-1)[0].id\n            : contributors[currentContributorIndex - 1]?.id || \"\"\n        );\n      },\n    },\n    {\n      id: SearchEverywhereActionIds.NEXT_TAB,\n      title: \"Next tab\",\n      description: \"Switch to next tab in Search Everywhere dialog\",\n      actionPerformed: () => {\n        const currentContributorIndex = contributors.findIndex(\n          ({ id }) => tab === id\n        );\n        setTab(contributors[currentContributorIndex + 1]?.id || \"\");\n      },\n    },\n  ];\n  const contributorActions = contributors.flatMap(({ id, actionId, title }) => {\n    return actionId\n      ? [\n          {\n            id: actionId,\n            title: `Find ${title}`,\n            description: `Quickly go to ${title} by name`,\n            actionPerformed: () => {\n              if (tab !== id) {\n                setTab(id);\n              } else {\n                currentTabContributor?.toggleEverywhere?.();\n              }\n            },\n          },\n        ]\n      : [];\n  });\n\n  const close = () => setOpen(false);\n\n  const collectionRef = useRef<HTMLUListElement>(null);\n  const selectionManagerRef = useRef<SelectionManager>(null);\n  const { collectionSearchInputProps } = useCollectionSearchInput({\n    collectionRef,\n    selectionManager: selectionManagerRef.current,\n  });\n\n  const tips = useTips();\n\n  return (\n    <ContentAwarePopup\n      persistedBoundsState={searchEverywhereState.bounds}\n      hasContent={Boolean(pattern)}\n      noContentHeight={59}\n      minWidth={670}\n      minHeight={160}\n      interactions=\"all\"\n      onClose={close}\n    >\n      <ActionsProvider\n        actions={[\n          ...(currentTabContributor?.actions || []),\n          ...contributorActions,\n          ...localActions,\n        ]}\n      >\n        {({ shortcutHandlerProps }) => (\n          <div {...shortcutHandlerProps} style={{ height: \"inherit\" }}>\n            <Popup.Layout\n              header={\n                <>\n                  <Popup.Header hasControls>\n                    <StyledHeader>\n                      <div style={{ flex: 1 }}>\n                        <Tabs\n                          TabComponent={StyledTab}\n                          TabsComponent={StyledTabs}\n                          selectedKey={tab}\n                          onSelectionChange={(key) =>\n                            setTab(key as SearchEveryWhereTab)\n                          }\n                        >\n                          <Item key=\"\">\n                            <StyledTabContent>All</StyledTabContent>\n                          </Item>\n                          {\n                            contributors.map((contributor) => {\n                              const shortcut = getShortcut(\n                                contributor.actionId\n                              );\n                              const title = (\n                                <StyledTabContent>\n                                  {contributor.title}\n                                </StyledTabContent>\n                              );\n                              return (\n                                <Item key={contributor.id}>\n                                  {shortcut ? (\n                                    <TooltipTrigger\n                                      tooltip={<Tooltip>{shortcut}</Tooltip>}\n                                    >\n                                      {/* Span needed for tooltip to work, in the current implementation of tooltip */}\n                                      <span>{title}</span>\n                                    </TooltipTrigger>\n                                  ) : (\n                                    title\n                                  )}\n                                </Item>\n                              );\n                            }) as any /*when a static Item is rendered before this array, it wrongly complains about the type*/\n                          }\n                        </Tabs>\n                      </div>\n                      {currentTabContributor?.headerFilters}\n                      <ActionButton style={{ margin: \"0 0.5rem\" }} isDisabled>\n                        <PlatformIcon icon=\"actions/moveToLeftBottom\" />\n                      </ActionButton>\n                    </StyledHeader>\n                  </Popup.Header>\n                  <StyledSearchFieldContainer>\n                    <PlatformIcon icon=\"actions/search\" />\n                    <FocusScope contain>\n                      <Input\n                        {...collectionSearchInputProps}\n                        autoFocus\n                        onFocus={(event) => {\n                          event.target.select();\n                        }}\n                        value={pattern}\n                        onChange={(e) =>\n                          onPatternChanged(e.currentTarget.value)\n                        }\n                      />\n                    </FocusScope>\n                    <StyledSearchFieldHint>\n                      {currentTabContributor?.searchAdvertiser}\n                    </StyledSearchFieldHint>\n                  </StyledSearchFieldContainer>\n                </>\n              }\n              content={\n                <>\n                  <StyledDivider />\n                  {pattern && (\n                    <StyledSearchResultsContainer>\n                      <List\n                        ref={collectionRef}\n                        selectionManagerRef={selectionManagerRef}\n                        items={visibleSearchResult}\n                        selectionMode=\"single\"\n                        alwaysShowAsFocused\n                        shouldFocusWrap\n                        fillAvailableSpace\n                        selectedKeys={selectedKeys}\n                        onSelectionChange={setSelectedKeys}\n                        onAction={(key) => {\n                          if (key === LOAD_MORE_ITEM_KEY) {\n                            setSearchResultLimit(\n                              (limit) => limit + SEARCH_RESULT_LIMIT\n                            );\n                            const nextItem =\n                              searchResult[visibleSearchResult.length + 1];\n                            if (nextItem) {\n                              // nextItem is expected to always have value\n\n                              // Timeout needed to let the item get rendered first. Could be done in an effect instead,\n                              // if we want to avoid setTimeout\n                              setTimeout(() => {\n                                setSelectedKeys(new Set([nextItem.key]));\n                                selectionManagerRef.current?.setFocusedKey(\n                                  nextItem.key\n                                );\n                              });\n                            }\n                          } else {\n                            close();\n                            // Making sure the popup is fully closed before the new action is performed. One edge case that can\n                            // make a difference is actions like FindAction that open the same popup. By performing an action\n                            // async, we make sure the popup is closed and reopened, which is good, because otherwise, the user\n                            // won't get any feedback when choosing such actions.\n                            setTimeout(() => {\n                              const itemWrapper = searchResult.find(\n                                (item) => item.key === key\n                              );\n                              itemWrapper?.contributor.processSelectedItem(\n                                itemWrapper.item\n                              );\n                              /**\n                               * The 50ms timeout is a workaround for an issue in FocusScope:\n                               * restoreFocus only works if the previously focused element is in the dom, when the focus\n                               * scope is unmounted. In case of SearchEveryWhere, actions like \"Rollback\" open a modal\n                               * window, which has a focus scope, when the window is opened, the currently focused\n                               * element (which will be the one to restore focus to), is search everywhere dialog, which\n                               * is immediately closed. So when the modal window is closed, it tries to move focus back\n                               * to search everywhere dialog, which is long gone! It would be nice if FocusScope could\n                               * track a chain of nodes to restore focus to.\n                               * With this 50ms timeout, focus is first restored to where it was, after SearchEveryWhere\n                               * is closed, and then the actions is performed, for focus restoration to work.\n                               */\n                            }, 50);\n                          }\n                        }}\n                      >\n                        {({ key, item, contributor }) => {\n                          if (key === LOAD_MORE_ITEM_KEY) {\n                            return (\n                              <Item key={LOAD_MORE_ITEM_KEY}>\n                                <StyledLoadMore>...more</StyledLoadMore>\n                              </Item>\n                            );\n                          }\n                          return (\n                            <Item\n                              key={key}\n                              textValue={contributor.getItemText(item)}\n                            >\n                              {contributor.renderItem(item)}\n                            </Item>\n                          );\n                        }}\n                      </List>\n                      {searchResult.length === 0 && (\n                        <StyledPlaceholder>\n                          No actions with such name found\n                        </StyledPlaceholder>\n                      )}\n                    </StyledSearchResultsContainer>\n                  )}\n                </>\n              }\n              footer={\n                <Popup.Hint>\n                  {tips.current} <Link onPress={tips.next}>Next Tip</Link>\n                </Popup.Hint>\n              }\n            />\n          </div>\n        )}\n      </ActionsProvider>\n    </ContentAwarePopup>\n  );\n}\n","import {\n  Button,\n  Checkbox,\n  InputField,\n  ModalWindow,\n  styled,\n  useBalloonManager,\n  WindowLayout,\n} from \"@intellij-platform/core\";\nimport React, { FormEvent, ReactNode, useState } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { activeFileRepoBranchesState } from \"../active-file.state\";\nimport { useCreateBranch } from \"./branches.state\";\nimport { Errors } from \"isomorphic-git\";\nimport {\n  BranchNameError,\n  cleanUpBranchName,\n  validateBranchName,\n} from \"./branch-name-utils\";\n\nconst StyledContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n  padding: 1rem 0.875rem 0.25rem;\n  gap: 0.6rem;\n`;\nconst StyledCheckboxesContainer = styled.div`\n  margin-left: -0.25rem; // to align with the field. Maybe something to look into in checkbox.\n  display: flex;\n  gap: 0.75rem;\n`;\n\nconst ErrorMessages: Record<\n  BranchNameError,\n  (branchName: string) => ReactNode\n> = {\n  EXISTING: (branchName: string) => (\n    <>\n      Branch name {branchName} already exists. <br />\n      Change the name or overwrite existing branch\n    </>\n  ),\n  CLASHING_WITH_REMOTE: (branchName: string) => (\n    <>\n      Branch name {branchName} clashes with remote branch <br />\n      with the same name\n    </>\n  ),\n};\n\nexport function CreateNewBranchWindow({ close }: { close: () => void }) {\n  const [checkout, setCheckout] = useState(true);\n  const [overwrite, setOverwrite] = useState(false);\n  const branches = useRecoilValue(activeFileRepoBranchesState);\n  const [isErrorVisible, setIsErrorVisible] = useState(false);\n  const balloonManager = useBalloonManager();\n  const createBranch = useCreateBranch();\n  const currentBranchName = branches.currentBranch?.name;\n  const [branchName, setBranchName] = useState(currentBranchName || \"\");\n\n  const error = validateBranchName(branches, branchName);\n  const isValid = !error || (error === \"EXISTING\" && overwrite);\n  const validationState = !isValid && isErrorVisible ? \"invalid\" : \"valid\";\n\n  const create = () => {\n    if (isValid) {\n      createBranch(branches.repoRoot, branchName, checkout)\n        .catch((e) => {\n          if (e instanceof Errors.AlreadyExistsError) {\n            balloonManager.show({\n              icon: \"Error\",\n              title: \"Unimplemented action\",\n              body: \"Overwrite option is currently not supported.\", // TODO,\n            });\n          } else {\n            balloonManager.show({\n              icon: \"Error\",\n              title: \"Unexpected error\",\n              body: `Could not create branch ${branchName}.`,\n            });\n          }\n          console.error(\"Branch creation error: \", e);\n        })\n        .then(() => {\n          close();\n          // TODO: show toolwindow balloon, when/if git toolwindow is added\n        });\n    } else {\n      setIsErrorVisible(true);\n    }\n  };\n\n  return (\n    <ModalWindow minWidth=\"content\" minHeight=\"content\">\n      <WindowLayout\n        header=\"Create New Branch\"\n        content={\n          <StyledContainer\n            id=\"create_branch_form\"\n            as=\"form\"\n            onSubmit={(e: FormEvent) => {\n              e.preventDefault();\n              create();\n            }}\n          >\n            <InputField\n              autoFocus\n              autoSelect\n              value={branchName}\n              onChange={(newValue) => {\n                setBranchName(cleanUpBranchName(newValue));\n                setIsErrorVisible(true);\n              }}\n              validationState={validationState}\n              errorMessage={\n                validationState === \"invalid\" &&\n                error &&\n                ErrorMessages[error](branchName)\n              }\n              label=\"New branch name:\"\n              labelPlacement=\"above\"\n            />\n            <StyledCheckboxesContainer>\n              <Checkbox isSelected={checkout} onChange={setCheckout}>\n                Checkout branch\n              </Checkbox>\n              <Checkbox\n                isSelected={overwrite}\n                isDisabled={!isErrorVisible || error !== \"EXISTING\"}\n                onChange={setOverwrite}\n              >\n                Overwrite existing branch\n              </Checkbox>\n            </StyledCheckboxesContainer>\n          </StyledContainer>\n        }\n        footer={\n          <WindowLayout.Footer\n            right={\n              <>\n                <Button onPress={close}>Cancel</Button>\n                <Button\n                  variant=\"default\"\n                  type=\"submit\"\n                  form=\"create_branch_form\" // Using form in absence of built-in support for default button\n                  isDisabled={validationState === \"invalid\"}\n                >\n                  Create\n                </Button>\n              </>\n            }\n          />\n        }\n      />\n    </ModalWindow>\n  );\n}\n","import React, { CSSProperties, RefObject } from \"react\";\nimport { useRecoilState, useRecoilValue } from \"recoil\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n  DefaultToolWindows,\n  styled,\n  ToolWindowRefValue,\n  useBalloonManager,\n} from \"@intellij-platform/core\";\nimport { FileEditor } from \"../Editor/FileEditor\";\nimport { useInitializeVcs } from \"../VersionControl/file-status.state\";\nimport { toolWindows } from \"./toolWindows\";\nimport { useInitializeChanges } from \"../VersionControl/Changes/change-lists.state\";\nimport { IdeStatusBar } from \"../StatusBar/IdeStatusBar\";\nimport { usePersistenceFsNotification } from \"../usePersistenceFsNotification\";\nimport { RollbackWindow } from \"../VersionControl/Changes/Rollback/RollbackWindow\";\nimport { rollbackViewState } from \"../VersionControl/Changes/Rollback/rollbackView.state\";\nimport { toolWindowsState } from \"./toolWindows.state\";\nimport { SearchEverywherePopup } from \"../SearchEverywhere/SearchEverywherePopup\";\nimport { useProjectActions } from \"./useProjectActions\";\nimport { searchEverywhereState } from \"../SearchEverywhere/searchEverywhere.state\";\nimport { useVcsActions } from \"../VersionControl/useVcsActions\";\nimport { _balloonManagerRef } from \"./notImplemented\";\nimport { PersistentStateProvider } from \"./persistence/PersistentStateProvider\";\n\nconst StyledWindowFrame = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n  min-height: 0;\n`;\n\nexport const Project = ({\n  height,\n  toolWindowRef,\n}: {\n  height: CSSProperties[\"height\"];\n  toolWindowRef: RefObject<ToolWindowRefValue>;\n}) => {\n  const [state, setState] = useRecoilState(toolWindowsState);\n  const isRollbackWindowOpen = useRecoilValue(rollbackViewState.isOpen);\n  const isSearchEveryWhereOpen = useRecoilValue(searchEverywhereState.isOpen);\n\n  useInitializeVcs();\n  useInitializeChanges();\n  usePersistenceFsNotification();\n  _balloonManagerRef.value = useBalloonManager();\n\n  const allActions: ActionDefinition[] = [\n    ...useProjectActions(),\n    ...useVcsActions(),\n  ];\n\n  return (\n    <PersistentStateProvider>\n      <StyledWindowFrame style={{ height }}>\n        <ActionsProvider\n          actions={allActions}\n          useCapture /* useCapture because of Monaco's aggressive event handling. Specifically, Cmd+Shift+O in .ts files  */\n        >\n          {({ shortcutHandlerProps }) => (\n            <>\n              <DefaultToolWindows\n                ref={toolWindowRef}\n                toolWindowsState={state}\n                onToolWindowStateChange={(newState) => {\n                  setState(newState);\n                }}\n                windows={toolWindows}\n                containerProps={shortcutHandlerProps}\n                // To make it not annoying when the whole app is a part of a bigger page. It's fine to disable focus trap,\n                // because the focusable element, the editor, fills the whole main content.\n                allowBlurOnInteractionOutside\n              >\n                <FileEditor />\n              </DefaultToolWindows>\n              <IdeStatusBar />\n            </>\n          )}\n        </ActionsProvider>\n\n        {isSearchEveryWhereOpen && <SearchEverywherePopup />}\n        {isRollbackWindowOpen && <RollbackWindow />}\n      </StyledWindowFrame>\n    </PersistentStateProvider>\n  );\n};\n","import React, { FocusEventHandler, useContext, useRef } from \"react\";\nimport { useModal, useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { focusSafely, FocusScope } from \"@react-aria/focus\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { AriaDialogProps } from \"@react-types/dialog\"; // temporary phantom dependency\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { WindowContext } from \"@intellij-platform/core/ModalWindow/WindowContext\";\nimport { UNSAFE_React17SuspenseFix } from \"@intellij-platform/core/Overlay/UNSAFE_React17SuspenseFix\";\n\nexport interface ModalWindowProps\n  extends AriaDialogProps,\n    ResizableMovableOverlayOptions {\n  children: React.ReactNode;\n  onClose?: () => void;\n}\n\nconst StyledWindowUnderlay = styled.div`\n  position: fixed;\n  z-index: 1000; // FIXME: z-index should not be hard-coded like this\n  inset: 0;\n`;\nconst StyledWindowContainer = styled.div`\n  position: fixed;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  border-radius: 8px;\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n  outline: 1px solid #555; // FIXME\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledWindowInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DEFAULT_WINDOW_MIN_WIDTH = 50;\nexport const DEFAULT_WINDOW_MIN_HEIGHT = 24;\n\nexport const WindowControllerContext = React.createContext<\n  Partial<Pick<ModalWindowProps, \"onClose\">>\n>({});\n\n/**\n * A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\n * In the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\n * are not relevant here since they wouldn't be os-native windows. A close button is still relevant (and kind of\n * necessary) and will be added in next iterations.\n *\n * The content container doesn't come with any padding. Other related components should be used for common layouts in\n * modal windows.\n * Example use cases: Window for git operations such as push, update, revert, new branch, etc.\n *\n * ![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n *\n * NOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\n * overlay container could be extracted into a component which is then used to create custom resizable/movable overlay\n * dialogs, like \"Branches\", or \"Search Everywhere\".\n *\n * TODO: show close button (maybe os-aware styles?)\n *\n */\nexport const ModalWindow = ({\n  interactions = \"all\",\n  minWidth = DEFAULT_WINDOW_MIN_WIDTH,\n  minHeight = DEFAULT_WINDOW_MIN_HEIGHT,\n  ...props\n}: ModalWindowProps): React.ReactElement => {\n  const { children } = props;\n  const propsContext = useContext(WindowControllerContext);\n  const onClose = () => {\n    propsContext.onClose?.();\n    props.onClose?.();\n  };\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      isOpen: true, // maybe allow rendering closed window? :-?\n      onClose,\n      isDismissable: false,\n      isKeyboardDismissDisabled: false,\n      shouldCloseOnBlur: false,\n    },\n    ref\n  );\n  usePreventScroll();\n  const { modalProps } = useModal();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  const {\n    bounds: style,\n    overlayInteractionHandlerProps,\n    UNSAFE_measureContentSize,\n  } = useResizableMovableOverlay(ref, { ...props, minHeight, minWidth });\n\n  const { focusContainmentFixProps } = useFocusContainmentFix();\n\n  return (\n    <StyledWindowUnderlay {...underlayProps}>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        <FocusScope contain restoreFocus autoFocus>\n          <StyledWindowContainer\n            {...mergeProps(\n              overlayProps,\n              dialogProps,\n              modalProps,\n              focusContainmentFixProps,\n              { style }\n            )}\n            ref={ref}\n          >\n            <StyledWindowInnerContainer>\n              <WindowContext.Provider\n                value={{\n                  isActive: true, // because it's modal. WindowContext would be used for non-modal windows too, in future\n                  titleProps,\n                  movable: interactions !== \"none\",\n                }}\n              >\n                <UNSAFE_React17SuspenseFix\n                  measureContentSize={UNSAFE_measureContentSize}\n                >\n                  {children}\n                </UNSAFE_React17SuspenseFix>\n              </WindowContext.Provider>\n            </StyledWindowInnerContainer>\n            {interactions === \"all\" && <OverlayResizeHandles />}\n          </StyledWindowContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </StyledWindowUnderlay>\n  );\n};\n\n/**\n * The way FocusScope is implemented at the moment, it's possible for another focus scope to steal the focus,\n * right after the modal window is opened. The issue is not tracked down to the root cause. But with this hook,\n * we make sure there is no way for focus to go out of the modal window, when it's mounted.\n */\nfunction useFocusContainmentFix<T extends HTMLElement>() {\n  const lastFocusedElementRef = useRef<HTMLElement | null>(null);\n  const onFocus: FocusEventHandler<T> = (e) => {\n    lastFocusedElementRef.current = e.target;\n  };\n  const onBlur: FocusEventHandler = (e) => {\n    const probablyFocusedElement = e.relatedTarget;\n    if (\n      !probablyFocusedElement ||\n      (probablyFocusedElement instanceof Element &&\n        !e.currentTarget.contains(probablyFocusedElement))\n    ) {\n      const elementToFocus = lastFocusedElementRef.current;\n      if (elementToFocus) {\n        focusSafely(elementToFocus);\n      }\n    }\n  };\n  return {\n    focusContainmentFixProps: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { WindowContext } from \"./WindowContext\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 20px;\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\n/**\n * Implements appearance of Window header, and also acts as a handle for moving the window.\n * Expected to be used with {@link WindowLayout}:\n *\n * @example\n * ```tsx\n * <ModalWindow>\n *    <WindowLayout header={<WindowHeader>header</WindowHeader>} />\n * </ModalWindow>\n * ```\n */\nexport const WindowHeader = ({ children }: { children?: React.ReactNode }) => {\n  const { movable, titleProps } = useContext(WindowContext);\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {children || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderTitle()\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nexport function WindowFooter({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer. {@link Button}s are usually used inside the right content\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>{right}</StyledFooterSide>\n    </StyledFooter>\n  );\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { WindowHeader } from \"./WindowHeader\";\nimport { WindowFooter } from \"@intellij-platform/core/ModalWindow/WindowFooter\";\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\n/**\n * Window content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function WindowLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the window at the top. Use {@link WindowLayout.Header} for the default window header,\n   * which also acts as a move handle for the window. If a string is passed, it will be wrapped by\n   * {@link WindowLayout.Header} automatically.\n   */\n  header: React.ReactNode;\n  /**\n   * Scrollable content of the window.\n   */\n  content: React.ReactNode;\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `content`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <>\n      {header &&\n        (typeof header === \"string\" ? (\n          <WindowHeader>{header}</WindowHeader>\n        ) : (\n          header\n        ))}\n      <StyledWindowContentWrapper>{content}</StyledWindowContentWrapper>\n      {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n    </>\n  );\n}\n\n// Just for improved discoverability. Might as well export WindowFooter and WindowHeader instead.\nWindowLayout.Footer = WindowFooter;\nWindowLayout.Header = WindowHeader;\n"],"names":[],"sourceRoot":""}