{"version":3,"file":"theme-stories.b2d51085.iframe.bundle.js","mappings":";AA8DA;;AAIA;;;;;;;;;;AC7CA;;;;;;AAQA;;;;;;;AAOA;AAKA;;;;AASA;AACA;;AAMA;;;AAGA;;;AAKA;;;;AAMA;;;;;;;AASA;;;;AAMA;AACA;;;;;;AAQA;;;;;;;;;AAWA;;;;;AAKA;;AAIA;;;;;AAOA;;;;;AAOA;;;AAGA;;;;AAIA;;;AAGA;;;;;;;;;AClIA;AAEA;;AAOA;AAIA;AAEA;;;;;;;;;;;;;;;AAqBA;;AAGA;;AAWA;AACA;AAEA;AAEA;;;AAIA;;AAKA;;;;;;;;;;;ACmBA;;AAIA;AAWA;;;;;;;;;AAiBA;;;;ACvHA;AAQA;;AAEA;;AAGA;AAGA;;;;AAhBA;AAuCA;;;;;;;;;;;;;;;;AC3BA;;;AAdA;;;;;AA0BA;;;;AAaA;;;;;;AAeA;;;;;;;AAcA;;;;;AC/DA;;ACsJA;;AAIA;;;AAOA;;;;;AAKA;AACA;AAGA;;;;AAMA;AACA;;;;;;AAQA;;;;;;;;;;AAUA;AAKA;;;AAKA;AACA;AACA;;;AAGA;;AAIA;;;;;;;AAcA;;AAEA;AAcA;;;;;;;;;;;ACnNA;AAKA;;AAMA;;;;;AAOA;;;;AAMA;;AAGA;;;;;;;ACjBA;;;;AAOA;AAKA;;;AAOA;AAKA;;AAQA;AACA;;ACtEA;;;ACgBA;;ACxBA;;;;;AC4FA;AACA","sources":["webpack://@intellij-platform/core/./src/theme.stories.tsx","webpack://@intellij-platform/core/./src/Balloon/Balloon.styled.tsx","webpack://@intellij-platform/core/./src/Button/StyledButton.tsx","webpack://@intellij-platform/core/./src/Checkbox/Checkbox.tsx","webpack://@intellij-platform/core/./src/Collections/ItemLayout.tsx","webpack://@intellij-platform/core/./src/Link/StyledLink.tsx","webpack://@intellij-platform/core/./src/CollectionSpeedSearch/CollectionSpeedSearchContainer.tsx","webpack://@intellij-platform/core/./src/ProgressBar/ProgressBar.tsx","webpack://@intellij-platform/core/./src/StatusBar/StatusBar.tsx","webpack://@intellij-platform/core/./src/StatusBar/StatusBarWidget.tsx","webpack://@intellij-platform/core/./src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://@intellij-platform/core/./src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://@intellij-platform/core/./src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://@intellij-platform/core/./src/ToolWindows/stories/components/FakeExecution.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useState } from \"react\";\nimport { indexBy, map } from \"ramda\";\nimport { Meta, StoryFn } from \"@storybook/react\";\nimport {\n  IconButton,\n  ActionHelpTooltip,\n  ActionTooltip,\n  AutoHoverPlatformIcon,\n  Balloon,\n  BalloonActionLink,\n  Checkbox,\n  DefaultToolWindow,\n  Divider,\n  HelpTooltip,\n  HighlightedTextValue,\n  Input,\n  InputField,\n  Item,\n  ItemLayout,\n  Menu,\n  MenuItemLayout,\n  MultiViewToolWindow,\n  PlatformIcon,\n  ProgressBar,\n  ProgressBarPauseButton,\n  SpeedSearchList,\n  SpeedSearchTree,\n  StatusBar,\n  StatusBarWidget,\n  styled,\n  StyledDefaultTab,\n  StyledDefaultTabs,\n  StyledIconLiveIndicator,\n  TabCloseButton,\n  ThreeViewSplitter,\n  ToolWindows,\n  ToolWindowsState,\n  toolWindowState,\n  ToolWindowTabContent,\n  ValidationTooltip,\n} from \"@intellij-platform/core\";\nimport {\n  FakeExecutionToolbar,\n  VerticalFlexContainer,\n} from \"./ToolWindows/stories/components/FakeExecution\";\nimport { StyledEditorTab } from \"./Tabs/EditorTabs/StyledEditorTab\";\nimport { StyledToolWindowTab } from \"./Tabs/ToolWindowTabs/StyledToolWindowTab\";\nimport { StyledDebuggerTab } from \"./Tabs/DebuggerTabs/StyledDebuggerTab\";\nimport { StyledEditorTabs } from \"./Tabs/EditorTabs/StyledEditorTabs\";\nimport { StyledToolWindowTabs } from \"./Tabs/ToolWindowTabs/StyledToolWindowTabs\";\nimport { StyledButton, StyledDefaultButton } from \"./Button/StyledButton\";\nimport { StyledLink } from \"./Link/StyledLink\";\n\nexport default {\n  title: \"Demos/Theme\",\n  parameters: {\n    layout: \"fullscreen\",\n  },\n} as Meta;\n\nconst RunConsoleOutput = styled.div`\n  background: ${({ theme }) => (theme.dark ? \"#2b2b2b\" : \"#fff\")};\n  flex: 1;\n`;\n\nexport const Theme: StoryFn = () => {\n  const speedSearchTree = (\n    <>\n      <DefaultToolWindow\n        headerContent=\"SpeedSearchTree\"\n        additionalActions={\n          <>\n            <IconButton>\n              <PlatformIcon icon=\"actions/expandall\" />\n            </IconButton>\n          </>\n        }\n      >\n        <SpeedSearchTree\n          selectionMode=\"multiple\"\n          defaultExpandedKeys={[\"project\", \"src\", \"src/app\"]}\n          defaultSelectedKeys={[\"App.jsx\"]}\n        >\n          <Item\n            key=\"project\"\n            textValue=\"jui\"\n            title={\n              <ItemLayout>\n                <PlatformIcon icon=\"nodes/folder\" />\n                <HighlightedTextValue />\n                <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n              </ItemLayout>\n            }\n          >\n            <Item\n              key=\"src\"\n              textValue=\"src\"\n              title={\n                <ItemLayout>\n                  <PlatformIcon icon=\"nodes/folder\" />\n                  <HighlightedTextValue />\n                </ItemLayout>\n              }\n            >\n              <Item\n                key=\"src/app\"\n                textValue=\"app\"\n                title={\n                  <ItemLayout>\n                    <PlatformIcon icon=\"nodes/folder\" />\n                    <HighlightedTextValue />\n                  </ItemLayout>\n                }\n              >\n                <Item textValue=\"App.jsx\" key=\"App.jsx\">\n                  <ItemLayout>\n                    <PlatformIcon icon=\"fileTypes/javaScript\" />\n                    <HighlightedTextValue />\n                  </ItemLayout>\n                </Item>\n              </Item>\n              <Item textValue=\"index.jsx\" key=\"index.jsx\">\n                <ItemLayout>\n                  <PlatformIcon icon=\"fileTypes/javaScript\" />\n                  <HighlightedTextValue />\n                </ItemLayout>\n              </Item>\n            </Item>\n          </Item>\n        </SpeedSearchTree>\n        <br />\n        <SpeedSearchTree\n          defaultSelectedKeys={[\"index.jsx\"]}\n          selectionMode=\"multiple\"\n          showAsFocused\n        >\n          <Item textValue=\"index.jsx\" key=\"index.jsx\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/javaScript\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n        </SpeedSearchTree>\n      </DefaultToolWindow>\n    </>\n  );\n  const speedSearchList = (\n    <>\n      <DefaultToolWindow headerContent=\"SpeedSearchList\">\n        <SpeedSearchList selectionMode=\"single\">\n          <Item textValue=\".gitignore\" key=\".gitignore\">\n            <ItemLayout>\n              <PlatformIcon icon=\"vcs/ignore_file\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n          <Item textValue=\"Archive\" key=\"Archive\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/archive\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n          <Item textValue=\"JavaScript\" key=\"JavaScript\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/javaScript\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n          <Item textValue=\"JSON\" key=\"JSON\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/json\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n          <Item textValue=\"HTML\" key=\"HTML\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/html\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n          <Item textValue=\"YAML\" key=\"YAML\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/yaml\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n        </SpeedSearchList>\n        <br />\n        <SpeedSearchList selectionMode=\"single\" showAsFocused>\n          <Item textValue=\".gitignore\" key=\".gitignore\">\n            <ItemLayout>\n              <PlatformIcon icon=\"vcs/ignore_file\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n          <Item textValue=\"Archive\" key=\"Archive\">\n            <ItemLayout>\n              <PlatformIcon icon=\"fileTypes/archive\" />\n              <HighlightedTextValue />\n            </ItemLayout>\n          </Item>\n        </SpeedSearchList>\n      </DefaultToolWindow>\n    </>\n  );\n  const multiViewToolWindow = (\n    <>\n      <MultiViewToolWindow\n        defaultActiveKey=\"e2\"\n        headerContent={({ renderedViewSwitcher }) => {\n          return <>{renderedViewSwitcher}</>;\n        }}\n      >\n        <MultiViewToolWindow.View\n          key={\"e1\"}\n          tabContent={\n            <ToolWindowTabContent\n              title=\"start\"\n              icon={\n                <PlatformIcon icon=\"runConfigurations/application\">\n                  <StyledIconLiveIndicator />\n                </PlatformIcon>\n              }\n              closeButton={<TabCloseButton />}\n            />\n          }\n        >\n          <VerticalFlexContainer>\n            <FakeExecutionToolbar\n              execution={{ id: \"foo\", title: \"Foo\", isRunning: true }}\n              toggle={() => {}}\n            />\n            <RunConsoleOutput />\n          </VerticalFlexContainer>\n        </MultiViewToolWindow.View>\n        <MultiViewToolWindow.View\n          key={\"e2\"}\n          tabContent={\n            <ToolWindowTabContent\n              title=\"test\"\n              icon={<PlatformIcon icon=\"expui/fileTypes/jest\" />}\n              closeButton={<TabCloseButton />}\n            />\n          }\n        >\n          <ThreeViewSplitter\n            firstView={\n              <VerticalFlexContainer>\n                <FakeExecutionToolbar\n                  execution={{\n                    id: \"foo\",\n                    title: \"Foo\",\n                    isRunning: false,\n                  }}\n                  toggle={() => {}}\n                />\n                <SpeedSearchTree\n                  selectionMode=\"single\"\n                  defaultExpandedKeys={[\"root\", \"specFile\", \"spec\"]}\n                >\n                  <Item\n                    key=\"root\"\n                    textValue=\"Text Results\"\n                    title={\n                      <ItemLayout>\n                        <PlatformIcon icon=\"runConfigurations/testPassed.svg\" />\n                        <HighlightedTextValue />\n                      </ItemLayout>\n                    }\n                  >\n                    <Item\n                      key=\"specFile\"\n                      textValue=\"Theme.spec.ts\"\n                      title={\n                        <ItemLayout>\n                          <PlatformIcon icon=\"runConfigurations/testPassed.svg\" />\n                          <HighlightedTextValue />\n                        </ItemLayout>\n                      }\n                    >\n                      <Item\n                        key=\"spec\"\n                        textValue=\"Theme\"\n                        title={\n                          <ItemLayout>\n                            <PlatformIcon icon=\"runConfigurations/testPassed.svg\" />\n                            <HighlightedTextValue />\n                          </ItemLayout>\n                        }\n                      >\n                        <Item\n                          key=\"c1\"\n                          textValue=\"resolves os-dependent values based on os\"\n                        >\n                          <ItemLayout>\n                            <PlatformIcon icon=\"runConfigurations/testPassed.svg\" />\n                            <HighlightedTextValue />\n                          </ItemLayout>\n                        </Item>\n                        <Item\n                          key=\"c2\"\n                          textValue=\"resolves os-dependent values to default when os doesn't match\"\n                        >\n                          <ItemLayout>\n                            <PlatformIcon icon=\"runConfigurations/testPassed.svg\" />\n                            <HighlightedTextValue />\n                            {/* TODO: add test times (sticky on the right) when the component is implemented */}\n                          </ItemLayout>\n                        </Item>\n                      </Item>\n                    </Item>\n                  </Item>\n                </SpeedSearchTree>\n              </VerticalFlexContainer>\n            }\n            innerView={\n              <VerticalFlexContainer>\n                <RunConsoleOutput />\n              </VerticalFlexContainer>\n            }\n          />\n        </MultiViewToolWindow.View>\n      </MultiViewToolWindow>\n    </>\n  );\n  const toolWindows = [\n    {\n      id: \"SpeedSearchTree\",\n      initialState: toolWindowState({ anchor: \"left\", isVisible: true }),\n      toolbarButton: (\n        <>\n          <PlatformIcon icon=\"toolwindows/toolWindowProject\" />\n          &nbsp; SpeedSearchTree\n        </>\n      ),\n      content: speedSearchTree,\n    },\n    {\n      id: \"SpeedSearchList\",\n      initialState: toolWindowState({\n        anchor: \"left\",\n        isSplit: true,\n        isVisible: true,\n      }),\n      toolbarButton: (\n        <>\n          <PlatformIcon icon=\"toolwindows/toolWindowCommit\" />\n          &nbsp; SpeedSearchList\n        </>\n      ),\n      content: speedSearchList,\n    },\n    {\n      id: \"MultiViewToolWindow\",\n      initialState: toolWindowState({ anchor: \"bottom\", isVisible: true }),\n      toolbarButton: (\n        <>\n          <PlatformIcon icon=\"toolwindows/toolWindowRun\">\n            <StyledIconLiveIndicator />\n          </PlatformIcon>\n          &nbsp; MultiViewToolWindow\n        </>\n      ),\n      content: multiViewToolWindow,\n    },\n  ];\n  const toolWindowById = indexBy(({ id }) => id, toolWindows);\n\n  const [toolWindowsState, setToolWindowsState] = useState(\n    () =>\n      new ToolWindowsState(\n        map(({ initialState }) => initialState, toolWindowById)\n      )\n  );\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        display: \"flex\",\n        flexDirection: \"column\",\n      }}\n    >\n      <ToolWindows\n        toolWindowsState={toolWindowsState}\n        onToolWindowStateChange={setToolWindowsState}\n        windows={toolWindows}\n      >\n        <div style={{ padding: 8 }}>\n          <StyledDefaultTabs>\n            <StyledDefaultTab>Default tabs</StyledDefaultTab>\n            <StyledDefaultTab selected>selected</StyledDefaultTab>\n            <StyledDefaultTab disabled>disabled</StyledDefaultTab>\n            <StyledDefaultTab className=\"hover\">hovered</StyledDefaultTab>\n            <StyledDefaultTab className=\"hover\" active>\n              hovered active\n            </StyledDefaultTab>\n            <StyledDefaultTab selected active>\n              selected active\n            </StyledDefaultTab>\n          </StyledDefaultTabs>\n\n          <StyledEditorTabs>\n            <StyledEditorTab>Editor tabs</StyledEditorTab>\n            <StyledEditorTab selected>selected</StyledEditorTab>\n            <StyledEditorTab disabled>disabled</StyledEditorTab>\n            <StyledEditorTab className=\"hover\">hovered</StyledEditorTab>\n            <StyledEditorTab className=\"hover\" active>\n              hovered active\n            </StyledEditorTab>\n            <StyledEditorTab selected active>\n              selected active\n            </StyledEditorTab>\n          </StyledEditorTabs>\n\n          <StyledToolWindowTabs>\n            <StyledToolWindowTab>ToolWindow tabs</StyledToolWindowTab>\n            <StyledToolWindowTab selected>selected</StyledToolWindowTab>\n            <StyledToolWindowTab disabled>disabled</StyledToolWindowTab>\n            <StyledToolWindowTab className=\"hover\">hovered</StyledToolWindowTab>\n            <StyledToolWindowTab className=\"hover\" active>\n              hovered active\n            </StyledToolWindowTab>\n            <StyledToolWindowTab selected active>\n              selected active\n            </StyledToolWindowTab>\n          </StyledToolWindowTabs>\n\n          <StyledDefaultTabs>\n            <StyledDebuggerTab>Debugger tabs</StyledDebuggerTab>\n            <StyledDebuggerTab selected>selected</StyledDebuggerTab>\n            <StyledDebuggerTab disabled>disabled</StyledDebuggerTab>\n            <StyledDebuggerTab className=\"hover\">hovered</StyledDebuggerTab>\n            <StyledDebuggerTab className=\"hover\" active>\n              hovered active\n            </StyledDebuggerTab>\n            <StyledDebuggerTab selected active>\n              selected active\n            </StyledDebuggerTab>\n          </StyledDefaultTabs>\n          <br />\n          <Balloon\n            title=\"Maven Projects need to be imported\"\n            body=\"Projects to be imported: MavenSync, MavenDependencies. Maven project structure has been changed. Import changes to IntelliJ IDEA project to make it work correctly. Otherwise, code analysis, completion and other features might work incorrectly.\"\n            actions={\n              <>\n                <BalloonActionLink>Import changes</BalloonActionLink>\n                <BalloonActionLink>Enable auto-import</BalloonActionLink>\n              </>\n            }\n            onClose={() => {}}\n            headerActions={\n              <AutoHoverPlatformIcon\n                icon=\"ide/notification/gear\"\n                role=\"button\"\n              />\n            }\n          />\n          <br />\n          <div style={{ display: \"flex\", gap: 8 }}>\n            <StyledButton>Button</StyledButton>\n            <StyledButton className=\"focus\">Focused Button</StyledButton>\n            <StyledButton disabled>Disabled Button</StyledButton>\n            <StyledDefaultButton>Default Button</StyledDefaultButton>\n            <StyledDefaultButton className=\"focus\">\n              Focused Default Button\n            </StyledDefaultButton>\n            <StyledDefaultButton disabled>\n              Disabled Default Button\n            </StyledDefaultButton>\n          </div>\n          <br />\n          <div style={{ display: \"flex\", gap: 8 }}>\n            <Checkbox>Checkbox</Checkbox>\n            <Checkbox isIndeterminate>Indeterminate Checkbox</Checkbox>\n            <Checkbox isSelected>Selected Checkbox</Checkbox>\n            <Checkbox isDisabled>Disabled Checkbox</Checkbox>\n          </div>\n          <br />\n          <div style={{ display: \"flex\", gap: 8 }}>\n            <StyledLink>Link</StyledLink>\n            <StyledLink className=\"active\">active</StyledLink>\n            <StyledLink className=\"disabled\">disabled</StyledLink>\n            <StyledLink className=\"hover\">hover</StyledLink>\n            <StyledLink className=\"visited\">visited</StyledLink>\n          </div>\n          <br />\n          <div style={{ display: \"flex\", alignItems: \"center\", gap: 10 }}>\n            <div>\n              <Menu\n                disabledKeys={[\"jumpToExternalEditor\"]}\n                selectedKeys={[\"Reformat Code\"]}\n                aria-label=\"Dummy menu\"\n                autoFocus\n              >\n                <Item textValue=\"Copy\" key=\"copy\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/copy\"} />}\n                    content=\"Copy\"\n                    shortcut={\"⌘C\"}\n                  />\n                </Item>\n                <Divider />\n                <Item key=\"Reformat Code\">Reformat Code</Item>\n                <Item textValue=\"Optimize Imports\">\n                  <MenuItemLayout content=\"Optimize Imports\" shortcut={\"⌃⌥O\"} />\n                </Item>\n                <Divider />\n                <Item textValue=\"Compare with...\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/diff\"} />}\n                    content=\"Compare with...\"\n                  />\n                </Item>\n                <Divider />\n                <Item\n                  key=\"jumpToExternalEditor\"\n                  textValue=\"Jump to external editor\"\n                >\n                  <MenuItemLayout\n                    content=\"Jump to external editor\"\n                    shortcut={\"⌥⌘F4\"}\n                  />\n                </Item>\n              </Menu>\n            </div>\n            <div style={{ width: 300 }}>\n              <ProgressBar\n                value={50}\n                maxValue={100}\n                name=\"Progress Bar\"\n                details=\"Details\"\n                button={\n                  <ProgressBarPauseButton paused onPausedChange={() => {}} />\n                }\n              />\n            </div>\n            <VerticalFlexContainer style={{ gap: \"0.5rem\" }}>\n              <ValidationTooltip>Error validation tooltip</ValidationTooltip>\n              <ValidationTooltip type=\"warning\">\n                Warning validation tooltip\n              </ValidationTooltip>\n              <ActionTooltip actionName=\"Action tooltip\" shortcut=\"⌘K\" />\n              <HelpTooltip helpText=\"Help tooltip\" />\n              <ActionHelpTooltip\n                actionName=\"Action help tooltip\"\n                helpText=\"Help text\"\n              />\n            </VerticalFlexContainer>\n          </div>\n          {/* Not rendering indeterminate because of it's animation*/}\n        </div>\n        <div style={{ display: \"flex\", gap: \"1rem\" }}>\n          <InputField label=\"InputField\" placeholder=\"Placeholder\" />\n          <InputField\n            label=\"InputField (invalid)\"\n            placeholder=\"Placeholder\"\n            validationState=\"error\"\n          />\n          <Input placeholder=\"Input\" />\n          <Input placeholder=\"Input (invalid)\" validationState=\"error\" />\n        </div>\n      </ToolWindows>\n      <StatusBar\n        left={\n          <>\n            <PlatformIcon icon=\"general/tbHidden.svg\" />\n            <span style={{ marginLeft: \"0.75rem\" }}>\n              Workspace associated with branch 'feat/balloon-provider' has been\n              restored // Rollback Configure...\n            </span>\n          </>\n        }\n        right={\n          <>\n            <StatusBarWidget label=\"LF\" />\n            <StatusBarWidget label=\"UTF-8\" />\n            <StatusBarWidget\n              icon={<PlatformIcon icon=\"vcs/branch.svg\" />}\n              label=\"feat/StatusBar\"\n            />\n            <StatusBarWidget icon={<PlatformIcon icon=\"ide/readwrite.svg\" />} />\n            <StatusBarWidget\n              icon={<PlatformIcon icon=\"ide/fatalError.svg\" />}\n            />\n          </>\n        }\n      />\n    </div>\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nconst CORNER_RADIUS = 12; // it used to be 8. After introduction of Notifications tool window, it's 12\n\nconst bgColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Notification.background\",\n    !theme.dark ? \"rgb(242,242,242)\" : \"#4E5052\"\n  );\n\nexport const StyledHeaderActions = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  background: inherit;\n  padding: 0.375rem 0.5rem 0;\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: 100%;\n    background: linear-gradient(90deg, transparent, ${bgColor});\n    width: 20px;\n    height: 100%;\n    z-index: 1;\n    top: 0;\n  }\n`;\n\nexport const StyledBalloonContainer = styled.div`\n  line-height: 1.2;\n  box-sizing: border-box;\n  overflow: hidden; // header actions overflows a little at the top right rounded corner\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); // shadow doesn't seem to be themed\n  padding: 0.5rem 0;\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"Notification.borderColor\",\n        !theme.dark ? \"#B2B2B2CD\" : \"#565A5CCD\"\n      )};\n  border-radius: ${({ theme }) =>\n    `${\n      (theme.value<number>(\n        \"Notification.arc\" as UnknownThemeProp<\"Notification.arc\">\n      ) ?? CORNER_RADIUS) / 2\n    }px`};\n  //display: inline-flex;\n  width: 23.3125rem;\n  position: relative;\n  background-color: ${bgColor};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Notification.foreground\",\n      !theme.dark ? \"#000\" : \"rgb(191,191,191)\"\n    )};\n\n  ${StyledHeaderActions} {\n    display: none;\n  }\n  &:hover ${StyledHeaderActions} {\n    display: initial;\n  }\n`;\n\nexport const StyledIconContainer = styled.span`\n  position: absolute;\n  left: 0.75rem;\n  top: 0.5rem;\n`;\n\nexport const StyledBalloonHeader = styled.div`\n  line-height: 1rem;\n  font-weight: bold;\n  margin: 0 2.125rem 0.25rem;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; // this is not the case in original impl, but it's a clear improvement\n`;\n\nexport const StyledBalloonBody = styled.div<{\n  lineClamp: number | false;\n}>`\n  margin: 0 2.125rem 0 2.125rem;\n  line-height: 1rem;\n  display: inline;\n  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};\n  word-break: ${({ lineClamp }) => lineClamp === 1 && \"break-all\"};\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nexport const StyledBalloonFooter = styled.div`\n  margin: 0.375rem 1.875rem 0 2.125rem;\n  display: inline-flex;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 1rem;\n\n  // could be -webkit-fill-available too, if it has good support. Probably it doesn't tho\n  max-width: calc(100% - 3.5rem);\n`;\n\nexport const StyledToggleIconContainer = styled.span`\n  display: inline-flex;\n  position: absolute;\n  right: 0.5rem;\n  bottom: 0;\n  background-color: ${bgColor};\n  padding-left: 0.5rem;\n`;\n\nexport const StyledToggleExpandButtonContainer = styled.span`\n  display: block;\n  position: relative; // for icon absolute positioning\n  cursor: pointer;\n  flex: 1;\n`;\n\nexport const StyledToggleExpandButtonFooterContainer = styled(\n  StyledToggleExpandButtonContainer\n)`\n  min-height: 1.5rem;\n  margin: -0.5rem 0;\n  position: relative;\n  z-index: 1;\n  ${StyledToggleIconContainer} {\n    bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter} {\n    margin-top: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter}:hover + * .icon[data-hover] {\n    display: none;\n  }\n  ${StyledBalloonFooter}:hover + * .icon {\n    display: unset;\n  }\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  height: 1.5rem;\n  font-family: inherit;\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  a&,\n  a&:hover {\n    text-decoration: none;\n    align-content: center;\n    text-align: center;\n    display: inline-block;\n  }\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { MnemonicTrigger } from \"@intellij-platform/core/Mnemonic\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n\n  /**\n   * A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\n   * It will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\n   * Note: if you use mnemonic, and the direct child of the button is not a string, you should use `Mnemonic.Text`\n   * to render the button text, to have the underlining behavior.\n   */\n  mnemonic?: string;\n}\n\nconst StyledWrapperLabel = styled.label`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  isDisabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, isDisabled }) =>\n    isDisabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\nconst StyledInput = styled.input`\n  opacity: 0.0001;\n  position: absolute;\n  z-index: 1;\n  inset: 0;\n  cursor: default;\n  &:disabled {\n    cursor: default;\n  }\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  mnemonic,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel className={className}>\n      <StyledInput\n        {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n        ref={ref}\n      />\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={disableFocusAlwaysVisible ? isFocusVisible : isFocused}\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText isDisabled={props.isDisabled}>\n          {mnemonic ? (\n            <MnemonicTrigger\n              mnemonic={mnemonic}\n              isDisabled={props.isDisabled}\n              onTriggered={state.toggle}\n            >\n              {props.children}\n            </MnemonicTrigger>\n          ) : (\n            props.children\n          )}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import React from \"react\";\nimport { styled } from \"../styled\";\nimport { DOMAttributes } from \"@react-types/shared\";\nimport { MENU_POSITION_TARGET_DATA_ATTRIBUTE } from \"@intellij-platform/core/Menu/ContextMenuContainer\";\n\nconst GAP = \"0.1875rem\";\nconst StyledItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 0.25rem;\n  gap: ${GAP};\n`;\n\nconst StyledHint = styled.span<{ small?: boolean }>`\n  display: inline-flex;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(theme.commonColors.inactiveTextColor)};\n  padding-left: 0.1rem;\n  font-size: ${({ small }) => small && \"0.9em\"};\n`;\n\nconst StyledGroup = styled.span.attrs({\n  role: \"presentation\" as string,\n})`\n  display: inline-flex;\n  display: flex;\n  align-items: center;\n  gap: ${GAP};\n`;\n/**\n * Generic layout component capturing common use cases of tree or list items.\n * It handles the spacing between parts, and provides styled components for parts that need specific styling.\n * For more flexibility over the order of various pieces of content in list/tree items, there is no specific props\n * for parts. Different parts should just be rendered in children.\n *\n * @example\n * ```tsx\n * <ItemLayout>\n *   <PlatformIcon icon=\"nodes/folder\" />\n *   <HighlightedTextValue />\n *   <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n * </ItemLayout>\n * ```\n * @beta\n */\nexport const ItemLayout = (\n  props: { children: React.ReactNode } & DOMAttributes\n) => {\n  return (\n    <StyledItemLayout\n      {...{ [MENU_POSITION_TARGET_DATA_ATTRIBUTE]: true }}\n      {...props}\n    />\n  );\n};\n\n/**\n * A more subtle text usually rendered next to the main text in the item.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Hint = StyledHint;\n\n/**\n * Useful when a number of items need to be grouped by a wrapper, e.g. to have a tooltip.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Group = StyledGroup;\n","import { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst getDefaultLinkColor = ({ theme }: { theme: Theme }) =>\n  theme.currentForegroundAware(theme.commonColors.linkForegroundEnabled);\n\n//   FIXME(styled-components): add, check and generalized after upgrading styled-components\n//   @container style(--jui-foreground) {\n//     text-decoration: underline;\n//   }\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n  outline: none;\n  // &:focus-visible didn't work as expected, so FocusRing is used\n  &.focus-visible {\n    outline: 1px solid\n      ${({ theme }) =>\n        theme.color(\n          \"Link.focusedBorderColor\" as UnknownThemeProp<\"Link.focusedBorderColor\">,\n          theme.commonColors.focusBorderColor\n        )};\n    border-radius: 2px; // Registry.intValue(\"ide.link.button.focus.round.arc\", 4)\n  }\n  color: ${getDefaultLinkColor};\n\n  &:hover,\n  &.hover /* for testing purposes*/ {\n    text-decoration: underline;\n    color: ${({ theme }) =>\n      theme.currentForegroundAware(\n        theme.color(\n          \"Link.hoverForeground\",\n          theme.color(\n            \"link.hover.foreground\" as UnknownThemeProp<\"link.hover.foreground\">,\n            \"\" /*FIXME: check*/\n          )\n        )\n      )};\n  }\n  &:active,\n  &.active {\n    color: ${({ theme }) =>\n      theme.currentForegroundAware(\n        theme.color(\n          \"Link.pressedForeground\",\n          theme.color(\n            \"link.pressed.foreground\" as UnknownThemeProp<\"link.pressed.foreground\">,\n            !theme.dark ? \"#F00000\" : \"#BA6F25\"\n          )\n        )\n      )};\n  }\n  &:disabled,\n  &.disabled {\n    cursor: default;\n    text-decoration: none;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.disabledForeground\" as UnknownThemeProp<\"Link.disabledForeground\">,\n        theme.color(\n          \"Label.disabledForeground\",\n          theme.color(\"Label.disabledText\", \"#999\")\n        )\n      )};\n  }\n  // We may need to refine this to allow passing visited as a prop for links that don't have href, and not apply the\n  // styles in that case, since it seems no href is considered visited by default. Although, in all main themes\n  // Link.visitedForeground is set to the default link color.\n  &:visited,\n  &.visited {\n    color: ${({ theme }) =>\n      theme.currentForegroundAware(\n        theme.color(\n          \"Link.visitedForeground\",\n          theme.color(\n            \"link.visited.foreground\" as UnknownThemeProp<\"link.visited.foreground\">,\n            !theme.dark ? \"#800080\" : \"#9776A9\"\n          )\n        )\n      )};\n  }\n`;\n","import styled from \"styled-components\";\nimport { SpeedSearchContainer } from \"../SpeedSearch/SpeedSearchContainer\";\n\nexport const CollectionSpeedSearchContainer = styled(SpeedSearchContainer)<{\n  fillAvailableSpace?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ fillAvailableSpace }) => (fillAvailableSpace ? 1 : undefined)};\n`;\n","import React, {\n  CSSProperties,\n  HTMLAttributes,\n  RefObject,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { keyframes } from \"styled-components\";\nimport { useProgressBar } from \"@react-aria/progress\";\nimport { AriaProgressBarProps } from \"@react-types/progress\";\nimport { PressProps, useHover } from \"@react-aria/interactions\";\nimport { useButton } from \"@react-aria/button\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, \"label\"> {\n  /**\n   * Process name, shown above or to the left of the progress bar. Placement is controlled by {@link namePosition}.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-name\n   */\n  name?: React.ReactNode;\n\n  /**\n   * Process name position with respect to the progress bar.\n   * If `namePosition` is \"side\", {@link name} is **not** automatically appended with a colon.\n   * @default \"top\"\n   */\n  namePosition?: \"side\" | \"top\";\n\n  /**\n   * Process details, placed bellow the progress bar, with a de-emphasized color.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-details\n   */\n  details?: React.ReactNode;\n\n  /**\n   * A second line of details. Not an officially documented feature, but it's supported in the reference impl.\n   */\n  secondaryDetails?: React.ReactNode;\n\n  /**\n   * Placed next to and aligned with the progress bar, used for\n   * [process control](https://jetbrains.github.io/ui/controls/progress_bar/#process-control) buttons.\n   */\n  button?: React.ReactNode;\n\n  /**\n   * Progress bar track width.\n   */\n  width?: CSSProperties[\"width\"];\n\n  /**\n   * Not supported in [the official specs](https://jetbrains.github.io/ui/controls/progress_bar/#25), but the progress\n   * bar in status bar has a denser spacing. It still won't be a pixel perfect match with the progress bar in the\n   * status bar.\n   */\n  dense?: boolean;\n\n  /** Whether the value's label is displayed. True by default if there's a label, false by default if not. */\n  showValueLabel?: boolean;\n\n  style?: HTMLAttributes<unknown>[\"style\"];\n  className?: HTMLAttributes<unknown>[\"className\"];\n}\n\ninterface ProgressBarContextObj {\n  setForcedDetails: (details: string | null) => void;\n  setTooltip: (tooltip: string | null) => void;\n}\n\n/**\n * @see https://jetbrains.github.io/ui/controls/progress_bar/\n * @see https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/platform-api/src/com/intellij/openapi/ui/panel/ProgressPanelBuilder.java\n *\n * Known issues:\n * There are a couple of UI issues because of the current layout (which can be improved probably):\n * - max-width of the label and details, it's not necessarily aligned with the the progressbar track, because they don't\n *   share the same container\n * - when label is on the side, details is aligned with the label, instead of the progressbar track.\n */\nexport const ProgressBar = ({\n  value = 0,\n  maxValue = 100,\n  minValue = 0,\n  name,\n  namePosition = \"top\",\n  details,\n  secondaryDetails,\n  button,\n  width,\n  dense,\n  className,\n  style,\n  valueLabel,\n  showValueLabel = Boolean(valueLabel),\n  ...props\n}: ProgressBarProps): React.ReactElement => {\n  const { progressBarProps, labelProps } = useProgressBar({\n    ...props,\n    label: name,\n    value,\n    valueLabel,\n    maxValue,\n    minValue,\n  });\n  const percentage = (100 * (value / maxValue)).toFixed(0);\n  const [forcedDetails, setForcedDetails] = useState<null | string>(\"\");\n  const [tooltip, setTooltip] = useState<null | string>(\"\");\n\n  const contextValue: ProgressBarContextObj = useMemo(\n    () => ({\n      setForcedDetails,\n      setTooltip,\n    }),\n    []\n  );\n  const label = (\n    <StyledProgressBarLabel {...labelProps}>{name}</StyledProgressBarLabel>\n  );\n  const effectiveDetails = details ? tooltip || forcedDetails || details : null;\n  return (\n    <StyledProgressBarContainer style={style} className={className}>\n      {namePosition === \"top\" && label}\n      <StyledProgressBarLineContainer\n        dense={dense}\n        hasTopMargin={Boolean(name) && namePosition === \"top\"}\n        hasBottomMargin={Boolean(effectiveDetails)}\n      >\n        {namePosition === \"side\" && label}\n        <StyledProgressBarTrack\n          style={{ width }}\n          {...progressBarProps}\n          indeterminate={props.isIndeterminate}\n        >\n          {!props.isIndeterminate && (\n            <StyledProgressBarProgress style={{ width: `${percentage}%` }} />\n          )}\n        </StyledProgressBarTrack>\n        {showValueLabel && <span>{valueLabel ?? `${percentage}%`}</span>}\n        <ProgressBarContext.Provider value={contextValue}>\n          {button}\n        </ProgressBarContext.Provider>\n      </StyledProgressBarLineContainer>\n      <StyledProgressBarDetails>{effectiveDetails}</StyledProgressBarDetails>\n      <StyledProgressBarDetails>{secondaryDetails}</StyledProgressBarDetails>\n    </StyledProgressBarContainer>\n  );\n};\n\nconst ProgressBarContext = React.createContext<null | ProgressBarContextObj>(\n  null\n);\n\nconst StyledProgressBarContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground /* TODO: check*/};\n  cursor: default; // prevent cursor on text\n`;\n\nconst StyledProgressBarLineContainer = styled.div<{\n  dense?: boolean;\n  hasTopMargin?: boolean;\n  hasBottomMargin?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: ${({ dense }) => (dense ? \"0.5rem\" : \"0.625rem\")};\n  height: 4px;\n  // spacing is based on the reference impl and figma designs. top and bottom spacing is inverted in the spec document\n  // figma: https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?node-id=75426%3A16650\n  // spec document: https://jetbrains.github.io/ui/controls/progress_bar/#25\n  margin-top: ${({ hasTopMargin }) => hasTopMargin && \"0.375rem\"};\n  margin-bottom: ${({ hasBottomMargin }) => hasBottomMargin && \"0.25rem\"};\n`;\n\nconst StyledProgressBarLabel = styled.div`\n  white-space: nowrap;\n  max-width: calc(100% - 2rem);\n  overflow: hidden;\n`;\n\nconst StyledProgressBarDetails = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n  font-size: 0.82em;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 2rem); // not the best way\n`;\n\nconst StyledProgressBarTrack = styled.div<{ indeterminate?: boolean }>`\n  height: inherit;\n  border-radius: 2px;\n  overflow: hidden;\n  display: flex;\n\n  // In case used in flex layout\n  min-width: 0;\n  flex: 1;\n\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.trackColor\",\n      theme.dark ? \"rgb(85,85,85)\" : \"rgb(196,196,196)\"\n    )};\n  ${({ indeterminate }) =>\n    indeterminate &&\n    css`\n      background: linear-gradient(\n        90deg,\n        ${getIndeterminateStartColor} 0%,\n        ${getIndeterminateEndColor} 50%,\n        ${getIndeterminateStartColor} 100%\n      );\n      background-size: 96px auto;\n      animation: 800ms ${indeterminateBackgroundAnimation} linear infinite;\n    `}\n`;\n\nconst getIndeterminateStartColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateStartColor\");\nconst getIndeterminateEndColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateEndColor\");\n\nconst indeterminateBackgroundAnimation = keyframes`\n  0% {\n    background-position: 0;\n  }\n  100% {\n    background-position: 96px;\n  }\n`;\n\nconst StyledProgressBarProgress = styled.div`\n  height: 100%;\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.progressColor\",\n      theme.dark ? \"rgb(160,160,160)\" : \"rgb(128,128,128)\"\n    )};\n`;\n\ntype ProgressBarIconButtonProps = Pick<PressProps, \"onPress\"> & {\n  hoverTooltip: string;\n};\n\n/**\n * Accessibility and functionality of progress bar icon buttons\n * @private maybe?\n */\nexport function useProgressBarIconButton(\n  { onPress, hoverTooltip }: ProgressBarIconButtonProps,\n  ref: RefObject<HTMLElement>\n) {\n  const { buttonProps } = useButton(\n    {\n      onPress,\n      elementType: \"span\",\n      excludeFromTabOrder: true,\n      preventFocusOnPress: true,\n    },\n    ref\n  );\n  const context = useContext(ProgressBarContext);\n  const { hoverProps, isHovered } = useHover({});\n  useEffect(() => {\n    context?.setTooltip(isHovered ? hoverTooltip : null);\n  }, [hoverTooltip, isHovered]);\n  return {\n    buttonProps: mergeProps(buttonProps, hoverProps),\n  };\n}\n\n/**\n * @private maybe?\n * */\nexport function useProgressBarPauseIconButton(\n  { paused, ...props }: ProgressBarIconButtonProps & { paused: boolean },\n  ref: RefObject<HTMLElement>\n) {\n  const context = useContext(ProgressBarContext);\n  useEffect(() => {\n    context?.setForcedDetails(paused ? \"Paused\" : null);\n  }, [paused]);\n  return useProgressBarIconButton(props, ref);\n}\n\n/**\n * Experimenting with an idea of exposing parts on each component, to maximize styling customizability, similar to\n * [classes](https://mui.com/joy-ui/api/button/#classes) API in MUI components. But instead of passing classes prop,\n * one would be able to create custom versions of a component by doing something like this:\n * const CustomComponent = styled(Component)`\n *   ${Component.part1} {\n *     // custom style here\n *   }\n * `;\n * The question is if this type of customizability is actually a good thing in the balance between flexibility for\n * catering for different use cases and not stepping out of the design system boundaries.\n * Another potential downside is that the public API expands to the anatomy of the component.\n */\nProgressBar.Container = StyledProgressBarContainer;\nProgressBar.Label = StyledProgressBarLabel;\nProgressBar.LineContainer = StyledProgressBarLineContainer;\nProgressBar.Track = StyledProgressBarTrack;\nProgressBar.Progress = StyledProgressBarProgress;\nProgressBar.Details = StyledProgressBarDetails;\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarProps {\n  left: React.ReactNode;\n  right: React.ReactNode;\n}\n\n/**\n * Status bar rendered at the bottom of the main window. In the reference implementation, there are three slots for\n * content: left, right and center. It doesn't seem center is really necessary, so only left and right are supported\n * for now.\n * @param left content on the left side of the status bar.\n * @param right content on the right side of the status bar. Typically, a bunch of {@link StatusBarWidget}s\n */\nexport const StatusBar = ({\n  left,\n  right,\n}: StatusBarProps): React.ReactElement => {\n  return (\n    <StyledStatusBar\n      onMouseDown={(e) => {\n        // stop focus from going out of the currently focused element, when status bar is clicked\n        // might be too intrusive to prevent default unconditionally :-? Also, it may make sense for it to be an option\n        e.preventDefault();\n      }}\n    >\n      <StyledStatusBarLeft>{left}</StyledStatusBarLeft>\n      <StyledStatusBarRight>{right}</StyledStatusBarRight>\n    </StyledStatusBar>\n  );\n};\n\nconst StyledStatusBar = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.25rem;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between; // because there is left and right sides\n  background-color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.background\" as UnknownThemeProp<\"StatusBar.background\">,\n      theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)\n    ) || \"#fff\"};\n  color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.Widget.foreground\" as UnknownThemeProp<\"StatusBar.Widget.foreground\">,\n      theme.commonColors.labelForeground\n    )};\n  border-top: 1px solid\n    ${({ theme }) => theme.color(\"StatusBar.borderColor\", \"rgb(145, 145, 145)\")};\n  height: calc(1.25rem + 1px /* border*/);\n  line-height: 1.25rem;\n  font-size: 0.656rem; // not verified\n  cursor: default;\n`;\n\nconst StyledStatusBarSection = styled.div`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst StyledStatusBarRight = styled(StyledStatusBarSection)`\n  flex-shrink: 0;\n`;\nconst StyledStatusBarLeft = styled(StyledStatusBarSection)`\n  flex-shrink: 1;\n  min-width: 0;\n  overflow: hidden;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { PressProps, usePress } from \"@react-aria/interactions\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface StatusBarWidgetProps extends PressProps {\n  label?: React.ReactNode;\n  icon?: React.ReactNode;\n}\n\n/**\n * Status bar button (aka widget), with the right hover and pressed appearance.\n * It doesn't get focused when pressed, and is excluded from tab order.\n * Disabled style is not couldn't be found, so it's skipped at the moment.\n */\nexport const StatusBarWidget = React.forwardRef(function StatusBarWidget(\n  props: StatusBarWidgetProps,\n  forwardedRef: ForwardedRef<HTMLSpanElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  // Maybe it's better for a11y to use useButton, or at least use button element?\n  const { pressProps, isPressed } = usePress({\n    ref,\n    ...props,\n    preventFocusOnPress: true,\n  });\n  const { focusableProps } = useFocusable({ excludeFromTabOrder: true }, ref);\n\n  const StyledWrapper = props.label\n    ? StyledStatusBarWidget\n    : StyledStatusBarIconWidget;\n  return (\n    <StyledWrapper\n      {...mergeProps(pressProps, focusableProps)}\n      className={isPressed ? \"pressed\" : \"\"}\n      ref={ref}\n    >\n      {props.icon}\n      {props.icon && props.label && (\n        <>&nbsp;</> //not the nicest way to handle spacing!\n      )}\n      {props.label}\n    </StyledWrapper>\n  );\n});\n\nconst StyledStatusBarWidget = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.375rem\"};\n  height: 1.125rem;\n  white-space: nowrap;\n  &:hover {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverBackground\" as UnknownThemeProp<\"StatusBar.Widget.hoverBackground\">,\n        theme.color(\"ActionButton.hoverBackground\", \"#dfdfdf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverForeground\" as UnknownThemeProp<\"StatusBar.Widget.hoverForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n  &.pressed {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedBackground\" as UnknownThemeProp<\"StatusBar.Widget.pressedBackground\">,\n        theme.color(\"ActionButton.pressedBackground\", \"#cfcfcf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedForeground\" as UnknownThemeProp<\"StatusBar.Widget.pressedForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n`;\n\nconst StyledStatusBarIconWidget = styled(StyledStatusBarWidget)`\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.25rem\"};\n`;\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import React, { useEffect, useState } from \"react\";\nimport { Toolbar } from \"../../../Toolbar/Toolbar\";\nimport { IconButton } from \"../../../IconButton\";\nimport { PlatformIcon } from \"../../../Icon\";\nimport { StyledHorizontalSeparator } from \"../../../StyledSeparator\";\nimport { styled } from \"../../../styled\";\n\ninterface Execution {\n  id: string;\n  isRunning: boolean;\n  title: string;\n}\n\nexport function useFakeExecution(scripts: Record<string, string>) {\n  const [executions, setExecutions] = useState<Array<Execution>>([]);\n\n  useEffect(() => {\n    addExecution(true);\n    addExecution();\n  }, []);\n\n  const addExecution = (run = false, scriptName?: string) => {\n    const scriptNames = Object.keys(scripts);\n    return setExecutions((executions) => {\n      const title =\n        scriptName ||\n        scriptNames.find((name) =>\n          executions.every(({ title }) => title !== name)\n        ) ||\n        scriptNames[0];\n      return executions.concat({\n        id: `${Math.max(...executions.map(({ id }) => parseInt(id)), 0) + 1}`,\n        isRunning: run,\n        title,\n      });\n    });\n  };\n  const runScript = (name: string) => {\n    const execution = executions.find((process) => process.title === name);\n    if (execution) {\n      if (!execution.isRunning) {\n        toggle(execution.id);\n      }\n    } else {\n      addExecution(true, name);\n    }\n  };\n  const toggle = (executionId: string) => {\n    setExecutions((executions) =>\n      executions.map((execution) =>\n        execution.id === executionId\n          ? {\n              ...execution,\n              isRunning: !execution.isRunning,\n            }\n          : execution\n      )\n    );\n  };\n\n  const close = (executionId: string) => {\n    setExecutions((executions) => {\n      return executions.filter(({ id }) => executionId !== id);\n    });\n  };\n\n  return { executions, runScript, toggle, close };\n}\n\nexport const FakeExecutionToolbar = ({\n  execution: { isRunning, id },\n  toggle,\n}: {\n  execution: Execution;\n  toggle: (executionId: string) => void;\n}) => (\n  <Toolbar border=\"bottom\">\n    <IconButton onPress={() => toggle(id)}>\n      <PlatformIcon icon={isRunning ? \"actions/restart\" : \"actions/execute\"} />\n    </IconButton>\n    <IconButton isDisabled={!isRunning} onPress={() => toggle(id)}>\n      <PlatformIcon icon=\"actions/suspend\" />\n    </IconButton>\n    <StyledHorizontalSeparator />\n    <IconButton isDisabled>\n      <PlatformIcon icon=\"runConfigurations/scroll_down\" />\n    </IconButton>\n    <IconButton>\n      <PlatformIcon icon=\"actions/gc\" />\n    </IconButton>\n  </Toolbar>\n);\n\nexport const VerticalFlexContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\nexport const RunConsoleOutput = styled.div`\n  background: ${({ theme }) => (theme.dark ? \"#2b2b2b\" : \"#fff\")}; // FIXME\n  flex: 1;\n`;\n"],"names":[],"sourceRoot":""}