"use strict";(self.webpackChunk_intellij_platform_core=self.webpackChunk_intellij_platform_core||[]).push([[261],{"./src/Button/Button.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{z:()=>Button});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_react_aria_button__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@react-aria/button/dist/useButton.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/@react-aria/utils/dist/useObjectRef.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/@react-aria/utils/dist/filterDOMProps.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/Button/StyledButton.tsx"),_intellij_platform_core_Mnemonic__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__("./src/Mnemonic/MnemonicTrigger.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const variants={default:_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_2__.Pi,icon:_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_2__.Qh},Button=react__WEBPACK_IMPORTED_MODULE_0__.forwardRef((function Button({variant,style,className,mnemonic,...props},forwardedRef){const ref=(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_3__.B)(forwardedRef),{buttonProps}=(0,_react_aria_button__WEBPACK_IMPORTED_MODULE_4__.U)(props,ref),domProps=(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_5__.z)(props),{autoFocus,form}=props,Component=variant&&variants[variant]||_intellij_platform_core_Button_StyledButton__WEBPACK_IMPORTED_MODULE_2__.Sn;return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(Component,{...(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_6__.d)(domProps,buttonProps,{autoFocus,form}),style,className,ref,children:mnemonic?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_intellij_platform_core_Mnemonic__WEBPACK_IMPORTED_MODULE_7__.Y,{mnemonic,isDisabled:props.isDisabled,onTriggered:props.onPress,children:props.children}):props.children})}));try{Button.displayName="Button",Button.__docgenInfo={description:'https://jetbrains.github.io/ui/controls/button/\n\nTODO:\n- Support for "default" button behaviour. it\'s kind of similar to a <button type="submit" /> in html, but textarea\nbehaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\nCmd+Enter should always trigger onPress. Plus, maybe it should work independent of "form" being used? or maybe it\'s\nnot a big deal to expect an ancestor "form" element, when variant is "default"?\n- "Default" style differences in Windows.\n- Gradient colors (low hanging fruit, but negligible added value).\n\nKnown issues:\n- In the original impl, default button looks the same as normal button, when focus is not within the same area that\nthe button is. For example in the commit tool window, "Commit" button which is default, is not blue, unless the\n"Commit" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n"default" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\nDefaultToolWindow is used. But we need to see if the same requirement exists in various places.\nNOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\nwhich enables "default" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n- In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\nbehaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.',displayName:"Button",props:{variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"icon"'}]}},preventFocusOnPress:{defaultValue:null,description:"",name:"preventFocusOnPress",required:!1,type:{name:"boolean"}},form:{defaultValue:null,description:"",name:"form",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},mnemonic:{defaultValue:null,description:"A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\nIt will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\nNote: if you use mnemonic, and the direct child of the button is not a string, you should use `MnemonicText`\nto render the button text, to have the underlining behavior.",name:"mnemonic",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},onPress:{defaultValue:null,description:"Called when the button is pressed, or triggered via mnemonic. If mnemonic is used, there won't be any event\npassed to onPress callback.",name:"onPress",required:!1,type:{name:"((e?: PressEvent) => void)"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Button/Button.tsx#Button"]={docgenInfo:Button.__docgenInfo,name:"Button",path:"src/Button/Button.tsx#Button"})}catch(__react_docgen_typescript_loader_error){}},"./src/Button/StyledButton.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Pi:()=>StyledDefaultButton,Qh:()=>StyledIconButton,Sn:()=>StyledButton});var _intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./src/styled.ts");const StyledButton=_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__.zo.button`
  box-sizing: border-box;
  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28
  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28
  height: 1.5rem;
  font-family: inherit;
  background-color: ${({theme,disabled})=>disabled?"transparent":theme.color("Button.startBackground")};
  color: ${({theme,disabled})=>disabled?theme.color("Button.disabledText"):theme.color("Button.foreground")};
  border: 1px solid
    ${({theme,disabled})=>disabled?theme.color("Button.disabledBorderColor"):theme.color("Button.startBorderColor")};
  border-radius: ${({theme})=>(theme.value("Button.arc")??6)/2}px;
  box-shadow: ${({theme})=>theme.value("Button.paintShadow")?`0 0 0 ${theme.value("Button.shadowWidth")??2}px ${theme.color("Button.shadowColor")??(theme.dark?"#36363680":"#a6a6a633")}`:""};
  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29

  flex-shrink: 0; // button should not shrink when rendered in a flex container

  &:focus,
  &.focus /* for testing purposes*/ {
    border-color: ${({theme})=>theme.color("Button.focusedBorderColor","#87afda")};
    outline: none;
    box-shadow: ${({theme})=>`0 0 0 2px ${theme.color("Component.focusColor")??theme.color("Focus.borderColor","#8ab2eb")}`};
  }
`,StyledDefaultButton=(0,_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__.zo)(StyledButton)`
  background-color: ${({theme,disabled})=>!disabled&&theme.color("Button.default.startBackground","#384f6b")};
  color: ${({theme,disabled})=>!disabled&&theme.color("Button.default.foreground")};
  border-color: ${({theme,disabled})=>!disabled&&theme.color("Button.default.startBorderColor","#BFBFBF")};
  &:focus,
  &.focus /* for testing purposes*/ {
    border-color: ${({theme})=>theme.color("Button.default.focusedBorderColor","#87afda")};
  }
`,StyledIconButton=(0,_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_0__.zo)(StyledButton)`
  border-radius: 1000px;
  padding: 0;
  line-height: 0;
  min-width: 0;
  height: 1.5rem;
  width: 1.5rem;
`;try{StyledButton.displayName="StyledButton",StyledButton.__docgenInfo={description:"",displayName:"StyledButton",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme<KnownThemePropertyPath>"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"undefined"}},forwardedAs:{defaultValue:null,description:"",name:"forwardedAs",required:!1,type:{name:"undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Button/StyledButton.tsx#StyledButton"]={docgenInfo:StyledButton.__docgenInfo,name:"StyledButton",path:"src/Button/StyledButton.tsx#StyledButton"})}catch(__react_docgen_typescript_loader_error){}try{StyledDefaultButton.displayName="StyledDefaultButton",StyledDefaultButton.__docgenInfo={description:"",displayName:"StyledDefaultButton",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme<KnownThemePropertyPath>"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"undefined"}},forwardedAs:{defaultValue:null,description:"",name:"forwardedAs",required:!1,type:{name:"undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Button/StyledButton.tsx#StyledDefaultButton"]={docgenInfo:StyledDefaultButton.__docgenInfo,name:"StyledDefaultButton",path:"src/Button/StyledButton.tsx#StyledDefaultButton"})}catch(__react_docgen_typescript_loader_error){}try{StyledIconButton.displayName="StyledIconButton",StyledIconButton.__docgenInfo={description:"",displayName:"StyledIconButton",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLButtonElement | null) => void) | RefObject<HTMLButtonElement> | null"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme<KnownThemePropertyPath>"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"undefined"}},forwardedAs:{defaultValue:null,description:"",name:"forwardedAs",required:!1,type:{name:"undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Button/StyledButton.tsx#StyledIconButton"]={docgenInfo:StyledIconButton.__docgenInfo,name:"StyledIconButton",path:"src/Button/StyledButton.tsx#StyledIconButton"})}catch(__react_docgen_typescript_loader_error){}},"./src/ButtonGroup/ButtonGroup.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{h:()=>ButtonGroup});__webpack_require__("../../node_modules/react/index.js");var _react_aria_focus__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("../../node_modules/@react-aria/focus/dist/FocusScope.mjs"),_react_aria_interactions__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("../../node_modules/@react-aria/interactions/dist/useKeyboard.mjs"),_react_aria_utils__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),_intellij_platform_core_utils_keyboard_utils__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__("./src/utils/keyboard-utils.ts"),_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/styled.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const StyledButtonGroup=_intellij_platform_core_styled__WEBPACK_IMPORTED_MODULE_2__.zo.div`
  display: inline-flex;
  align-items: center;
  gap: 0.75rem;
`;function ButtonGroup(props){return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_react_aria_focus__WEBPACK_IMPORTED_MODULE_3__.MT,{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(HorizontalArrowKeyNavigation,{children:arrowKeyNavigationProps=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(StyledButtonGroup,{...(0,_react_aria_utils__WEBPACK_IMPORTED_MODULE_4__.d)(props,arrowKeyNavigationProps)})})})}function HorizontalArrowKeyNavigation({children}){const focusManager=(0,_react_aria_focus__WEBPACK_IMPORTED_MODULE_3__.bO)(),{keyboardProps}=(0,_react_aria_interactions__WEBPACK_IMPORTED_MODULE_5__.v)({onKeyDown:e=>{if(!(0,_intellij_platform_core_utils_keyboard_utils__WEBPACK_IMPORTED_MODULE_6__.a)(e)){if("ArrowLeft"===e.key)return focusManager?.focusPrevious({wrap:!0});if("ArrowRight"===e.key)return focusManager?.focusNext({wrap:!0})}e.continuePropagation()}});return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:children(keyboardProps)})}ButtonGroup.displayName="ButtonGroup";try{ButtonGroup.displayName="ButtonGroup",ButtonGroup.__docgenInfo={description:"`ButtonGroup` should be used as a wrapper around related {@link Button Buttons}, in places such as the\nfooter of a dialog. It does two things:\n- allows for moving the focus between the buttons with left/right arrow keys.\n- applies the right spacing between the buttons",displayName:"ButtonGroup",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ButtonGroup/ButtonGroup.tsx#ButtonGroup"]={docgenInfo:ButtonGroup.__docgenInfo,name:"ButtonGroup",path:"src/ButtonGroup/ButtonGroup.tsx#ButtonGroup"})}catch(__react_docgen_typescript_loader_error){}},"./src/Checkbox/Checkbox.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{X:()=>Checkbox});var react=__webpack_require__("../../node_modules/react/index.js"),useToggleState=__webpack_require__("../../node_modules/@react-stately/toggle/dist/useToggleState.mjs"),dist_module=__webpack_require__("../../node_modules/@react-aria/checkbox/dist/module.js"),useFocusRing=__webpack_require__("../../node_modules/@react-aria/focus/dist/useFocusRing.mjs"),mergeProps=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),styled=__webpack_require__("./src/styled.ts"),LafIcon=__webpack_require__("./src/Icon/LafIcon.tsx"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");const CheckboxIcon=({isDisabled,isFocused,isIndeterminate,isSelected,...otherProps})=>(0,jsx_runtime.jsx)(LafIcon.J,{...otherProps,size:20,icon:{name:isIndeterminate?"checkBoxIndeterminate":"checkBox",modifiers:{Disabled:isDisabled,Selected:isSelected||isIndeterminate,Focused:isFocused}}});CheckboxIcon.displayName="CheckboxIcon";try{CheckboxIcon.displayName="CheckboxIcon",CheckboxIcon.__docgenInfo={description:"Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\nwith the interactions",displayName:"CheckboxIcon",props:{children:{defaultValue:null,description:"Additional node going into the icon wrapper. Such as indicators.",name:"children",required:!1,type:{name:"ReactNode"}},style:{defaultValue:null,description:"",name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},themePath:{defaultValue:null,description:"A theme key that can optionally override the icon.",name:"themePath",required:!1,type:{name:"string"}},isIndeterminate:{defaultValue:null,description:"",name:"isIndeterminate",required:!0,type:{name:"boolean | undefined"}},isFocused:{defaultValue:null,description:"",name:"isFocused",required:!0,type:{name:"boolean"}},isDisabled:{defaultValue:null,description:"",name:"isDisabled",required:!0,type:{name:"boolean | undefined"}},isSelected:{defaultValue:null,description:"",name:"isSelected",required:!0,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Checkbox/CheckboxIcon.tsx#CheckboxIcon"]={docgenInfo:CheckboxIcon.__docgenInfo,name:"CheckboxIcon",path:"src/Checkbox/CheckboxIcon.tsx#CheckboxIcon"})}catch(__react_docgen_typescript_loader_error){}var MnemonicTrigger=__webpack_require__("./src/Mnemonic/MnemonicTrigger.tsx");const StyledWrapperLabel=styled.zo.label`
  position: relative;
  display: inline-flex;
  align-items: center;
`,StyledCheckboxLabelText=styled.zo.span`
  margin-left: 0.25rem;
  color: ${({theme,isDisabled})=>isDisabled?theme.color("CheckBox.disabledText","#808080"):theme.color("*.foreground")};
`,StyledInput=styled.zo.input`
  opacity: 0.0001;
  position: absolute;
  z-index: 1;
  inset: 0;
  cursor: default;
  &:disabled {
    cursor: default;
  }
`,Checkbox=({preventFocus,className,disableFocusAlwaysVisible,mnemonic,...props})=>{const state=(0,useToggleState.l)(props),ref=react.useRef(null),{inputProps}=(0,dist_module.O)(props,state,ref),{isFocusVisible,isFocused,focusProps}=(0,useFocusRing.F)({autoFocus:props.autoFocus}),focusDisabledProps=preventFocus?{onFocusCapture:event=>{event.stopPropagation(),event.preventDefault(),event.relatedTarget instanceof HTMLElement?event.relatedTarget.focus():event.target.blur()},tabIndex:-1}:{};return(0,jsx_runtime.jsxs)(StyledWrapperLabel,{className,children:[(0,jsx_runtime.jsx)(StyledInput,{...(0,mergeProps.d)(inputProps,focusProps,focusDisabledProps),ref}),(0,jsx_runtime.jsx)(CheckboxIcon,{isIndeterminate:props.isIndeterminate,isFocused:disableFocusAlwaysVisible?isFocusVisible:isFocused,isSelected:props.isIndeterminate||state.isSelected,isDisabled:props.isDisabled,"aria-hidden":"true",style:{pointerEvents:"none"}}),props.children&&(0,jsx_runtime.jsx)(StyledCheckboxLabelText,{isDisabled:props.isDisabled,children:mnemonic?(0,jsx_runtime.jsx)(MnemonicTrigger.Y,{mnemonic,isDisabled:props.isDisabled,onTriggered:state.toggle,children:props.children}):props.children})]})};Checkbox.displayName="Checkbox";try{Checkbox.displayName="Checkbox",Checkbox.__docgenInfo={description:"Checkbox component to be used with or without a label.\n\nWhile the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\nuse a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\nany input, state, etc.",displayName:"Checkbox",props:{preventFocus:{defaultValue:null,description:'If set to true, the checkbox won\'t be focusable.\nCommon use cases:\n- When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n  from that container.\n- "Amend" checkbox in "Commit" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n  a questionably better UX.\nNote: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn\'t\nlet the component get focused at all.\nTODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.',name:"preventFocus",required:!1,type:{name:"boolean"}},disableFocusAlwaysVisible:{defaultValue:null,description:"By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\nif set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\nSimilar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.",name:"disableFocusAlwaysVisible",required:!1,type:{name:"boolean"}},isIndeterminate:{defaultValue:null,description:"Indeterminism is presentational only.\nThe indeterminate visual representation remains regardless of user interaction.",name:"isIndeterminate",required:!1,type:{name:"boolean"}},children:{defaultValue:null,description:"The label for the element.",name:"children",required:!1,type:{name:"ReactNode"}},defaultSelected:{defaultValue:null,description:"Whether the element should be selected (uncontrolled).",name:"defaultSelected",required:!1,type:{name:"boolean"}},isSelected:{defaultValue:null,description:"Whether the element should be selected (controlled).",name:"isSelected",required:!1,type:{name:"boolean"}},onChange:{defaultValue:null,description:"Handler that is called when the element's selection state changes.",name:"onChange",required:!1,type:{name:"((isSelected: boolean) => void)"}},value:{defaultValue:null,description:"The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).",name:"value",required:!1,type:{name:"string"}},name:{defaultValue:null,description:"The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).",name:"name",required:!1,type:{name:"string"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},mnemonic:{defaultValue:null,description:"A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\nIt will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\nNote: if you use mnemonic, and the direct child of the button is not a string, you should use `Mnemonic.Text`\nto render the button text, to have the underlining behavior.",name:"mnemonic",required:!1,type:{name:"string"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Checkbox/Checkbox.tsx#Checkbox"]={docgenInfo:Checkbox.__docgenInfo,name:"Checkbox",path:"src/Checkbox/Checkbox.tsx#Checkbox"})}catch(__react_docgen_typescript_loader_error){}},"./src/Mnemonic/MnemonicTrigger.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Y:()=>MnemonicTrigger,i:()=>MnemonicText});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/react/index.js"),_intellij_platform_core_utils_useEventCallback__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/utils/useEventCallback.ts"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const MnemonicContext=(0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({character:null,active:!1,rendered:()=>{}}),MnemonicTrigger=({children,mnemonic,isDisabled,onTriggered:onTriggeredProp=(()=>{})})=>{const ref=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null),onTriggered=(0,_intellij_platform_core_utils_useEventCallback__WEBPACK_IMPORTED_MODULE_2__.$)(onTriggeredProp),[active,setActive]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),keydownListener=(0,_intellij_platform_core_utils_useEventCallback__WEBPACK_IMPORTED_MODULE_2__.$)((e=>{if(!isDisabled){if(active&&!e.repeat){const character=e.code.match(/Key([A-Z])/)?.[1];character&&character.toLowerCase()===mnemonic.toLowerCase()&&onTriggered()}"Alt"===e.key&&ref.current&&function isAccessible(element){return!element.closest("[aria-hidden]")&&null!==element.parentElement&&function isVisible(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)}(element.parentElement)}(ref.current)&&setActive(!0)}}));(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{function onBlur(){setActive(!1)}function keyupListener(e){"Alt"===e.key&&setActive(!1)}return document.addEventListener("keydown",keydownListener),document.addEventListener("keyup",keyupListener),window.addEventListener("blur",onBlur),()=>{document.removeEventListener("keydown",keydownListener),document.removeEventListener("keyup",keyupListener),window.removeEventListener("blur",onBlur)}}),[]);const renderedMnemonicRef=(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)("");return(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)((()=>{const timerId=setTimeout((()=>{renderedMnemonicRef.current!==mnemonic&&console.warn(`Mnemonic ${mnemonic} was set but not rendered to the user. \nMake sure the specified character is rendered directly in MnemonicTrigger, or wrapped by MnemonicText inside MnemonicTrigger children. \nElement:`,ref.current?.parentElement)}));return()=>{clearTimeout(timerId)}}),[mnemonic]),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(MnemonicContext.Provider,{value:{character:mnemonic,active,rendered:()=>{renderedMnemonicRef.current=mnemonic}},children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("span",{hidden:!0,ref}),"string"==typeof children?(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(MnemonicText,{children}):children]})};function MnemonicText({children}){const{character,active,rendered}=(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(MnemonicContext);if(character){const index=children.toLowerCase().indexOf(character.toLowerCase()),found=index>-1;if(found&&rendered(),found&&active)return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children:[children.slice(0,index),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("u",{children:children.slice(index,index+1)}),children.slice(index+1)]})}return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.Fragment,{children})}MnemonicTrigger.displayName="MnemonicTrigger";try{MnemonicText.displayName="MnemonicText",MnemonicText.__docgenInfo={description:"Used inside MnemonicTrigger children, when the direct child can't be a string.",displayName:"MnemonicText",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Mnemonic/MnemonicTrigger.tsx#MnemonicText"]={docgenInfo:MnemonicText.__docgenInfo,name:"MnemonicText",path:"src/Mnemonic/MnemonicTrigger.tsx#MnemonicText"})}catch(__react_docgen_typescript_loader_error){}try{MnemonicTrigger.displayName="MnemonicTrigger",MnemonicTrigger.__docgenInfo={description:"",displayName:"MnemonicTrigger",props:{mnemonic:{defaultValue:null,description:"Character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic}.",name:"mnemonic",required:!0,type:{name:"string"}},onTriggered:{defaultValue:null,description:"Called when mnemonic key is pressed with the activator key",name:"onTriggered",required:!1,type:{name:"(() => void)"}},isDisabled:{defaultValue:null,description:"Whether the mnemonic is disabled. Useful when setting mnemonic on disable-able components, to just pass\nisDisabled prop down to MnemonicTrigger",name:"isDisabled",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Mnemonic/MnemonicTrigger.tsx#MnemonicTrigger"]={docgenInfo:MnemonicTrigger.__docgenInfo,name:"MnemonicTrigger",path:"src/Mnemonic/MnemonicTrigger.tsx#MnemonicTrigger"})}catch(__react_docgen_typescript_loader_error){}},"./src/ModalWindow/ModalWindow.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{Du:()=>ModalWindow,dt:()=>StyledWindowContainer,zj:()=>WindowControllerContext});var react=__webpack_require__("../../node_modules/react/index.js"),useOverlayTriggerState=__webpack_require__("../../node_modules/@react-stately/overlays/dist/useOverlayTriggerState.mjs"),useModalOverlay=__webpack_require__("../../node_modules/@react-aria/overlays/dist/useModalOverlay.mjs"),usePreventScroll=__webpack_require__("../../node_modules/@react-aria/overlays/dist/usePreventScroll.mjs"),FocusScope=__webpack_require__("../../node_modules/@react-aria/focus/dist/FocusScope.mjs"),focusSafely=__webpack_require__("../../node_modules/@react-aria/focus/dist/focusSafely.mjs"),dist_module=__webpack_require__("../../node_modules/@react-aria/dialog/dist/module.js"),styled=__webpack_require__("./src/styled.ts"),style_constants=__webpack_require__("./src/style-constants.ts"),mergeProps=__webpack_require__("../../node_modules/@react-aria/utils/dist/mergeProps.mjs"),useResizableMovableOverlay=__webpack_require__("./src/Overlay/useResizableMovableOverlay.tsx"),OverlayInteractionHandler=__webpack_require__("./src/Overlay/OverlayInteractionHandler.tsx"),OverlayResizeHandles=__webpack_require__("./src/Overlay/OverlayResizeHandles.tsx"),WindowContext=__webpack_require__("./src/ModalWindow/WindowContext.ts"),useEventCallback=__webpack_require__("./src/utils/useEventCallback.ts"),jsx_runtime=__webpack_require__("../../node_modules/react/jsx-runtime.js");function UNSAFE_React17SuspenseFix({measureContentSize,children}){return react.version.startsWith("17")?(0,jsx_runtime.jsx)(react.Suspense,{fallback:(0,jsx_runtime.jsx)(NullSuspenseFallback,{afterUnsuspended:measureContentSize}),children}):(0,jsx_runtime.jsx)(jsx_runtime.Fragment,{children})}function NullSuspenseFallback({afterSuspended:afterSuspendedProp=(()=>{}),afterUnsuspended:afterUnsuspendedProp=(()=>{})}){const afterSuspended=(0,useEventCallback.$)(afterSuspendedProp),afterUnsuspended=(0,useEventCallback.$)(afterUnsuspendedProp);return(0,react.useEffect)((()=>(afterSuspended?.(),()=>{afterUnsuspended?.()})),[]),null}try{UNSAFE_React17SuspenseFix.displayName="UNSAFE_React17SuspenseFix",UNSAFE_React17SuspenseFix.__docgenInfo={description:"A workaround for an issue in measuring overlay size, caused by a limitation/bug in how React 17 runs effects when\nchildren suspend rendering: https://github.com/facebook/react/issues/21510\n\nHere is a simplified demonstration of the issue:\nExpected behavior (React 18): https://codesandbox.io/s/parent-effects-suspense-v18-38m8p7?file=/src/App.tsx\nBroken behavior (React 17): https://codesandbox.io/s/parent-effects-suspense-v17-h39g4g\n\nThe overlay content size measuring runs in an effect, and that effect won't run when the content is rendered after\nsuspense.",displayName:"UNSAFE_React17SuspenseFix",props:{measureContentSize:{defaultValue:null,description:"",name:"measureContentSize",required:!0,type:{name:"() => void"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Overlay/UNSAFE_React17SuspenseFix.tsx#UNSAFE_React17SuspenseFix"]={docgenInfo:UNSAFE_React17SuspenseFix.__docgenInfo,name:"UNSAFE_React17SuspenseFix",path:"src/Overlay/UNSAFE_React17SuspenseFix.tsx#UNSAFE_React17SuspenseFix"})}catch(__react_docgen_typescript_loader_error){}const StyledWindowUnderlay=styled.zo.div`
  position: fixed;
  z-index: 1000; // FIXME: z-index should not be hard-coded like this
  inset: 0;
`,StyledWindowContainer=styled.zo.div`
  position: fixed;
  // not checked if there should be a better substitute for * in the following colors. Maybe "Component"?
  background-color: ${({theme})=>theme.color("*.background")};
  color: ${({theme})=>theme.color("*.foreground")};
  border-radius: 8px;
  ${style_constants.s}; // FIXME: OS-dependant style?
  outline: 1px solid #555; // FIXME
`,StyledWindowInnerContainer=styled.zo.div`
  height: inherit;
  overflow: hidden;
  display: flex;
  flex-direction: column;
`,WindowControllerContext=react.createContext({}),ModalWindow=({interactions="all",minWidth=50,minHeight=24,className,...props})=>{const{children}=props,propsContext=(0,react.useContext)(WindowControllerContext),ref=react.useRef(null),{modalProps,underlayProps}=(0,useModalOverlay.N)({isDismissable:!1,isKeyboardDismissDisabled:!1},(0,useOverlayTriggerState.d)({isOpen:!0,onOpenChange:isOpen=>{isOpen||(propsContext.onClose?.(),props.onClose?.())}}),ref);(0,usePreventScroll.t)();const{dialogProps,titleProps}=(0,dist_module.R)(props,ref),{bounds:style,overlayInteractionHandlerProps,UNSAFE_measureContentSize}=(0,useResizableMovableOverlay.t)(ref,{...props,minHeight,minWidth}),{focusContainmentFixProps}=function useFocusContainmentFix(){const lastFocusedElementRef=(0,react.useRef)(null);return{focusContainmentFixProps:{onFocus:e=>{lastFocusedElementRef.current=e.target},onBlur:e=>{const probablyFocusedElement=e.relatedTarget;if(!probablyFocusedElement||probablyFocusedElement instanceof Element&&!e.currentTarget.contains(probablyFocusedElement)&&!probablyFocusedElement.closest("[data-overlay-root]")){const elementToFocus=lastFocusedElementRef.current;elementToFocus&&(0,focusSafely.e)(elementToFocus)}}}}}();return(0,jsx_runtime.jsx)(StyledWindowUnderlay,{...underlayProps,className,children:(0,jsx_runtime.jsx)(OverlayInteractionHandler.Z,{...overlayInteractionHandlerProps,children:(0,jsx_runtime.jsx)(FocusScope.MT,{contain:!0,restoreFocus:!0,autoFocus:!0,children:(0,jsx_runtime.jsxs)(StyledWindowContainer,{...(0,mergeProps.d)(dialogProps,modalProps,focusContainmentFixProps,{style}),ref,children:[(0,jsx_runtime.jsx)(StyledWindowInnerContainer,{children:(0,jsx_runtime.jsx)(WindowContext.H.Provider,{value:{isActive:!0,titleProps,movable:"none"!==interactions},children:(0,jsx_runtime.jsx)(UNSAFE_React17SuspenseFix,{measureContentSize:UNSAFE_measureContentSize,children})})}),"all"===interactions&&(0,jsx_runtime.jsx)(OverlayResizeHandles.S,{})]})})})})};ModalWindow.displayName="ModalWindow";try{StyledWindowContainer.displayName="StyledWindowContainer",StyledWindowContainer.__docgenInfo={description:"",displayName:"StyledWindowContainer",props:{ref:{defaultValue:null,description:"",name:"ref",required:!1,type:{name:"((instance: HTMLDivElement | null) => void) | RefObject<HTMLDivElement> | null"}},theme:{defaultValue:null,description:"",name:"theme",required:!1,type:{name:"Theme<KnownThemePropertyPath>"}},as:{defaultValue:null,description:"",name:"as",required:!1,type:{name:"undefined"}},forwardedAs:{defaultValue:null,description:"",name:"forwardedAs",required:!1,type:{name:"undefined"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ModalWindow/ModalWindow.tsx#StyledWindowContainer"]={docgenInfo:StyledWindowContainer.__docgenInfo,name:"StyledWindowContainer",path:"src/ModalWindow/ModalWindow.tsx#StyledWindowContainer"})}catch(__react_docgen_typescript_loader_error){}try{ModalWindow.displayName="ModalWindow",ModalWindow.__docgenInfo={description:'A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\nIn the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\nare not relevant here since they wouldn\'t be os-native windows. A close button is still relevant (and kind of\nnecessary) and will be added in next iterations.\n\nThe content container doesn\'t come with any padding. Other related components should be used for common layouts in\nmodal windows.\nExample use cases: Window for git operations such as push, update, revert, new branch, etc.\n\n![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n\nNOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\noverlay container could be extracted into a component which is then used to create custom resizable/movable overlay\ndialogs, like "Branches", or "Search Everywhere".\n\nTODO: show close button (maybe os-aware styles?)',displayName:"ModalWindow",props:{className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},onClose:{defaultValue:null,description:"",name:"onClose",required:!1,type:{name:"(() => void)"}},onBoundsChange:{defaultValue:null,description:"",name:"onBoundsChange",required:!1,type:{name:'((bounds: Bounds, interactionType: "move" | "resize") => void)'}},onBoundsChanging:{defaultValue:null,description:"For performance reason, overlay bounds is kept in a local state during a resize or move interaction, and\n`onBoundsChange` is called once at the end of interaction. `onBoundsChanging` gives a chance of rectifying\nbounds changes during an interaction to for example apply custom size/placement constraints.",name:"onBoundsChanging",required:!1,type:{name:'((newBounds: Bounds, interactionType: "move" | "resize") => Bounds)'}},bounds:{defaultValue:null,description:"Controlled bounds. Can be a partially specified bounds.\n- If `top` not specified, the returned bounds will be centered vertically.\n- If `left` not specified, the returned bounds will be centered horizontally.\n- If `width` not specified, the width of the bounds will be based on content width.\n- If `height` not specified, the height of the bounds will be based on content height.\nNote that regardless of `bounds`, `onBoundsChange` always receives a full `bounds` object which is solely\nbased on the bounds of the overlay, at the end of an interaction.",name:"bounds",required:!1,type:{name:"Partial<Bounds>"}},defaultBounds:{defaultValue:null,description:"Default bounds in uncontrolled mode. Can be a partially specified bounds.\n- If `top` not specified, the returned bounds will be centered vertically.\n- If `left` not specified, the returned bounds will be centered horizontally.\n- If `width` not specified, the width of the bounds will be based on content width.\n- If `height` not specified, the height of the bounds will be based on content height.\nNote that regardless of `defaultBounds`, `onBoundsChange` always receives a full `bounds` object which is solely\nbased on the bounds of the overlay, at the end of an interaction.",name:"defaultBounds",required:!1,type:{name:"Partial<Bounds>"}},minWidth:{defaultValue:{value:"50"},description:"",name:"minWidth",required:!1,type:{name:'number | "content"'}},minHeight:{defaultValue:{value:"24"},description:"",name:"minHeight",required:!1,type:{name:'number | "content"'}},interactions:{defaultValue:{value:"all"},description:'Allowed interactions:\n- "all": both resizable and movable\n- "move": movable, but not resizable\n- "none": fixed size and position\nThe reason there are no `resizable` and `movable` boolean props is that resizable=true,movable=false doesn\'t make\nsense from UX perspective.',name:"interactions",required:!1,type:{name:"enum",value:[{value:'"none"'},{value:'"all"'},{value:'"move"'}]}},observeContentResize:{defaultValue:null,description:"When the size is not specified by `bounds` or `defaultBounds` props, the content size is measured and used in the\nreturned bounds. By default, the content size is measured initially. If `observeContentSize` is true, the DOM\nmutations will be observed and the content is re-measured as changes are observed.",name:"observeContentResize",required:!1,type:{name:"boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/ModalWindow/ModalWindow.tsx#ModalWindow"]={docgenInfo:ModalWindow.__docgenInfo,name:"ModalWindow",path:"src/ModalWindow/ModalWindow.tsx#ModalWindow"})}catch(__react_docgen_typescript_loader_error){}},"./src/ModalWindow/WindowContext.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{H:()=>WindowContext});const WindowContext=__webpack_require__("../../node_modules/react/index.js").createContext({isActive:!1,movable:!0,titleProps:{}})},"./src/Tooltip/HelpTooltip.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{k:()=>HelpTooltip});__webpack_require__("../../node_modules/react/index.js");var _intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/Tooltip/Tooltip.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("../../node_modules/react/jsx-runtime.js");const HelpTooltip=({helpText,shortcut,link,...tooltipProps})=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_2__.u,{multiline:!0,...tooltipProps,children:[(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_2__.u.Header,{children:helpText}),shortcut&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)("div",{children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_2__.u.Shortcut,{children:shortcut})}),link&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_intellij_platform_core_Tooltip_Tooltip__WEBPACK_IMPORTED_MODULE_2__.u.Link,{children:link})]});HelpTooltip.displayName="HelpTooltip";try{HelpTooltip.displayName="HelpTooltip",HelpTooltip.__docgenInfo={description:'Tooltip of type "Help"',displayName:"HelpTooltip",props:{helpText:{defaultValue:null,description:"",name:"helpText",required:!0,type:{name:"ReactNode"}},shortcut:{defaultValue:null,description:"",name:"shortcut",required:!1,type:{name:"ReactNode"}},link:{defaultValue:null,description:"",name:"link",required:!1,type:{name:"ReactNode"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},withPointer:{defaultValue:null,description:"Whether (and in what position) the arrow pointer should be shown.\nWhen using {@link TooltipTrigger } or {@link PositionedTooltipTrigger }, the position of the pointer is calculated\nbased on the target element, and a boolean value to define whether the arrow should be shown or not would suffice.\n\nTooltips with pointer have slight style difference.\n{@see https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?type=design&node-id=15-51&mode=design&t=7PplrxG8ZfXB4hIK-0}\n@example <Tooltip withPointer />\n// shows the pointer in the position controlled by {@link TooltipTrigger } or {@link PositionedTooltipTrigger }// If there is not `TooltipTrigger` or `PositionedTooltipTrigger`, the arrow is shown on top center by default.\n@example <Tooltip withPointer={{side: 'top', offset: 30}} />\n// shows the pointer on the top side, with horizontal offset of 30px from the left of tooltip, regardless\n// of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n@example <Tooltip withPointer={{side: 'left', offset: -30}} />\n// shows the pointer on the left side, with vertidcal offset of 30px from the bottom of the tooltip, regardless\n// of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.",name:"withPointer",required:!1,type:{name:"boolean | TooltipPointerPosition"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/Tooltip/HelpTooltip.tsx#HelpTooltip"]={docgenInfo:HelpTooltip.__docgenInfo,name:"HelpTooltip",path:"src/Tooltip/HelpTooltip.tsx#HelpTooltip"})}catch(__react_docgen_typescript_loader_error){}}}]);
//# sourceMappingURL=261.bc531772.iframe.bundle.js.map