{"version":3,"file":"2476.0f212157.iframe.bundle.js","mappings":";;;;AA4FA;;AAIA;AAWA;;;;;;;;;AAiBA;;;;;;;;;ACvFA;AACA;;;;;;;AAOA;AAEA;;;;AAKA;AAEA;;;;AAQA;AAEA;;AAQA;;;;ACjEA;AACA;;AAEA;;ACHA;AAEA","sources":["webpack://@intellij-platform/core/./src/Checkbox/Checkbox.tsx","webpack://@intellij-platform/core/./src/IconButton/IconButton.tsx","webpack://@intellij-platform/core/./src/Popup/StyledPopupContainer.tsx","webpack://@intellij-platform/core/./src/story-components.tsx"],"sourcesContent":["import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { MnemonicTrigger } from \"@intellij-platform/core/Mnemonic\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n\n  /**\n   * A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\n   * It will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\n   * Note: if you use mnemonic, and the direct child of the button is not a string, you should use `Mnemonic.Text`\n   * to render the button text, to have the underlining behavior.\n   */\n  mnemonic?: string;\n}\n\nconst StyledWrapperLabel = styled.label`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  $disabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, $disabled }) =>\n    $disabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\nconst StyledInput = styled.input`\n  opacity: 0.0001;\n  position: absolute;\n  z-index: 1;\n  inset: 0;\n  cursor: default;\n  &:disabled {\n    cursor: default;\n  }\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  mnemonic,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel className={className}>\n      <StyledInput\n        {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n        ref={ref}\n      />\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={disableFocusAlwaysVisible ? isFocusVisible : isFocused}\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText $disabled={props.isDisabled}>\n          {mnemonic ? (\n            <MnemonicTrigger\n              mnemonic={mnemonic}\n              isDisabled={props.isDisabled}\n              onTriggered={state.toggle}\n            >\n              {props.children}\n            </MnemonicTrigger>\n          ) : (\n            props.children\n          )}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ $minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ $minSize }) => `${$minSize}px`};\n  min-width: ${({ $minSize }) => `${$minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      $minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledPopupContainer = styled.div`\n  position: fixed;\n  box-sizing: border-box;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  outline: none; // Focus will be reflected in header. No need for outline or any other focus style on the container\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n`;\n","import { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree, TreeRefValue } from \"@intellij-platform/core/Tree\";\nimport { staticSpeedSearchTreeItems } from \"@intellij-platform/core/Tree/story-helpers\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Iterable<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = [\"BasicList\"],\n  onSelectedKeysChange,\n  treeRef,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: Selection) => void;\n  treeRef?: React.RefObject<TreeRefValue>;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      treeRef={treeRef}\n      autoFocus\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={new Set(defaultSelectedKeys)}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      {staticSpeedSearchTreeItems}\n    </SpeedSearchTree>\n  );\n};\n"],"names":[],"sourceRoot":""}