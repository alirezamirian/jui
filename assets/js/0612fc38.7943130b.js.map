{"version":3,"file":"assets/js/0612fc38.7943130b.js","mappings":"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","sources":["webpack://website/./docs/components/Menu.mdx"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Menu';\nexport const metadata = {\n  \"unversionedId\": \"components/Menu\",\n  \"id\": \"components/Menu\",\n  \"title\": \"Menu\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Menu.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Menu\",\n  \"permalink\": \"/jui/docs/components/Menu\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Menu.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"List\",\n    \"permalink\": \"/jui/docs/components/List\"\n  },\n  \"next\": {\n    \"title\": \"ModalWindow\",\n    \"permalink\": \"/jui/docs/components/ModalWindow\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'Known differences',\n  id: 'known-differences',\n  level: 4\n}, {\n  value: 'Known issues',\n  id: 'known-issues',\n  level: 4\n}, {\n  value: 'Menu',\n  id: 'menu-1',\n  level: 2\n}, {\n  value: 'Static API',\n  id: 'static-api',\n  level: 3\n}, {\n  value: 'Dynamic API',\n  id: 'dynamic-api',\n  level: 3\n}, {\n  value: 'MenuItemLayout',\n  id: 'menuitemlayout',\n  level: 3\n}, {\n  value: 'Selection',\n  id: 'selection',\n  level: 3\n}, {\n  value: 'Disabled items',\n  id: 'disabled-items',\n  level: 3\n}, {\n  value: 'Full Example',\n  id: 'full-example',\n  level: 3\n}, {\n  value: 'MenuTrigger',\n  id: 'menutrigger',\n  level: 2\n}, {\n  value: 'Positioning options',\n  id: 'positioning-options',\n  level: 3\n}, {\n  value: 'Controlled and uncontrolled',\n  id: 'controlled-and-uncontrolled',\n  level: 3\n}, {\n  value: 'Focus restoration',\n  id: 'focus-restoration',\n  level: 3\n}, {\n  value: 'ContextMenu',\n  id: 'contextmenu',\n  level: 2\n}, {\n  value: 'Submenu Behaviour',\n  id: 'submenu-behaviour',\n  level: 2\n}, {\n  value: 'SpeedSearchMenu',\n  id: 'speedsearchmenu',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"menu\"\n    }}>{`Menu`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Nested menu items`}</li>\n      <li parentName=\"ul\">{`Check-able menu items`}</li>\n      <li parentName=\"ul\">{`Default menu layout with icon, text and keyboard shortcut`}</li>\n      <li parentName=\"ul\">{`Full keyboard support`}</li>\n      <li parentName=\"ul\">{`Viewport-aware positioning with respect to a trigger.`}</li>\n      <li parentName=\"ul\">{`Toggle submenus by press, instead of hover. (example: Git Branches popup menu)`}</li>\n      <li parentName=\"ul\">{`Ability to define action for menu items with submenu (Run Configurations dropdown menu)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Advanced hover behaviour, which detects attempt to go to submenu and doesn't close the menu on mouse out.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"known-differences\"\n    }}>{`Known differences`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`In the reference impl, hovering over disabled items removes previously highlighted menu item. Here it preserves\nit.`}</li>\n      <li parentName=\"ul\">{`In the reference impl, there is a delay in opening submenu`}</li>\n      <li parentName=\"ul\">{`Moving mouse out of the menu de-highlights currently highlighted menu, if it's not a menu item with a nested menu.\nHere menu items are not de-highlighted when mouse goes away from the menu.`}</li>\n      <li parentName=\"ul\">{`If `}<inlineCode parentName=\"li\">{`selectedKeys`}</inlineCode>{` is passed and non-empty, it will be autofocused, irrespective of autoFocus value being true, \"first\"\nor \"last\", as long as autofocus is not `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"known-issues\"\n    }}>{`Known issues`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`The first selected key is a key in a submenu, `}<inlineCode parentName=\"li\">{`autoFocus`}</inlineCode>{` being set to \"first\" or \"last\" won't work.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"menu-1\"\n    }}>{`Menu`}</h2>\n    <p><inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` component implements the UI of the menu itself. While `}<a parentName=\"p\" {...{\n        \"href\": \"#menutrigger\"\n      }}>{`MenuTrigger`}</a>{` implements how the menu is opened via a\ntrigger and positioned with respect to it.`}</p>\n    <p>{`Similar to all `}<a parentName=\"p\" {...{\n        \"href\": \"../guides/Collections\"\n      }}>{`collection components`}</a>{`, there are two ways for defining menu items: as jsx, in\nchildren (static), and via `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` prop (dynamic).`}</p>\n    <h3 {...{\n      \"id\": \"static-api\"\n    }}>{`Static API`}</h3>\n    <p><inlineCode parentName=\"p\">{`Item`}</inlineCode>{` component can be rendered in the children of `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` to define the menu items. It's best suited for the use cases\nwhere the menu items are static. Use `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` to give each item a unique identifier, which is used in props on `}<inlineCode parentName=\"p\">{`onAction`}</inlineCode>{`,\nor `}<inlineCode parentName=\"p\">{`disabledKeys`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` is not provided, an index-based auto-generated key will be assigned to each item.`}</p>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`If the content of an `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` is not plain text, use `}<inlineCode parentName=\"p\">{`textValue`}</inlineCode>{` to specify the plain text value for the item. It's needed\nfor making the menu item accessible via type-to-select.`}</p></admonition>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Render `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`s inside another `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` to create nested menu. The parent item's content is provided via `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` prop, in\nthis case.`}</p></admonition>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Item, Menu } from \"@intellij-platform/core\";\n\n<Menu>\n  <Item key=\"copy\">Copy</Item>\n  <Item key=\"cut\" textValue=\"Cut\">\n    <span>Cut</span>\n  </Item>\n  <Item title=\"History\">\n    <Item>Show History</Item>\n    <Item>Put Label</Item>\n  </Item>\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dynamic-api\"\n    }}>{`Dynamic API`}</h3>\n    <p>{`While you can also dynamically map a list of objects to rendered `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`s, `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` prop is designed for dynamically\nrendering menu items based on an array of objects. Then you use a render function in children, to specify how each\nitem should be mapped to an `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Section`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Item, Menu } from \"@intellij-platform/core\";\n\n<Menu\n  items={[\n    { name: \"Copy\" },\n    { name: \"Cut\" },\n    {\n      name: \"History\",\n      children: [{ name: \"Show History\" }, { name: \"Put Label\" }],\n    },\n  ]}\n>\n  {(item) => (\n    <Item key={item.name} childItems={item.children}>\n      {item.name}\n    </Item>\n  )}\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"menuitemlayout\"\n    }}>{`MenuItemLayout`}</h3>\n    <p><inlineCode parentName=\"p\">{`MenuItemLayout`}</inlineCode>{` can be rendered inside `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`, when plain text is not enough for a menu item. `}<inlineCode parentName=\"p\">{`MenuItemLayout`}</inlineCode>{` has\nthree parts:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An icon rendered before the menu item text`}</li>\n      <li parentName=\"ul\">{`The text content of the menu item`}</li>\n      <li parentName=\"ul\">{`Shortcut rendered on the right side.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu>\n  <Item>\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/copy\"} />}\n      content=\"Copy\"\n      shortcut={\"⌘C\"}\n    />\n  </Item>\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection\"\n    }}>{`Selection`}</h3>\n    <p>{`Menu items can be marked as selected via `}<inlineCode parentName=\"p\">{`selectedKeys`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu selectedKeys={[\"enablePreviewTab\"]}>\n  <Item key=\"enablePreviewTab\">Enable Preview Tab</Item>\n  <Item key=\"fileNesting\">File Nesting...</Item>\n</Menu>\n`}</code></pre>\n    <p>{`There is no `}<inlineCode parentName=\"p\">{`onSelectedKeys`}</inlineCode>{` change callback. You should use `}<inlineCode parentName=\"p\">{`onAction`}</inlineCode>{` and adjust `}<inlineCode parentName=\"p\">{`selectedKeys`}</inlineCode>{` if needed.`}</p>\n    <admonition {...{\n      \"type\": \"note\"\n    }}><p parentName=\"admonition\">{`If a selected menu item renders `}<inlineCode parentName=\"p\">{`MenuItemLayout`}</inlineCode>{` with an icon, the checkmark icon will replace the menu item icon.`}</p></admonition>\n    <h3 {...{\n      \"id\": \"disabled-items\"\n    }}>{`Disabled items`}</h3>\n    <p>{`Menu items can be disabled through `}<inlineCode parentName=\"p\">{`disabledKeys`}</inlineCode>{` prop on the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu disabledKeys={[\"paste\"]}>\n  <Item key=\"copy\">Copy</Item>\n  <Item key=\"paste\">Paste</Item>\n  <Item key=\"cut\">Cut</Item>\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"full-example\"\n    }}>{`Full Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu\n  disabledKeys={[\"jumpToExternalEditor\"]}\n  onAction={(key) => alert(\\`Selected: \\${key}\\`)}\n>\n  <Item textValue=\"Cut\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n      content=\"Cut\"\n      shortcut={\"⌘X\"}\n    />\n  </Item>\n  <Item textValue=\"Copy\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/copy\"} />}\n      content=\"Copy\"\n      shortcut={\"⌘C\"}\n    />\n  </Item>\n  <Item textValue=\"Paste\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/menu-paste\"} />}\n      content=\"Paste\"\n      shortcut={\"⌘V\"}\n    />\n  </Item>\n  <Divider />\n  <Item>Reformat Code</Item>\n  <Item textValue=\"Optimize Imports\">\n    <MenuItemLayout content=\"Optimize Imports\" shortcut={\"⌃⌥O\"} />\n  </Item>\n  <Item textValue=\"Delete\">\n    <MenuItemLayout content=\"Delete\" shortcut={\"⌫\"} />\n  </Item>\n  <Divider />\n  <Item textValue=\"Compare with...\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/diff\"} />}\n      content=\"Compare with...\"\n    />\n  </Item>\n  <Divider />\n  <Item key=\"jumpToExternalEditor\" textValue=\"Jump to external editor\">\n    <MenuItemLayout content=\"Jump to external editor\" shortcut={\"⌥⌘F4\"} />\n  </Item>\n  <Divider />\n  <Item title={<MenuItemLayout content=\"History\" />}>\n    <Item>Show History</Item>\n    <Item>Put label</Item>\n  </Item>\n</Menu>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"menutrigger\"\n    }}>{`MenuTrigger`}</h2>\n    <p><inlineCode parentName=\"p\">{`MenuTrigger`}</inlineCode>{` links a menu to a trigger for the menu. It handles the opening/closing logic and renders the menu as an\noverlay, positioned with respect to the trigger element. `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`MenuTrigger`}</inlineCode>{` must be a render function which\nrenders the trigger. It's invoked with props and ref to be passed down to the trigger element.`}</p>\n    <admonition {...{\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`Currently, menu is closed when a menu action is triggered. For some actions (e.g. toggleable view options), that's not\nthe best UX. In future releases, there will be a way to control if the menu should be kept open after the triggered\naction.`}</p></admonition>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<MenuTrigger\n  renderMenu={({ menuProps }) => (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        console.log(key);\n      }}\n    >\n      <Item textValue=\"Cut\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n          content=\"Cut\"\n          shortcut={\"⌘X\"}\n        />\n      </Item>\n      <Item textValue=\"Copy\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/copy\"} />}\n          content=\"Copy\"\n          shortcut={\"⌘C\"}\n        />\n      </Item>\n      <Item textValue=\"Paste\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/menu-paste\"} />}\n          content=\"Paste\"\n          shortcut={\"⌘V\"}\n        />\n      </Item>\n    </Menu>\n  )}\n>\n  {(props, ref) => (\n    <ActionButton {...props} ref={ref}>\n      <PlatformIcon icon={\"general/gearPlain\"} />\n    </ActionButton>\n  )}\n</MenuTrigger>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"positioning-options\"\n    }}>{`Positioning options`}</h3>\n    <p>{`TODO`}</p>\n    <h3 {...{\n      \"id\": \"controlled-and-uncontrolled\"\n    }}>{`Controlled and uncontrolled`}</h3>\n    <p>{`TODO`}</p>\n    <h3 {...{\n      \"id\": \"focus-restoration\"\n    }}>{`Focus restoration`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`restoreFocus`}</inlineCode>{` to have focus restored to the trigger, after the menu is closed. While it's an accessibility best\npractice to restore the focus, `}<inlineCode parentName=\"p\">{`restoreFocus`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` by default. That is based on the observed majority of the use\ncases in Intellij Platform applications.`}</p>\n    <h2 {...{\n      \"id\": \"contextmenu\"\n    }}>{`ContextMenu`}</h2>\n    <p><inlineCode parentName=\"p\">{`ContextMenuContainer`}</inlineCode>{` provides a generic container component that is capable of opening a context menu. You can use it\nas a wrapper for `}<a parentName=\"p\" {...{\n        \"href\": \"./List\"\n      }}>{`List`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"./Tree\"\n      }}>{`Tree`}</a>{`, or anything else, to let them have a context menu.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live noPadding\",\n        \"live\": true,\n        \"noPadding\": true\n      }}>{`<ContextMenuContainer\n  renderMenu={() => (\n    <Menu>\n      <Item textValue=\"Open in Right Split\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/splitVertically.svg\"} />}\n          content=\"Open in Right Split\"\n          shortcut={\"⇧⏎\"}\n        />\n      </Item>\n      <Item textValue=\"Open in Right Split\">\n        <MenuItemLayout\n          content=\"Open in Split with Chooser...\"\n          shortcut={\"⌥⇧⏎\"}\n        />\n      </Item>\n      <Item title=\"Open in\">\n        <Item>Finder</Item>\n        <Item>Terminal</Item>\n        <Item textValue=\"Github\">\n          <MenuItemLayout\n            icon={<PlatformIcon icon={\"vcs/vendors/github.svg\"} />}\n            content=\"Github\"\n          />\n        </Item>\n      </Item>\n    </Menu>\n  )}\n>\n  <div style={{ padding: \"5vw\", textAlign: \"center\" }}>\n    Right click somewhere to open the context menu.\n  </div>\n</ContextMenuContainer>\n`}</code></pre>\n    <admonition {...{\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`In future versions, there might be an integrated support for context menu in List, Tree, etc. But for now it's done\njust by composition of those components and `}<inlineCode parentName=\"p\">{`ContextMenuContainer`}</inlineCode>{`. A caveat to have in mind is the extra wrapper\nelement that will be added if you want context menu, which may need some styling to have no effect on the layout.`}</p></admonition>\n    <h2 {...{\n      \"id\": \"submenu-behaviour\"\n    }}>{`Submenu Behaviour`}</h2>\n    <p>{`By default, menu items with submenu open the submenu on hover. Pressing such items also opens the submenu, if not\nalready opened (e.g. when keyboard is used for navigation). Using `}<inlineCode parentName=\"p\">{`submenuBehavior`}</inlineCode>{` prop, this default behavior can be\nfine-tuned for specific use cases:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`toggleOnPress`}</inlineCode>{`:`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`actionOnPress`}</inlineCode>{`:`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"speedsearchmenu\"\n    }}>{`SpeedSearchMenu`}</h2>\n    <p>{`A drop-in replacement for Menu, which lets user filter items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<SpeedSearchMenu\n  onAction={(key) => {\n    console.log(key);\n  }}\n>\n  <Section title=\"Local Branches\">\n    <Item title=\"master\">\n      <Item>Update</Item>\n      <Item>Push</Item>\n      <Divider />\n      <Item>Delete</Item>\n    </Item>\n    <Item title=\"feat/speed-search-menu\">\n      <Item>Update</Item>\n      <Item>Push</Item>\n      <Divider />\n      <Item>Delete</Item>\n    </Item>\n  </Section>\n  <Section title=\"Remove Branches\">\n    <Item title=\"origin/master\">\n      <Item>Checkout</Item>\n      <Item>New Branch from 'origin/master'...</Item>\n      <Divider />\n      <Item>Delete</Item>\n    </Item>\n    <Item>origin/feat/speed-search-menu</Item>\n  </Section>\n</SpeedSearchMenu>\n`}</code></pre>\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXLayout","MDXContent","_ref","components","props","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}