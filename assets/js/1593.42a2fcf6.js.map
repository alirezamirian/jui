{"version":3,"file":"assets/js/1593.42a2fcf6.js","mappings":"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","sources":["webpack://website/../../node_modules/@react-aria/virtualizer/dist/module.js","webpack://website/../../node_modules/@react-stately/layout/dist/module.js","webpack://website/../../node_modules/@react-stately/virtualizer/dist/module.js"],"sourcesContent":["import {useLayoutEffect as $6Y8zc$useLayoutEffect, mergeProps as $6Y8zc$mergeProps, focusWithoutScrolling as $6Y8zc$focusWithoutScrolling, useResizeObserver as $6Y8zc$useResizeObserver} from \"@react-aria/utils\";\nimport {useVirtualizerState as $6Y8zc$useVirtualizerState, Rect as $6Y8zc$Rect, Size as $6Y8zc$Size} from \"@react-stately/virtualizer\";\nimport $6Y8zc$react, {useRef as $6Y8zc$useRef, useCallback as $6Y8zc$useCallback, useEffect as $6Y8zc$useEffect, useState as $6Y8zc$useState} from \"react\";\nimport {flushSync as $6Y8zc$flushSync} from \"react-dom\";\nimport {useLocale as $6Y8zc$useLocale} from \"@react-aria/i18n\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $28b0c838a8280658$exports = {};\n\n$parcel$export($28b0c838a8280658$exports, \"useVirtualizer\", () => $28b0c838a8280658$export$dd6d526d88b5a137);\n$parcel$export($28b0c838a8280658$exports, \"Virtualizer\", () => $28b0c838a8280658$export$89be5a243e59c4b2);\n\n\n\nvar $ea9606230722b6cd$exports = {};\n\n$parcel$export($ea9606230722b6cd$exports, \"ScrollView\", () => $ea9606230722b6cd$export$5665e3d6be6adea);\n\nvar $bdbd287fd4ad4690$exports = {};\n\n$parcel$export($bdbd287fd4ad4690$exports, \"getRTLOffsetType\", () => $bdbd287fd4ad4690$export$faf7630257ad4304);\n$parcel$export($bdbd287fd4ad4690$exports, \"getScrollLeft\", () => $bdbd287fd4ad4690$export$1389d168952b34b5);\n$parcel$export($bdbd287fd4ad4690$exports, \"setScrollLeft\", () => $bdbd287fd4ad4690$export$ed5fd5ffe5ab0ac);\nlet $bdbd287fd4ad4690$var$cachedRTLResult = null;\nfunction $bdbd287fd4ad4690$export$faf7630257ad4304(recalculate = false) {\n    if ($bdbd287fd4ad4690$var$cachedRTLResult === null || recalculate) {\n        const outerDiv = document.createElement('div');\n        const outerStyle = outerDiv.style;\n        outerStyle.width = '50px';\n        outerStyle.height = '50px';\n        outerStyle.overflow = 'scroll';\n        outerStyle.direction = 'rtl';\n        const innerDiv = document.createElement('div');\n        const innerStyle = innerDiv.style;\n        innerStyle.width = '100px';\n        innerStyle.height = '100px';\n        outerDiv.appendChild(innerDiv);\n        document.body.appendChild(outerDiv);\n        if (outerDiv.scrollLeft > 0) $bdbd287fd4ad4690$var$cachedRTLResult = 'positive-descending';\n        else {\n            outerDiv.scrollLeft = 1;\n            if (outerDiv.scrollLeft === 0) $bdbd287fd4ad4690$var$cachedRTLResult = 'negative';\n            else $bdbd287fd4ad4690$var$cachedRTLResult = 'positive-ascending';\n        }\n        document.body.removeChild(outerDiv);\n        return $bdbd287fd4ad4690$var$cachedRTLResult;\n    }\n    return $bdbd287fd4ad4690$var$cachedRTLResult;\n}\nfunction $bdbd287fd4ad4690$export$1389d168952b34b5(node, direction) {\n    let { scrollLeft: scrollLeft  } = node;\n    // scrollLeft in rtl locales differs across browsers, so normalize.\n    // See comment by getRTLOffsetType below for details.\n    if (direction === 'rtl') {\n        let { scrollWidth: scrollWidth , clientWidth: clientWidth  } = node;\n        switch($bdbd287fd4ad4690$export$faf7630257ad4304()){\n            case 'negative':\n                scrollLeft = -scrollLeft;\n                break;\n            case 'positive-descending':\n                scrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n        }\n    }\n    return scrollLeft;\n}\nfunction $bdbd287fd4ad4690$export$ed5fd5ffe5ab0ac(node, direction, scrollLeft) {\n    if (direction === 'rtl') switch($bdbd287fd4ad4690$export$faf7630257ad4304()){\n        case 'negative':\n            scrollLeft = -scrollLeft;\n            break;\n        case 'positive-ascending':\n            break;\n        default:\n            {\n                const { clientWidth: clientWidth , scrollWidth: scrollWidth  } = node;\n                scrollLeft = scrollWidth - clientWidth - scrollLeft;\n                break;\n            }\n    }\n    node.scrollLeft = scrollLeft;\n}\n\n\n\n\n\n\n\nfunction $ea9606230722b6cd$var$ScrollView(props, ref) {\n    let { contentSize: contentSize , onVisibleRectChange: onVisibleRectChange , children: children , innerStyle: innerStyle , sizeToFit: sizeToFit , onScrollStart: onScrollStart , onScrollEnd: onScrollEnd , scrollDirection: scrollDirection = 'both' , ...otherProps } = props;\n    let defaultRef = $6Y8zc$useRef();\n    ref = ref || defaultRef;\n    let state = $6Y8zc$useRef({\n        scrollTop: 0,\n        scrollLeft: 0,\n        scrollEndTime: 0,\n        scrollTimeout: null,\n        width: 0,\n        height: 0,\n        isScrolling: false\n    }).current;\n    let { direction: direction  } = $6Y8zc$useLocale();\n    let [isScrolling, setScrolling] = $6Y8zc$useState(false);\n    let onScroll = $6Y8zc$useCallback((e)=>{\n        if (e.target !== e.currentTarget) return;\n        if (props.onScroll) props.onScroll(e);\n        $6Y8zc$flushSync(()=>{\n            let scrollTop = e.currentTarget.scrollTop;\n            let scrollLeft = $bdbd287fd4ad4690$export$1389d168952b34b5(e.currentTarget, direction);\n            // Prevent rubber band scrolling from shaking when scrolling out of bounds\n            state.scrollTop = Math.max(0, Math.min(scrollTop, contentSize.height - state.height));\n            state.scrollLeft = Math.max(0, Math.min(scrollLeft, contentSize.width - state.width));\n            onVisibleRectChange(new $6Y8zc$Rect(state.scrollLeft, state.scrollTop, state.width, state.height));\n            if (!state.isScrolling) {\n                state.isScrolling = true;\n                setScrolling(true);\n                if (onScrollStart) onScrollStart();\n            }\n            // So we don't constantly call clearTimeout and setTimeout,\n            // keep track of the current timeout time and only reschedule\n            // the timer when it is getting close.\n            let now = Date.now();\n            if (state.scrollEndTime <= now + 50) {\n                state.scrollEndTime = now + 300;\n                clearTimeout(state.scrollTimeout);\n                state.scrollTimeout = setTimeout(()=>{\n                    state.isScrolling = false;\n                    setScrolling(false);\n                    state.scrollTimeout = null;\n                    if (onScrollEnd) onScrollEnd();\n                }, 300);\n            }\n        });\n    }, [\n        props,\n        direction,\n        state,\n        contentSize,\n        onVisibleRectChange,\n        onScrollStart,\n        onScrollEnd\n    ]);\n    // eslint-disable-next-line arrow-body-style\n    $6Y8zc$useEffect(()=>{\n        return ()=>{\n            clearTimeout(state.scrollTimeout);\n        };\n    }, []);\n    let updateSize = $6Y8zc$useCallback(()=>{\n        let dom = ref.current;\n        if (!dom) return;\n        let w = dom.clientWidth;\n        let h = dom.clientHeight;\n        if (sizeToFit && contentSize.width > 0 && contentSize.height > 0) {\n            if (sizeToFit === 'width') w = Math.min(w, contentSize.width);\n            else if (sizeToFit === 'height') h = Math.min(h, contentSize.height);\n        }\n        if (state.width !== w || state.height !== h) {\n            state.width = w;\n            state.height = h;\n            onVisibleRectChange(new $6Y8zc$Rect(state.scrollLeft, state.scrollTop, w, h));\n        }\n    }, [\n        onVisibleRectChange,\n        ref,\n        state,\n        sizeToFit,\n        contentSize\n    ]);\n    $6Y8zc$useLayoutEffect(()=>{\n        updateSize();\n    }, [\n        updateSize\n    ]);\n    $6Y8zc$useResizeObserver({\n        ref: ref,\n        onResize: updateSize\n    });\n    let style = {\n        // Reset padding so that relative positioning works correctly. Padding will be done in JS layout.\n        padding: 0,\n        ...otherProps.style\n    };\n    if (scrollDirection === 'horizontal') {\n        style.overflowX = 'auto';\n        style.overflowY = 'hidden';\n    } else if (scrollDirection === 'vertical') {\n        style.overflowY = 'auto';\n        style.overflowX = 'hidden';\n    } else style.overflow = 'auto';\n    return(/*#__PURE__*/ $6Y8zc$react.createElement(\"div\", {\n        ...otherProps,\n        style: style,\n        ref: ref,\n        onScroll: onScroll\n    }, /*#__PURE__*/ $6Y8zc$react.createElement(\"div\", {\n        role: \"presentation\",\n        style: {\n            width: contentSize.width,\n            height: contentSize.height,\n            pointerEvents: isScrolling ? 'none' : 'auto',\n            position: 'relative',\n            ...innerStyle\n        }\n    }, children)));\n}\nconst $ea9606230722b6cd$export$5665e3d6be6adea = /*#__PURE__*/ $6Y8zc$react.forwardRef($ea9606230722b6cd$var$ScrollView);\n\n\nvar $59d9cc29f1abde27$exports = {};\n\n$parcel$export($59d9cc29f1abde27$exports, \"VirtualizerItem\", () => $59d9cc29f1abde27$export$6796df8ba7398521);\n$parcel$export($59d9cc29f1abde27$exports, \"layoutInfoToStyle\", () => $59d9cc29f1abde27$export$1481e64fbe01b8b3);\n\n\nvar $a699ae714be8549e$exports = {};\n\n$parcel$export($a699ae714be8549e$exports, \"useVirtualizerItem\", () => $a699ae714be8549e$export$1da781778207e0a2);\n\n\n\nfunction $a699ae714be8549e$export$1da781778207e0a2(options) {\n    let { reusableView: { layoutInfo: layoutInfo , virtualizer: virtualizer  } , ref: ref  } = options;\n    let updateSize = $6Y8zc$useCallback(()=>{\n        let size = $a699ae714be8549e$var$getSize(ref.current);\n        virtualizer.updateItemSize(layoutInfo.key, size);\n    }, [\n        virtualizer,\n        layoutInfo.key,\n        ref\n    ]);\n    $6Y8zc$useLayoutEffect(()=>{\n        if (layoutInfo.estimatedSize) updateSize();\n    });\n    return {\n        updateSize: updateSize\n    };\n}\nfunction $a699ae714be8549e$var$getSize(node) {\n    // Reset height before measuring so we get the intrinsic size\n    let height = node.style.height;\n    node.style.height = '';\n    let size = new $6Y8zc$Size(node.scrollWidth, node.scrollHeight);\n    node.style.height = height;\n    return size;\n}\n\n\nfunction $59d9cc29f1abde27$export$6796df8ba7398521(props) {\n    let { className: className , reusableView: reusableView , parent: parent  } = props;\n    let { direction: direction  } = $6Y8zc$useLocale();\n    let ref = $6Y8zc$useRef();\n    $a699ae714be8549e$export$1da781778207e0a2({\n        reusableView: reusableView,\n        ref: ref\n    });\n    return(/*#__PURE__*/ $6Y8zc$react.createElement(\"div\", {\n        role: \"presentation\",\n        ref: ref,\n        className: className,\n        style: $59d9cc29f1abde27$export$1481e64fbe01b8b3(reusableView.layoutInfo, direction, parent && parent.layoutInfo)\n    }, reusableView.rendered));\n}\nlet $59d9cc29f1abde27$var$cache = new WeakMap();\nfunction $59d9cc29f1abde27$export$1481e64fbe01b8b3(layoutInfo, dir, parent) {\n    let xProperty = dir === 'rtl' ? 'right' : 'left';\n    let cached = $59d9cc29f1abde27$var$cache.get(layoutInfo);\n    if (cached && cached[xProperty] != null) {\n        if (!parent) return cached;\n        // Invalidate if the parent position changed.\n        let top = layoutInfo.rect.y - parent.rect.y;\n        let x = layoutInfo.rect.x - parent.rect.x;\n        if (cached.top === top && cached[xProperty] === x) return cached;\n    }\n    let style = {\n        position: layoutInfo.isSticky ? 'sticky' : 'absolute',\n        overflow: layoutInfo.allowOverflow ? 'visible' : 'hidden',\n        top: layoutInfo.rect.y - (parent ? parent.rect.y : 0),\n        [xProperty]: layoutInfo.rect.x - (parent ? parent.rect.x : 0),\n        transition: 'all',\n        WebkitTransition: 'all',\n        WebkitTransitionDuration: 'inherit',\n        transitionDuration: 'inherit',\n        width: layoutInfo.rect.width,\n        height: layoutInfo.rect.height,\n        opacity: layoutInfo.opacity,\n        zIndex: layoutInfo.zIndex,\n        transform: layoutInfo.transform,\n        contain: layoutInfo.allowOverflow ? 'size layout style' : 'size layout style paint'\n    };\n    $59d9cc29f1abde27$var$cache.set(layoutInfo, style);\n    return style;\n}\n\n\nfunction $28b0c838a8280658$var$Virtualizer(props, ref) {\n    let { children: renderView , renderWrapper: renderWrapper , layout: layout , collection: collection , sizeToFit: sizeToFit , scrollDirection: scrollDirection , transitionDuration: transitionDuration , isLoading: isLoading , onLoadMore: onLoadMore , focusedKey: // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    focusedKey , shouldUseVirtualFocus: // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    shouldUseVirtualFocus , scrollToItem: // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    scrollToItem , ...otherProps } = props;\n    let fallbackRef = $6Y8zc$useRef();\n    ref = ref || fallbackRef;\n    let state = $6Y8zc$useVirtualizerState({\n        transitionDuration: transitionDuration,\n        layout: layout,\n        collection: collection,\n        renderView: renderView,\n        renderWrapper: renderWrapper || $28b0c838a8280658$var$defaultRenderWrapper,\n        onVisibleRectChange (rect) {\n            ref.current.scrollLeft = rect.x;\n            ref.current.scrollTop = rect.y;\n        }\n    });\n    let { virtualizerProps: virtualizerProps  } = $28b0c838a8280658$export$dd6d526d88b5a137(props, state, ref);\n    // Handle scrolling, and call onLoadMore when nearing the bottom.\n    let onVisibleRectChange = $6Y8zc$useCallback((rect)=>{\n        state.setVisibleRect(rect);\n        if (!isLoading && onLoadMore) {\n            let scrollOffset = state.virtualizer.contentSize.height - rect.height * 2;\n            if (rect.y > scrollOffset) onLoadMore();\n        }\n    }, [\n        isLoading,\n        onLoadMore,\n        state\n    ]);\n    $6Y8zc$useLayoutEffect(()=>{\n        if (!isLoading && onLoadMore && !state.isAnimating) {\n            if (state.contentSize.height > 0 && state.contentSize.height <= state.virtualizer.visibleRect.height) onLoadMore();\n        }\n    }, [\n        state.contentSize,\n        state.isAnimating,\n        state.virtualizer,\n        onLoadMore,\n        isLoading\n    ]);\n    return(/*#__PURE__*/ $6Y8zc$react.createElement($ea9606230722b6cd$export$5665e3d6be6adea, {\n        ...$6Y8zc$mergeProps(otherProps, virtualizerProps),\n        ref: ref,\n        innerStyle: state.isAnimating ? {\n            transition: `none ${state.virtualizer.transitionDuration}ms`\n        } : undefined,\n        contentSize: state.contentSize,\n        onVisibleRectChange: onVisibleRectChange,\n        onScrollStart: state.startScrolling,\n        onScrollEnd: state.endScrolling,\n        sizeToFit: sizeToFit,\n        scrollDirection: scrollDirection\n    }, state.visibleViews));\n}\nfunction $28b0c838a8280658$export$dd6d526d88b5a137(props, state, ref) {\n    let { focusedKey: focusedKey , scrollToItem: scrollToItem , shouldUseVirtualFocus: shouldUseVirtualFocus  } = props;\n    let { virtualizer: virtualizer  } = state;\n    // Scroll to the focusedKey when it changes. Actually focusing the focusedKey\n    // is up to the implementation using Virtualizer since we don't have refs\n    // to all of the item DOM nodes.\n    let lastFocusedKey = $6Y8zc$useRef(null);\n    $6Y8zc$useEffect(()=>{\n        if (virtualizer.visibleRect.height === 0) return;\n        if (focusedKey !== lastFocusedKey.current) {\n            if (scrollToItem) scrollToItem(focusedKey);\n            else virtualizer.scrollToItem(focusedKey, {\n                duration: 0\n            });\n        }\n        lastFocusedKey.current = focusedKey;\n    }, [\n        focusedKey,\n        virtualizer.visibleRect.height,\n        virtualizer,\n        lastFocusedKey,\n        scrollToItem\n    ]);\n    let isFocusWithin = $6Y8zc$useRef(false);\n    let onFocus = $6Y8zc$useCallback((e)=>{\n        // If the focused item is scrolled out of view and is not in the DOM, the collection\n        // will have tabIndex={0}. When tabbing in from outside, scroll the focused item into view.\n        // Ignore focus events that bubble through portals (e.g. focus that happens on a menu popover child of the virtualizer)\n        if (!isFocusWithin.current && ref.current.contains(e.target)) {\n            if (scrollToItem) scrollToItem(focusedKey);\n            else virtualizer.scrollToItem(focusedKey, {\n                duration: 0\n            });\n        }\n        isFocusWithin.current = e.target !== ref.current;\n    }, [\n        ref,\n        virtualizer,\n        focusedKey,\n        scrollToItem\n    ]);\n    let onBlur = $6Y8zc$useCallback((e)=>{\n        isFocusWithin.current = ref.current.contains(e.relatedTarget);\n    }, [\n        ref\n    ]);\n    // When the focused item is scrolled out of view and is removed from the DOM,\n    // move focus to the collection view as a whole if focus was within before.\n    let focusedView = virtualizer.getView(focusedKey);\n    $6Y8zc$useEffect(()=>{\n        if (focusedKey && !focusedView && isFocusWithin.current && document.activeElement !== ref.current) $6Y8zc$focusWithoutScrolling(ref.current);\n    });\n    // Set tabIndex to -1 if the focused view is in the DOM, otherwise 0 so that the collection\n    // itself is tabbable. When the collection receives focus, we scroll the focused item back into\n    // view, which will allow it to be properly focused. If using virtual focus, don't set a\n    // tabIndex at all so that VoiceOver on iOS 14 doesn't try to move real DOM focus to the element anyway.\n    let tabIndex;\n    if (!shouldUseVirtualFocus) tabIndex = focusedView ? -1 : 0;\n    return {\n        virtualizerProps: {\n            tabIndex: tabIndex,\n            onFocus: onFocus,\n            onBlur: onBlur\n        }\n    };\n}\n// forwardRef doesn't support generic parameters, so cast the result to the correct type\n// https://stackoverflow.com/questions/58469229/react-with-typescript-generics-while-using-react-forwardref\nconst $28b0c838a8280658$export$89be5a243e59c4b2 = /*#__PURE__*/ $6Y8zc$react.forwardRef($28b0c838a8280658$var$Virtualizer);\nfunction $28b0c838a8280658$var$defaultRenderWrapper(parent, reusableView) {\n    return(/*#__PURE__*/ $6Y8zc$react.createElement($59d9cc29f1abde27$export$6796df8ba7398521, {\n        key: reusableView.key,\n        reusableView: reusableView,\n        parent: parent\n    }));\n}\n\n\n\n\n\n\n\n\nexport {$28b0c838a8280658$export$dd6d526d88b5a137 as useVirtualizer, $28b0c838a8280658$export$89be5a243e59c4b2 as Virtualizer, $a699ae714be8549e$export$1da781778207e0a2 as useVirtualizerItem, $59d9cc29f1abde27$export$6796df8ba7398521 as VirtualizerItem, $59d9cc29f1abde27$export$1481e64fbe01b8b3 as layoutInfoToStyle, $ea9606230722b6cd$export$5665e3d6be6adea as ScrollView, $bdbd287fd4ad4690$export$faf7630257ad4304 as getRTLOffsetType, $bdbd287fd4ad4690$export$1389d168952b34b5 as getScrollLeft, $bdbd287fd4ad4690$export$ed5fd5ffe5ab0ac as setScrollLeft};\n//# sourceMappingURL=module.js.map\n","import {Rect as $dqiJs$Rect, LayoutInfo as $dqiJs$LayoutInfo, Size as $dqiJs$Size, Layout as $dqiJs$Layout} from \"@react-stately/virtualizer\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $279c20a4a0c8d128$exports = {};\n\n$parcel$export($279c20a4a0c8d128$exports, \"ListLayout\", () => $279c20a4a0c8d128$export$cacbb3924155d68e);\n\nconst $279c20a4a0c8d128$var$DEFAULT_HEIGHT = 48;\nclass $279c20a4a0c8d128$export$cacbb3924155d68e extends $dqiJs$Layout {\n    getLayoutInfo(key) {\n        return this.layoutInfos.get(key);\n    }\n    getVisibleLayoutInfos(rect) {\n        let res = [];\n        let addNodes = (nodes)=>{\n            for (let node of nodes)if (this.isVisible(node, rect)) {\n                res.push(node.layoutInfo);\n                if (node.header) res.push(node.header);\n                if (node.children) addNodes(node.children);\n            }\n        };\n        addNodes(this.rootNodes);\n        return res;\n    }\n    isVisible(node, rect) {\n        return node.layoutInfo.rect.intersects(rect) || node.layoutInfo.isSticky;\n    }\n    validate(invalidationContext) {\n        // Invalidate cache if the size of the collection changed.\n        // In this case, we need to recalculate the entire layout.\n        this.invalidateEverything = invalidationContext.sizeChanged;\n        this.collection = this.virtualizer.collection;\n        this.rootNodes = this.buildCollection();\n        // Remove deleted layout nodes\n        if (this.lastCollection) {\n            for (let key of this.lastCollection.getKeys())if (!this.collection.getItem(key)) {\n                let layoutNode = this.layoutNodes.get(key);\n                if (layoutNode) {\n                    var ref;\n                    this.layoutInfos.delete(layoutNode.layoutInfo.key);\n                    this.layoutInfos.delete((ref = layoutNode.header) === null || ref === void 0 ? void 0 : ref.key);\n                    this.layoutNodes.delete(key);\n                }\n            }\n        }\n        this.lastWidth = this.virtualizer.visibleRect.width;\n        this.lastCollection = this.collection;\n    }\n    buildCollection() {\n        let y = this.padding;\n        let nodes = [];\n        const visibleNodes = [...this.collection.getKeys()].map(key => this.collection.getItem(key));\n        for (let node of visibleNodes){\n            let layoutNode = this.buildChild(node, 0, y);\n            y = layoutNode.layoutInfo.rect.maxY;\n            nodes.push(layoutNode);\n        }\n        if (this.isLoading) {\n            var _loaderHeight;\n            let rect = new $dqiJs$Rect(0, y, this.virtualizer.visibleRect.width, (_loaderHeight = this.loaderHeight) !== null && _loaderHeight !== void 0 ? _loaderHeight : this.virtualizer.visibleRect.height);\n            let loader = new $dqiJs$LayoutInfo('loader', 'loader', rect);\n            this.layoutInfos.set('loader', loader);\n            nodes.push({\n                layoutInfo: loader\n            });\n            y = loader.rect.maxY;\n        }\n        if (nodes.length === 0) {\n            var _placeholderHeight;\n            let rect = new $dqiJs$Rect(0, y, this.virtualizer.visibleRect.width, (_placeholderHeight = this.placeholderHeight) !== null && _placeholderHeight !== void 0 ? _placeholderHeight : this.virtualizer.visibleRect.height);\n            let placeholder = new $dqiJs$LayoutInfo('placeholder', 'placeholder', rect);\n            this.layoutInfos.set('placeholder', placeholder);\n            nodes.push({\n                layoutInfo: placeholder\n            });\n            y = placeholder.rect.maxY;\n        }\n        this.contentSize = new $dqiJs$Size(this.virtualizer.visibleRect.width, y + this.padding);\n        return nodes;\n    }\n    buildChild(node, x, y) {\n        let cached = this.layoutNodes.get(node.key);\n        if (!this.invalidateEverything && cached && cached.node === node && y === (cached.header || cached.layoutInfo).rect.y) return cached;\n        let layoutNode = this.buildNode(node, x, y);\n        layoutNode.node = node;\n        layoutNode.layoutInfo.parentKey = node.parentKey || null;\n        this.layoutInfos.set(layoutNode.layoutInfo.key, layoutNode.layoutInfo);\n        if (layoutNode.header) this.layoutInfos.set(layoutNode.header.key, layoutNode.header);\n        this.layoutNodes.set(node.key, layoutNode);\n        return layoutNode;\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case 'section':\n                return this.buildSection(node, x, y);\n            case 'item':\n                return this.buildItem(node, x, y);\n        }\n    }\n    buildSection(node, x, y) {\n        let width = this.virtualizer.visibleRect.width;\n        let rectHeight = this.headingHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode && previousLayoutNode.header) {\n                let curNode = this.collection.getItem(node.key);\n                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n                rectHeight = previousLayoutNode.header.rect.height;\n                isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.header.estimatedSize;\n            } else {\n                rectHeight = node.rendered ? this.estimatedHeadingHeight : 0;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $279c20a4a0c8d128$var$DEFAULT_HEIGHT;\n        let headerRect = new $dqiJs$Rect(0, y, width, rectHeight);\n        let header = new $dqiJs$LayoutInfo('header', node.key + ':header', headerRect);\n        header.estimatedSize = isEstimated;\n        header.parentKey = node.key;\n        y += header.rect.height;\n        let rect = new $dqiJs$Rect(0, y, width, 0);\n        let layoutInfo = new $dqiJs$LayoutInfo(node.type, node.key, rect);\n        let startY = y;\n        let children = [];\n        for (let child of node.childNodes){\n            let layoutNode = this.buildChild(child, x, y);\n            y = layoutNode.layoutInfo.rect.maxY;\n            children.push(layoutNode);\n        }\n        rect.height = y - startY;\n        return {\n            header: header,\n            layoutInfo: layoutInfo,\n            children: children\n        };\n    }\n    buildItem(node, x, y) {\n        let width = this.virtualizer.visibleRect.width;\n        let rectHeight = this.rowHeight;\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (rectHeight == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                let curNode = this.collection.getItem(node.key);\n                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n                rectHeight = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = width !== this.lastWidth || curNode !== lastNode || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                rectHeight = this.estimatedRowHeight;\n                isEstimated = true;\n            }\n        }\n        if (rectHeight == null) rectHeight = $279c20a4a0c8d128$var$DEFAULT_HEIGHT;\n        if (typeof this.indentationForItem === 'function') x += this.indentationForItem(this.collection, node.key) || 0;\n        let rect = new $dqiJs$Rect(x, y, width - x, rectHeight);\n        let layoutInfo = new $dqiJs$LayoutInfo(node.type, node.key, rect);\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo\n        };\n    }\n    updateItemSize(key, size) {\n        let layoutInfo = this.layoutInfos.get(key);\n        // If no layoutInfo, item has been deleted/removed.\n        if (!layoutInfo) return false;\n        layoutInfo.estimatedSize = false;\n        if (layoutInfo.rect.height !== size.height) {\n            // Copy layout info rather than mutating so that later caches are invalidated.\n            let newLayoutInfo = layoutInfo.copy();\n            newLayoutInfo.rect.height = size.height;\n            this.layoutInfos.set(key, newLayoutInfo);\n            // Invalidate layout for this layout node and all parents\n            this.updateLayoutNode(key, layoutInfo, newLayoutInfo);\n            let node = this.collection.getItem(layoutInfo.parentKey);\n            while(node){\n                this.updateLayoutNode(node.key, layoutInfo, newLayoutInfo);\n                node = this.collection.getItem(node.parentKey);\n            }\n            return true;\n        }\n        return false;\n    }\n    updateLayoutNode(key, oldLayoutInfo, newLayoutInfo) {\n        let n = this.layoutNodes.get(key);\n        if (n) {\n            // Invalidate by clearing node.\n            n.node = null;\n            // Replace layout info in LayoutNode\n            if (n.header === oldLayoutInfo) n.header = newLayoutInfo;\n            else if (n.layoutInfo === oldLayoutInfo) n.layoutInfo = newLayoutInfo;\n        }\n    }\n    getContentSize() {\n        return this.contentSize;\n    }\n    getKeyAbove(key) {\n        let collection = this.collection;\n        key = collection.getKeyBefore(key);\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n            key = collection.getKeyBefore(key);\n        }\n    }\n    getKeyBelow(key) {\n        let collection = this.collection;\n        key = collection.getKeyAfter(key);\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n            key = collection.getKeyAfter(key);\n        }\n    }\n    getKeyPageAbove(key) {\n        let layoutInfo = this.getLayoutInfo(key);\n        if (layoutInfo) {\n            let pageY = Math.max(0, layoutInfo.rect.y + layoutInfo.rect.height - this.virtualizer.visibleRect.height);\n            while(layoutInfo && layoutInfo.rect.y > pageY){\n                let keyAbove = this.getKeyAbove(layoutInfo.key);\n                layoutInfo = this.getLayoutInfo(keyAbove);\n            }\n            if (layoutInfo) return layoutInfo.key;\n        }\n        return this.getFirstKey();\n    }\n    getKeyPageBelow(key) {\n        let layoutInfo = this.getLayoutInfo(key != null ? key : this.getFirstKey());\n        if (layoutInfo) {\n            let pageY = Math.min(this.virtualizer.contentSize.height, layoutInfo.rect.y - layoutInfo.rect.height + this.virtualizer.visibleRect.height);\n            while(layoutInfo && layoutInfo.rect.y < pageY){\n                let keyBelow = this.getKeyBelow(layoutInfo.key);\n                layoutInfo = this.getLayoutInfo(keyBelow);\n            }\n            if (layoutInfo) return layoutInfo.key;\n        }\n        return this.getLastKey();\n    }\n    getFirstKey() {\n        let collection = this.collection;\n        let key = collection.getFirstKey();\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n            key = collection.getKeyAfter(key);\n        }\n    }\n    getLastKey() {\n        let collection = this.collection;\n        let key = collection.getLastKey();\n        while(key != null){\n            let item = collection.getItem(key);\n            if (item.type === 'item' && !this.disabledKeys.has(item.key)) return key;\n            key = collection.getKeyBefore(key);\n        }\n    }\n    getKeyForSearch(search, fromKey) {\n        if (!this.collator) return null;\n        let collection = this.collection;\n        let key = fromKey || this.getFirstKey();\n        while(key != null){\n            let item = collection.getItem(key);\n            let substring = item.textValue.slice(0, search.length);\n            if (item.textValue && this.collator.compare(substring, search) === 0) return key;\n            key = this.getKeyBelow(key);\n        }\n        return null;\n    }\n    // getDragTarget(point: Point): DragTarget {\n    //   let visible = this.getVisibleLayoutInfos(new Rect(point.x, point.y, 1, 1));\n    //   if (visible.length > 0) {\n    //     visible = visible.sort((a, b) => b.zIndex - a.zIndex);\n    //     return {\n    //       type: 'item',\n    //       key: visible[0].key\n    //     };\n    //   }\n    //   return null;\n    // }\n    // getDropTarget(point: Point): DropTarget {\n    //   let key = this.virtualizer.keyAtPoint(point);\n    //   if (key) {\n    //     return {\n    //       type: 'item',\n    //       key,\n    //       dropPosition: DropPosition.ON\n    //     };\n    //   }\n    //   return null;\n    // }\n    getInitialLayoutInfo(layoutInfo) {\n        layoutInfo.opacity = 0;\n        layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n        return layoutInfo;\n    }\n    getFinalLayoutInfo(layoutInfo) {\n        layoutInfo.opacity = 0;\n        layoutInfo.transform = 'scale3d(0.8, 0.8, 0.8)';\n        return layoutInfo;\n    }\n    /**\n   * Creates a new ListLayout with options. See the list of properties below for a description\n   * of the options that can be provided.\n   */ constructor(options = {\n    }){\n        super();\n        this.disabledKeys = new Set();\n        this.rowHeight = options.rowHeight;\n        this.estimatedRowHeight = options.estimatedRowHeight;\n        this.headingHeight = options.headingHeight;\n        this.estimatedHeadingHeight = options.estimatedHeadingHeight;\n        this.padding = options.padding || 0;\n        this.indentationForItem = options.indentationForItem;\n        this.collator = options.collator;\n        this.loaderHeight = options.loaderHeight;\n        this.placeholderHeight = options.placeholderHeight;\n        this.layoutInfos = new Map();\n        this.layoutNodes = new Map();\n        this.rootNodes = [];\n        this.lastWidth = 0;\n        this.lastCollection = null;\n    }\n}\n\n\nvar $b4e598180eb9d802$exports = {};\n\n$parcel$export($b4e598180eb9d802$exports, \"TableLayout\", () => $b4e598180eb9d802$export$62444c3c724b1b20);\n\n\nclass $b4e598180eb9d802$export$62444c3c724b1b20 extends $279c20a4a0c8d128$export$cacbb3924155d68e {\n    buildCollection() {\n        // If columns changed, clear layout cache.\n        if (!this.lastCollection || this.collection.columns.length !== this.lastCollection.columns.length || this.collection.columns.some((c, i)=>c.key !== this.lastCollection.columns[i].key\n        )) // Invalidate everything in this layout pass. Will be reset in ListLayout on the next pass.\n        this.invalidateEverything = true;\n        // Track whether we were previously loading. This is used to adjust the animations of async loading vs inserts.\n        let loadingState = this.collection.body.props.loadingState;\n        this.wasLoading = this.isLoading;\n        this.isLoading = loadingState === 'loading' || loadingState === 'loadingMore';\n        this.buildColumnWidths();\n        let header = this.buildHeader();\n        let body = this.buildBody(0);\n        body.layoutInfo.rect.width = Math.max(header.layoutInfo.rect.width, body.layoutInfo.rect.width);\n        this.contentSize = new $dqiJs$Size(body.layoutInfo.rect.width, body.layoutInfo.rect.maxY);\n        return [\n            header,\n            body\n        ];\n    }\n    buildColumnWidths() {\n        this.columnWidths = new Map();\n        this.stickyColumnIndices = [];\n        // Pass 1: set widths for all explicitly defined columns.\n        let remainingColumns = new Set();\n        let remainingSpace = this.virtualizer.visibleRect.width;\n        for (let column of this.collection.columns){\n            let props = column.props;\n            var _width;\n            let width = (_width = props.width) !== null && _width !== void 0 ? _width : this.getDefaultWidth(props);\n            if (width != null) {\n                let w = this.parseWidth(width);\n                this.columnWidths.set(column.key, w);\n                remainingSpace -= w;\n            } else remainingColumns.add(column);\n            // The selection cell and any other sticky columns always need to be visible.\n            // In addition, row headers need to be in the DOM for accessibility labeling.\n            if (column.props.isSelectionCell || this.collection.rowHeaderColumnKeys.has(column.key)) this.stickyColumnIndices.push(column.index);\n        }\n        // Pass 2: if there are remaining columns, then distribute the remaining space evenly.\n        if (remainingColumns.size > 0) {\n            let columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n            for (let column of remainingColumns){\n                let props = column.props;\n                let minWidth = props.minWidth != null ? this.parseWidth(props.minWidth) : 75;\n                let maxWidth = props.maxWidth != null ? this.parseWidth(props.maxWidth) : Infinity;\n                let width = Math.max(minWidth, Math.min(maxWidth, columnWidth));\n                this.columnWidths.set(column.key, width);\n                remainingSpace -= width;\n                if (width !== columnWidth) columnWidth = remainingSpace / (this.collection.columns.length - this.columnWidths.size);\n            }\n        }\n    }\n    parseWidth(width) {\n        if (typeof width === 'string') {\n            let match = width.match(/^(\\d+)%$/);\n            if (!match) throw new Error('Only percentages are supported as column widths');\n            return this.virtualizer.visibleRect.width * (parseInt(match[1], 10) / 100);\n        }\n        return width;\n    }\n    buildHeader() {\n        let rect = new $dqiJs$Rect(0, 0, 0, 0);\n        let layoutInfo = new $dqiJs$LayoutInfo('header', 'header', rect);\n        let y = 0;\n        let width = 0;\n        let children = [];\n        for (let headerRow of this.collection.headerRows){\n            let layoutNode = this.buildChild(headerRow, 0, y);\n            layoutNode.layoutInfo.parentKey = 'header';\n            y = layoutNode.layoutInfo.rect.maxY;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            children.push(layoutNode);\n        }\n        rect.width = width;\n        rect.height = y;\n        this.layoutInfos.set('header', layoutInfo);\n        return {\n            layoutInfo: layoutInfo,\n            children: children\n        };\n    }\n    buildHeaderRow(headerRow, x, y) {\n        let rect = new $dqiJs$Rect(0, y, 0, 0);\n        let row = new $dqiJs$LayoutInfo('headerrow', headerRow.key, rect);\n        let height = 0;\n        let columns = [];\n        for (let cell of headerRow.childNodes){\n            let layoutNode = this.buildChild(cell, x, y);\n            layoutNode.layoutInfo.parentKey = row.key;\n            x = layoutNode.layoutInfo.rect.maxX;\n            height = Math.max(height, layoutNode.layoutInfo.rect.height);\n            columns.push(layoutNode);\n        }\n        this.setChildHeights(columns, height);\n        rect.height = height;\n        rect.width = x;\n        return {\n            layoutInfo: row,\n            children: columns\n        };\n    }\n    setChildHeights(children, height) {\n        for (let child of children)if (child.layoutInfo.rect.height !== height) {\n            // Need to copy the layout info before we mutate it.\n            child.layoutInfo = child.layoutInfo.copy();\n            this.layoutInfos.set(child.layoutInfo.key, child.layoutInfo);\n            child.layoutInfo.rect.height = height;\n        }\n    }\n    getColumnWidth(node) {\n        var _colspan;\n        let colspan = (_colspan = node.colspan) !== null && _colspan !== void 0 ? _colspan : 1;\n        let width = 0;\n        for(let i = 0; i < colspan; i++){\n            let column = this.collection.columns[node.index + i];\n            width += this.columnWidths.get(column.key);\n        }\n        return width;\n    }\n    getEstimatedHeight(node, width, height, estimatedHeight) {\n        let isEstimated = false;\n        // If no explicit height is available, use an estimated height.\n        if (height == null) {\n            // If a previous version of this layout info exists, reuse its height.\n            // Mark as estimated if the size of the overall collection view changed,\n            // or the content of the item changed.\n            let previousLayoutNode = this.layoutNodes.get(node.key);\n            if (previousLayoutNode) {\n                let curNode = this.collection.getItem(node.key);\n                let lastNode = this.lastCollection ? this.lastCollection.getItem(node.key) : null;\n                height = previousLayoutNode.layoutInfo.rect.height;\n                isEstimated = curNode !== lastNode || width !== previousLayoutNode.layoutInfo.rect.width || previousLayoutNode.layoutInfo.estimatedSize;\n            } else {\n                height = estimatedHeight;\n                isEstimated = true;\n            }\n        }\n        return {\n            height: height,\n            isEstimated: isEstimated\n        };\n    }\n    buildColumn(node, x, y) {\n        var ref;\n        let width = this.getColumnWidth(node);\n        let { height: height , isEstimated: isEstimated  } = this.getEstimatedHeight(node, width, this.headingHeight, this.estimatedHeadingHeight);\n        let rect = new $dqiJs$Rect(x, y, width, height);\n        let layoutInfo = new $dqiJs$LayoutInfo(node.type, node.key, rect);\n        layoutInfo.isSticky = (ref = node.props) === null || ref === void 0 ? void 0 : ref.isSelectionCell;\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo\n        };\n    }\n    buildBody(y) {\n        let rect = new $dqiJs$Rect(0, y, 0, 0);\n        let layoutInfo = new $dqiJs$LayoutInfo('rowgroup', 'body', rect);\n        let startY = y;\n        let width = 0;\n        let children = [];\n        for (let node of this.collection.body.childNodes){\n            let layoutNode = this.buildChild(node, 0, y);\n            layoutNode.layoutInfo.parentKey = 'body';\n            y = layoutNode.layoutInfo.rect.maxY;\n            width = Math.max(width, layoutNode.layoutInfo.rect.width);\n            children.push(layoutNode);\n        }\n        if (this.isLoading) {\n            let rect = new $dqiJs$Rect(0, y, width || this.virtualizer.visibleRect.width, children.length === 0 ? this.virtualizer.visibleRect.height : 60);\n            let loader = new $dqiJs$LayoutInfo('loader', 'loader', rect);\n            loader.parentKey = 'body';\n            loader.isSticky = children.length === 0;\n            this.layoutInfos.set('loader', loader);\n            children.push({\n                layoutInfo: loader\n            });\n            y = loader.rect.maxY;\n            width = Math.max(width, rect.width);\n        } else if (children.length === 0) {\n            let rect = new $dqiJs$Rect(0, y, this.virtualizer.visibleRect.width, this.virtualizer.visibleRect.height);\n            let empty = new $dqiJs$LayoutInfo('empty', 'empty', rect);\n            empty.parentKey = 'body';\n            empty.isSticky = true;\n            this.layoutInfos.set('empty', empty);\n            children.push({\n                layoutInfo: empty\n            });\n            y = empty.rect.maxY;\n            width = Math.max(width, rect.width);\n        }\n        rect.width = width;\n        rect.height = y - startY;\n        this.layoutInfos.set('body', layoutInfo);\n        return {\n            layoutInfo: layoutInfo,\n            children: children\n        };\n    }\n    buildNode(node, x, y) {\n        switch(node.type){\n            case 'headerrow':\n                return this.buildHeaderRow(node, x, y);\n            case 'item':\n                return this.buildRow(node, x, y);\n            case 'column':\n            case 'placeholder':\n                return this.buildColumn(node, x, y);\n            case 'cell':\n                return this.buildCell(node, x, y);\n            default:\n                throw new Error('Unknown node type ' + node.type);\n        }\n    }\n    buildRow(node, x, y) {\n        let rect = new $dqiJs$Rect(x, y, 0, 0);\n        let layoutInfo = new $dqiJs$LayoutInfo('row', node.key, rect);\n        let children = [];\n        let height = 0;\n        for (let child of node.childNodes){\n            let layoutNode = this.buildChild(child, x, y);\n            x = layoutNode.layoutInfo.rect.maxX;\n            height = Math.max(height, layoutNode.layoutInfo.rect.height);\n            children.push(layoutNode);\n        }\n        this.setChildHeights(children, height);\n        rect.width = x;\n        rect.height = height + 1; // +1 for bottom border\n        return {\n            layoutInfo: layoutInfo,\n            children: children\n        };\n    }\n    buildCell(node, x, y) {\n        var ref;\n        let width = this.getColumnWidth(node);\n        let { height: height , isEstimated: isEstimated  } = this.getEstimatedHeight(node, width, this.rowHeight, this.estimatedRowHeight);\n        let rect = new $dqiJs$Rect(x, y, width, height);\n        let layoutInfo = new $dqiJs$LayoutInfo(node.type, node.key, rect);\n        layoutInfo.isSticky = (ref = node.props) === null || ref === void 0 ? void 0 : ref.isSelectionCell;\n        layoutInfo.zIndex = layoutInfo.isSticky ? 2 : 1;\n        layoutInfo.estimatedSize = isEstimated;\n        return {\n            layoutInfo: layoutInfo\n        };\n    }\n    getVisibleLayoutInfos(rect) {\n        let res = [];\n        for (let node of this.rootNodes){\n            res.push(node.layoutInfo);\n            this.addVisibleLayoutInfos(res, node, rect);\n        }\n        return res;\n    }\n    addVisibleLayoutInfos(res, node, rect) {\n        if (!node.children || node.children.length === 0) return;\n        switch(node.layoutInfo.type){\n            case 'header':\n                for (let child of node.children){\n                    res.push(child.layoutInfo);\n                    this.addVisibleLayoutInfos(res, child, rect);\n                }\n                break;\n            case 'rowgroup':\n                {\n                    let firstVisibleRow = this.binarySearch(node.children, rect.topLeft, 'y');\n                    let lastVisibleRow = this.binarySearch(node.children, rect.bottomRight, 'y');\n                    for(let i = firstVisibleRow; i <= lastVisibleRow; i++){\n                        res.push(node.children[i].layoutInfo);\n                        this.addVisibleLayoutInfos(res, node.children[i], rect);\n                    }\n                    break;\n                }\n            case 'headerrow':\n            case 'row':\n                {\n                    let firstVisibleCell = this.binarySearch(node.children, rect.topLeft, 'x');\n                    let lastVisibleCell = this.binarySearch(node.children, rect.topRight, 'x');\n                    let stickyIndex = 0;\n                    for(let i = firstVisibleCell; i <= lastVisibleCell; i++){\n                        // Sticky columns and row headers are always in the DOM. Interleave these\n                        // with the visible range so that they are in the right order.\n                        if (stickyIndex < this.stickyColumnIndices.length) {\n                            let idx = this.stickyColumnIndices[stickyIndex];\n                            while(idx < i){\n                                res.push(node.children[idx].layoutInfo);\n                                idx = this.stickyColumnIndices[stickyIndex++];\n                            }\n                        }\n                        res.push(node.children[i].layoutInfo);\n                    }\n                    while(stickyIndex < this.stickyColumnIndices.length){\n                        let idx = this.stickyColumnIndices[stickyIndex++];\n                        res.push(node.children[idx].layoutInfo);\n                    }\n                    break;\n                }\n            default:\n                throw new Error('Unknown node type ' + node.layoutInfo.type);\n        }\n    }\n    binarySearch(items, point, axis) {\n        let low = 0;\n        let high = items.length - 1;\n        while(low <= high){\n            let mid = low + high >> 1;\n            let item = items[mid];\n            if (axis === 'x' && item.layoutInfo.rect.maxX < point.x || axis === 'y' && item.layoutInfo.rect.maxY < point.y) low = mid + 1;\n            else if (axis === 'x' && item.layoutInfo.rect.x > point.x || axis === 'y' && item.layoutInfo.rect.y > point.y) high = mid - 1;\n            else return mid;\n        }\n        return Math.max(0, Math.min(items.length - 1, low));\n    }\n    getInitialLayoutInfo(layoutInfo) {\n        let res = super.getInitialLayoutInfo(layoutInfo);\n        // If this insert was the result of async loading, remove the zoom effect and just keep the fade in.\n        if (this.wasLoading) res.transform = null;\n        return res;\n    }\n    constructor(options){\n        super(options);\n        this.wasLoading = false;\n        this.isLoading = false;\n        this.getDefaultWidth = options.getDefaultWidth;\n    }\n}\n\n\n\n\nexport {$279c20a4a0c8d128$export$cacbb3924155d68e as ListLayout, $b4e598180eb9d802$export$62444c3c724b1b20 as TableLayout};\n//# sourceMappingURL=module.js.map\n","import {useState as $hj7DF$useState, useMemo as $hj7DF$useMemo, useEffect as $hj7DF$useEffect, useCallback as $hj7DF$useCallback} from \"react\";\nimport {useLayoutEffect as $hj7DF$useLayoutEffect} from \"@react-aria/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $bb4fde2f44642f8c$exports = {};\n\n$parcel$export($bb4fde2f44642f8c$exports, \"Layout\", () => $bb4fde2f44642f8c$export$c84671f46d6a1ca);\nclass $bb4fde2f44642f8c$export$c84671f46d6a1ca {\n    /**\n   * Returns whether the layout should invalidate in response to\n   * visible rectangle changes. By default, it only invalidates\n   * when the collection view's size changes. Return true always\n   * to make the layout invalidate while scrolling (e.g. sticky headers).\n   */ shouldInvalidate(newRect, oldRect) {\n        // By default, invalidate when the size changes\n        return newRect.width !== oldRect.width || newRect.height !== oldRect.height;\n    }\n    /**\n   * This method allows the layout to perform any pre-computation\n   * it needs to in order to prepare {@link LayoutInfo}s for retrieval.\n   * Called by the collection view before {@link getVisibleLayoutInfos}\n   * or {@link getLayoutInfo} are called.\n   */ validate(invalidationContext) {\n    }\n    /**\n   * Returns a {@link DragTarget} describing a view at the given point to be dragged.\n   * Return `null` to cancel the drag. The default implementation returns the view at the given point.\n   * @param point The point at which the drag occurred.\n   */ // getDragTarget(point: Point): DragTarget | null {\n    //   let target = this.virtualizer.keyAtPoint(point);\n    //   if (!target) {\n    //     return null;\n    //   }\n    //   return {\n    //     type: 'item',\n    //     key: target\n    //   };\n    // }\n    /**\n   * Returns a {@link DragTarget} object describing where a drop should occur. Return `null`\n   * to reject the drop. The dropped items will be inserted before the resulting target.\n   * @param point The point at which the drop occurred.\n   */ // getDropTarget(point: Point): DropTarget | null {\n    //   return null;\n    // }\n    /**\n   * Returns the starting attributes for an animated insertion.\n   * The view is animated from this {@link LayoutInfo} to the one returned by {@link getLayoutInfo}.\n   * The default implementation just returns its input.\n   *\n   * @param layoutInfo The proposed LayoutInfo for this view.\n   */ getInitialLayoutInfo(layoutInfo) {\n        return layoutInfo;\n    }\n    /**\n   * Returns the ending attributes for an animated removal.\n   * The view is animated from the {@link LayoutInfo} returned by {@link getLayoutInfo}\n   * to the one returned by this method. The default implementation returns its input.\n   *\n   * @param layoutInfo The original LayoutInfo for this view.\n   */ getFinalLayoutInfo(layoutInfo) {\n        return layoutInfo;\n    }\n}\n\n\nvar $8a0cec6d6c841a11$exports = {};\n\n$parcel$export($8a0cec6d6c841a11$exports, \"LayoutInfo\", () => $8a0cec6d6c841a11$export$7e0eeb9da702a085);\nclass $8a0cec6d6c841a11$export$7e0eeb9da702a085 {\n    /**\n   * Returns a copy of the LayoutInfo.\n   */ copy() {\n        let res = new $8a0cec6d6c841a11$export$7e0eeb9da702a085(this.type, this.key, this.rect.copy());\n        res.estimatedSize = this.estimatedSize;\n        res.opacity = this.opacity;\n        res.transform = this.transform;\n        res.parentKey = this.parentKey;\n        res.isSticky = this.isSticky;\n        res.zIndex = this.zIndex;\n        res.allowOverflow = this.allowOverflow;\n        return res;\n    }\n    /**\n   * @param type A string representing the view type. Should be `'item'` for item views.\n                            Other types are used by supplementary views.\n   * @param key The unique key for this view.\n   * @param rect The rectangle describing the size and position of this view.\n   */ constructor(type, key, rect){\n        this.type = type;\n        this.key = key;\n        this.parentKey = null;\n        this.rect = rect;\n        this.estimatedSize = false;\n        this.isSticky = false;\n        this.opacity = 1;\n        this.transform = null;\n        this.zIndex = 0;\n        this.allowOverflow = false;\n    }\n}\n\n\nvar $c18941612b0d3405$exports = {};\n\n$parcel$export($c18941612b0d3405$exports, \"Point\", () => $c18941612b0d3405$export$baf26146a414f24a);\nclass $c18941612b0d3405$export$baf26146a414f24a {\n    /**\n   * Returns a copy of this point.\n   */ copy() {\n        return new $c18941612b0d3405$export$baf26146a414f24a(this.x, this.y);\n    }\n    /**\n   * Checks if two points are equal.\n   */ equals(point) {\n        return this.x === point.x && this.y === point.y;\n    }\n    /**\n   * Returns true if this point is the origin.\n   */ isOrigin() {\n        return this.x === 0 && this.y === 0;\n    }\n    constructor(x = 0, y = 0){\n        this.x = x;\n        this.y = y;\n    }\n}\n\n\nvar $5ace01ed35ef4cc5$exports = {};\n\n$parcel$export($5ace01ed35ef4cc5$exports, \"Rect\", () => $5ace01ed35ef4cc5$export$c79fc6492f3af13d);\n\nclass $5ace01ed35ef4cc5$export$c79fc6492f3af13d {\n    /**\n   * The maximum x-coordinate in the rectangle.\n   */ get maxX() {\n        return this.x + this.width;\n    }\n    /**\n   * The maximum y-coordinate in the rectangle.\n   */ get maxY() {\n        return this.y + this.height;\n    }\n    /**\n   * The area of the rectangle.\n   */ get area() {\n        return this.width * this.height;\n    }\n    /**\n   * The top left corner of the rectangle.\n   */ get topLeft() {\n        return new $c18941612b0d3405$export$baf26146a414f24a(this.x, this.y);\n    }\n    /**\n   * The top right corner of the rectangle.\n   */ get topRight() {\n        return new $c18941612b0d3405$export$baf26146a414f24a(this.maxX, this.y);\n    }\n    /**\n   * The bottom left corner of the rectangle.\n   */ get bottomLeft() {\n        return new $c18941612b0d3405$export$baf26146a414f24a(this.x, this.maxY);\n    }\n    /**\n   * The bottom right corner of the rectangle.\n   */ get bottomRight() {\n        return new $c18941612b0d3405$export$baf26146a414f24a(this.maxX, this.maxY);\n    }\n    /**\n   * Returns whether this rectangle intersects another rectangle.\n   * @param rect - The rectangle to check.\n   */ intersects(rect) {\n        return this.x <= rect.x + rect.width && rect.x <= this.x + this.width && this.y <= rect.y + rect.height && rect.y <= this.y + this.height;\n    }\n    /**\n   * Returns whether this rectangle fully contains another rectangle.\n   * @param rect - The rectangle to check.\n   */ containsRect(rect) {\n        return this.x <= rect.x && this.y <= rect.y && this.maxX >= rect.maxX && this.maxY >= rect.maxY;\n    }\n    /**\n   * Returns whether the rectangle contains the given point.\n   * @param point - The point to check.\n   */ containsPoint(point) {\n        return this.x <= point.x && this.y <= point.y && this.maxX >= point.x && this.maxY >= point.y;\n    }\n    /**\n   * Returns the first corner of this rectangle (from top to bottom, left to right)\n   * that is contained in the given rectangle, or null of the rectangles do not intersect.\n   * @param rect - The rectangle to check.\n   */ getCornerInRect(rect) {\n        for (let key of [\n            'topLeft',\n            'topRight',\n            'bottomLeft',\n            'bottomRight'\n        ]){\n            if (rect.containsPoint(this[key])) return key;\n        }\n        return null;\n    }\n    equals(rect) {\n        return rect.x === this.x && rect.y === this.y && rect.width === this.width && rect.height === this.height;\n    }\n    pointEquals(point) {\n        return this.x === point.x && this.y === point.y;\n    }\n    sizeEquals(size) {\n        return this.width === size.width && this.height === size.height;\n    }\n    /**\n   * Returns a copy of this rectangle.\n   */ copy() {\n        return new $5ace01ed35ef4cc5$export$c79fc6492f3af13d(this.x, this.y, this.width, this.height);\n    }\n    constructor(x = 0, y = 0, width = 0, height = 0){\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n}\n\n\nvar $11c050b799ca8bfd$exports = {};\n\n$parcel$export($11c050b799ca8bfd$exports, \"Size\", () => $11c050b799ca8bfd$export$cb6da89c6af1a8ec);\nclass $11c050b799ca8bfd$export$cb6da89c6af1a8ec {\n    /**\n   * Returns a copy of this size.\n   */ copy() {\n        return new $11c050b799ca8bfd$export$cb6da89c6af1a8ec(this.width, this.height);\n    }\n    /**\n   * Returns whether this size is equal to another one.\n   */ equals(other) {\n        return this.width === other.width && this.height === other.height;\n    }\n    constructor(width = 0, height = 0){\n        this.width = width;\n        this.height = height;\n    }\n}\n\n\nvar $d987d203ab974fe7$exports = {};\n\n$parcel$export($d987d203ab974fe7$exports, \"ReusableView\", () => $d987d203ab974fe7$export$1a5223887c560441);\nlet $d987d203ab974fe7$var$KEY = 0;\nclass $d987d203ab974fe7$export$1a5223887c560441 {\n    /**\n   * Prepares the view for reuse. Called just before the view is removed from the DOM.\n   */ prepareForReuse() {\n        this.content = null;\n        this.rendered = null;\n        this.layoutInfo = null;\n    }\n    constructor(virtualizer){\n        this.virtualizer = virtualizer;\n        this.key = ++$d987d203ab974fe7$var$KEY;\n    }\n}\n\n\nvar $b9814fb1baf5e2e6$exports = {};\n\n$parcel$export($b9814fb1baf5e2e6$exports, \"useVirtualizerState\", () => $b9814fb1baf5e2e6$export$1505db82fe357e65);\n\n\n\n\n// use high res timer if available\nlet $df2f6dab2097e0f1$var$perf = typeof window !== 'undefined' ? window.performance : null;\n// @ts-ignore\nlet $df2f6dab2097e0f1$var$perfNow = $df2f6dab2097e0f1$var$perf && ($df2f6dab2097e0f1$var$perf.now || $df2f6dab2097e0f1$var$perf.webkitNow || $df2f6dab2097e0f1$var$perf.msNow || $df2f6dab2097e0f1$var$perf.mozNow);\nlet $df2f6dab2097e0f1$var$getTime = $df2f6dab2097e0f1$var$perfNow ? $df2f6dab2097e0f1$var$perfNow.bind($df2f6dab2097e0f1$var$perf) : function() {\n    return Date.now ? Date.now() : new Date().getTime();\n};\nlet $df2f6dab2097e0f1$var$fixTs;\nfunction $df2f6dab2097e0f1$export$dc0b63720788090c(begin, end, duration, ease, fn) {\n    let canceled = false;\n    let raf_id;\n    let promise = new Promise((resolve)=>{\n        let start = $df2f6dab2097e0f1$var$getTime();\n        let diffX = end.x - begin.x;\n        let diffY = end.y - begin.y;\n        raf_id = requestAnimationFrame(function run(t) {\n            // if we're using a high res timer, make sure timestamp is not the old epoch-based value.\n            // http://updates.html5rocks.com/2012/05/requestAnimationFrame-API-now-with-sub-millisecond-precision\n            if ($df2f6dab2097e0f1$var$fixTs == null) $df2f6dab2097e0f1$var$fixTs = t > 1000000000000 !== $df2f6dab2097e0f1$var$getTime() > 1000000000000;\n            if ($df2f6dab2097e0f1$var$fixTs) t = $df2f6dab2097e0f1$var$getTime();\n            // check if we're done\n            let delta = t - start;\n            if (delta > duration) {\n                fn(end);\n                resolve();\n            } else {\n                // call frame callback after computing eased time and get the next frame\n                let proceed = fn(new $c18941612b0d3405$export$baf26146a414f24a(begin.x + diffX * ease(delta / duration), begin.y + diffY * ease(delta / duration)));\n                if (proceed !== false && !canceled) raf_id = requestAnimationFrame(run);\n            }\n        });\n    });\n    promise.cancel = function() {\n        canceled = true;\n        cancelAnimationFrame(raf_id);\n    };\n    return promise;\n}\nfunction $df2f6dab2097e0f1$export$77860c106b4a6a2e(t) {\n    return t;\n}\nfunction $df2f6dab2097e0f1$export$57636bb43b1ccbb0(t) {\n    return Math.sin(t * Math.PI / 2);\n}\n\n\nfunction $87ac0dc1eab4d828$export$37a26b283fd7740e(a, b) {\n    let res = new Set();\n    for (let key of a.keys())if (!b.has(key)) res.add(key);\n    return res;\n}\nfunction $87ac0dc1eab4d828$export$acaf96a27438246b(a, b) {\n    let toRemove = $87ac0dc1eab4d828$export$37a26b283fd7740e(a, b);\n    let toAdd = $87ac0dc1eab4d828$export$37a26b283fd7740e(b, a);\n    let toUpdate = new Set;\n    for (let key of a.keys())if (b.has(key)) toUpdate.add(key);\n    return {\n        toRemove: toRemove,\n        toAdd: toAdd,\n        toUpdate: toUpdate\n    };\n}\nfunction* $87ac0dc1eab4d828$export$cfc14088dfefce5f(...iterators) {\n    for (let iterator of iterators)yield* iterator;\n}\nfunction $87ac0dc1eab4d828$export$6897c284b6f9f4dc(object) {\n    let res = {\n    };\n    for(let key in object)res[object[key]] = key;\n    return res;\n}\n\n\n\n\nclass $23a0943f854e7414$var$RollingAverage {\n    addSample(sample) {\n        this.count++;\n        this.value += (sample - this.value) / this.count;\n    }\n    constructor(){\n        this.count = 0;\n        this.value = 0;\n    }\n}\nclass $23a0943f854e7414$export$4455ee6afb38dcbb {\n    setVisibleRect(rect) {\n        let time = performance.now() - this.startTime;\n        if (time < 500) {\n            this.averageTime.addSample(time);\n            if (rect.x !== this.visibleRect.x && time > 0) this.velocity.x = (rect.x - this.visibleRect.x) / time;\n            if (rect.y !== this.visibleRect.y && time > 0) this.velocity.y = (rect.y - this.visibleRect.y) / time;\n        }\n        this.startTime = performance.now();\n        this.visibleRect = rect;\n    }\n    collectMetrics() {\n        let time = performance.now() - this.startTime;\n        if (time < 500) this.averagePerf.addSample(time);\n        if (this.visibleRect.height > 0) {\n            let o = Math.abs(this.velocity.y * (this.averageTime.value + this.averagePerf.value));\n            this.overscanY.addSample(o);\n        }\n        if (this.visibleRect.width > 0) {\n            let o = Math.abs(this.velocity.x * (this.averageTime.value + this.averagePerf.value));\n            this.overscanX.addSample(o);\n        }\n    }\n    getOverscannedRect() {\n        let overscanned = this.visibleRect.copy();\n        let overscanY = Math.round(Math.min(this.visibleRect.height * 2, this.overscanY.value) / 100) * 100;\n        if (this.velocity.y > 0) {\n            overscanned.y -= overscanY * 0.2;\n            overscanned.height += overscanY + overscanY * 0.2;\n        } else {\n            overscanned.y -= overscanY;\n            overscanned.height += overscanY + overscanY * 0.2;\n        }\n        let overscanX = Math.round(Math.min(this.visibleRect.width * 2, this.overscanX.value) / 100) * 100;\n        if (this.velocity.x > 0) {\n            overscanned.x -= overscanX * 0.2;\n            overscanned.width += overscanX + overscanX * 0.2;\n        } else {\n            overscanned.x -= overscanX;\n            overscanned.width += overscanX + overscanX * 0.2;\n        }\n        return overscanned;\n    }\n    constructor(){\n        this.startTime = 0;\n        this.averagePerf = new $23a0943f854e7414$var$RollingAverage();\n        this.averageTime = new $23a0943f854e7414$var$RollingAverage();\n        this.velocity = new $c18941612b0d3405$export$baf26146a414f24a(5, 5);\n        this.overscanX = new $23a0943f854e7414$var$RollingAverage();\n        this.overscanY = new $23a0943f854e7414$var$RollingAverage();\n        this.visibleRect = new $5ace01ed35ef4cc5$export$c79fc6492f3af13d();\n    }\n}\n\n\n\n\n\n\nclass $8d8490b32c62e2b1$export$febc5573c75cefb0 {\n    constructor(){\n        this.level = 0;\n        this.actions = [];\n        this.animated = true;\n        this.initialMap = new Map();\n        this.finalMap = new Map();\n        this.initialLayoutInfo = new Map();\n        this.finalLayoutInfo = new Map();\n        this.removed = new Map();\n        this.toRemove = new Map();\n    }\n}\n\n\nclass $65bed7ce80fa8795$export$89be5a243e59c4b2 {\n    _setContentSize(size) {\n        this._contentSize = size;\n        this.delegate.setContentSize(size);\n    }\n    _setContentOffset(offset) {\n        let rect = new $5ace01ed35ef4cc5$export$c79fc6492f3af13d(offset.x, offset.y, this._visibleRect.width, this._visibleRect.height);\n        this.delegate.setVisibleRect(rect);\n    }\n    /**\n   * Get the size of the scrollable content.\n   */ get contentSize() {\n        return this._contentSize;\n    }\n    /**\n   * Get the collection view's currently visible rectangle.\n   */ get visibleRect() {\n        return this._visibleRect;\n    }\n    /**\n   * Set the collection view's currently visible rectangle.\n   */ set visibleRect(rect) {\n        this._setVisibleRect(rect);\n    }\n    _setVisibleRect(rect, forceUpdate = false) {\n        let current = this._visibleRect;\n        // Ignore if the rects are equal\n        if (rect.equals(current)) return;\n        if (this.shouldOverscan) this._overscanManager.setVisibleRect(rect);\n        let shouldInvalidate = this.layout && this.layout.shouldInvalidate(rect, this._visibleRect);\n        this._resetAnimatedContentOffset();\n        this._visibleRect = rect;\n        if (shouldInvalidate) this.relayout({\n            offsetChanged: !rect.pointEquals(current),\n            sizeChanged: !rect.sizeEquals(current)\n        });\n        else this.updateSubviews(forceUpdate);\n    }\n    get collection() {\n        return this._collection;\n    }\n    set collection(data) {\n        this._setData(data);\n    }\n    _setData(data) {\n        if (data === this._collection) return;\n        if (this._collection) this._runTransaction(()=>{\n            this._collection = data;\n        }, this.transitionDuration > 0);\n        else {\n            this._collection = data;\n            this.reloadData();\n        }\n    }\n    /**\n   * Reloads the data from the data source and relayouts the collection view.\n   * Does not animate any changes. Equivalent to re-assigning the same data source\n   * to the collection view.\n   */ reloadData() {\n        this.relayout({\n            contentChanged: true\n        });\n    }\n    /**\n   * Returns the item with the given key.\n   */ getItem(key) {\n        return this._collection ? this._collection.getItem(key) : null;\n    }\n    /**\n   * Get the collection view's layout.\n   */ get layout() {\n        return this._layout;\n    }\n    /**\n   * Set the collection view's layout.\n   */ set layout(layout) {\n        this.setLayout(layout);\n    }\n    /**\n   * Sets the collection view's layout, optionally with an animated transition\n   * from the current layout to the new layout.\n   * @param layout The layout to switch to.\n   * @param animated Whether to animate the layout change.\n   */ setLayout(layout, animated = false) {\n        if (layout === this._layout) return;\n        let applyLayout = ()=>{\n            if (this._layout) // @ts-ignore\n            this._layout.virtualizer = null;\n            layout.virtualizer = this;\n            this._layout = layout;\n        };\n        if (animated) // Animated layout transitions are really simple, thanks to our transaction support.\n        // We just set the layout inside a transaction action, which runs after the initial\n        // layout infos for the animation are retrieved from the previous layout. Then, the\n        // final layout infos are retrieved from the new layout, and animations occur.\n        this._runTransaction(applyLayout);\n        else {\n            applyLayout();\n            this.relayout();\n        }\n    }\n    _getReuseType(layoutInfo, content) {\n        if (layoutInfo.type === 'item' && content) {\n            let type = this.delegate.getType ? this.delegate.getType(content) : 'item';\n            let reuseType = type === 'item' ? 'item' : layoutInfo.type + '_' + type;\n            return {\n                type: type,\n                reuseType: reuseType\n            };\n        }\n        return {\n            type: layoutInfo.type,\n            reuseType: layoutInfo.type\n        };\n    }\n    getReusableView(layoutInfo) {\n        let content = this.getItem(layoutInfo.key);\n        let { reuseType: reuseType  } = this._getReuseType(layoutInfo, content);\n        if (!this._reusableViews[reuseType]) this._reusableViews[reuseType] = [];\n        let reusable = this._reusableViews[reuseType];\n        let view = reusable.length > 0 ? reusable.pop() : new $d987d203ab974fe7$export$1a5223887c560441(this);\n        view.viewType = reuseType;\n        if (!this._animatedContentOffset.isOrigin()) {\n            layoutInfo = layoutInfo.copy();\n            layoutInfo.rect.x += this._animatedContentOffset.x;\n            layoutInfo.rect.y += this._animatedContentOffset.y;\n        }\n        view.layoutInfo = layoutInfo;\n        this._renderView(view);\n        return view;\n    }\n    _renderView(reusableView) {\n        let { type: type , key: key  } = reusableView.layoutInfo;\n        reusableView.content = this.getItem(key);\n        reusableView.rendered = this._renderContent(type, reusableView.content);\n    }\n    _renderContent(type, content) {\n        let cached = this._renderedContent.get(content);\n        if (cached != null) return cached;\n        let rendered = this.delegate.renderView(type, content);\n        if (content) this._renderedContent.set(content, rendered);\n        return rendered;\n    }\n    /**\n   * Returns an array of all currently visible views, including both\n   * item views and supplementary views.\n   */ get visibleViews() {\n        return Array.from(this._visibleViews.values());\n    }\n    /**\n   * Gets the visible view for the given type and key. Returns null if\n   * the view is not currently visible.\n   *\n   * @param key The key of the view to retrieve.\n   */ getView(key) {\n        return this._visibleViews.get(key) || null;\n    }\n    /**\n   * Returns an array of visible views matching the given type.\n   * @param type The view type to find.\n   */ getViewsOfType(type) {\n        return this.visibleViews.filter((v)=>v.layoutInfo && v.layoutInfo.type === type\n        );\n    }\n    /**\n   * Returns the key for the given view. Returns null\n   * if the view is not currently visible.\n   */ keyForView(view) {\n        if (view && view.layoutInfo) return view.layoutInfo.key;\n        return null;\n    }\n    /**\n   * Returns the key for the item view currently at the given point.\n   */ keyAtPoint(point) {\n        let rect = new $5ace01ed35ef4cc5$export$c79fc6492f3af13d(point.x, point.y, 1, 1);\n        let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n        let layoutInfo = layoutInfos[0];\n        if (!layoutInfo) return null;\n        return layoutInfo.key;\n    }\n    /**\n   * Cleanup for when the Virtualizer will be unmounted.\n   */ willUnmount() {\n        cancelAnimationFrame(this._relayoutRaf);\n    }\n    /**\n   * Triggers a layout invalidation, and updates the visible subviews.\n   */ relayout(context = {\n    }) {\n        // Ignore relayouts while animating the scroll position\n        if (this._scrollAnimation || typeof requestAnimationFrame === 'undefined') return;\n        // If we already scheduled a relayout, extend the invalidation\n        // context so we coalesce multiple relayouts in the same frame.\n        if (this._invalidationContext) {\n            Object.assign(this._invalidationContext, context);\n            return;\n        }\n        this._invalidationContext = context;\n        this._relayoutRaf = requestAnimationFrame(()=>{\n            this._relayoutRaf = null;\n            this.relayoutNow();\n        });\n    }\n    /**\n   * Performs a relayout immediately. Prefer {@link relayout} over this method\n   * where possible, since it coalesces multiple layout passes in the same tick.\n   */ relayoutNow(context = this._invalidationContext || {\n    }) {\n        // Cancel the scheduled relayout, since we're doing it now.\n        if (this._relayoutRaf) {\n            cancelAnimationFrame(this._relayoutRaf);\n            this._relayoutRaf = null;\n            // Update the provided context with the current invalidationContext since we are cancelling\n            // a scheduled relayoutNow call that has this._invalidationContext set as its default context arg (relayoutNow() in relayout)\n            context = {\n                ...this._invalidationContext,\n                ...context\n            };\n        }\n        // Reset the invalidation context\n        this._invalidationContext = null;\n        // Do nothing if we don't have a layout or content, or we are\n        // in the middle of an animated scroll transition.\n        if (!this.layout || !this._collection || this._scrollAnimation) return;\n        let scrollAnchor = this._getScrollAnchor();\n        // Trigger the beforeLayout hook, if provided\n        if (typeof context.beforeLayout === 'function') context.beforeLayout();\n        // Validate the layout\n        this.layout.validate(context);\n        this._setContentSize(this.layout.getContentSize());\n        // Trigger the afterLayout hook, if provided\n        if (typeof context.afterLayout === 'function') context.afterLayout();\n        // Adjust scroll position based on scroll anchor, and constrain.\n        // If the content changed, scroll to the top.\n        let visibleRect = this.getVisibleRect();\n        let restoredScrollAnchor = this._restoreScrollAnchor(scrollAnchor, context);\n        let contentOffsetX = context.contentChanged ? 0 : restoredScrollAnchor.x;\n        let contentOffsetY = context.contentChanged ? 0 : restoredScrollAnchor.y;\n        contentOffsetX = Math.max(0, Math.min(this.contentSize.width - visibleRect.width, contentOffsetX));\n        contentOffsetY = Math.max(0, Math.min(this.contentSize.height - visibleRect.height, contentOffsetY));\n        let hasLayoutUpdates = false;\n        if (contentOffsetX !== visibleRect.x || contentOffsetY !== visibleRect.y) {\n            // If this is an animated relayout, we do not immediately scroll because it would be jittery.\n            // Save the difference between the current and new content offsets, and apply it to the\n            // individual content items instead. At the end of the animation, we'll reset and set the\n            // scroll offset for real. This ensures jitter-free animation since we don't need to sync\n            // the scroll animation and the content animation.\n            if (context.animated || !this._animatedContentOffset.isOrigin()) {\n                this._animatedContentOffset.x += visibleRect.x - contentOffsetX;\n                this._animatedContentOffset.y += visibleRect.y - contentOffsetY;\n                hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n            } else this._setContentOffset(new $c18941612b0d3405$export$baf26146a414f24a(contentOffsetX, contentOffsetY));\n        } else hasLayoutUpdates = this.updateSubviews(context.contentChanged);\n        // Apply layout infos, unless this is coming from an animated transaction\n        if (!(context.transaction && context.animated)) this._applyLayoutInfos();\n        // Wait for animations, and apply the afterAnimation hook, if provided\n        if (context.animated && hasLayoutUpdates) {\n            this._enableTransitions();\n            let done = ()=>{\n                this._disableTransitions();\n                // Reset scroll position after animations (see above comment).\n                if (!this._animatedContentOffset.isOrigin()) {\n                    // Get the content offset to scroll to, taking _animatedContentOffset into account.\n                    let { x: x , y: y  } = this.getVisibleRect();\n                    this._resetAnimatedContentOffset();\n                    this._setContentOffset(new $c18941612b0d3405$export$baf26146a414f24a(x, y));\n                }\n                if (typeof context.afterAnimation === 'function') context.afterAnimation();\n            };\n            // Sometimes the animation takes slightly longer than expected.\n            setTimeout(done, this.transitionDuration + 100);\n            return;\n        } else if (typeof context.afterAnimation === 'function') context.afterAnimation();\n    }\n    /**\n   * Corrects DOM order of visible views to match item order of collection.\n   */ _correctItemOrder() {\n        // Defer until after scrolling and animated transactions are complete\n        if (this._isScrolling || this._transaction) return;\n        for (let key of this._visibleLayoutInfos.keys()){\n            let view = this._visibleViews.get(key);\n            this._children.delete(view);\n            this._children.add(view);\n        }\n    }\n    _enableTransitions() {\n        this.delegate.beginAnimations();\n    }\n    _disableTransitions() {\n        this.delegate.endAnimations();\n    }\n    _getScrollAnchor() {\n        if (!this.anchorScrollPosition) return null;\n        let visibleRect = this.getVisibleRect();\n        // Ask the delegate to provide a scroll anchor, if possible\n        if (this.delegate.getScrollAnchor) {\n            let key = this.delegate.getScrollAnchor(visibleRect);\n            if (key) {\n                let layoutInfo = this.layout.getLayoutInfo(key);\n                let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n                if (corner) {\n                    let key = layoutInfo.key;\n                    let offset = layoutInfo.rect[corner].y - visibleRect.y;\n                    return {\n                        key: key,\n                        layoutInfo: layoutInfo,\n                        corner: corner,\n                        offset: offset\n                    };\n                }\n            }\n        }\n        // No need to anchor the scroll position if it is at the top\n        if (visibleRect.y === 0 && !this.anchorScrollPositionAtTop) return null;\n        // Find a view with a visible corner that has the smallest distance to the top of the collection view\n        let cornerAnchor = null;\n        for (let [key, view] of this._visibleViews){\n            let layoutInfo = view.layoutInfo;\n            if (layoutInfo && layoutInfo.rect.area > 0) {\n                let corner = layoutInfo.rect.getCornerInRect(visibleRect);\n                if (corner) {\n                    let offset = layoutInfo.rect[corner].y - visibleRect.y;\n                    if (!cornerAnchor || offset < cornerAnchor.offset) cornerAnchor = {\n                        key: key,\n                        layoutInfo: layoutInfo,\n                        corner: corner,\n                        offset: offset\n                    };\n                }\n            }\n        }\n        return cornerAnchor;\n    }\n    _restoreScrollAnchor(scrollAnchor, context) {\n        let contentOffset = this.getVisibleRect();\n        if (scrollAnchor) {\n            var ref;\n            let finalAnchor = ((ref = context.transaction) === null || ref === void 0 ? void 0 : ref.animated) ? context.transaction.finalMap.get(scrollAnchor.key) : this.layout.getLayoutInfo(scrollAnchor.layoutInfo.key);\n            if (finalAnchor) {\n                let adjustment = finalAnchor.rect[scrollAnchor.corner].y - contentOffset.y - scrollAnchor.offset;\n                contentOffset.y += adjustment;\n            }\n        }\n        return contentOffset;\n    }\n    getVisibleRect() {\n        let v = this.visibleRect;\n        let x = v.x - this._animatedContentOffset.x;\n        let y = v.y - this._animatedContentOffset.y;\n        return new $5ace01ed35ef4cc5$export$c79fc6492f3af13d(x, y, v.width, v.height);\n    }\n    getVisibleLayoutInfos() {\n        let rect = this.shouldOverscan ? this._overscanManager.getOverscannedRect() : this.getVisibleRect();\n        this._visibleLayoutInfos = this._getLayoutInfoMap(rect);\n        return this._visibleLayoutInfos;\n    }\n    _getLayoutInfoMap(rect, copy = false) {\n        let layoutInfos = this.layout.getVisibleLayoutInfos(rect);\n        let map = new Map;\n        for (let layoutInfo of layoutInfos){\n            if (copy) layoutInfo = layoutInfo.copy();\n            map.set(layoutInfo.key, layoutInfo);\n        }\n        return map;\n    }\n    updateSubviews(forceUpdate = false) {\n        if (!this._collection) return;\n        let visibleLayoutInfos = this.getVisibleLayoutInfos();\n        let currentlyVisible = this._visibleViews;\n        let toAdd, toRemove, toUpdate;\n        // If this is a force update, remove and re-add all views.\n        // Otherwise, find and update the diff.\n        if (forceUpdate) {\n            toAdd = visibleLayoutInfos;\n            toRemove = currentlyVisible;\n            toUpdate = new Set();\n        } else {\n            ({ toAdd: toAdd , toRemove: toRemove , toUpdate: toUpdate  } = $87ac0dc1eab4d828$export$acaf96a27438246b(currentlyVisible, visibleLayoutInfos));\n            for (let key of toUpdate){\n                let view = currentlyVisible.get(key);\n                if (!view || !view.layoutInfo) continue;\n                let item = this.getItem(visibleLayoutInfos.get(key).key);\n                if (view.content === item) toUpdate.delete(key);\n                else {\n                    // If the view type changes, delete and recreate the view instead of updating\n                    let { reuseType: reuseType  } = this._getReuseType(view.layoutInfo, item);\n                    if (view.viewType !== reuseType) {\n                        toUpdate.delete(key);\n                        toAdd.add(key);\n                        toRemove.add(key);\n                    }\n                }\n            }\n            // We are done if the sets are equal\n            if (toAdd.size === 0 && toRemove.size === 0 && toUpdate.size === 0) {\n                if (this._transaction) this._applyLayoutInfos();\n                return;\n            }\n        }\n        // Track views that should be removed. They are not removed from\n        // the DOM immediately, since we may reuse and need to re-insert\n        // them back into the DOM anyway.\n        let removed = new Set();\n        for (let key of toRemove.keys()){\n            let view = this._visibleViews.get(key);\n            if (view) {\n                removed.add(view);\n                this._visibleViews.delete(key);\n                // If we are in the middle of a transaction, wait until the end\n                // of the animations to remove the views from the DOM. Also means\n                // we can't reuse those views immediately.\n                if (this._transaction) this._transaction.toRemove.set(key, view);\n                else this.reuseView(view);\n            }\n        }\n        for (let key1 of toAdd.keys()){\n            let layoutInfo = visibleLayoutInfos.get(key1);\n            let view;\n            // If we're in a transaction, and a layout change happens\n            // during the animations such that a view that was going\n            // to be removed is now not, we don't create a new view\n            // since the old one is still in the DOM, marked as toRemove.\n            if (this._transaction) {\n                // if transaction, get initial layout attributes for the animation\n                if (this._transaction.initialLayoutInfo.has(key1)) layoutInfo = this._transaction.initialLayoutInfo.get(key1);\n                view = this._transaction.toRemove.get(key1);\n                if (view) {\n                    this._transaction.toRemove.delete(key1);\n                    this._applyLayoutInfo(view, layoutInfo);\n                }\n            }\n            if (!view) {\n                // Create or reuse a view for this row\n                view = this.getReusableView(layoutInfo);\n                // Add the view to the DOM if needed\n                if (!removed.has(view)) this._children.add(view);\n            }\n            this._visibleViews.set(key1, view);\n            removed.delete(view);\n        }\n        for (let key2 of toUpdate){\n            let view = currentlyVisible.get(key2);\n            this._renderedContent.delete(key2);\n            this._renderView(view);\n        }\n        // Remove the remaining rows to delete from the DOM\n        if (!this._transaction) this.removeViews(removed);\n        this._correctItemOrder();\n        this._flushVisibleViews();\n        let hasLayoutUpdates = this._transaction && (toAdd.size > 0 || toRemove.size > 0 || this._hasLayoutUpdates());\n        if (hasLayoutUpdates) requestAnimationFrame(()=>{\n            // If we're in a transaction, apply animations to visible views\n            // and \"to be removed\" views, which animate off screen.\n            if (this._transaction) requestAnimationFrame(()=>this._applyLayoutInfos()\n            );\n        });\n        return hasLayoutUpdates;\n    }\n    afterRender() {\n        if (this.shouldOverscan) this._overscanManager.collectMetrics();\n    }\n    _flushVisibleViews() {\n        // CollectionVirtualizer deals with a flattened set of LayoutInfos, but they can represent heirarchy\n        // by referencing a parentKey. Just before rendering the visible views, we rebuild this heirarchy\n        // by creating a mapping of views by parent key and recursively calling the delegate's renderWrapper\n        // method to build the final tree.\n        let viewsByParentKey = new Map([\n            [\n                null,\n                []\n            ]\n        ]);\n        for (let view1 of this._children){\n            if (!viewsByParentKey.has(view1.layoutInfo.parentKey)) viewsByParentKey.set(view1.layoutInfo.parentKey, []);\n            viewsByParentKey.get(view1.layoutInfo.parentKey).push(view1);\n            if (!viewsByParentKey.has(view1.layoutInfo.key)) viewsByParentKey.set(view1.layoutInfo.key, []);\n        }\n        let buildTree = (parent, views)=>views.map((view)=>{\n                let children = viewsByParentKey.get(view.layoutInfo.key);\n                return this.delegate.renderWrapper(parent, view, children, (childViews)=>buildTree(view, childViews)\n                );\n            })\n        ;\n        let children1 = buildTree(null, viewsByParentKey.get(null));\n        this.delegate.setVisibleViews(children1);\n    }\n    _applyLayoutInfo(view, layoutInfo) {\n        if (view.layoutInfo === layoutInfo) return false;\n        view.layoutInfo = layoutInfo;\n        return true;\n    }\n    _applyLayoutInfos() {\n        let updated = false;\n        // Apply layout infos to visible views\n        for (let view of this._visibleViews.values()){\n            let cur = view.layoutInfo;\n            if (cur) {\n                let layoutInfo = this.layout.getLayoutInfo(cur.key);\n                if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n            }\n        }\n        // Apply final layout infos for views that will be removed\n        if (this._transaction) {\n            for (let view of this._transaction.toRemove.values()){\n                let cur = view.layoutInfo;\n                let layoutInfo = this.layout.getLayoutInfo(cur.key);\n                if (this._applyLayoutInfo(view, layoutInfo)) updated = true;\n            }\n            for (let view2 of this._transaction.removed.values()){\n                let cur = view2.layoutInfo;\n                let layoutInfo = this._transaction.finalLayoutInfo.get(cur.key) || cur;\n                layoutInfo = this.layout.getFinalLayoutInfo(layoutInfo.copy());\n                if (this._applyLayoutInfo(view2, layoutInfo)) updated = true;\n            }\n        }\n        if (updated) this._flushVisibleViews();\n    }\n    _hasLayoutUpdates() {\n        if (!this._transaction) return false;\n        for (let view of this._visibleViews.values()){\n            let cur = view.layoutInfo;\n            if (!cur) return true;\n            let layoutInfo = this.layout.getLayoutInfo(cur.key);\n            if (// Uses equals rather than pointEquals so that width/height changes are taken into account\n            !cur.rect.equals(layoutInfo.rect) || cur.opacity !== layoutInfo.opacity || cur.transform !== layoutInfo.transform) return true;\n        }\n        return false;\n    }\n    reuseView(view) {\n        view.prepareForReuse();\n        this._reusableViews[view.viewType].push(view);\n    }\n    removeViews(toRemove) {\n        for (let view of toRemove)this._children.delete(view);\n    }\n    updateItemSize(key, size) {\n        // TODO: we should be able to invalidate a single index path\n        // @ts-ignore\n        if (!this.layout.updateItemSize) return;\n        // If the scroll position is currently animating, add the update\n        // to a queue to be processed after the animation is complete.\n        if (this._scrollAnimation) {\n            this._sizeUpdateQueue.set(key, size);\n            return;\n        }\n        // @ts-ignore\n        let changed = this.layout.updateItemSize(key, size);\n        if (changed) this.relayout();\n    }\n    startScrolling() {\n        this._isScrolling = true;\n    }\n    endScrolling() {\n        this._isScrolling = false;\n        this._correctItemOrder();\n        this._flushVisibleViews();\n    }\n    _resetAnimatedContentOffset() {\n        // Reset the animated content offset of subviews. See comment in relayoutNow for details.\n        if (!this._animatedContentOffset.isOrigin()) {\n            this._animatedContentOffset = new $c18941612b0d3405$export$baf26146a414f24a(0, 0);\n            this._applyLayoutInfos();\n        }\n    }\n    /**\n   * Scrolls the item with the given key into view, optionally with an animation.\n   * @param key The key of the item to scroll into view.\n   * @param duration The duration of the scroll animation.\n   */ scrollToItem(key, options) {\n        // key can be 0, so check if null or undefined\n        if (key == null) return;\n        let layoutInfo = this.layout.getLayoutInfo(key);\n        if (!layoutInfo) return;\n        let { duration: duration = 300 , shouldScrollX: shouldScrollX = true , shouldScrollY: shouldScrollY = true , offsetX: offsetX = 0 , offsetY: offsetY = 0  } = options;\n        let x = this.visibleRect.x;\n        let y = this.visibleRect.y;\n        let minX = layoutInfo.rect.x - offsetX;\n        let minY = layoutInfo.rect.y - offsetY;\n        let maxX = x + this.visibleRect.width;\n        let maxY = y + this.visibleRect.height;\n        if (shouldScrollX) {\n            if (minX <= x || maxX === 0) x = minX;\n            else if (layoutInfo.rect.maxX > maxX) x += layoutInfo.rect.maxX - maxX;\n        }\n        if (shouldScrollY) {\n            if (minY <= y || maxY === 0) y = minY;\n            else if (layoutInfo.rect.maxY > maxY) y += layoutInfo.rect.maxY - maxY;\n        }\n        return this.scrollTo(new $c18941612b0d3405$export$baf26146a414f24a(x, y), duration);\n    }\n    /**\n   * Performs an animated scroll to the given offset.\n   * @param offset - The offset to scroll to.\n   * @param duration The duration of the animation.\n   * @returns A promise that resolves when the animation is complete.\n   */ scrollTo(offset1, duration = 300) {\n        // Cancel the current scroll animation\n        if (this._scrollAnimation) {\n            this._scrollAnimation.cancel();\n            this._scrollAnimation = null;\n        }\n        // Set the content offset synchronously if the duration is zero\n        if (duration <= 0 || this.visibleRect.pointEquals(offset1)) {\n            this._setContentOffset(offset1);\n            return Promise.resolve();\n        }\n        this.startScrolling();\n        this._scrollAnimation = $df2f6dab2097e0f1$export$dc0b63720788090c(this.visibleRect, offset1, duration, $df2f6dab2097e0f1$export$57636bb43b1ccbb0, (offset)=>{\n            this._setContentOffset(offset);\n        });\n        this._scrollAnimation.then(()=>{\n            this._scrollAnimation = null;\n            // Process view size updates that occurred during the animation.\n            // Only views that are still visible will be actually updated.\n            for (let [key, size] of this._sizeUpdateQueue)this.updateItemSize(key, size);\n            this._sizeUpdateQueue.clear();\n            this.relayout();\n            this._processTransactionQueue();\n            this.endScrolling();\n        });\n        return this._scrollAnimation;\n    }\n    _runTransaction(action, animated) {\n        this._startTransaction();\n        if (this._nextTransaction) this._nextTransaction.actions.push(action);\n        this._endTransaction(animated);\n    }\n    _startTransaction() {\n        if (!this._nextTransaction) this._nextTransaction = new $8d8490b32c62e2b1$export$febc5573c75cefb0;\n        this._nextTransaction.level++;\n    }\n    _endTransaction(animated) {\n        if (!this._nextTransaction) return false;\n        // Save whether the transaction should be animated.\n        if (animated != null) this._nextTransaction.animated = animated;\n        // If we haven't reached level 0, we are still in a\n        // nested transaction. Wait for the parent to end.\n        if (--this._nextTransaction.level > 0) return false;\n        // Do nothing for empty transactions\n        if (this._nextTransaction.actions.length === 0) {\n            this._nextTransaction = null;\n            return false;\n        }\n        // Default animations to true\n        if (this._nextTransaction.animated == null) this._nextTransaction.animated = true;\n        // Enqueue the transaction\n        this._transactionQueue.push(this._nextTransaction);\n        this._nextTransaction = null;\n        this._processTransactionQueue();\n        return true;\n    }\n    _processTransactionQueue() {\n        // If the current transaction is animating, wait until the end\n        // to process the next transaction.\n        if (this._transaction || this._scrollAnimation) return;\n        let next = this._transactionQueue.shift();\n        if (next) this._performTransaction(next);\n    }\n    _getContentRect() {\n        return new $5ace01ed35ef4cc5$export$c79fc6492f3af13d(0, 0, this.contentSize.width, this.contentSize.height);\n    }\n    _performTransaction(transaction) {\n        this._transaction = transaction;\n        this.relayoutNow({\n            transaction: transaction,\n            animated: transaction.animated,\n            beforeLayout: ()=>{\n                // Get the initial layout infos for all views before the updates\n                // so we can figure out which views to add and remove.\n                if (transaction.animated) transaction.initialMap = this._getLayoutInfoMap(this._getContentRect(), true);\n                // Apply the actions that occurred during this transaction\n                for (let action of transaction.actions)action();\n            },\n            afterLayout: ()=>{\n                // Get the final layout infos after the updates\n                if (transaction.animated) {\n                    transaction.finalMap = this._getLayoutInfoMap(this._getContentRect());\n                    this._setupTransactionAnimations(transaction);\n                } else this._transaction = null;\n            },\n            afterAnimation: ()=>{\n                // Remove and reuse views when animations are done\n                if (transaction.toRemove.size > 0 || transaction.removed.size > 0) for (let view of $87ac0dc1eab4d828$export$cfc14088dfefce5f(transaction.toRemove.values(), transaction.removed.values())){\n                    this._children.delete(view);\n                    this.reuseView(view);\n                }\n                this._transaction = null;\n                // Ensure DOM order is correct for accessibility after animations are complete\n                this._correctItemOrder();\n                this._flushVisibleViews();\n                this._processTransactionQueue();\n            }\n        });\n    }\n    _setupTransactionAnimations(transaction) {\n        let { initialMap: initialMap , finalMap: finalMap  } = transaction;\n        // Store initial and final layout infos for animations\n        for (let [key, layoutInfo] of initialMap)if (finalMap.has(key)) // Store the initial layout info for use during animations.\n        transaction.initialLayoutInfo.set(key, layoutInfo);\n        else // This view was removed. Store the layout info for use\n        // in Layout#getFinalLayoutInfo during animations.\n        transaction.finalLayoutInfo.set(layoutInfo.key, layoutInfo);\n        // Get initial layout infos for views that were added\n        for (let [key3, layoutInfo1] of finalMap)if (!initialMap.has(key3)) {\n            let initialLayoutInfo = this.layout.getInitialLayoutInfo(layoutInfo1.copy());\n            transaction.initialLayoutInfo.set(key3, initialLayoutInfo);\n        }\n        // Figure out which views were removed.\n        for (let [key4, view] of this._visibleViews)if (!finalMap.has(key4)) {\n            transaction.removed.set(key4, view);\n            this._visibleViews.delete(key4);\n            // In case something weird happened, where we have a view but no\n            // initial layout info, use the one attached to the view.\n            if (view.layoutInfo) {\n                if (!transaction.finalLayoutInfo.has(view.layoutInfo.key)) transaction.finalLayoutInfo.set(view.layoutInfo.key, view.layoutInfo);\n            }\n        }\n    }\n    constructor(options = {\n    }){\n        this._contentSize = new $11c050b799ca8bfd$export$cb6da89c6af1a8ec;\n        this._visibleRect = new $5ace01ed35ef4cc5$export$c79fc6492f3af13d;\n        this._reusableViews = {\n        };\n        this._visibleLayoutInfos = new Map();\n        this._visibleViews = new Map();\n        this._renderedContent = new WeakMap();\n        this._children = new Set();\n        this._invalidationContext = null;\n        this._overscanManager = new $23a0943f854e7414$export$4455ee6afb38dcbb();\n        this._scrollAnimation = null;\n        this._isScrolling = false;\n        this._sizeUpdateQueue = new Map();\n        this._animatedContentOffset = new $c18941612b0d3405$export$baf26146a414f24a(0, 0);\n        this._transaction = null;\n        this._nextTransaction = null;\n        this._transactionQueue = [];\n        var _transitionDuration;\n        // Set options from passed object if given\n        this.transitionDuration = (_transitionDuration = options.transitionDuration) !== null && _transitionDuration !== void 0 ? _transitionDuration : 500;\n        this.anchorScrollPosition = options.anchorScrollPosition || false;\n        this.anchorScrollPositionAtTop = options.anchorScrollPositionAtTop || false;\n        this.shouldOverscan = options.shouldOverscan !== false;\n        for (let key of [\n            'delegate',\n            'size',\n            'layout',\n            'collection'\n        ])if (options[key]) this[key] = options[key];\n    }\n}\n\n\nfunction $b9814fb1baf5e2e6$export$1505db82fe357e65(opts) {\n    let [visibleViews, setVisibleViews] = $hj7DF$useState([]);\n    let [contentSize, setContentSize] = $hj7DF$useState(new $11c050b799ca8bfd$export$cb6da89c6af1a8ec());\n    let [isAnimating, setAnimating] = $hj7DF$useState(false);\n    let [isScrolling, setScrolling] = $hj7DF$useState(false);\n    let virtualizer = $hj7DF$useMemo(()=>new $65bed7ce80fa8795$export$89be5a243e59c4b2()\n    , []);\n    virtualizer.delegate = {\n        setVisibleViews: setVisibleViews,\n        setVisibleRect (rect) {\n            virtualizer.visibleRect = rect;\n            opts.onVisibleRectChange(rect);\n        },\n        setContentSize: setContentSize,\n        renderView: opts.renderView,\n        renderWrapper: opts.renderWrapper,\n        beginAnimations: ()=>setAnimating(true)\n        ,\n        endAnimations: ()=>setAnimating(false)\n        ,\n        getScrollAnchor: opts.getScrollAnchor\n    };\n    virtualizer.layout = opts.layout;\n    virtualizer.collection = opts.collection;\n    virtualizer.transitionDuration = opts.transitionDuration;\n    $hj7DF$useLayoutEffect(()=>{\n        virtualizer.afterRender();\n    });\n    // eslint-disable-next-line arrow-body-style\n    $hj7DF$useEffect(()=>{\n        return ()=>virtualizer.willUnmount()\n        ;\n    }, []);\n    return {\n        virtualizer: virtualizer,\n        visibleViews: visibleViews,\n        setVisibleRect: $hj7DF$useCallback((rect)=>{\n            virtualizer.visibleRect = rect;\n        }, [\n            virtualizer\n        ]),\n        contentSize: contentSize,\n        isAnimating: isAnimating,\n        isScrolling: isScrolling,\n        startScrolling: $hj7DF$useCallback(()=>{\n            virtualizer.startScrolling();\n            setScrolling(true);\n        }, [\n            virtualizer\n        ]),\n        endScrolling: $hj7DF$useCallback(()=>{\n            virtualizer.endScrolling();\n            setScrolling(false);\n        }, [\n            virtualizer\n        ])\n    };\n}\n\n\n\n\nexport {$bb4fde2f44642f8c$export$c84671f46d6a1ca as Layout, $8a0cec6d6c841a11$export$7e0eeb9da702a085 as LayoutInfo, $c18941612b0d3405$export$baf26146a414f24a as Point, $5ace01ed35ef4cc5$export$c79fc6492f3af13d as Rect, $11c050b799ca8bfd$export$cb6da89c6af1a8ec as Size, $d987d203ab974fe7$export$1a5223887c560441 as ReusableView, $b9814fb1baf5e2e6$export$1505db82fe357e65 as useVirtualizerState};\n//# sourceMappingURL=module.js.map\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$28b0c838a8280658$exports","$28b0c838a8280658$export$dd6d526d88b5a137","$28b0c838a8280658$export$89be5a243e59c4b2","$ea9606230722b6cd$export$5665e3d6be6adea","$bdbd287fd4ad4690$exports","$bdbd287fd4ad4690$export$faf7630257ad4304","$bdbd287fd4ad4690$export$1389d168952b34b5","$bdbd287fd4ad4690$export$ed5fd5ffe5ab0ac","$bdbd287fd4ad4690$var$cachedRTLResult","recalculate","outerDiv","document","createElement","outerStyle","style","width","height","overflow","direction","innerDiv","innerStyle","appendChild","body","scrollLeft","removeChild","node","scrollWidth","clientWidth","$ea9606230722b6cd$var$ScrollView","props","ref","contentSize","onVisibleRectChange","children","sizeToFit","onScrollStart","onScrollEnd","scrollDirection","otherProps","defaultRef","state","scrollTop","scrollEndTime","scrollTimeout","isScrolling","current","setScrolling","onScroll","target","currentTarget","Math","max","min","now","Date","clearTimeout","setTimeout","updateSize","dom","w","h","clientHeight","onResize","padding","overflowX","overflowY","role","pointerEvents","position","$59d9cc29f1abde27$exports","$59d9cc29f1abde27$export$6796df8ba7398521","$59d9cc29f1abde27$export$1481e64fbe01b8b3","$a699ae714be8549e$export$1da781778207e0a2","options","reusableView","layoutInfo","virtualizer","size","scrollHeight","$a699ae714be8549e$var$getSize","updateItemSize","key","estimatedSize","className","parent","rendered","$59d9cc29f1abde27$var$cache","WeakMap","dir","xProperty","cached","top","rect","y","x","isSticky","allowOverflow","transition","WebkitTransition","WebkitTransitionDuration","transitionDuration","opacity","zIndex","transform","contain","$28b0c838a8280658$var$Virtualizer","renderView","renderWrapper","layout","collection","isLoading","onLoadMore","focusedKey","shouldUseVirtualFocus","scrollToItem","fallbackRef","$28b0c838a8280658$var$defaultRenderWrapper","virtualizerProps","setVisibleRect","scrollOffset","isAnimating","visibleRect","undefined","startScrolling","endScrolling","visibleViews","lastFocusedKey","duration","tabIndex","isFocusWithin","onFocus","contains","onBlur","relatedTarget","focusedView","getView","activeElement","$279c20a4a0c8d128$export$cacbb3924155d68e","getLayoutInfo","this","layoutInfos","getVisibleLayoutInfos","res","addNodes","nodes","isVisible","push","header","rootNodes","intersects","validate","invalidationContext","invalidateEverything","sizeChanged","buildCollection","lastCollection","getKeys","getItem","layoutNode","layoutNodes","delete","lastWidth","visibleNodes","map","buildChild","maxY","_loaderHeight","loaderHeight","loader","length","_placeholderHeight","placeholderHeight","placeholder","buildNode","parentKey","type","buildSection","buildItem","rectHeight","headingHeight","isEstimated","previousLayoutNode","curNode","lastNode","estimatedHeadingHeight","headerRect","startY","child","childNodes","rowHeight","estimatedRowHeight","indentationForItem","newLayoutInfo","copy","updateLayoutNode","oldLayoutInfo","getContentSize","getKeyAbove","getKeyBefore","item","disabledKeys","has","getKeyBelow","getKeyAfter","getKeyPageAbove","pageY","keyAbove","getFirstKey","getKeyPageBelow","keyBelow","getLastKey","getKeyForSearch","search","fromKey","collator","substring","textValue","slice","compare","getInitialLayoutInfo","getFinalLayoutInfo","constructor","super","Set","Map","$b4e598180eb9d802$export$62444c3c724b1b20","columns","some","c","i","loadingState","wasLoading","buildColumnWidths","buildHeader","buildBody","columnWidths","stickyColumnIndices","remainingColumns","remainingSpace","column","_width","getDefaultWidth","parseWidth","add","isSelectionCell","rowHeaderColumnKeys","index","columnWidth","minWidth","maxWidth","Infinity","match","Error","parseInt","headerRow","headerRows","buildHeaderRow","row","cell","maxX","setChildHeights","getColumnWidth","_colspan","colspan","getEstimatedHeight","estimatedHeight","buildColumn","empty","buildRow","buildCell","addVisibleLayoutInfos","firstVisibleRow","binarySearch","topLeft","lastVisibleRow","bottomRight","firstVisibleCell","lastVisibleCell","topRight","stickyIndex","idx","items","point","axis","low","high","mid","$bb4fde2f44642f8c$export$c84671f46d6a1ca","shouldInvalidate","newRect","oldRect","$8a0cec6d6c841a11$export$7e0eeb9da702a085","$c18941612b0d3405$export$baf26146a414f24a","equals","isOrigin","$5ace01ed35ef4cc5$export$c79fc6492f3af13d","area","bottomLeft","containsRect","containsPoint","getCornerInRect","pointEquals","sizeEquals","$11c050b799ca8bfd$export$cb6da89c6af1a8ec","other","$d987d203ab974fe7$export$1a5223887c560441","$d987d203ab974fe7$var$KEY","prepareForReuse","content","$b9814fb1baf5e2e6$export$1505db82fe357e65","$df2f6dab2097e0f1$var$fixTs","$df2f6dab2097e0f1$var$perf","window","performance","$df2f6dab2097e0f1$var$perfNow","webkitNow","msNow","mozNow","$df2f6dab2097e0f1$var$getTime","bind","getTime","$df2f6dab2097e0f1$export$57636bb43b1ccbb0","t","sin","PI","$87ac0dc1eab4d828$export$37a26b283fd7740e","a","b","keys","$23a0943f854e7414$var$RollingAverage","addSample","sample","count","value","$23a0943f854e7414$export$4455ee6afb38dcbb","time","startTime","averageTime","velocity","collectMetrics","averagePerf","o","abs","overscanY","overscanX","getOverscannedRect","overscanned","round","$8d8490b32c62e2b1$export$febc5573c75cefb0","level","actions","animated","initialMap","finalMap","initialLayoutInfo","finalLayoutInfo","removed","toRemove","$65bed7ce80fa8795$export$89be5a243e59c4b2","_setContentSize","_contentSize","delegate","setContentSize","_setContentOffset","offset","_visibleRect","_setVisibleRect","forceUpdate","shouldOverscan","_overscanManager","_resetAnimatedContentOffset","relayout","offsetChanged","updateSubviews","_collection","data","_setData","_runTransaction","reloadData","contentChanged","_layout","setLayout","applyLayout","_getReuseType","getType","reuseType","getReusableView","_reusableViews","reusable","view","pop","viewType","_animatedContentOffset","_renderView","_renderContent","_renderedContent","Array","from","_visibleViews","values","getViewsOfType","filter","keyForView","keyAtPoint","willUnmount","cancelAnimationFrame","_relayoutRaf","context","_scrollAnimation","requestAnimationFrame","_invalidationContext","assign","relayoutNow","scrollAnchor","_getScrollAnchor","beforeLayout","afterLayout","getVisibleRect","restoredScrollAnchor","_restoreScrollAnchor","contentOffsetX","contentOffsetY","hasLayoutUpdates","transaction","_applyLayoutInfos","_enableTransitions","_disableTransitions","afterAnimation","_correctItemOrder","_isScrolling","_transaction","_visibleLayoutInfos","_children","beginAnimations","endAnimations","anchorScrollPosition","getScrollAnchor","corner","anchorScrollPositionAtTop","cornerAnchor","contentOffset","finalAnchor","adjustment","_getLayoutInfoMap","toAdd","toUpdate","visibleLayoutInfos","currentlyVisible","$87ac0dc1eab4d828$export$acaf96a27438246b","reuseView","key1","_applyLayoutInfo","key2","removeViews","_flushVisibleViews","_hasLayoutUpdates","afterRender","viewsByParentKey","view1","buildTree","views","childViews","children1","setVisibleViews","updated","cur","view2","_sizeUpdateQueue","shouldScrollX","shouldScrollY","offsetX","offsetY","minX","minY","scrollTo","offset1","cancel","Promise","resolve","begin","end","ease","fn","raf_id","canceled","promise","start","diffX","diffY","run","delta","$df2f6dab2097e0f1$export$dc0b63720788090c","then","clear","_processTransactionQueue","action","_startTransaction","_nextTransaction","_endTransaction","_transactionQueue","next","shift","_performTransaction","_getContentRect","_setupTransactionAnimations","iterators","iterator","$87ac0dc1eab4d828$export$cfc14088dfefce5f","key3","layoutInfo1","key4","_transitionDuration","opts","setAnimating"],"sourceRoot":""}