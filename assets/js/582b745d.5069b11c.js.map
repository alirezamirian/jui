{"version":3,"file":"assets/js/582b745d.5069b11c.js","mappings":"+OAUO,MAAMA,EAAc,CAAC,EACfC,EAAe,UACfC,EAAW,CACtB,cAAiB,qBACjB,GAAM,qBACN,MAAS,UACT,YAAe,WACf,OAAU,oCACV,cAAiB,aACjB,KAAQ,sBACR,UAAa,+BACb,OAAS,EACT,QAAW,gGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,kBACX,SAAY,CACV,MAAS,cACT,UAAa,oCAEf,KAAQ,CACN,MAAS,OACT,UAAa,8BAGJC,EAAS,CAAC,EAKVC,EAAM,CAAC,CAClBC,MAAO,WACPC,GAAI,WACJC,MAAO,GACN,CACDF,MAAO,YACPC,GAAI,YACJC,MAAO,GACN,CACDF,MAAO,eACPC,GAAI,eACJC,MAAO,GACN,CACDF,MAAO,2BACPC,GAAI,2BACJC,MAAO,GACN,CACDF,MAAO,wBACPC,GAAI,wBACJC,MAAO,GACN,CACDF,MAAO,sBACPC,GAAI,sBACJC,MAAO,GACN,CACDF,MAAO,2BACPC,GAAI,cACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAT,GAGX,IAH+B,WACjCC,KACGC,GACF,EACD,OAAO,QALS,WAKT,UAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAE5E,cACE,GAAM,WACH,YACL,cACE,GAAM,YACH,aACL,mBACE,cAAIC,WAAW,OAAK,sBAAYA,WAAW,MAAO,iBAA8B,MAAI,sBAAYA,WAAW,MAAO,qBAAkC,SAAO,sBAAYA,WAAW,MAAO,eAA4B,kCAAgC,sBAAYA,WAAW,MAAO,WAAwB,gBAC3S,cAAIA,WAAW,MAAO,0GAAwG,aAAGA,WAAW,KACxI,KAAQ,uDACL,QAAY,MACnB,cAAIA,WAAW,MAAO,+DAA6D,aAAGA,WAAW,KAC7F,KAAQ,uDACL,QAAY,OAErB,cACE,GAAM,aACH,cACL,cACE,UAAa,uBAEb,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,wEAA4D,aAAGA,WAAW,KAC1F,KAAQ,uDACL,QAAY,OAErB,cACE,GAAM,gBACH,iBACL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GACP,kiCA4CP,cACE,GAAM,4BACH,6BACL,iBAAK,+DAA6D,sBAAYA,WAAW,KAAM,4BAAyC,2IACrC,sBAAYA,WAAW,KAAM,kBAA+B,MAC/J,cACE,GAAM,yBACH,0BACL,iBAAK,QAAM,sBAAYA,WAAW,KAAM,UAAuB,SAAO,sBAAYA,WAAW,KAAM,gBAA6B,gCAA8B,sBAAYA,WAAW,KAAM,eAA4B,gFAEvN,cACE,GAAM,uBACH,wBACL,iBAAK,QAAM,sBAAYA,WAAW,KAAM,aAA0B,MAAI,sBAAYA,WAAW,KAAM,UAAuB,MAAI,sBAAYA,WAAW,KAAM,eAA4B,UAAQ,sBAAYA,WAAW,KAAM,cAA2B,+EAEvP,cACE,GAAM,gBACL,sBAAYA,WAAW,MAAO,iBACjC,iBAAK,4FAA0F,sBAAYA,WAAW,KAAM,eAA4B,+EAExJ,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GACP,qzDAkEV,CAGDJ,EAAWK,gBAAiB,C","sources":["webpack://website/./docs/components/Tooltip.mdx"],"sourcesContent":["\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Tooltip';\nexport const metadata = {\n  \"unversionedId\": \"components/Tooltip\",\n  \"id\": \"components/Tooltip\",\n  \"title\": \"Tooltip\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Tooltip.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Tooltip\",\n  \"permalink\": \"/jui/docs/components/Tooltip\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Tooltip.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"ToolWindows\",\n    \"permalink\": \"/jui/docs/components/ToolWindows\"\n  },\n  \"next\": {\n    \"title\": \"Tree\",\n    \"permalink\": \"/jui/docs/components/Tree\"\n  }\n};\nexport const assets = {\n\n};\n\n\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'Live example',\n  id: 'live-example',\n  level: 3\n}, {\n  value: 'PositionedTooltipTrigger',\n  id: 'positionedtooltiptrigger',\n  level: 2\n}, {\n  value: 'Controlled open state',\n  id: 'controlled-open-state',\n  level: 3\n}, {\n  value: 'Positioning options',\n  id: 'positioning-options',\n  level: 3\n}, {\n  value: '<code>showOnFocus</code>',\n  id: 'showonfocus',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`ActionTooltip`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`ActionHelpTooltip`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`HelpTooltip`}</inlineCode>{`, built on top of the generic `}<inlineCode parentName=\"li\">{`Tooltip`}</inlineCode>{` component.`}</li>\n      <li parentName=\"ul\">{`Interactive tooltip. If a link or button is rendered in a tooltip. It will remain open when hovered. (`}<a parentName=\"li\" {...{\n          \"href\": \"https://jetbrains.github.io/ui/controls/tooltip/#20\"\n        }}>{`spec`}</a>{`)`}</li>\n      <li parentName=\"ul\">{`Tooltip positioning based on mouse position, not trigger. (`}<a parentName=\"li\" {...{\n          \"href\": \"https://jetbrains.github.io/ui/controls/tooltip/#21\"\n        }}>{`spec`}</a>{`)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`ðŸš§ Auto hide if the cursor stays on trigger long enough. (`}<a parentName=\"li\" {...{\n          \"href\": \"https://jetbrains.github.io/ui/controls/tooltip/#19\"\n        }}>{`spec`}</a>{`)`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"live-example\"\n    }}>{`Live example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<div style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n  <TooltipTrigger\n    tooltip={<ActionTooltip actionName=\"Action Name\" shortcut=\"F1\" />}\n  >\n    <Button>Action</Button>\n  </TooltipTrigger>\n\n  <TooltipTrigger\n    tooltip={\n      <ActionHelpTooltip\n        actionName=\"Action Name\"\n        shortcut=\"F1\"\n        helpText=\"Explain behavior that is not clear from the action name.\"\n        link={<Link>Link</Link>}\n      />\n    }\n  >\n    <Button>Action Help</Button>\n  </TooltipTrigger>\n\n  <TooltipTrigger\n    tooltip={\n      <HelpTooltip\n        shortcut=\"F1\"\n        helpText=\"Explain behavior that is not clear from the action name.\"\n        link={<Link>Link</Link>}\n      />\n    }\n  >\n    <Button>Help</Button>\n  </TooltipTrigger>\n\n  <TooltipTrigger\n    tooltip={\n      <ValidationTooltip>\n        Branch name foo already exists. <br />\n        Change the name or overwrite existing branch\n      </ValidationTooltip>\n    }\n  >\n    <Button>ValidationTooltip</Button>\n  </TooltipTrigger>\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"positionedtooltiptrigger\"\n    }}>{`PositionedTooltipTrigger`}</h2>\n    <p>{`By default tooltip is positioned based on cursor position. `}<inlineCode parentName=\"p\">{`PositionedTooltipTrigger`}</inlineCode>{` can be used to position tooltip\nrelative to the trigger element. It also offers more options, which are not available in the default `}<inlineCode parentName=\"p\">{`TooltipTrigger`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"controlled-open-state\"\n    }}>{`Controlled open state`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`isOpen`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`onOpenChange`}</inlineCode>{` to control open state. Use `}<inlineCode parentName=\"p\">{`defaultOpen`}</inlineCode>{` to have the tooltip open initially, without\ncontrolling the isOpen state.`}</p>\n    <h3 {...{\n      \"id\": \"positioning-options\"\n    }}>{`Positioning options`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`placement`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`offset`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`crossOffset`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`shouldFlip`}</inlineCode>{` to control how the tooltip should be positioned relative to\nthe trigger.`}</p>\n    <h3 {...{\n      \"id\": \"showonfocus\"\n    }}><inlineCode parentName=\"h3\">{`showOnFocus`}</inlineCode></h3>\n    <p>{`Following the reference implementation, by default tooltip is opened only on hover. Use `}<inlineCode parentName=\"p\">{`showOnFocus`}</inlineCode>{` to have it shown\nwhen the trigger gets focused, for better accessiblity.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`function PositionedTooltipTriggerDemo() {\n  const [placement, setPlacement] = React.useState(\"\");\n  const [offset, setOffset] = React.useState(null);\n  const [crossOffset, setCrossOffset] = React.useState(null);\n  return (\n    <div style={{ display: \"flex\", alignItems: \"center\", gap: 8 }}>\n      <select\n        value={placement}\n        onChange={(e) => setPlacement(e.target.value)}\n        placeholder=\"placement\"\n      >\n        <option value=\"\">Placement</option>\n        {[\n          \"bottom\",\n          \"bottom left\",\n          \"bottom right\",\n          \"bottom start\",\n          \"bottom end\",\n          \"top\",\n          \"top left\",\n          \"top right\",\n          \"top start\",\n          \"top end\",\n          \"left\",\n          \"left top\",\n          \"left bottom\",\n          \"start\",\n          \"start top\",\n          \"start bottom\",\n          \"right\",\n          \"right top\",\n          \"right bottom\",\n          \"end\",\n          \"end top\",\n          \"end bottom\",\n        ].map((position) => (\n          <option value={position} key={position}>\n            {position}\n          </option>\n        ))}\n      </select>\n      <input\n        type=\"number\"\n        placeholder=\"offset\"\n        value={offset}\n        onChange={(e) => setOffset(e.target.valueAsNumber)}\n      />\n      <input\n        type=\"number\"\n        placeholder=\"crossOffset\"\n        value={crossOffset}\n        onChange={(e) => setCrossOffset(e.target.valueAsNumber)}\n      />\n      <PositionedTooltipTrigger\n        tooltip={<ActionTooltip actionName=\"Action Name\" shortcut=\"F1\" />}\n        placement={placement || undefined}\n        offset={offset || undefined}\n        crossOffset={crossOffset || undefined}\n      >\n        <Button>Action</Button>\n      </PositionedTooltipTrigger>\n    </div>\n  );\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}