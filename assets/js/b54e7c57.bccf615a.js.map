{"version":3,"file":"assets/js/b54e7c57.bccf615a.js","mappings":"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","sources":["webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/listItemRenderer.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/Menu/ContextMenuContainer.tsx","webpack://website/../jui/src/Menu/useContextMenu.tsx","webpack://website/../jui/src/Collections/patchCollectionProps.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/Submenu.tsx","webpack://website/../jui/src/Menu/_useSubmenu.ts","webpack://website/../jui/src/Menu/_useSubmenuState.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/renderMenuNodes.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/StyledTreeNode.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/Tree/__copied__TreeCollection.ts","webpack://website/../jui/src/Tree/getSingleChildrenKeys.ts","webpack://website/../jui/src/Tree/TreeSelectionManager.ts","webpack://website/../jui/src/utils/array-utils.ts","webpack://website/../jui/src/Tree/useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/selection/useSelectableItem.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/test-data.ts","webpack://website/../jui/src/Tree/story-helpers.tsx","webpack://website/../jui/src/story-components.tsx","webpack://website/../jui/src/List/story-helpers.tsx","webpack://website/../jui/src/List/List.stories.tsx","webpack://website/./docs/components/List.mdx"],"sourcesContent":["import React from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { CollectionSpeedSearchMatches } from \"./useCollectionSpeedSearchResult\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext =\n  React.createContext<CollectionSpeedSearchContextValue | null>(null);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext =\n  React.createContext<null | CollectionSpeedSearchItemContextValue>(null);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{ itemKey: Key }> = ({\n  children,\n  itemKey,\n}) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue;\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function ({\n  Component = \"span\",\n}: {\n  /**\n   * When rendering in a flex parent (which is the case for tree or list), rendering a container is necessary to have\n   * the right spacing around highlights, when the highlighter span is immediately followed or proceeded by a white\n   * space. By default, a \"span\" is rendered.\n   */\n  Component?: React.ElementType;\n}) {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return (\n    <Component>\n      {highlightedRanges ? (\n        <TextWithHighlights highlights={highlightedRanges}>\n          {text}\n        </TextWithHighlights>\n      ) : (\n        text\n      )}\n    </Component>\n  );\n};\n","import { HTMLAttributes, RefObject, useMemo } from \"react\";\nimport { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { SpeedSearchPopupProps } from \"@intellij-platform/core/SpeedSearch\";\nimport {\n  SpeedSearchState,\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { CollectionSpeedSearchContextValue } from \"./CollectionSpeedSearchContext\";\nimport {\n  CollectionSpeedSearchMatches,\n  useCollectionSpeedSearchResult,\n} from \"./useCollectionSpeedSearchResult\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\nexport interface CollectionSpeedSearch {\n  containerProps: HTMLAttributes<HTMLElement>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n}\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  stickySearch,\n  keyboardDelegate,\n  focusBestMatch,\n  ref,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  ref: RefObject<HTMLElement>;\n  stickySearch?: boolean;\n  focusBestMatch?: boolean;\n} & SpeedSearchStateProps): CollectionSpeedSearch {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps); // maybe allow control over state\n  // via props?\n\n  const { matches, selectionManager: speedSearchSelectionManager } =\n    useCollectionSpeedSearchResult({\n      collection,\n      selectionManager,\n      speedSearch,\n      focusBestMatch,\n    });\n  const { containerProps } = useSpeedSearch({ stickySearch }, speedSearch, ref);\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  const findFirstMatch = <T extends React.Key | undefined, K>(\n    fromKey: React.Key | undefined | null,\n    direction: \"up\" | \"down\"\n  ) => {\n    let currentKey: React.Key | undefined | null = fromKey;\n    while (currentKey != null) {\n      if (!matches || matches.has(currentKey)) {\n        return currentKey;\n      }\n      currentKey =\n        direction === \"up\"\n          ? wrappedKeyboardDelegate.getKeyAbove?.(currentKey)\n          : wrappedKeyboardDelegate.getKeyBelow?.(currentKey);\n    }\n    return currentKey ?? undefined;\n  };\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyBelow?.(key), \"down\"),\n    },\n    getKeyAbove: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyAbove?.(key), \"up\"),\n    },\n    getFirstKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const firstKey = findFirstMatch(\n          wrappedKeyboardDelegate.getFirstKey?.(key, global),\n          \"down\"\n        );\n        return firstKey == null ? matches?.values().next().value : firstKey;\n      },\n    },\n    getLastKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const lastKey = findFirstMatch(\n          wrappedKeyboardDelegate.getLastKey?.(key, global),\n          \"down\"\n        );\n        return lastKey == null\n          ? [...(matches?.keys() || [])].pop() ?? null\n          : lastKey;\n      },\n    },\n  } as { [key in keyof KeyboardDelegate]: { value: KeyboardDelegate[key] } });\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { Key } from \"react\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager,\n  speedSearch,\n  focusBestMatch = false,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n  /**\n   * If true, focusing the best match (the longest \"start-with\" match) will be preferred.\n   * By default, the focus is moved to the first match that comes after the currently focused item, if currently\n   * focused item itself is not a match.\n   * A typical use case would be collections that filter out non-match items.\n   * @default false\n   */\n  focusBestMatch?: boolean;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const result = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key))\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n      selectionManager: createSpeedSearchSelectionManager(\n        selectionManager,\n        active ? matches : null\n      ),\n    };\n  }, [searchTerm, collection, active]);\n\n  const latestValues = useLatest({ ...result, collection, focusBestMatch });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n    let keyToFocus: Key | undefined;\n    if (latestValues.current.focusBestMatch) {\n      keyToFocus = getLongestCommonPrefixMatch(matches);\n    }\n    if (!keyToFocus && matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      keyToFocus = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n    }\n    if (keyToFocus) {\n      selectionManager.setFocusedKey(keyToFocus);\n      selectionManager.replaceSelection(keyToFocus);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return result;\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n\n/**\n * Returns the longest match from the beginning, if exists.\n */\nfunction getLongestCommonPrefixMatch(matches: CollectionSpeedSearchMatches) {\n  return [...matches.entries()]\n    .filter(([, [firstRange]]) => firstRange?.from === 0)\n    .sort(\n      ([, [rangeA]], [, [rangeB]]) =>\n        rangeB.to - rangeB.from - rangeA.to - rangeA.from\n    )?.[0]?.[0];\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n  get id() {\n    return this.key;\n  }\n}\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return null as any as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<PartialNode<T>> = (\n    StatelyItem as any\n  ).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import { RefObject, useEffect } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = (\n    [\"Editable\", \"Selected\", \"Pressed\", \"Focused\", \"Disabled\"] as Array<\n      keyof typeof modifiers\n    >\n  ).reduce(\n    (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n    \"\"\n  );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  icon: string;\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            // potential SSR issues here?\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = svg;\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable } from \"@react-types/shared\";\nimport React, { Key, useRef } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { listItemRenderer } from \"./listItemRenderer\";\nimport { useListState } from \"./useListState\";\n\nexport type ListProps<T extends object> = Omit<\n  Omit<AriaListBoxProps<T>, \"disallowEmptySelection\">,\n  keyof AsyncLoadable\n> & {\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n  /**\n   * By default, if list is not focused, it shows a different style on the selected item,\n   * which acts as a visual clue for list's focus state. This behaviour can be suppressed by setting\n   * `alwaysShowAsFocused` to `true`. One use case is in master-detail views where you don't\n   * want the list to appear as blurred, when interacting with the details view of the selected\n   * list item. Note that in such use cases, there won't be any visual clue to distinguish focused\n   * state of the link, which is not great from UX perspective, but it's kept like this to match\n   * Jetbrains UI behaviour.\n   */\n  alwaysShowAsFocused?: boolean;\n  allowEmptySelection?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n};\n\n/**\n * List view with speedSearch instead of default typeahead.\n * TODO:\n *  - Support virtualization\n *  - Support custom rendering\n *  -\n */\nexport function List<T extends object>({\n  allowEmptySelection = false,\n  alwaysShowAsFocused = false,\n  fillAvailableSpace = false,\n  onAction,\n  ...inputProps\n}: ListProps<T>) {\n  const props: AriaListBoxProps<T> = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useListState(props);\n  const { listProps, focused } = useList(props, state, ref);\n\n  return (\n    <StyledList\n      fillAvailableSpace={fillAvailableSpace}\n      {...listProps}\n      ref={ref}\n    >\n      {[...state.collection].map(\n        listItemRenderer({\n          item: (item) => (\n            <ListItem\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={() => onAction?.(item.key)}\n              listFocused={alwaysShowAsFocused || focused}\n            />\n          ),\n        })\n      )}\n    </StyledList>\n  );\n}\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ elementType: \"li\", orientation: \"vertical\" })\n        .separatorProps}\n    />\n  );\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { ListState } from \"@react-stately/list\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport { StyledListItem } from \"./StyledListItem\";\n\nexport interface ListItemProps<T> {\n  listFocused: boolean;\n  item: Node<T>;\n  state: ListState<T>;\n  onAction: () => void;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({\n  listFocused,\n  item,\n  state,\n  onAction,\n  children,\n}: ListItemProps<T>) {\n  const ref = React.useRef(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isSelected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction,\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={isSelected}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      aria-selected={isSelected}\n      {...pressProps}\n      ref={ref}\n    >\n      <ItemStateContext.Provider\n        value={{\n          isDisabled,\n          isSelected,\n          isContainerFocused: listFocused,\n          node: item,\n        }}\n      >\n        {children || item.rendered}\n      </ItemStateContext.Provider>\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\nexport const StyledList = styled.ul<{ fillAvailableSpace?: boolean }>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.li<StyledListItemProps>(\n  ({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"List.foreground\" as UnknownThemeProp<\"List.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"List.selectionForeground\" as UnknownThemeProp<\"List.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"List.selectionBackground\" as UnknownThemeProp<\"List.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"List.selectionInactiveForeground\" as UnknownThemeProp<\"List.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"List.selectionBackgroundInactive\" as UnknownThemeProp<\"List.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n      position: \"relative\",\n      display: \"flex\",\n      whiteSpace: \"nowrap\",\n      paddingLeft: \"0.5rem\", // themed?\n      paddingRight: \"0.5rem\", // themed?\n      lineHeight: \"20px\",\n      outline: \"none\",\n      cursor: \"default\",\n      minWidth: \"min-content\", // ?\n    };\n  }\n);\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.li(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { Node } from \"@react-types/shared\";\nimport React from \"react\";\nimport { StyledListSectionHeader } from \"./StyledListSectionHeader\";\nimport { ListDivider } from \"./ListDivider\";\n\ninterface SectionNode<T> extends Node<T> {\n  type: \"section\";\n}\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\n\ninterface DividerNode<T> extends Node<T> {\n  type: \"divider\";\n}\n\nconst isItemNode = <T extends any>(node: Node<T>): node is ItemNode<T> =>\n  node.type === \"item\";\nconst isSectionNode = <T extends any>(node: Node<T>): node is SectionNode<T> =>\n  node.type === \"section\";\nconst isDividerNode = <T extends any>(node: Node<T>): node is DividerNode<T> =>\n  node.type === \"divider\";\n\ntype listItemRendererArgs<T extends any> = {\n  item: (item: ItemNode<T>) => React.ReactNode;\n  sectionHeader?: (item: SectionNode<T>) => React.ReactNode;\n};\nexport const listItemRenderer = <T extends any>({\n  item: renderItem,\n  sectionHeader: renderSectionHeader = (item) => (\n    <StyledListSectionHeader>{item.rendered}</StyledListSectionHeader>\n  ),\n}: listItemRendererArgs<T>) => {\n  return render;\n\n  function render(item: Node<T>): React.ReactNode {\n    if (isItemNode(item)) {\n      return renderItem(item);\n    }\n    if (isSectionNode(item)) {\n      return (\n        <React.Fragment key={item.key}>\n          {renderSectionHeader(item)}\n          {[...(item.childNodes as ItemNode<T>[])].map(render)}\n        </React.Fragment>\n      );\n    }\n    if (isDividerNode(item)) {\n      return <ListDivider key={item.key} />;\n    }\n    return null;\n  }\n};\n","import { AriaSelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nexport interface ListProps\n  extends Omit<\n    AriaSelectableListOptions,\n    | \"disallowEmptySelection\"\n    | \"selectOnFocus\"\n    | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n    | \"collection\" // Grouped as state, the second argument, like in useListBox\n    | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n    | \"ref\" // Third argument\n  > {\n  allowEmptySelection?: boolean;\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  props: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is going to be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and allowEmptySelection is false.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      !props.allowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.select(firstKey);\n    }\n  }, [!props.allowEmptySelection]);\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  KeyboardDelegate,\n  Node,\n} from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  MultipleSelectionManager,\n  SelectionManager,\n} from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { useCollectionAutoScroll } from \"@intellij-platform/core/Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T>\n): ListState<T> {\n  return originalUseListState({ ...props, selectionBehavior: \"replace\" });\n}\n","import React, { HTMLAttributes, HTMLProps } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayTriggerProps } from \"@react-types/overlays\";\n\nimport { useContextMenu } from \"./useContextMenu\";\nimport { MenuOverlay } from \"./MenuOverlay\";\n\ninterface ContextMenuContainerProps extends HTMLProps<HTMLDivElement> {\n  /**\n   * Will be called to return the Menu when context menu is triggered. Use {@link Menu} component to render a menu.\n   */\n  renderMenu: () => React.ReactNode;\n  /**\n   * If children is a function, context menu props is passed to it, to be passed to the underlying element.\n   * Otherwise, a div container will be rendered.\n   */\n  children:\n    | React.ReactNode\n    | ((props: HTMLAttributes<HTMLElement>) => React.ReactNode);\n}\n\n/**\n * A generic container for context menu. It's the same as a normal div, only with an additional `renderMenu` prop,\n * to be used to render context menu, when it's triggered.\n * Closes the menu when a menu action is triggered.\n */\nexport const ContextMenuContainer = ({\n  children,\n  renderMenu,\n  ...props\n}: ContextMenuContainerProps) => {\n  const state = useMenuTriggerState({} as OverlayTriggerProps);\n\n  const { overlayProps, containerProps, overlayRef } = useContextMenu(\n    {},\n    state\n  );\n  const allProps = mergeProps(props, containerProps);\n  return (\n    <>\n      {typeof children === \"function\" ? (\n        children(allProps)\n      ) : (\n        <div {...allProps}>{children}</div>\n      )}\n      <MenuOverlay\n        state={state}\n        overlayRef={overlayRef}\n        overlayProps={overlayProps}\n        restoreFocus\n      >\n        {renderMenu()}\n      </MenuOverlay>\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { useOverlay } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\n\n/**\n * Functionality and accessibility of context menu.\n */\nexport const useContextMenu = (\n  { isDisabled = false }: { isDisabled?: boolean },\n  state: MenuTriggerState\n) => {\n  /**\n   * NOTE: not using useMenuTrigger because:\n   * - There is no option to have a trigger like this: \"right click + long press only by touch\" which seems to be the\n   *   reasonable trigger for context menu. If we want to use it just for long press, we could disable it if it's not\n   *   a touch device, but that would be suboptimal, since both touch and mouse can be available, and it should depend\n   *   not on availability of touch, but on the triggered event type. Plus, isDisabled is broken in v<3.5.0\n   * - It's not quite clear at the moment, if the aria attributes that useMenuTrigger sets would be applicable in case\n   *   of this context menu component too. the trigger is not the container. For example, if there is a list rendered\n   *   inside, the selected item would be the trigger. Maybe even this component, as a container for context menu\n   *   is not the best way to allow for context menu, when comes to a11y concerns. For now, we skip a11y props of the\n   *   trigger. A11y props of the menu itself (e.g. aria-label) would also be up to the usage of this component.\n   *\n   *   TODO: add support for long touch\n   */\n  const onContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    // NOTE: we can't use offsetX/offsetY, because it would depend on the exact target that was clicked.\n    if (!state.isOpen) {\n      state.open(null);\n    }\n    updatePosition(e);\n  };\n\n  const overlayRef = useRef(null);\n\n  const { overlayProps: positionProps, updatePosition } =\n    useMouseEventOverlayPosition({\n      overlayRef,\n      placement: \"bottom start\",\n      // shouldFlip should be false, but it doesn't work as expected. Overlay container is rendered within the view port\n      // but the menu overflows from the overlay container\n      shouldFlip: true,\n      offset: -8,\n      isOpen: state.isOpen,\n    });\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const containerProps: React.HTMLAttributes<HTMLElement> = isDisabled\n    ? {}\n    : { onContextMenu };\n  return {\n    /**\n     * props to be applied on the container element which is supposed to have the context menu\n     */\n    containerProps,\n    /**\n     * The ref to be applied on the menu overlay wrapper. It's usually an input instead of an output in similar\n     * react-aria hooks, but it seemed unnecessary here.\n     */\n    overlayRef,\n    /**\n     * props to be applied on the menu overlay wrapper.\n     */\n    overlayProps: mergeProps(overlayProps, positionProps),\n  };\n};\n","import { Item, PartialNode, Section } from \"@react-stately/collections\";\nimport { Item as Item2 } from \"./Item\";\nimport {\n  CollectionBase,\n  CollectionElement,\n  ItemProps,\n  SectionProps,\n} from \"@react-types/shared\";\nimport React from \"react\";\n\nfunction* patchCollectionItem<T>(nodes: Generator<PartialNode<T>>) {\n  for (const partialNode of nodes)\n    yield {\n      ...partialNode,\n      *childNodes() {\n        const result2 = partialNode.childNodes?.();\n        if (result2) {\n          for (const partialChildNode of result2) {\n            const { type, ...partialChildNodeWithoutType } = partialChildNode;\n            yield partialChildNodeWithoutType;\n          }\n        }\n      },\n    };\n}\n\nconst PatchedItem = Item.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedItem.getCollectionNode = function getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Item.getCollectionNode(props, context));\n};\n\nconst PatchedSection = Section.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedSection.getCollectionNode = function getCollectionNode<T>(\n  props: SectionProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Section.getCollectionNode(props, context));\n};\nfunction convertCollectionElement<T>(\n  result: CollectionElement<T> | React.ReactNode\n): CollectionElement<T> {\n  if (\n    React.isValidElement(result) &&\n    (result.type === Item || result.type === Item2)\n  ) {\n    return React.createElement(\n      PatchedItem,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as ItemProps<T>),\n      },\n      convertChildren(result.props.children)\n    ) as CollectionElement<T>;\n  }\n  if (React.isValidElement(result) && result.type === Section) {\n    return React.createElement(\n      PatchedSection,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as SectionProps<T>),\n      } as any,\n      convertChildren((result.props as any).children)\n    ) as CollectionElement<T>;\n  }\n  return result as CollectionElement<T>;\n}\n\nfunction convertChildren<T>(children: React.ReactNode): React.ReactNode {\n  return Array.isArray(children)\n    ? // NOTE: We intentionally avoid using React.Children.map as it messes with keys.\n      children.map(convertChildren)\n    : convertCollectionElement(children);\n}\n\n/**\n * CollectionBuilder expects child type to be the same as parent type, which is weird in the first place:\n * https://github.com/adobe/react-spectrum/blob/cae83ff95f2f709b761c70d47ace96d6346ed873/packages/%40react-stately/collections/src/CollectionBuilder.ts#L148\n * On the other hand, the default Item components sets the `type` to item, for all child PartialNode objects:\n * https://github.com/adobe/react-spectrum/blob/c49d9819adc2cb63377f39557352440c72072caf/packages/%40react-stately/collections/src/Item.ts#L40-L54\n * Which is also a little unexpected, as in many nested collections, an item can have all types of children.\n * This function patches that, replacing Item elements with PatchedItem element which doesn't set type on children\n * PartialNodes.\n */\nexport function patchCollectionProps<T>({\n  children,\n  ...props\n}: CollectionBase<T>): CollectionBase<T> {\n  return {\n    ...props,\n    children:\n      typeof children === \"function\"\n        ? (node: T) => convertChildren(children(node)) as CollectionElement<T>\n        : (convertChildren(children) as CollectionElement<T>),\n  };\n}\n","import React, { Key, RefObject, useContext } from \"react\";\nimport { AriaMenuOptions, useMenu as useMenuAria } from \"@react-aria/menu\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { patchCollectionProps } from \"@intellij-platform/core/Collections/patchCollectionProps\";\nimport { TreeProps, useTreeState } from \"../Tree/useTreeState\"; // shared dependency between tree and menu, that could be lifted up import {Submenu} from '@intellij-platform/core/Menu/Submenu'\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { SubmenuProps } from \"./Submenu\"; // internal export\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key; // FIXME: should be keys\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void; // FIXME: should be keys\n  defaultExpandedKey?: Key; // FIXME: should be keys\n  /**\n   * @deprecated\n   */\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n\n  /**\n   * Defines the press behaviour (either by mouse or by pressing Enter when focused) on menu items with submenu.\n   * By default (undefined), pressing or hovering over a menu item with submenu, opens the submenu.\n   * When set to \"toggle\", pressing a menu item with submenu will toggle the submenu. Hovering over such items will\n   * no longer open the submenu.\n   * When set to \"action\", pressing a menu item with submenu will call onAction for that item, and closes the menu.\n   * Hovering over such items will no longer open the submenu.\n   *\n   * In all cases, pressing the right arrow will always open the submenu.\n   */\n  submenuBehavior?: \"default\" | \"toggleOnPress\" | \"actionOnPress\";\n\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\nexport const MenuContext = React.createContext<\n  Pick<\n    MenuProps<unknown>,\n    \"onClose\" | \"onAction\" | \"submenuBehavior\" | \"autoFocus\"\n  > & {\n    itemWrapper?: (\n      renderedItem: React.ReactNode,\n      item: Node<unknown>\n    ) => React.ReactNode;\n    renderSubmenu?: (props: SubmenuProps<unknown>) => React.ReactNode;\n  }\n>({});\n\nexport function useMenu<T>(\n  {\n    onAction: onActionProp,\n    submenuBehavior = \"default\",\n    ...props\n  }: MenuProps<T> & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { close } = useContext(MenuOverlayContext);\n  const onClose = () => {\n    props.onClose?.();\n    close();\n  };\n  const onAction = (key: Key) => {\n    if (\n      // The following check should have been in useMenu, but it's not currently. Probably because they haven't yet\n      // covered nested menus.\n      !state.collection.getItem(key)?.hasChildNodes\n    ) {\n      return onActionProp?.(key);\n    } else if (submenuBehavior === \"actionOnPress\") {\n      onClose();\n      return onActionProp?.(key);\n    }\n  };\n  const menuContextValue: React.ContextType<typeof MenuContext> = {\n    submenuBehavior,\n    autoFocus: props.autoFocus,\n    onAction,\n    onClose,\n  };\n  const { menuProps } = useMenuAria(\n    { ...props, onAction, onClose },\n    state,\n    ref\n  );\n\n  return {\n    menuProps,\n    menuContextValue,\n  };\n}\n\nexport function useMenuState<T extends object>(\n  props: TreeProps<T> &\n    Pick<\n      MenuProps<T>,\n      \"expandedKey\" | \"defaultExpandedKey\" | \"onExpandedKeyChange\"\n    >\n) {\n  props = patchCollectionProps(props);\n  return useTreeState({\n    ...props,\n    childExpansionBehaviour: \"single\",\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n}\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also, there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n */\nexport function Menu<T extends object>(props: MenuProps<T>) {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useMenuState(props);\n  const { menuContextValue, menuProps } = useMenu(props, state, ref);\n\n  return (\n    /**\n     * MenuContext is used to pass onAction and onClose to be passed to useMenu in submenus.\n     * That's needed because in useMenuItem onAction and onClose are read off a WeakMap which has the menu state\n     * (TreeState) as key. So we have to pass onAction and onClose everytime we call useMenu in submenus, to let the\n     * menu items in that submenu access the right value of onAction and onClose. To avoid drilling these props down,\n     * we keep it in a context.\n     */\n    <MenuContext.Provider value={menuContextValue}>\n      <StyledMenu\n        {...menuProps}\n        ref={ref}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        {renderMenuNodes(state, [...state.collection])}\n      </StyledMenu>\n    </MenuContext.Provider>\n  );\n}\n","import React, { HTMLAttributes, RefObject, useContext } from \"react\";\nimport { useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { OverlayContainer, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!);\n  const {\n    menuItemProps: { onMouseEnter, onPointerEnter, ...otherMenuItemProps },\n    ...result\n  } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: item.hasChildNodes ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n  return {\n    ...result,\n    menuItemProps:\n      submenuBehavior === \"default\" ||\n      state.selectionManager.isFocused ||\n      // If nothing is expanded, let top level menu items grab focus as well.\n      // TODO: improve these conditions to a more generic one: if this menu item belongs to the \"active\" submenu.\n      //  Which would be the last opened submenu, or deepest submenu.\n      (item.parentKey == null && state.expandedKeys.size === 0)\n        ? { onMouseEnter, onPointerEnter, ...otherMenuItemProps }\n        : otherMenuItemProps,\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled || submenuBehavior !== \"default\",\n    onHoverStart: () => {\n      if (!isExpanded) {\n        state.toggleKey(item.key);\n      }\n    },\n  });\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...mergeProps(\n          menuItemProps,\n          hoverProps,\n          keyboardProps,\n          submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n        )}\n        isDisabled={isDisabled}\n        isActive={state.selectionManager.isFocused ? isFocused : isExpanded}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using OverlayContainer and FocusScope here:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         * So we need to render in a portal and that's done by OverlayContainer. We also need to render a FocusScope,\n         * because now that we are rendering in a portal, we are dom-wise outside the focus scope of the menu in\n         * MenuTrigger (or any other implementation that renders menu in an overlay with a focus scope), and therefore\n         * the autofocus behaviour for the nested menu doesn't work. That's because FocusScope works based on dom\n         * tree, not react tree. Although it's not clear why this problem persists while `contain` is not set on the\n         * FocusScope in MenuTrigger.\n         * So we need focus scope. Rendering a FocusScope here messes with the `restoreFocus` behaviour of the one\n         * in MenuTrigger, and that's why `forceRestoreFocus` is introduced in the locally implemented FocusScope.\n         * In a nutshell:\n         * Positioning -> need for OverlayContainer\n         * using OverlayContainer -> need for FocusScope\n         * FocusScope -> problem in focus restoration in MenuTrigger -> forceRestoreFocus as a patchy solution.\n         */\n        <OverlayContainer>\n          <FocusScope>\n            <div ref={nestedMenuRef} {...positionProps}>\n              {renderSubmenu({ parentState: state, rootKey: item.key })}\n            </div>\n          </FocusScope>\n        </OverlayContainer>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayContainer } from \"@react-aria/overlays\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <OverlayContainer>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </OverlayContainer>\n  );\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ isActive }) => isActive && highlightedStyle};\n  ${({ isDisabled }) => isDisabled && disabledStyle};\n\n  // With default submenu behavior, items get focused on hover, and highlighting the active (focused) item is fine.\n  // With other submenu behaviors, in the reference implementation, the hover item takes precedence over focused key.\n  // i.e., submenus can be open while mouse is on sibling of submenu's parent item. In that case, the hovered item\n  // will be highlighted even though the focus is kept within the opened submenu. This behavior (which may be even a\n  // little questionable UX-wise), seemed better implemented by css, because otherwise, we would need MenuItem to know\n  // if it's parent menu is hovered or not.\n  // TODO: cover this with tests\n\n  ul[role=\"menu\"]:not(:focus-within):hover & {\n    ${defaultStyle};\n  }\n  ul[role=\"menu\"]:not(:focus-within):hover &:hover {\n    ${highlightedStyle};\n  }\n\n  // would be nice to have a visual clue for focus visible state, but it's not like that in intellij platform\n  //border-left: 3px solid transparent;\n  //&:focus-visible {\n  //  border-left: 3px solid rgba(255, 255, 255, 0.1);\n  //}\n\n  padding-right: 1.25rem;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuOptions, useMenu } from \"@react-aria/menu\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport {\n  MenuKeyboardDelegate,\n  useSubmenu as useSubmenuAria,\n} from \"./_useSubmenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuContext } from \"./Menu\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport function useSubmenu<T>(\n  {\n    rootKey,\n    parentState,\n    ...props\n  }: { rootKey: React.Key; parentState: TreeState<T> } & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const rootItem = state.collection.getItem(rootKey);\n  const {\n    submenuBehavior,\n    autoFocus = true,\n    onClose,\n    onAction,\n  } = useContext(MenuContext);\n  let { menuProps } = useMenu(\n    {\n      \"aria-label\": rootItem?.[\"aria-label\"] || rootItem?.textValue,\n      onAction,\n      onClose,\n      selectedKeys: state.selectionManager.selectedKeys,\n      keyboardDelegate:\n        props.keyboardDelegate ||\n        new MenuKeyboardDelegate(\n          rootKey,\n          state.collection,\n          state.disabledKeys,\n          ref\n        ),\n      autoFocus,\n    },\n    state,\n    ref\n  );\n  const { submenuProps } = useSubmenuAria({ rootKey }, parentState, ref);\n\n  const submenuBehaviorProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        // Close the menu and submenu root node.\n        state.toggleKey(rootKey);\n        state.selectionManager.setFocusedKey(rootKey);\n        parentState.selectionManager.setFocused(true);\n        if (submenuBehavior !== \"default\") {\n          e.stopPropagation();\n        }\n        return;\n      }\n    },\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n      // it sets the focus key, which will move focus to that item.\n      if (props.autoFocus === true) {\n        ref.current?.focus();\n      }\n    });\n  }, []);\n\n  return {\n    submenuProps: mergeProps(menuProps, submenuProps, submenuBehaviorProps),\n  };\n}\n\nexport interface SubmenuProps<T> {\n  parentState: TreeState<T>;\n  rootKey: React.Key;\n}\n\nexport function Submenu<T>({ parentState, rootKey }: SubmenuProps<T>) {\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const { submenuProps } = useSubmenu({ rootKey, parentState }, state, ref);\n\n  return (\n    <StyledMenu {...submenuProps} ref={ref}>\n      {renderMenuNodes(state, [...(rootItem?.childNodes || [])])}\n    </StyledMenu>\n  );\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport React, { Key, RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\n\nexport class MenuKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  private keys: React.Key[];\n  constructor(\n    rootKey: Key | null,\n    private collection: Collection<Node<T>>,\n    disabledKeys: Set<React.Key>,\n    ref: React.RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n    this.keys = [...collection.getKeys()]\n      .map((key) => collection.getItem(key))\n      .flatMap((item) => {\n        if (item.parentKey == rootKey) {\n          if (item.type === \"item\") {\n            return [item.key];\n          } else if (item.type === \"section\") {\n            return [...item.childNodes].map(({ key }) => key);\n          }\n        }\n        return [];\n      });\n  }\n\n  getFirstKey(): React.Key {\n    return this.keys[0];\n  }\n  getLastKey(): React.Key {\n    return this.keys.slice(-1)[0];\n  }\n\n  getKeyBelow(key: React.Key): React.Key {\n    const keyBelow = super.getKeyBelow(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyBelow) ? keyBelow : null;\n  }\n  getKeyAbove(key: React.Key): React.Key {\n    const keyAbove = super.getKeyAbove(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyAbove) ? keyAbove : null;\n  }\n}\n\n/**\n * Behavior accessibility of submenus:\n * - Closing submenu on ArrowLeft key press.\n *   Note that it can't be implemented in useMenuItem, because the focus might be on no the submenu itself and not any\n *   of its items\n * @param rootKey: Key of the root node, the submenu is created from its children\n * @param state\n * @param ref\n */\nexport function useSubmenu<T>(\n  { rootKey }: { rootKey: Key },\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { keyboardProps: submenuProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Keyboard events bubble through portals. Don't handle keyboard events\n      // for elements outside the collection (e.g. menus).\n      if (!ref.current?.contains(e.target as Element)) {\n        e.continuePropagation();\n        return;\n      }\n      const root = state.collection.getItem(rootKey);\n      if (e.key === \"ArrowLeft\" && state.expandedKeys.has(root.key)) {\n        state.toggleKey(root.key);\n        state.selectionManager.setFocused(true);\n        state.selectionManager.setFocusedKey(root.key);\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return {\n    submenuProps,\n  };\n}\n","import { TreeState } from \"@react-stately/tree\";\nimport { useState } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\n\n/**\n * Creates a TreeState corresponding to the submenu, from the state of a parent (sub)menu.\n * The collection and everything is the same, and the only difference from the parent state is selection manager\n * having a separate focused state to keep the focused state of each menu container separately, as the submenus\n * are usually rendered in separate overlays.\n */\nexport function useSubmenuState<T>(parentState: TreeState<T>) {\n  const [isFocused, setFocused] = useState(false);\n  return {\n    ...parentState,\n    selectionManager: new SelectionManager(parentState.collection, {\n      // @ts-expect-error state is private\n      ...parentState.selectionManager.state,\n      isFocused,\n      setFocused,\n    }),\n  };\n}\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.li`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\"; // private import\n\nimport { MenuItem } from \"./MenuItem\";\nimport { MenuSection } from \"./MenuSection\";\n\nexport function renderMenuNodes<T>(\n  state: TreeState<T>,\n  nodes: Node<T>[],\n  filter: (node: Node<T>) => boolean = () => true\n) {\n  return nodes.filter(filter).map((node) => {\n    switch (node.type) {\n      case \"item\":\n        return <MenuItem key={node.key} item={node} state={state} />;\n      case \"section\":\n        return (\n          <MenuSection\n            key={node.key}\n            item={node}\n            state={state}\n            filter={filter}\n          />\n        );\n      case \"divider\":\n        return <ListDivider key={node.key} />;\n    }\n  });\n}\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown in the top left corner of list, tree, etc., which shows the search\n * query.\n * @see SpeedSearchInput\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ noMatch?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ noMatch, theme }) =>\n    noMatch\n      ? theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)\n      : theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        // Seems reasonable to prevent default here generally, but the specific case this is added for is the space key,\n        // scrolling the page.\n        event.preventDefault();\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { RefObject } from \"react\";\n\nexport interface SpeedSearchState {\n  /**\n   * Whether speed search is active. Speed search becomes active when the user starts to type and becomes inactive\n   * when Escape is pressed, or when the speed search container is blurred and `stickySearch` is false.\n   * Whenever speed search becomes inactive, search text is also cleared.\n   * Note that speed search can be active while search term is empty.\n   */\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  /**\n   * clears search term and sets active to false\n   */\n  clear: () => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    active: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.active!,\n    props.active || false,\n    props.onActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n    clear: () => {\n      setSearchTerm(\"\");\n      setActive(false);\n    },\n  };\n}\n\nexport interface SpeedSearchProps {\n  stickySearch?: boolean;\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { stickySearch }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState,\n  ref: RefObject<HTMLElement>\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!ref.current?.contains(e.target as HTMLElement)) {\n        // In case events are propagated through portals\n        return;\n      }\n      if ((e.key === \"a\" && e.metaKey) || e.ctrlKey) {\n        e.preventDefault();\n      }\n      if (e.key === \"Escape\") {\n        if (searchTerm) {\n          clear();\n          return;\n        }\n      } else {\n        ghostInputKeydown(e);\n      }\n      e.continuePropagation();\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onFocusWithinChange: (focused) => {\n      if (!focused && !stickySearch) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nconst StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n  alwaysShowAsFocused,\n}: {\n  item: Node<T>;\n  alwaysShowAsFocused?: boolean;\n}) => (\n  <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n    <TreeNode\n      key={item.key}\n      item={item}\n      alwaysShowAsFocused={alwaysShowAsFocused}\n    />\n  </SpeedSearchItemHighlightsProvider>\n);\n","import React, { ForwardedRef, useRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\nimport { TreeRefValue } from \"../useTreeRef\";\nimport { StyledTree } from \"../StyledTree\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { SpeedSearchTreeNode } from \"./SpeedSearchTreeNode\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps;\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      alwaysShowAsFocused = false,\n      ...props\n    }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<TreeRefValue>\n  ) => {\n    const state = useTreeState(\n      { ...props, disallowEmptySelection: !props.allowEmptySelection },\n      forwardedRef\n    );\n    const ref = useRef<HTMLDivElement>(null);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n                alwaysShowAsFocused={alwaysShowAsFocused}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    stickySearch: props.stickySearch,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    ref,\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (\n        [\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key) &&\n        !hasAnyModifier(e)\n      ) {\n        speedSearch.clear();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList)`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import React, { Key, MutableRefObject } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport type TreeContextType<T> = {\n  state: TreeState<T>;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { TREE_ICON_SIZE } from \"./TreeNodeIcon\";\n\nexport const StyledTreeNode = styled(StyledListItem).attrs({ as: \"div\" })<{\n  level: number;\n}>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n  padding-right: 0.25rem;\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"Tree.foreground\" as UnknownThemeProp<\"Tree.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"Tree.selectionForeground\" as UnknownThemeProp<\"Tree.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"Tree.selectionBackground\" as UnknownThemeProp<\"Tree.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"Tree.selectionInactiveForeground\" as UnknownThemeProp<\"Tree.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"Tree.selectionBackgroundInactive\" as UnknownThemeProp<\"Tree.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n    };\n  }}\n`;\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\nimport { StyledTreeNode } from \"@intellij-platform/core/Tree/StyledTreeNode\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n  alwaysShowAsFocused?: boolean;\n};\n\nexport function TreeNode<T>({\n  item,\n  alwaysShowAsFocused = false,\n}: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused || alwaysShowAsFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isContainerFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n  const ariaProps = {\n    role: \"treeitem\",\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }, ariaProps),\n  };\n}\n","import React, { Key, RefObject, useMemo, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { FocusEvents } from \"@react-types/shared/src/events\";\n\nexport interface SelectableTreeProps<T>\n  extends DOMProps,\n    Omit<FocusEvents, \"onFocusChange\"> {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n\n  allowEmptySelection?: boolean;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  { onAction, onFocus, onBlur, ...props }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    selectOnFocus: true,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    if (focusedKey == null) {\n      return;\n    }\n    const item = state.collection.getItem(focusedKey);\n    const isExpandable = item.hasChildNodes;\n    const expanded = state.expandedKeys.has(focusedKey);\n    const isDisabled = state.disabledKeys.has(focusedKey);\n    if (isDisabled) {\n      event.continuePropagation();\n      return;\n    }\n\n    props?.onNodeKeyDown?.(event, item);\n\n    const shouldToggle =\n      !hasAnyModifier(event) &&\n      (event.key === \"Enter\" ||\n        (event.key === \"ArrowLeft\" && expanded) ||\n        (event.key === \"ArrowRight\" && !expanded));\n\n    if (isExpandable && shouldToggle) {\n      event.preventDefault();\n      state.toggleKey(focusedKey);\n    } else if (event.key === \"Enter\") {\n      onAction?.(focusedKey);\n    } else {\n      // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n      // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n      // inputs when the propagation is not prevented.\n      selectionKeyDown?.(event);\n      event.continuePropagation();\n    }\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused,\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps,\n      { onFocus, onBlur }\n    ),\n    treeContext,\n    focused,\n  };\n}\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeSelectionManager } from \"./TreeSelectionManager\";\nimport { TreeCollection } from \"./useTreeState\";\n\nexport interface TreeRefValue {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n\n  /**\n   * Extends selection to all siblings of the currently focused node.\n   */\n  expandSelection(): void;\n  /**\n   * Shrinks selection towards currently focused node.\n   */\n  shrinkSelection(): void;\n\n  expandAll(): void;\n  collapseAll(): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef<T extends {}>(\n  props: {\n    tree: TreeCollection<T>;\n    selectionManager: TreeSelectionManager;\n    setExpandedKeys: (keys: Set<Key>) => void;\n  },\n  forwardedRef?: ForwardedRef<TreeRefValue>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n        expandSelection() {\n          latestState.current.selectionManager.expandSelection();\n        },\n        shrinkSelection() {\n          latestState.current.selectionManager.shrinkSelection();\n        },\n        expandAll() {\n          latestState.current.setExpandedKeys(\n            latestState.current.tree.getAllExpandableKeys()\n          );\n        },\n        collapseAll() {\n          const { tree, setExpandedKeys, selectionManager } =\n            latestState.current;\n          const focusedKey = selectionManager.focusedKey;\n          setExpandedKeys(new Set());\n\n          // Find the root node that is a grandparent of focused node, and focus/select it.\n          // NOTE: this behaviour of updating selection when nodes are collapsed is something to be fixed in general,\n          // and then this custom logic here would be not necessary.\n          if (focusedKey && !tree.rootKeys.includes(focusedKey)) {\n            let item = tree.getItem(focusedKey);\n            while (item?.parentKey != null) {\n              item = tree.getItem(item.parentKey);\n            }\n            if (item) {\n              selectionManager.setFocusedKey(item.key);\n              if (selectionManager.isSelected(focusedKey)) {\n                selectionManager.select(item.key);\n              }\n            }\n          }\n        },\n      };\n    },\n    []\n  );\n}\n","//@ts-nocheck\n/**\n * Not exported from @react-stately/tree, but needed in the custom implementation of useTreeState\n */\n\nimport { Key } from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","import { Node } from \"@react-types/shared\";\nimport { Key } from \"react\";\n\n/**\n * given a node, returns keys of all consecutive single children\n */\nexport function getSingleChildrenKeys<T>(\n  node: Node<T> | null | undefined\n): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive<T>(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n): Key[] {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nconst isExpandable = <T>(node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager,\n  SelectionManagerOptions,\n} from \"@react-stately/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key } from \"react\";\n\nexport class TreeSelectionManager extends SelectionManager {\n  private readonly collection: Collection<Node<unknown>>;\n\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState,\n    options?: SelectionManagerOptions\n  ) {\n    super(collection, state, options);\n    this.collection = collection;\n  }\n\n  expandSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { expandKeys } = this.getExpandAndShrinkKeys(node);\n      if (expandKeys.length > 0) {\n        this.setSelectedKeys([...this.selectedKeys, ...expandKeys]);\n      }\n    }\n  }\n  shrinkSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { shrinkKeys } = this.getExpandAndShrinkKeys(node);\n      if (shrinkKeys.length > 0) {\n        this.setSelectedKeys(\n          [...this.selectedKeys].filter((key) => !shrinkKeys.includes(key))\n        );\n      }\n    }\n  }\n\n  private getExpandAndShrinkKeys(node: Node<unknown>) {\n    return this.recursivelyGetExpandAndShrinkKeys(\n      node,\n      [...this.collection.getKeys()],\n      null\n    );\n  }\n  /**\n   * Starting from a node, traverses the tree up, until it reaches the root of the fully selected subtree that includes\n   * the starting node. The root itself may or may not be selected. Returns:\n   * - keys to be added to selection, when expanding selection\n   * - keys to be removed from selection, when shrinking selection\n   */\n  private recursivelyGetExpandAndShrinkKeys(\n    node: Node<unknown>,\n    keys: Array<Key>,\n    previousChild: Key | null\n  ): { expandKeys: Key[]; shrinkKeys: Key[] } {\n    const parent =\n      node && node.parentKey ? this.collection.getItem(node.parentKey) : null;\n    const newKeys = keys.filter((key) => key !== previousChild);\n    const parentDescendants = parent\n      ? getAllDescendants(parent, newKeys).map(({ key }) => key)\n      : this.getAllRoots().flatMap((key) =>\n          key !== node.key\n            ? getAllDescendants(this.collection.getItem(key), newKeys)\n                .map(({ key }) => key)\n                .concat(key)\n            : []\n        );\n    if (parent && parentDescendants.every((key) => this.isSelected(key))) {\n      return this.recursivelyGetExpandAndShrinkKeys(parent, keys, node.key);\n    }\n    const descendants = getAllDescendants(\n      node,\n      keys.filter((key) => key !== previousChild)\n    ).map(({ key }) => key);\n\n    return {\n      expandKeys: descendants.some((key) => !this.isSelected(key))\n        ? descendants\n        : !this.isSelected(node.key)\n        ? [node.key]\n        : parentDescendants,\n      shrinkKeys:\n        parentDescendants.length > 0 &&\n        parentDescendants.every((key) => this.isSelected(key))\n          ? parentDescendants\n          : this.isSelected(node.key) && previousChild\n          ? [node.key]\n          : descendants.filter((key) => this.isSelected(key)),\n    };\n  }\n\n  private getAllRoots() {\n    return [...this.collection.getKeys()].filter(\n      (key) => this.collection.getItem(key).parentKey == null\n    );\n  }\n}\n\nfunction getAllDescendants<T>(\n  node: Node<T>,\n  stopKeys: Array<React.Key>\n): Node<T>[] {\n  const childNodes = (node.hasChildNodes ? [...node.childNodes] : []).filter(\n    (node) => stopKeys.includes(node.key)\n  );\n  return node.hasChildNodes\n    ? childNodes.concat(\n        childNodes.map((node) => getAllDescendants(node, stopKeys)).flat()\n      )\n    : [];\n}\n","/**\n * Properly typed filter function for filtering out null/undefined items in array.\n */\nexport const notNull = <T>(\n  item: T | undefined | null\n): item is NonNullable<T> => item != null;\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeProps as _TreeProps, TreeState } from \"@react-stately/tree\";\nimport {\n  TreeRefValue,\n  useTreeRef,\n} from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport { useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport { TreeCollection as _TreeCollection } from \"./__copied__TreeCollection\";\nimport { getSingleChildrenKeys } from \"./getSingleChildrenKeys\";\nimport { TreeSelectionManager } from \"@intellij-platform/core/Tree/TreeSelectionManager\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport class TreeCollection<T> extends _TreeCollection<T> {\n  public readonly rootKeys: Key[];\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys: Set<Key> }\n  ) {\n    super(nodes, { expandedKeys });\n    this.rootKeys = Array.from(nodes).map(({ key }) => key);\n  }\n\n  getAllExpandableKeys(): Set<Key> {\n    const rootNodes = this.rootKeys\n      .map((key) => this.getItem(key))\n      .filter(notNull);\n    return this.recursivelyAddExpandableKeys(rootNodes, new Set<Key>());\n  }\n\n  private recursivelyAddExpandableKeys(\n    nodes: Iterable<Node<T>>,\n    result: Set<Key>\n  ) {\n    for (const node of nodes) {\n      if (node?.hasChildNodes) {\n        result.add(node.key);\n        this.recursivelyAddExpandableKeys(node.childNodes, result);\n      }\n    }\n    return result;\n  }\n}\nexport interface TreeProps<T>\n  extends _TreeProps<T>,\n    CollectionCacheInvalidationProps {\n  childExpansionBehaviour?: \"multi\" | \"single\";\n}\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n *\n * Similar to (and initially copied from) useTreeState from @react-stately/tree, but with the following changes:\n * - Supports exposing some imperative API via ref.\n *   Could be done via a wrapper too.\n * - Different onToggle implementation with two adjustments to match Intellij Platform:\n *   - Collapsing a key collapses all descendants as well.\n *   - Expanding a single-child node will recursively expand all single-child descendants.\n *   Couldn't be done with a wrapper in a clean and optimal way. Access to setExpandedKey is not provided. We would need\n *   to either maintain a new state for expanded keys and ignore the one returned from the wrapped hook, or\n *   inefficiently call the returned `toggleKey` function many times.\n * - Supports collection invalidation via CollectionCacheInvalidationProps\n *   Perhaps not the most important addition, but not possible to be done via a wrapper.\n * - Uses TreeSelectionManager instead of the default SelectionManager, which implements expand/shrink selection.\n *   Could be done in a wrapper, with a little hack. Would need to replace selection manager.\n * - returned `collection` is of type `TreeCollection` (which is an improved version of react-stately `TreeCollection`),\n *   instead of the more generic `Collection`.\n */\nexport function useTreeState<T extends object>(\n  { childExpansionBehaviour = \"multi\", ...props }: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRefValue>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined!,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange!\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  // @ts-expect-error imprecise typing in @react-stately/selection\n  let tree = useCollection<T, TreeCollection<T>>(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  const selectionManager = new TreeSelectionManager(\n    tree as Collection<Node<T>>,\n    selectionState\n  );\n\n  useTreeRef({ selectionManager, setExpandedKeys, tree }, treeRef);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      // @ts-expect-error imprecise typing in @react-stately/selection\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const toggleKey = (key: Key) => {\n    let newExpandedKeys = toggleTreeNode(\n      tree as Collection<Node<T>>,\n      expandedKeys,\n      key\n    );\n    if (childExpansionBehaviour === \"single\") {\n      const expandedSiblings = getSiblings(tree, key).filter(\n        (aKey) => aKey !== key && expandedKeys.has(aKey)\n      );\n      newExpandedKeys = expandedSiblings.reduce((expandedKeys, expandedKey) => {\n        return toggleTreeNode(\n          tree as Collection<Node<T>>,\n          expandedKeys,\n          expandedKey\n        );\n      }, newExpandedKeys);\n    }\n    setExpandedKeys(newExpandedKeys);\n  };\n\n  return {\n    collection: tree as Collection<Node<T>>,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n    selectionManager,\n  };\n}\n\nfunction getChildItems<T>(node: Node<T>): Node<T>[] {\n  const childNodes = [...(node.childNodes || [])];\n  const childItems = childNodes.filter(({ type }) => type === \"item\");\n  const sectionItems = childNodes.filter(({ type }) => type === \"section\");\n\n  return childItems.concat(sectionItems.flatMap(getChildItems));\n}\n\nfunction getRootItemKeys(tree: TreeCollection<unknown>) {\n  return tree.rootKeys\n    .map((key) => tree.getItem(key))\n    .filter(notNull)\n    .flatMap(getChildItems)\n    .map(({ key }) => key);\n}\n/**\n * Returns the siblings of an item in tree, ignoring sections.\n * Disclaimer: The code is done quick and dirty and in a rush. Unpleasant code, good candidate for refactoring :D\n */\nfunction getSiblings(tree: TreeCollection<unknown>, key: Key): Key[] {\n  const parentKey = tree.getItem(key)?.parentKey;\n  if (!parentKey) {\n    return [...tree.rootKeys].concat(getRootItemKeys(tree));\n  }\n  let parent = parentKey ? tree.getItem(parentKey) : null;\n  if (parent?.type === \"item\") {\n    return getChildItems(parent).map(({ key }) => key);\n  }\n  const siblings: Key[] = [];\n  while (parent) {\n    siblings.push(...getChildItems(parent).map(({ key }) => key));\n    if (parent.type === \"section\") {\n      if (parent.parentKey) {\n        parent = tree.getItem(parent.parentKey);\n      } else {\n        siblings.push(...getRootItemKeys(tree));\n        parent = null;\n      }\n    } else {\n      parent = null;\n    }\n  }\n  return Array.from(new Set(siblings));\n}\nfunction toggleTreeNode(\n  tree: Collection<Node<unknown>>,\n  expandedKeys: Set<Key>,\n  key: Key\n): Set<Key> {\n  // toggling a non-expandable node should be no-op\n  if (!expandedKeys.has(key) && !tree.getItem(key).hasChildNodes) {\n    return expandedKeys;\n  }\n  const newKeys = toggleKey(expandedKeys, key);\n  // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n  // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n  for (const aKey of newKeys) {\n    if (tree.getItem(aKey) == null) {\n      newKeys.delete(aKey);\n    }\n  }\n\n  // If we are toggling it open, expand all expandable single-child items\n  if (newKeys.has(key)) {\n    for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n      newKeys.add(aKey);\n    }\n  }\n  return newKeys;\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import { LayoutNode, ListLayout } from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport { InvalidationContext, Rect, Size } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = super.buildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","import React, { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import { useSelectableItem as useOriginalSelectableItem } from \"@react-aria/selection\";\nimport { MouseEventHandler } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\n/**\n * A wrapper around useSelectableItem, which adjusts for intellij platform nuances:\n * - Selects item with right clicks as well, which allows ContextMenuContainer to be used with any collection component\n *   without the need for built-in context-menu support in such components. We won't need this if we move to a built-in\n *   context-menu support for List,Tree, etc.\n * @private\n */\nexport const useSelectableItem: typeof useOriginalSelectableItem = (\n  options\n) => {\n  const onContextMenu: MouseEventHandler<HTMLElement> = (e) => {\n    if (!options.selectionManager.isSelected(options.key)) {\n      options.selectionManager.select(options.key, {\n        type: \"press\",\n        pointerType: \"mouse\",\n        target: e.currentTarget,\n        shiftKey: e.shiftKey,\n        metaKey: e.metaKey,\n        ctrlKey: e.ctrlKey,\n        altKey: e.altKey,\n      });\n    }\n  };\n  const result = useOriginalSelectableItem(options);\n  return {\n    ...result,\n    itemProps: mergeProps(result.itemProps, { onContextMenu }),\n  };\n};\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<{ focus: (forceFocusFirst?: boolean) => void }>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (forceFocusFirst?: boolean) => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        if (forceFocusFirst) {\n          return focusManager.focusFirst();\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","import React from \"react\";\nimport { isMac } from \"@react-aria/utils\";\n\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n\nexport function hasAnyModifier(e: KeyboardEvent | React.KeyboardEvent) {\n  return e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n}\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useLayoutEffect, useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos = { x: 0, y: 0 };\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = (e) => {\n        lastMouseClientPos = { x: e.clientX, y: e.clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (options.isOpen && targetRef.current) {\n      targetRef.current.style.left = `${lastMouseClientPos.x}px`;\n      targetRef.current.style.top = `${lastMouseClientPos.y}px`;\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e?: React.MouseEvent) => {\n      if (targetRef.current && e) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { DividerItem } from \"./src/Collections/Divider\";\n\nexport type Legend = { name: string };\nexport const legends: Array<\n  Legend | DividerItem | { items: Legend[]; title: string }\n> = [\n  { name: \"Paco de Lucia\" },\n  { name: \"Vicente Amigo\" },\n  new DividerItem(),\n  { name: \"Gerardo Nunez\" },\n  { name: \"Paco Serrano\" },\n  new DividerItem(),\n  { name: \"Sabicas\" },\n  {\n    title: \"Super legends\",\n    items: [{ name: \"Sabicas2\" }],\n  },\n  { name: \"Pepe Habichuela\" },\n  { name: \"El Amir\" },\n  { name: \"Paco Peña\" },\n];\n","import React from \"react\";\nimport { CollectionElement } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\n\nimport { HighlightedTextValue } from \"../CollectionSpeedSearch\";\n\ntype TreeItem = {\n  name: string;\n  children?: TreeItem[];\n};\nexport const treeItems: TreeItem[] = [\n  { name: \"index.ts\" },\n  {\n    name: \"List\",\n    children: [\n      {\n        name: \"BasicList\",\n        children: [\n          { name: \"BasicList.stories.tsx\" },\n          { name: \"BasicList.tsx\" },\n          { name: \"BasicListItem.tsx\" },\n          { name: \"useBasicList.ts\" },\n        ],\n      },\n      {\n        name: \"SpeedSearchList\",\n        children: [\n          { name: \"SpeedSearchList.stories.tsx\" },\n          { name: \"SpeedSearchList.tsx\" },\n          { name: \"SpeedSearchListItem.tsx\" },\n          { name: \"useSpeedSearchList.ts\" },\n        ],\n      },\n      { name: \"ListDivider.tsx\" },\n    ],\n  },\n  { name: \"Theme\", children: [{ name: \"createTheme.ts\" }] },\n];\n\nexport const staticTreeItems: Array<CollectionElement<any>> = (\n  <>\n    <Item key=\"index.ts\" textValue=\"index.ts\">\n      index.ts\n    </Item>\n    <Item textValue=\"List\" title=\"List\" key=\"List\">\n      <Item textValue=\"BasicList\" title=\"BasicList\" key=\"BasicList\">\n        <Item textValue=\"BasicList.stories.tsx\">BasicList.stories.tsx</Item>\n        <Item textValue=\"BasicList.tsx\">BasicList.tsx</Item>\n        <Item textValue=\"BasicListItem.tsx\">BasicListItem.tsx</Item>\n        <Item textValue=\"useBasicList.ts\">useBasicList.ts</Item>\n      </Item>\n\n      <Item\n        textValue=\"SpeedSearchList\"\n        title=\"SpeedSearchList\"\n        key=\"SpeedSearchList\"\n      >\n        <Item textValue=\"SpeedSearchList.stories.tsx\">\n          SpeedSearchList.stories.tsx\n        </Item>\n        <Item textValue=\"SpeedSearchList.tsx\">SpeedSearchList.tsx</Item>\n        <Item textValue=\"SpeedSearchListItem.tsx\">SpeedSearchListItem.tsx</Item>\n        <Item textValue=\"useSpeedSearchList.ts\">useSpeedSearchList.ts</Item>\n      </Item>\n\n      <Item textValue=\"ListDivider.tsx\">ListDivider.tsx</Item>\n    </Item>\n    <Item textValue=\"Theme\" title=\"Theme\" key=\"Theme\">\n      <Item textValue=\"createTheme.ts\">createTheme.ts</Item>\n    </Item>\n  </>\n).props.children;\nexport const staticSpeedSearchTreeItems: Array<CollectionElement<any>> = (\n  <>\n    <Item key=\"index.ts\" textValue=\"index.ts\">\n      {<HighlightedTextValue />}\n    </Item>\n    <Item textValue=\"List\" title={<HighlightedTextValue />} key=\"List\">\n      <Item\n        textValue=\"BasicList\"\n        title={<HighlightedTextValue />}\n        key=\"BasicList\"\n      >\n        <Item textValue=\"BasicList.stories.tsx\">\n          {<HighlightedTextValue />}\n        </Item>\n        <Item textValue=\"BasicList.tsx\">{<HighlightedTextValue />}</Item>\n        <Item textValue=\"BasicListItem.tsx\">{<HighlightedTextValue />}</Item>\n        <Item textValue=\"useBasicList.ts\">{<HighlightedTextValue />}</Item>\n      </Item>\n\n      <Item\n        textValue=\"SpeedSearchList\"\n        title={<HighlightedTextValue />}\n        key=\"SpeedSearchList\"\n      >\n        <Item textValue=\"SpeedSearchList.stories.tsx\">\n          {<HighlightedTextValue />}\n        </Item>\n        <Item textValue=\"SpeedSearchList.tsx\">{<HighlightedTextValue />}</Item>\n        <Item textValue=\"SpeedSearchListItem.tsx\">\n          {<HighlightedTextValue />}\n        </Item>\n        <Item textValue=\"useSpeedSearchList.ts\">\n          {<HighlightedTextValue />}\n        </Item>\n      </Item>\n\n      <Item textValue=\"ListDivider.tsx\">{<HighlightedTextValue />}</Item>\n    </Item>\n    <Item textValue=\"Theme\" title={<HighlightedTextValue />} key=\"Theme\">\n      <Item textValue=\"createTheme.ts\">{<HighlightedTextValue />}</Item>\n    </Item>\n  </>\n).props.children;\n","import { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree, TreeRefValue } from \"@intellij-platform/core/Tree\";\nimport { staticSpeedSearchTreeItems } from \"@intellij-platform/core/Tree/story-helpers\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Iterable<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = [\"BasicList\"],\n  onSelectedKeysChange,\n  treeRef,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: Selection) => void;\n  treeRef?: React.RefObject<TreeRefValue>;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      ref={treeRef}\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={new Set(defaultSelectedKeys)}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      {staticSpeedSearchTreeItems}\n    </SpeedSearchTree>\n  );\n};\n","import { Legend, legends } from \"../../test-data\";\nimport React, { ReactNode } from \"react\";\nimport {\n  Divider,\n  DividerItem,\n  HighlightedTextValue,\n  Item,\n  Section,\n} from \"@intellij-platform/core\";\n\nexport const renderItemCustomUI = (item: Legend, content?: ReactNode) => (\n  <Item key={item.name} textValue={item.name}>\n    <div style={{ height: 40, display: \"flex\", alignItems: \"center\" }}>\n      🎸 &nbsp;\n      <b>{content || item.name}</b>\n    </div>\n  </Item>\n);\nexport const itemRenderer =\n  (\n    renderItem: (item: Legend, content?: ReactNode) => JSX.Element,\n    content?: ReactNode\n  ) =>\n  (item: typeof legends[number]) => {\n    if (item instanceof DividerItem) {\n      return <Divider key={item.key} />;\n    }\n    if (\"items\" in item) {\n      return (\n        <Section items={item.items} key={item.title} title={item.title}>\n          {(item) => renderItem(item, content)}\n        </Section>\n      );\n    }\n    return renderItem(item as Legend, content);\n  };\nexport const renderItemText = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    {item.name}\n  </Item>\n);\nexport const renderItemTextWithHighlights = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    <HighlightedTextValue />\n  </Item>\n);\n","import React, { Key, useState } from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { List, ListProps } from \"./List\";\nimport { legends } from \"../../test-data\";\nimport { Divider } from \"../Collections/Divider\";\nimport { Pane } from \"../story-components\";\nimport {\n  itemRenderer,\n  renderItemCustomUI,\n  renderItemText,\n} from \"./story-helpers\";\nimport {\n  ContextMenuContainer,\n  Menu,\n  Item,\n  Section,\n  MenuItemLayout,\n  PlatformIcon,\n} from \"@intellij-platform/core\";\n\nexport default {\n  title: \"Components/List (Basic)\",\n  component: List,\n} as Meta;\n\nexport const Default: Story<ListProps<never>> = (props) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        {...props}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\n\nDefault.args = {};\n\nexport const AlwaysShownAsFocused = () => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        // alwaysShowAsFocused\n      >\n        {itemRenderer(renderItemCustomUI)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const WithStaticData = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"multiple\" fillAvailableSpace>\n        <Item>Paco de lucia</Item>\n        <Divider />\n        <Item>Vicente Amigo</Item>\n        <Section title=\"Other\">\n          <Item>Gerardo Nunez</Item>\n          <Item>El Amir</Item>\n        </Section>\n      </List>\n    </Pane>\n  );\n};\n\nexport const MultiSelect = ({\n  fillAvailableSpace,\n  shouldFocusWrap,\n  alwaysShowAsFocused,\n}: any) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"multiple\"\n        items={legends}\n        fillAvailableSpace={fillAvailableSpace}\n        shouldFocusWrap={shouldFocusWrap}\n        alwaysShowAsFocused={alwaysShowAsFocused}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\nMultiSelect.argTypes = {\n  shouldFocusWrap: { control: \"boolean\" },\n};\nMultiSelect.args = {\n  shouldFocusWrap: { value: false },\n};\n\nexport const WithContextMenu: Story = () => {\n  const [selectedKeys, setSelectedKeys] = useState<\"all\" | Set<Key>>(\n    new Set([])\n  );\n  return (\n    <Pane>\n      <ContextMenuContainer\n        renderMenu={() => {\n          const renderActions = () => {\n            if (typeof selectedKeys !== \"string\" && selectedKeys.size === 0) {\n              return <Item>Nothing here</Item>;\n            } else {\n              return [\n                <Item textValue={`Cut`} key=\"Cut\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n                    content={`Cut`}\n                    shortcut={\"⌘X\"}\n                  />\n                </Item>,\n                <Item textValue={`Copy`} key=\"Copy\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"actions/copy\"} />}\n                    content={`Copy`}\n                    shortcut={\"⌘C\"}\n                  />\n                </Item>,\n                <Item textValue={`Delete`} key=\"Paste\">\n                  <MenuItemLayout content={`Delete`} shortcut=\"⌫\" />\n                </Item>,\n              ];\n            }\n          };\n          return <Menu aria-label=\"Tree Context Menu\">{renderActions()}</Menu>;\n        }}\n      >\n        <List\n          selectionMode=\"single\"\n          selectedKeys={selectedKeys}\n          onSelectionChange={setSelectedKeys}\n          items={legends}\n          fillAvailableSpace\n        >\n          {itemRenderer(renderItemText)}\n        </List>\n      </ContextMenuContainer>\n    </Pane>\n  );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'List';\nexport const metadata = {\n  \"unversionedId\": \"components/List\",\n  \"id\": \"components/List\",\n  \"title\": \"List\",\n  \"description\": \"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\",\n  \"source\": \"@site/docs/components/List.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/List\",\n  \"permalink\": \"/jui/docs/components/List\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/List.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Link\",\n    \"permalink\": \"/jui/docs/components/Link\"\n  },\n  \"next\": {\n    \"title\": \"Menu\",\n    \"permalink\": \"/jui/docs/components/Menu\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { Default } from \"@intellij-platform/core/List/List.stories\";\nimport { ExampleContext } from \"@site/src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'ItemLayout',\n  id: 'itemlayout',\n  level: 2\n}, {\n  value: 'SpeedSearchList',\n  id: 'speedsearchlist',\n  level: 2\n}, {\n  value: 'ContextMenu',\n  id: 'contextmenu',\n  level: 2\n}, {\n  value: 'Advanced use',\n  id: 'advanced-use',\n  level: 2\n}, {\n  value: 'Custom list component with useList and useSpeedSearchList',\n  id: 'custom-list-component-with-uselist-and-usespeedsearchlist',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h1>\n    <p>{`Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\na list of items with a single attribute. Here is some examples from JetBrains IDEs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Tools -> SSH Configurations`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Appearance & Behavior -> Scopes`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> General -> Console -> Exceptions`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> File and Code Templates`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> Natural Languages`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Show Local History`}</strong>{` window (advanced layout)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Virtualized scrolling support for performance with long lists`}</li>\n    </ul>\n    <ExampleContext mdxType=\"ExampleContext\">\n  <Default mdxType=\"Default\" />\n    </ExampleContext>\n    <h2 {...{\n      \"id\": \"itemlayout\"\n    }}>{`ItemLayout`}</h2>\n    <p>{`While you can render any custom content in `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`s of a list, `}<inlineCode parentName=\"p\">{`ItemLayout`}</inlineCode>{` is a useful helper component implementing\nthe most common cases. Render different parts of an item, such as icon, text, etc. inside a `}<inlineCode parentName=\"p\">{`ItemLayout`}</inlineCode>{` and it handles\nthe layout, and the spacing between them. Some common parts that require a special style are implemented as components\naccessible on `}<inlineCode parentName=\"p\">{`ItemLayout`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<SpeedSearchList selectionMode=\"multiple\">\n  <Item textValue=\"jui\">\n    <ItemLayout>\n      <PlatformIcon icon=\"nodes/folder\" />\n      <HighlightedTextValue />\n      <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n    </ItemLayout>\n  </Item>\n</SpeedSearchList>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"speedsearchlist\"\n    }}>{`SpeedSearchList`}</h2>\n    <h2 {...{\n      \"id\": \"contextmenu\"\n    }}>{`ContextMenu`}</h2>\n    <p>{`In order to have context menu for list items, just wrap the list in a `}<inlineCode parentName=\"p\">{`ContextMenuContainer`}</inlineCode>{`. When the context menu\nis triggered on an item, the selection is also updated right before the context menu opens, so you can render the\ncontext menu based on the selected item(s).`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed noPadding\",\n        \"live\": true,\n        \"themed\": true,\n        \"noPadding\": true\n      }}>{`function ListContextMenuExample() {\n  const [selectedKeys, setSelectedKeys] = useState(new Set());\n\n  return (\n    <ContextMenuContainer\n      renderMenu={() => {\n        const selectedKey = Array.from(selectedKeys)[0];\n        if (!selectedKey) {\n          return (\n            <Menu>\n              <Item>Nothing here</Item>\n            </Menu>\n          );\n        }\n        return (\n          <Menu>\n            <Item textValue={\\`Run '\\${selectedKey}'\\`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon=\"debugger/threadRunning.svg\" />}\n                content={\\`Run '\\${selectedKey}'\\`}\n                shortcut=\"⇧⏎\"\n              />\n            </Item>\n            <Item textValue={\\`Debug '\\${selectedKey}'\\`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon=\"actions/startDebugger.svg\" />}\n                content={\\`Debug '\\${selectedKey}'\\`}\n                shortcut=\"⌃⇧D\"\n              />\n            </Item>\n            <Item textValue={\\`Edit '\\${selectedKey}' Settings...\\`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon=\"actions/editSource.svg\" />}\n                content={\\`Edit '\\${selectedKey}' Settings...\\`}\n              />\n            </Item>\n            <Divider />\n            <Item textValue=\"Jump to source\">\n              <MenuItemLayout\n                icon={<PlatformIcon icon=\"actions/editSource.svg\" />}\n                content=\"Jump to source\"\n                shortcut=\"⌘↓\"\n              />\n            </Item>\n          </Menu>\n        );\n      }}\n    >\n      <List\n        selectionMode=\"single\"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key=\"start\">start</Item>\n        <Item key=\"build\">build</Item>\n        <Item key=\"test\">test</Item>\n        <Item key=\"deploy\">deploy</Item>\n      </List>\n    </ContextMenuContainer>\n  );\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"advanced-use\"\n    }}>{`Advanced use`}</h2>\n    <h3 {...{\n      \"id\": \"custom-list-component-with-uselist-and-usespeedsearchlist\"\n    }}>{`Custom list component with useList and useSpeedSearchList`}</h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["CollectionSpeedSearchContext","React","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","children","itemKey","context","useContext","Error","item","collection","getItem","text","textValue","undefined","props","console","warn","Provider","value","highlightedRanges","matches","get","HighlightedTextValue","Component","speedSearchContext","highlights","useCollectionSpeedSearch","selectionManager","stickySearch","keyboardDelegate","focusBestMatch","ref","speedSearchStateProps","speedSearch","useSpeedSearchState","speedSearchSelectionManager","useCollectionSpeedSearchResult","containerProps","useSpeedSearch","speedSearchKeyboardDelegate","useMemo","wrappedKeyboardDelegate","findFirstMatch","fromKey","direction","currentKey","has","getKeyAbove","getKeyBelow","Object","create","key","getFirstKey","global","firstKey","values","next","getLastKey","lastKey","keys","pop","createSpeedSearchKeyboardDelegate","active","speedSearchContextValue","searchPopupProps","match","size","searchTerm","createSpeedSearchSelectionManager","wrappedSelectionManager","selectAll","state","setSelectedKeys","Set","filter","disabledKeys","result","Map","getKeys","map","type","forEach","matchedRanges","minusculeMatch","set","latestValues","useLatest","useEffect","current","matchedKeys","noneOfTheMatchesAreSelected","some","matchedKey","isSelected","keyToFocus","entries","firstRange","from","sort","rangeA","rangeB","to","getLongestCommonPrefixMatch","length","passedFirstSelection","firstSelectedKey","includes","getMatchToSelect","setFocusedKey","replaceSelection","Divider","_Divider","getCollectionNode","element","rendered","hasChildNodes","DividerItem","seq","id","this","Item","_Item","StatelyItem","originalShouldInvalidate","shouldInvalidate","invalidated","ItemStateContext","useCollectionAutoScroll","isVirtualized","focusedKey","querySelector","scrollIntoView","LafIcon","forwardedRef","themePath","icon","resolvedIconPath","iconDescriptor","theme","useTheme","resolvedValue","modifiers","name","isUnderDarcula","reduce","soFar","modifier","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","amendName","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","PlatformIcon","darkIcon","iconName","dark","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","styled","itemState","selected","isContainerFocused","unmounted","async","error","dataset","loadingIcon","svg","getSvgIcon","catch","e","remove","svgElement","document","createElement","appendChild","outerHTML","fetchIcon","List","allowEmptySelection","alwaysShowAsFocused","fillAvailableSpace","onAction","inputProps","disallowEmptySelection","useRef","useListState","listProps","focused","useList","listItemRenderer","listFocused","ListDivider","as","useSeparator","elementType","orientation","separatorProps","ListItem","isDisabled","itemProps","useSelectableItem","pressProps","usePress","preventFocusOnPress","containerFocused","disabled","node","StyledList","color","css","StyledListItem","backgroundColor","commonColors","labelForeground","asCurrentForeground","labelSelectedForeground","position","display","whiteSpace","paddingLeft","paddingRight","lineHeight","outline","cursor","minWidth","StyledListSectionHeader","fontWeight","renderItem","sectionHeader","renderSectionHeader","render","isSectionNode","childNodes","isDividerNode","onMouseDown","autoFocus","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","useState","focusWithinProps","useFocusWithin","onFocusWithinChange","isEmpty","select","mergeProps","originalUseListState","selectionBehavior","ContextMenuContainer","renderMenu","useMenuTriggerState","overlayProps","overlayRef","positionProps","updatePosition","useMouseEventOverlayPosition","placement","shouldFlip","offset","isOpen","useOverlay","onClose","close","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","onContextMenu","preventDefault","open","useContextMenu","allProps","MenuOverlay","restoreFocus","patchCollectionItem","nodes","partialNode","result2","partialChildNode","partialChildNodeWithoutType","PatchedItem","PatchedSection","Section","convertChildren","Array","isArray","Item2","MenuOverlayContext","MenuContext","useMenu","onActionProp","submenuBehavior","menuContextValue","menuProps","useMenuAria","useMenuState","patchCollectionProps","useTreeState","childExpansionBehaviour","expandedKeys","expandedKey","onExpandedChange","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","Menu","StyledMenu","renderMenuNodes","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItemContext","descriptionProps","labelProps","keyboardShortcutProps","useMenuItemLayout","MenuItem","nestedMenuRef","isExpanded","selectedKeys","isFocused","renderSubmenu","itemWrapper","i","menuItemProps","onMouseEnter","onPointerEnter","otherMenuItemProps","useMenuItemAria","parentKey","useMenuItem","hoverProps","useHover","onHoverStart","toggleKey","togglePressProps","onPressUp","keyboardProps","onKeyDown","stopPropagation","useOverlayPosition","targetRef","crossOffset","MENU_VERTICAL_PADDING","MENU_BORDER_WIDTH","arrowProps","role","onPointerUp","isActive","Selected","parentState","rootKey","StyledMenuItemLayout","Content","Shortcut","currentForegroundAware","MenuItemLayout","content","shortcut","useContextOrThrow","allowedIcon","forceRestoreFocus","WINDOW_SHADOW","StyledVerticalSeparator","StyledMenuItem","StyledMenuItemIcon","StyledNestedArrow","highlightedStyle","defaultStyle","disabledStyle","useSubmenu","rootItem","MenuKeyboardDelegate","submenuProps","useSubmenuAria","submenuBehaviorProps","setTimeout","focus","Submenu","useSubmenuState","constructor","super","flatMap","slice","keyBelow","keyAbove","useKeyboard","contains","target","continuePropagation","root","SelectionManager","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","headingProps","groupProps","useMenuSection","heading","StyledSearchIcon","SpeedSearchPopup","StyledSpeedSearchPopup","noMatch","replace","red","tooltipForeground","useGhostInput","onChange","valueRef","event","ctrlKey","altKey","metaKey","HTMLElement","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","setActive","useControlledState","onActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","clear","ghostInputKeydown","trimmedValue","trimStart","onKeyUp","onFocus","onBlur","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundClip","boxSizing","margin","border","flexShrink","StyledHorizontalSeparator","getAllRanges","ranges","push","index","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","TextWithHighlights","parts","highlighted","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","treeProps","treeContext","useSpeedSearchTree","virtualizerProps","useTreeVirtualizer","TreeContext","StyledTree","Virtualizer","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","hasAnyModifier","selectableTree","useSelectableTree","getKeyLeftOf","getKeyRightOf","StyledTreeNodeIcon","TreeNodeIcon","expanded","iconPath","getIcon","useTreeNodeToggleButton","treeNodeToggleButtonProps","onPress","selectedDescendantKeys","toggleSelection","StyledTreeNode","attrs","level","onActionRef","treeNodeProps","onDoubleClick","useTreeNode","domProps","filterDOMProps","selectionKeyDown","isExpandable","onNodeKeyDown","shouldToggle","useTreeRef","latestState","useImperativeHandle","expandSelection","shrinkSelection","expandAll","setExpandedKeys","tree","getAllExpandableKeys","collapseAll","rootKeys","Symbol","iterator","TreeCollection","keyMap","iterable","last","visit","child","nextKey","prevKey","getKeyBefore","getKeyAfter","at","idx","getSingleChildrenKeys","getSingleChildrenKeysRecursive","previousKeys","childNodesIterator","firstChild","done","noMoreChildren","concat","_","isEmptyIterable","TreeSelectionManager","options","expandKeys","getExpandAndShrinkKeys","shrinkKeys","recursivelyGetExpandAndShrinkKeys","previousChild","parent","newKeys","parentDescendants","getAllDescendants","getAllRoots","every","descendants","stopKeys","flat","notNull","_TreeCollection","rootNodes","recursivelyAddExpandableKeys","add","treeRef","selectionState","useMultipleSelectionState","cacheInvalidation","invalidators","lastInvalidators","usePrevious","anInvalidator","useCollectionCacheInvalidation","useCollection","newExpandedKeys","toggleTreeNode","expandedSiblings","getRootItemKeys","getChildItems","siblings","getSiblings","aKey","childItems","sectionItems","res","delete","VariableWidthListLayout","ListLayout","keyToWidth","visibleContentWidth","buildItem","x","y","layoutNode","layoutInfo","rect","width","buildCollection","getVisibleContentWidth","invalidateEverything","contentSize","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","layoutInfos","Math","max","virtualizer","visibleRect","visibleViews","view","itemContentWidth","intersects","getVisibleRect","FlattenedTreeLayout","buildChild","getVisibleLayoutInfos","layout","estimatedRowHeight","sizeToFit","scrollToItem","shouldScrollX","duration","scrollDirection","isWordSeparator","c","isWhitespace","char","test","isUpperCase","str","toUpperCase","toLowerCase","isMeaningfulChar","ch","input","rawPattern","isStarts","isStart","pattern","join","continuous","inputIndex","patternIndex","lastMatch","chars","previousChar","manager","disallowSelectAll","useLocale","focusSafely","tabIndex","handlers","navigateToKey","childFocus","shiftKey","selectionMode","extendSelection","isCtrlKeyPressed","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","activeElement","currentTarget","relatedTarget","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","useOriginalSelectableItem","pointerType","styledComponents","ThemeConsumer","FocusScope","otherProps","directChildRef","focusManagerRef","useLayoutEffect","nodeToRestore","requestAnimationFrame","body","forceFocusFirst","focusManager","containerElement","parentElement","focusFirst","focusNext","GetFocusManager","hidden","useFocusManager","isMac","Context","nullErrorMessage","innerRef","globalMoveHandler","lastMouseClientPos","clientX","clientY","addEventListener","fakeTarget","assign","style","height","pointerEvents","visibility","left","top","legends","title","items","Pane","flexDirection","marginTop","renderItemCustomUI","alignItems","itemRenderer","renderItemText","Default","args","MultiSelect","argTypes","control","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","ExampleContext","isMDXComponent"],"sourceRoot":""}