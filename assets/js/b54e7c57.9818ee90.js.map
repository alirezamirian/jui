{"version":3,"file":"assets/js/b54e7c57.9818ee90.js","mappings":"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","sources":["webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/listItemRenderer.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/selection/SelectionManager.ts","webpack://website/../jui/src/selection/replaceSelectionManager.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/test-data.ts","webpack://website/../jui/src/story-components.tsx","webpack://website/../jui/src/List/story-helpers.tsx","webpack://website/../jui/src/List/List.stories.tsx","webpack://website/./docs/components/List.mdx","webpack://website/../../node_modules/@react-stately/list/dist/module.js","webpack://website/../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ItemProps } from \"@react-types/shared\";\nimport { ReactElement } from \"react\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\nexport function Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n}\n","import { ItemProps } from \"@react-types/shared\";\nimport React, { ReactElement } from \"react\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nexport function Item<T>(props: ItemProps<T>): ReactElement {\n  return (null as any) as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<\n    PartialNode<T>\n  > = (StatelyItem as any).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { RefObject, useEffect } from \"react\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable } from \"@react-types/shared\";\nimport React, { Key, useRef } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { listItemRenderer } from \"./listItemRenderer\";\nimport { useListState } from \"./useListState\";\n\nexport type ListProps<T extends object> = Omit<\n  AriaListBoxProps<T>,\n  keyof AsyncLoadable\n> & {\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n  /**\n   * By default, if list is not focused, it shows a different style on the selected item,\n   * which acts as a visual clue for list's focus state. This behaviour can be suppressed by setting\n   * `alwaysShowListAsFocused` to `true`. One use case is in master-detail views where you don't\n   * want the list to appear as blurred, when interacting with the details view of the selected\n   * list item. Note that in such use cases, there won't be any visual clue to distinguish focused\n   * state of the link, which is not great from UX perspective, but it's kept like this to match\n   * Jetbrains UI behaviour.\n   */\n  alwaysShowListAsFocused?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n};\n\n/**\n * List view with speedSearch instead of default typeahead.\n * TODO:\n *  - Support virtualization\n *  - Support custom rendering\n *  -\n */\nexport function List<T extends object>({\n  disallowEmptySelection = true,\n  alwaysShowListAsFocused = false,\n  fillAvailableSpace = false,\n  onAction,\n  ...inputProps\n}: ListProps<T>) {\n  const props = { ...inputProps, disallowEmptySelection };\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useListState(props);\n  const { listProps, focused } = useList(props, state, ref);\n\n  return (\n    <StyledList\n      fillAvailableSpace={fillAvailableSpace}\n      {...listProps}\n      ref={ref}\n    >\n      {[...state.collection].map(\n        listItemRenderer({\n          item: (item) => (\n            <ListItem\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={() => onAction?.(item.key)}\n              listFocused={alwaysShowListAsFocused || focused}\n            />\n          ),\n        })\n      )}\n    </StyledList>\n  );\n}\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ orientation: \"vertical\" })}\n    />\n  );\n};\n","import { Node } from \"@react-types/shared\";\nimport { ListState } from \"@react-stately/list\";\nimport React from \"react\";\nimport { useSelectableItem } from \"@react-aria/selection\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { StyledListItem } from \"./StyledListItem\";\n\nexport interface ListItemProps<T> {\n  listFocused: boolean;\n  item: Node<T>;\n  state: ListState<T>;\n  onAction: () => void;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({\n  listFocused,\n  item,\n  state,\n  onAction,\n  children,\n}: ListItemProps<T>) {\n  const ref = React.useRef(null);\n  const disabled = state.disabledKeys.has(item.key);\n  const selected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction,\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={selected}\n      disabled={disabled}\n      aria-disabled={disabled}\n      aria-selected={selected}\n      {...pressProps}\n      ref={ref}\n    >\n      {children || item.rendered}\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\nexport const StyledList = styled.ul<{ fillAvailableSpace?: boolean }>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.li<StyledListItemProps>(\n  ({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\"*.textForeground\", theme.color(\"*.foreground\"));\n    if (selected) {\n      if (containerFocused) {\n        color = theme.color(\n          \"*.selectionForeground\",\n          theme.color(\"*.acceleratorSelectionForeground\")\n        );\n        backgroundColor = theme.color(\"*.selectionBackground\");\n      } else {\n        backgroundColor = theme.color(\"*.selectionBackgroundInactive\");\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n      position: \"relative\",\n      display: \"flex\",\n      whiteSpace: \"nowrap\",\n      paddingLeft: 8, // themed?\n      lineHeight: \"20px\",\n      outline: \"none\",\n      cursor: \"default\",\n      minWidth: \"min-content\", // ?\n    };\n  }\n);\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.li(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { Node } from \"@react-types/shared\";\nimport React from \"react\";\nimport { StyledListSectionHeader } from \"./StyledListSectionHeader\";\nimport { ListDivider } from \"./ListDivider\";\n\ninterface SectionNode<T> extends Node<T> {\n  type: \"section\";\n}\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\n\ninterface DividerNode<T> extends Node<T> {\n  type: \"divider\";\n}\n\nconst isItemNode = <T extends any>(node: Node<T>): node is ItemNode<T> =>\n  node.type === \"item\";\nconst isSectionNode = <T extends any>(node: Node<T>): node is SectionNode<T> =>\n  node.type === \"section\";\nconst isDividerNode = <T extends any>(node: Node<T>): node is DividerNode<T> =>\n  node.type === \"divider\";\n\ntype listItemRendererArgs<T extends any> = {\n  item: (item: ItemNode<T>) => React.ReactNode;\n  sectionHeader?: (item: SectionNode<T>) => React.ReactNode;\n};\nexport const listItemRenderer = <T extends any>({\n  item: renderItem,\n  sectionHeader: renderSectionHeader = (item) => (\n    <StyledListSectionHeader>{item.rendered}</StyledListSectionHeader>\n  ),\n}: listItemRendererArgs<T>) => {\n  return render;\n\n  function render(item: Node<T>): React.ReactNode {\n    if (isItemNode(item)) {\n      return renderItem(item);\n    }\n    if (isSectionNode(item)) {\n      return (\n        <React.Fragment key={item.key}>\n          {renderSectionHeader(item)}\n          {[...(item.childNodes as ItemNode<T>[])].map(render)}\n        </React.Fragment>\n      );\n    }\n    if (isDividerNode(item)) {\n      return <ListDivider key={item.key} />;\n    }\n    return null;\n  }\n};\n","import { SelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nexport interface ListProps\n  extends Omit<\n    SelectableListOptions,\n    | \"selectOnFocus\"\n    | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n    | \"collection\" // Grouped as state, the second argument, like in useListBox\n    | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n    | \"ref\" // Third argument\n  > {\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  props: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is gonna be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and disallowEmptySelection is true.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      props.disallowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.select(firstKey);\n    }\n  }, [props.disallowEmptySelection]);\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { Collection, FocusStrategy, KeyboardDelegate, Node, } from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { MultipleSelectionManager, SelectionManager, } from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"../selection/useSelectableCollection\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport { replaceSelectionManager } from \"../selection/replaceSelectionManager\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T>\n): ListState<T> {\n  return replaceSelectionManager(\n    originalUseListState({ ...props, selectionBehavior: \"replace\" })\n  );\n}\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nconst StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import {\n  MultipleSelectionState,\n  SelectionManager as OriginalSelectionManager,\n} from \"@react-stately/selection\";\nimport { Collection, Node, PressEvent } from \"@react-types/shared\";\nimport { Key } from \"react\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\nexport class SelectionManager extends OriginalSelectionManager {\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState\n  ) {\n    super(collection, state);\n  }\n  select(key: Key, e?: PressEvent | PointerEvent) {\n    if (this.selectionMode === \"none\") {\n      return;\n    }\n\n    if (this.selectionMode === \"single\") {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else {\n      if (e?.shiftKey) {\n        this.extendSelection(key);\n      } else if (\n        isCtrlKeyPressed(e) &&\n        (this.selectedKeys.size > 1 || !this.isSelected(key))\n      ) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    }\n  }\n}\n","import { SelectionManager } from \"./SelectionManager\";\nimport { Collection, Node } from \"@react-types/shared\";\n\n/**\n * collection state hooks like `useList`, `useTree`, etc, don't have an option to pass an\n * alternative `SelectionManager` implementation (which is required to achieve the desired\n * multi-select behavior). So this simple utility is kind of a hacky patch to replace selection\n * manager in the return value of those state hooks\n */\nexport function replaceSelectionManager<\n  T,\n  S extends {\n    selectionManager: SelectionManager;\n    collection: Collection<Node<T>>;\n  }\n>(state: S) {\n  state.selectionManager = new SelectionManager(\n    state.collection,\n    // @ts-expect-error state is private. There might be better ways of creating a custom selection manager\n    state.selectionManager.state\n  );\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import baseStyled, {\n  css as baseCss,\n  ThemedCssFunction,\n  ThemedStyledInterface,\n} from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\nexport const styled = baseStyled as ThemedStyledInterface<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const css = baseCss as ThemedCssFunction<Theme<KnownThemePropertyPath>>;\n","import { isMac } from \"@react-aria/utils\";\n\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n","import { DividerItem } from \"./src/Collections/Divider\";\n\nexport type Legend = { name: string };\nexport const legends: Array<\n  Legend | DividerItem | { items: Legend[]; title: string }\n> = [\n  { name: \"Paco de Lucia\" },\n  { name: \"Vicente Amigo\" },\n  new DividerItem(),\n  { name: \"Gerardo Nunez\" },\n  { name: \"Paco Serrano\" },\n  new DividerItem(),\n  { name: \"Sabicas\" },\n  {\n    title: \"Super legends\",\n    items: [{ name: \"Sabicas2\" }],\n  },\n  { name: \"Pepe Habichuela\" },\n  { name: \"El Amir\" },\n  { name: \"Paco Peña\" },\n];\n","import { Item } from \"@react-stately/collections\";\nimport { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree } from \"./Tree/SpeedSearchTree/SpeedSearchTree\";\nimport { HighlightedTextValue } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Set<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = new Set([\"BasicList\"]),\n  onSelectedKeysChange,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: SelectedKeysType) => void;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={defaultSelectedKeys}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      <Item key=\"index.ts\">index.ts</Item>\n      <Item textValue=\"List\" title={<HighlightedTextValue />} key=\"List\">\n        <Item\n          textValue=\"BasicList\"\n          title={<HighlightedTextValue />}\n          key=\"BasicList\"\n        >\n          <Item textValue=\"BasicList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useBasicList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item\n          textValue=\"SpeedSearchList\"\n          title={<HighlightedTextValue />}\n          key=\"SpeedSearchList\"\n        >\n          <Item textValue=\"SpeedSearchList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useSpeedSearchList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item textValue=\"ListDivider.tsx\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n      <Item textValue=\"Theme\" title={<HighlightedTextValue />} key=\"Theme\">\n        <Item textValue=\"createTheme.ts\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n    </SpeedSearchTree>\n  );\n};\n","import { Legend, legends } from \"../../test-data\";\nimport React, { ReactNode } from \"react\";\nimport {\n  Divider,\n  DividerItem,\n  HighlightedTextValue,\n  Item,\n  Section,\n} from \"@intellij-platform/core\";\n\nexport const renderItemCustomUI = (item: Legend, content?: ReactNode) => (\n  <Item key={item.name} textValue={item.name}>\n    <div style={{ height: 40, display: \"flex\", alignItems: \"center\" }}>\n      🎸 &nbsp;\n      <b>{content || item.name}</b>\n    </div>\n  </Item>\n);\nexport const itemRenderer = (\n  renderItem: (item: Legend, content?: ReactNode) => JSX.Element,\n  content?: ReactNode\n) => (item: typeof legends[number]) => {\n  if (item instanceof DividerItem) {\n    return <Divider key={item.key} />;\n  }\n  if (\"items\" in item) {\n    return (\n      <Section items={item.items} key={item.title} title={item.title}>\n        {(item) => renderItem(item, content)}\n      </Section>\n    );\n  }\n  return renderItem(item as Legend, content);\n};\nexport const renderItemText = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    {item.name}\n  </Item>\n);\nexport const renderItemTextWithHighlights = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    <HighlightedTextValue />\n  </Item>\n);\n","import React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { List, ListProps } from \"./List\";\nimport { legends } from \"../../test-data\";\nimport { Item, Section } from \"@react-stately/collections\";\nimport { Divider } from \"../Collections/Divider\";\nimport { Pane } from \"../story-components\";\nimport {\n  itemRenderer,\n  renderItemCustomUI,\n  renderItemText,\n} from \"./story-helpers\";\n\nexport default {\n  title: \"Components/List (Basic)\",\n  component: List,\n} as Meta;\n\nexport const Default: Story<ListProps<never>> = (props) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        {...props}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const AlwaysShownAsFocused = () => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        // alwaysShowListAsFocused\n      >\n        {itemRenderer(renderItemCustomUI)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const WithStaticData = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"multiple\" fillAvailableSpace>\n        <Item>Paco de lucia</Item>\n        <Divider />\n        <Item>Vicente Amigo</Item>\n        <Section title=\"Other\">\n          <Item>Gerardo Nunez</Item>\n          <Item>El Amir</Item>\n        </Section>\n      </List>\n    </Pane>\n  );\n};\n\nexport const MultiSelect = ({\n  fillAvailableSpace,\n  shouldFocusWrap,\n  alwaysShowListAsFocused,\n}: any) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"multiple\"\n        items={legends}\n        fillAvailableSpace={fillAvailableSpace}\n        shouldFocusWrap={shouldFocusWrap}\n        alwaysShowListAsFocused={alwaysShowListAsFocused}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\nMultiSelect.argTypes = {\n  shouldFocusWrap: { control: \"boolean\" },\n};\nMultiSelect.args = {\n  shouldFocusWrap: { value: false },\n};\n\nDefault.args = {};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'List';\nexport const metadata = {\n  \"unversionedId\": \"components/List\",\n  \"id\": \"components/List\",\n  \"title\": \"List\",\n  \"description\": \"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\",\n  \"source\": \"@site/docs/components/List.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/List\",\n  \"permalink\": \"/jui/docs/components/List\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/List.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Link\",\n    \"permalink\": \"/jui/docs/components/Link\"\n  },\n  \"next\": {\n    \"title\": \"Menu\",\n    \"permalink\": \"/jui/docs/components/Menu\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"../../src/components/RefToIntellijPlatform.tsx\";\nimport { Default } from \"@intellij-platform/core/List/List.stories\";\nimport { ExampleContext } from \"../../src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'SpeedSearchList',\n  id: 'speedsearchlist',\n  level: 2\n}, {\n  value: 'Advanced use',\n  id: 'advanced-use',\n  level: 2\n}, {\n  value: 'Custom list component with useList and useSpeedSearchList',\n  id: 'custom-list-component-with-uselist-and-usespeedsearchlist',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h1>\n    <p>{`Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\na list of items with a single attribute. Here is some examples from JetBrains IDEs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Tools -> SSH Configurations`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Appearance & Behavior -> Scopes`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> General -> Console -> Exceptions`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> File and Code Templates`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> Natural Languages`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Show Local History`}</strong>{` window (advanced layout)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Virtualized scrolling support for performance with long lists`}</li>\n    </ul>\n    <ExampleContext mdxType=\"ExampleContext\">\n  <Default mdxType=\"Default\" />\n    </ExampleContext>\n    <h2 {...{\n      \"id\": \"speedsearchlist\"\n    }}>{`SpeedSearchList`}</h2>\n    <h2 {...{\n      \"id\": \"advanced-use\"\n    }}>{`Advanced use`}</h2>\n    <h3 {...{\n      \"id\": \"custom-list-component-with-uselist-and-usespeedsearchlist\"\n    }}>{`Custom list component with useList and useSpeedSearchList`}</h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n","import {useMemo as $jmOdw$useMemo, useEffect as $jmOdw$useEffect} from \"react\";\nimport {useMultipleSelectionState as $jmOdw$useMultipleSelectionState, SelectionManager as $jmOdw$SelectionManager} from \"@react-stately/selection\";\nimport {useCollection as $jmOdw$useCollection} from \"@react-stately/collections\";\nimport {useControlledState as $jmOdw$useControlledState} from \"@react-stately/utils\";\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\nvar $4b9a49966c91856a$exports = {};\n\n$parcel$export($4b9a49966c91856a$exports, \"useListState\", () => $4b9a49966c91856a$export$2f645645f7bca764);\n\nvar $80be09205507c5ec$exports = {};\n\n$parcel$export($80be09205507c5ec$exports, \"ListCollection\", () => $80be09205507c5ec$export$d085fb9e920b5ca7);\nvar tmp = Symbol.iterator;\nclass $80be09205507c5ec$export$d085fb9e920b5ca7 {\n    *[tmp]() {\n        yield* this.iterable;\n    }\n    get size() {\n        return this.keyMap.size;\n    }\n    getKeys() {\n        return this.keyMap.keys();\n    }\n    getKeyBefore(key) {\n        let node = this.keyMap.get(key);\n        return node ? node.prevKey : null;\n    }\n    getKeyAfter(key) {\n        let node = this.keyMap.get(key);\n        return node ? node.nextKey : null;\n    }\n    getFirstKey() {\n        return this.firstKey;\n    }\n    getLastKey() {\n        return this.lastKey;\n    }\n    getItem(key) {\n        return this.keyMap.get(key);\n    }\n    at(idx) {\n        const keys = [\n            ...this.getKeys()\n        ];\n        return this.getItem(keys[idx]);\n    }\n    constructor(nodes){\n        this.keyMap = new Map();\n        this.iterable = nodes;\n        let visit = (node)=>{\n            this.keyMap.set(node.key, node);\n            if (node.childNodes && node.type === 'section') for (let child of node.childNodes)visit(child);\n        };\n        for (let node2 of nodes)visit(node2);\n        let last;\n        let index = 0;\n        for (let [key, node1] of this.keyMap){\n            if (last) {\n                last.nextKey = key;\n                node1.prevKey = last.key;\n            } else {\n                this.firstKey = key;\n                node1.prevKey = undefined;\n            }\n            if (node1.type === 'item') node1.index = index++;\n            last = node1;\n            // Set nextKey as undefined since this might be the last node\n            // If it isn't the last node, last.nextKey will properly set at start of new loop\n            last.nextKey = undefined;\n        }\n        this.lastKey = last === null || last === void 0 ? void 0 : last.key;\n    }\n}\n\n\n\n\nfunction $4b9a49966c91856a$export$2f645645f7bca764(props) {\n    let { filter: filter  } = props;\n    let selectionState = $jmOdw$useMultipleSelectionState(props);\n    let disabledKeys = $jmOdw$useMemo(()=>props.disabledKeys ? new Set(props.disabledKeys) : new Set()\n    , [\n        props.disabledKeys\n    ]);\n    let factory = (nodes)=>filter ? new $80be09205507c5ec$export$d085fb9e920b5ca7(filter(nodes)) : new $80be09205507c5ec$export$d085fb9e920b5ca7(nodes)\n    ;\n    let context = $jmOdw$useMemo(()=>({\n            suppressTextValueWarning: props.suppressTextValueWarning\n        })\n    , [\n        props.suppressTextValueWarning\n    ]);\n    let collection = $jmOdw$useCollection(props, factory, context, [\n        filter\n    ]);\n    // Reset focused key if that item is deleted from the collection.\n    $jmOdw$useEffect(()=>{\n        if (selectionState.focusedKey != null && !collection.getItem(selectionState.focusedKey)) selectionState.setFocusedKey(null);\n    }, [\n        collection,\n        selectionState.focusedKey\n    ]);\n    return {\n        collection: collection,\n        disabledKeys: disabledKeys,\n        selectionManager: new $jmOdw$SelectionManager(collection, selectionState)\n    };\n}\n\n\nvar $e08e0e9da1306088$exports = {};\n\n$parcel$export($e08e0e9da1306088$exports, \"useSingleSelectListState\", () => $e08e0e9da1306088$export$e7f05e985daf4b5f);\n\n\n\nfunction $e08e0e9da1306088$export$e7f05e985daf4b5f(props) {\n    var _defaultSelectedKey;\n    let [selectedKey, setSelectedKey] = $jmOdw$useControlledState(props.selectedKey, (_defaultSelectedKey = props.defaultSelectedKey) !== null && _defaultSelectedKey !== void 0 ? _defaultSelectedKey : null, props.onSelectionChange);\n    let selectedKeys = $jmOdw$useMemo(()=>selectedKey != null ? [\n            selectedKey\n        ] : []\n    , [\n        selectedKey\n    ]);\n    let { collection: collection , disabledKeys: disabledKeys , selectionManager: selectionManager  } = $4b9a49966c91856a$export$2f645645f7bca764({\n        ...props,\n        selectionMode: 'single',\n        disallowEmptySelection: true,\n        allowDuplicateSelectionEvents: true,\n        selectedKeys: selectedKeys,\n        onSelectionChange: (keys)=>{\n            let key = keys.values().next().value;\n            // Always fire onSelectionChange, even if the key is the same\n            // as the current key (useControlledState does not).\n            if (key === selectedKey && props.onSelectionChange) props.onSelectionChange(key);\n            setSelectedKey(key);\n        }\n    });\n    let selectedItem = selectedKey != null ? collection.getItem(selectedKey) : null;\n    return {\n        collection: collection,\n        disabledKeys: disabledKeys,\n        selectionManager: selectionManager,\n        selectedKey: selectedKey,\n        setSelectedKey: setSelectedKey,\n        selectedItem: selectedItem\n    };\n}\n\n\n\n\n\nexport {$4b9a49966c91856a$export$2f645645f7bca764 as useListState, $e08e0e9da1306088$export$e7f05e985daf4b5f as useSingleSelectListState, $80be09205507c5ec$export$d085fb9e920b5ca7 as ListCollection};\n//# sourceMappingURL=module.js.map\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}"],"names":["Divider","getCollectionNode","props","type","element","rendered","hasChildNodes","DividerItem","key","seq","Item","context","result","StatelyItem","next","value","originalShouldInvalidate","shouldInvalidate","invalidated","useCollectionAutoScroll","ref","isVirtualized","selectionManager","useEffect","focusedKey","current","querySelector","scrollIntoView","List","disallowEmptySelection","alwaysShowListAsFocused","fillAvailableSpace","onAction","inputProps","useRef","state","useListState","listProps","focused","useList","collection","map","listItemRenderer","item","listFocused","ListDivider","as","useSeparator","orientation","ListItem","children","React","disabled","disabledKeys","has","selected","isSelected","itemProps","useSelectableItem","pressProps","usePress","isDisabled","preventFocusOnPress","containerFocused","StyledList","styled","theme","color","css","StyledListItem","backgroundColor","position","display","whiteSpace","paddingLeft","lineHeight","outline","cursor","minWidth","StyledListSectionHeader","fontWeight","renderItem","sectionHeader","renderSectionHeader","render","node","isSectionNode","childNodes","isDividerNode","onMouseDown","keyboardDelegate","autoFocus","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","useMemo","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","useState","focusWithinProps","useFocusWithin","onFocusWithinChange","firstKey","getFirstKey","isEmpty","select","mergeProps","replaceSelectionManager","originalUseListState","selectionBehavior","DarculaSeparatorUI","defaultSize","StyledSeparator","dark","backgroundClip","boxSizing","margin","border","StyledHorizontalSeparator","StyledVerticalSeparator","SelectionManager","OriginalSelectionManager","constructor","super","e","this","selectionMode","toggleSelection","replaceSelection","shiftKey","extendSelection","isCtrlKeyPressed","selectedKeys","size","options","manager","disallowSelectAll","direction","useLocale","getLastKey","values","setFocusedKey","focusSafely","tabIndex","handlers","onKeyDown","altKey","contains","target","navigateToKey","childFocus","getKeyBelow","preventDefault","nextKey","getKeyAbove","getKeyLeftOf","getKeyRightOf","lastKey","getKeyPageBelow","getKeyPageAbove","selectAll","clearSelection","focus","last","walker","getFocusableTreeWalker","tabbable","lastChild","document","activeElement","onFocus","isFocused","currentTarget","relatedTarget","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","firstSelectedKey","onBlur","typeSelectProps","useTypeSelect","onTypeSelect","undefined","baseStyled","baseCss","isMac","metaKey","ctrlKey","legends","name","title","items","Pane","style","flexDirection","width","marginTop","height","itemRenderer","content","renderItemText","textValue","Default","MultiSelect","argTypes","control","args","frontMatter","contentTitle","metadata","assets","toc","id","level","layoutProps","MDXContent","components","mdxType","parentName","ExampleContext","isMDXComponent","$parcel$export","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$4b9a49966c91856a$export$2f645645f7bca764","$80be09205507c5ec$export$d085fb9e920b5ca7","tmp","Symbol","iterator","iterable","keyMap","getKeys","keys","getKeyBefore","prevKey","getKeyAfter","getItem","at","idx","nodes","Map","visit","child","node2","index","node1","filter","selectionState","Set","suppressTextValueWarning","$e08e0e9da1306088$export$e7f05e985daf4b5f","_defaultSelectedKey","selectedKey","setSelectedKey","defaultSelectedKey","onSelectionChange","allowDuplicateSelectionEvents","selectedItem","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}