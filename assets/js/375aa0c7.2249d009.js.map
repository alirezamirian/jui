{"version":3,"file":"assets/js/375aa0c7.2249d009.js","mappings":"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","sources":["webpack://website/../jui/src/Button/BareButton.tsx","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/IconButton/IconButton.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/Collections/patchCollectionProps.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/Submenu.tsx","webpack://website/../jui/src/Menu/_useSubmenu.ts","webpack://website/../jui/src/Menu/_useSubmenuState.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/renderMenuNodes.tsx","webpack://website/../jui/src/Overlay/Overlay.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useHasOverflow.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/Tooltip/ActionTooltip.tsx","webpack://website/../jui/src/Tooltip/Tooltip.tsx","webpack://website/../jui/src/Tooltip/TooltipContext.tsx","webpack://website/../jui/src/Tooltip/TooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/TooltipTriggerAndOverlay.tsx","webpack://website/../jui/src/Tree/__copied__TreeCollection.ts","webpack://website/../jui/src/Tree/getSingleChildrenKeys.ts","webpack://website/../jui/src/Tree/TreeSelectionManager.ts","webpack://website/../jui/src/Tree/useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/array-utils.ts","webpack://website/../jui/src/utils/overflow-utils/OverflowObserver.ts","webpack://website/../jui/src/utils/overflow-utils/useOverflowObserver.tsx","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/./src/components/ExampleContext.tsx","webpack://website/./src/components/RefToIntellijPlatform.tsx","webpack://website/../jui/src/Tabs/3-TabThemes.stories.tsx","webpack://website/../jui/src/Tabs/2-Tabs.stories.tsx","webpack://website/./docs/components/Tabs.mdx"],"sourcesContent":["import React, { ForwardedRef, JSXElementConstructor } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { AriaBaseButtonProps, ButtonProps } from \"@react-types/button\";\n\nexport interface BareButtonProps extends AriaBaseButtonProps, ButtonProps {\n  children: React.ReactElement;\n\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n}\n\n/**\n * A component to make arbitrary content an accessible button which is also able to be a tooltip trigger.\n */\nexport const BareButton: React.FC<BareButtonProps> = React.forwardRef(\n  function BareButton(props: BareButtonProps, ref: ForwardedRef<HTMLElement>) {\n    const elementType = React.isValidElement(props.children)\n      ? (props.children.type as JSXElementConstructor<unknown>)\n      : undefined;\n    const { buttonProps } = useButton(\n      {\n        elementType,\n        ...props,\n      },\n      useObjectRef(ref)\n    );\n    const domProps = filterDOMProps(props);\n    const { autoFocus } = props;\n\n    return React.cloneElement(\n      props.children,\n      mergeProps(domProps, buttonProps, { autoFocus, ref })\n    );\n  }\n);\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return null as any as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<PartialNode<T>> = (\n    StatelyItem as any\n  ).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = (\n    [\"Editable\", \"Selected\", \"Pressed\", \"Focused\", \"Disabled\"] as Array<\n      keyof typeof modifiers\n    >\n  )\n    .filter((modifier) =>\n      // Focused or Pressed can't coexist with Disabled\n      modifiers.Disabled ? ![\"Focused\", \"Pressed\"].includes(modifier) : true\n    )\n    .reduce(\n      (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n      \"\"\n    );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  /**\n   * Icon path in intellij platform repo.\n   * If starts with \"/\", the path will be from the repo root. Otherwise, it's relative to \"platform/icons/src\".\n   * \".svg\" extension is optional.\n   */\n  icon: string;\n  /**\n   * Similar to icon, but for dark themes.\n   */\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  relativePath.startsWith(\"/\")\n    ? relativePath.slice(1)\n    : `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n * @example <PlatformIcon icon=\"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme();\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = makeIdsUnique(svg); // UNSAFE! Would require sanitization, or icon sources must be trusted.\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n\n/**\n * If multiple instance of the same icon is rendered at the same time, and the SVG includes\n * url(#...) references to locally defined ids, in some cases the icon is not rendered properly.\n * because of ids colliding. We make sure the ids are unique in each rendered icon.\n */\nfunction makeIdsUnique(svg: string): string {\n  const randomPostfix = (Math.random() * 1000).toFixed(0);\n  const idMatches = svg.matchAll(/id=\"(.*?)\"/g);\n  return [...idMatches].reduce((modifiedSvg, [_, id]) => {\n    const newId = `${id}-${randomPostfix}`;\n    return replaceAll(\n      `id=\"${id}\"`,\n      `id=\"${newId}\"`,\n      replaceAll(`url(#${id})`, `url(#${newId})`, modifiedSvg)\n    );\n  }, svg);\n}\n\nfunction replaceAll(theOld: string, theNew: string, str: string): string {\n  const replaced = str.replace(theOld, theNew);\n  const replacedAgain = replaced.replace(theOld, theNew);\n  if (replaced === replacedAgain) {\n    return replaced;\n  }\n  return replaceAll(theOld, theNew, replacedAgain);\n}\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ elementType: \"li\", orientation: \"vertical\" })\n        .separatorProps}\n    />\n  );\n};\n","import { Item, PartialNode, Section } from \"@react-stately/collections\";\nimport { Item as Item2 } from \"./Item\";\nimport {\n  CollectionBase,\n  CollectionElement,\n  ItemProps,\n  SectionProps,\n} from \"@react-types/shared\";\nimport React from \"react\";\n\nfunction* patchCollectionItem<T>(nodes: Generator<PartialNode<T>>) {\n  for (const partialNode of nodes)\n    yield {\n      ...partialNode,\n      *childNodes() {\n        const result2 = partialNode.childNodes?.();\n        if (result2) {\n          for (const partialChildNode of result2) {\n            const { type, ...partialChildNodeWithoutType } = partialChildNode;\n            yield partialChildNodeWithoutType;\n          }\n        }\n      },\n    };\n}\n\nconst PatchedItem = Item.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedItem.getCollectionNode = function getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Item.getCollectionNode(props, context));\n};\n\nconst PatchedSection = Section.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedSection.getCollectionNode = function getCollectionNode<T>(\n  props: SectionProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Section.getCollectionNode(props, context));\n};\nfunction convertCollectionElement<T>(\n  result: CollectionElement<T> | React.ReactNode\n): CollectionElement<T> {\n  if (\n    React.isValidElement(result) &&\n    (result.type === Item || result.type === Item2)\n  ) {\n    return React.createElement(\n      PatchedItem,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as ItemProps<T>),\n      },\n      convertChildren(result.props.children)\n    ) as CollectionElement<T>;\n  }\n  if (React.isValidElement(result) && result.type === Section) {\n    return React.createElement(\n      PatchedSection,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as SectionProps<T>),\n      } as any,\n      convertChildren((result.props as any).children)\n    ) as CollectionElement<T>;\n  }\n  return result as CollectionElement<T>;\n}\n\nfunction convertChildren<T>(children: React.ReactNode): React.ReactNode {\n  return Array.isArray(children)\n    ? // NOTE: We intentionally avoid using React.Children.map as it messes with keys.\n      children.map(convertChildren)\n    : convertCollectionElement(children);\n}\n\n/**\n * CollectionBuilder expects child type to be the same as parent type, which is weird in the first place:\n * https://github.com/adobe/react-spectrum/blob/cae83ff95f2f709b761c70d47ace96d6346ed873/packages/%40react-stately/collections/src/CollectionBuilder.ts#L148\n * On the other hand, the default Item components sets the `type` to item, for all child PartialNode objects:\n * https://github.com/adobe/react-spectrum/blob/c49d9819adc2cb63377f39557352440c72072caf/packages/%40react-stately/collections/src/Item.ts#L40-L54\n * Which is also a little unexpected, as in many nested collections, an item can have all types of children.\n * This function patches that, replacing Item elements with PatchedItem element which doesn't set type on children\n * PartialNodes.\n */\nexport function patchCollectionProps<T>({\n  children,\n  ...props\n}: CollectionBase<T>): CollectionBase<T> {\n  return {\n    ...props,\n    children:\n      typeof children === \"function\"\n        ? (node: T) => convertChildren(children(node)) as CollectionElement<T>\n        : (convertChildren(children) as CollectionElement<T>),\n  };\n}\n","import React, { CSSProperties, Key, RefObject, useContext } from \"react\";\nimport { AriaMenuOptions, useMenu as useMenuAria } from \"@react-aria/menu\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { patchCollectionProps } from \"@intellij-platform/core/Collections/patchCollectionProps\";\nimport { TreeProps, useTreeState } from \"../Tree/useTreeState\"; // shared dependency between tree and menu, that could be lifted up import {Submenu} from '@intellij-platform/core/Menu/Submenu'\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { SubmenuProps } from \"./Submenu\"; // internal export\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key; // FIXME: should be keys\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void; // FIXME: should be keys\n  defaultExpandedKey?: Key; // FIXME: should be keys\n  /**\n   * @deprecated\n   */\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n\n  /**\n   * Defines the press behaviour (either by mouse or by pressing Enter when focused) on menu items with submenu.\n   * By default (undefined), pressing or hovering over a menu item with submenu, opens the submenu.\n   * When set to \"toggle\", pressing a menu item with submenu will toggle the submenu. Hovering over such items will\n   * no longer open the submenu.\n   * When set to \"action\", pressing a menu item with submenu will call onAction for that item, and closes the menu.\n   * Hovering over such items will no longer open the submenu.\n   *\n   * In all cases, pressing the right arrow will always open the submenu.\n   */\n  submenuBehavior?: \"default\" | \"toggleOnPress\" | \"actionOnPress\";\n\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n\n  /**\n   * Minimum width of the menu\n   * @default: 120px\n   */\n  minWidth?: CSSProperties[\"minWidth\"];\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\nexport const MenuContext = React.createContext<\n  Pick<\n    MenuProps<unknown>,\n    \"onClose\" | \"onAction\" | \"submenuBehavior\" | \"autoFocus\"\n  > & {\n    itemWrapper?: (\n      renderedItem: React.ReactNode,\n      item: Node<unknown>\n    ) => React.ReactNode;\n    renderSubmenu?: (props: SubmenuProps<unknown>) => React.ReactNode;\n  }\n>({});\n\nexport function useMenu<T>(\n  {\n    onAction: onActionProp,\n    submenuBehavior = \"default\",\n    ...props\n  }: MenuProps<T> & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { close } = useContext(MenuOverlayContext);\n  const onClose = () => {\n    props.onClose?.();\n    close();\n  };\n  const onAction = (key: Key) => {\n    if (\n      // The following check should have been in useMenu, but it's not currently. Probably because they haven't yet\n      // covered nested menus.\n      !state.collection.getItem(key)?.hasChildNodes\n    ) {\n      return onActionProp?.(key);\n    } else if (submenuBehavior === \"actionOnPress\") {\n      onClose();\n      return onActionProp?.(key);\n    }\n  };\n  const menuContextValue: React.ContextType<typeof MenuContext> = {\n    submenuBehavior,\n    autoFocus: props.autoFocus,\n    onAction,\n    onClose,\n  };\n  const { menuProps } = useMenuAria(\n    { ...props, onAction, onClose },\n    state,\n    ref\n  );\n\n  return {\n    menuProps,\n    menuContextValue,\n  };\n}\n\nexport function useMenuState<T extends object>(\n  props: TreeProps<T> &\n    Pick<\n      MenuProps<T>,\n      \"expandedKey\" | \"defaultExpandedKey\" | \"onExpandedKeyChange\"\n    >\n) {\n  props = patchCollectionProps(props);\n  return useTreeState({\n    ...props,\n    childExpansionBehaviour: \"single\",\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n}\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also, there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n */\nexport function Menu<T extends object>({ minWidth, ...props }: MenuProps<T>) {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useMenuState(props);\n  const { menuContextValue, menuProps } = useMenu(props, state, ref);\n\n  return (\n    /**\n     * MenuContext is used to pass onAction and onClose to be passed to useMenu in submenus.\n     * That's needed because in useMenuItem onAction and onClose are read off a WeakMap which has the menu state\n     * (TreeState) as key. So we have to pass onAction and onClose everytime we call useMenu in submenus, to let the\n     * menu items in that submenu access the right value of onAction and onClose. To avoid drilling these props down,\n     * we keep it in a context.\n     */\n    <MenuContext.Provider value={menuContextValue}>\n      <StyledMenu\n        {...menuProps}\n        ref={ref}\n        style={{ minWidth }}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        {renderMenuNodes(state, [...state.collection])}\n      </StyledMenu>\n    </MenuContext.Provider>\n  );\n}\n","import React, { HTMLAttributes, ReactNode, RefObject, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const hasSubmenu = item.hasChildNodes;\n  const { menuItemProps: ariaMenuItemProps, ...result } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: hasSubmenu ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n\n  // useMenuItem in react aria utilizes useHover to focus item on hover. The logic there conflicts with nested menus\n  // requirements (at least based on how nested menu is implemented here currently). Also, submenuBehavior requires\n  // some more customization. So we delete the handlers set by useHover in useMenuItem, and add a custom useHover.\n  delete ariaMenuItemProps.onMouseEnter;\n  delete ariaMenuItemProps.onPointerEnter;\n\n  if (submenuBehavior === \"default\" && isExpanded) {\n    // When menu item has its submenu opened, clicking it should not move focus or do anything.\n    delete ariaMenuItemProps.onPointerDown;\n  }\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled,\n    onHoverStart: () => {\n      const isAnySubmenuOpen = [...state.expandedKeys].some(\n        (expandedKey) =>\n          state.collection.getItem(expandedKey)?.parentKey === item.parentKey\n      );\n\n      if (submenuBehavior === \"default\" && !isExpanded) {\n        state.toggleKey(item.key);\n      }\n\n      if (!isFocusVisible()) {\n        const shouldFocus =\n          submenuBehavior === \"default\" ? !isExpanded : !isAnySubmenuOpen;\n        if (shouldFocus) {\n          state.selectionManager.setFocused(true);\n        }\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  return {\n    ...result,\n    menuItemProps: mergeProps(\n      hasSubmenu\n        ? {\n            \"aria-expanded\": isExpanded,\n            \"aria-haspopup\": \"menu\",\n          }\n        : {},\n      ariaMenuItemProps,\n      hoverProps,\n      keyboardProps,\n      submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n    ),\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...menuItemProps}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using Overlay:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         *\n         */\n        <Overlay\n          OverlayComponent={\n            /**\n             *  The FocusScope included in the default Overlay, messes with a particular expected behavior. So we use\n             *  SimpleOverlay, which just renders its children as a portal. There may be a better solution for that\n             *  problem, which would eliminate the need for the funky `OverlayComponent` prop on our `Overlay`\n             *  component. Something to look into in the future.\n             */\n            SimpleOverlay\n          }\n        >\n          <div ref={nestedMenuRef} {...positionProps}>\n            {renderSubmenu({ parentState: state, rootKey: item.key })}\n          </div>\n        </Overlay>\n      )}\n    </>\n  );\n}\n\n/**\n * A replacement for react-aria Overlay, which doesn't render FocusScope\n */\nfunction SimpleOverlay({\n  children,\n  portalContainer = document.body,\n}: {\n  children: ReactNode;\n  portalContainer?: Element | undefined;\n}) {\n  return ReactDOM.createPortal(children, portalContainer);\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <Overlay>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </Overlay>\n  );\n}\n","import React, { HTMLAttributes, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\nimport { AriaButtonProps } from \"@react-types/button\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  // TODO: replace render function children with normal children, and utilize PressResponder. Add a story for the\n  //  edge case of custom trigger, using PressResponder\n  children: (\n    props: HTMLAttributes<HTMLButtonElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean;\n  /**\n   * By default, the menu is positioned relative to the trigger. `positioningTargetRef` can be used to have the menu\n   * positioned to another element. An example use case is when the menu trigger is a button inside some list item or\n   * text box, but the menu semantically belongs to the container list item or text box.\n   */\n  positioningTargetRef?: React.RefObject<HTMLElement>;\n  renderMenu: (props: {\n    menuProps: React.HTMLAttributes<HTMLElement>;\n  }) => React.ReactNode;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = true,\n  preventFocusOnPress = true,\n  positioningTargetRef,\n  ...otherProps\n}) => {\n  const menuTriggerProps: AriaMenuTriggerProps = {\n    ...otherProps,\n    direction,\n    align,\n    shouldFlip,\n  };\n  const state = useMenuTriggerState(menuTriggerProps);\n  const triggerRef = React.useRef(null);\n  const overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  const { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  const ariaButtonProps: AriaButtonProps<\"button\"> = {\n    ...triggerProps,\n    // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n    preventFocusOnPress,\n  };\n  const { buttonProps } = useButton(ariaButtonProps, triggerRef);\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: positioningTargetRef ?? triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<AriaMenuTriggerProps>[\"direction\"],\n  align: Required<AriaMenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ isActive }) => isActive && highlightedStyle};\n  ${({ isDisabled }) => isDisabled && disabledStyle};\n\n  padding-right: 1.25rem;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuOptions, useMenu } from \"@react-aria/menu\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport {\n  MenuKeyboardDelegate,\n  useSubmenu as useSubmenuAria,\n} from \"./_useSubmenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuContext } from \"./Menu\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport function useSubmenu<T>(\n  {\n    rootKey,\n    parentState,\n    keyboardDelegate,\n  }: { rootKey: React.Key; parentState: TreeState<T> } & Pick<\n    AriaMenuOptions<T>,\n    \"keyboardDelegate\"\n  >,\n  state: TreeState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const rootItem = state.collection.getItem(rootKey);\n  const {\n    submenuBehavior,\n    autoFocus = true,\n    onClose,\n    onAction,\n  } = useContext(MenuContext);\n  let { menuProps } = useMenu(\n    {\n      \"aria-label\": rootItem?.[\"aria-label\"] || rootItem?.textValue,\n      onAction,\n      onClose,\n      selectedKeys: state.selectionManager.selectedKeys,\n      keyboardDelegate:\n        keyboardDelegate ||\n        new MenuKeyboardDelegate(\n          rootKey,\n          state.collection,\n          state.disabledKeys,\n          ref\n        ),\n      autoFocus,\n    },\n    state,\n    ref\n  );\n  const { submenuProps } = useSubmenuAria({ rootKey }, parentState, ref);\n\n  const submenuBehaviorProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        // Close the menu and submenu root node.\n        state.toggleKey(rootKey);\n        state.selectionManager.setFocusedKey(rootKey);\n        parentState.selectionManager.setFocused(true);\n        if (submenuBehavior !== \"default\") {\n          e.stopPropagation();\n        }\n        return;\n      }\n    },\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n      // it sets the focus key, which will move focus to that item.\n      // noinspection PointlessBooleanExpressionJS seems to be false positive. autoFocus can be \"first\" or \"last\"\n      if (autoFocus === true) {\n        ref.current?.focus();\n      }\n    });\n  }, []);\n\n  return {\n    submenuProps: mergeProps(menuProps, submenuProps, submenuBehaviorProps),\n  };\n}\n\nexport interface SubmenuProps<T> {\n  parentState: TreeState<T>;\n  rootKey: React.Key;\n}\n\nexport function Submenu<T>({ parentState, rootKey }: SubmenuProps<T>) {\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const { submenuProps } = useSubmenu({ rootKey, parentState }, state, ref);\n\n  return (\n    <StyledMenu {...submenuProps} ref={ref}>\n      {renderMenuNodes(state, [...(rootItem?.childNodes || [])])}\n    </StyledMenu>\n  );\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport React, { Key, RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\n\nexport class MenuKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  private keys: React.Key[];\n  constructor(\n    rootKey: Key | null,\n    private collection: Collection<Node<T>>,\n    disabledKeys: Set<React.Key>,\n    ref: React.RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n    this.keys = [...collection.getKeys()]\n      .map((key) => collection.getItem(key))\n      .flatMap((item) => {\n        if (item.parentKey == rootKey) {\n          if (item.type === \"item\") {\n            return [item.key];\n          } else if (item.type === \"section\") {\n            return [...item.childNodes].map(({ key }) => key);\n          }\n        }\n        return [];\n      });\n  }\n\n  getFirstKey(): React.Key {\n    return this.keys[0];\n  }\n  getLastKey(): React.Key {\n    return this.keys.slice(-1)[0];\n  }\n\n  getKeyBelow(key: React.Key): React.Key {\n    const keyBelow = super.getKeyBelow(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyBelow) ? keyBelow : null;\n  }\n  getKeyAbove(key: React.Key): React.Key {\n    const keyAbove = super.getKeyAbove(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyAbove) ? keyAbove : null;\n  }\n}\n\n/**\n * Behavior accessibility of submenus:\n * - Closing submenu on ArrowLeft key press.\n *   Note that it can't be implemented in useMenuItem, because the focus might be on no the submenu itself and not any\n *   of its items\n * @param rootKey: Key of the root node, the submenu is created from its children\n * @param state\n * @param ref\n */\nexport function useSubmenu<T>(\n  { rootKey }: { rootKey: Key },\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { keyboardProps: submenuProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Keyboard events bubble through portals. Don't handle keyboard events\n      // for elements outside the collection (e.g. menus).\n      if (!ref.current?.contains(e.target as Element)) {\n        e.continuePropagation();\n        return;\n      }\n      const root = state.collection.getItem(rootKey);\n      if (e.key === \"ArrowLeft\" && state.expandedKeys.has(root.key)) {\n        state.toggleKey(root.key);\n        state.selectionManager.setFocused(true);\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return {\n    submenuProps,\n  };\n}\n","import { TreeState } from \"@react-stately/tree\";\nimport { Key, useRef, useState } from \"react\";\nimport {\n  MultipleSelectionState,\n  SelectionManager,\n} from \"@react-stately/selection\";\n\n/**\n * Creates a TreeState corresponding to the submenu, from the state of a parent (sub)menu.\n * The collection and everything is the same, and the only difference from the parent state is selection manager\n * having a separate focused state to keep the focused state of each menu container separately, as the submenus\n * are usually rendered in separate overlays.\n */\nexport function useSubmenuState<T>(parentState: TreeState<T>) {\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a re-render. So, we have both a ref (sync) and state (async).\n  const [, setFocused] = useState(false);\n  const [, setFocusedKey] = useState<Key | null>(null);\n  const isFocusedRef = useRef(false);\n  const focusedKeyRef = useRef<Key | null>(null);\n\n  const state: MultipleSelectionState = {\n    // @ts-expect-error state is private\n    ...parentState.selectionManager.state,\n    setFocused: (isFocused: boolean) => {\n      isFocusedRef.current = isFocused;\n      setFocused(isFocused);\n    },\n    setFocusedKey(key: Key) {\n      focusedKeyRef.current = key;\n      setFocusedKey(key);\n    },\n  };\n  Object.defineProperties(state, {\n    isFocused: {\n      get() {\n        return isFocusedRef.current;\n      },\n    },\n    focusedKey: {\n      get() {\n        return focusedKeyRef.current!;\n      },\n    },\n  });\n\n  return {\n    ...parentState,\n    selectionManager: new SelectionManager(parentState.collection, state),\n  };\n}\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.div`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\"; // private import\n\nimport { MenuItem } from \"./MenuItem\";\nimport { MenuSection } from \"./MenuSection\";\n\nexport function renderMenuNodes<T>(\n  state: TreeState<T>,\n  nodes: Node<T>[],\n  filter: (node: Node<T>) => boolean = () => true\n) {\n  return nodes.filter(filter).map((node) => {\n    switch (node.type) {\n      case \"item\":\n        return <MenuItem key={node.key} item={node} state={state} />;\n      case \"section\":\n        return (\n          <>\n            {node.props.hasDivider && (\n              <ListDivider key={node.key + \"-divider\"} />\n            )}\n            <MenuSection\n              key={node.key}\n              item={node}\n              state={state}\n              filter={filter}\n            />\n          </>\n        );\n      case \"divider\":\n        return <ListDivider key={node.key} />;\n    }\n  });\n}\n","import React, { useContext, useRef } from \"react\";\nimport { Overlay as AriaOverlay, OverlayProps } from \"@react-aria/overlays\";\n\nconst ParentOverlayContext = React.createContext<HTMLElement | null>(null);\n\n/**\n * A (drop-in replacement) wrapper around Overlay, which makes sure overlays created in nested\n * react components will be ported to the same top level container. This is especially useful to detect\n * \"outside clicks\" when overlays are nested. The most common example would be nested menu in popup.\n *\n */\nexport function Overlay({\n  children,\n  OverlayComponent = AriaOverlay,\n}: {\n  children: React.ReactNode;\n  OverlayComponent?: React.ComponentType<OverlayProps>;\n}) {\n  const root = useContext(ParentOverlayContext);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  if (root) {\n    return (\n      <OverlayComponent portalContainer={root}>{children}</OverlayComponent>\n    );\n  }\n  return (\n    <ParentOverlayContext.Provider value={containerRef.current}>\n      <OverlayComponent>\n        <div ref={containerRef} data-overlay-root=\"\">\n          {children}\n        </div>\n      </OverlayComponent>\n    </ParentOverlayContext.Provider>\n  );\n}\n\n/**\n * Returns true, if element1 and element2 are in nested overlays. \"Nested\" being in terms of React component tree.\n * Useful for detecting \"outside click\" when overlay components are nested in each other.\n */\nexport function areInNestedOverlays(\n  element1: Element | null,\n  element2: Element | null\n) {\n  const overlayRoot1 = element1?.closest(\"[data-overlay-root]\");\n  const overlayRoot2 = element2?.closest(\"[data-overlay-root]\");\n  return Boolean(overlayRoot1) && overlayRoot1 === overlayRoot2;\n}\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  closeButton,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <DebuggerTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n}) => {\n  return (\n    <TabContentLayout startIcon={icon} title={title} endIcon={closeButton} />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\n\ninterface EditorTabContentProps {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button, shown in place of \"pin\" button if not pinned. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <EditorTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  closeButton,\n  onUnpin,\n  pinned,\n  containerProps,\n}: EditorTabContentProps) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <TooltipTrigger tooltip={<ActionTooltip actionName=\"Unpin Tab\" />}>\n            <BareButton\n              onPress={onUnpin}\n              excludeFromTabOrder\n              preventFocusOnPress\n            >\n              <PlatformIcon icon=\"actions/pinTab\" />\n            </BareButton>\n          </TooltipTrigger>\n        ) : (\n          closeButton\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps = {} }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    // To allow tooltip be used easily. TooltipTrigger passes props via FocusableContext.\n    const { focusableProps } = useFocusable({}, useObjectRef(ref));\n    return (\n      <StyledTabItemLayout\n        {...mergeProps(focusableProps, containerProps)}\n        ref={ref}\n      >\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { ForwardedRef, forwardRef, RefObject, useEffect } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  shouldSelectOnPressUp?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = forwardRef(function Tab<T extends object>(\n  {\n    state,\n    item,\n    focusable,\n    active,\n    shouldSelectOnPressUp,\n    Component = StyledDefaultTab,\n  }: TabProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): React.ReactElement {\n  const { key, rendered } = item;\n  const ref = useForwardedRef(forwardedRef);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab(\n    {\n      key,\n      // @ts-expect-error  TODO(@react-aria/tabs): update to ^3.6.0 to support this\n      shouldSelectOnPressUp,\n    },\n    state,\n    ref\n  );\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n});\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useOverflowObserver } from \"../utils/overflow-utils/useOverflowObserver\";\nimport { useHasOverflow } from \"./useHasOverflow\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Whether selected tab should change on press up instead of press down.\n   * @default false.\n   */\n  shouldSelectOnPressUp?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n *  - FIX: When a tab that was not selected is removed, selection should not change. It now changes to the tab before the removed one.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  shouldSelectOnPressUp,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, hasOverflow } = useHasOverflow({ ref });\n  const { overflowedElements } = useOverflowObserver(ref);\n  const overflowedKeys = new Set(\n    overflowedElements\n      .map((element) =>\n        element instanceof HTMLElement ? element.dataset[\"key\"] : null\n      )\n      .filter(notNull)\n  );\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={hasOverflow.left}\n        hasOverflowAtEnd={hasOverflow.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              shouldSelectOnPressUp={shouldSelectOnPressUp}\n              active={active}\n              Component={TabComponent}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useHasOverflow<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [hasOverflow, setHasOverflow] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newHasOverflow = {\n        top: offsetTop > threshold,\n        bottom: offsetBottom > threshold,\n        left: offsetLeft > threshold,\n        right: offsetRight > threshold,\n      };\n      if (\n        hasOverflow.top !== newHasOverflow.top ||\n        hasOverflow.bottom !== newHasOverflow.bottom ||\n        hasOverflow.left !== newHasOverflow.left ||\n        hasOverflow.right !== newHasOverflow.right\n      ) {\n        setHasOverflow(newHasOverflow);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    hasOverflow,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [...collection].filter(\n            (menuItem) => overflowedKeys.has(menuItem.key)\n          );\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <IconButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </IconButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n    shouldSelectOnPressUp\n  />\n);\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionTooltipProps {\n  actionName: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action\"\n * @see {@link ActionHelpTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionTooltip = ({\n  actionName,\n  shortcut,\n}: ActionTooltipProps): JSX.Element => {\n  return (\n    <Tooltip>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n    </Tooltip>\n  );\n};\n","import React, { ForwardedRef, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n  className?: string;\n}\n\n// Providing default value for paddings, based on intellijlaf theme. In Intellij Platform, themes extend either\n// intellijlaf or darcula. Which means some properties can be omitted in the custom theme, relying on the values\n// in the base theme. This is not how theming works here, at the moment, and there are other similar issues, but\n// this is just a mitigation for one case, spacing in tooltip.\nconst DEFAULT_TEXT_BORDER_INSETS = \"0.5rem 0.8125rem 0.625rem 0.625rem\";\nconst DEFAULT_SMALL_TEXT_BORDER_INSETS = \"0.375rem 0.75rem 0.4375rem 0.625rem\";\n\nconst StyledTooltip = styled.div<{ multiline?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${({ theme }) =>\n    theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\")};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\") ||\n        DEFAULT_TEXT_BORDER_INSETS\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\") ||\n        DEFAULT_SMALL_TEXT_BORDER_INSETS};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") ? \"1px\" : \"0px\"};\n  border-color: ${({ theme }) =>\n    theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\")};\n  ${WINDOW_SHADOW};\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { state, isInteractive } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  return (\n    <StyledTooltip\n      multiline={multiline}\n      {...tooltipProps}\n      className={props.className}\n      ref={ref}\n    >\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React from \"react\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\n\ninterface TooltipContextObject {\n  state: TooltipTriggerState;\n  isInteractive: boolean;\n}\n\nexport const TooltipContext = React.createContext<TooltipContextObject | null>(\n  null\n);\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { TooltipTriggerAndOverlay } from \"@intellij-platform/core/Tooltip/TooltipTriggerAndOverlay\";\n\nexport interface TooltipTriggerProps\n  extends Omit<AriaTooltipTriggerProps, \"isOpen\" | \"defaultOpen\" | \"trigger\"> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}.\n * Showing tooltip on focus and controlled open state are not supported at the moment, based on how tooltip works in the\n * reference impl, and since tooltip is positioned based on cursor position. Positioning the tooltip based on cursor\n * position requires tooltip to be opened on hover. That's why neither controlling opened state nor showing the tooltip\n * on focus are supported here. {@link PositionedTooltipTrigger} allows for positioning the tooltip with respect to the\n * trigger element, and offers more options.\n */\nexport const TooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const triggerRef = useRef<HTMLElement>(null);\n  const theme = useTheme();\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  const { overlayProps, updatePosition } = useMouseEventOverlayPosition({\n    overlayRef,\n    isOpen: state.isOpen,\n    placement: \"bottom left\",\n    shouldFlip: true,\n    offset: theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20,\n  });\n\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(() => {\n        updatePosition();\n      });\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      tooltipOverlayProps={overlayProps}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      /**\n       * If we want to support showing tooltip on focus, or if we want to allow controlled open state, we should let it\n       * be positioned by the trigger element in that case, rather than mouse position.\n       * One solution would be to use useOverlayPosition as well, and conditionally use the right `overlayProps`, based on\n       * whether the position determined by mouse is within `triggerRef.current?.getBoundingClientRect()`. Another way\n       * (maybe better) would be to have `useMouseEventOverlayPosition` accept `bounds` or `containerBounds`, which if\n       * passed, makes sure the position is kept within that boundary. Outside positions would be mapped to the closest\n       * point on the border of the boundary.\n       */\n      showOnFocus={false}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, {\n  HTMLAttributes,\n  HTMLProps,\n  ReactElement,\n  RefObject,\n  useState,\n} from \"react\";\nimport { useTooltipTrigger as useAriaTooltipTrigger } from \"@react-aria/tooltip\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { Overlay } from \"@react-aria/overlays\";\nimport { mergeProps, useLayoutEffect } from \"@react-aria/utils\";\nimport { TooltipContext } from \"@intellij-platform/core/Tooltip/TooltipContext\";\n\ninterface TooltipTriggerBaseProps {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * props to be applied on the tooltip overlay, for positioning.\n   */\n  tooltipOverlayProps: HTMLProps<HTMLDivElement>;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  trigger:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  state: TooltipTriggerState;\n\n  showOnFocus?: boolean;\n\n  overlayRef: RefObject<HTMLDivElement>;\n  triggerRef: RefObject<HTMLElement>;\n  isDisabled?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. It doesn't handle tooltip positioning, and so shouldn't be used\n * directly. {@param tooltipOverlayProps} should be used to apply the intended positioning.\n *\n * TODO: Implement timeout-based auto-hide (https://jetbrains.github.io/ui/controls/tooltip/#19)\n * TODO: shadow\n */\nexport const TooltipTriggerAndOverlay = ({\n  tooltip,\n  trigger,\n  state,\n  tooltipOverlayProps,\n  overlayRef,\n  triggerRef,\n  showOnFocus,\n  ...props\n}: TooltipTriggerBaseProps): JSX.Element => {\n  const [isInteractive, setInteractive] = useState(false);\n  const { triggerProps, tooltipProps } = useTooltipTrigger(\n    props,\n    // In Intellij Platform. The tooltip hides right away. We follow the same, unless the tooltip is interactive.\n    // Maybe something to rethink if it's worth following the reference impl for.\n    { ...state, close: isInteractive ? state.close : () => state.close(true) },\n    triggerRef\n  );\n\n  if (!showOnFocus) {\n    delete triggerProps.onFocus;\n  }\n\n  useLayoutEffect(() => {\n    setInteractive(\n      overlayRef.current?.querySelector(\n        'a, button, [role=\"button\"], [role=link]'\n      ) !== null\n    );\n  });\n  return (\n    <>\n      {normalizeChildren(trigger, { ...triggerProps, ref: triggerRef })}\n      {state.isOpen && !props.isDisabled && (\n        <Overlay>\n          <TooltipContext.Provider value={{ state, isInteractive }}>\n            <div\n              {...mergeProps(\n                tooltipOverlayProps,\n                // Is it ok to apply tooltip props on this wrapper?\n                tooltipProps\n              )}\n              ref={overlayRef}\n            >\n              {tooltip}\n            </div>\n          </TooltipContext.Provider>\n        </Overlay>\n      )}\n    </>\n  );\n};\n\nfunction normalizeChildren(\n  children: TooltipTriggerBaseProps[\"trigger\"],\n  triggerProps: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n) {\n  if (typeof children === \"function\") {\n    return children(triggerProps);\n  }\n  if (React.isValidElement(children) && typeof children.type === \"string\") {\n    return React.cloneElement(children, triggerProps);\n  }\n  return <FocusableProvider {...triggerProps}>{children}</FocusableProvider>;\n}\n\n/**\n * A wrapper around react-aria's useTooltipTrigger, adjusting it for Intellij Platform.\n */\nconst useTooltipTrigger: typeof useAriaTooltipTrigger = (props, state, ref) => {\n  const { triggerProps, tooltipProps } = useAriaTooltipTrigger(\n    props,\n    state,\n    ref\n  );\n  // onPointerDown returned from the underlying usePress stops propagation which messes with some usages of tooltip\n  // like in tab or tool window stripe button. We replace onPointerDown handler with a similar handler that closes\n  // the tooltip.\n  triggerProps.onPointerDown = () => {\n    if (!(ref.current instanceof HTMLInputElement)) {\n      state.close(true);\n    }\n  };\n  /**\n   * onMouseDown is preventDefault-ed which interferes with functionality of the tooltip trigger, in use cases like\n   * tool window stripe button. Note that since pointerDown is handled for calling the tooltip trigger's onPressStart\n   * handler (which hides the tooltip), there is no issue in excluding onMouseDown, because it's only used to preventDefault\n   * the event, because of some edge cases focus handling which is not our concern.\n   */\n  delete triggerProps.onMouseDown;\n\n  return {\n    triggerProps,\n    tooltipProps,\n  };\n};\n","//@ts-nocheck\n/**\n * Not exported from @react-stately/tree, but needed in the custom implementation of useTreeState\n */\n\nimport { Key } from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","import { Node } from \"@react-types/shared\";\nimport { Key } from \"react\";\n\n/**\n * given a node, returns keys of all consecutive single children\n */\nexport function getSingleChildrenKeys<T>(\n  node: Node<T> | null | undefined\n): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive<T>(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n): Key[] {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nconst isExpandable = <T>(node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager,\n  SelectionManagerOptions,\n} from \"@react-stately/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key } from \"react\";\n\nexport class TreeSelectionManager extends SelectionManager {\n  private readonly collection: Collection<Node<unknown>>;\n\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState,\n    options?: SelectionManagerOptions\n  ) {\n    super(collection, state, options);\n    this.collection = collection;\n  }\n\n  expandSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { expandKeys } = this.getExpandAndShrinkKeys(node);\n      if (expandKeys.length > 0) {\n        this.setSelectedKeys([...this.selectedKeys, ...expandKeys]);\n      }\n    }\n  }\n  shrinkSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { shrinkKeys } = this.getExpandAndShrinkKeys(node);\n      if (shrinkKeys.length > 0) {\n        this.setSelectedKeys(\n          [...this.selectedKeys].filter((key) => !shrinkKeys.includes(key))\n        );\n      }\n    }\n  }\n\n  private getExpandAndShrinkKeys(node: Node<unknown>) {\n    return this.recursivelyGetExpandAndShrinkKeys(\n      node,\n      [...this.collection.getKeys()],\n      null\n    );\n  }\n  /**\n   * Starting from a node, traverses the tree up, until it reaches the root of the fully selected subtree that includes\n   * the starting node. The root itself may or may not be selected. Returns:\n   * - keys to be added to selection, when expanding selection\n   * - keys to be removed from selection, when shrinking selection\n   */\n  private recursivelyGetExpandAndShrinkKeys(\n    node: Node<unknown>,\n    keys: Array<Key>,\n    previousChild: Key | null\n  ): { expandKeys: Key[]; shrinkKeys: Key[] } {\n    const parent =\n      node && node.parentKey ? this.collection.getItem(node.parentKey) : null;\n    const newKeys = keys.filter((key) => key !== previousChild);\n    const parentDescendants = parent\n      ? getAllDescendants(parent, newKeys).map(({ key }) => key)\n      : this.getAllRoots().flatMap((key) =>\n          key !== node.key\n            ? getAllDescendants(this.collection.getItem(key), newKeys)\n                .map(({ key }) => key)\n                .concat(key)\n            : []\n        );\n    if (parent && parentDescendants.every((key) => this.isSelected(key))) {\n      return this.recursivelyGetExpandAndShrinkKeys(parent, keys, node.key);\n    }\n    const descendants = getAllDescendants(\n      node,\n      keys.filter((key) => key !== previousChild)\n    ).map(({ key }) => key);\n\n    return {\n      expandKeys: descendants.some((key) => !this.isSelected(key))\n        ? descendants\n        : !this.isSelected(node.key)\n        ? [node.key]\n        : parentDescendants,\n      shrinkKeys:\n        parentDescendants.length > 0 &&\n        parentDescendants.every((key) => this.isSelected(key))\n          ? parentDescendants\n          : this.isSelected(node.key) && previousChild\n          ? [node.key]\n          : descendants.filter((key) => this.isSelected(key)),\n    };\n  }\n\n  private getAllRoots() {\n    return [...this.collection.getKeys()].filter(\n      (key) => this.collection.getItem(key).parentKey == null\n    );\n  }\n}\n\nfunction getAllDescendants<T>(\n  node: Node<T>,\n  stopKeys: Array<React.Key>\n): Node<T>[] {\n  const childNodes = (node.hasChildNodes ? [...node.childNodes] : []).filter(\n    (node) => stopKeys.includes(node.key)\n  );\n  return node.hasChildNodes\n    ? childNodes.concat(\n        childNodes.map((node) => getAllDescendants(node, stopKeys)).flat()\n      )\n    : [];\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeProps as _TreeProps, TreeState } from \"@react-stately/tree\";\nimport {\n  TreeRefValue,\n  useTreeRef,\n} from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport { useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport { TreeCollection as _TreeCollection } from \"./__copied__TreeCollection\";\nimport { getSingleChildrenKeys } from \"./getSingleChildrenKeys\";\nimport { TreeSelectionManager } from \"@intellij-platform/core/Tree/TreeSelectionManager\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport class TreeCollection<T> extends _TreeCollection<T> {\n  public readonly rootKeys: Key[];\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys: Set<Key> }\n  ) {\n    super(nodes, { expandedKeys });\n    this.rootKeys = Array.from(nodes).map(({ key }) => key);\n  }\n\n  getAllExpandableKeys(): Set<Key> {\n    const rootNodes = this.rootKeys\n      .map((key) => this.getItem(key))\n      .filter(notNull);\n    return this.recursivelyAddExpandableKeys(rootNodes, new Set<Key>());\n  }\n\n  private recursivelyAddExpandableKeys(\n    nodes: Iterable<Node<T>>,\n    result: Set<Key>\n  ) {\n    for (const node of nodes) {\n      if (node?.hasChildNodes) {\n        result.add(node.key);\n        this.recursivelyAddExpandableKeys(node.childNodes, result);\n      }\n    }\n    return result;\n  }\n}\nexport interface TreeProps<T>\n  extends _TreeProps<T>,\n    CollectionCacheInvalidationProps {\n  childExpansionBehaviour?: \"multi\" | \"single\";\n}\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n *\n * Similar to (and initially copied from) useTreeState from @react-stately/tree, but with the following changes:\n * - Supports exposing some imperative API via ref.\n *   Could be done via a wrapper too.\n * - Different onToggle implementation with two adjustments to match Intellij Platform:\n *   - Collapsing a key collapses all descendants as well.\n *   - Expanding a single-child node will recursively expand all single-child descendants.\n *   Couldn't be done with a wrapper in a clean and optimal way. Access to setExpandedKey is not provided. We would need\n *   to either maintain a new state for expanded keys and ignore the one returned from the wrapped hook, or\n *   inefficiently call the returned `toggleKey` function many times.\n * - Supports collection invalidation via CollectionCacheInvalidationProps\n *   Perhaps not the most important addition, but not possible to be done via a wrapper.\n * - Uses TreeSelectionManager instead of the default SelectionManager, which implements expand/shrink selection.\n *   Could be done in a wrapper, with a little hack. Would need to replace selection manager.\n * - returned `collection` is of type `TreeCollection` (which is an improved version of react-stately `TreeCollection`),\n *   instead of the more generic `Collection`.\n */\nexport function useTreeState<T extends object>(\n  { childExpansionBehaviour = \"multi\", ...props }: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRefValue>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined!,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange!\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  // @ts-expect-error imprecise typing in @react-stately/selection\n  let tree = useCollection<T, TreeCollection<T>>(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  const selectionManager = new TreeSelectionManager(\n    tree as Collection<Node<T>>,\n    selectionState\n  );\n\n  useTreeRef({ selectionManager, setExpandedKeys, tree }, treeRef);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      // @ts-expect-error imprecise typing in @react-stately/selection\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const toggleKey = (key: Key) => {\n    let newExpandedKeys = toggleTreeNode(\n      tree as Collection<Node<T>>,\n      expandedKeys,\n      key\n    );\n    if (childExpansionBehaviour === \"single\") {\n      const expandedSiblings = getSiblings(tree, key).filter(\n        (aKey) => aKey !== key && expandedKeys.has(aKey)\n      );\n      newExpandedKeys = expandedSiblings.reduce((expandedKeys, expandedKey) => {\n        return toggleTreeNode(\n          tree as Collection<Node<T>>,\n          expandedKeys,\n          expandedKey\n        );\n      }, newExpandedKeys);\n    }\n    setExpandedKeys(newExpandedKeys);\n  };\n\n  return {\n    collection: tree as Collection<Node<T>>,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n    selectionManager,\n  };\n}\n\nfunction getChildItems<T>(node: Node<T>): Node<T>[] {\n  const childNodes = [...(node.childNodes || [])];\n  const childItems = childNodes.filter(({ type }) => type === \"item\");\n  const sectionItems = childNodes.filter(({ type }) => type === \"section\");\n\n  return childItems.concat(sectionItems.flatMap(getChildItems));\n}\n\nfunction getRootItemKeys(tree: TreeCollection<unknown>) {\n  return tree.rootKeys\n    .map((key) => tree.getItem(key))\n    .filter(notNull)\n    .flatMap(getChildItems)\n    .map(({ key }) => key);\n}\n/**\n * Returns the siblings of an item in tree, ignoring sections.\n * Disclaimer: The code is done quick and dirty and in a rush. Unpleasant code, good candidate for refactoring :D\n */\nfunction getSiblings(tree: TreeCollection<unknown>, key: Key): Key[] {\n  const parentKey = tree.getItem(key)?.parentKey;\n  if (!parentKey) {\n    return [...tree.rootKeys].concat(getRootItemKeys(tree));\n  }\n  let parent = parentKey ? tree.getItem(parentKey) : null;\n  if (parent?.type === \"item\") {\n    return getChildItems(parent).map(({ key }) => key);\n  }\n  const siblings: Key[] = [];\n  while (parent) {\n    siblings.push(...getChildItems(parent).map(({ key }) => key));\n    if (parent.type === \"section\") {\n      if (parent.parentKey) {\n        parent = tree.getItem(parent.parentKey);\n      } else {\n        siblings.push(...getRootItemKeys(tree));\n        parent = null;\n      }\n    } else {\n      parent = null;\n    }\n  }\n  return Array.from(new Set(siblings));\n}\nfunction toggleTreeNode(\n  tree: Collection<Node<unknown>>,\n  expandedKeys: Set<Key>,\n  key: Key\n): Set<Key> {\n  // toggling a non-expandable node should be no-op\n  if (!expandedKeys.has(key) && !tree.getItem(key).hasChildNodes) {\n    return expandedKeys;\n  }\n  const newKeys = toggleKey(expandedKeys, key);\n  // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n  // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n  for (const aKey of newKeys) {\n    if (tree.getItem(aKey) == null) {\n      newKeys.delete(aKey);\n    }\n  }\n\n  // If we are toggling it open, expand all expandable single-child items\n  if (newKeys.has(key)) {\n    for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n      newKeys.add(aKey);\n    }\n  }\n  return newKeys;\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeSelectionManager } from \"./TreeSelectionManager\";\nimport { TreeCollection } from \"./useTreeState\";\n\nexport interface TreeRefValue {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n\n  /**\n   * Extends selection to all siblings of the currently focused node.\n   */\n  expandSelection(): void;\n  /**\n   * Shrinks selection towards currently focused node.\n   */\n  shrinkSelection(): void;\n\n  expandAll(): void;\n  collapseAll(): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef<T extends {}>(\n  props: {\n    tree: TreeCollection<T>;\n    selectionManager: TreeSelectionManager;\n    setExpandedKeys: (keys: Set<Key>) => void;\n  },\n  forwardedRef?: ForwardedRef<TreeRefValue>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n        expandSelection() {\n          latestState.current.selectionManager.expandSelection();\n        },\n        shrinkSelection() {\n          latestState.current.selectionManager.shrinkSelection();\n        },\n        expandAll() {\n          latestState.current.setExpandedKeys(\n            latestState.current.tree.getAllExpandableKeys()\n          );\n        },\n        collapseAll() {\n          const { tree, setExpandedKeys, selectionManager } =\n            latestState.current;\n          const focusedKey = selectionManager.focusedKey;\n          setExpandedKeys(new Set());\n\n          // Find the root node that is a grandparent of focused node, and focus/select it.\n          // NOTE: this behaviour of updating selection when nodes are collapsed is something to be fixed in general,\n          // and then this custom logic here would be not necessary.\n          if (focusedKey && !tree.rootKeys.includes(focusedKey)) {\n            let item = tree.getItem(focusedKey);\n            while (item?.parentKey != null) {\n              item = tree.getItem(item.parentKey);\n            }\n            if (item) {\n              selectionManager.setFocusedKey(item.key);\n              if (selectionManager.isSelected(focusedKey)) {\n                selectionManager.select(item.key);\n              }\n            }\n          }\n        },\n      };\n    },\n    []\n  );\n}\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\nexport type FocusScopeRef = { focus: (forceFocusFirst?: boolean) => void };\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<FocusScopeRef>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (forceFocusFirst?: boolean) => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        if (forceFocusFirst) {\n          return focusManager.focusFirst();\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","/**\n * Properly typed filter function for filtering out null/undefined items in array.\n */\nexport const notNull = <T>(\n  item: T | undefined | null\n): item is NonNullable<T> => item != null;\n","import { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport interface OverflowObserverRecord {\n  target: Element;\n  overflowedElements: Element[];\n  previouslyOverflowedElements: Element[];\n}\n\nexport type OverflowObserverCallback = (\n  change: OverflowObserverRecord,\n  observer: OverflowObserver\n) => void;\n\n/**\n * Allows observing the list of overflowing children of a given target element.\n * An `IntersectionObserver` is created for each target to observe the intersection between the target and each child\n * element. The child elements are observed/unobserved by the intersection observer as they are added/removed to the\n * DOM, which is observed using a `MutationObserver`.\n * `IntersectionObserver` options such as `rootMargin` are supported, to fine tune what should be considered as\n * overflowed.\n *\n * TODO: add a takeRecords method to allow processing pending mutations before disconnect\n * TODO: maybe add direction option?\n *\n */\nexport class OverflowObserver {\n  private mutationObserver: MutationObserver;\n  private data: Map<\n    Element,\n    {\n      intersectionObserver: IntersectionObserver;\n      currentOverflowElements: Element[];\n    }\n  > = new Map();\n\n  constructor(private callback: OverflowObserverCallback) {\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n        if (!(target instanceof Element)) {\n          return;\n        }\n        mutation.removedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.unobserve(node);\n          }\n        });\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.observe(node);\n          }\n        });\n      });\n    });\n  }\n\n  observe(target: Element, options: Omit<IntersectionObserverInit, \"root\">) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n\n    const intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        const data = this.data.get(target);\n        const newHiddenElements = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : undefined\n          )\n          .filter(notNull);\n        const newVisibleElements = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : null\n          )\n          .filter(notNull);\n\n        //  Also cover this in Toolbar with a test case\n        const previouslyOverflowedElements =\n          data?.currentOverflowElements || [];\n        const overflowedElements = previouslyOverflowedElements\n          .filter((element) => !newVisibleElements.includes(element))\n          .concat(newHiddenElements)\n          .filter((element) => {\n            // In some cases some elements may be hidden by some styles (e.g. the first/last separator in a toolbar).\n            // It doesn't make sense to report them as overflowed.\n            const isHidden =\n              element instanceof HTMLElement &&\n              element.offsetWidth === 0 &&\n              element.offsetHeight === 0;\n            return !isHidden;\n          });\n        this.callback(\n          {\n            previouslyOverflowedElements,\n            overflowedElements: overflowedElements,\n            target,\n          },\n          this\n        );\n        if (data) {\n          data.currentOverflowElements = overflowedElements;\n        }\n      },\n      {\n        ...options,\n        root: target,\n      }\n    );\n    [...(target?.children || [])].forEach((childElement) => {\n      intersectionObserver.observe(childElement);\n    });\n    this.data.set(target, {\n      intersectionObserver,\n      currentOverflowElements: [],\n    });\n    this.mutationObserver.observe(target, {\n      childList: true,\n    });\n  }\n\n  unobserve(target: Element) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n  }\n\n  disconnect() {\n    [...this.data.values()].forEach(({ intersectionObserver }) =>\n      intersectionObserver.disconnect()\n    );\n    this.data = new Map();\n    this.mutationObserver.disconnect();\n  }\n}\n","import { RefObject, useEffect, useState } from \"react\";\nimport { OverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/OverflowObserver\";\n\n/**\n * Given a ref to a scrollable container, returns the child elements that are not completely visible and\n * are off view because of scroll.\n * @param scrollableContainerRef\n * @param threshold\n */\nexport function useOverflowObserver(\n  scrollableContainerRef: RefObject<HTMLElement>,\n  {\n    threshold = 0.9,\n    rootMargin = \"0px\",\n  }: Omit<IntersectionObserverInit, \"root\"> = {}\n) {\n  const [overflowedElements, setOverflowedElements] = useState<Element[]>([]);\n\n  useEffect(() => {\n    const overflowObserver = new OverflowObserver((change) => {\n      setOverflowedElements(change.overflowedElements);\n    });\n    overflowObserver.observe(scrollableContainerRef.current!, {\n      rootMargin,\n      threshold,\n    });\n    return () => {\n      overflowObserver.disconnect();\n    };\n  }, [\n    /**\n     * It's ok and needed to have the ref value as a dependency here. We don't know if ref is attached to different\n     * elements in each render, and it's ok that it's not a state, since we don't change it, and it's not supposed to\n     * change without a rerender\n     **/\n    scrollableContainerRef.current,\n  ]);\n\n  return {\n    overflowedElements,\n  };\n}\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useLayoutEffect, useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos = { x: 0, y: 0 };\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = (e) => {\n        lastMouseClientPos = { x: e.clientX, y: e.clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (options.isOpen && targetRef.current) {\n      targetRef.current.style.left = `${lastMouseClientPos.x}px`;\n      targetRef.current.style.top = `${lastMouseClientPos.y}px`;\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e?: React.MouseEvent) => {\n      if (targetRef.current && e) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import React, { useEffect, useMemo } from \"react\";\nimport { SSRProvider } from \"@react-aria/ssr\";\nimport darculaTheme from \"../../../jui/themes/darcula.theme.json\";\nimport highContrastTheme from \"../../../jui/themes/HighContrast.theme.json\";\nimport lightTheme from \"../../../jui/themes/intellijlaf.theme.json\";\nimport { Theme, ThemeProvider } from \"../../../jui/src\";\n\nexport type ExampleContextThemeName = \"light\" | \"darcula\" | \"highContrast\";\n\nexport const ExampleContext: React.FC<{\n  themeName?: ExampleContextThemeName;\n}> = ({ children, themeName = \"darcula\" }) => {\n  const themeJson = (\n    {\n      light: lightTheme,\n      highContrast: highContrastTheme,\n      darcula: darculaTheme,\n    } as const\n  )[themeName];\n\n  // IMPORTANT: passing a function that returns Theme is crucial in get it working. Otherwise, ThemeProvider will try\n  // to \"merge\" themes, and the end result is an POJO, with prototype link lost.\n  // @ts-expect-error ThemeJson type is not accurate ATM.\n  const theme = useMemo(() => new Theme(themeJson), [themeJson]);\n\n  useFixDocusaurusStyleBleeds();\n  return (\n    <SSRProvider>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </SSRProvider>\n  );\n};\n\n/**\n * TODO: add a surrounding UI for examples, with tools for theme selection for example.\n */\nexport const Example: React.FC = ({ children }) => (\n  <ExampleContext>\n    <div\n      // @ts-expect-error: css prop is not working for some reason\n      css={`\n        background: ${({ theme }) => theme.color(\"*.background\")};\n      `}\n    >\n      {children}\n    </div>\n  </ExampleContext>\n);\n\nexport const withExampleContext = <P extends {}>(\n  Component: React.ComponentType<P>\n) => {\n  function WithExampleContext(props: P) {\n    return (\n      <ExampleContext>\n        <Component {...props} />\n      </ExampleContext>\n    );\n  }\n\n  return WithExampleContext;\n};\n\nconst useFixDocusaurusStyleBleeds = () => {\n  useEffect(() => {\n    const FLAG_CLASSNAME = \"example-context-patch\";\n    if (!document.body.classList.contains(FLAG_CLASSNAME)) {\n      try {\n        undoUseKeyboardNavigation();\n        document.body.classList.add(FLAG_CLASSNAME);\n      } catch (e) {\n        console.error(\"Could not undo useKeyboardNavigation\");\n      }\n    }\n  }, []);\n};\n\n/**\n * Reverts the \"improvement\" [useKeyboardNavigation][1] does :|\n *\n * [1]: https://github.com/facebook/docusaurus/blob/f87a3ead4664b301901c12466cb2c82cd95d141b/packages/docusaurus-theme-common/src/hooks/useKeyboardNavigation.ts#L14\n */\nfunction undoUseKeyboardNavigation() {\n  document\n    .querySelectorAll<HTMLLinkElement>(\"link[rel=stylesheet]\")\n    .forEach((linkEl) => {\n      for (let i = 0; i < linkEl.sheet.cssRules.length; i++) {\n        const rule = linkEl.sheet.cssRules.item(i);\n        if (rule.cssText?.startsWith(\"body:not(.navigation-with-keyboard)\")) {\n          linkEl.sheet.deleteRule(i); // We can change the rule to only disable it within the boundary of example\n        }\n      }\n    });\n}\n","import React from \"react\";\n\n/**\n * To make relation between things in jui and original reference impl in Intellij Platform\n */\nexport const RefToIntellijPlatform = ({\n  path,\n  name,\n}: {\n  path: string;\n  name?: string;\n}) => {\n  return (\n    // TODO: make it some nice box with an icon and a hint text which says something like \"Intellij Platform\" or\n    //  \"Reference\" or something better :D\n    <a\n      href={`https://github.com/JetBrains/intellij-community/blob/master/${path}`}\n      target=\"_blank\"\n    >\n      {name || path.split(\"/\").pop()}\n    </a>\n  );\n};\n","import { Meta, StoryObj } from \"@storybook/react\";\nimport { PlatformIcon } from \"../Icon\";\nimport { DebuggerTabContent } from \"./DebuggerTabs/DebuggerTabContent\";\nimport { EditorTabContent } from \"./EditorTabs/EditorTabContent\";\nimport { EditorTabs, EditorTabsProps } from \"./EditorTabs/EditorTabs\";\nimport { DebuggerTabs } from \"./DebuggerTabs/DebuggerTabs\";\nimport { Tabs, TabsProps } from \"./Tabs\";\nimport { TabContentLayout } from \"./TabContentLayout\";\nimport { ToolWindowTabs } from \"./ToolWindowTabs/ToolWindowTabs\";\nimport React from \"react\";\nimport { Item } from \"../Collections\";\n\ntype StoryProps<T extends TabsProps<unknown> = TabsProps<unknown>> = Pick<\n  T,\n  \"active\" | \"defaultSelectedKey\"\n>;\n\nexport default {\n  title: \"Components/Tabs/Tab Themes\",\n  component: Tabs,\n  parameters: {\n    controls: { exclude: \"TabComponent\" },\n  },\n} as Meta;\n\nexport const EditorTheme: StoryObj<StoryProps> = {\n  render: (props) => {\n    return (\n      <EditorTabs {...props} items={editorTabs} active>\n        {(tab: typeof editorTabs[number]) => (\n          <Item key={tab.title} textValue={tab.title}>\n            <EditorTabContent\n              icon={<PlatformIcon icon={tab.icon} />}\n              title={tab.title}\n              pinned={tab.pinned}\n            />\n          </Item>\n        )}\n      </EditorTabs>\n    );\n  },\n};\nexport const DebuggerTheme: StoryObj<StoryProps> = {\n  render: (props) => {\n    return (\n      <DebuggerTabs {...props} items={debuggerTabs}>\n        {(tab: typeof debuggerTabs[number]) => (\n          <Item key={tab.title} textValue={tab.title}>\n            <DebuggerTabContent\n              icon={tab.icon && <PlatformIcon icon={tab.icon} />}\n              title={tab.title}\n            />\n          </Item>\n        )}\n      </DebuggerTabs>\n    );\n  },\n};\nexport const ToolWindowTheme: StoryObj<StoryProps> = {\n  render: (props) => {\n    return (\n      <ToolWindowTabs {...props} items={toolWindowTabs}>\n        {(tab: typeof toolWindowTabs[number]) => (\n          <Item key={tab.title} textValue={tab.title}>\n            <TabContentLayout\n              startIcon={<PlatformIcon icon={tab.icon} />}\n              title={tab.title}\n            />\n          </Item>\n        )}\n      </ToolWindowTabs>\n    );\n  },\n};\nconst editorTabs = [\n  {\n    title: \"Tabs.tsx\",\n    pinned: true,\n    icon: \"fileTypes/javaScript\",\n  },\n  {\n    title: \"Tabs.stories.tsx\",\n    pinned: false,\n    icon: \"fileTypes/javaScript\",\n  },\n  {\n    title: \"index.ts\",\n    pinned: false,\n    icon: \"fileTypes/javaScript\",\n  },\n  {\n    title: \"Tabs.test.ts\",\n    pinned: false,\n    icon: \"fileTypes/javaScript\",\n  },\n];\nconst toolWindowTabs = [\n  {\n    title: \"Project\",\n    icon: \"nodes/project\",\n  },\n  {\n    title: \"Project Files\",\n    icon: \"nodes/folder\",\n  },\n  {\n    title: \"Tests\",\n    icon: \"scope/tests\",\n  },\n];\nconst debuggerTabs = [\n  {\n    title: \"Console\",\n    icon: \"debugger/console\",\n  },\n  {\n    title: \"Frames\",\n    icon: null,\n  },\n  {\n    title: \"Variables | Coroutines | idea.log\",\n    icon: null,\n  },\n];\n","import { Meta, StoryObj } from \"@storybook/react\";\nimport { MenuItemLayout, PlatformIcon } from \"@intellij-platform/core\";\nimport React, { useEffect, useState } from \"react\";\nimport { TabContentLayout, TabItem, TabsProps } from \".\";\nimport { Tabs } from \"./Tabs\";\nimport { DOMProps } from \"@react-types/shared\";\n\ntype StoryProps<T extends TabsProps<unknown> = TabsProps<unknown>> = Pick<\n  T,\n  | \"active\"\n  | \"focusable\"\n  | \"defaultSelectedKey\"\n  | \"multiRow\"\n  | \"noOverflowMenu\"\n  | \"noBorders\"\n  | keyof DOMProps\n>;\n\nexport default {\n  title: \"Components/Tabs\",\n  component: Tabs,\n  parameters: {\n    controls: { exclude: \"TabComponent\" },\n  },\n} as Meta;\n\nexport const StaticItems: StoryObj<StoryProps> = {\n  render: (props) => {\n    return (\n      <Tabs {...props}>\n        <TabItem>Tab 1</TabItem>\n        <TabItem>Tab 2</TabItem>\n        <TabItem>Tab 3</TabItem>\n      </Tabs>\n    );\n  },\n};\n\nexport const DynamicItems: StoryObj<StoryProps> = {\n  render: (props: StoryProps) => {\n    return (\n      <Tabs\n        {...props}\n        items={[\"Tab 1\", \"Tab 2\", \"Tab 3\"].map((title) => ({ title }))}\n      >\n        {({ title }: { title: string }) => (\n          <TabItem key={title}>{title}</TabItem>\n        )}\n      </Tabs>\n    );\n  },\n};\n\nexport const Overflow: StoryObj<StoryProps & { maxWidth: number }> = {\n  render: ({ maxWidth = 800, ...props }) => {\n    const [tabs, setTabs] = useState(\n      Array(10)\n        .fill(null)\n        .map((_, index) => ({\n          title: `Big tab title #${index}`,\n          icon: \"nodes/folder\",\n        }))\n    );\n    return (\n      <div style={{ maxWidth }}>\n        <Tabs {...props} items={tabs}>\n          {(tab) => {\n            const icon = <PlatformIcon icon={tab.icon} />;\n            return (\n              <TabItem\n                key={tabs.indexOf(tab)}\n                textValue={tab.title}\n                inOverflowMenu={\n                  <MenuItemLayout content={tab.title} icon={icon} />\n                }\n              >\n                <TabContentLayout startIcon={icon} title={tab.title} />\n              </TabItem>\n            );\n          }}\n        </Tabs>\n        <div style={{ marginTop: \"1rem\" }}>\n          <button\n            onClick={() => {\n              setTabs((tabs) => [\n                ...tabs,\n                {\n                  title: `Big tab title #${tabs.length}`,\n                  icon: \"nodes/folder\",\n                },\n              ]);\n            }}\n          >\n            Add tab\n          </button>\n          <button\n            onClick={() => {\n              setTabs((tabs) =>\n                tabs.map((tab, index) => {\n                  if (index === 4) {\n                    const title = tab.title;\n                    return {\n                      ...tab,\n                      title:\n                        title.replace(/ \\(.*\\)/, \"\") +\n                        ` ( edited - ${\n                          title.includes(\"short\")\n                            ? \"long long long long\"\n                            : \"short\"\n                        })`,\n                    };\n                  }\n                  return tab;\n                })\n              );\n            }}\n          >\n            Change title of tab #4\n          </button>\n        </div>\n      </div>\n    );\n  },\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Tabs';\nexport const metadata = {\n  \"unversionedId\": \"components/Tabs\",\n  \"id\": \"components/Tabs\",\n  \"title\": \"Tabs\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Tabs.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Tabs\",\n  \"permalink\": \"/jui/docs/components/Tabs\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Tabs.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"StatusBar\",\n    \"permalink\": \"/jui/docs/components/StatusBar\"\n  },\n  \"next\": {\n    \"title\": \"ToolWindows\",\n    \"permalink\": \"/jui/docs/components/ToolWindows\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"@site/src/components/RefToIntellijPlatform.tsx\";\nimport {\n  EditorTheme,\n  DebuggerTheme,\n  ToolWindowTheme,\n} from \"@intellij-platform/core/Tabs/3-TabThemes.stories\";\nimport { Overflow } from \"@intellij-platform/core/Tabs/2-Tabs.stories\";\nimport { Example } from \"@site/src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'Simple usage',\n  id: 'simple-usage',\n  level: 2\n}, {\n  value: 'Overflow behavior',\n  id: 'overflow-behavior',\n  level: 2\n}, {\n  value: 'Customization',\n  id: 'customization',\n  level: 2\n}, {\n  value: 'Editor Theme',\n  id: 'editor-theme',\n  level: 3\n}, {\n  value: 'Debugger Theme',\n  id: 'debugger-theme',\n  level: 3\n}, {\n  value: 'Tool Window Theme',\n  id: 'tool-window-theme',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tabs\"\n    }}>{`Tabs`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Fully customizable and themeable`}</li>\n      <li parentName=\"ul\">{`Support for different ways of handling overflow`}</li>\n      <li parentName=\"ul\">{`Default tab themes, with support for icon, close button and pinned tabs.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`drag and drop`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"simple-usage\"\n    }}>{`Simple usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<Tabs>\n  <Item>Tab 1</Item>\n  <Item>Tab 2</Item>\n  <Item>Tab 3</Item>\n</Tabs>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overflow-behavior\"\n    }}>{`Overflow behavior`}</h2>\n    <p>{`There are a few was of handling the overflow, when there is not enough space for showing all tabs. By default tabs will\nscroll horizontally and a small arrow down icon button is added next to the tabs which opens an overflow menu for the\ntabs that are not fully visible, based on the current scroll position.`}</p>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Use `}<inlineCode parentName=\"p\">{`TabItem`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` to specify via `}<inlineCode parentName=\"p\">{`inOverflowMenu`}</inlineCode>{` prop, a different react node to be shown when the tab\nis rendered in the overflow menu.`}</p></admonition>\n    <Example mdxType=\"Example\">\n  <Overflow.render maxWidth={1800} />\n    </Example>\n    <br />\n    <p>{`Overflow menu can be disabled via `}<inlineCode parentName=\"p\">{`noOverflow`}</inlineCode>{` prop:`}</p>\n    <Example mdxType=\"Example\">\n  <Overflow.render maxWidth={1800} noOverflowMenu />\n    </Example>\n    <br />\n    <p>{`Horizontal scroll can be disabled via `}<inlineCode parentName=\"p\">{`noScroll`}</inlineCode>{` prop. If overflow is also disabled, tabs will be shrunk to fit\nthe available space.`}</p>\n    <admonition {...{\n      \"type\": \"warning\"\n    }}><p parentName=\"admonition\">{`Support for `}<inlineCode parentName=\"p\">{`noScroll`}</inlineCode>{` is under development.`}</p></admonition>\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p><inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component allows for `}<inlineCode parentName=\"p\">{`TabsComponent`}</inlineCode>{` (the container) and `}<inlineCode parentName=\"p\">{`TabComponent`}</inlineCode>{` to allow for customizing look and feel.\nBy default `}<inlineCode parentName=\"p\">{`StyledDefaultTabs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`StyledDefaultTab`}</inlineCode>{` are used. The following variations are a thin wrapper around\n`}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{`, which use those two props. They also expose a customized version of `}<inlineCode parentName=\"p\">{`TabContentLayout`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"editor-theme\"\n    }}>{`Editor Theme`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`EditorTabs`}</inlineCode>{` together with `}<inlineCode parentName=\"p\">{`EditorTabContent`}</inlineCode>{` for editor tab style.`}</p>\n    <Example mdxType=\"Example\">\n  <EditorTheme.render />\n    </Example>\n    <h3 {...{\n      \"id\": \"debugger-theme\"\n    }}>{`Debugger Theme`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`DebuggerTabs`}</inlineCode>{` together with `}<inlineCode parentName=\"p\">{`DebuggerTabContent`}</inlineCode>{` for editor tab style.`}</p>\n    <Example mdxType=\"Example\">\n  <DebuggerTheme.render />\n    </Example>\n    <h3 {...{\n      \"id\": \"tool-window-theme\"\n    }}>{`Tool Window Theme`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`ToolWindowTabs`}</inlineCode>{` together with the default `}<inlineCode parentName=\"p\">{`TabContentLayout`}</inlineCode>{` for editor tab style.`}</p>\n    <Example mdxType=\"Example\">\n  <ToolWindowTheme.render />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["BareButton","React","props","ref","elementType","children","type","undefined","buttonProps","useButton","useObjectRef","domProps","filterDOMProps","autoFocus","mergeProps","Item","_Item","getCollectionNode","context","result","StatelyItem","next","value","originalShouldInvalidate","shouldInvalidate","invalidated","ItemStateContext","LafIcon","forwardedRef","themePath","icon","size","resolvedIconPath","iconDescriptor","theme","useTheme","resolvedValue","modifiers","name","isUnderDarcula","filter","modifier","Disabled","includes","reduce","soFar","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","amendName","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","startsWith","slice","PlatformIcon","darkIcon","iconName","dark","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","styled","role","itemState","useContext","selected","isSelected","isContainerFocused","useEffect","unmounted","async","console","error","current","dataset","loadingIcon","svg","getSvgIcon","catch","e","querySelector","remove","svgElement","document","createElement","appendChild","outerHTML","randomPostfix","Math","random","toFixed","matchAll","modifiedSvg","_","id","newId","replaceAll","makeIdsUnique","fetchIcon","theOld","theNew","str","replaced","replace","replacedAgain","DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","StyledIconButton","minSize","color","IconButton","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","isDisabled","onPress","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","otherProps","focusableProps","useFocusable","pressProps","usePress","className","disabled","tabIndex","ListDivider","as","useSeparator","orientation","separatorProps","patchCollectionItem","nodes","partialNode","result2","childNodes","partialChildNode","partialChildNodeWithoutType","PatchedItem","PatchedSection","Section","convertChildren","Array","isArray","map","Item2","key","MenuOverlayContext","close","MenuContext","useMenu","state","onAction","onActionProp","submenuBehavior","onClose","collection","getItem","hasChildNodes","menuContextValue","menuProps","useMenuAria","useMenuState","node","patchCollectionProps","useTreeState","childExpansionBehaviour","expandedKeys","expandedKey","onExpandedChange","firstKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","Menu","minWidth","Provider","StyledMenu","style","fillAvailableSpace","renderMenuNodes","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItemContext","descriptionProps","labelProps","keyboardShortcutProps","useMenuItemLayout","MenuItem","item","nestedMenuRef","disabledKeys","has","isExpanded","selectionManager","selectedKeys","isFocused","focusedKey","renderSubmenu","itemWrapper","i","menuItemProps","hasSubmenu","ariaMenuItemProps","useMenuItemAria","onMouseEnter","onPointerEnter","onPointerDown","hoverProps","useHover","onHoverStart","isAnySubmenuOpen","some","parentKey","toggleKey","isFocusVisible","setFocused","setFocusedKey","keyboardProps","onKeyDown","stopPropagation","togglePressProps","useMenuItem","overlayProps","positionProps","useOverlayPosition","targetRef","overlayRef","placement","shouldFlip","offset","crossOffset","MENU_VERTICAL_PADDING","MENU_BORDER_WIDTH","isOpen","arrowProps","onPointerUp","isActive","Selected","rendered","OverlayComponent","SimpleOverlay","parentState","rootKey","portalContainer","body","ReactDOM","StyledMenuItemLayout","Content","Shortcut","currentForegroundAware","MenuItemLayout","content","shortcut","useContextOrThrow","allowedIcon","MenuOverlay","restoreFocus","forceRestoreFocus","MenuTrigger","renderMenu","direction","align","positioningTargetRef","menuTriggerProps","useMenuTriggerState","triggerRef","triggerProps","useMenuTrigger","ariaButtonProps","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","element","matches","getPlacement","containerPadding","WINDOW_SHADOW","StyledVerticalSeparator","css","StyledMenuItem","StyledMenuItemIcon","StyledNestedArrow","highlightedStyle","asCurrentForeground","defaultStyle","disabledStyle","useSubmenu","keyboardDelegate","rootItem","textValue","MenuKeyboardDelegate","submenuProps","useSubmenuAria","submenuBehaviorProps","setTimeout","focus","Submenu","useRef","useSubmenuState","ListKeyboardDelegate","constructor","collator","super","keys","this","getKeys","flatMap","getFirstKey","getLastKey","getKeyBelow","keyBelow","getKeyAbove","keyAbove","useKeyboard","contains","target","continuePropagation","root","useState","isFocusedRef","focusedKeyRef","Object","defineProperties","get","SelectionManager","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","itemProps","headingProps","groupProps","useMenuSection","heading","length","hasDivider","ParentOverlayContext","Overlay","AriaOverlay","containerRef","areInNestedOverlays","element1","element2","overlayRoot1","closest","overlayRoot2","Boolean","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundColor","backgroundClip","boxSizing","margin","border","flexShrink","StyledHorizontalSeparator","DebuggerTabContent","title","closeButton","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","containerProps","tooltip","actionName","editorTabTheme","borderColor","background","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","commonColors","contrastBorder","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabContentLayout","TabItem","active","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","forwardRef","shouldSelectOnPressUp","Component","tabProps","useTab","selectedKey","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","hasOverflow","threshold","setHasOverflow","left","right","top","bottom","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetWidth","offsetTop","scrollTop","offsetBottom","scrollHeight","offsetHeight","newHasOverflow","onScroll","useHasOverflow","overflowedElements","useOverflowObserver","overflowedKeys","Set","HTMLElement","notNull","scrollableContainer","selectedTabElement","scrollIntoView","Error","TabsOverflowMenu","onSelect","setSelectedKey","items","menuItem","inOverflowMenu","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","ActionTooltip","StyledTooltip","multiline","inset","StyledShortcut","StyledHeader","fontSizeDelta","StyledDescription","contextHelpForeground","StyledLink","linkForegroundEnabled","Tooltip","isInteractive","TooltipContext","tooltipProps","useTooltip","open","_Tooltip","assign","Header","Description","Link","TooltipTrigger","delay","useTooltipTriggerState","updatePosition","useMouseEventOverlayPosition","requestAnimationFrame","tooltipOverlayProps","trigger","showOnFocus","TooltipTriggerAndOverlay","setInteractive","useTooltipTrigger","onFocus","useLayoutEffect","normalizeChildren","useAriaTooltipTrigger","HTMLInputElement","onMouseDown","Symbol","iterator","TreeCollection","keyMap","Map","iterable","lastKey","last","visit","set","child","index","nextKey","prevKey","getKeyBefore","getKeyAfter","at","idx","getSingleChildrenKeys","getSingleChildrenKeysRecursive","previousKeys","childNodesIterator","firstChild","done","noMoreChildren","isExpandable","concat","isEmptyIterable","TreeSelectionManager","options","expandSelection","expandKeys","getExpandAndShrinkKeys","setSelectedKeys","shrinkSelection","shrinkKeys","recursivelyGetExpandAndShrinkKeys","previousChild","parent","newKeys","parentDescendants","getAllDescendants","getAllRoots","every","descendants","stopKeys","flat","_TreeCollection","rootKeys","from","getAllExpandableKeys","rootNodes","recursivelyAddExpandableKeys","add","treeRef","setExpandedKeys","useControlledState","selectionState","useMultipleSelectionState","selectionBehavior","useMemo","cacheInvalidation","invalidators","lastInvalidators","usePrevious","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","latestState","useLatest","useImperativeHandle","replaceSelection","expandAll","collapseAll","select","useTreeRef","newExpandedKeys","toggleTreeNode","expandedSiblings","getRootItemKeys","getChildItems","siblings","push","getSiblings","aKey","childItems","sectionItems","res","delete","styledComponents","ThemeConsumer","FocusScope","directChildRef","focusManagerRef","nodeToRestore","activeElement","focusSafely","forceFocusFirst","focusManager","containerElement","parentElement","focusFirst","focusNext","tabbable","GetFocusManager","hidden","useFocusManager","OverflowObserver","callback","mutationObserver","data","MutationObserver","mutations","forEach","mutation","Element","removedNodes","intersectionObserver","unobserve","addedNodes","observe","disconnect","IntersectionObserver","entries","newHiddenElements","entry","isIntersecting","newVisibleElements","previouslyOverflowedElements","currentOverflowElements","childElement","childList","values","scrollableContainerRef","rootMargin","setOverflowedElements","overflowObserver","change","Context","nullErrorMessage","innerRef","globalMoveHandler","lastMouseClientPos","x","y","clientX","clientY","addEventListener","fakeTarget","width","height","pointerEvents","position","visibility","ExampleContext","themeName","themeJson","light","lightTheme","highContrast","highContrastTheme","darcula","darculaTheme","Theme","useFixDocusaurusStyleBleeds","Example","FLAG_CLASSNAME","classList","querySelectorAll","linkEl","sheet","cssRules","cssText","deleteRule","RefToIntellijPlatform","href","pop","EditorTheme","editorTabs","tab","DebuggerTheme","debuggerTabs","ToolWindowTheme","toolWindowTabs","Overflow","maxWidth","tabs","setTabs","fill","indexOf","marginTop","onClick","frontMatter","contentTitle","metadata","assets","toc","level","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}