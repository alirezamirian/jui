{"version":3,"file":"assets/js/65a4d95d.90afba75.js","mappings":"yJAGO,MAAMA,EAET,CACF,CAAEC,KAAM,iBACR,CAAEA,KAAM,iBACR,IAAIC,EAAAA,EACJ,CAAED,KAAM,iBACR,CAAEA,KAAM,gBACR,IAAIC,EAAAA,EACJ,CAAED,KAAM,WACR,CACEE,MAAO,gBACPC,MAAO,CAAC,CAAEH,KAAM,cAElB,CAAEA,KAAM,mBACR,CAAEA,KAAM,WACR,CAAEA,KAAM,iB,4CCZeI,EAAAA,EAAAA,GAAW;WACzB,QAAC,MAAEC,GAAH,SAAeA,EAAMC,MAAM;EAD/B,MAGMC,EACXC,GAEA,+BACEC,MAAO,CACLC,QAAS,OACTC,cAAe,SACfC,MAAO,IACPC,UAAW,GACXC,OAAQ,uBAENN,I,eCXD,MAQMO,EAAe,CAC1BC,EACAC,IACIC,GACAA,aAAgBjB,EAAAA,YACX,gBAAC,EAAAkB,QAAD,CAASC,IAAKF,EAAKE,MAExB,UAAWF,EAEX,gBAAC,EAAAG,QAAD,CAASlB,MAAOe,EAAKf,MAAOiB,IAAKF,EAAKhB,MAAOA,MAAOgB,EAAKhB,QACrDgB,GAASF,EAAWE,EAAMD,KAI3BD,EAAWE,EAAgBD,GAEvBK,EAAkBJ,GAC7B,gBAAC,EAAAK,KAAD,CAAMH,IAAKF,EAAKlB,KAAMwB,UAAWN,EAAKlB,MACnCkB,EAAKlB,MClBGyB,GAHAC,EAAAA,EAGU,IAEnB,gBAAC,EAAD,KACE,gBAAC,IAAD,CAAMC,cAAc,SAASxB,MAAOJ,EAAS6B,oBAAkB,GAC5Db,EAAaO,MAqCTO,EAAc,IAIf,IAJgB,mBAC1BD,EAD0B,gBAE1BE,EAF0B,wBAG1BC,GACS,EACT,OACE,gBAAC,EAAD,KACE,gBAAC,IAAD,CACEJ,cAAc,WACdxB,MAAOJ,EACP6B,mBAAoBA,EACpBE,gBAAiBA,EACjBC,wBAAyBA,GAExBhB,EAAaO,MAKtBO,EAAYG,SAAW,CACrBF,gBAAiB,CAAEG,QAAS,YAE9BJ,EAAYK,KAAO,CACjBJ,gBAAiB,CAAEK,OAAO,IAG5BV,EAAQS,KAAO,I,0KChFR,MAAME,EAAc,GACdC,EAAe,OACfC,EAAW,CACtB,cAAiB,kBACjB,GAAM,kBACN,MAAS,OACT,YAAe,kBACf,OAAU,iCACV,cAAiB,aACjB,KAAQ,mBACR,UAAa,4BACb,QAAW,6FACX,KAAQ,GACR,QAAW,UACX,YAAe,GACf,QAAW,kBACX,SAAY,CACV,MAAS,cACT,UAAa,oCAEf,KAAQ,CACN,MAAS,UACT,UAAa,0CAUJC,EAAM,CAAC,CAClBJ,MAAO,kBACPK,GAAI,kBACJC,SAAU,GACVC,MAAO,GACN,CACDP,MAAO,eACPK,GAAI,eACJC,SAAU,CAAC,CACTN,MAAO,4DACPK,GAAI,4DACJC,SAAU,GACVC,MAAO,IAETA,MAAO,IAGHC,EAAc,CAClBJ,IAAAA,GAGa,SAASK,EAAT,GAGX,IAH+B,WACjCC,KACGrC,GACF,EACD,OAAO,QALS,WAKT,UAAemC,EAAiBnC,EAAhC,CAAuCqC,WAAYA,EAAYC,QAAQ,eAG5E,cACE,GAAM,QACH,SACL,cACE,GAAM,mBACH,oBACL,cACE,GAAM,gBACH,iBACL,cACE,GAAM,6DACH,8DAKTF,EAAWG,gBAAiB","sources":["webpack://website/../jui/test-data.ts","webpack://website/../jui/src/story-components.tsx","webpack://website/../jui/src/List/story-helpers.tsx","webpack://website/../jui/src/List/List.stories.tsx","webpack://website/./docs/components/Tree.mdx"],"sourcesContent":["import { DividerItem } from \"./src/Collections/Divider\";\n\nexport type Legend = { name: string };\nexport const legends: Array<\n  Legend | DividerItem | { items: Legend[]; title: string }\n> = [\n  { name: \"Paco de Lucia\" },\n  { name: \"Vicente Amigo\" },\n  new DividerItem(),\n  { name: \"Gerardo Nunez\" },\n  { name: \"Paco Serrano\" },\n  new DividerItem(),\n  { name: \"Sabicas\" },\n  {\n    title: \"Super legends\",\n    items: [{ name: \"Sabicas2\" }],\n  },\n  { name: \"Pepe Habichuela\" },\n  { name: \"El Amir\" },\n  { name: \"Paco PeÃ±a\" },\n];\n","import { Item } from \"@react-stately/collections\";\nimport { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree } from \"./Tree/SpeedSearchTree/SpeedSearchTree\";\nimport { HighlightedTextValue } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Set<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = new Set([\"BasicList\"]),\n  onSelectedKeysChange,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: SelectedKeysType) => void;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={defaultSelectedKeys}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      <Item key=\"index.ts\">index.ts</Item>\n      <Item textValue=\"List\" title={<HighlightedTextValue />} key=\"List\">\n        <Item\n          textValue=\"BasicList\"\n          title={<HighlightedTextValue />}\n          key=\"BasicList\"\n        >\n          <Item textValue=\"BasicList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useBasicList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item\n          textValue=\"SpeedSearchList\"\n          title={<HighlightedTextValue />}\n          key=\"SpeedSearchList\"\n        >\n          <Item textValue=\"SpeedSearchList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useSpeedSearchList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item textValue=\"ListDivider.tsx\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n      <Item textValue=\"Theme\" title={<HighlightedTextValue />} key=\"Theme\">\n        <Item textValue=\"createTheme.ts\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n    </SpeedSearchTree>\n  );\n};\n","import { Legend, legends } from \"../../test-data\";\nimport React, { ReactNode } from \"react\";\nimport {\n  Divider,\n  DividerItem,\n  HighlightedTextValue,\n  Item,\n  Section,\n} from \"@intellij-platform/core\";\n\nexport const renderItemCustomUI = (item: Legend, content?: ReactNode) => (\n  <Item key={item.name} textValue={item.name}>\n    <div style={{ height: 40, display: \"flex\", alignItems: \"center\" }}>\n      ðŸŽ¸ &nbsp;\n      <b>{content || item.name}</b>\n    </div>\n  </Item>\n);\nexport const itemRenderer = (\n  renderItem: (item: Legend, content?: ReactNode) => JSX.Element,\n  content?: ReactNode\n) => (item: typeof legends[number]) => {\n  if (item instanceof DividerItem) {\n    return <Divider key={item.key} />;\n  }\n  if (\"items\" in item) {\n    return (\n      <Section items={item.items} key={item.title} title={item.title}>\n        {(item) => renderItem(item, content)}\n      </Section>\n    );\n  }\n  return renderItem(item as Legend, content);\n};\nexport const renderItemText = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    {item.name}\n  </Item>\n);\nexport const renderItemTextWithHighlights = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    <HighlightedTextValue />\n  </Item>\n);\n","import React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { List } from \"./List\";\nimport { legends } from \"../../test-data\";\nimport { Item, Section } from \"@react-stately/collections\";\nimport { Divider } from \"../Collections/Divider\";\nimport { Pane } from \"../story-components\";\nimport {\n  itemRenderer,\n  renderItemCustomUI,\n  renderItemText,\n} from \"./story-helpers\";\n\nexport default {\n  title: \"Components/List (Basic)\",\n  component: List,\n} as Meta;\n\nexport const Default = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"single\" items={legends} fillAvailableSpace>\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const AlwaysShownAsFocused = () => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        // alwaysShowListAsFocused\n      >\n        {itemRenderer(renderItemCustomUI)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const WithStaticData = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"multiple\" fillAvailableSpace>\n        <Item>Paco de lucia</Item>\n        <Divider />\n        <Item>Vicente Amigo</Item>\n        <Section title=\"Other\">\n          <Item>Gerardo Nunez</Item>\n          <Item>El Amir</Item>\n        </Section>\n      </List>\n    </Pane>\n  );\n};\n\nexport const MultiSelect = ({\n  fillAvailableSpace,\n  shouldFocusWrap,\n  alwaysShowListAsFocused,\n}: any) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"multiple\"\n        items={legends}\n        fillAvailableSpace={fillAvailableSpace}\n        shouldFocusWrap={shouldFocusWrap}\n        alwaysShowListAsFocused={alwaysShowListAsFocused}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\nMultiSelect.argTypes = {\n  shouldFocusWrap: { control: \"boolean\" },\n};\nMultiSelect.args = {\n  shouldFocusWrap: { value: false },\n};\n\nDefault.args = {};\n","\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Tree';\nexport const metadata = {\n  \"unversionedId\": \"components/Tree\",\n  \"id\": \"components/Tree\",\n  \"title\": \"Tree\",\n  \"description\": \"SpeedSearchTree\",\n  \"source\": \"@site/docs/components/Tree.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Tree\",\n  \"permalink\": \"/jui/docs/components/Tree\",\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Tree.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"ToolWindows\",\n    \"permalink\": \"/jui/docs/components/ToolWindows\"\n  },\n  \"next\": {\n    \"title\": \"Resizer\",\n    \"permalink\": \"/jui/docs/components/Advanced/Resizer\"\n  }\n};\n\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { RefToIntellijPlatform } from \"../../src/components/RefToIntellijPlatform.tsx\";\nimport { Default } from \"@intellij-platform/core/List/List.stories\";\nimport { ExampleContext } from \"../../src/components/ExampleContext\";\nexport const toc = [{\n  value: 'SpeedSearchTree',\n  id: 'speedsearchtree',\n  children: [],\n  level: 2\n}, {\n  value: 'Advanced use',\n  id: 'advanced-use',\n  children: [{\n    value: 'Custom list component with useList and useSpeedSearchList',\n    id: 'custom-list-component-with-uselist-and-usespeedsearchlist',\n    children: [],\n    level: 3\n  }],\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tree\"\n    }}>{`Tree`}</h1>\n    <h2 {...{\n      \"id\": \"speedsearchtree\"\n    }}>{`SpeedSearchTree`}</h2>\n    <h2 {...{\n      \"id\": \"advanced-use\"\n    }}>{`Advanced use`}</h2>\n    <h3 {...{\n      \"id\": \"custom-list-component-with-uselist-and-usespeedsearchlist\"\n    }}>{`Custom list component with useList and useSpeedSearchList`}</h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["legends","name","DividerItem","title","items","styled","theme","color","Pane","props","style","display","flexDirection","width","marginTop","height","itemRenderer","renderItem","content","item","Divider","key","Section","renderItemText","Item","textValue","Default","List","selectionMode","fillAvailableSpace","MultiSelect","shouldFocusWrap","alwaysShowListAsFocused","argTypes","control","args","value","frontMatter","contentTitle","metadata","toc","id","children","level","layoutProps","MDXContent","components","mdxType","isMDXComponent"],"sourceRoot":""}