{"version":3,"file":"assets/js/17896441.08e2e4b6.js","mappings":"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","sources":["webpack://website/../jui/src/ActionButton/ActionButton.tsx","webpack://website/../jui/src/ActionButtonWithMenu/ActionButtonWithMenu.tsx","webpack://website/../jui/src/ActionToolbar/ActionToolbar.tsx","webpack://website/../jui/src/Balloon/Balloon.styled.tsx","webpack://website/../jui/src/Balloon/Balloon.tsx","webpack://website/../jui/src/Balloon/BalloonsProvider.tsx","webpack://website/../jui/src/Balloon/StyledBalloonsStack.tsx","webpack://website/../jui/src/Button/StyledButton.tsx","webpack://website/../jui/src/Button/Button.tsx","webpack://website/../jui/src/Checkbox/Checkbox.tsx","webpack://website/../jui/src/Checkbox/CheckboxIcon.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemLayout.tsx","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/SelectionAwareSpan.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Icon/AutoHoverPlatformIcon.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/Img.tsx","webpack://website/../jui/src/Link/StyledLink.tsx","webpack://website/../jui/src/Link/Link.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/listItemRenderer.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/Menu/ContextMenuContainer.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/Menu/useContextMenu.tsx","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/ModalWindow/ModalWindow.tsx","webpack://website/../jui/src/ModalWindow/WindowLayout.tsx","webpack://website/../jui/src/ProgressBar/ProgressBar.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarPauseButton.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarStopButton.tsx","webpack://website/../jui/src/ResizableView.tsx","webpack://website/../jui/src/Resizer/BottomResizer.tsx","webpack://website/../jui/src/Resizer/HorizontalResizer.tsx","webpack://website/../jui/src/Resizer/LeftResizer.tsx","webpack://website/../jui/src/Resizer/RightResizer.tsx","webpack://website/../jui/src/Resizer/TopResizer.tsx","webpack://website/../jui/src/Resizer/VerticalResizer.tsx","webpack://website/../jui/src/Resizer/useResizer.ts","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StatusBar/StatusBar.tsx","webpack://website/../jui/src/StatusBar/StatusBarWidget.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabCloseButton.tsx","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useIsScrolled.tsx","webpack://website/../jui/src/Tabs/useCollectionOverflowObserver.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Theme/parseColorString.ts","webpack://website/../jui/src/Theme/Color.ts","webpack://website/../jui/src/ThreeViewSplitter/ThreeViewSplitter.tsx","webpack://website/../jui/src/ToolWindow/ToolWindowSettingsIconMenu.tsx","webpack://website/../jui/src/ToolWindow/DefaultToolWindowHeader.tsx","webpack://website/../jui/src/ToolWindow/useToolWindow.tsx","webpack://website/../jui/src/ToolWindow/DefaultToolWindow.tsx","webpack://website/../jui/src/ToolWindow/MultiViewToolWindow.tsx","webpack://website/../jui/src/ToolWindow/FloatView.tsx","webpack://website/../jui/src/ToolWindow/FloatToolWindows.tsx","webpack://website/../jui/src/ToolWindow/MovableToolWindowStripeProvider.tsx","webpack://website/../jui/src/ToolWindow/StyledToolWindowOuterLayout.tsx","webpack://website/../jui/src/ToolWindow/ToolWindowsState/ToolWindowsLayoutState.ts","webpack://website/../jui/src/ToolWindow/createGetDropPosition.tsx","webpack://website/../jui/src/ToolWindow/StyledToolWindowStripeButton.tsx","webpack://website/../jui/src/ToolWindow/StyledToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindow/useElementMove.tsx","webpack://website/../jui/src/ToolWindow/findEffectiveBackgroundColor.tsx","webpack://website/../jui/src/ToolWindow/ToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindow/UndockSide.tsx","webpack://website/../jui/src/ToolWindow/ToolWindows.tsx","webpack://website/../jui/src/ToolWindow/ToolWindowsState/ToolWindowStateProvider.tsx","webpack://website/../jui/src/ToolWindow/ToolWindowsState/ToolWindowsState.ts","webpack://website/../jui/src/ToolWindow/utils.ts","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/StyledTreeNode.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/__tmp__useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/TreeCheckboxes/NestedSelection.ts","webpack://website/../jui/src/TreeCheckboxes/SpeedSearchTreeWithCheckboxes.tsx","webpack://website/../jui/src/TreeCheckboxes/TreeNodeCheckbox.tsx","webpack://website/../jui/src/TreeCheckboxes/useNestedSelectionState.ts","webpack://website/../jui/src/Window/WindowInteractionHandler.tsx","webpack://website/../jui/src/Window/WindowMoveHandle.tsx","webpack://website/../jui/src/Window/WindowResizeHandles.tsx","webpack://website/../jui/src/Window/useResizableMovableWindow.tsx","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/SelectionManager.ts","webpack://website/../jui/src/selection/replaceSelectionManager.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/selection/useSelectableItem.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/interaction-utils/textSelection.ts","webpack://website/../jui/src/utils/interaction-utils/useMove.tsx","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/src/utils/immutableSet.ts","webpack://website/../jui/src/utils/useSet.ts","webpack://website/../jui/src/List/SpeedSearchList/useSpeedSearchList.ts","webpack://website/../jui/src/SpeedSearch/SpeedSearchContainer.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContainer.tsx","webpack://website/../jui/src/List/SpeedSearchList/SpeedSearchList.tsx","webpack://website/../jui/src/Icon/StyledIconLiveIndicator.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearch.tsx","webpack://website/../jui/src/Tree/Tree.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabContent.tsx","webpack://website/./src/theme/ReactLiveScope/index.js","webpack://website/./src/theme/Playground/style-overrides.module.css","webpack://website/./src/theme/CodeBlock/index.js"],"sourcesContent":["import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nexport interface ActionButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<HTMLProps<HTMLButtonElement>, \"onFocus\" | \"onBlur\"> {\n  children?: React.ReactNode;\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for action buttons, which means they\n   * are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledActionButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled),\n  &:focus:not(:disabled) /* in intellij platform, the button doesn't grab the focus after being active. This is not the case in web,\n  for better accessibility. But there is no existing UI spec for it in intellij platform obviously. So for now, we\n  fallback to the same UI as hover state. Perhaps it can be improved with a opacity or something.*/ {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\nexport const ActionButton = React.forwardRef(function ActionButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: ActionButtonProps,\n  ref: ForwardedRef<HTMLButtonElement>\n) {\n  const { pressProps, isPressed } = usePress({\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledActionButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  ActionButton,\n  ActionButtonProps,\n} from \"@intellij-platform/core/ActionButton/ActionButton\";\nimport { MenuTrigger, MenuTriggerProps } from \"@intellij-platform/core/Menu\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst ArrowIcon = styled(PlatformIcon)`\n  position: absolute;\n  right: 1px;\n  bottom: 1px;\n`;\n\ntype ActionButtonWithMenuProps = ActionButtonProps &\n  Pick<MenuTriggerProps, \"renderMenu\"> & {\n    /**\n     * whether the default arrow should be removed or not. false by default.\n     */\n    noArrow?: boolean;\n  };\n/**\n * Renders an ActionButton which opens a menu. by default a down arrow icon is shown as an overlay on the rendered\n * icon, but it can be disabled by passing `noArrow`. It also restores the focus to the previously focused element,\n * when the menu is closed.\n * @param renderMenu: render prop for rendering the menu\n * @param children: the content of the action button\n * @param noArrow: whether the default arrow should be removed or not. false by default.\n * @param buttonProps: the rest of the props that will be passed down to ActionButton\n *\n * TODO: Add story and write test for focus restoration, noArrow, and basic functionality.\n */\nexport const ActionButtonWithMenu = ({\n  renderMenu,\n  children,\n  noArrow = false,\n  ...buttonProps\n}: ActionButtonWithMenuProps) => {\n  const previouslyFocusedElementRef = useRef<HTMLElement>();\n  return (\n    <MenuTrigger\n      renderMenu={renderMenu}\n      onOpenChange={(open) => {\n        if (!open && previouslyFocusedElementRef.current) {\n          previouslyFocusedElementRef.current.focus();\n        }\n      }}\n    >\n      {(props, ref) => (\n        <ActionButton\n          {...mergeProps(buttonProps, props, {\n            onFocus: (e: FocusEvent) => {\n              if (e.relatedTarget && e.relatedTarget instanceof HTMLElement) {\n                previouslyFocusedElementRef.current = e.relatedTarget;\n              }\n            },\n          })}\n          ref={ref}\n        >\n          {children}\n          {!noArrow && <ArrowIcon icon=\"general/dropdown.svg\" />}\n        </ActionButton>\n      )}\n    </MenuTrigger>\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport React, { useContext } from \"react\";\nimport { StyledActionButton } from \"../ActionButton/ActionButton\";\nimport { styled } from \"../styled\";\nimport {\n  StyledHorizontalSeparator,\n  StyledVerticalSeparator,\n} from \"../StyledSeparator\";\n\ninterface ActionToolbarProps {\n  orientation?: \"vertical\" | \"horizontal\";\n  /**\n   * Whether to include a border to the bottom/right the toolbar, or not.\n   */\n  hasBorder?: boolean;\n}\nconst StyledActionToolbar = styled.div`\n  display: flex;\n`;\n\nconst getBorder = ({\n  theme,\n  hasBorder,\n}: {\n  theme: Theme;\n  hasBorder?: boolean;\n}) =>\n  hasBorder\n    ? `1px solid ${theme.color(\n        \"Borders.color\",\n        theme.dark ? \"rgb(50,50,50)\" : \"rgb(192, 192, 192)\"\n      )}`\n    : \"none\";\nconst StyledHorizontalActionToolbar = styled(StyledActionToolbar)<{\n  hasBorder?: boolean;\n}>`\n  padding: 2px;\n  border-bottom: ${getBorder};\n  ${StyledHorizontalSeparator} {\n    margin: 1px 2px;\n  }\n  // NOTE: in the original implementation, there is no empty space between buttons, but buttons have kind of an\n  // invisible left padding, which is mouse-intractable, but doesn't visually seem a part of the button.\n  // Although implementable, it didn't seem necessary to follow the exact same thing. Margin should be fine.\n  ${StyledActionButton} {\n    margin: 0 2px 0 2px;\n  }\n`;\n\nconst StyledVerticalActionToolbar = styled(StyledActionToolbar)<{\n  hasBorder?: boolean;\n}>`\n  flex-direction: column;\n  padding: 0 2px;\n  border-right: ${getBorder};\n\n  ${StyledVerticalSeparator} {\n    margin: 4px 1px;\n  }\n  ${StyledActionButton} {\n    margin: 2px 0 1px 0;\n  }\n`;\n\n// This can be used in other places if use-cases are raised for keeping orientation in the context.\nconst OrientationContext = React.createContext<\"horizontal\" | \"vertical\">(\n  \"horizontal\"\n);\n\n/**\n * Remaining features:\n * - overflow behaviour:\n *   - wrap. like main action toolbar.\n *   - hidden, shown by arrow. Similar to actions in Git->Log. Note that the behaviour for horizontal and vertical\n *     modes are different apparently.\n */\nexport const ActionToolbar: React.FC<ActionToolbarProps> = ({\n  orientation = \"horizontal\",\n  hasBorder = false,\n  children,\n}): React.ReactElement => {\n  return (\n    <OrientationContext.Provider value={orientation}>\n      {orientation === \"horizontal\" ? (\n        <StyledHorizontalActionToolbar hasBorder={hasBorder}>\n          {children}\n        </StyledHorizontalActionToolbar>\n      ) : (\n        <StyledVerticalActionToolbar hasBorder={hasBorder}>\n          {children}\n        </StyledVerticalActionToolbar>\n      )}\n    </OrientationContext.Provider>\n  );\n};\n\n/**\n * Separator to be used between action buttons in an action toolbar.\n */\nexport const ActionToolbarSeparator = (): React.ReactElement => {\n  const orientation = useContext(OrientationContext);\n  return orientation === \"horizontal\" ? (\n    <StyledHorizontalSeparator />\n  ) : (\n    <StyledVerticalSeparator />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledHoverContainer } from \"@intellij-platform/core/Icon\";\n\nconst CORNER_RADIUS = 12; // it used to be 8. After introduction of Notifications tool window, it's 12\n\nconst bgColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Notification.background\",\n    !theme.dark ? \"rgb(242,242,242)\" : \"#4E5052\"\n  );\n\nexport const StyledHeaderActions = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  background: inherit;\n  padding: 0.375rem 0.5rem 0;\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: 100%;\n    background: linear-gradient(90deg, transparent, ${bgColor});\n    width: 20px;\n    height: 100%;\n    z-index: 1;\n    top: 0;\n  }\n`;\n\nexport const StyledBalloonContainer = styled.div`\n  line-height: 1.2;\n  box-sizing: border-box;\n  overflow: hidden; // header actions overflows a little at the top right rounded corner\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); // shadow doesn't seem to be themed\n  padding: 0.5rem 0;\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"Notification.borderColor\",\n        !theme.dark ? \"#B2B2B2CD\" : \"#565A5CCD\"\n      )};\n  border-radius: ${({ theme }) =>\n    `${\n      (theme.value<number>(\n        \"Notification.arc\" as UnknownThemeProp<\"Notification.arc\">\n      ) ?? CORNER_RADIUS) / 2\n    }px`};\n  //display: inline-flex;\n  width: 23.3125rem;\n  position: relative;\n  background-color: ${bgColor};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Notification.foreground\",\n      !theme.dark ? \"#000\" : \"rgb(191,191,191)\"\n    )};\n\n  ${StyledHeaderActions} {\n    display: none;\n  }\n  &:hover ${StyledHeaderActions} {\n    display: initial;\n  }\n`;\n\nexport const StyledIconContainer = styled.span`\n  position: absolute;\n  left: 0.75rem;\n  top: 0.5rem;\n`;\n\nexport const StyledBalloonHeader = styled.div`\n  line-height: 1rem;\n  font-weight: bold;\n  margin: 0 2.125rem 0.25rem;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; // this is not the case in original impl, but it's a clear improvement\n`;\n\nexport const StyledBalloonBody = styled.div<{\n  lineClamp: number | false;\n}>`\n  margin: 0 2.125rem 0 2.125rem;\n  line-height: 1rem;\n  display: inline;\n  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};\n  word-break: ${({ lineClamp }) => lineClamp === 1 && \"break-all\"};\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nexport const StyledBalloonFooter = styled.div`\n  margin: 0.375rem 1.875rem 0 2.125rem;\n  display: inline-flex;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 1rem;\n\n  // could be -webkit-fill-available too, if it has good support. Probably it doesn't tho\n  max-width: calc(100% - 3.5rem);\n`;\n\nexport const StyledToggleIconContainer = styled.span`\n  display: inline-flex;\n  position: absolute;\n  right: 0.5rem;\n  bottom: 0;\n  background-color: ${bgColor};\n  padding-left: 0.5rem;\n`;\n\nexport const StyledToggleExpandButtonContainer = styled(StyledHoverContainer)`\n  display: block;\n  position: relative; // for icon absolute positioning\n  cursor: pointer;\n  flex: 1;\n`;\n\nexport const StyledToggleExpandButtonFooterContainer = styled(\n  StyledToggleExpandButtonContainer\n)`\n  min-height: 1.5rem;\n  margin: -0.5rem 0;\n  position: relative;\n  z-index: 1;\n  ${StyledToggleIconContainer} {\n    bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter} {\n    margin-top: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter}:hover + * .icon[data-hover] {\n    display: none;\n  }\n  ${StyledBalloonFooter}:hover + * .icon {\n    display: unset;\n  }\n`;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { IconProps } from \"@intellij-platform/core/Icon/IconProps\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  StyledBalloonBody,\n  StyledBalloonContainer,\n  StyledBalloonFooter,\n  StyledBalloonHeader,\n  StyledHeaderActions,\n  StyledIconContainer,\n  StyledToggleExpandButtonContainer,\n  StyledToggleExpandButtonFooterContainer,\n  StyledToggleIconContainer,\n} from \"@intellij-platform/core/Balloon/Balloon.styled\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { Link } from \"@intellij-platform/core/Link\";\n\nexport type BalloonProps = ControlledStateProps<{ expanded: boolean }> &\n  DOMProps & {\n    /**\n     * Icon rendered in the top left\n     */\n    icon?: \"Info\" | \"Warning\" | \"Error\" | React.ReactElement<IconProps>;\n    /**\n     * Rendered beside close button. Can be used for rendering a \"notification settings\" icon button.\n     */\n    headerActions?: React.ReactNode;\n    /**\n     * Called when the close button is clicked. If not passed, close button will not be rendered.\n     */\n    onClose?: () => void;\n    /**\n     * Actions rendered in the footer.\n     */\n    actions?: React.ReactNode;\n  } & (\n    | {\n        title?: React.ReactNode;\n        body: React.ReactNode;\n      }\n    | {\n        title: React.ReactNode;\n        body?: React.ReactNode;\n      }\n  );\n\ntype BalloonContextObj = {\n  onClose?: () => void;\n};\nconst BalloonContext = React.createContext<BalloonContextObj | null>(null);\n\n/**\n * A tiny wrapper around {@link Link} component, to be used for actions in Balloon.\n * It closes the balloon when pressed.\n */\nexport const BalloonActionLink: typeof Link = React.forwardRef(\n  ({ onPress, ...props }, ref) => {\n    const context = useContext(BalloonContext);\n    if (context === null) {\n      throw new Error(\n        \"BalloonActionLink should only be rendered inside Balloon notifications\"\n      );\n    }\n    return (\n      <Link\n        ref={ref}\n        {...props}\n        onPress={(...args) => {\n          context?.onClose?.();\n          return onPress?.(...args);\n        }}\n      />\n    );\n  }\n);\n/**\n * [Balloon notification](https://jetbrains.github.io/ui/controls/balloon/) UI.\n *\n * Notes and TODO:\n * - Add support for \"error\" variant: https://github.com/JetBrains/intellij-community/blob/48c024fcd38bd8d1eccdada05489a8952a494270/platform/platform-impl/src/com/intellij/diagnostic/IdeMessagePanel.java#L215\n * - Add support for timeout. Although if the auto close behaviour is only timeout-based, maybe there is not much value in adding a prop for it and calling onClose on timeout.\n * - BalloonActions component to be used for rendering a bunch of links in the actions. It should encapsulate the\n *   behaviour of moving actions into a menu when there is not enough room.\n */\nexport const Balloon = ({\n  icon: iconProp = \"Info\",\n  expanded: expandedProp,\n  defaultExpanded = false,\n  onExpandedChange,\n  title,\n  headerActions,\n  onClose,\n  body,\n  actions,\n  ...containerProps\n}: BalloonProps): React.ReactElement => {\n  const bodyRef = useRef<HTMLDivElement>(null);\n  const [expandable, setExpandable] = useState(false);\n  const [expanded, setExpanded] = useControlledState(\n    expandedProp!,\n    defaultExpanded,\n    onExpandedChange!\n  );\n  const maxLinesWhenNotExpanded = 1 + (title ? 0 : 1) + (actions ? 0 : 1);\n\n  useEffect(() => {\n    const bodyElem = bodyRef.current;\n    if (bodyElem) {\n      setExpandable(\n        expanded\n          ? getNumLines(bodyElem) > maxLinesWhenNotExpanded\n          : bodyElem.scrollHeight > bodyElem.clientHeight\n      );\n    } else {\n      setExpandable(false);\n    }\n  }, [expanded]);\n  const validIconTypes = [\"Error\", \"Warning\", \"Info\"] as const;\n  const icon =\n    typeof iconProp === \"string\" ? (\n      <PlatformIcon\n        icon={`general/notification${validIconTypes.find(\n          (iconType, index, arr) =>\n            iconType === iconProp || index === arr.length - 1\n        )}.svg`}\n      />\n    ) : (\n      iconProp\n    );\n  // @ts-expect-error support for callback updater is removed from useControlledState. https://github.com/adobe/react-spectrum/issues/2320\n  const toggle = () => setExpanded((expanded) => !expanded);\n\n  const effectiveExpanded = expanded && Boolean(body);\n\n  return (\n    <BalloonContext.Provider value={{ onClose }}>\n      <StyledBalloonContainer data-testid=\"balloon\" {...containerProps}>\n        <StyledIconContainer>{icon}</StyledIconContainer>\n        {title && <StyledBalloonHeader>{title}</StyledBalloonHeader>}\n        <StyledHeaderActions>\n          {headerActions}\n          {onClose && (\n            <AutoHoverPlatformIcon\n              icon=\"ide/notification/close.svg\"\n              onClick={onClose}\n              role=\"button\"\n              data-testid=\"close-btn\"\n              style={{ marginLeft: \"0.75rem\" }}\n            />\n          )}\n        </StyledHeaderActions>\n        {body && (\n          <ToggleWrapper\n            expanded={effectiveExpanded}\n            enabled={expandable && !effectiveExpanded}\n            onToggle={toggle}\n          >\n            <StyledBalloonBody\n              lineClamp={!effectiveExpanded && maxLinesWhenNotExpanded}\n              ref={bodyRef}\n            >\n              {body}\n            </StyledBalloonBody>\n          </ToggleWrapper>\n        )}\n        <ToggleWrapper\n          expanded={effectiveExpanded}\n          enabled={expandable && effectiveExpanded}\n          onToggle={toggle}\n          Component={StyledToggleExpandButtonFooterContainer}\n        >\n          {actions && (\n            <StyledBalloonFooter onClick={(e) => e.stopPropagation()}>\n              {actions}\n            </StyledBalloonFooter>\n          )}\n        </ToggleWrapper>\n      </StyledBalloonContainer>\n    </BalloonContext.Provider>\n  );\n};\n\n/**\n * If enabled wraps its children in a clickable area (with the expand/collapse arrow),f for toggling expanded state.\n */\nconst ToggleWrapper: React.FC<{\n  enabled: boolean;\n  expanded: boolean;\n  Component?: typeof StyledToggleExpandButtonContainer;\n  onToggle: () => void;\n}> = ({\n  children,\n  onToggle,\n  expanded,\n  enabled,\n  Component = StyledToggleExpandButtonContainer,\n}) => {\n  const iconName = expanded ? \"collapse\" : \"expand\";\n  const toggleIcon = (\n    <StyledToggleIconContainer>\n      <AutoHoverPlatformIcon\n        icon={`ide/notification/${iconName}.svg`}\n        className=\"icon\"\n      />\n    </StyledToggleIconContainer>\n  );\n\n  return enabled ? (\n    <Component\n      onClick={onToggle}\n      role=\"button\"\n      data-testid={`${expanded ? \"collapse\" : \"expand\"}-btn`}\n    >\n      {children}\n      {toggleIcon}\n    </Component>\n  ) : (\n    <>{children}</>\n  );\n};\n\n/**\n * Based on the computed line-height and clientHeight of the element, returns the number of lines of the content.\n */\nfunction getNumLines(bodyElem: Element) {\n  return (\n    bodyElem.clientHeight / parseFloat(getComputedStyle(bodyElem).lineHeight)\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Balloon, BalloonProps } from \"./Balloon\";\nimport { StyledBalloonsStack } from \"./StyledBalloonsStack\";\n\ntype ShowProps = Pick<\n  BalloonProps,\n  \"title\" | \"icon\" | \"body\" | \"actions\" | \"headerActions\"\n>;\n\ninterface BalloonsAPI {\n  /**\n   * Shows a Balloon notification on the bottom left of the screen.\n   * @param props: Props to pass to the Balloon component\n   * @param [autoHideTimeout=10_000] timeout in ms for hiding the balloon notification.\n   * @returns hide function, in case the notification can expire for some reason.\n   */\n  show(props: ShowProps, autoHideTimeout?: number): () => void;\n  showSticky(props: ShowProps): () => void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\"You must render a BalloonsProvider...\");\n};\n\nconst BalloonsContext = React.createContext<BalloonsAPI>({\n  show: NotImplementedFn,\n  showSticky: NotImplementedFn,\n});\n\nexport const useBalloons = (): BalloonsAPI => useContext(BalloonsContext);\n\ntype BalloonElement = ReactElement<BalloonProps, typeof Balloon>;\n\nexport interface BalloonsProviderProps {\n  disablePortal?: boolean;\n  BalloonsContainer?: React.ElementType;\n}\n\n/**\n * Enables imperative API (via {@link useBalloons}) for showing Balloon notifications on the bottom right of the screen.\n * It renders notifications in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n * @param disablePortal: if `true`, the container for notifications will not be rendered in a portal\n * @param BalloonsContainer: container component for the notifications. It's {@link StyledBalloonsStack} by default.\n *\n * TODO: fade in/out transition. Notes:\n *  - Doesn't seem fade-in is needed. Tho it's much easier than fade-out, as it can be achieved with a css animation.\n *  - Fade out should happen only when the balloon is being hidden by timeout.\n * TODO: Support for maximum number of notifications and showing \"x more notification(s)\" button if the limit exceeds\n */\n\nexport const BalloonsProvider: React.FC<BalloonsProviderProps> = ({\n  children,\n  disablePortal,\n  BalloonsContainer = StyledBalloonsStack,\n}) => {\n  const [balloons, setBalloons] = useState<Array<BalloonElement>>([]);\n  const timeoutIdsRef = useRef<number[]>([]);\n  const lastIdRef = useRef<number>(0);\n\n  const api = useMemo<BalloonsAPI>(() => {\n    const show: BalloonsAPI[\"show\"] = (props, timeout = 10_000) => {\n      lastIdRef.current++;\n      const onClose = () => {\n        setBalloons((balloons) =>\n          balloons.filter((aBalloon) => aBalloon !== balloon)\n        );\n      };\n      const balloon = (\n        <Balloon\n          key={lastIdRef.current}\n          {...props}\n          title={props.title} // TS acts unreasonable without this\n          onClose={onClose}\n        />\n      );\n      setBalloons((balloons) => {\n        if (timeout > 0) {\n          const timeoutId = window.setTimeout(() => {\n            onClose();\n            timeoutIdsRef.current = timeoutIdsRef.current.filter(\n              (aTimeoutId) => aTimeoutId !== timeoutId\n            );\n          }, timeout);\n          timeoutIdsRef.current = [...timeoutIdsRef.current, timeoutId];\n        }\n        return balloons.concat(balloon);\n      });\n      return onClose;\n    };\n    return {\n      show,\n      showSticky: (props) => show(props, 0),\n    };\n  }, []);\n\n  // clear timeouts when unmounted\n  useEffect(() => {\n    return () => {\n      timeoutIdsRef.current.forEach((id) => {\n        window.clearTimeout(id);\n      });\n    };\n  }, []);\n\n  const notificationsStack = (\n    <BalloonsContainer\n      style={{ position: disablePortal ? \"absolute\" : undefined }}\n    >\n      {balloons}\n    </BalloonsContainer>\n  );\n\n  return (\n    <BalloonsContext.Provider value={api}>\n      {children}\n      {disablePortal\n        ? notificationsStack\n        : ReactDOM.createPortal(notificationsStack, document.body)}\n    </BalloonsContext.Provider>\n  );\n};\n","import styled from \"styled-components\";\nimport { StyledBalloonContainer } from \"@intellij-platform/core/Balloon/Balloon.styled\";\n\n/**\n * Container component for stacking a number of Balloons in an overlay placed on the bottom right of where it's rendered.\n */\nexport const StyledBalloonsStack = styled.div`\n  position: fixed;\n  z-index: 1;\n  bottom: 42px;\n  right: 26px;\n  ${StyledBalloonContainer} {\n    margin-bottom: 12px;\n  }\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0.25rem 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  StyledButton,\n  StyledDefaultButton,\n  StyledIconButton,\n} from \"@intellij-platform/core/Button/StyledButton\";\n\ntype ButtonVariant = \"default\" | \"icon\";\nexport interface ButtonProps extends AriaButtonProps {\n  variant?: ButtonVariant; // can allow for custom (styled) component too if needed.\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n}\n\nconst variants: { [key in ButtonVariant]: typeof StyledButton } = {\n  default: StyledDefaultButton,\n  icon: StyledIconButton,\n};\n\n/**\n * https://jetbrains.github.io/ui/controls/button/\n *\n * TODO:\n * - Support for \"default\" button behaviour. it's kind of similar to a <button type=\"submit\" /> in html, but textarea\n * behaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\n * Cmd+Enter should always trigger onPress. Plus, maybe it should work independent of \"form\" being used? or maybe it's\n * not a big deal to expect an ancestor \"form\" element, when variant is \"default\"?\n * - Support for mnemonic\n * - \"Default\" style differences in Windows.\n * - Gradient colors (low hanging fruit, but negligible added value).\n *\n * Known issues:\n * - In the original impl, default button looks the same as normal button, when focus is not within the same area that\n * the button is. For example in the commit tool window, \"Commit\" button which is default, is not blue, unless the\n * \"Commit\" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n * \"default\" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\n * DefaultToolWindow is used. But we need to see if the same requirement exists in various places.\n * NOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\n * which enables \"default\" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n * - In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\n * behaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.\n *\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef(function Button(\n  { variant, ...props }: ButtonProps,\n  ref: ForwardedRef<HTMLElement>\n) {\n  const { buttonProps } = useButton(props, useObjectRef(ref));\n  const domProps = filterDOMProps(props);\n  const { autoFocus } = props;\n\n  const Component = (variant && variants[variant]) || StyledButton;\n  return (\n    <Component {...mergeProps(domProps, buttonProps, { autoFocus })}>\n      {props.children}\n    </Component>\n  );\n});\n","import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { VisuallyHidden } from \"@react-aria/visually-hidden\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with ActionButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n}\n\nconst StyledWrapperLabel = styled.label`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  isDisabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, isDisabled }) =>\n    isDisabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n  const { pressProps: wrapperPressProps, isPressed } = usePress({});\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel {...mergeProps(wrapperPressProps, { className })}>\n      <VisuallyHidden>\n        <input\n          {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n          ref={ref}\n        />\n      </VisuallyHidden>\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={\n          disableFocusAlwaysVisible\n            ? isFocusVisible\n            : (!preventFocus && isPressed) || isFocused\n        }\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText isDisabled={props.isDisabled}>\n          {props.children}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import React, { ComponentProps } from \"react\";\nimport { LafIcon } from \"@intellij-platform/core/Icon\";\n\n/**\n * Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\n * with the interactions\n */\nexport const CheckboxIcon = ({\n  isDisabled,\n  isFocused,\n  isIndeterminate,\n  isSelected,\n  ...otherProps\n}: Omit<ComponentProps<typeof LafIcon>, \"size\" | \"icon\"> & {\n  isIndeterminate: boolean | undefined;\n  isFocused: boolean;\n  isDisabled: boolean | undefined;\n  isSelected: boolean;\n}) => {\n  return (\n    <LafIcon\n      {...otherProps}\n      size={20}\n      icon={{\n        name: isIndeterminate ? \"checkBoxIndeterminate\" : \"checkBox\",\n        modifiers: {\n          Disabled: isDisabled,\n          Selected: isSelected || isIndeterminate,\n          Focused: isFocused,\n        },\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { CollectionSpeedSearchMatches } from \"@intellij-platform/core/CollectionSpeedSearch/useCollectionSpeedSearchResult\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext = React.createContext<CollectionSpeedSearchContextValue | null>(\n  null\n);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext = React.createContext<null | CollectionSpeedSearchItemContextValue>(\n  null\n);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{ itemKey: Key }> = ({\n  children,\n  itemKey,\n}) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue;\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function ({\n  Component = \"span\",\n}: {\n  /**\n   * When rendering in a flex parent (which is the case for tree or list), rendering a container is necessary to have\n   * the right spacing around highlights, when the highlighter span is immediately followed or proceeded by a white\n   * space. By default, a \"span\" is rendered.\n   */\n  Component?: React.ElementType;\n}) {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return (\n    <Component>\n      {highlightedRanges ? (\n        <TextWithHighlights highlights={highlightedRanges}>\n          {text}\n        </TextWithHighlights>\n      ) : (\n        text\n      )}\n    </Component>\n  );\n};\n","import { Key } from \"react\";\nimport { SelectionManager } from \"@intellij-platform/core/selection\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { useCollectionSpeedSearchResult } from \"./useCollectionSpeedSearchResult\";\nimport { useMemo } from \"react\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  stickySearch,\n  keyboardDelegate,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  stickySearch?: boolean;\n} & SpeedSearchStateProps) {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps); // maybe allow control over state\n  // via props?\n\n  const {\n    matches,\n    selectionManager: speedSearchSelectionManager,\n  } = useCollectionSpeedSearchResult({\n    collection,\n    selectionManager,\n    speedSearch,\n  });\n  const { containerProps } = useSpeedSearch({ stickySearch }, speedSearch);\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager,\n  speedSearch,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const result = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key))\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n      selectionManager: createSpeedSearchSelectionManager(\n        selectionManager,\n        active ? matches : null\n      ),\n    };\n  }, [searchTerm, collection, active]);\n\n  const latestValues = useLatest({ ...result, collection });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n\n    if (matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      const newSelectedKey = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n\n      selectionManager.setFocusedKey(newSelectedKey);\n      selectionManager.replaceSelection(newSelectedKey);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return result;\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key: React.Key): React.Key | undefined => {\n        let keyBelow = wrappedKeyboardDelegate.getKeyBelow?.(key);\n        while (keyBelow != null) {\n          if (!matches || matches.has(keyBelow)) {\n            return keyBelow;\n          }\n          keyBelow = wrappedKeyboardDelegate.getKeyBelow?.(keyBelow);\n        }\n        return keyBelow;\n      },\n    },\n    getKeyAbove: {\n      value: (key: React.Key): React.Key | undefined => {\n        let keyAfter = wrappedKeyboardDelegate.getKeyAbove?.(key);\n        while (keyAfter != null) {\n          if (!matches || matches.has(keyAfter)) {\n            return keyAfter;\n          }\n          keyAfter = wrappedKeyboardDelegate.getKeyAbove?.(keyAfter);\n        }\n        return keyAfter;\n      },\n    },\n  });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n}\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return (null as any) as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<\n    PartialNode<T>\n  > = (StatelyItem as any).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { styled } from \"../styled\";\nimport { SelectionAwareSpan } from \"@intellij-platform/core/Collections/SelectionAwareSpan\";\n\nconst StyledItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 0.25rem;\n  gap: 0.2rem;\n`;\n\nconst StyledHint = styled(SelectionAwareSpan)`\n  display: inline-flex;\n  color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  padding-left: 0.1rem;\n`;\n\n/**\n * Generic layout component capturing common use cases of tree or list items.\n * It handles the spacing between parts, and provides styled components for parts that need specific styling.\n * For more flexibility over the order of various pieces of content in list/tree items, there is no specific props\n * for parts. Different parts should just be rendered in children.\n *\n * @example\n * ```tsx\n * <ItemLayout>\n *   <PlatformIcon icon=\"nodes/folder\" />\n *   <HighlightedTextValue />\n *   <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n * </ItemLayout>\n * ```\n * @beta\n */\nexport const ItemLayout = ({ children }: { children: React.ReactNode }) => {\n  return <StyledItemLayout>{children}</StyledItemLayout>;\n};\n\n/**\n * A more subtle text usually rendered next to the main text in the item.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Hint = StyledHint;\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext = React.createContext<ItemStateContextType | null>(\n  null\n);\n","import React, { useContext } from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\n\n/**\n * Overrides color to a legible one, if the tree/list item (in which this span is rendered) is selected.\n * Can be used as base of styled components for specific item parts in lists and tree with a custom color.\n * @alpha\n */\nexport const SelectionAwareSpan: React.FC<{ className?: string }> = ({\n  children,\n  className,\n}) => {\n  const { isSelected, isFocused } = useContext(ItemStateContext) || {\n    isSelected: false,\n    isFocused: false,\n  };\n  return (\n    <span\n      className={className}\n      style={{ color: isSelected && isFocused ? \"inherit\" : undefined }}\n    >\n      {children}\n    </span>\n  );\n};\n","import { RefObject, useEffect } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { ForwardedRef } from \"react\";\nimport { amendName, PlatformIcon, PlatformIconProps } from \"./PlatformIcon\";\n\nexport const StyledHoverContainer = styled.span`\n  .icon[data-hover] {\n    display: none;\n  }\n  &:hover {\n    .icon {\n      display: none;\n    }\n    .icon[data-hover] {\n      display: inline-flex;\n    }\n  }\n`;\n\nconst StyledIconHoverContainer = styled(StyledHoverContainer)`\n  display: inline-flex;\n`;\n\n/**\n * A common use case for PlatformIcons is to have a default icon and a hover icon.\n * This component captures that simple use case, by rendering both icons, and hiding one based on a hover selector.\n * If the hover-able element is a parent of the icon, and not the icon itself, one can use `StyledHoverContainer`,\n * for that parent element:\n * const SomeParent = styled(StyledHoverContainer)`...`;\n * <SomeParent><AutoHoverPlatformIcon icon=\"...\" /></SomeParent>\n *\n * Now the hover icon is shown when the parent is hovered, instead of the icon itself.\n *\n */\nexport const AutoHoverPlatformIcon = React.forwardRef(\n  function AutoHoverPlatformIcon(\n    {\n      hoverIcon,\n      ...props\n    }: PlatformIconProps & {\n      /**\n       * The icon to be used when hovered. If not provided, it will be the \"somethingHovered\" where \"something\" is the `icon`\n       */\n      hoverIcon?: string;\n    },\n    ref: ForwardedRef<HTMLSpanElement>\n  ) {\n    const className = `icon ${props.className || \"\"}`;\n    return (\n      <StyledIconHoverContainer ref={ref}>\n        <PlatformIcon {...props} className={className} />\n        <PlatformIcon\n          {...props}\n          className={className}\n          icon={hoverIcon ?? amendName(props.icon, \"Hover\")}\n          data-hover\n        />\n      </StyledIconHoverContainer>\n    );\n  }\n);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = ([\n    \"Editable\",\n    \"Selected\",\n    \"Pressed\",\n    \"Focused\",\n    \"Disabled\",\n  ] as Array<keyof typeof modifiers>).reduce(\n    (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n    \"\"\n  );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  icon: string;\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            // potential SSR issues here?\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = svg;\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n","import React, { ComponentProps } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"./Theme/Theme\";\n\ninterface Props extends ComponentProps<\"img\"> {\n  /**\n   * src for when a dark theme is active. if `darkSrc` doesn't have a non-empty string value, src will be used both\n   * for dark and light themes.\n   */\n  darkSrc?: string;\n}\n/**\n * Same as default `img`, but theme aware. Meaning that you can specify different sources for normal and dark mode.\n */\nexport const Img: React.FC<Props> = ({ darkSrc, ...props }) => {\n  const theme = useTheme() as Theme;\n  if (theme.dark) {\n    return <img {...props} src={darkSrc || props.src} />;\n  }\n  return <img {...props} />;\n};\n","import { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst getDefaultLinkColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Link.activeForeground\",\n    theme.color(\n      \"link.foreground\" as UnknownThemeProp<\"link.foreground\">,\n      \"#589DF6\"\n    )\n  );\n\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n  outline: none;\n  // &:focus-visible didn't work as expected, so FocusRing is used\n  &.focus-visible {\n    outline: 1px solid\n      ${({ theme }) =>\n        theme.color(\n          \"Link.focusedBorderColor\" as UnknownThemeProp<\"Link.focusedBorderColor\">,\n          theme.commonColors.focusBorderColor\n        )};\n    border-radius: 2px; // Registry.intValue(\"ide.link.button.focus.round.arc\", 4)\n  }\n  color: ${getDefaultLinkColor};\n\n  &:hover,\n  &.hover /* for testing purposes*/ {\n    text-decoration: underline;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.hoverForeground\",\n        theme.color(\n          \"link.hover.foreground\" as UnknownThemeProp<\"link.hover.foreground\">,\n          \"\" /*FIXME: check*/\n        )\n      )};\n  }\n  &:active,\n  &.active {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.pressedForeground\",\n        theme.color(\n          \"link.pressed.foreground\" as UnknownThemeProp<\"link.pressed.foreground\">,\n          !theme.dark ? \"#F00000\" : \"#BA6F25\"\n        )\n      )};\n  }\n  &:disabled,\n  &.disabled {\n    cursor: default;\n    text-decoration: none;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.disabledForeground\" as UnknownThemeProp<\"Link.disabledForeground\">,\n        theme.color(\n          \"Label.disabledForeground\" as UnknownThemeProp<\"Label.disabledForeground\">,\n          theme.color(\"Label.disabledText\", \"#999\")\n        )\n      )};\n  }\n  // We may need to refine this to allow passing visited as a prop for links that don't have href, and not apply the\n  // styles in that case, since it seems no href is considered visited by default. Although, in all main themes\n  // Link.visitedForeground is set to the default link color.\n  &:visited,\n  &.visited {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.visitedForeground\",\n        theme.color(\n          \"link.visited.foreground\" as UnknownThemeProp<\"link.visited.foreground\">,\n          !theme.dark ? \"#800080\" : \"#9776A9\"\n        )\n      )};\n  }\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { AriaLinkProps } from \"@react-types/link\";\nimport { useLink } from \"@react-aria/link\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { FocusRing } from \"@react-aria/focus\";\nimport { StyledLink } from \"@intellij-platform/core/Link/StyledLink\";\n\nexport type LinkProps = AriaLinkProps & {\n  isDisabled?: boolean;\n  className?: string;\n  children: React.ReactNode;\n};\n\n/**\n * A focusable span in style of [Link](https://jetbrains.github.io/ui/controls/link/) and with accessibility role of link.\n *\n * TODO and known issues:\n * - in the reference impl, Space presses the link, Enter doesn't. It's vice versa here, because of how usePress is implemented.\n * - Support for External links\n * - Support for Anchor elements?\n *\n * Unknowns:\n * - What are ActionLink and DefaultLinkButtonUI?\n * - What is HyperLinkLabel compared to LabelLink (which was looked into in implementation of this component)?\n */\nexport const Link = React.forwardRef(\n  (\n    props: LinkProps,\n    forwardedRef: ForwardedRef<HTMLAnchorElement>\n  ): React.ReactElement => {\n    const ref = useForwardedRef(forwardedRef);\n    const { linkProps, isPressed } = useLink(\n      { ...props, elementType: \"span\" },\n      ref\n    );\n    return (\n      <FocusRing focusRingClass=\"focus-visible\">\n        <StyledLink\n          {...linkProps}\n          as=\"span\"\n          ref={ref}\n          // maybe use clsx\n          className={`${props.isDisabled ? \"disabled\" : \"\"} ${\n            isPressed ? \"active\" : \"\"\n          } ${props.className || \"\"}`}\n        >\n          {props.children}\n        </StyledLink>\n      </FocusRing>\n    );\n  }\n);\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable } from \"@react-types/shared\";\nimport React, { Key, useRef } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { listItemRenderer } from \"./listItemRenderer\";\nimport { useListState } from \"./useListState\";\n\nexport type ListProps<T extends object> = Omit<\n  AriaListBoxProps<T>,\n  keyof AsyncLoadable\n> & {\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n  /**\n   * By default, if list is not focused, it shows a different style on the selected item,\n   * which acts as a visual clue for list's focus state. This behaviour can be suppressed by setting\n   * `alwaysShowAsFocused` to `true`. One use case is in master-detail views where you don't\n   * want the list to appear as blurred, when interacting with the details view of the selected\n   * list item. Note that in such use cases, there won't be any visual clue to distinguish focused\n   * state of the link, which is not great from UX perspective, but it's kept like this to match\n   * Jetbrains UI behaviour.\n   */\n  alwaysShowAsFocused?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n};\n\n/**\n * List view with speedSearch instead of default typeahead.\n * TODO:\n *  - Support virtualization\n *  - Support custom rendering\n *  -\n */\nexport function List<T extends object>({\n  disallowEmptySelection = true,\n  alwaysShowAsFocused = false,\n  fillAvailableSpace = false,\n  onAction,\n  ...inputProps\n}: ListProps<T>) {\n  const props = { ...inputProps, disallowEmptySelection };\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useListState(props);\n  const { listProps, focused } = useList(props, state, ref);\n\n  return (\n    <StyledList\n      fillAvailableSpace={fillAvailableSpace}\n      {...listProps}\n      ref={ref}\n    >\n      {[...state.collection].map(\n        listItemRenderer({\n          item: (item) => (\n            <ListItem\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={() => onAction?.(item.key)}\n              listFocused={alwaysShowAsFocused || focused}\n            />\n          ),\n        })\n      )}\n    </StyledList>\n  );\n}\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ orientation: \"vertical\" })}\n    />\n  );\n};\n","import { Node } from \"@react-types/shared\";\nimport { ListState } from \"@react-stately/list\";\nimport React from \"react\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { StyledListItem } from \"./StyledListItem\";\nimport { ItemStateContext } from \"@intellij-platform/core\";\n\nexport interface ListItemProps<T> {\n  listFocused: boolean;\n  item: Node<T>;\n  state: ListState<T>;\n  onAction: () => void;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({\n  listFocused,\n  item,\n  state,\n  onAction,\n  children,\n}: ListItemProps<T>) {\n  const ref = React.useRef(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isSelected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction,\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={isSelected}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      aria-selected={isSelected}\n      {...pressProps}\n      ref={ref}\n    >\n      <ItemStateContext.Provider\n        value={{\n          isDisabled,\n          isSelected,\n          isFocused: listFocused,\n          node: item,\n        }}\n      >\n        {children || item.rendered}\n      </ItemStateContext.Provider>\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\nexport const StyledList = styled.ul<{ fillAvailableSpace?: boolean }>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { styled } from \"../styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.li<StyledListItemProps>(\n  ({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"List.foreground\" as UnknownThemeProp<\"List.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color =\n          theme.color(\n            \"List.selectionForeground\" as UnknownThemeProp<\"List.selectionForeground\">\n          ) ||\n          theme.commonColors\n            .labelSelectedForeground /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"List.selectionBackground\" as UnknownThemeProp<\"List.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"List.selectionInactiveForeground\" as UnknownThemeProp<\"List.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"List.selectionBackgroundInactive\" as UnknownThemeProp<\"List.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n      position: \"relative\",\n      display: \"flex\",\n      whiteSpace: \"nowrap\",\n      paddingLeft: 8, // themed?\n      lineHeight: \"20px\",\n      outline: \"none\",\n      cursor: \"default\",\n      minWidth: \"min-content\", // ?\n    };\n  }\n);\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.li(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { Node } from \"@react-types/shared\";\nimport React from \"react\";\nimport { StyledListSectionHeader } from \"./StyledListSectionHeader\";\nimport { ListDivider } from \"./ListDivider\";\n\ninterface SectionNode<T> extends Node<T> {\n  type: \"section\";\n}\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\n\ninterface DividerNode<T> extends Node<T> {\n  type: \"divider\";\n}\n\nconst isItemNode = <T extends any>(node: Node<T>): node is ItemNode<T> =>\n  node.type === \"item\";\nconst isSectionNode = <T extends any>(node: Node<T>): node is SectionNode<T> =>\n  node.type === \"section\";\nconst isDividerNode = <T extends any>(node: Node<T>): node is DividerNode<T> =>\n  node.type === \"divider\";\n\ntype listItemRendererArgs<T extends any> = {\n  item: (item: ItemNode<T>) => React.ReactNode;\n  sectionHeader?: (item: SectionNode<T>) => React.ReactNode;\n};\nexport const listItemRenderer = <T extends any>({\n  item: renderItem,\n  sectionHeader: renderSectionHeader = (item) => (\n    <StyledListSectionHeader>{item.rendered}</StyledListSectionHeader>\n  ),\n}: listItemRendererArgs<T>) => {\n  return render;\n\n  function render(item: Node<T>): React.ReactNode {\n    if (isItemNode(item)) {\n      return renderItem(item);\n    }\n    if (isSectionNode(item)) {\n      return (\n        <React.Fragment key={item.key}>\n          {renderSectionHeader(item)}\n          {[...(item.childNodes as ItemNode<T>[])].map(render)}\n        </React.Fragment>\n      );\n    }\n    if (isDividerNode(item)) {\n      return <ListDivider key={item.key} />;\n    }\n    return null;\n  }\n};\n","import { SelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nexport interface ListProps\n  extends Omit<\n    SelectableListOptions,\n    | \"selectOnFocus\"\n    | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n    | \"collection\" // Grouped as state, the second argument, like in useListBox\n    | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n    | \"ref\" // Third argument\n  > {\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  props: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is gonna be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and disallowEmptySelection is true.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      props.disallowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.select(firstKey);\n    }\n  }, [props.disallowEmptySelection]);\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  KeyboardDelegate,\n  Node,\n} from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  MultipleSelectionManager,\n  SelectionManager,\n} from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { useCollectionAutoScroll } from \"@intellij-platform/core/Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport { replaceSelectionManager } from \"@intellij-platform/core/selection\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T>\n): ListState<T> {\n  return replaceSelectionManager(\n    originalUseListState({ ...props, selectionBehavior: \"replace\" })\n  );\n}\n","import React, { HTMLProps } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayTriggerProps } from \"@react-types/overlays\";\n\nimport { useContextMenu } from \"./useContextMenu\";\nimport { MenuOverlay } from \"./MenuOverlay\";\n\ninterface ContextMenuContainerProps extends HTMLProps<HTMLDivElement> {\n  /**\n   * Will be called to return the Menu when context menu is triggered. Use {@link Menu} component to render a menu.\n   */\n  renderMenu: () => React.ReactNode;\n}\n\n/**\n * A generic container for context menu. It's the same as a normal div, only with an additional `renderMenu` prop,\n * to be used to render context menu, when it's triggered.\n * Closes the menu when a menu action is triggered.\n */\nexport const ContextMenuContainer = ({\n  children,\n  renderMenu,\n  ...props\n}: ContextMenuContainerProps) => {\n  const state = useMenuTriggerState({} as OverlayTriggerProps);\n\n  const { overlayProps, containerProps, overlayRef } = useContextMenu(\n    {},\n    state\n  );\n\n  return (\n    <div {...mergeProps(props, containerProps)}>\n      {children}\n      <MenuOverlay\n        state={state}\n        overlayRef={overlayRef}\n        overlayProps={overlayProps}\n        restoreFocus\n      >\n        {renderMenu()}\n      </MenuOverlay>\n    </div>\n  );\n};\n","import { isMac } from \"@react-aria/utils\";\nimport { css } from \"styled-components\";\nimport { MAC_WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { Theme, UnknownThemeProp } from \"../Theme/Theme\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\nexport const StyledMenu = styled.ul`\n  font-size: 0.87rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 100px;\n  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) => theme.color(\"Menu.borderColor\")};\n  ${isMac() &&\n  css<{ theme: Theme }>`\n    ${MAC_WINDOW_SHADOW};\n    border-color: ${({ theme }) =>\n      theme.dark ? \"rgba(0, 0, 0, 0.15)\" : undefined};\n  `}\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n`;\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n  color: ${({ isActive, isDisabled, theme }) => {\n    if (isDisabled) {\n      return theme.color(\"MenuItem.disabledForeground\");\n    }\n    if (isActive) {\n      return theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      );\n    }\n    return theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    );\n  }};\n  ${({ isActive, theme }) =>\n    isActive &&\n    css`\n      background: ${theme.color(\n        \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n      )};\n      color: ${undefined};\n    `}\n  // would be nice to have a visual clue for focus visible state, but it's not like that in intellij platform\n  //border-left: 3px solid transparent;\n  //&:focus-visible {\n  //  border-left: 3px solid rgba(255, 255, 255, 0.1);\n  //}\n  padding: 0 20px 0 27px;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { Key } from \"react\";\nimport { useHover, useKeyboard } from \"@react-aria/interactions\";\nimport { useMenuItem } from \"@react-aria/menu\";\nimport { OverlayContainer, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { Item } from \"@react-stately/collections\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { Menu } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport { StyledMenuItem } from \"./StyledMenuItem\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onAction?: (key: Key) => void;\n  onSubmenuClose?: () => void;\n  expandOn?: \"hover\" | \"press\";\n}\n\nconst StyledNestedArrow = styled.span`\n  margin-right: -11px;\n  margin-left: 11px;\n  display: inline-flex; // to make it not take more height than the icon\n`;\n\nconst StyledSelectedMark = styled.span`\n  position: absolute;\n  left: 4px;\n  top: 50%;\n  transform: translateY(-50%);\n  display: inline-flex; // to make it not take more height than the icon\n`;\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nexport function MenuItem<T>({\n  item,\n  state,\n  onAction,\n  expandOn,\n}: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n\n  const { menuItemProps } = useMenuItem(\n    {\n      key: item.key,\n      isDisabled,\n      onAction: !item.hasChildNodes ? onAction : undefined,\n    },\n    state,\n    ref\n  );\n\n  const maybeOpenSubmenu = () => {\n    // Not the best way to clear expandedKeys, but current implementation of tree state only allows toggling keys\n    state.expandedKeys.forEach((key) => {\n      state.toggleKey(key);\n    });\n    if (item.hasChildNodes) {\n      state.toggleKey(item.key);\n    }\n  };\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled || expandOn !== \"hover\",\n    onHoverStart: () => {\n      maybeOpenSubmenu();\n    },\n  });\n\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if ([\"ArrowRight\", \"Enter\", \" \"].includes(e.key)) {\n        maybeOpenSubmenu();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose: () => {\n      console.log(\"on close\");\n    },\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const { subMenuProps } = useSubmenu({\n    onClose: () => {\n      state.toggleKey(item.key);\n      // setting focus with selection manager didn't work. Perhaps because of patchy implementation of nested menus\n      ref.current?.focus();\n    },\n  });\n\n  return (\n    <>\n      <StyledMenuItem\n        {...mergeProps(menuItemProps, hoverProps, keyboardProps)}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledSelectedMark>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledSelectedMark>\n        )}\n        <ItemStateContext.Provider\n          value={{ isDisabled, isFocused, isSelected, node: item }}\n        >\n          {typeof item.rendered === \"string\" ? (\n            <StyledMenuItemText>{item.rendered}</StyledMenuItemText>\n          ) : (\n            item.rendered\n          )}\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using OverlayContainer and FocusScope here:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         * So we need to render in a portal and that's done by OverlayContainer. We also need to render a FocusScope,\n         * because now that we are rendering in a portal, we are dom-wise outside the focus scope of the menu in\n         * MenuTrigger (or any other implementation that renders menu in an overlay with a focus scope), and therefore\n         * the autofocus behaviour for the nested menu doesn't work. That's because FocusScope works based on dom\n         * tree, not react tree. Although it's not clear why this problem persists while `contain` is not set on the\n         * FocusScope in MenuTrigger.\n         * So we need focus scope. Rendering a FocusScope here messes with the `restoreFocus` behaviour of the one\n         * in MenuTrigger, and that's why `forceRestoreFocus` is introduced in the locally implemented FocusScope.\n         * In a nutshell:\n         * Positioning -> need for OverlayContainer\n         * using OverlayContainer -> need for FocusScope\n         * FocusScope -> problem in focus restoration in MenuTrigger -> forceRestoreFocus as a patchy solution.\n         */\n        <OverlayContainer>\n          <FocusScope>\n            <div\n              ref={nestedMenuRef}\n              {...mergeProps(positionProps, subMenuProps)}\n            >\n              <Menu\n                aria-label={item[\"aria-label\"] || item.textValue}\n                items={item.childNodes}\n                disabledKeys={state.disabledKeys}\n                selectedKeys={state.selectionManager.selectedKeys}\n                onAction={onAction}\n                autoFocus\n              >\n                {(childItem) => {\n                  // FIXME: This is not complete and doesn't support section and divider\n                  return (\n                    <Item\n                      childItems={childItem.childNodes}\n                      hasChildItems={childItem.hasChildNodes}\n                      textValue={childItem.textValue}\n                    >\n                      {childItem.rendered}\n                    </Item>\n                  );\n                }}\n              </Menu>\n            </div>\n          </FocusScope>\n        </OverlayContainer>\n      )}\n    </>\n  );\n}\n\nconst useSubmenu = ({ onClose }: { onClose: () => void }) => {\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (e.key === \"ArrowLeft\" || e.key === \"Escape\") {\n        onClose();\n      } else if (![\"ArrowUp\", \"ArrowDown\"].includes(e.key)) {\n        e.continuePropagation();\n      }\n    },\n  });\n  return { subMenuProps: keyboardProps };\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { Key } from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { MenuItem } from \"@intellij-platform/core/Menu/MenuItem\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onAction?: (key: Key) => void;\n  expandOn?: \"hover\" | \"press\";\n}\n\nconst StyledMenuHeading = styled.li`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  onAction,\n  expandOn,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {[...item.childNodes].map((node) => {\n            return (\n              <MenuItem\n                key={node.key}\n                item={node}\n                state={state}\n                onAction={onAction}\n                expandOn={expandOn}\n              />\n            );\n          })}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import { useMenu } from \"@react-aria/menu\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport React, { Key, useContext, useEffect } from \"react\";\nimport { ListDivider } from \"../List/ListDivider\";\nimport { useTreeState } from \"../Tree/__tmp__useTreeState\";\nimport { MenuItem } from \"./MenuItem\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { MenuSection } from \"@intellij-platform/core/Menu/MenuSection\";\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key;\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   * if `expandOn` is \"focus\", or clicking on the menu item (when `expandOn` is \"press\").\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void;\n  defaultExpandedKey?: Key;\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n *\n *  TODO:\n *  - [Least important] pass aria props to icon, keyboard shortcut, and content part of menu item. Maybe a context\n *    can be provided for it from menu item, which also exposes state like selected.\n */\nexport function Menu<T extends object>({\n  expandOn = \"hover\",\n  ...props\n}: MenuProps<T>) {\n  const { close } = useContext(MenuOverlayContext);\n  const onAction: MenuProps<T>[\"onAction\"] = (...args) => {\n    close();\n    return props.onAction?.(...args);\n  };\n  if (expandOn === \"press\") {\n    // The only discovered use case so far is in \"Branches\" menu. Perhaps it's not even implemented as a Menu\n    // in Intellij Platform, but it seems it very well can be, by supporting expand on press.\n    throw new Error(\"expanding menu items only on press is not supported yet.\");\n  }\n  // Create state based on the incoming props\n  let state = useTreeState({\n    ...props,\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n\n  // Get props for the menu element\n  let ref = React.useRef<HTMLUListElement>(null);\n  let { menuProps } = useMenu(props, state, ref);\n\n  useEffect(() => {\n    if (props.autoFocus) {\n      setTimeout(() => {\n        // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n        // it sets the focus key, which will move focus to that item.\n        ref.current?.focus();\n      });\n    }\n  }, [props.autoFocus]);\n  return (\n    <StyledMenu {...menuProps} ref={ref}>\n      {[...state.collection].map((item: Node<T>) => {\n        switch (item.type) {\n          case \"item\":\n            return (\n              <MenuItem\n                key={item.key}\n                item={item}\n                state={state}\n                expandOn={expandOn}\n                onAction={onAction}\n              />\n            );\n          case \"section\":\n            // Maybe something like \"Branches\" menu needs titled sections.\n            return (\n              <MenuSection\n                key={item.key}\n                item={item}\n                state={state}\n                expandOn={expandOn}\n                onAction={onAction}\n              />\n            );\n          case \"divider\":\n            return <ListDivider key={item.key} />;\n        }\n      })}\n    </StyledMenu>\n  );\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { styled } from \"../styled\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\nimport { useContextOrThrow } from \"../utils/useContextOrThrow\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Icon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n  min-width: 16px;\n  margin-right: 5px;\n  margin-left: -21px;\n`;\n\nconst Shortcut = styled.kbd<{ selected: boolean }>`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme, selected }) =>\n    selected\n      ? theme.color(\n          \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n        )\n      : theme.color(\"MenuItem.acceleratorForeground\")};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isFocused, isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  return (\n    <StyledMenuItemLayout>\n      <Icon>{!isSelected && icon}</Icon>\n      <Content>{content}</Content>\n      {shortcut && <Shortcut selected={isFocused}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayContainer } from \"@react-aria/overlays\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <OverlayContainer>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </OverlayContainer>\n  );\n}\n","import React, { HTMLProps, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  children: (\n    props: HTMLProps<HTMLElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  renderMenu: (props: {\n    menuProps: React.HTMLAttributes<HTMLElement>;\n  }) => React.ReactNode;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = false,\n  ...otherProps\n}) => {\n  const menuTriggerProps: AriaMenuTriggerProps = {\n    ...otherProps,\n    direction,\n    align,\n    shouldFlip,\n  };\n  let state = useMenuTriggerState(menuTriggerProps);\n  let triggerRef = React.useRef(null);\n  let overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  let { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  let { buttonProps } = useButton(triggerProps, triggerRef);\n  let { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<AriaMenuTriggerProps>[\"direction\"],\n  align: Required<AriaMenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import React, { useRef } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { useOverlay } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\n\n/**\n * Functionality and accessibility of context menu.\n */\nexport const useContextMenu = (\n  { isDisabled = false }: { isDisabled?: boolean },\n  state: MenuTriggerState\n) => {\n  /**\n   * NOTE: not using useMenuTrigger because:\n   * - There is no option to have a trigger like this: \"right click + long press only by touch\" which seems to be the\n   *   reasonable trigger for context menu. If we want to use it just for long press, we could disable it if it's not\n   *   a touch device, but that would be suboptimal, since both touch and mouse can be available, and it should depend\n   *   not on availability of touch, but on the triggered event type. Plus, isDisabled is broken in v<3.5.0\n   * - It's not quite clear at the moment, if the aria attributes that useMenuTrigger sets would be applicable in case\n   *   of this context menu component too. the trigger is not the container. For example, if there is a list rendered\n   *   inside, the selected item would be the trigger. Maybe even this component, as a container for context menu\n   *   is not the best way to allow for context menu, when comes to a11y concerns. For now, we skip a11y props of the\n   *   trigger. A11y props of the menu itself (e.g. aria-label) would also be up to the usage of this component.\n   *\n   *   TODO: add support for long touch\n   */\n  const onContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    // NOTE: we can't use offsetX/offsetY, because it would depend on the exact target that was clicked.\n    if (!state.isOpen) {\n      state.open(null);\n    }\n    updatePosition(e);\n  };\n\n  const overlayRef = useRef(null);\n\n  const {\n    overlayProps: positionProps,\n    updatePosition,\n  } = useMouseEventOverlayPosition({\n    overlayRef,\n    placement: \"bottom start\",\n    // shouldFlip should be false, but it doesn't work as expected. Overlay container is rendered within the view port\n    // but the menu overflows from the overlay container\n    shouldFlip: true,\n    offset: -8,\n    isOpen: state.isOpen,\n  });\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const containerProps: React.HTMLAttributes<HTMLElement> = isDisabled\n    ? {}\n    : { onContextMenu };\n  return {\n    /**\n     * props to be applied on the container element which is supposed to have the context menu\n     */\n    containerProps,\n    /**\n     * The ref to be applied on the menu overlay wrapper. It's usually an input instead of an output in similar\n     * react-aria hooks, but it seemed unnecessary here.\n     */\n    overlayRef,\n    /**\n     * props to be applied on the menu overlay wrapper.\n     */\n    overlayProps: mergeProps(overlayProps, positionProps),\n  };\n};\n","import {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\nimport React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n  useLayoutEffect(() => {\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e: React.MouseEvent) => {\n      if (targetRef.current) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import React, { HTMLAttributes } from \"react\";\nimport {\n  OverlayContainer,\n  useModal,\n  useOverlay,\n  usePreventScroll,\n} from \"@react-aria/overlays\";\nimport { FocusScope } from \"@react-aria/focus\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { AriaDialogProps } from \"@react-types/dialog\"; // temporary phantom dependency\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { MAC_WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport {\n  Bounds,\n  useResizableMovableWindow,\n  WindowInteractionHandler,\n  WindowMoveHandle,\n  WindowResizeHandles,\n} from \"@intellij-platform/core/Window\";\n\nexport interface ModalWindowProps extends AriaDialogProps {\n  children: React.ReactNode;\n  title: React.ReactNode; // Maybe string here since it's a special case in the original impl, where title is OS-handled and can only be a string\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `children`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n  onClose?: () => void;\n  /**\n   * @default \"all\"\n   */\n  interactions?: \"all\" | \"move\" | \"none\";\n  defaultBounds?: Bounds;\n  bounds?: Bounds;\n  onBoundsChange?: (bounds: Bounds) => void;\n  minWidth?: number;\n  minHeight?: number;\n  /**\n   * For performance reason, window bounds is kept in a local state during a resize or move interaction, and\n   * `onBoundsChange` is called once at the end of interaction. `interceptInteraction` gives a chance of rectifying\n   * bounds changes during an interaction to for example apply custom size/placement constraints.\n   */\n  interceptInteraction?: (\n    newBounds: Bounds,\n    interactionType: \"move\" | \"resize\"\n  ) => Bounds;\n}\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 20px;\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\nconst StyledWindowUnderlay = styled.div`\n  position: fixed;\n  z-index: 1000; // FIXME: z-index should not be hard-coded like this\n  inset: 0;\n`;\nconst StyledWindowContainer = styled.div`\n  position: absolute;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  border-radius: 8px;\n  ${MAC_WINDOW_SHADOW}; // FIXME: OS-dependant style?\n  outline: 1px solid #555; // FIXME\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledWindowInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nexport const ModalWindowInner = ({\n  interactions = \"all\",\n  footer,\n  ...props\n}: ModalWindowProps): React.ReactElement => {\n  const { title, children } = props;\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      isOpen: true, // maybe allow rendering closed window? :-?\n      onClose: props.onClose,\n      isDismissable: false,\n      isKeyboardDismissDisabled: false,\n      shouldCloseOnBlur: false,\n    },\n    ref\n  );\n  usePreventScroll();\n  const { modalProps } = useModal();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  const { bounds, windowInteractionHandlerProps } = useResizableMovableWindow(\n    props\n  );\n\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {title || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n\n  return (\n    <StyledWindowUnderlay {...underlayProps}>\n      <WindowInteractionHandler {...windowInteractionHandlerProps}>\n        <FocusScope contain restoreFocus autoFocus>\n          <StyledWindowContainer\n            {...mergeProps(overlayProps, dialogProps, modalProps)}\n            style={bounds}\n            ref={ref}\n          >\n            <StyledWindowInnerContainer>\n              {interactions !== \"none\" ? (\n                <WindowMoveHandle>\n                  {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n                </WindowMoveHandle>\n              ) : (\n                renderTitle()\n              )}\n              <StyledWindowContentWrapper>\n                {children}\n              </StyledWindowContentWrapper>\n              {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n            </StyledWindowInnerContainer>\n            {interactions === \"all\" && (\n              <WindowResizeHandles\n                minWidth={props.minWidth}\n                minHeight={props.minHeight}\n              />\n            )}\n          </StyledWindowContainer>\n        </FocusScope>\n      </WindowInteractionHandler>\n    </StyledWindowUnderlay>\n  );\n};\n\n/**\n * A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\n * In the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\n * are not relevant here since they wouldn't be os-native windows. A close button is still relevant (and kind of\n * necessary) and will be added in next iterations.\n *\n * The content container doesn't come with any padding. Other related components should be used for common layouts in\n * modal windows.\n * Example use cases: Window for git operations such as push, update, revert, new branch, etc.\n *\n * ![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n *\n * NOTE: The part regarding rendering WindowInteractionHandler, and rendering as a dialog with a focus scope, in an\n * overlay container could be extracted into a component which is then used to create custom resizable/movable overlay\n * dialogs, like \"Branches\", or \"Search Everywhere\".\n *\n * TODO: support sizing the window based on minimum/natural size the content requires.\n * TODO: show close button (maybe os-aware styles?)\n * TODO: imperative API for opening a stack of windows (it may be not needed)\n *\n */\nexport const ModalWindow = (props: ModalWindowProps) => (\n  <OverlayContainer>\n    <ModalWindowInner {...props} />\n  </OverlayContainer>\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.625rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nfunction Footer({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer. {@link Button}s are usually used inside the right content\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>{right}</StyledFooterSide>\n    </StyledFooter>\n  );\n}\n\nexport const WindowLayout = {\n  Footer,\n};\n","import React, {\n  CSSProperties,\n  HTMLAttributes,\n  Ref,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { keyframes } from \"styled-components\";\nimport { useProgressBar } from \"@react-aria/progress\";\nimport { AriaProgressBarProps } from \"@react-types/progress\";\nimport { PressProps, useHover } from \"@react-aria/interactions\";\nimport { useButton } from \"@react-aria/button\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, \"label\"> {\n  /**\n   * Process name, shown above or to the left of the progress bar. Placement is controlled by {@link namePosition}.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-name\n   */\n  name?: React.ReactNode;\n\n  /**\n   * Process name position with respect to the progress bar.\n   * If `namePosition` is \"side\", {@link name} is **not** automatically appended with a colon.\n   * @default \"top\"\n   */\n  namePosition?: \"side\" | \"top\";\n\n  /**\n   * Process details, placed bellow the progress bar, with a de-emphasized color.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-details\n   */\n  details?: React.ReactNode;\n\n  /**\n   * A second line of details. Not an officially documented feature, but it's supported in the reference impl.\n   */\n  secondaryDetails?: React.ReactNode;\n\n  /**\n   * Placed next to and aligned with the progress bar, used for\n   * [process control](https://jetbrains.github.io/ui/controls/progress_bar/#process-control) buttons.\n   */\n  button?: React.ReactNode;\n\n  /**\n   * Progress bar track width.\n   */\n  width?: CSSProperties[\"width\"];\n\n  /**\n   * Not supported in [the official specs](https://jetbrains.github.io/ui/controls/progress_bar/#25), but the progress\n   * bar in status bar has a denser spacing. It still won't be a pixel perfect match with the progress bar in the\n   * status bar.\n   */\n  dense?: boolean;\n\n  style?: HTMLAttributes<unknown>[\"style\"];\n  className?: HTMLAttributes<unknown>[\"className\"];\n}\n\ninterface ProgressBarContextObj {\n  setForcedDetails: (details: string | null) => void;\n  setTooltip: (tooltip: string | null) => void;\n}\n\n/**\n * @see https://jetbrains.github.io/ui/controls/progress_bar/\n * @see https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/platform-api/src/com/intellij/openapi/ui/panel/ProgressPanelBuilder.java\n *\n * Known issues:\n * There are a couple of UI issues because of the current layout (which can be improved probably):\n * - max-width of the label and details, it's not necessarily aligned with the the progressbar track, because they don't\n *   share the same container\n * - when label is on the side, details is aligned with the label, instead of the progressbar track.\n */\nexport const ProgressBar = ({\n  value = 0,\n  maxValue = 100,\n  minValue = 0,\n  name,\n  namePosition = \"top\",\n  details,\n  secondaryDetails,\n  button,\n  width,\n  dense,\n  className,\n  style,\n  ...props\n}: ProgressBarProps): React.ReactElement => {\n  const { progressBarProps, labelProps } = useProgressBar({\n    ...props,\n    label: name,\n    value,\n    maxValue,\n    minValue,\n  });\n  const percentage = (100 * (value / maxValue)).toFixed(0);\n  const [forcedDetails, setForcedDetails] = useState<null | string>(\"\");\n  const [tooltip, setTooltip] = useState<null | string>(\"\");\n\n  const contextValue: ProgressBarContextObj = useMemo(\n    () => ({\n      setForcedDetails,\n      setTooltip,\n    }),\n    []\n  );\n  const label = (\n    <StyledProgressBarLabel {...labelProps}>{name}</StyledProgressBarLabel>\n  );\n  const effectiveDetails = details ? tooltip || forcedDetails || details : null;\n  return (\n    <StyledProgressBarContainer style={style} className={className}>\n      {namePosition === \"top\" && label}\n      <StyledProgressBarLineContainer\n        dense={dense}\n        hasTopMargin={Boolean(name) && namePosition === \"top\"}\n        hasBottomMargin={Boolean(effectiveDetails)}\n      >\n        {namePosition === \"side\" && label}\n        <StyledProgressBarTrack\n          style={{ width }}\n          {...progressBarProps}\n          indeterminate={props.isIndeterminate}\n        >\n          {!props.isIndeterminate && (\n            <StyledProgressBarProgress style={{ width: `${percentage}%` }} />\n          )}\n        </StyledProgressBarTrack>\n        {props.showValueLabel && (\n          <span>{props.valueLabel ?? `${percentage}%`}</span>\n        )}\n        <ProgressBarContext.Provider value={contextValue}>\n          {button}\n        </ProgressBarContext.Provider>\n      </StyledProgressBarLineContainer>\n      <StyledProgressBarDetails>{effectiveDetails}</StyledProgressBarDetails>\n      <StyledProgressBarDetails>{secondaryDetails}</StyledProgressBarDetails>\n    </StyledProgressBarContainer>\n  );\n};\n\nconst ProgressBarContext = React.createContext<null | ProgressBarContextObj>(\n  null\n);\n\nconst StyledProgressBarContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground /* TODO: check*/};\n  cursor: default; // prevent cursor on text\n`;\n\nconst StyledProgressBarLineContainer = styled.div<{\n  dense?: boolean;\n  hasTopMargin?: boolean;\n  hasBottomMargin?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: ${({ dense }) => (dense ? \"0.5rem\" : \"0.625rem\")};\n  height: 4px;\n  // spacing is based on the reference impl and figma designs. top and bottom spacing is inverted in the spec document\n  // figma: https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?node-id=75426%3A16650\n  // spec document: https://jetbrains.github.io/ui/controls/progress_bar/#25\n  margin-top: ${({ hasTopMargin }) => hasTopMargin && \"0.375rem\"};\n  margin-bottom: ${({ hasBottomMargin }) => hasBottomMargin && \"0.25rem\"};\n`;\n\nconst StyledProgressBarLabel = styled.div`\n  white-space: nowrap;\n  max-width: calc(100% - 2rem);\n  overflow: hidden;\n`;\n\nconst StyledProgressBarDetails = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n  font-size: 0.82em;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 2rem); // not the best way\n`;\n\nconst StyledProgressBarTrack = styled.div<{ indeterminate?: boolean }>`\n  height: inherit;\n  border-radius: 2px;\n  overflow: hidden;\n  display: flex;\n\n  // In case used in flex layout\n  min-width: 0;\n  flex: 1;\n\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.trackColor\",\n      theme.dark ? \"rgb(85,85,85)\" : \"rgb(196,196,196)\"\n    )};\n  ${({ indeterminate }) =>\n    indeterminate &&\n    css`\n      background: linear-gradient(\n        90deg,\n        ${getIndeterminateStartColor} 0%,\n        ${getIndeterminateEndColor} 50%,\n        ${getIndeterminateStartColor} 100%\n      );\n      background-size: 96px auto;\n      animation: 800ms ${indeterminateBackgroundAnimation} linear infinite;\n    `}\n`;\n\nconst getIndeterminateStartColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateStartColor\");\nconst getIndeterminateEndColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateEndColor\");\n\nconst indeterminateBackgroundAnimation = keyframes`\n  0% {\n    background-position: 0;\n  }\n  100% {\n    background-position: 96px;\n  }\n`;\n\nconst StyledProgressBarProgress = styled.div`\n  height: 100%;\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.progressColor\",\n      theme.dark ? \"rgb(160,160,160)\" : \"rgb(128,128,128)\"\n    )};\n`;\n\ntype ProgressBarIconButtonProps = Pick<PressProps, \"onPress\"> & {\n  hoverTooltip: string;\n};\n\n/**\n * Accessibility and functionality of progress bar icon buttons\n * @private maybe?\n */\nexport function useProgressBarIconButton(\n  { onPress, hoverTooltip }: ProgressBarIconButtonProps,\n  ref: Ref<HTMLElement>\n) {\n  const { buttonProps } = useButton(\n    {\n      onPress,\n      elementType: \"span\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: it works, but it's intentionally excluded from the type.\n      preventFocusOnPress: true,\n    },\n    ref\n  );\n  const context = useContext(ProgressBarContext);\n  const { hoverProps, isHovered } = useHover({});\n  useEffect(() => {\n    context?.setTooltip(isHovered ? hoverTooltip : null);\n  }, [hoverTooltip, isHovered]);\n  return {\n    buttonProps: mergeProps(buttonProps, hoverProps),\n  };\n}\n\n/**\n * @private maybe?\n * */\nexport function useProgressBarPauseIconButton(\n  { paused, ...props }: ProgressBarIconButtonProps & { paused: boolean },\n  ref: Ref<HTMLElement>\n) {\n  const context = useContext(ProgressBarContext);\n  useEffect(() => {\n    context?.setForcedDetails(paused ? \"Paused\" : null);\n  }, [paused]);\n  return useProgressBarIconButton(props, ref);\n}\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarPauseIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarPauseButtonProps {\n  /**\n   * Whether progress is paused.\n   */\n  paused: boolean;\n  /**\n   * Called when progress is paused or resumed.\n   * @param paused `true` when progress is being paused. `false` when resumed.\n   */\n  onPausedChange: (paused: boolean) => void | Promise<unknown>;\n\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n}\n\n/**\n * Pause/Resume icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarPauseButton = ({\n  paused,\n  onPausedChange,\n  small,\n}: ProgressBarPauseButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarPauseIconButton(\n    {\n      onPress: () => onPausedChange(!paused),\n      hoverTooltip: paused ? \"Resume\" : \"Pause\",\n      paused,\n    },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      {...buttonProps}\n      icon={\n        paused\n          ? `process/progressResume${small ? \"Small\" : \"\"}.svg`\n          : `process/progressPause${small ? \"Small\" : \"\"}.svg`\n      }\n    />\n  );\n};\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarCancelButtonProps {\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n  onPress: () => void;\n}\n\n/**\n * Stop (cancel) icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarStopButton = ({\n  small,\n  onPress,\n}: ProgressBarCancelButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarIconButton(\n    { onPress, hoverTooltip: \"Cancel\" },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      ref={ref}\n      {...buttonProps}\n      icon={`process/stop${small ? \"Small\" : \"\"}.svg`}\n      hoverIcon={`process/stop${small ? \"Small\" : \"\"}Hovered.svg`}\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  ThreeViewSplitter,\n  ThreeViewSplitterProps,\n} from \"./ThreeViewSplitter/ThreeViewSplitter\";\n\ntype ResizableViewProps = Omit<\n  ThreeViewSplitterProps,\n  | \"innerView\"\n  | \"firstView\"\n  | \"firstSize\"\n  | \"onFirstResize\"\n  | \"lastView\"\n  | \"lastSize\"\n  | \"onLastResize\"\n> & {\n  children: React.ReactNode;\n  onResize: ThreeViewSplitterProps[\"onFirstResize\"];\n  size: ThreeViewSplitterProps[\"firstSize\"];\n  /**\n   * Whether the resizer should be placed at before or after the resizable view.\n   */\n  resizerPlacement?: \"before\" | \"after\";\n};\n/**\n * A single resizable view, built on top of {@link ThreeViewSplitter}, just to provide better prop interface.\n * Like `ThreeViewSplitter` it supports \"horizontal\" or \"vertical orientations. There is an extra `resizerPlacement`\n * prop which determines where the resizer should be placed in relation with the view. When set to \"before\" the view\n * will be resizable from the start (\"left\" or \"top\"). When set to \"after\" the view will be resizable from end (\"right\"\n * or \"bottom\"). Default is \"after\"\n */\nexport const ResizableView = ({\n  children,\n  size,\n  onResize,\n  resizerPlacement = \"after\",\n  ...props\n}: ResizableViewProps) => (\n  <ThreeViewSplitter\n    {...(resizerPlacement === \"after\"\n      ? { firstView: children, firstSize: size, onFirstResize: onResize }\n      : { lastView: children, lastSize: size, onLastResize: onResize })}\n    {...props}\n  />\n);\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useBottomResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will increase/decrease the height\n */\nexport const BottomResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useBottomResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype HorizontalResizerViewProps = ResizerViewProps<\"horizontal\">;\n\nconst StyledHorizontalResizer = styled.div`\n  top: 0;\n  height: 100%;\n  width: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledHorizontalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: HorizontalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  width: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  height: 100%;\n  left: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a horizontal layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const HorizontalResizer: React.FC<HorizontalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"col\",\n  children,\n  style = {},\n  resizerProps,\n}) => {\n  return (\n    <StyledHorizontalResizer\n      {...resizerProps}\n      style={{ ...style, background, width: size }}\n    >\n      {children}\n      <StyledHorizontalResizerArea handleSize={outerPadding} cursor={cursor} />\n    </StyledHorizontalResizer>\n  );\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useLeftResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the left side of the resizable view. i.e.\n * moving mouse to right/left will decrease/increase the width\n */\nexport const LeftResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useLeftResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useRightResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the right side of the resizable view. i.e.\n * moving mouse to right/left will increase/decrease the width\n */\nexport const RightResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useRightResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useTopResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will decrease/increase the height\n */\nexport const TopResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useTopResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype VerticalResizerViewProps = ResizerViewProps<\"vertical\">;\n\nconst StyledVerticalResizer = styled.div`\n  width: 100%;\n  height: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledVerticalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: VerticalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  height: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  width: 100%;\n  top: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a vertical layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const VerticalResizer: React.FC<VerticalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"row\",\n  resizerProps,\n  children,\n  style = {},\n}) => (\n  <StyledVerticalResizer\n    {...resizerProps}\n    style={{ ...style, background, height: size }}\n  >\n    {children}\n    <StyledVerticalResizerArea handleSize={outerPadding} cursor={cursor} />\n  </StyledVerticalResizer>\n);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { ResizerProps } from \"./ResizerProps\";\n\ntype UseResizerProps = Pick<\n  ResizerProps,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n>;\n\nexport type ResizerViewProps<O = \"horizontal\" | \"vertical\"> = Omit<\n  ResizerProps<O>,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n> &\n  ReturnType<typeof useResizer>;\n\nconst useResizer = (\n  orientation: \"horizontal\" | \"vertical\",\n  invert: boolean,\n  { onResizeStarted, onResize, onResizeEnd }: UseResizerProps\n) => {\n  const props = useMove({\n    dragThreshold: 0,\n    onMoveStart: () => onResizeStarted() || 0,\n    onMoveEnd: () => onResizeEnd?.(),\n    onMove: ({ movement, startState }) =>\n      onResize(\n        startState +\n          (invert ? -1 : +1) *\n            movement[orientation === \"horizontal\" ? \"x\" : \"y\"]\n      ),\n  });\n  return {\n    resizerProps: props,\n  };\n};\n\nexport const useLeftResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", true, props);\n};\n\nexport const useRightResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", false, props);\n};\n\nexport const useTopResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", true, props);\n};\n\nexport const useBottomResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", false, props);\n};\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown at the top left corner of list, tree, etc., which shows the search\n * query.\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} match={match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ match?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ match, theme }) =>\n    match\n      ? theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )\n      : theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        // Seems reasonable to prevent default here generally, but the specific case this is added for is the space key,\n        // scrolling the page.\n        event.preventDefault();\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\n\nexport interface SpeedSearchState {\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    active: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.active!,\n    props.active || false,\n    props.onActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active: active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n  };\n}\n\nexport interface SpeedSearchProps {\n  stickySearch?: boolean;\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { stickySearch }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      // intellij UI implementation removes the searchTerm by left/right arrows. Maybe do the same?\n      if (e.key === \"Escape\") {\n        if (searchTerm) {\n          clear();\n        } else {\n          e.continuePropagation();\n        }\n      } else {\n        ghostInputKeydown(e);\n      }\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onFocusWithinChange: (focused) => {\n      if (!focused && !stickySearch) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarProps {\n  left: React.ReactNode;\n  right: React.ReactNode;\n}\n\n/**\n * Status bar rendered at the bottom of the main window. In the reference implementation, there are three slots for\n * content: left, right and center. It doesn't seem center is really necessary, so only left and right are supported\n * for now.\n * @param left content on the left side of the status bar.\n * @param right content on the right side of the status bar. Typically, a bunch of {@link StatusBarWidget}s\n */\nexport const StatusBar = ({\n  left,\n  right,\n}: StatusBarProps): React.ReactElement => {\n  return (\n    <StyledStatusBar>\n      <StyledStatusBarLeft>{left}</StyledStatusBarLeft>\n      <StyledStatusBarRight>{right}</StyledStatusBarRight>\n    </StyledStatusBar>\n  );\n};\n\nconst StyledStatusBar = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.25rem;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between; // because there is left and right sides\n  background-color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.background\" as UnknownThemeProp<\"StatusBar.background\">,\n      theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)\n    ) || \"#fff\"};\n  color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.Widget.foreground\" as UnknownThemeProp<\"StatusBar.Widget.foreground\">,\n      theme.commonColors.labelForeground\n    )};\n  border-top: 1px solid\n    ${({ theme }) => theme.color(\"StatusBar.borderColor\", \"rgb(145, 145, 145)\")};\n  height: calc(1.25rem + 1px /* border*/);\n  line-height: 1.25rem;\n  font-size: 0.656rem; // not verified\n  cursor: default;\n`;\n\nconst StyledStatusBarSection = styled.div`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst StyledStatusBarRight = styled(StyledStatusBarSection)`\n  flex-shrink: 0;\n`;\nconst StyledStatusBarLeft = styled(StyledStatusBarSection)`\n  flex-shrink: 1;\n  min-width: 0;\n  overflow: hidden;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { PressProps, usePress } from \"@react-aria/interactions\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarWidgetProps extends PressProps {\n  label?: React.ReactNode;\n  icon?: React.ReactNode;\n}\n\n/**\n * Status bar button (aka widget), with the right hover and pressed appearance.\n * It doesn't get focused when pressed, and is excluded from tab order.\n * Disabled style is not couldn't be found, so it's skipped at the moment.\n */\nexport const StatusBarWidget = React.forwardRef(function StatusBarWidget(\n  props: StatusBarWidgetProps,\n  ref: ForwardedRef<HTMLSpanElement>\n) {\n  // Maybe it's better for a11y to use useButton, or at least use button element?\n  const { pressProps, isPressed } = usePress({\n    ...props,\n    preventFocusOnPress: true,\n  });\n\n  const StyledWrapper = props.label\n    ? StyledStatusBarWidget\n    : StyledStatusBarIconWidget;\n  return (\n    <StyledWrapper\n      {...pressProps}\n      className={isPressed ? \"pressed\" : \"\"}\n      ref={ref}\n    >\n      {props.icon}\n      {props.icon && props.label && (\n        <>&nbsp;</> //not the nicest way to handle spacing!\n      )}\n      {props.label}\n    </StyledWrapper>\n  );\n});\n\nconst StyledStatusBarWidget = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.375rem\"};\n  height: 1.125rem;\n  white-space: nowrap;\n  &:hover {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverBackground\" as UnknownThemeProp<\"StatusBar.Widget.hoverBackground\">,\n        theme.color(\"ActionButton.hoverBackground\", \"#dfdfdf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverForeground\" as UnknownThemeProp<\"StatusBar.Widget.hoverForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n  &.pressed {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedBackground\" as UnknownThemeProp<\"StatusBar.Widget.pressedBackground\">,\n        theme.color(\"ActionButton.pressedBackground\", \"#cfcfcf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedForeground\" as UnknownThemeProp<\"StatusBar.Widget.pressedForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n`;\n\nconst StyledStatusBarIconWidget = styled(StyledStatusBarWidget)`\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.25rem\"};\n`;\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nconst StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  onClose,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  onClose?: () => void;\n}) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      endIcon={onClose && <TabCloseButton onPress={onClose} />}\n    />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { Pressable } from \"@react-aria/interactions\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\n\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  onClose,\n  onUnpin,\n  pinned,\n  containerProps,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  onClose?: () => void;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}) => {\n  // TODO: Tooltip for unpin and close buttons\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <Pressable onPress={onUnpin}>\n            <PlatformIcon icon=\"actions/pinTab\" />\n          </Pressable>\n        ) : (\n          onClose && <TabCloseButton onPress={onClose} />\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import { Pressable, PressProps } from \"@react-aria/interactions\";\n\nimport React from \"react\";\nimport { PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\n\nconst StyledIconWrapper = styled.span`\n  display: inherit;\n  .icon.hover {\n    display: none;\n  }\n  &:hover {\n    .icon {\n      display: none;\n    }\n    .icon.hover {\n      display: unset;\n    }\n  }\n`;\n/**\n * Close button for Tab\n */\nexport const TabCloseButton = (props: PressProps) => {\n  // using useHover proved to be unstable.\n  return (\n    <Pressable {...props}>\n      <StyledIconWrapper>\n        <PlatformIcon icon={\"actions/closeHovered\"} className=\"icon hover\" />\n        <PlatformIcon icon={\"actions/close\"} className=\"icon\" />\n      </StyledIconWrapper>\n    </Pressable>\n  );\n};\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    return (\n      <StyledTabItemLayout {...containerProps} ref={ref}>\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { useEffect } from \"react\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  intersectionObserver: IntersectionObserver | null;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = <T extends object>({\n  state,\n  item,\n  focusable,\n  active,\n  Component = StyledDefaultTab,\n  intersectionObserver,\n}: TabProps<T>): React.ReactElement => {\n  const { key, rendered } = item;\n  const ref = React.useRef(null);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab({ key }, state, ref);\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n  useIntersectionObserver(ref, intersectionObserver);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n};\n\nfunction useIntersectionObserver(\n  ref: React.MutableRefObject<null>,\n  intersectionObserver: IntersectionObserver | null\n) {\n  useEffect(() => {\n    const element = ref.current;\n    if (element) {\n      intersectionObserver?.observe(element);\n      return () => {\n        intersectionObserver?.unobserve(element);\n      };\n    }\n  }, [intersectionObserver]);\n}\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useCollectionOverflowObserver } from \"./useCollectionOverflowObserver\";\nimport { useIsScrolled } from \"./useIsScrolled\";\nimport { styled, css } from \"@intellij-platform/core/styled\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, isScrolled } = useIsScrolled({ ref });\n  const {\n    overflowedKeys,\n    intersectionObserver,\n  } = useCollectionOverflowObserver(ref);\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={isScrolled.left}\n        hasOverflowAtEnd={isScrolled.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              active={active}\n              Component={TabComponent}\n              intersectionObserver={intersectionObserver}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useIsScrolled<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [isScrolled, setIsScrolled] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newIsScrolled = {\n        top: offsetTop >= threshold,\n        bottom: offsetBottom >= threshold,\n        left: offsetLeft >= threshold,\n        right: offsetRight >= threshold,\n      };\n      if (\n        isScrolled.top !== isScrolled.top ||\n        isScrolled.bottom !== newIsScrolled.bottom ||\n        isScrolled.left !== newIsScrolled.left ||\n        isScrolled.right !== newIsScrolled.right\n      ) {\n        setIsScrolled(newIsScrolled);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    isScrolled,\n  };\n}\n","import { Key, RefObject, useEffect, useState } from \"react\";\n\n/**\n * Given a ref to a scrollable container of collection items, returns the keys that are not completely visible and\n * are off view because of scroll. It relies on data-key property of observed elements.\n * @param scrollableItemsContainerRef\n * @param threshold\n */\nexport function useCollectionOverflowObserver(\n  scrollableItemsContainerRef: RefObject<HTMLElement>,\n  { threshold = 0.9 }: { threshold?: number } = {}\n) {\n  const [\n    intersectionObserver,\n    setIntersectionObserver,\n  ] = useState<IntersectionObserver | null>(null);\n  const [overflowedKeys, setOverflowedKeys] = useState<Set<Key>>(new Set());\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const newHiddenKeys = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof HTMLElement\n              ? entry.target.dataset.key\n              : undefined\n          )\n          .filter<string>((val): val is string => Boolean(val));\n        const newVisibleKeys = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof HTMLElement\n              ? entry.target.dataset.key\n              : null\n          )\n          .filter<string>((val): val is string => Boolean(val));\n\n        setOverflowedKeys(\n          (currentOverflowMenuKeys) =>\n            new Set(\n              [...currentOverflowMenuKeys]\n                .filter((key) => !newVisibleKeys.includes(`${key}`))\n                .concat(newHiddenKeys)\n            )\n        );\n      },\n      {\n        root: scrollableItemsContainerRef.current,\n        rootMargin: \"0px\",\n        threshold,\n      }\n    );\n    setIntersectionObserver(observer);\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return {\n    intersectionObserver,\n    overflowedKeys,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { ActionButton } from \"@intellij-platform/core/ActionButton/ActionButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [\n            ...collection,\n          ].filter((menuItem) => overflowedKeys.has(menuItem.key));\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <ActionButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </ActionButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n  />\n);\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","// language=JSRegexp\nconst numberPattern = \"[0-9]{0,3}.?[0-9]*\";\n\nconst parseComponent = (componentStr: string, index: number) =>\n  componentStr\n    ? index < 3\n      ? parseInt(componentStr)\n      : Math.round(Math.min(parseFloat(componentStr), 1) * 255)\n    : undefined;\n\nconst parseHexRgba = (str: string) =>\n  str\n    .match(/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?$/i)\n    ?.slice(1, 5)\n    .map((i) => (i ? parseInt(i, 16) : undefined));\nconst parseShorthandHex = (str: string) =>\n  str\n    .match(/^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i)\n    ?.slice(1, 4)\n    .map((i) => (i ? parseInt(i + i, 16) : undefined));\nconst parseRgb = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgb\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\nconst parseRgba = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgba\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\n\n/**\n * parses a color string into rgba components.\n * @param str\n */\nexport const parseColorString = (\n  str: string\n): [number, number, number, number?] | null => {\n  const result = [parseHexRgba, parseShorthandHex, parseRgb, parseRgba].reduce<\n    (number | undefined)[] | undefined\n  >((result, parse) => result || parse(str), undefined);\n  return Array.isArray(result) &&\n    result.slice(0, 3).every((c) => Number.isInteger(c))\n    ? (result as [number, number, number, number?])\n    : null;\n};\n","import { parseColorString } from \"./parseColorString\";\n\n/**\n * A Color class resembling AWT Color\n */\nexport class Color {\n  public readonly r: number;\n  public readonly g: number;\n  public readonly b: number;\n  public readonly a: number;\n\n  private static readonly FACTOR = 0.7;\n\n  constructor(r: number, g: number, b: number, a?: number);\n  constructor(rgba: string);\n  constructor(rgba: Color);\n  constructor(\n    rgba: string | number | Color,\n    g?: number,\n    b?: number,\n    a: number = 255\n  ) {\n    let r: number;\n    if (typeof rgba === \"string\") {\n      [r = NaN, g = NaN, b = NaN, a = 255] = parseColorString(rgba) || [];\n    } else if (rgba instanceof Color) {\n      [r, g, b, a] = [rgba.r, rgba.g, rgba.b, rgba.a];\n    } else {\n      r = rgba;\n    }\n    this.r = r;\n    this.g = g!;\n    this.b = b!;\n    this.a = a < 1 ? Math.round(a * 255) : a;\n  }\n\n  isValid() {\n    return (\n      Number.isInteger(this.r) &&\n      Number.isInteger(this.g) &&\n      Number.isInteger(this.b) &&\n      Number.isInteger(this.a)\n    );\n  }\n\n  /**\n   * Extra method for changing transparency\n   */\n  withTransparency(alpha: number) {\n    return new Color(this.r, this.g, this.b, alpha);\n  }\n\n  brighter() {\n    let { r, g, b, a: alpha } = this;\n    const int = Math.floor,\n      FACTOR = Color.FACTOR;\n    // The rest is copy paste of java.awt.Color (only `int i` is changed to `let i` :D)\n    let i = int(1.0 / (1.0 - FACTOR));\n    if (r == 0 && g == 0 && b == 0) {\n      return new Color(i, i, i, alpha);\n    }\n    if (r > 0 && r < i) r = i;\n    if (g > 0 && g < i) g = i;\n    if (b > 0 && b < i) b = i;\n\n    return new Color(\n      Math.min(int(r / FACTOR), 255),\n      Math.min(int(g / FACTOR), 255),\n      Math.min(int(b / FACTOR), 255),\n      alpha\n    );\n  }\n\n  darker() {\n    const FACTOR = Color.FACTOR;\n    const int = Math.floor;\n\n    return new Color(\n      Math.max(int(this.r * FACTOR), 0),\n      Math.max(int(this.g * FACTOR), 0),\n      Math.max(int(this.b * FACTOR), 0),\n      this.a\n    );\n  }\n\n  static brighter(color: string): string {\n    // note: we can't type args simply with ConstructorParameters<typeof Color>.\n    // see more: https://github.com/microsoft/TypeScript/issues/37079\n    return new Color(color).brighter().toString();\n  }\n\n  blend(colorOrColorString: Color | string) {\n    const color =\n      typeof colorOrColorString === \"string\"\n        ? new Color(colorOrColorString)\n        : colorOrColorString;\n    const getBlendedValue = (component: \"r\" | \"g\" | \"b\") =>\n      Math.round(\n        (color.a / 255) * color[component] +\n          (this.a / 255) * (1 - color.a / 255) * this[component]\n      );\n    return new Color(\n      getBlendedValue(\"r\"),\n      getBlendedValue(\"g\"),\n      getBlendedValue(\"b\")\n    );\n  }\n\n  toString() {\n    const toString = (component: number) =>\n      Number.isNaN(component) ? \"\" : component.toString(16).padStart(2, \"0\");\n    const r = toString(this.r);\n    const g = toString(this.g);\n    const b = toString(this.b);\n    const a = this.a === 255 ? \"\" : toString(this.a);\n    return `#${r}${g}${b}${a}`;\n  }\n}\n","import React, { CSSProperties, useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport { ResizerProps } from \"../Resizer/ResizerProps\";\nimport { Theme } from \"../Theme/Theme\";\n\n/**\n * Props are named mostly based on ThreeComponentsSplitter in Intellij Platform.\n */\nexport interface ThreeViewSplitterProps {\n  orientation?: \"horizontal\" | \"vertical\";\n  resizerProps?: Partial<\n    Omit<ResizerProps, \"onResize\" | \"onResizeStarted\" | \"onResizeEnd\">\n  >;\n  innerView?: React.ReactNode;\n  innerViewMinSize?: number;\n  firstView?: React.ReactNode;\n  firstSize?: number | null;\n  lastView?: React.ReactNode;\n  lastSize?: number | null;\n  onFirstResize?: (size: number) => void;\n  onLastResize?: (size: number) => void;\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst StyledSplitterContainer = styled.div<{\n  orientation: \"horizontal\" | \"vertical\";\n}>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  flex-direction: ${({ orientation }) =>\n    orientation === \"vertical\" ? \"column\" : \"row\"};\n`;\n\nconst StyledSplitterInnerView = styled.div`\n  // The default overflow visible should be changed obviously. Not sure if there is any layout implication\n  // in using 'auto' instead of hidden, to provide scroll behaviour by default, but even if we realize later\n  // that we need to set overflow to hidden here, we can have scrollable content inside the inner view via an\n  // intermediate element inside the inner view, with overflow set to auto and width set to 100%.\n  overflow: auto;\n  flex: 1;\n`;\n/**\n * Corresponding to\n * [ThreeComponentsSplitter](https://github.com/JetBrains/intellij-community/blob/58dbd93e9ea527987466072fa0bfbf70864cd35f/platform/platform-api/src/com/intellij/openapi/ui/ThreeComponentsSplitter.java#L40-L40)\n * `firstView` and `lastView` are optional, and if not provided, the corresponding resizer is not rendered.\n * innerView is supposed to fill the remaining space, while firstView and lastView have specific sizes.\n * size changes in a resize interaction is not reported and is handled by local state in the component. That's\n * to prevent frequent state updates in a higher level which can be expensive. It's also based on this assumption\n * that in the usage side there is no need for any control over resizing or even knowing the intermediate state.\n * Maybe a minSize and maxSize would be the extent of the required control over resizing. But anyway, this model\n * of keeping the size as a local state during a resize session is something that can be changed if needed.\n *\n * Features:\n * - Relative sizing (fraction of the container)\n * - Default size by content\n * - Change handling only when resize is done.\n *\n * TODO: max and min size not implemented\n * TODO: add support for uncontrolled version\n */\nexport const ThreeViewSplitter: React.FC<ThreeViewSplitterProps> = ({\n  orientation = \"horizontal\",\n  firstView,\n  firstSize,\n  lastView,\n  lastSize,\n  onFirstResize,\n  onLastResize,\n  resizerProps: resizerPropsOverrides = {},\n  innerView,\n  innerViewMinSize,\n  ...containerProps\n}: ThreeViewSplitterProps): React.ReactElement => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const firstViewRef = useRef<HTMLDivElement>(null);\n  const lastViewRef = useRef<HTMLDivElement>(null);\n  const [firstSizeState, setFirstSizeState] = useState<number | null>(null);\n  const [lastSizeState, setLastSizeState] = useState<number | null>(null);\n  const theme = useTheme() as Theme;\n\n  const value = <T1, T2>(horizontalValue: T1, verticalValue: T2) =>\n    orientation === \"horizontal\" ? horizontalValue : verticalValue;\n\n  const FirstResizer: React.ComponentType<ResizerProps> = value(\n    RightResizer,\n    BottomResizer\n  );\n  const SecondResizer: React.ComponentType<ResizerProps> = value(\n    LeftResizer,\n    TopResizer\n  );\n  const sizeStyleProp = value(\"width\", \"height\");\n  const minSizeStyleProp = value(\"minWidth\", \"minHeight\");\n\n  const resizerProps: ThreeViewSplitterProps[\"resizerProps\"] = {\n    background: theme.commonColors.contrastBorder,\n    size: 1,\n    ...resizerPropsOverrides,\n  };\n\n  const isFractionSize = (size: number) => size < 1;\n\n  const normalizeSize = (\n    size: number | undefined | null\n  ): CSSProperties[\"width\" | \"height\"] =>\n    size != null\n      ? isFractionSize(size)\n        ? `${size * 100}%`\n        : Math.round(size)\n      : undefined;\n\n  const getSize = (elem: HTMLElement): number =>\n    value(elem.offsetWidth, elem.offsetHeight);\n\n  const getNewSize = (currentSize: number, newSize: number) => {\n    if (currentSize != null && isFractionSize(currentSize)) {\n      if (!containerRef.current) {\n        throw new Error(\n          \"ThreeViewSplitter: Could not locate container to calculate fraction size\"\n        );\n      }\n      const containerSize = value(\n        containerRef.current.offsetWidth,\n        containerRef.current.offsetHeight\n      );\n      const newFractionSize = newSize / containerSize;\n      return newFractionSize < 1 ? newFractionSize : currentSize;\n    } else {\n      return Math.max(newSize, 1);\n    }\n  };\n\n  const getActualSize = (viewElem: HTMLElement | null): number | null => {\n    if (!containerRef.current || !viewElem) {\n      return null;\n    }\n    const actualSize = getSize(viewElem);\n    if (viewElem.style[sizeStyleProp]?.includes(\"%\")) {\n      return actualSize / getSize(containerRef.current);\n    }\n    return actualSize;\n  };\n\n  const currentLastSize = normalizeSize(lastSizeState ?? lastSize);\n  const currentFirstSize = normalizeSize(firstSizeState ?? firstSize);\n  return (\n    <StyledSplitterContainer\n      ref={containerRef}\n      orientation={orientation}\n      {...containerProps}\n    >\n      {firstView && (\n        <>\n          <div\n            ref={firstViewRef}\n            style={{\n              [sizeStyleProp]: currentFirstSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                lastSizeState !== null ? currentFirstSize : undefined,\n            }}\n          >\n            {firstView}\n          </div>\n          <FirstResizer\n            onResizeStarted={() => {\n              const size = getSize(firstViewRef.current!);\n              setFirstSizeState(firstSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (firstSizeState != null) {\n                setFirstSizeState(getNewSize(firstSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(firstViewRef.current);\n              if (actualSize !== null) {\n                onFirstResize?.(actualSize);\n              }\n              setFirstSizeState(null);\n            }}\n            {...resizerProps}\n          />\n        </>\n      )}\n      {innerView && (\n        <StyledSplitterInnerView\n          style={{\n            [value(\"minWidth\", \"minHeight\")]: innerViewMinSize,\n          }}\n        >\n          {innerView}\n        </StyledSplitterInnerView>\n      )}\n      {lastView && (\n        <>\n          <SecondResizer\n            onResizeStarted={() => {\n              const size = getSize(lastViewRef.current!);\n              setLastSizeState(lastSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (lastSizeState != null) {\n                setLastSizeState(getNewSize(lastSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(lastViewRef.current);\n              if (actualSize !== null) {\n                onLastResize?.(actualSize);\n              }\n              setLastSizeState(null);\n            }}\n            {...resizerProps}\n          />\n          <div\n            ref={lastViewRef}\n            style={{\n              [sizeStyleProp]: currentLastSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                firstSizeState !== null ? currentLastSize : undefined,\n            }}\n          >\n            {lastView}\n          </div>\n        </>\n      )}\n    </StyledSplitterContainer>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport {\n  Divider,\n  DividerItem,\n  Item,\n} from \"@intellij-platform/core/Collections\";\nimport { Menu, MenuItemLayout } from \"@intellij-platform/core/Menu\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useToolWindowState } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { ViewMode } from \"./ToolWindowsState/ToolWindowsState\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nconst viewModes: ViewMode[] = [\n  \"docked_pinned\",\n  \"docked_unpinned\",\n  \"undock\",\n  \"float\",\n];\nexport const anchors: Array<{\n  anchor: Anchor;\n  isSplit: boolean;\n  id: string;\n}> = [\n  { id: \"moveToLeftTop\", anchor: \"left\", isSplit: false },\n  { id: \"moveToLeftBottom\", anchor: \"left\", isSplit: true },\n  { id: \"moveToBottomLeft\", anchor: \"bottom\", isSplit: false },\n  { id: \"moveToBottomRight\", anchor: \"bottom\", isSplit: true },\n  { id: \"moveToRightTop\", anchor: \"right\", isSplit: true },\n  { id: \"moveToRightBottom\", anchor: \"right\", isSplit: false },\n  { id: \"moveToTopRight\", anchor: \"top\", isSplit: true },\n  { id: \"moveToTopLeft\", anchor: \"top\", isSplit: false },\n];\n\nconst getAnchorName = ({\n  anchor,\n  isSplit,\n}: {\n  anchor: Anchor;\n  isSplit: boolean;\n}) =>\n  `${anchor[0].toUpperCase()}${anchor.slice(1)} ${\n    isHorizontalToolWindow(anchor)\n      ? isSplit\n        ? \"Right\"\n        : \"Left\"\n      : isSplit\n      ? \"Bottom\"\n      : \"Top\"\n  }`;\nconst viewModeToString: Record<ViewMode, string> = {\n  undock: \"Undock\",\n  docked_pinned: \"Dock Pinned\",\n  docked_unpinned: \"Dock Unpinned\",\n  float: \"Float\",\n  window: \"Window\",\n};\n\n// TODO: replace these temporary action types with the real ones when action system is implemented.\n//  action would be an entity with association to:\n//  - some presentation (title and icon)\n//  - a set of shortcuts\n//  right now those pieces of information are just mixed in one simple object\ntype ActionBase = {\n  id: string;\n  title: string;\n  shortcut?: string;\n  icon?: ReactNode;\n};\ntype Action = ActionBase & {\n  perform: () => void;\n};\ntype ActionGroup = ActionBase & {\n  actions?: Action[];\n};\ntype ActionItem = ActionGroup | Action;\n\n// Resize steps in Intellij Platform is calculated based on the size of a \"W\" character and some\n// configuration (ide.windowSystem.hScrollChars). Although it's technically feasible, it seems not necessary\nconst HEIGHT_RESIZE_STEP = 16 * 5;\nconst WIDTH_RESIZE_STEP = 13 * 5;\n\n/**\n * Tool window gear icon menu, with a set of default actions and some extra ones.\n * TODO: add support for extra actions when action system is progressed a little.\n */\nexport function ToolWindowSettingsIconMenu({\n  menuProps,\n}: {\n  menuProps: React.HTMLAttributes<HTMLElement>;\n}) {\n  const {\n    state,\n    changeViewMode,\n    moveToSide,\n    stretchWidth,\n    stretchHeight,\n  } = useToolWindowState();\n\n  const viewModeActions: Action[] = viewModes.map((viewMode) => ({\n    id: `viewMode ${viewModeToString[viewMode]}`,\n    title: viewModeToString[viewMode],\n    perform: () => {\n      changeViewMode(viewMode);\n    },\n  }));\n  const moveToActions: Action[] = anchors.map((anchor) => ({\n    id: `anchor ${getAnchorName(anchor)}`,\n    title: getAnchorName(anchor),\n    icon: <PlatformIcon icon={`actions/${anchor.id}`} />,\n    perform: () => {\n      moveToSide(anchor);\n    },\n  }));\n\n  const resizeActions: Action[] = [];\n  if (state.viewMode !== \"float\" && state.viewMode !== \"window\") {\n    if (isHorizontalToolWindow(state.anchor)) {\n      resizeActions.push(\n        {\n          id: \"ResizeToolWindowTop\",\n          title: \"Stretch to top\",\n          shortcut: \"⇧⌘↑\",\n          perform: () => {\n            stretchHeight(\n              state.anchor === \"top\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n            );\n          },\n        },\n        {\n          id: \"ResizeToolWindowBottom\",\n          title: \"Stretch to bottom\",\n          shortcut: \"⇧⌘↓\",\n          perform: () => {\n            stretchHeight(\n              state.anchor === \"bottom\"\n                ? -HEIGHT_RESIZE_STEP\n                : HEIGHT_RESIZE_STEP\n            );\n          },\n        }\n      );\n    } else {\n      resizeActions.push(\n        {\n          id: \"ResizeToolWindowLeft\",\n          title: \"Stretch to left\",\n          shortcut: \"⇧⌘←\",\n          perform: () => {\n            stretchWidth(\n              state.anchor === \"left\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n            );\n          },\n        },\n        {\n          id: \"ResizeToolWindowRight\",\n          title: \"Stretch to right\",\n          shortcut: \"⇧⌘→\",\n          perform: () => {\n            stretchWidth(\n              state.anchor === \"right\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n            );\n          },\n        }\n      );\n    }\n  }\n  resizeActions.push({\n    id: \"MaximizeToolWindow\",\n    title: \"Maximize Tool Window\",\n    shortcut: \"⇧⌘'\",\n    perform: () => {\n      // TODO(release): either remove the action or implement it\n      alert(\"Not implemented\");\n    },\n  });\n  const removeFromSideBarAction: ActionItem = {\n    id: \"removeFromSidebar\",\n    title: \"Remove from Sidebar\",\n    perform: () => {\n      // TODO(release): either remove the action or implement it\n      alert(\"Not implemented\");\n    },\n  };\n  const gearIconActions: Array<ActionItem | DividerItem> = [\n    {\n      id: \"viewMode\",\n      title: \"View Mode\",\n      actions: viewModeActions,\n    },\n    {\n      id: \"moveTo\",\n      title: \"Move to\",\n      actions: moveToActions,\n    },\n    { id: \"resize\", title: \"Resize\", actions: resizeActions },\n    new DividerItem(),\n    removeFromSideBarAction,\n  ];\n  return (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        const allActions = [\n          ...moveToActions,\n          ...viewModeActions,\n          ...resizeActions,\n          removeFromSideBarAction,\n        ];\n        const action = allActions.find(({ id }) => id === key);\n        action?.perform();\n        close();\n      }}\n      selectedKeys={[`viewMode ${viewModeToString[state.viewMode]}`]}\n      disabledKeys={[`anchor ${getAnchorName(state)}`]}\n      items={gearIconActions}\n      autoFocus\n    >\n      {(action) => {\n        if (action instanceof DividerItem) {\n          return <Divider />;\n        }\n        return (\n          <Item\n            key={action.id}\n            textValue={action.title}\n            childItems={\"actions\" in action ? action.actions : undefined}\n          >\n            <MenuItemLayout\n              content={action.title}\n              icon={action.icon}\n              shortcut={action.shortcut}\n            />\n          </Item>\n        );\n      }}\n    </Menu>\n  );\n}\n","import React, { HTMLProps } from \"react\";\nimport { ActionButton } from \"../ActionButton/ActionButton\";\nimport { ActionToolbar } from \"../ActionToolbar/ActionToolbar\";\nimport { PlatformIcon } from \"../Icon\";\nimport { MenuTrigger } from \"../Menu/MenuTrigger\";\nimport { styled } from \"../styled\";\nimport { StyledHorizontalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\nimport { useToolWindowState } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport {\n  anchors,\n  ToolWindowSettingsIconMenu,\n} from \"./ToolWindowSettingsIconMenu\";\n\nexport interface ToolWindowHeaderProps\n  extends Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\"> {\n  contentHasFocus?: boolean;\n  additionalActions?: React.ReactNode;\n}\n\nconst StyledToolWindowHeader = styled.div<{ active: boolean }>`\n  display: flex;\n  align-items: center;\n  padding: 0 2px 0 4px;\n  overflow: hidden; // for the negative margin applied on StyledToolWindowHeaderActions\n  border-bottom: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"ToolWindow.Header.borderColor\" as UnknownThemeProp<\"ToolWindow.Header.borderColor\">\n      ) ||\n      theme.color(\"DefaultTabs.borderColor\") ||\n      theme.commonColors.contrastBorder};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\"ToolWindow.Header.background\") ||\n        theme.color(\n          \"ToolWindow.header.active.background\" as UnknownThemeProp<\"ToolWindow.header.active.background\">\n        ) ||\n        \"#E2E6EC\"\n      : theme.color(\"ToolWindow.Header.inactiveBackground\") ||\n        theme.color(\"ToolWindow.Header.background\") ||\n        \"#ECECEC\"};\n`;\n\nconst StyledToolWindowHeaderActions = styled.div`\n  margin-right: -4px;\n`;\n\nconst StyledToolWindowHeaderContent = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n`;\n\nexport const DefaultToolWindowHeader: React.FC<ToolWindowHeaderProps> = ({\n  children,\n  additionalActions,\n  contentHasFocus = false,\n  ...otherProps\n}) => {\n  const { hide, state, changeViewMode } = useToolWindowState();\n  return (\n    <StyledToolWindowHeader active={contentHasFocus} {...otherProps}>\n      <StyledToolWindowHeaderContent>{children}</StyledToolWindowHeaderContent>\n      <StyledToolWindowHeaderActions>\n        <ActionToolbar>\n          {additionalActions && (\n            <>\n              {additionalActions}\n              <StyledHorizontalSeparator />\n            </>\n          )}\n          {state.viewMode === \"float\" && (\n            <ActionButton onPress={() => changeViewMode(\"docked_pinned\")}>\n              <PlatformIcon\n                icon={`actions/${\n                  anchors.find(\n                    ({ anchor, isSplit }) =>\n                      anchor === state.anchor && isSplit === state.isSplit\n                  )?.id\n                }`}\n              />\n            </ActionButton>\n          )}\n          <MenuTrigger\n            renderMenu={({ menuProps }) => {\n              return <ToolWindowSettingsIconMenu menuProps={menuProps} />;\n            }}\n          >\n            {(props, ref) => (\n              <ActionButton {...props} ref={ref}>\n                <PlatformIcon icon=\"general/gearPlain\" />\n              </ActionButton>\n            )}\n          </MenuTrigger>\n          <ActionButton onPress={hide}>\n            <PlatformIcon icon=\"general/hideToolWindow\" />\n          </ActionButton>\n        </ActionToolbar>\n      </StyledToolWindowHeaderActions>\n    </StyledToolWindowHeader>\n  );\n};\n","import { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport React, {\n  FocusEventHandler,\n  RefObject,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useToolWindowState } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { useWindowMoveHandle } from \"@intellij-platform/core/Window\";\n\nexport function useToolWindow(\n  {\n    containerRef,\n    contentRef,\n    focusableContentRef,\n  }: {\n    containerRef: RefObject<HTMLElement>;\n    contentRef: RefObject<Element>;\n    focusableContentRef: RefObject<{ focus: () => void }>;\n  },\n  { onFocusChange }: { onFocusChange?: (focused: boolean) => void } = {}\n) {\n  const [contentHasFocus, setContentHasFocus] = useState(false);\n  /**\n   * NOTE: useFocusWithin form @react-aria/interactions (at least until 3.5.1) has a couple of problem, because of which\n   * we may need to implement our own version of it.\n   * - It doesn't play nice with FocusScope with `contain` set to true. When something is blurred, FocusScope prevents\n   *   that by restoring focus back immediately. but the blur event is already caught by useFocusWithin. One solution\n   *   would be to change useFocusWithin implementation to ignore these blur events that are immediately followed\n   *   by a focus event that keeps the focus in.\n   * - useFocusWithin has an inconsistent behaviour when it comes to Portals. Since it uses react props for handling\n   *   focus and blur, the [react tree determines event bubbling](https://reactjs.org/docs/portals.html#event-bubbling-through-portals),\n   *   which can be a very nice feature, when an overlay (rendered in a portal) grabs the focus, which should still\n   *   be seen as \"within\". But the problems is that the current implementation uses DOM `.contains(e.relatedTarget)`\n   *   method to determine if focus is no longer within. First of all, using react tree or dom tree to determine \"within\"\n   *   can be seen as an option perhaps. Secondly, it should be consistent on focus and blur.\n   *\n   *   Right now these problems are no big deal. but it may become an issue when portals are used within the content\n   *   of the tool window.\n   *\n   * NOTE: In the original implementation, when a heading toolbar button opens a menu, and focus goes to menu, the\n   * header loses the focus appearance, ant it relies only on content having the focus.\n   */\n  const { focusWithinProps: contentFocusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setContentHasFocus,\n  });\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: onFocusChange,\n  });\n\n  const { toolWindowProps: autoHideProps } = useAutoHide();\n\n  const { focusDelegatorProps } = useFocusDelegator(\n    focusableContentRef,\n    contentRef\n  );\n\n  // If there is no focusable content rendered in the tool window, nothing will be autofocused. In that case\n  // we will focus the tool window container itself as a fallback.\n  useEffect(() => {\n    if (\n      !document.activeElement ||\n      !containerRef.current?.contains(document.activeElement)\n    ) {\n      containerRef.current?.focus();\n    }\n  }, []);\n\n  const { moveHandleProps } = useWindowMoveHandle();\n\n  return {\n    contentHasFocus,\n    toolWindowProps: mergeProps(\n      focusDelegatorProps,\n      focusWithinProps,\n      autoHideProps,\n      {\n        tabIndex: -1,\n      }\n    ),\n    toolWindowContentProps: contentFocusWithinProps,\n    toolWindowHeaderProps: moveHandleProps,\n  };\n}\n\n/**\n * Applies the auto hide behaviour of tool window based on view mode information and by handling focus and blur events,\n * on the root tool window element. Returns the necessary props that should be applied to the root tool window element.\n * The implementation is not perfect and may not 100% match the original Intellij Platform implementation.\n * If this focus based implementation for auto hide proves to be fragile and not good enough in future,\n * an alternative approach would be to move auto hide logic to the state management logic as much as possible,\n * and limit the focus based auto-hiding to only when the focus goes within the main content area. That should have\n * less focus-related edge cases.\n */\nfunction useAutoHide() {\n  const { blur } = useToolWindowState();\n  const hideTimeoutId = useRef<number | null>(null);\n  const { focusWithinProps: windowFocusWithinProps } = useFocusWithin({\n    onBlurWithin: (e) => {\n      // setTimeout and windowHasFocusRef is to work around the problem with useFocusWithin, described above.\n      hideTimeoutId.current = window.setTimeout(() => {\n        // Sometimes when the element is blurred, the subsequent focus that is triggered by FocusScope to keep the focus\n        // is a little delayed and therefore after the timeout reaches. It seem to happen only when a non-focusable\n        // area is clicked. We mitigate it by ignoring blur events where nothing is focused. It's not a problem\n        // at least with `DefaultToolWindow` implementation that uses a FocusScope.\n        const isSomethingElseFocused = e.relatedTarget;\n        if (isSomethingElseFocused) {\n          blur();\n        }\n      });\n    },\n    onFocusWithin: () => {\n      if (hideTimeoutId.current !== null) {\n        clearTimeout(hideTimeoutId.current);\n        hideTimeoutId.current = null;\n      }\n    },\n  });\n  return {\n    toolWindowProps: windowFocusWithinProps,\n  };\n}\n\n/**\n * Allows for having a focus scope (or simply a focusable element) get focused in a broader container,\n * by handling the focus element on the container, and forwarding the focus onto the target focus scope or element,\n * if currently focused element is not within that boundary.\n * Ensuring the container element is focusable is not something this hook does.\n */\nfunction useFocusDelegator(\n  focusableContentRef: RefObject<{ focus: () => void }>,\n  contentRef: RefObject<Element>\n) {\n  const onFocus: FocusEventHandler = (event) => {\n    if (event.target !== event.currentTarget) {\n      // only when this container is focused. not when anything inside is focused.\n      return;\n    }\n    const possiblyBlurredElement = event.relatedTarget;\n    if (\n      possiblyBlurredElement instanceof Element &&\n      contentRef.current?.contains(possiblyBlurredElement)\n    ) {\n      // if anything inside the content is being blurred while the container is getting focused, don't do anything\n      // let the focus stay where it is.\n      return;\n    }\n    focusableContentRef.current?.focus();\n  };\n  return { focusDelegatorProps: { onFocus } };\n}\n","import React, { useContext, useMemo, useRef } from \"react\";\nimport { styled } from \"../styled\";\nimport { DefaultToolWindowHeader } from \"./DefaultToolWindowHeader\";\nimport { useToolWindow } from \"./useToolWindow\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\n\nexport interface DefaultToolWindowProps {\n  /**\n   * title to be shown on the left side of the tool window header.\n   */\n  headerContent?: React.ReactNode;\n  /**\n   * additional action buttons to be rendered before the default gear and hide buttons.\n   */\n  additionalActions?: React.ReactNode;\n  onFocusChange?: (focused: boolean) => void;\n}\n\nconst StyledToolWindowContainer = styled.div`\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 1;\n`;\nconst StyledToolWindowContent = styled.div`\n  flex: 1;\n  overflow: auto;\n`;\n\ninterface DefaultToolWindowContextObj {\n  hasFocus?: boolean;\n}\n\nconst DefaultToolWindowContext = React.createContext<DefaultToolWindowContextObj>(\n  {\n    hasFocus: false,\n  }\n);\n\nexport const useDefaultToolWindowContext = () =>\n  useContext(DefaultToolWindowContext);\n/**\n * Default component for rendering the content of a tool window. It supports a header and a scrollable area.\n * The header supports showing a content, and some default+custom actions on the right.\n *\n * @see MultiContentToolWindow\n *\n * Remaining features:\n * - Additional gear menu actions.\n *\n */\nexport const DefaultToolWindow: React.FC<DefaultToolWindowProps> = ({\n  headerContent,\n  children,\n  additionalActions,\n  onFocusChange,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const focusableContentRef = useRef<{ focus: () => void }>(null);\n  const {\n    // NOTE: we might as well use :focus-within and target StyledToolWindowHeader to set the background, but it's not\n    // a clear improvement.\n    contentHasFocus,\n    toolWindowProps,\n    toolWindowContentProps,\n    toolWindowHeaderProps,\n  } = useToolWindow(\n    { containerRef, contentRef, focusableContentRef },\n    {\n      onFocusChange,\n    }\n  );\n\n  const defaultToolWindowContext = useMemo(\n    () => ({\n      hasFocus: contentHasFocus,\n    }),\n    [contentHasFocus]\n  );\n\n  return (\n    <StyledToolWindowContainer {...toolWindowProps} ref={containerRef}>\n      <DefaultToolWindowContext.Provider value={defaultToolWindowContext}>\n        <DefaultToolWindowHeader\n          additionalActions={additionalActions}\n          contentHasFocus={contentHasFocus}\n          {...toolWindowHeaderProps}\n        >\n          {headerContent}\n        </DefaultToolWindowHeader>\n        <StyledToolWindowContent ref={contentRef} {...toolWindowContentProps}>\n          {/**\n           * FIXME: adding `contain` prevents focus from moving to another focus scope both with mouse and keyboard.\n           * If we want to follow the Intellij Platform behaviour exactly, we need a kind of focus containment, where\n           * focus is trapped only for keyboard interaction, and user can still move focus by clicking another scope.\n           * Maybe a custom useFocusContainment hook and a separate option for activating it on our own FocusScope.\n           */}\n          <FocusScope ref={focusableContentRef} autoFocus>\n            {children}\n          </FocusScope>\n        </StyledToolWindowContent>\n      </DefaultToolWindowContext.Provider>\n    </StyledToolWindowContainer>\n  );\n};\n","import React, { Key, useEffect, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { DefaultToolWindow, DefaultToolWindowProps } from \"./DefaultToolWindow\";\nimport { TabItem } from \"../Tabs/TabItem\";\nimport { usePrevious } from \"../utils/usePrevious\";\nimport { ToolWindowTabs } from \"../Tabs/ToolWindowTabs/ToolWindowTabs\";\n\nexport interface MultiContentToolWindowProps\n  extends Pick<DefaultToolWindowProps, \"additionalActions\"> {\n  /**\n   * List of contents that will be accessible with a list of grouped or ungrouped tabs in the tool window header.\n   */\n  children:\n    | React.ReactElement<MultiContentToolWindowContentProps>[]\n    | React.ReactElement<MultiContentToolWindowContentProps>;\n  /**\n   * Key of currently active content\n   */\n  activeKey?: Key;\n  defaultActiveKey?: Key;\n  onActiveKeyChange?: (key: Key) => void;\n  /**\n   * If true, it groups tabs in a dropdown instead.\n   *\n   * @default false\n   */\n  groupTabs?: boolean;\n  /**\n   * The content shown as the title of the tool window, before content switcher (tabs or dropdown).\n   * For more control over header content, you can pass a function which accepts rendered content switcher,\n   * and then you can compose it with other content as you wish. Use case examples of function variant:\n   * - You want to render a title before the content switcher, and something after the tabs. Like a \"+\" button in\n   *   terminal.\n   * - You want to conditionally move inner-content header up to the tool window header, if there is only one tab. In\n   *   that case you don't need to render the content switcher at all. An example is the new design in the \"Run\"\n   *   tool window.\n   */\n  headerContent?:\n    | React.ReactNode\n    | ((props: { renderedViewSwitcher: React.ReactNode }) => React.ReactNode);\n}\n\n/**\n * Implemented on top of DefaultToolWindow, allows for multiple tabbed content within a tool window.\n * Remaining features:\n * - Although trivial, group tabs action in tool window header gear icon is intentionally left unimplemented for now,\n *   until an increment on action system is done.\n * - Grouped mode is not implemented currently, as we don't have a dropdown component. Though it seems it's just a\n *   MenuTrigger and some trigger with a arrow icon.\n */\nexport const MultiViewToolWindow = ({\n  groupTabs,\n  children,\n  headerContent,\n  ...props\n}: MultiContentToolWindowProps) => {\n  const [isToolWindowFocused, setToolWindowFocused] = useState(false);\n  const [activeKey, setActiveKey] = useControlledState(\n    props.activeKey!,\n    props.defaultActiveKey!,\n    props.onActiveKeyChange!\n  );\n  const contents = React.Children.toArray(children)\n    .filter(\n      (\n        child\n      ): child is React.ReactElement<MultiContentToolWindowContentProps> => {\n        const validChild =\n          React.isValidElement(child) &&\n          child.type === MultiContentToolWindowContent;\n        if (!validChild) {\n          // FIXME: only warn in dev mode\n          console.warn(\n            \"You are not supposed to render anything but MultiContentToolWindowContent inside MultiViewToolWindow. Rendered: \",\n            child\n          );\n        }\n        return validChild;\n      }\n    )\n    // The following map is because of what React.Children.toArray does to keys: https://stackoverflow.com/q/33791401/1493081\n    // It doesn't look like a good idea since and there might be better ways to fix this, or at least make sure it would\n    // work in all cases. FIXME\n    .map((content) => ({ ...content, key: `${content.key}`.slice(2) as Key }));\n  const renderContentSwitcher = () => {\n    if (groupTabs) {\n      console.error(\n        \"groupTab is not supported yet in MultiViewToolWindow. Will fallback to ungrouped tabs\"\n      );\n    }\n    return (\n      <ToolWindowTabs\n        noBorders\n        items={contents}\n        active={isToolWindowFocused}\n        selectedKey={activeKey}\n        onSelectionChange={setActiveKey}\n      >\n        {(item) => <TabItem key={item.key}>{item.props.tabContent}</TabItem>}\n      </ToolWindowTabs>\n    );\n  };\n  const renderedViewSwitcher = renderContentSwitcher();\n\n  // We set the active key if it's not set or is invalid. A common scenario is when tabs are closable, and when the\n  // active tab is closed. You would always want to previous tab to get activated in such cases, instead of the first\n  // one. By having the logic here, there is no need to repeat the same logic in each use case. Although, it can also\n  // be moved into a state management utility for tabs, maybe in the future.\n\n  const keys = contents.map(({ key }) => key);\n  const previousKeys = usePrevious(keys);\n  useEffect(() => {\n    if (!keys.includes(activeKey)) {\n      const newActiveKey = keys[previousKeys.indexOf(activeKey) - 1] ?? keys[0];\n      if (newActiveKey != undefined) {\n        setActiveKey(newActiveKey);\n      }\n    }\n  });\n\n  const activeContent = contents.find(\n    (content) => activeKey == undefined || activeKey === content.key\n  );\n  return (\n    <DefaultToolWindow\n      onFocusChange={setToolWindowFocused}\n      headerContent={\n        typeof headerContent === \"function\" ? (\n          headerContent({ renderedViewSwitcher })\n        ) : (\n          <>\n            {headerContent}\n            {renderedViewSwitcher}\n          </>\n        )\n      }\n      additionalActions={props.additionalActions}\n    >\n      {activeContent?.props.children}\n    </DefaultToolWindow>\n  );\n};\n\nexport interface MultiContentToolWindowContentProps {\n  key: Key;\n  /**\n   * Used in the corresponding tab.\n   */\n  tabContent: React.ReactNode;\n\n  children: React.ReactNode;\n}\n\nconst MultiContentToolWindowContent = ({}: MultiContentToolWindowContentProps) => {\n  throw new Error(\n    \"MultiContentToolWindowContent is not meant to be rendered directly. You should only use it in MultiViewToolWindow\"\n  );\n};\n\nMultiViewToolWindow.View = MultiContentToolWindowContent;\n","import { isMac } from \"@react-aria/utils\";\nimport React, { HTMLProps } from \"react\";\nimport { css } from \"styled-components\";\nimport { MAC_WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { Theme } from \"../Theme/Theme\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\nimport {\n  useResizableMovableWindow,\n  WindowResizeHandles,\n  WindowInteractionHandler,\n} from \"@intellij-platform/core/Window\";\n\nconst StyledFloatView = styled.div`\n  position: absolute;\n  background: inherit;\n  // border color doesn't seem to be correct and needs more investigation. might be even os-specific and outside\n  // theme colors.\n  border: ${({ theme }) => `1px solid ${theme.color(\"Component.borderColor\")}`};\n  ${isMac() &&\n  css<{ theme: Theme }>`\n    ${MAC_WINDOW_SHADOW};\n    border-radius: 8px;\n  `}\n  z-index: 2;\n`;\n\n/**\n * Container for tool windows in float view mode. It handles some visual aspects like the border and shadow, as well as\n * UI interactions for changing the floatingBound of the tool window.\n */\nexport const FloatView: React.FC<\n  {\n    state: FloatWindowState;\n    onBoundsChange: (bounds: WindowBounds) => void;\n  } & Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">\n> = ({ children, state: { bounds }, onBoundsChange, ...otherProps }) => {\n  const {\n    bounds: effectiveBounds,\n    windowInteractionHandlerProps,\n  } = useResizableMovableWindow({\n    bounds,\n    onBoundsChange,\n  });\n\n  return (\n    <StyledFloatView\n      {...otherProps}\n      style={{ ...otherProps.style, ...effectiveBounds }}\n    >\n      <WindowInteractionHandler {...windowInteractionHandlerProps}>\n        <WindowResizeHandles />\n        {children}\n      </WindowInteractionHandler>\n    </StyledFloatView>\n  );\n};\n","import { move } from \"ramda\";\nimport React, { HTMLProps, Key, useState } from \"react\";\nimport { FloatView } from \"./FloatView\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\n\n// NOTE: useStackedLayersState and useStackedLayers are generic but kept here since there is no other use case at the\n// moment. They should be moved to their own file(s) when/if other use case came up.\n\ninterface StackedLayersState<T> {\n  /**\n   * Sorted list of items representing layers.\n   */\n  sorted: T[];\n  /**\n   * A function to be used when the layer should be brought to front, typically based on some UI interaction.\n   */\n  bringToFront: (index: number) => void;\n}\n\n/**\n * State management for a stacked list of layers with **bring to front** functionality.\n */\nfunction useStackedLayersState<T, K = React.Key>(\n  /**\n   * A list of arbitrary items representing stacked layers.\n   */\n  items: T[],\n  /**\n   * A function for converting each item into a key which consistently identifies each item, in subsequent renders.\n   * It's used to maintain current sorting state. Although it can be of any type, it's usually a string or number.\n   */\n  getKey: (item: T) => K\n): StackedLayersState<T> {\n  // Local state for now, but can easily change to controllable if needed.\n  const [sortedKeys, setSortedKeys] = useState<K[]>([]);\n  const sorted = items.sort(\n    (a, b) => sortedKeys.indexOf(getKey(a)) - sortedKeys.indexOf(getKey(b))\n  );\n  return {\n    sorted,\n    bringToFront: (index: number) => {\n      setSortedKeys(move(index, -1, sorted).map(getKey));\n    },\n  };\n}\n\n/**\n * Given the state of a stacked list of layers, returns DOM props to be applied to each layer for interaction-based\n * \"bring to front\" behaviour.\n */\nfunction useStackedLayers<T>(\n  state: StackedLayersState<T>\n): { layersProps: Array<HTMLProps<HTMLElement>> } {\n  return {\n    layersProps: state.sorted.map((_, index) => ({\n      onFocus: () => {\n        state.bringToFront(index);\n      },\n    })),\n  };\n}\n\n/**\n * Renders float tool windows.\n * - handles resize and move actions for float windows.\n * - handles layering of float tool windows.\n */\nexport function FloatToolWindows({\n  floatWindows = [],\n  onBoundsChange,\n  renderToolWindow,\n}: {\n  floatWindows: FloatWindowState[] | undefined;\n  onBoundsChange: (key: Key, bounds: WindowBounds) => void;\n  renderToolWindow: (key: Key) => React.ReactNode;\n}) {\n  const stackedFloatWindows = useStackedLayersState(\n    floatWindows,\n    ({ key }) => key\n  );\n  const { layersProps } = useStackedLayers(stackedFloatWindows);\n  // sorted list is used to render layers. We could as well use z-index and always render with the same order, but\n  // it doesn't really matter as long as key is set.\n  return (\n    <>\n      {stackedFloatWindows.sorted.map((toolWindow, index) => (\n        <FloatView\n          key={toolWindow.key}\n          state={toolWindow}\n          {...layersProps[index]}\n          onBoundsChange={(bounds) => onBoundsChange(toolWindow.key, bounds)}\n        >\n          {renderToolWindow(toolWindow.key)}\n        </FloatView>\n      ))}\n    </>\n  );\n}\n","import React, {\n  Key,\n  MutableRefObject,\n  RefObject,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"../utils/useLatest\";\nimport { DropPosition } from \"./createGetDropPosition\";\nimport { UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor } from \"./utils\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\ntype StripeLocation<T extends unknown> = {\n  index: number;\n  anchor: Anchor;\n  isSplit: boolean;\n};\ntype MovableStripeProps<T> = {\n  stripeElRef: React.RefObject<HTMLElement>;\n  getKey: (item: T) => Key;\n  anchor: Anchor;\n  mainItems: T[];\n  splitItems: T[];\n  createGetDropPosition: (\n    key: Key\n  ) => (draggedRect: Rect) => DropPosition | null;\n};\n\ntype MovableToolWindowStripeContextType<T> = {\n  addStripe: <T>(\n    id: string,\n    propsRef: MutableRefObject<MovableStripeProps<T>>\n  ) => () => void;\n  startMove: (id: string, args: { from: Rect; key: Key }) => void;\n  move: (args: { to: Rect }) => void;\n  endMove: () => void;\n  dropPosition: null | { id: string; dropPosition: DropPosition };\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n};\n\nexport type MovableToolWindowStripeProviderProps<T = unknown> = {\n  children: React.ReactNode;\n  onMove: (args: { from: StripeLocation<T>; to: StripeLocation<T> }) => void;\n};\n\nconst MovableToolWindowStripeContext = React.createContext<MovableToolWindowStripeContextType<any> | null>(\n  null\n);\n\n/**\n * A wrapper component to render around `ToolWindowStripe`s to make their button movable. Stripe buttons then become\n * draggable and can be moved either within the same `ToolWindowStripe` or across different ones.\n * @param onMove: called when a stripe button is moved from one anchor to another.\n * @param children: child element tree, containing one or more ToolWindowStripe elements. No need to be direct children.\n */\nexport const MovableToolWindowStripeProvider = <T extends unknown>({\n  onMove,\n  children,\n}: MovableToolWindowStripeProviderProps<T>) => {\n  const stripes = useRef<{\n    [id: string]: RefObject<MovableStripeProps<T>>;\n  }>({});\n  const [draggingRect, setDraggingRect] = useState<Rect | null>(null);\n  const [draggingKey, setDraggingKey] = useState<Key | null>(null);\n  const [dropPosition, setDropPosition] = useState<{\n    id: string;\n    dropPosition: DropPosition;\n  } | null>(null);\n  const getDropPositionRef = useRef<\n    (\n      to: Rect\n    ) => {\n      id: string;\n      dropPosition: DropPosition;\n    } | null\n  >(() => null);\n  const moveStartLocationRef = useRef<null | {\n    id: string;\n    index: number;\n    anchor: Anchor;\n    isSplit: boolean;\n  }>(null);\n\n  const contextValue = useMemo(\n    (): MovableToolWindowStripeContextType<T> => ({\n      addStripe: (id, propsRef) => {\n        if (stripes.current[id]) {\n          console.error(`multiple stripes with the same id \"${id}`);\n        }\n        // @ts-expect-error\n        stripes.current[id] = propsRef;\n        return () => {\n          delete stripes.current[id];\n        };\n      },\n      startMove: (id, { from, key }) => {\n        const stripe = stripes.current[id]?.current;\n        if (!stripe) {\n          return;\n        }\n        const { stripeElRef } = stripe;\n        const stripeElement = stripeElRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n\n        // Running the following two state setters immediately affect the layout\n        // in a way that is necessary for drop position calculation, so the order\n        // is important\n        setDraggingRect(getItemRect(key).toJSON());\n        setDraggingKey(key);\n\n        const indexInMain = stripe.mainItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        const indexInSplit = stripe.splitItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        moveStartLocationRef.current = {\n          id,\n          anchor: stripe.anchor,\n          index: indexInMain > -1 ? indexInMain : indexInSplit,\n          isSplit: indexInSplit > -1,\n        };\n\n        const dropPositionGetters = Object.entries(stripes.current).map(\n          ([id, stripe]) =>\n            [id, stripe.current!.createGetDropPosition(key)] as const\n        );\n        const getDropPosition = (draggedRect: Rect) => {\n          for (const [id, getDropPosition] of dropPositionGetters) {\n            const dropPosition = getDropPosition(draggedRect);\n            if (dropPosition) {\n              return {\n                id,\n                dropPosition,\n              };\n            }\n          }\n          return null;\n        };\n\n        setDropPosition(getDropPosition(from));\n\n        getDropPositionRef.current = getDropPosition;\n      },\n      move: ({ to }) => {\n        setDropPosition(getDropPositionRef.current(to));\n      },\n      endMove: () => {\n        if (dropPosition && draggingKey) {\n          onMove({\n            from: moveStartLocationRef.current!,\n            to: {\n              anchor: dropPosition.id as Anchor /*FIXME*/,\n              index: dropPosition.dropPosition.index,\n              isSplit: dropPosition.dropPosition.split,\n            },\n          });\n        }\n        setDraggingKey(null);\n        setDropPosition(null);\n        setDraggingRect(null);\n      },\n      dropPosition,\n      draggingRect,\n      draggingKey,\n    }),\n    [dropPosition, draggingKey, draggingRect]\n  );\n\n  return (\n    <MovableToolWindowStripeContext.Provider value={contextValue}>\n      {children}\n    </MovableToolWindowStripeContext.Provider>\n  );\n};\n\nexport function useMovableStripeButtons<T>(props: MovableStripeProps<T>) {\n  // Seems reasonable to assume anchor is unique. Also current onMove signature is coupled with anchor, not a more generic id.\n  const id = props.anchor;\n  const context = useContext(MovableToolWindowStripeContext);\n  const latestPropsRef = useLatest(props);\n  useEffect(() => {\n    if (context) {\n      return context.addStripe(id, latestPropsRef);\n    }\n  }, [context, id]);\n\n  const getProps = (\n    key: Key\n  ): Pick<\n    Required<UseElementMoveOptions<unknown>>,\n    \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n  > & { moveDisabled: boolean } => ({\n    moveDisabled: !context,\n    onMoveStart: ({ from }) => {\n      context?.startMove?.(id, { from, key });\n    },\n    onMove: ({ to }) => {\n      context?.move({ to });\n    },\n    onMoveEnd: () => {\n      context?.endMove();\n    },\n  });\n  return {\n    getProps,\n    draggingRect: context?.draggingRect ?? null,\n    dropPosition:\n      context?.dropPosition?.id === id\n        ? context?.dropPosition.dropPosition\n        : null,\n    draggingKey: context?.draggingKey ?? null,\n  };\n}\n","import { styled } from \"../styled\";\nimport { css } from \"styled-components\";\n\nconst TopStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: ts;\n`;\nconst BottomStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: bs;\n`;\nconst LeftStripe = styled.div`\n  grid-area: ls;\n`;\nconst RightStripe = styled.div`\n  grid-area: rs;\n`;\nconst MainView = styled.div`\n  grid-area: main;\n  min-height: 0; // necessary to prevent overflow;\n  position: relative; // necessary for undock views which are absolute positioned\n  background: inherit;\n  min-width: 0; // very important for layout. If not set, resizing tool windows can cause weird scrollbar inside tool windows pane.\n`;\n\n/**\n * The container which renders top,bottom,left and right stripes with a centered content.\n * responsible only for the layout of the stripes and the centered content. layout doesn't\n * include the opened tool windows on different sides and is just about the stripes around\n * the center area.\n * It also supports toggling stripes visibility.\n */\nconst Shell = styled.div<{ hideStripes: boolean }>`\n  display: grid;\n  grid-template-columns: min-content auto min-content;\n  grid-template-rows: min-content auto min-content;\n  grid-template-areas:\n    \".   ts   .\"\n    \"ls main rs\"\n    \".   bs   .\";\n\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  ${({ hideStripes }) =>\n    hideStripes &&\n    css`\n      ${TopStripe},\n      ${BottomStripe}, \n      ${LeftStripe}, \n      ${RightStripe} {\n        display: none;\n      }\n    `}\n`;\n\nexport const StyledToolWindowOuterLayout = {\n  Shell,\n  TopStripe,\n  BottomStripe,\n  LeftStripe,\n  RightStripe,\n  MainView,\n};\n","import { compose, filter, groupBy, map, pipe, prop, sortBy } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\nimport {\n  ToolWindowsState,\n  ToolWindowState,\n  ViewMode,\n} from \"./ToolWindowsState\";\n\ntype ToolWindowStateWithKey = { key: Key } & ToolWindowState;\n\nexport interface StripesState {\n  main: Key[];\n  split: Key[];\n  activeKeys: Key[];\n}\n\n/**\n * Represents UI state of the split view (aka secondary or side view) within a docked view at one of the four sides.\n */\ntype SideDockedSplitState = {\n  key: Key;\n  /**\n   * relative size of the split view inside a docked view. Note that this is intentionally a fraction size (0≤size<1),\n   * based on the expected behaviour. split views inside a docked view are not fixed sized and resizing the window\n   * affect their size. This is not the case for the docked views themselves inside the main layout, which have fixed\n   * size which is not affected by window resizing.\n   */\n  sizeFraction: number;\n};\n\n// A potential improvement for this and similar nullable types like SideDockedState.split might be to avoid null type\n// and have it like { open: false} | {open: true, ...relevantProps}\n// Not sure if it's really preferred in terms of usage in the react component.\nexport type SideDockedState = null | {\n  size: number;\n  mainKey: Key;\n  split: SideDockedSplitState | null;\n};\n\nexport type SideUnDockedState = null | {\n  size: number;\n  key: Key;\n};\n\nexport interface SideState {\n  docked: SideDockedState;\n  undocked: SideUnDockedState;\n  stripes: StripesState;\n}\n\nexport interface FloatWindowState {\n  key: Key;\n  bounds: Exclude<ToolWindowState[\"floatingBounds\"], undefined>;\n}\n\n/**\n * Derived from ToolWindowsState, it represents the same information in a away that is suitable for ToolWindows\n * component to render the layout.\n */\nexport interface ToolWindowsLayoutState {\n  left: SideState;\n  top: SideState;\n  right: SideState;\n  bottom: SideState;\n  floatWindows: Array<FloatWindowState>;\n  windows: Array<FloatWindowState>;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nconst getSizeInAnchor = (containerSize: ContainerSize, anchor: Anchor) =>\n  containerSize[isHorizontalToolWindow(anchor) ? \"height\" : \"width\"];\n\nconst mapToKey = map<ToolWindowStateWithKey, Key>(prop(\"key\"));\nconst sortAndMapToKey = compose(\n  mapToKey,\n  sortBy(({ order }: ToolWindowStateWithKey) => order)\n);\nconst filterMains = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => !isSplit\n);\nconst getMains = compose(sortAndMapToKey, filterMains);\nconst filterSplits = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => isSplit\n);\nconst filterVisible = (expectedViewMode: ViewMode | ViewMode[] = []) =>\n  filter<ToolWindowStateWithKey, \"array\">(\n    ({ viewMode, isVisible }: ToolWindowStateWithKey) =>\n      isVisible &&\n      ([] as ViewMode[]).concat(expectedViewMode).includes(viewMode)\n  );\nconst getSplits = compose(sortAndMapToKey, filterSplits);\n\nconst filterVisibleDocked = filterVisible([\"docked_unpinned\", \"docked_pinned\"]);\nconst filterVisibleUnDocked = filterVisible(\"undock\");\n\nconst getDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideDockedState => {\n  const docks = filterVisibleDocked(toolWindows);\n  const mains = filterMains(docks);\n  const splits = filterSplits(docks);\n  if (mains.length > 1 || splits.length > 1) {\n    throw new Error(\n      \"More than one visible docked window in a side is not possible\"\n    );\n  }\n  if (mains[0] || splits[0]) {\n    const weight = mains[0]?.weight || splits[0]?.weight;\n    return {\n      mainKey: mains[0]?.key || splits[0]?.key,\n      split:\n        mains[0]?.key && splits[0]?.key\n          ? {\n              key: splits[0].key,\n              sizeFraction: mains[0].weight\n                ? 1 - mains[0].sideWeight\n                : splits[0].sideWeight,\n            }\n          : null,\n      size: weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  return null;\n};\n\nconst getUnDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideUnDockedState => {\n  const windows = filterVisibleUnDocked(toolWindows);\n  if (windows.length === 1) {\n    return {\n      key: windows[0].key,\n      size: windows[0].weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  if (windows.length === 0) {\n    return null;\n  }\n  throw new Error(\n    \"More than one visible undocked window in a side is not possible\"\n  );\n};\n\nconst getSideState = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideState => ({\n  stripes: {\n    main: getMains(toolWindows),\n    split: getSplits(toolWindows),\n    activeKeys: mapToKey(toolWindows.filter(({ isVisible }) => isVisible)),\n  },\n  undocked: getUnDocked(anchor, containerSize, toolWindows),\n  docked: getDocked(anchor, containerSize, toolWindows),\n});\n\nconst DEFAULT_HEIGHT = 300;\nconst DEFAULT_WIDTH = 400;\nconst getFloatWindowState = (containerSize: ContainerSize) => ({\n  floatingBounds: bounds = {\n    top: containerSize.height / 2 - DEFAULT_HEIGHT / 2,\n    left: containerSize.width / 2 - DEFAULT_WIDTH / 2,\n    height: DEFAULT_HEIGHT,\n    width: DEFAULT_WIDTH,\n  },\n  key,\n}: ToolWindowStateWithKey): FloatWindowState => ({ bounds, key });\n\nconst getFloatWindowsState = (\n  viewMode: \"float\" | \"window\",\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n) =>\n  pipe(\n    filterVisible(viewMode),\n    map<ToolWindowStateWithKey, FloatWindowState>(\n      getFloatWindowState(containerSize)\n    )\n  )(toolWindows);\n\nexport function getToolWindowsLayoutState(\n  state: Readonly<ToolWindowsState>,\n  containerSize: ContainerSize\n): ToolWindowsLayoutState {\n  const toolWindows = Object.keys(state.windows).map((key) => ({\n    ...state.windows[key],\n    key,\n  }));\n  const { top = [], bottom = [], left = [], right = [] } = groupBy(\n    ({ anchor }) => anchor,\n    toolWindows\n  );\n  return {\n    left: getSideState(\"left\", containerSize, left),\n    top: getSideState(\"top\", containerSize, top),\n    right: getSideState(\"right\", containerSize, right),\n    bottom: getSideState(\"bottom\", containerSize, bottom),\n    windows: getFloatWindowsState(\"window\", containerSize, toolWindows),\n    floatWindows: getFloatWindowsState(\"float\", containerSize, toolWindows),\n  };\n}\n","import { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { Key } from \"react\";\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface DropPosition {\n  index: number;\n  split: boolean;\n\n  relative?: {\n    placement: \"before\" | \"after\";\n    key: Key;\n  };\n}\n\n/**\n * TODO: Add a few words about what this function do.\n */\nexport const createGetDropPosition = <T extends any>({\n  anchor,\n  stripeElement,\n  splitItems,\n  mainItems,\n  getItemRect,\n  getKey,\n}: {\n  stripeElement: HTMLElement;\n  anchor: Anchor;\n  getItemRect: (key: Key) => Rect;\n  getKey: (key: T) => Key;\n  mainItems: T[];\n  splitItems: T[];\n}): ((draggedRect: Rect) => DropPosition | null) => {\n  // Note: It may be tempting to calculate stripe element boundaries just once\n  // here, since it's not supposed to change during a drag session, but it\n  // can change due to getting empty when the only button is being dragged out.\n  const getStripeRect = () => stripeElement.getBoundingClientRect();\n\n  const getCanDrop = (draggingRect: Rect) => {\n    const stripeRect = getStripeRect();\n    return (\n      draggingRect.right > stripeRect.left - stripeRect.width &&\n      draggingRect.left < stripeRect.right &&\n      draggingRect.bottom > stripeRect.top - stripeRect.height &&\n      draggingRect.top < stripeRect.bottom\n    );\n  };\n\n  const start = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.left : rect.top;\n  const end = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.right : rect.bottom;\n\n  const getKeyToOffsets = (items: T[]) => {\n    const keyToOffsets: Record<Key, { start: number; end: number }> = {};\n    items.forEach((item) => {\n      const key = getKey(item);\n      const boundingRect = getItemRect(key);\n      keyToOffsets[key] = {\n        start: start(boundingRect),\n        end: end(boundingRect),\n      };\n    });\n    return keyToOffsets;\n  };\n\n  const getDropPositions = (\n    items: T[],\n    split = false\n    // FIXME: score is a bad name. it's quite the opposite! the less means the higher score.\n  ): Array<DropPosition & { score: (rect: Rect) => number }> => {\n    const getRef = split ? end : start;\n    if (items.length === 0) {\n      // if the section is empty, we should still allow adding to it.\n      return [\n        {\n          index: 0,\n          split,\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - getRef(getStripeRect())),\n        },\n      ];\n    }\n    return items.flatMap((item, index) => {\n      const key = getKey(item);\n      return [\n        {\n          index,\n          split,\n          relative: { key, placement: \"before\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].start),\n        },\n        {\n          index: index + 1,\n          split,\n          relative: { key, placement: \"after\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].end),\n        },\n      ];\n    });\n  };\n\n  const keyToOffsets = getKeyToOffsets([...mainItems, ...splitItems]);\n\n  const dropPositions = [\n    ...getDropPositions(mainItems),\n    ...getDropPositions(splitItems, true),\n  ];\n\n  let lastDropPosition: DropPosition | null = null;\n  return (draggingRect: Rect) => {\n    if (!getCanDrop(draggingRect)) {\n      return null;\n    }\n    const result = dropPositions.reduce(\n      (bestMatch, candidate) => {\n        const score = candidate.score(draggingRect);\n        if (!bestMatch || score < bestMatch.score) {\n          return {\n            ...candidate,\n            score,\n          };\n        }\n        return bestMatch;\n      },\n      null as\n        | null\n        | (DropPosition & {\n            score: number;\n          })\n    );\n\n    if (!result) {\n      return null;\n    }\n    if (\n      result.split !== lastDropPosition?.split ||\n      result.index !== lastDropPosition?.index\n    ) {\n      lastDropPosition = result;\n    }\n    return lastDropPosition;\n  };\n};\n","import { StyledIconWrapper } from \"../Icon/StyledIconWrapper\";\nimport { styled } from \"../styled\";\nimport React from \"react\";\nimport { css } from \"styled-components\";\nimport { Anchor } from \"./utils\";\n\nexport interface StyledToolWindowStripeButtonProps {\n  anchor: Anchor;\n  active?: boolean;\n}\n\nexport const STRIPE_BUTTON_CROSS_PADDING = 2.5;\nexport const STRIPE_BUTTON_LINE_HEIGHT = \"1rem\";\n\nconst anchorStyles = ({ anchor }: { anchor: Anchor }) => {\n  const orientation =\n    anchor === \"left\" || anchor === \"right\" ? \"vertical\" : \"horizontal\";\n\n  return orientation === \"horizontal\"\n    ? css`\n        padding: ${STRIPE_BUTTON_CROSS_PADDING}px 10px;\n      `\n    : css`\n        padding: 10px ${STRIPE_BUTTON_CROSS_PADDING}px;\n        writing-mode: vertical-lr;\n        // writing-mode: sideways-lr is not supported anywhere other than FF, so, we need to rotate\n        transform: ${anchor === \"left\" ? \"rotateZ(180deg)\" : undefined};\n\n        // icons are not rotated like text in Intellij Platform implementation. It kind of makes sense.\n        ${StyledIconWrapper} {\n          transform: rotate(180deg);\n        }\n      `;\n};\n\nexport const StyledToolWindowStripeButton = styled.span<StyledToolWindowStripeButtonProps>`\n  box-sizing: border-box;\n  display: flex; // to allow icon and text alignment by default;\n  align-items: center;\n  cursor: default;\n  user-select: none;\n  overflow: hidden;\n  direction: ltr;\n  flex-shrink: 0;\n  font-size: 0.7rem;\n  line-height: ${STRIPE_BUTTON_LINE_HEIGHT}; // absolute value seems to be problematic when the base font size is changed\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedForeground\",\n          theme.dark ? \"rgb(255,255,255)\" : \"rgb(0,0,0)\"\n        )\n      : theme.color(\"*.foreground\")};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedBackground\",\n          theme.dark ? \"rgba(15,15,15,.332)\" : \"rgba(85,85,85,.332)\"\n        )\n      : undefined};\n\n  ${anchorStyles}\n  ${({ active }) =>\n    !active &&\n    css`\n      &:hover {\n        background: ${({ theme }) =>\n          theme.color(\n            \"ToolWindow.Button.hoverBackground\",\n            theme.dark ? \"rgba(15,15,15,.156)\" : \"rgba(85,85,85,.156)\"\n          )};\n      }\n    `};\n`;\n","import {\n  STRIPE_BUTTON_CROSS_PADDING,\n  STRIPE_BUTTON_LINE_HEIGHT,\n} from \"./StyledToolWindowStripeButton\";\nimport { Anchor, isHorizontalToolWindow, theOtherSide } from \"./utils\";\nimport { css } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { styled } from \"../styled\";\nimport { Color } from \"../Theme/Color\";\n\nconst minHeight = `calc(${STRIPE_BUTTON_LINE_HEIGHT} + ${\n  2 * STRIPE_BUTTON_CROSS_PADDING + 1 /*border*/\n}px)`;\n\nconst anchorStyles = ({\n  anchor,\n  preventCollapse,\n}: StyledToolWindowStripeProps) =>\n  isHorizontalToolWindow(anchor)\n    ? css`\n        flex-direction: row;\n        width: 100%;\n        min-height: ${preventCollapse ? minHeight : \"fit-content\"};\n      `\n    : css`\n        flex-direction: column;\n        height: 100%;\n        min-width: ${preventCollapse ? minHeight : \"fit-content\"};\n      `;\nconst borderStyle = ({ anchor, theme }: { anchor: Anchor; theme: Theme }) =>\n  css`border-${theOtherSide(anchor)}: 1px solid ${\n    theme.commonColors.contrastBorder\n  }`;\n\nexport interface StyledToolWindowStripeProps {\n  anchor: Anchor;\n  highlighted?: boolean;\n  preventCollapse?: boolean;\n}\n\nexport const StyledToolWindowStripe = styled.div<StyledToolWindowStripeProps>`\n  box-sizing: border-box;\n  background: ${({ theme, highlighted }) =>\n    highlighted\n      ? Color.brighter(theme.commonColors.panelBackground)\n      : theme.commonColors.panelBackground};\n  display: inline-flex;\n  overflow: hidden;\n  ${borderStyle};\n  ${anchorStyles}\n`;\n\nexport const StyledSpacer = styled.div`\n  flex: 1;\n`;\n","import { RefObject } from \"react\";\nimport {\n  useMove,\n  UseMoveOptions,\n  XY,\n} from \"../utils/interaction-utils/useMove\";\nimport { findEffectiveBackgroundColor } from \"./findEffectiveBackgroundColor\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface UseElementMoveOptions<S>\n  extends Omit<UseMoveOptions<S>, \"onMoveStart\" | \"onMove\"> {\n  ref: RefObject<HTMLElement>;\n  /**\n   * if true a clone of the element is created and used as ghost.\n   * A function can be passed to customize the default ghost element or return a completely\n   * different one.\n   */\n  ghost?: boolean | ((defaultGhost: HTMLElement) => HTMLElement);\n\n  onMoveStart: (args: { from: Rect }) => S;\n  onMove: (args: { from: Rect; to: Rect; movement: XY; startState: S }) => void;\n}\n\n/**\n * Provides necessary event handling props to be applied on an element to make it movable.\n * It's implemented on top of {@link useMove}. The differences are:\n * - The signature of `onMoveStart`, `onMove` and `onMoveEnd` are changed to pass\n *   {@link Rect} instead of {@link XY}.\n * - rendering a ghost element.\n *\n * ## A note about ghost:\n * There is no easy way to create a snapshot image of an html element. Native drag and drop API\n * supports [setting drag\n * image](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage) but we are\n * not using drag events mainly because of not being able to customize the offset after which drag\n * should start. See {@link UseMoveOptions#dragThreshold dragThreshold} for more details. There are\n * some libraries like html2canvas for creating an image from an html element, but they are very\n * big and using them doesn't make sense at all from a value/cost ratio perspective. There might be\n * some ways of implementing custom move threshold on top of native drag events. For example by\n * delaying the call to setDragImage, but it needs more investigation. Also, not sure if opacity of\n * the ghost is something you can control when using setDragImage.\n **/\nexport function useElementMove<S>({\n  ref,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  ghost: ghostOption,\n  ...otherOptions\n}: UseElementMoveOptions<S>) {\n  return useMove({\n    ...otherOptions,\n    onMoveStart: () => {\n      const element = ref.current;\n      let ghost: HTMLElement | null = null;\n      if (!element) {\n        throw new Error(\n          \"Movement started but ref value is null. Make sure the passed ref is applied on the same element that other props are.\"\n        );\n      }\n      const updateGhostPosition = (rect: Rect) => {\n        if (ghost) {\n          ghost.style.left = `${rect.left}px`;\n          ghost.style.top = `${rect.top}px`;\n        }\n      };\n      const from: Rect = element.getBoundingClientRect();\n      if (ghostOption) {\n        const defaultGhost = createDefaultGhost(element);\n        ghost =\n          typeof ghostOption === \"function\"\n            ? ghostOption(defaultGhost) || defaultGhost\n            : defaultGhost;\n        ghost.style.position = \"fixed\";\n        document.body.append(ghost);\n        updateGhostPosition(from);\n      }\n      return {\n        ghost,\n        from,\n        updateGhostPosition,\n        startState: onMoveStart({ from }),\n      };\n    },\n    onMove: ({\n      movement,\n      startState: { from, updateGhostPosition, startState },\n    }) => {\n      const to: Rect = {\n        left: from.left + movement.x,\n        right: from.right + movement.x,\n        top: from.top + movement.y,\n        bottom: from.bottom + movement.y,\n        height: from.height,\n        width: from.width,\n      };\n      updateGhostPosition(to);\n      onMove({ from, to, movement, startState });\n    },\n    onMoveEnd: ({ startState: { ghost, startState } }) => {\n      ghost?.remove();\n      onMoveEnd?.({ startState });\n    },\n  });\n}\n\nfunction createDefaultGhost(element: HTMLElement) {\n  const ghost = element.cloneNode(true) as HTMLElement;\n  ghost.style.backgroundColor = findEffectiveBackgroundColor(element);\n  return ghost;\n}\n","import { Color } from \"../Theme/Color\";\n\n/**\n * Computes the effective background color of the element by blending translucent backgrounds of\n * the elements ancestors. It traverses up the parents, until reaches a solid background color.\n * all translucent backgrounds in between are blended with that solid color, with respect to their\n * transparency. It's meant to be used only for the simple cases where an element doesn't overflow\n * the parents. Obviously, in other cases there won't be one single effective background color\n * for the element.\n */\nexport function findEffectiveBackgroundColor(element: HTMLElement): string {\n  let elem: HTMLElement | null = element;\n  let colors: Color[] = [];\n  while (elem != null) {\n    const computedBackground = getComputedStyle(elem).backgroundColor;\n    if (computedBackground) {\n      const color = new Color(computedBackground);\n      colors.unshift(color);\n      if (color.a === 255) {\n        // if we've reached a solid color, we don't need to continue traversing ancestors\n        break;\n      }\n    }\n    elem = elem.parentElement;\n  }\n  return (\n    colors\n      .reduce<Color | null>((resultColor, nextColor) => {\n        return resultColor ? resultColor.blend(nextColor) : nextColor;\n      }, null)\n      ?.toString() || \"\"\n  );\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport React, { CSSProperties, Key, useRef } from \"react\";\nimport { createGetDropPosition, DropPosition } from \"./createGetDropPosition\";\nimport { useMovableStripeButtons } from \"./MovableToolWindowStripeProvider\";\nimport { StyledSpacer, StyledToolWindowStripe } from \"./StyledToolWindowStripe\";\nimport { StyledToolWindowStripeButton } from \"./StyledToolWindowStripeButton\";\nimport { useElementMove, UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\ninterface ToolWindowStripeProps<T> {\n  anchor: Anchor;\n  items: T[];\n  splitItems?: T[];\n  getKey: (item: T) => Key;\n  renderItem: (item: T) => React.ReactNode;\n  selectedKeys?: Key[];\n  onItemPress?: (key: Key) => void;\n}\n\n/**\n * TODO: refactor to remove the key based interface.\n */\nexport function ToolWindowStripe<T>({\n  anchor,\n  items: mainItems,\n  renderItem: render,\n  splitItems = [],\n  selectedKeys = [],\n  onItemPress,\n  getKey,\n}: ToolWindowStripeProps<T>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    getProps,\n    draggingRect,\n    draggingKey,\n    dropPosition,\n  } = useMovableStripeButtons({\n    stripeElRef: containerRef,\n    getKey,\n    anchor,\n    mainItems,\n    splitItems,\n    createGetDropPosition: (key: Key) => {\n      const isNotCurrentItem = (anItem: T) => getKey(anItem) !== key;\n      const stripeElement = containerRef.current!;\n      const getItemRect = (key: Key) =>\n        stripeElement\n          .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n          .getBoundingClientRect();\n      return createGetDropPosition({\n        stripeElement: stripeElement,\n        mainItems: mainItems.filter(isNotCurrentItem),\n        splitItems: splitItems.filter(isNotCurrentItem),\n        getKey,\n        anchor,\n        getItemRect,\n      });\n    },\n  });\n\n  const highlighted =\n    dropPosition != null &&\n    draggingKey != null &&\n    [...mainItems, ...splitItems].every((item) => getKey(item) !== draggingKey);\n\n  const renderItem = (item: T) => {\n    const key = getKey(item);\n\n    return (\n      <ToolWindowStripeButton\n        anchor={anchor}\n        key={key}\n        data-key={key}\n        style={{\n          ...getStripeButtonStyles({\n            key,\n            dropPosition,\n            anchor,\n            draggingRect,\n            draggingKey,\n          }),\n        }}\n        {...getProps(key)}\n        active={selectedKeys.includes(key)}\n        onPress={() => onItemPress?.(key)}\n      >\n        {render(item)}\n      </ToolWindowStripeButton>\n    );\n  };\n  return (\n    <>\n      <StyledToolWindowStripe\n        anchor={anchor}\n        preventCollapse={Boolean(dropPosition)}\n        highlighted={highlighted}\n        ref={containerRef}\n      >\n        {mainItems.map(renderItem)}\n        <StyledSpacer />\n        {splitItems.map(renderItem)}\n      </StyledToolWindowStripe>\n    </>\n  );\n}\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nfunction getStripeButtonStyles({\n  anchor,\n  key,\n  dropPosition,\n  draggingRect,\n  draggingKey,\n}: {\n  anchor: Anchor;\n  key: Key;\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n  dropPosition: DropPosition | null;\n}) {\n  const styles: CSSProperties = {\n    // transition: \"margin 100ms\", // maybe only when drag is in progress, if unwanted transition at drop\n  };\n  if (dropPosition?.relative?.key === key && draggingRect) {\n    const marginValue = isHorizontalToolWindow(anchor)\n      ? draggingRect.width\n      : draggingRect.height;\n\n    if (isHorizontalToolWindow(anchor)) {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginLeft\"\n          : \"marginRight\"\n      ] = marginValue;\n    } else {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginTop\"\n          : \"marginBottom\"\n      ] = marginValue;\n    }\n  }\n  if (key === draggingKey) {\n    styles.display = \"none\";\n  }\n  return styles;\n}\n\nfunction ToolWindowStripeButton<T, S>({\n  children,\n  anchor,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  onPress,\n  moveDisabled,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  anchor: Anchor;\n  style: CSSProperties;\n  active: boolean;\n  onPress: () => void;\n  moveDisabled?: boolean;\n  onMoveStart: UseElementMoveOptions<S>[\"onMoveStart\"];\n  onMove: UseElementMoveOptions<S>[\"onMove\"];\n  onMoveEnd: UseElementMoveOptions<S>[\"onMoveEnd\"];\n}) {\n  const ref = useRef<HTMLElement>(null);\n\n  // for some reason, usePress and useMove (used in useElementMove) are not compatible.\n  // it seems onMouseDown in useMove is not called, even when handlers are merged by mergeProps.\n  // FIXME: fix compatibility of useMove and usePress, and switch to usePress({ onPress })\n  const { pressProps } = { pressProps: { onClick: onPress } }; //usePress({ onPress });\n  const props = useElementMove({\n    ref,\n    disabled: moveDisabled,\n    dragThreshold: 7,\n    ghost: true,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n  });\n\n  return (\n    <StyledToolWindowStripeButton\n      anchor={anchor}\n      {...mergeProps(otherProps, pressProps, props)}\n      ref={ref}\n    >\n      {children}\n    </StyledToolWindowStripeButton>\n  );\n}\n","import React from \"react\";\nimport { css } from \"styled-components\";\nimport { ResizableView } from \"../ResizableView\";\nimport { styled } from \"../styled\";\nimport { SideUnDockedState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nexport const StyledUndockSide = styled.div<{ anchor: Anchor }>`\n  position: absolute;\n  background: inherit;\n  z-index: 1;\n  ${({ anchor }) =>\n    isHorizontalToolWindow(anchor)\n      ? css`\n          left: 0;\n          right: 0;\n        `\n      : css`\n          top: 0;\n          bottom: 0;\n        `};\n  ${({ anchor }) =>\n    css`\n      ${anchor}: 0;\n    `};\n`;\n\nexport function UndockSide({\n  state,\n  anchor,\n  children,\n  onResize,\n}: {\n  state: Exclude<SideUnDockedState, null>;\n  anchor: Anchor;\n  children: React.ReactNode;\n  onResize: (size: number) => void;\n}) {\n  return (\n    state && (\n      <StyledUndockSide anchor={anchor}>\n        <ResizableView\n          orientation={\n            isHorizontalToolWindow(anchor) ? \"vertical\" : \"horizontal\"\n          }\n          resizerPlacement={\n            anchor === \"left\" || anchor === \"top\" ? \"after\" : \"before\"\n          }\n          size={state.size}\n          onResize={onResize}\n        >\n          {children}\n        </ResizableView>\n      </StyledUndockSide>\n    )\n  );\n}\n","import { FocusScope } from \"@react-aria/focus\";\nimport React, {\n  CSSProperties,\n  Key,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { ThreeViewSplitter } from \"../ThreeViewSplitter/ThreeViewSplitter\";\nimport { FloatToolWindows } from \"./FloatToolWindows\";\nimport { MovableToolWindowStripeProvider } from \"./MovableToolWindowStripeProvider\";\nimport { StyledToolWindowOuterLayout } from \"./StyledToolWindowOuterLayout\";\nimport {\n  getToolWindowsLayoutState,\n  SideDockedState,\n  StripesState,\n  ToolWindowsLayoutState,\n} from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { ToolWindowsState } from \"./ToolWindowsState/ToolWindowsState\";\nimport { ToolWindowStateProvider } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { ToolWindowStripe } from \"./ToolWindowStripe\";\nimport { UndockSide } from \"./UndockSide\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nexport interface ToolWindowsProps {\n  toolWindowsState: Readonly<ToolWindowsState>;\n  onToolWindowStateChange: (newState: ToolWindowsState) => void;\n\n  renderToolbarButton: (id: Key) => React.ReactNode;\n  renderWindow: (id: Key) => React.ReactNode;\n  /**\n   * Whether stripe buttons should be hidden or not.\n   * `hideToolStripes` UISettings in Intellij Platform\n   */\n  hideToolWindowBars?: boolean;\n\n  /**\n   *\n   * `wideScreenSupport` in UISettings in Intellij Platform\n   */\n  useWidescreenLayout?: boolean;\n\n  /**\n   * min width applied to the main content (children).\n   * @default 50\n   */\n  mainContentMinWidth?: number;\n\n  height?: CSSProperties[\"height\"];\n  minHeight?: CSSProperties[\"minHeight\"];\n  margin?: CSSProperties[\"margin\"];\n}\n\n/**\n * @constructor\n *\n * Corresponding to ToolWindowPane in Intellij Platform\n *\n * Known issues:\n * - in Firefox and Safari, left and right toolbars are not properly shown. Seems like a nasty bug, since adding and\n * then removing some min-width: fit-content style fixes it.\n * - in the dock view of a side, open only a window from the split ones. then open a window from main ones.\n *   focus is not moved to the just opened window. The reason is we rely on auto focusing and because the react tree\n *   changes for both windows, even the split one which was open will be unmounted and mounted again, and since it's\n *   placed after the main one, and hence mounted later, it will get the focus again. This becomes a bigger issue\n *   if the main one is unpinned, because it immediately gets closed after opening.\n *   Possible solutions:\n *   - make sure the split one won't unmount and mount again in such scenario.\n *   - decouple focusing logic from mounting logic, and only focus windows somehow, when the `isVisible` is changed\n *     from false to true, not when mounted.\n * - related to previous issue: open a tool window in split section of a side. set view mode for a tool window in main\n *   section of the same side to docked_unpinned. try to open the unpinned one while the split one is open. it doesn't\n *   work.\n */\nexport const ToolWindows: React.FC<ToolWindowsProps> = ({\n  hideToolWindowBars = false,\n  useWidescreenLayout = false,\n  height = \"100%\",\n  minHeight = \"0\",\n  margin,\n  toolWindowsState,\n  onToolWindowStateChange,\n  renderToolbarButton,\n  renderWindow,\n  children,\n  mainContentMinWidth = 50,\n}): React.ReactElement => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [layoutState, setLayoutState] = useState<ToolWindowsLayoutState>();\n  useLayoutEffect(() => {\n    setLayoutState(\n      getToolWindowsLayoutState(\n        toolWindowsState,\n        containerRef.current!.getBoundingClientRect()\n      )\n    );\n  }, [toolWindowsState]);\n\n  // TODO: extract component candidate\n  const renderStripe = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: StripesState;\n  }) => (\n    <ToolWindowStripe\n      anchor={anchor}\n      items={state.main}\n      splitItems={state.split}\n      getKey={(item) => item}\n      renderItem={(item) => renderToolbarButton(item)}\n      onItemPress={(key) =>\n        onToolWindowStateChange(toolWindowsState.toggle(key))\n      }\n      selectedKeys={state.activeKeys}\n    />\n  );\n\n  const renderToolWindow = (key: Key) => (\n    <ToolWindowStateProvider\n      id={key}\n      containerRef={containerRef}\n      toolWindowsState={toolWindowsState}\n      onToolWindowStateChange={onToolWindowStateChange}\n    >\n      {renderWindow(key)}\n    </ToolWindowStateProvider>\n  );\n  // TODO: extract component candidate\n  const renderSideDockedView = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: SideDockedState;\n  }) => {\n    if (!state) {\n      return null;\n    }\n    return (\n      <ThreeViewSplitter\n        innerView={renderToolWindow(state.mainKey)}\n        innerViewMinSize={50}\n        lastView={state.split && renderToolWindow(state.split.key)}\n        lastSize={state.split?.sizeFraction}\n        onLastResize={(newSize) => {\n          onToolWindowStateChange(\n            toolWindowsState.resizeDockSplitView(anchor, newSize)\n          );\n        }}\n        orientation={isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\"}\n      />\n    );\n  };\n  const onDockResize = (anchor: Anchor) => (size: number) => {\n    const containerBounds = containerRef.current?.getBoundingClientRect();\n    // containerBounds should have value in normal course of events\n    if (containerBounds) {\n      onToolWindowStateChange(\n        toolWindowsState.resizeDock(anchor, size, containerBounds)\n      );\n    }\n  };\n  const getSplitViewProps = (\n    layoutState: ToolWindowsLayoutState,\n    orientation: \"horizontal\" | \"vertical\"\n  ) => {\n    const firstAnchor = orientation === \"horizontal\" ? \"left\" : \"top\";\n    const secondAnchor = orientation === \"horizontal\" ? \"right\" : \"bottom\";\n    return {\n      orientation,\n      firstView: renderSideDockedView({\n        anchor: firstAnchor,\n        state: layoutState[firstAnchor].docked,\n      }),\n      firstSize: layoutState[firstAnchor].docked?.size,\n      onFirstResize: onDockResize(firstAnchor),\n      lastView: renderSideDockedView({\n        anchor: secondAnchor,\n        state: layoutState[secondAnchor].docked,\n      }),\n      lastSize: layoutState[secondAnchor].docked?.size,\n      onLastResize: onDockResize(secondAnchor),\n    };\n  };\n  const renderInnerLayout = (layoutState: ToolWindowsLayoutState) => {\n    const horizontalSplitterProps = getSplitViewProps(\n      layoutState,\n      \"horizontal\"\n    );\n    const verticalSplitterProps = getSplitViewProps(layoutState, \"vertical\");\n\n    const [outerSplitterProps, innerSplitterProps] = useWidescreenLayout\n      ? [horizontalSplitterProps, verticalSplitterProps]\n      : [verticalSplitterProps, horizontalSplitterProps];\n\n    const undockLayers = ([\"left\", \"top\", \"right\", \"bottom\"] as const).map(\n      (anchor) => {\n        const state = layoutState[anchor].undocked;\n        return (\n          state && (\n            <UndockSide\n              key={anchor}\n              anchor={anchor}\n              state={state}\n              onResize={(size) => {\n                containerRef.current &&\n                  onToolWindowStateChange(\n                    toolWindowsState.resizeUndock(\n                      anchor,\n                      size,\n                      containerRef.current.getBoundingClientRect()\n                    )\n                  );\n              }}\n            >\n              {renderToolWindow(state.key)}\n            </UndockSide>\n          )\n        );\n      }\n    );\n\n    return (\n      <>\n        <MovableToolWindowStripeProvider\n          onMove={({ to, from }) => {\n            onToolWindowStateChange(\n              toolWindowsState.move(\n                layoutState[from.anchor].stripes[\n                  from.isSplit ? \"split\" : \"main\"\n                ][from.index],\n                { anchor: to.anchor, isSplit: to.isSplit },\n                to.index\n              )\n            );\n          }}\n        >\n          {/**\n           * ToolWindow bars, aka Stripes. Order of stripes is irrelevant for layout but relevant for\n           * priority when stripe buttons are moved across stripes.\n           * layout is handled by `StyledToolWindowOuterLayout`.\n           */}\n          <StyledToolWindowOuterLayout.LeftStripe>\n            {renderStripe({\n              anchor: \"left\",\n              state: layoutState[\"left\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.LeftStripe>\n          <StyledToolWindowOuterLayout.TopStripe>\n            {renderStripe({\n              anchor: \"top\",\n              state: layoutState[\"top\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.TopStripe>\n          <StyledToolWindowOuterLayout.RightStripe>\n            {renderStripe({\n              anchor: \"right\",\n              state: layoutState[\"right\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.RightStripe>\n          <StyledToolWindowOuterLayout.BottomStripe>\n            {renderStripe({\n              anchor: \"bottom\",\n              state: layoutState[\"bottom\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.BottomStripe>\n        </MovableToolWindowStripeProvider>\n        {/**\n         * The inner layout of the ToolWindow, including four tool windows and\n         * a main content in the center.\n         */}\n        <StyledToolWindowOuterLayout.MainView>\n          <ThreeViewSplitter\n            {...outerSplitterProps}\n            innerView={\n              <ThreeViewSplitter\n                innerViewMinSize={mainContentMinWidth}\n                innerView={<FocusScope>{children}</FocusScope>}\n                {...innerSplitterProps}\n              />\n            }\n          />\n          {undockLayers}\n          {\n            <FloatToolWindows\n              floatWindows={layoutState?.floatWindows}\n              renderToolWindow={renderToolWindow}\n              onBoundsChange={(key, bounds) =>\n                onToolWindowStateChange(\n                  toolWindowsState.setFloatingBound(key, bounds)\n                )\n              }\n            />\n          }\n        </StyledToolWindowOuterLayout.MainView>\n      </>\n    );\n  };\n  return (\n    /**\n     * Potential refactoring: hideStripes can also be handled by conditionally\n     * rendering tool window bars, instead of considering it as a feature of\n     * StyledToolWindowOuterLayout\n     **/\n    <StyledToolWindowOuterLayout.Shell\n      ref={containerRef}\n      hideStripes={hideToolWindowBars}\n      style={{ height, minHeight, margin }}\n    >\n      {layoutState && renderInnerLayout(layoutState)}\n    </StyledToolWindowOuterLayout.Shell>\n  );\n};\n","import React, { Key, RefObject, useContext, useMemo } from \"react\";\nimport { ToolWindowsProps } from \"../ToolWindows\";\nimport { ToolWindowState, ViewMode, WindowBounds } from \"./ToolWindowsState\";\nimport { Anchor } from \"../utils\";\n\ntype ToolWindowStateContextValue = {\n  state: Readonly<ToolWindowState>;\n  hide: () => void;\n  blur: () => void;\n  moveToSide: (args: { anchor: Anchor; isSplit: boolean }) => void;\n  changeViewMode: (viewMode: ViewMode) => void;\n  stretchWidth: (value: number) => void;\n  stretchHeight: (value: number) => void;\n  setFloatingBounds: (bounds: WindowBounds) => void;\n};\nconst ToolWindowStateContext = React.createContext<ToolWindowStateContextValue | null>(\n  null\n);\n\n/**\n * Used in a tool window's UI tree, to get access to the tool window state and actions for changing it.\n */\nexport const useToolWindowState = () => {\n  const context = useContext(ToolWindowStateContext);\n  if (!context) {\n    throw new Error(\n      \"useToolWindowContext is meant to be used inside a tool window.\"\n    );\n  }\n  return context;\n};\n\n/**\n * Used in ToolWindows to provide tool window state and necessary actions as a context, which will be accessible\n * within the tool window content tree, via {@link useToolWindowState}\n */\nexport const ToolWindowStateProvider: React.FC<\n  { id: Key; containerRef: RefObject<HTMLElement> } & Pick<\n    ToolWindowsProps,\n    \"toolWindowsState\" | \"onToolWindowStateChange\"\n  >\n> = ({\n  toolWindowsState,\n  containerRef,\n  onToolWindowStateChange,\n  id,\n  children,\n}) => {\n  const contextValue = useMemo((): ToolWindowStateContextValue => {\n    const state = toolWindowsState.windows[id];\n    return {\n      state,\n      hide: () => {\n        onToolWindowStateChange(toolWindowsState.hide(id));\n      },\n      blur: () => {\n        onToolWindowStateChange(toolWindowsState.blur(id));\n      },\n      moveToSide: (side) => {\n        onToolWindowStateChange(toolWindowsState.move(id, side));\n      },\n      changeViewMode: (viewMode: ViewMode) => {\n        onToolWindowStateChange(toolWindowsState.changeViewMode(id, viewMode));\n      },\n      stretchWidth: (value: number) => {\n        const container = containerRef.current;\n        if (!container) {\n          throw new Error(\"Couldn't resize since the container is not present\");\n        }\n        onToolWindowStateChange(\n          toolWindowsState.stretchWidth(\n            id,\n            value,\n            container.getBoundingClientRect()\n          )\n        );\n      },\n      stretchHeight: (value: number) => {\n        const container = containerRef.current;\n        if (!container) {\n          throw new Error(\"Couldn't resize since the container is not present\");\n        }\n        onToolWindowStateChange(\n          toolWindowsState.stretchHeight(\n            id,\n            value,\n            container.getBoundingClientRect()\n          )\n        );\n      },\n      setFloatingBounds: (bounds: WindowBounds) => {\n        onToolWindowStateChange(toolWindowsState.setFloatingBound(id, bounds));\n      },\n    };\n  }, [toolWindowsState, id]);\n  return (\n    <ToolWindowStateContext.Provider value={contextValue}>\n      {children}\n    </ToolWindowStateContext.Provider>\n  );\n};\n","import { curry, fromPairs, insert, map, mapObjIndexed, move } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\n\nexport type ViewMode =\n  | \"docked_pinned\"\n  | \"docked_unpinned\"\n  | \"undock\"\n  | \"float\"\n  /**\n   * @deprecated \"window\" ViewMode was initially added following the original impl. It doesn't seem reasonable to\n   * support it though. It's marked as deprecated to be removed in the future.\n   */\n  | \"window\";\n\nexport type WindowBounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * Data structure for keeping the state of a single tool window. very similar to WindowInfo in Intellij Platform\n *\n * A note about about the data structure:\n * Some fields like `isSplit`, `weight`, `floatingBound` are meaningful only\n * for a subset of viewModes. So it may be tempting to introduce a `viewMode`\n * type which minimally and more accurately describes the information\n * relevant for each viewMode. But it's not structured like that, and it's\n * orthogonal to viewMode, since we want to preserve the relevant information\n * for each viewMode, to be used when the viewMode is changed back.\n *\n * NOTE: consider renaming to `WindowState` to avoid confusion with `ToolWindowsState`\n */\nexport interface ToolWindowState {\n  /**\n   * The order of the tool window in its group. The group is specified by `anchor` and `isSplit`.\n   */\n  order: number;\n  /**\n   * Whether the tool window is visible (open) or not.\n   * NOTE: A maximum of 1 **docked** tool window within the same group (same `anchor` and `isSplit`) can be visible.\n   * You will get a render error in `ToolWindows` component otherwise.\n   */\n  isVisible: boolean;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered is primary group, i.e. when\n   * `isSplit` is false\n   */\n  weight: number;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered is the secondary group. i.e.\n   * when `isSplit` is true.\n   */\n  sideWeight: number;\n  /**\n   * The side of the tool window, being \"left\", \"right\", \"top\" or \"bottom\"\n   */\n  anchor: Anchor;\n  /**\n   * Specifies whether the tool window should be shown in the split view, aka \"Secondary group\".\n   */\n  isSplit: boolean;\n  /**\n   * Tool windows view mode. See {@link ViewMode}\n   *\n   * NOTE: in Intellij Platform, there is a window `type` and also `docked` and\n   * `autoHide`.\n   * keeping one viewMode makes more sense and prevents invalid combinations\n   * like { type: \"window, \"docked\": true}, that would be unnecessarily allowed.\n   */\n  viewMode: ViewMode;\n  /**\n   * Boundaries of the tool window, when rendered in \"float\" view mode.\n   */\n  floatingBounds?: WindowBounds;\n}\n\nconst isDocked = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" ||\n  toolWindow.viewMode === \"docked_pinned\";\n\n/**\n * Determines whether the tool window should hide on focus. In the java implementation, it's a field on window\n * info instead of being a calculated field. We changed that to match viewMode with the 5 view modes that are possible\n * to choose from the UI, eliminating the combinations that are never allowed. If from UX perspective, having window\n * or float mode with autoHide feature is considered valid at some point, we may need to change the implementation\n * to something similar to the original implementation where isAutoHide and viewMode are separate.\n */\nconst isAutoHide = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" || toolWindow.viewMode === \"undock\";\n\nexport type SideInfo = Pick<ToolWindowState, \"anchor\" | \"isSplit\">;\nexport const areInSameSection = curry(\n  (window1: SideInfo, window2: SideInfo) =>\n    window1.anchor === window2.anchor && window1.isSplit === window2.isSplit\n);\n\nconst getViewModeType = (viewMode: ViewMode) => {\n  if (viewMode === \"docked_pinned\" || viewMode === \"docked_unpinned\") {\n    return \"docked\";\n  }\n  if (viewMode === \"window\" || viewMode === \"float\") {\n    return \"float\";\n  }\n  return viewMode;\n};\n/**\n * Represents UI state of a bunch of tool windows. What is rendered inside each window or toolbar button is irrelevant.\n *\n * TODO: document pros and cons of these two approaches\n * - Having a class for ToolWindowsState which keeps a readonly mapping of keys to window states.\n * - Having ToolWindowsState as an interface (a mapping from keys to window states), and a bunch of action functions\n *   which accept a window state and some arguments, and return a new window state.\n */\nexport class ToolWindowsState {\n  constructor(\n    public readonly windows: Readonly<{\n      [key: string]: Readonly<ToolWindowState>;\n    }>\n  ) {}\n\n  hide(targetKey: Key): ToolWindowsState {\n    return new ToolWindowsState(\n      mapObjIndexed(\n        (toolWindow, key) =>\n          key === targetKey\n            ? {\n                ...toolWindow,\n                isVisible: false,\n              }\n            : toolWindow,\n        this.windows\n      )\n    );\n  }\n\n  show(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const closableViewModes: ViewMode[] = [];\n    if (target.viewMode === \"undock\") {\n      closableViewModes.push(\"undock\");\n    } else if (isDocked(target)) {\n      closableViewModes.push(\"docked_unpinned\", \"docked_pinned\", \"undock\");\n    }\n    return new ToolWindowsState(\n      mapObjIndexed((toolWindow, key) => {\n        if (key === targetKey) {\n          return {\n            ...toolWindow,\n            isVisible: true,\n          };\n        }\n        if (\n          toolWindow.isVisible &&\n          areInSameSection(target, toolWindow) &&\n          closableViewModes.includes(toolWindow.viewMode)\n        ) {\n          return { ...toolWindow, isVisible: false };\n        }\n        return toolWindow;\n      }, this.windows)\n    );\n  }\n\n  toggle(targetKey: Key): ToolWindowsState {\n    return this.windows[targetKey]?.isVisible\n      ? this.hide(targetKey)\n      : this.show(targetKey);\n  }\n\n  blur(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target || !isAutoHide(target)) {\n      return this;\n    }\n    return new ToolWindowsState(\n      map((toolWindow) => {\n        if (toolWindow === target) {\n          return {\n            ...toolWindow,\n            isVisible: false,\n          };\n        }\n        return toolWindow;\n      }, this.windows)\n    );\n  }\n\n  // TODO: initiate floatingBound when changing viewMode to float or window and there is no previous floatingBound\n  changeViewMode(targetKey: Key, viewMode: ViewMode): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return new ToolWindowsState(\n      map((toolWindow) => {\n        if (toolWindow === target) {\n          return {\n            ...toolWindow,\n            viewMode,\n          };\n        }\n        const viewModeType = getViewModeType(toolWindow.viewMode);\n        if (\n          toolWindow.isVisible &&\n          viewModeType !== \"float\" &&\n          areInSameSection(toolWindow, target) &&\n          viewModeType === getViewModeType(viewMode)\n        ) {\n          return {\n            ...toolWindow,\n            isVisible: false,\n          };\n        }\n        return toolWindow;\n      }, this.windows)\n    );\n  }\n\n  move(targetKey: Key, index: number): ToolWindowsState;\n  move(targetKey: Key, side: SideInfo, index?: number): ToolWindowsState;\n  move(\n    targetKey: Key,\n    sideOrIndex: SideInfo | number,\n    index?: number\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const targetSide = typeof sideOrIndex === \"object\" ? sideOrIndex : target;\n    const targetIndex = typeof sideOrIndex === \"number\" ? sideOrIndex : index;\n    const targetSideWindows = Object.entries(this.windows).filter(([, value]) =>\n      areInSameSection(targetSide, value)\n    );\n    const indexInTargetSide = targetSideWindows.findIndex(\n      ([, window]) => window === target\n    );\n    const sortedTargetWindows: Array<[Key, ToolWindowState]> =\n      indexInTargetSide < 0\n        ? insert(\n            targetIndex ?? -1,\n            [targetKey, { ...target, ...targetSide }],\n            targetSideWindows\n          )\n        : move(\n            indexInTargetSide,\n            targetIndex ?? indexInTargetSide,\n            targetSideWindows\n          );\n    const newTargetSideWindows = fromPairs(\n      sortedTargetWindows.map(([key, value], index) => {\n        let newValue = value;\n        if (value.order !== index) {\n          newValue = { ...value, order: index };\n        }\n        const targetViewMode = getViewModeType(target.viewMode);\n        if (\n          key !== targetKey &&\n          target.isVisible &&\n          value.isVisible &&\n          targetViewMode !== \"float\" &&\n          getViewModeType(value.viewMode) === targetViewMode\n        ) {\n          newValue = { ...value, isVisible: false };\n        }\n        return [`${key}`, newValue];\n      })\n    );\n    return new ToolWindowsState(\n      mapObjIndexed(\n        (value, key) => newTargetSideWindows[key] || value,\n        this.windows\n      )\n    );\n  }\n\n  stretchWidth(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"width\");\n  }\n\n  stretchHeight(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"height\");\n  }\n\n  setFloatingBound(targetKey: Key, floatingBounds: WindowBounds) {\n    return this.update(targetKey, \"floatingBounds\", floatingBounds);\n  }\n\n  mapWindows(\n    mapFn: (toolWindow: ToolWindowState, key: string) => ToolWindowState\n  ) {\n    return new ToolWindowsState(mapObjIndexed(mapFn, this.windows));\n  }\n\n  private update<K extends keyof ToolWindowState>(\n    targetKey: Key,\n    key: K,\n    value: ToolWindowState[K]\n  ) {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return new ToolWindowsState(\n      map((window) => {\n        if (window === target) {\n          return {\n            ...window,\n            [key]: value,\n          };\n        }\n        return window;\n      }, this.windows)\n    );\n  }\n\n  private stretch(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number },\n    property: \"width\" | \"height\"\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const viewModeType = getViewModeType(target.viewMode);\n    if (viewModeType === \"float\") {\n      return new ToolWindowsState(\n        map((window) => {\n          if (window === target) {\n            const currentFloatingBound = window.floatingBounds!;\n            return {\n              ...window,\n              floatingBounds: {\n                ...currentFloatingBound,\n                [property]: currentFloatingBound[property] + value,\n              },\n            };\n          }\n          return window;\n        }, this.windows)\n      );\n    }\n    const expectedProperty = isHorizontalToolWindow(target.anchor)\n      ? \"height\"\n      : \"width\";\n    if (expectedProperty !== property) {\n      return this;\n    }\n    const containerSize = containerBounds[property];\n    const newValue = containerSize * target.weight + value;\n    if (viewModeType === \"docked\") {\n      return this.resizeDock(target.anchor, newValue, containerBounds);\n    } else {\n      return this.resizeUndock(target.anchor, newValue, containerBounds);\n    }\n  }\n\n  resizeDock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(true, anchor, size, containerBounds);\n  }\n\n  resizeUndock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(false, anchor, size, containerBounds);\n  }\n\n  resizeDockSplitView(anchor: Anchor, weight: number): ToolWindowsState {\n    return new ToolWindowsState(\n      map((window) => {\n        if (window.anchor === anchor && window.isVisible && isDocked(window)) {\n          return {\n            ...window,\n            sideWeight: window.isSplit ? weight : 1 - weight,\n          };\n        }\n        return window;\n      }, this.windows)\n    );\n  }\n\n  private resizeSide(\n    dock: boolean,\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return new ToolWindowsState(\n      map((window) => {\n        const isInResizingView = dock\n          ? isDocked(window)\n          : window.viewMode === \"undock\";\n        if (window.anchor === anchor && isInResizingView && window.isVisible) {\n          const containerSize = !isHorizontalToolWindow(anchor)\n            ? containerBounds.width\n            : containerBounds.height;\n          return {\n            ...window,\n            weight: size / containerSize,\n          };\n        }\n        return window;\n      }, this.windows)\n    );\n  }\n}\n\nexport const toolWindowState = ({\n  viewMode = \"docked_pinned\",\n  ...inputs\n}: Partial<ToolWindowState> = {}): ToolWindowState => ({\n  anchor: \"left\",\n  isSplit: false,\n  viewMode: viewMode,\n  order: 1,\n  weight: 0.2,\n  sideWeight: 0.5,\n  isVisible: false,\n  floatingBounds:\n    getViewModeType(viewMode) === \"float\"\n      ? {\n          left: 300,\n          top: 300,\n          width: 600,\n          height: 300,\n        }\n      : undefined,\n  ...inputs,\n});\n","export type Anchor = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport const getAnchorOrientation = (\n  anchor: Anchor\n): \"horizontal\" | \"vertical\" =>\n  isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\";\n\nexport const isHorizontalToolWindow = (anchor: Anchor) =>\n  anchor === \"top\" || anchor === \"bottom\";\n\nexport const theOtherSide = (anchor: Anchor) =>\n  ({\n    left: \"right\" as const,\n    right: \"left\" as const,\n    top: \"bottom\" as const,\n    bottom: \"top\" as const,\n  }[anchor]);\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n  alwaysShowAsFocused,\n}: {\n  item: Node<T>;\n  alwaysShowAsFocused?: boolean;\n}) => (\n  <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n    <TreeNode\n      key={item.key}\n      item={item}\n      alwaysShowAsFocused={alwaysShowAsFocused}\n    />\n  </SpeedSearchItemHighlightsProvider>\n);\n","import React, { ForwardedRef, useRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { TreeRef } from \"@intellij-platform/core/Tree\";\nimport { replaceSelectionManager } from \"@intellij-platform/core/selection\";\nimport { StyledTree } from \"../StyledTree\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../__tmp__useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchTreeNode } from \"@intellij-platform/core/Tree/SpeedSearchTree/SpeedSearchTreeNode\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps;\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      alwaysShowAsFocused = false,\n      ...props\n    }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<TreeRef>\n  ) => {\n    const state = replaceSelectionManager(useTreeState(props, forwardedRef));\n    const ref = useRef<HTMLDivElement>(null);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n                alwaysShowAsFocused={alwaysShowAsFocused}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { RefObject } from \"react\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { TreeState } from \"@intellij-platform/core/Tree/__tmp__useTreeState\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    stickySearch: props.stickySearch,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if ([\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n        speedSearch.setSearchTerm(\"\");\n        speedSearch.setActive(false);\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList)`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import { TreeState } from \"@intellij-platform/core/Tree/__tmp__useTreeState\";\nimport React, { Key, MutableRefObject } from \"react\";\n\nexport type TreeContextType<T> = {\n  state: TreeState<T>;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { styled, UnknownThemeProp } from \"@intellij-platform/core\";\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { TREE_ICON_SIZE } from \"@intellij-platform/core/Tree/TreeNodeIcon\";\n\nexport const StyledTreeNode = styled(StyledListItem).attrs({ as: \"div\" })<{\n  level: number;\n}>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"Tree.foreground\" as UnknownThemeProp<\"Tree.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color =\n          theme.color(\n            \"Tree.selectionForeground\" as UnknownThemeProp<\"Tree.selectionForeground\">\n          ) ||\n          theme.commonColors\n            .labelSelectedForeground /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"Tree.selectionBackground\" as UnknownThemeProp<\"Tree.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"Tree.selectionInactiveForeground\" as UnknownThemeProp<\"Tree.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"Tree.selectionBackgroundInactive\" as UnknownThemeProp<\"Tree.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n    };\n  }}\n`;\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\nimport { StyledTreeNode } from \"@intellij-platform/core/Tree/StyledTreeNode\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n  alwaysShowAsFocused?: boolean;\n};\n\nexport function TreeNode<T>({\n  item,\n  alwaysShowAsFocused = false,\n}: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused || alwaysShowAsFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }),\n  };\n}\n","/* eslint-disable */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n//@ts-nocheck\n\n/**\n * IMPORTANT: this is coppied from react spectrum, temporarily until,\n * https://github.com/adobe/react-spectrum/issues/1525 is fixed. Any version above 3.1.3 should be\n * sufficient to remove this copy and use the one from @react-stately/tree\n */\n\nimport {\n  Collection,\n  CollectionBase,\n  Expandable,\n  MultipleSelection,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeRef, useTreeRef } from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport {\n  SelectionManager,\n  useMultipleSelectionState,\n} from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n}\n\nexport interface TreeProps<T>\n  extends CollectionBase<T>,\n    Expandable,\n    MultipleSelection,\n    CollectionCacheInvalidationProps {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>;\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>;\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>;\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void;\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager;\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object, C>(\n  props: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRef>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? props.expandedKeys : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  let tree = useCollection(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const onToggle = (key: Key) => {\n    setExpandedKeys((expandedKeys) => {\n      const newKeys = toggleKey(expandedKeys, key);\n      // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n      // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n      for (const aKey of newKeys) {\n        if (tree.getItem(aKey) == null) {\n          newKeys.delete(aKey);\n        }\n      }\n\n      // If we are toggling it open, expand all expandable single-child items\n      if (newKeys.has(key)) {\n        for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n          newKeys.add(aKey);\n        }\n      }\n      return newKeys;\n    });\n  };\n\n  const selectionManager = new SelectionManager(tree, selectionState);\n\n  useTreeRef({ selectionManager }, treeRef);\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager,\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n\nconst isExpandable = (node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction getSingleChildrenKeys<T>(node: Node<T> | null | undefined): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n) {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import React, { Key, RefObject, useMemo, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { TreeState } from \"./__tmp__useTreeState\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\n\nexport interface SelectableTreeProps<T> extends DOMProps {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  { onAction, ...props }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    selectOnFocus: true,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    if (focusedKey == null) {\n      return;\n    }\n    const item = state.collection.getItem(focusedKey);\n    const isExpandable = item.hasChildNodes;\n    const expanded = state.expandedKeys.has(focusedKey);\n    const isDisabled = state.disabledKeys.has(focusedKey);\n    if (isDisabled) {\n      return;\n    }\n\n    props?.onNodeKeyDown?.(event, item);\n\n    const shouldToggle =\n      event.key === \"Enter\" ||\n      (event.key === \"ArrowLeft\" && expanded) ||\n      (event.key === \"ArrowRight\" && !expanded);\n\n    if (isExpandable && shouldToggle) {\n      event.preventDefault();\n      state.toggleKey(focusedKey);\n    } else if (event.key === \"Enter\") {\n      onAction?.(focusedKey);\n    } else {\n      // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n      // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n      // inputs when the propagation is not prevented.\n      selectionKeyDown?.(event);\n      if (event.key === \"Escape\") {\n        // Maybe continuePropagation should be called unconditionally at this point\n        event.continuePropagation();\n      }\n    }\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused,\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps\n    ),\n    treeContext,\n    focused,\n  };\n}\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport interface TreeRef {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef(\n  props: { selectionManager: SelectionManager },\n  forwardedRef?: ForwardedRef<TreeRef>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n      };\n    },\n    []\n  );\n}\n","import { LayoutNode, ListLayout } from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport { InvalidationContext, Rect, Size } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = super.buildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","import { TreeState } from \"@intellij-platform/core/Tree/__tmp__useTreeState\";\nimport React, { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import { Key } from \"react\";\n\ninterface SetState<T> {\n  items: Iterable<T>;\n\n  toggle(key: T): void;\n\n  add(...key: T[]): void;\n\n  delete(...key: T[]): void;\n}\n\nexport type SelectionState = \"NotSelected\" | \"Selected\" | \"PartiallySelected\";\n\nexport interface TreeModel<T, K = Key> {\n  rootNodes: ReadonlyArray<T>;\n  getChildren: (root: T) => ReadonlyArray<T> | /*for convenience*/ T | null;\n  getKey: (item: T) => K;\n}\n\nexport interface NestedSelectionState<T> {\n  getSelectionState: (item: T) => SelectionState;\n  toggle: (item: T) => void;\n}\n\nconst collectSelectableItems = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>\n) => {\n  const collectedItems: T[] = [];\n  collectSelectableItemsRecursive(item, getChildren, collectedItems);\n  return collectedItems;\n};\nconst collectSelectableItemsRecursive = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>,\n  collectedItems: T[] = []\n) => {\n  const children = getChildren(item);\n  if (children == null) {\n    collectedItems.push(item);\n  } else {\n    children.forEach((child) =>\n      collectSelectableItemsRecursive(child, getChildren, collectedItems)\n    );\n  }\n};\n\n// TODO: maybe change the interface to work with keys instead of items?\nexport class NestedSelection<T extends object, K = Key>\n  implements NestedSelectionState<T> {\n  cache = new WeakMap<T, SelectionState>();\n  constructor(private state: SetState<K>, private tree: TreeModel<T, K>) {\n    this.tree = tree;\n    this.state = state;\n  }\n\n  toggle(item: T) {\n    const children = this.tree.getChildren(item);\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    if (isSelectableNode) {\n      this.state.toggle(key);\n    } else {\n      const state = this.getSelectionState(item);\n      const itemsInSubtree = collectSelectableItems(item, (item) =>\n        normalizeChildren(this.tree.getChildren(item))\n      ).map(this.tree.getKey);\n      if (state === \"Selected\") {\n        this.state.delete(...itemsInSubtree);\n      } else {\n        this.state.add(...itemsInSubtree);\n      }\n    }\n  }\n\n  getSelectionState(item: T): SelectionState {\n    // caching can be refactored into a nice little decorator like WeakMapCached which would be applicable on a method\n    // with a single object argument.\n    const cachedState = this.cache.get(item);\n    if (cachedState) {\n      return cachedState;\n    }\n    const children = normalizeChildren(this.tree.getChildren(item));\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    let state: SelectionState;\n    if (isSelectableNode) {\n      state = [...this.state.items].includes(key) ? \"Selected\" : \"NotSelected\";\n    } else {\n      const allDescendantsStates = children.map((child) =>\n        this.getSelectionState(child)\n      );\n      if (allDescendantsStates.every((state) => state === \"NotSelected\")) {\n        state = \"NotSelected\";\n      } else {\n        state = allDescendantsStates.every((state) => state === \"Selected\")\n          ? \"Selected\"\n          : \"PartiallySelected\";\n      }\n    }\n    this.cache.set(item, state);\n    return state;\n  }\n}\n\nfunction normalizeChildren<T>(children: T | ReadonlyArray<T> | null) {\n  if (children) {\n    return ([] as ReadonlyArray<T>).concat(children);\n  }\n  return null;\n}\n","import React from \"react\";\nimport {\n  SpeedSearchTree,\n  SpeedSearchTreeProps,\n} from \"@intellij-platform/core/Tree\";\nimport { NestedSelectionState } from \"./NestedSelection\";\n\n/**\n * Experimental wrapper component around SpeedSearchTree, which allows rendering {@link TreeNodeCheckbox} in nodes.\n *\n * See [design-decisions.md](../Tree/design-decisions.md) for more thoughts about how should different features\n * like this be supported.\n *\n * @alpha\n */\nexport const SpeedSearchTreeWithCheckboxes = <T extends object>({\n  nestedSelection,\n  cacheInvalidation,\n  onNodeKeyDown,\n  ...props\n}: SpeedSearchTreeProps<T> & {\n  nestedSelection: NestedSelectionState<T>;\n}): React.ReactElement => {\n  const otherInvalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  return (\n    <SpeedSearchTree\n      {...props}\n      // instead of passing cacheInvalidation, a better approach could be to provide nestedSelection as context.\n      cacheInvalidation={{\n        invalidators: [nestedSelection, ...otherInvalidators],\n      }}\n      onNodeKeyDown={(event, item) => {\n        if (event.key === \" \") {\n          nestedSelection.toggle(item.value);\n        }\n        onNodeKeyDown?.(event, item);\n      }}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Checkbox } from \"@intellij-platform/core/Checkbox\";\nimport { TreeContext } from \"@intellij-platform/core/Tree/TreeContext\";\nimport { SelectionState } from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport styled from \"styled-components\";\n\nexport type TreeNodeCheckboxProps<T extends unknown> = {\n  selectionState?: SelectionState;\n  selectItemOnPress?: boolean;\n  onToggle: () => void;\n  // maybe a isDisabled prop to be merged with isDisabled from the item?\n};\n\nconst StyledCheckboxWrapper = styled.span`\n  margin-right: 0.125rem;\n  display: inline-flex;\n`;\n\n/**\n * Checkbox to be used with {@link SpeedSearchTreeWithCheckboxes}. `SpeedSearchTreeWithCheckboxes` doesn't add the\n * checkboxes by default to the nodes, which makes it more flexible in terms of which nodes should have checkbox, or\n * it's exact placement within the tree rows.\n *\n * TreeNodeCheckbox renders a Checkbox with a few extras:\n * - `aria-label` set based on the encompassing item's textValue\n * - `isSelected` and `isIndeterminate` set based on `selectionState`\n * - `isDisabled` is set based in disabled state of the item.\n * - The encompassing item will be selected upon press, if `selectItemOnPress` is `true` (default is `true`).\n * - Small styling adjustment achieved by a wrapper StyledListIconWrapper.\n *\n * @see SpeedSearchTreeWithCheckboxes\n * @see useNestedSelectionState\n *\n * NOTE: this component currently uses TreeContext, to get a hold of selectionManager. If a more abstract component\n * like CollectionCheckbox is needed in the future, we can refactor TreeContext also to something more abstract like\n * CollectionContext which is provided by all such components like List, Tree or Table.\n */\nexport const TreeNodeCheckbox = <T extends unknown>({\n  selectionState,\n  onToggle,\n  selectItemOnPress = true,\n}: TreeNodeCheckboxProps<T>) => {\n  const treeContext = useContext(TreeContext);\n  const itemContext = useContext(ItemStateContext);\n  if (!itemContext) {\n    throw new Error(\"TreeNodeCheckbox is rendered outside tree nodes.\");\n  }\n\n  return (\n    <StyledCheckboxWrapper>\n      <Checkbox\n        preventFocus\n        aria-label={`Select ${itemContext.node.textValue}`}\n        isSelected={selectionState === \"Selected\"}\n        isIndeterminate={selectionState === \"PartiallySelected\"}\n        isDisabled={itemContext.isDisabled}\n        onChange={() => {\n          onToggle();\n          // this if and the whole need for treeContext could be avoided if event.stopPropagation() was not hard coded\n          // in useToggle: https://github.com/adobe/react-spectrum/blob/0d007bca9417c4b7b86fafd5842871bf997bd4c0/packages/@react-aria/toggle/src/useToggle.ts#L46\n          // An improvement could be to replace Checkbox with CheckboxIcon, and simply handle press on it (potential TODO)\n          if (treeContext && itemContext && selectItemOnPress) {\n            treeContext.state.selectionManager.setFocusedKey(\n              itemContext.node.key\n            );\n            treeContext.state.selectionManager.setFocused(true);\n            treeContext.state.selectionManager.setSelectedKeys([\n              itemContext.node.key,\n            ]);\n          }\n        }}\n      />\n    </StyledCheckboxWrapper>\n  );\n};\n","import { Key, useMemo } from \"react\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { useControllableSet } from \"@intellij-platform/core/utils/useSet\";\nimport {\n  NestedSelection,\n  NestedSelectionState,\n  TreeModel,\n} from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\n\n/**\n * A state management util for a selectable list of items with an arbitrary nested grouping. In other words,\n * it manages selection of leaves in a tree.\n *\n * tree is represented as a `getChildren` function that returns children for a given root. if null is passed it\n * returns the top level nodes.\n * Important Note: the tree structure that can be generated by calling `getChildren` function is supposed to be\n * **immutable**. in other words, any change in the tree, should result in a new array of top level items.\n */\n\nexport const useNestedSelectionState = <T extends object, K = Key>(\n  tree: TreeModel<T, K>,\n  {\n    selectedKeys: selectedKeysProp,\n    defaultSelectedKeys,\n    onSelectedKeysChange,\n  }: ControlledStateProps<{\n    selectedKeys: Set<K>;\n  }>\n): NestedSelectionState<T> => {\n  const [selectedKeys, selectedKeysSetter] = useControllableSet(\n    selectedKeysProp!, // bad typing in useControlledState\n    defaultSelectedKeys || new Set(),\n    onSelectedKeysChange! // bad typing in useControlledState\n  );\n  const treeRef = useLatest(tree);\n\n  return useMemo(\n    () =>\n      new NestedSelection<T, K>(\n        { items: selectedKeys, ...selectedKeysSetter },\n        treeRef.current\n      ),\n    [selectedKeys, tree.rootNodes]\n  );\n};\n","import React, { useContext } from \"react\";\n\nexport type Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * TODO(docs): add a few words about this abstraction and it's use.\n */\nexport type WindowInteractionHandlerProps = {\n  /**\n   * Signals start of a UI interaction like resize or move, in which window bounds change.\n   */\n  startInteraction: () => Bounds;\n  /**\n   * Used to update bounds state during a UI interaction.\n   */\n  updateBounds: (bounds: Bounds) => void;\n  /**\n   * Signals end of a UI interaction.\n   */\n  finishInteraction: () => void;\n};\n\nconst WindowInteractionHandlerContext = React.createContext<WindowInteractionHandlerProps | null>(\n  null\n);\n\n/**\n * Provides the context used by components like {@link WindowMoveHandle} and {@link WindowResizeHandles} that provide\n * user interactions that change the boundary of the window they are rendered in.\n * Use {@link useResizableMovableWindow} which implements an efficient state management for window bounds and returns\n * props to be passed to `WindowInteractionHandler`:\n *\n * @example\n *\n * const {\n *    bounds, // Bounds to be applied to the window element.\n *    windowInteractionHandlerProps,\n *  } = useResizableMovableWindow(props);\n *\n * return (\n *   <WindowInteractionHandler {...windowInteractionHandlerProps}>\n *     <div style={effectiveBounds}>...</div>\n *   </WindowInteractionHandler>\n * );\n *\n * @see useResizableMovableWindow\n */\nexport const WindowInteractionHandler = ({\n  children,\n  ...props\n}: WindowInteractionHandlerProps & { children: React.ReactNode }) => {\n  return (\n    <WindowInteractionHandlerContext.Provider value={props}>\n      {children}\n    </WindowInteractionHandlerContext.Provider>\n  );\n};\n\nexport const useWindowInteractionHandler = () =>\n  useContext(WindowInteractionHandlerContext);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { useWindowInteractionHandler } from \"./WindowInteractionHandler\";\nimport React from \"react\";\n\n/**\n * Used for making a dom element a move handle for the window it's being rendered in.\n * It uses the context provided by {@link WindowInteractionHandler}, and returns props to be applied on a dom element to\n * make it a move handle for the window it's being rendered in.\n *\n * @see WindowMoveHandle\n */\nexport function useWindowMoveHandle() {\n  const interactionHandler = useWindowInteractionHandler();\n  if (!interactionHandler) {\n    return { moveHandleProps: {} };\n  }\n  const {\n    finishInteraction,\n    startInteraction,\n    updateBounds,\n  } = interactionHandler;\n\n  const moveProps = useMove({\n    onMoveStart: () => {\n      return startInteraction();\n    },\n    onMove: ({ startState, movement }) => {\n      updateBounds({\n        ...startState,\n        top: startState.top + movement.y,\n        left: startState.left + movement.x,\n      });\n    },\n    onMoveEnd: () => {\n      finishInteraction();\n    },\n  });\n  return { moveHandleProps: moveProps || {} };\n}\n\n/**\n * Used for making a dom element a move handle for the window it's being rendered in.\n * It uses the context provided by {@link WindowInteractionHandler}. A render function is expected as `children`. It's\n * passed the event handlers that need to be applied on a dom element to make it a move handle for the window it's being\n * rendered in.\n */\nexport const WindowMoveHandle = ({\n  children,\n}: {\n  children: (\n    props: ReturnType<typeof useWindowMoveHandle>\n  ) => React.ReactElement;\n}) => {\n  return children(useWindowMoveHandle());\n};\n","import React, { useRef } from \"react\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport {\n  HorizontalResizerProps,\n  VerticalResizerProps,\n} from \"../Resizer/ResizerProps\";\nimport {\n  Bounds,\n  useWindowInteractionHandler,\n} from \"./WindowInteractionHandler\";\n\nconst FLOAT_WINDOW_MIN_WIDTH = 100;\nconst FLOAT_WINDOW_MIN_HEIGHT = 40; // in Intellij Platform it's zero but there is window frame which doesn't exist here\ntype WindowResizeHandlesProps = {\n  minWidth?: number;\n  minHeight?: number;\n};\n\n/**\n * Renders invisible resize handles at the edges of the window it's rendered in. It uses the context provided by\n * {@link WindowInteractionHandler} to resize the window when the handles are used.\n */\nexport function WindowResizeHandles(props: WindowResizeHandlesProps) {\n  const windowResizer = useWindowResizer(props);\n  return (\n    windowResizer && (\n      <>\n        <RightResizer {...windowResizer.getResizerProps(\"right\")} />\n        <LeftResizer {...windowResizer.getResizerProps(\"left\")} />\n        <TopResizer {...windowResizer.getResizerProps(\"top\")} />\n        <BottomResizer {...windowResizer.getResizerProps(\"bottom\")} />\n      </>\n    )\n  );\n}\n\n/**\n * window resizing logic and state. When resizing is in progress, the source of truth is a local state, for performance\n * reasons. When the resize is done (e.g. by mouse being released), `onBoundsChange` is called with the new bounds.\n */\nfunction useWindowResizer({\n  minWidth = FLOAT_WINDOW_MIN_WIDTH,\n  minHeight = FLOAT_WINDOW_MIN_HEIGHT,\n}: WindowResizeHandlesProps = {}) {\n  const initialBoundsRef = useRef<Bounds>({\n    top: 0,\n    height: 0,\n    width: 0,\n    left: 0,\n  });\n  const interactionHandler = useWindowInteractionHandler();\n  if (!interactionHandler) {\n    return null;\n  }\n  const {\n    finishInteraction,\n    startInteraction,\n    updateBounds,\n  } = interactionHandler;\n\n  const onResize = {\n    right: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        width: Math.max(minWidth, initialBoundsRef.current.width + size),\n      }),\n    bottom: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        height: Math.max(minHeight, initialBoundsRef.current.height + size),\n      }),\n    left: (size: number) => {\n      const newWidth = Math.max(\n        minWidth,\n        initialBoundsRef.current.width + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        left: initialBounds.left + initialBounds.width - newWidth,\n        width: newWidth,\n      });\n    },\n    top: (size: number) => {\n      const newHeight = Math.max(\n        minHeight,\n        initialBoundsRef.current.height + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        top: initialBounds.top + initialBounds.height - newHeight,\n        height: newHeight,\n      });\n    },\n  };\n\n  function getResizerProps(side: \"left\" | \"right\"): HorizontalResizerProps;\n  function getResizerProps(side: \"top\" | \"bottom\"): VerticalResizerProps;\n  function getResizerProps(\n    side: \"left\" | \"right\" | \"top\" | \"bottom\"\n  ): HorizontalResizerProps | VerticalResizerProps {\n    const horizontal = side === \"left\" || side === \"right\";\n    return {\n      size: 1,\n      cursor: horizontal ? \"ew\" : \"ns\",\n      onResizeStarted: () => {\n        initialBoundsRef.current = startInteraction();\n      },\n      onResize: onResize[side],\n      onResizeEnd: finishInteraction,\n      style: { position: \"absolute\", [side]: 0 },\n    };\n  }\n\n  return {\n    getResizerProps,\n  };\n}\n","import { useRef, useState } from \"react\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  Bounds,\n  WindowInteractionHandlerProps,\n} from \"./WindowInteractionHandler\";\nimport { ModalWindowProps } from \"@intellij-platform/core\";\nimport { clamp } from \"ramda\";\n\nexport interface UseResizableMovableWindowOptions\n  extends ControlledStateProps<{ bounds: Bounds }> {\n  /**\n   * Allows validating/intercepting bound changes during an interaction.\n   */\n  interceptInteraction?: (\n    newBounds: Bounds,\n    /**\n     * Whether the interaction is a \"move\" or \"resize\" considering the initial bounds when interaction was started.\n     */\n    interactionType: \"move\" | \"resize\"\n  ) => Bounds;\n}\n/**\n * TODO: description\n * TODO: rename to something better :D\n * TODO: maybe an option like ensureInViewport that would move the final bound into the viewport (if necessary), when\n *  calling onBoundsChange at the end of an interaction. That's important because if move handle(s) (usually rendered\n *  at the top of the window) are out of reach, there would be no way back.\n */\nexport function useResizableMovableWindow({\n  bounds: boundsProp,\n  defaultBounds,\n  onBoundsChange,\n  interceptInteraction = (i) => i,\n}: UseResizableMovableWindowOptions) {\n  const [bounds, setBounds] = useControlledState(\n    boundsProp!,\n    defaultBounds || getDefaultBounds(),\n    onBoundsChange!\n  );\n  const initialBoundsRef = useRef<null | Bounds>(null);\n  // local state of bounds for when window is in a UI interaction, like movement or resize with mouse.\n  // We don't want to update the state in the higher levels repeatedly in such transactions, and we just want to\n  // trigger on update when the UI interaction is done.\n  // It's maintained during a UI interaction and then reset to null.\n  const [\n    currentInteractionBounds,\n    setCurrentInteractionBounds,\n  ] = useState<null | Bounds>(null);\n  const onInteractionEnd = () => {\n    if (currentInteractionBounds) {\n      setBounds(currentInteractionBounds);\n    }\n    setCurrentInteractionBounds(null);\n  };\n  const effectiveBounds = currentInteractionBounds || bounds;\n  const windowInteractionHandlerProps: WindowInteractionHandlerProps = {\n    startInteraction: () => {\n      setCurrentInteractionBounds(bounds);\n      initialBoundsRef.current = bounds;\n      return bounds;\n    },\n    updateBounds: (bounds) => {\n      setCurrentInteractionBounds(\n        interceptInteraction(\n          bounds,\n          bounds.width === initialBoundsRef.current?.width &&\n            bounds.height === initialBoundsRef.current?.height\n            ? \"move\"\n            : \"resize\"\n        )\n      );\n    },\n    finishInteraction: onInteractionEnd,\n  };\n  return { bounds: effectiveBounds, windowInteractionHandlerProps };\n}\n\nexport function getDefaultBounds(\n  width: number = Math.max(window.innerWidth / 3, 300),\n  height: number = Math.max(window.innerHeight / 3, 200)\n): Bounds {\n  return {\n    left: (window.innerWidth - width) / 2,\n    top: (window.innerHeight - height) / 2,\n    width,\n    height,\n  };\n}\n\n/**\n * A helper function to create interaction interceptor which ensures bounds are contained within a container.\n *\n * @example\n * const ensureInViewPort = containedWithin({left: 0, top: 0, width: window.innerWidth, height: window.innerHeight})\n *\n * useResizableMovableWindow({ interceptInteraction: ensureInViewPort});\n */\nexport const containedWithin = (\n  containerBounds: Bounds\n): ModalWindowProps[\"interceptInteraction\"] => (bounds, interactionType) => {\n  if (interactionType === \"move\") {\n    const left = clamp(\n      containerBounds.left,\n      containerBounds.left + containerBounds.width - bounds.width,\n      bounds.left\n    );\n    const top = clamp(\n      containerBounds.top,\n      containerBounds.top + containerBounds.height - bounds.height,\n      bounds.top\n    );\n    return {\n      ...bounds,\n      left,\n      top,\n    };\n  } else if (interactionType === \"resize\") {\n    const left = Math.max(containerBounds.left, bounds.left);\n    const top = Math.max(containerBounds.top, bounds.top);\n    // the logic here seems unnecessarily complicated\n    return {\n      left,\n      top,\n      width:\n        bounds.width -\n        Math.max(\n          0,\n          bounds.left +\n            bounds.width -\n            (containerBounds.left + containerBounds.width)\n        ) -\n        (left - bounds.left),\n      height:\n        bounds.height -\n        Math.max(\n          0,\n          bounds.top +\n            bounds.height -\n            (containerBounds.top + containerBounds.height)\n        ) -\n        (top - bounds.top),\n    };\n  }\n  return bounds;\n};\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager as OriginalSelectionManager,\n} from \"@react-stately/selection\";\nimport { Collection, Node, PressEvent } from \"@react-types/shared\";\nimport { Key } from \"react\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\nexport class SelectionManager extends OriginalSelectionManager {\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState\n  ) {\n    super(collection, state);\n  }\n  select(key: Key, e?: PressEvent | PointerEvent) {\n    if (this.selectionMode === \"none\") {\n      return;\n    }\n\n    if (this.selectionMode === \"single\") {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else {\n      if (e?.shiftKey) {\n        this.extendSelection(key);\n      } else if (\n        isCtrlKeyPressed(e) &&\n        (this.selectedKeys.size > 1 || !this.isSelected(key))\n      ) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    }\n  }\n}\n","import { SelectionManager } from \"./SelectionManager\";\nimport { Collection, Node } from \"@react-types/shared\";\n\n/**\n * collection state hooks like `useList`, `useTree`, etc, don't have an option to pass an\n * alternative `SelectionManager` implementation (which is required to achieve the desired\n * multi-select behavior). So this simple utility is kind of a hacky patch to replace selection\n * manager in the return value of those state hooks\n */\nexport function replaceSelectionManager<\n  T,\n  S extends {\n    selectionManager: SelectionManager;\n    collection: Collection<Node<T>>;\n  }\n>(state: S) {\n  state.selectionManager = new SelectionManager(\n    state.collection,\n    // @ts-expect-error state is private. There might be better ways of creating a custom selection manager\n    state.selectionManager.state\n  );\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import { useSelectableItem as useOriginalSelectableItem } from \"@react-aria/selection\";\nimport { MouseEventHandler } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\n/**\n * A wrapper around useSelectableItem, which adjusts for intellij platform nuances:\n * - Selects item with right clicks as well, which allows ContextMenuContainer to be used with any collection component\n *   without the need for built-in context-menu support in such components. We won't need this if we move to a built-in\n *   context-menu support for List,Tree, etc.\n * @private\n */\nexport const useSelectableItem: typeof useOriginalSelectableItem = (\n  options\n) => {\n  const onContextMenu: MouseEventHandler<HTMLElement> = (e) => {\n    if (!options.selectionManager.isSelected(options.key)) {\n      options.selectionManager.select(options.key, {\n        type: \"press\",\n        pointerType: \"mouse\",\n        target: e.currentTarget,\n        shiftKey: e.shiftKey,\n        metaKey: e.metaKey,\n        ctrlKey: e.ctrlKey,\n        altKey: e.altKey,\n      });\n    }\n  };\n  const result = useOriginalSelectableItem(options);\n  return {\n    ...result,\n    itemProps: mergeProps(result.itemProps, { onContextMenu }),\n  };\n};\n","/**\n * drop shadow of windows and other overlays in Mac OS X. The current value is not accurate and needs to be revisited.\n */\nexport const MAC_WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled = styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme = styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer = styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<{ focus: () => void }>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","/**\n * IMPORTANT: this is a copy of a non-exported file from @react-aria/interactions\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { runAfterTransition } from \"@react-aria/utils\";\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\ntype State = \"default\" | \"disabled\" | \"restoring\";\n\nlet state: State = \"default\";\nlet savedUserSelect = \"\";\n\nexport function disableTextSelection() {\n  if (state === \"default\") {\n    savedUserSelect = document.documentElement.style.webkitUserSelect;\n    document.documentElement.style.webkitUserSelect = \"none\";\n  }\n\n  state = \"disabled\";\n}\n\nexport function restoreTextSelection() {\n  // If the state is already default, there's nothing to do.\n  // If it is restoring, then there's no need to queue a second restore.\n  if (state !== \"disabled\") {\n    return;\n  }\n\n  state = \"restoring\";\n\n  // There appears to be a delay on iOS where selection still might occur\n  // after pointer up, so wait a bit before removing user-select.\n  setTimeout(() => {\n    // Wait for any CSS transitions to complete so we don't recompute style\n    // for the whole page in the middle of the animation and cause jank.\n    runAfterTransition(() => {\n      // Avoid race conditions\n      if (state === \"restoring\") {\n        if (document.documentElement.style.webkitUserSelect === \"none\") {\n          document.documentElement.style.webkitUserSelect =\n            savedUserSelect || \"\";\n        }\n\n        savedUserSelect = \"\";\n        state = \"default\";\n      }\n    });\n  }, 300);\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { disableTextSelection, restoreTextSelection } from \"./textSelection\";\nimport { useLatest } from \"../useLatest\";\n\nexport type XY = { x: number; y: number };\nexport type UseMoveOptions<S> = {\n  /**\n   * the amount of movement (in pixels) after which the move should start. It prevents interference\n   * with simple click (or more generally, press) events, and provides better UX.\n   * @default 0\n   */\n  dragThreshold?: number;\n  disabled?: boolean;\n  onMoveStart: (args: { from: XY }) => S;\n  onMove: (args: { from: XY; to: XY; movement: XY; startState: S }) => void;\n  onMoveEnd?: (args: { startState: S }) => void;\n};\n\n// TODO: cleanup if unmount happens during drag.\n// TODO: Better even handling for touch devices?\n//  wrapping `useMove` from react-aria to just add support for movement threshold should be the\n//  way to go, but there are a few problems:\n//    - it seemed a little buggy in the example here: https://react-spectrum.adobe.com/react-aria/useMove.html\n//    - the API is not great in a sense that it only gives the diff in last movement.\n//      Also onMoveStart doesn't give the initial position, so it's not possible to even calculate\n//\n// TODO: move should be finished by pressing Escape. onMoveCancel maybe?\n/**\n * Similar to https://react-spectrum.adobe.com/react-aria/useMove.html, with slightly different\n * features and API.\n * NOTE: initially the API was designed in a way that onMove and onMove end callbacks were\n * returned from onMoveStart, instead of being directly passed in the options.\n * This would enable capturing the initial state of each move transaction, by defining whatever\n * variable in onMoveStart and closing over them by onMove and onMoveEnd.\n * The problem with this approach was that although you could capture the initial state of the\n * movement, by closure, any other variable in the outer scopes was also closed over, and you were\n * stuck with the values from the particular render in which the movement was started.\n * Of course, you could work around it by using refs, but it would be unintuitive.\n * So because of that issue, it's redesigned to have onMoveStart, onMove, and onMoveEnd all\n * directly passed as options, but you can return anything from `onMoveStart` which will be passed\n * to onMove and onMoveEnd as `startState`.\n */\nexport function useMove<S>({\n  dragThreshold = 0,\n  disabled,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n}: UseMoveOptions<S>): { onMouseDown?: MouseEventHandler } {\n  const handlersRef = useLatest({ onMove, onMoveEnd });\n\n  const onMouseDown = (event: React.MouseEvent) => {\n    disableTextSelection();\n    const from = { x: event.pageX, y: event.pageY };\n    let dragStarted = false;\n    let startState: S;\n\n    const onMouseMove = (event: MouseEvent) => {\n      const { pageX: x, pageY: y } = event;\n      const movement = { x: x - from.x, y: y - from.y };\n      const isDraggedEnough =\n        Math.abs(movement.x) >= dragThreshold ||\n        Math.abs(movement.y) >= dragThreshold;\n      if (isDraggedEnough && !dragStarted) {\n        dragStarted = true;\n        startState = onMoveStart({ from });\n      }\n      if (dragStarted) {\n        handlersRef.current.onMove({\n          from,\n          to: { x: from.x + movement.x, y: from.y + movement.y },\n          movement,\n          startState,\n        });\n      }\n    };\n    document.addEventListener(\"mousemove\", onMouseMove);\n\n    document.addEventListener(\n      \"mouseup\",\n      () => {\n        restoreTextSelection();\n        if (dragStarted) {\n          handlersRef.current.onMoveEnd?.({ startState });\n        }\n        document.removeEventListener(\"mousemove\", onMouseMove);\n      },\n      { once: true }\n    );\n  };\n  return disabled ? {} : { onMouseDown };\n}\n","import { isMac } from \"@react-aria/utils\";\n\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  ref.current = value;\n  return ref;\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export class ImmutableSet<T> implements ReadonlySet<T> {\n  readonly size: number;\n  private readonly set: ReadonlySet<T>;\n\n  constructor(values: Iterable<T>) {\n    this.set = new Set(values);\n    this.size = this.set.size;\n  }\n\n  add(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.add(item);\n      });\n    });\n  }\n\n  delete(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.delete(item);\n      });\n    });\n  }\n\n  toggle(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        if (!newValue.delete(item)) {\n          newValue.add(item);\n        }\n      });\n    });\n  }\n\n  clear(): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      newValue.clear();\n    });\n  }\n\n  private setValueWithMutation(\n    mutate: (newValue: Set<T>) => void\n  ): ImmutableSet<T> {\n    const newValue = new Set(this.set);\n    mutate(newValue);\n    return new ImmutableSet(newValue);\n  }\n\n  ////////////////////////////////////////////////// delegated methods /////////////////////////////////////////////////\n  forEach(...args: Parameters<ReadonlySet<T>[\"forEach\"]>): void {\n    return this.set.forEach(...args);\n  }\n\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { useControlledState } from \"@react-stately/utils\";\nimport { useMemo } from \"react\";\nimport { ImmutableSet } from \"./immutableSet\";\n\n/**\n * Creates map interface out of a setter of form (currentValue: Map) => Map\n * Use {@link useControllableSet} instead if you need a Set state in a React component.\n * This is useful for use outside React components, such as state management libraries.\n */\nexport const createSetInterface = <T>(\n  set: (value: (prevState: Set<T>) => Set<T>) => void\n) => ({\n  add: (...values: T[]) =>\n    set(\n      (currentValue) => new Set(new ImmutableSet(currentValue).add(...values))\n    ),\n  delete: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).delete(...values))\n    ),\n  clear: () =>\n    set((currentValue) => new Set(new ImmutableSet(currentValue).clear())),\n  toggle: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).toggle(...values))\n    ),\n});\n\nfunction useStateSetterForSet<T>(\n  setValue: (value: (prevState: Set<T>) => Set<T>, ...args: any[]) => void\n) {\n  return useMemo(() => createSetInterface(setValue), [setValue]);\n}\n\n/**\n * controllable state management for a Set. returns a tuple containing the value and an object with Set functions on it,\n * which would update the state.\n */\nexport const useControllableSet = <T>(\n  valueProp: Set<T> | undefined,\n  defaultValue: Set<T> = new Set(),\n  onChange: ((newValue: Set<T>) => void) | undefined\n) => {\n  const [value, setValue] = useControlledState(\n    valueProp!, // bad typing in useControlledState\n    defaultValue,\n    onChange! // bad typing in useControlledState\n  );\n\n  // @ts-expect-error FIXME https://github.com/adobe/react-spectrum/issues/2320\n  return [value, useStateSetterForSet(setValue)] as const;\n};\n","import { ListState } from \"@react-stately/list\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { HTMLProps, Key, RefObject } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { SpeedSearchPopupProps } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { TextRange } from \"../../TextRange\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport { ListProps, useList } from \"../useList\";\nimport { CollectionSpeedSearchContextValue } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\ninterface UseListProps\n  extends Omit<ListProps, \"keyboardDelegate\" | \"disallowTypeAhead\"> {\n  stickySearch?: boolean;\n}\n\nexport function useSpeedSearchList<T>(\n  props: UseListProps,\n  listState: ListState<T>,\n  ref: RefObject<HTMLElement>\n): {\n  listProps: Omit<HTMLProps<HTMLUListElement>, \"as\" | \"ref\">;\n  searchPopupProps: SpeedSearchPopupProps;\n  focused: boolean;\n  selectionManager: SelectionManager;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n  matches: Map<Key, TextRange[]>;\n} {\n  const { stickySearch } = props;\n\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n    speedSearchContextValue,\n  } = useCollectionSpeedSearch({\n    collection: listState.collection,\n    selectionManager: listState.selectionManager,\n    keyboardDelegate: new ListKeyboardDelegate(\n      listState.collection,\n      listState.disabledKeys,\n      ref\n    ),\n    stickySearch,\n  });\n  const { listProps, focused } = useList(\n    {\n      ...props,\n      disallowTypeAhead: true,\n      keyboardDelegate,\n    },\n    { ...listState, selectionManager },\n    ref\n  );\n\n  return {\n    listProps: mergeProps(listProps, speedSearchContainerProps),\n    matches: speedSearch.matches,\n    focused,\n    selectionManager,\n    speedSearchContextValue,\n    searchPopupProps,\n  };\n}\n","import { styled } from \"../styled\";\n\nexport const SpeedSearchContainer = styled.div`\n  position: relative;\n  overflow: visible;\n  max-height: 100%;\n`;\n","import styled from \"styled-components\";\nimport { SpeedSearchContainer } from \"../SpeedSearch/SpeedSearchContainer\";\n\nexport const CollectionSpeedSearchContainer = styled(SpeedSearchContainer)<{\n  fillAvailableSpace?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ fillAvailableSpace }) => (fillAvailableSpace ? 1 : undefined)};\n`;\n","import React, { useRef } from \"react\";\nimport { StyledList } from \"../StyledList\";\nimport { ListProps } from \"../List\";\nimport { useSpeedSearchList } from \"./useSpeedSearchList\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { listItemRenderer } from \"../listItemRenderer\";\nimport { useListState } from \"../useListState\";\nimport { ListItem } from \"../ListItem\";\nimport { CollectionSpeedSearchContainer } from \"../../CollectionSpeedSearch/CollectionSpeedSearchContainer\";\nimport {\n  CollectionSpeedSearchContext,\n  SpeedSearchItemHighlightsProvider,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\n\ninterface SpeedSearchListProps<T extends object> extends ListProps<T> {\n  stickySearch?: boolean;\n}\n\n/**\n * TODO:\n *  - Override keyboard navigation (arrows, ctrl+A, etc.) when speed search is active.\n */\nexport function SpeedSearchList<T extends object>({\n  disallowEmptySelection = true,\n  alwaysShowAsFocused = false,\n  fillAvailableSpace = false,\n  onAction,\n  ...inputProps\n}: SpeedSearchListProps<T>) {\n  const props = { ...inputProps, disallowEmptySelection };\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useListState(props);\n\n  const {\n    listProps,\n    searchPopupProps,\n    focused,\n    speedSearchContextValue,\n  } = useSpeedSearchList(props, state, ref);\n\n  return (\n    <CollectionSpeedSearchContainer fillAvailableSpace={fillAvailableSpace}>\n      <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n        <SpeedSearchPopup {...searchPopupProps} />\n        <StyledList\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...listProps}\n        >\n          {[...state.collection].map(\n            listItemRenderer({\n              item: (item) => (\n                <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n                  <ListItem\n                    key={item.key}\n                    item={item}\n                    state={state}\n                    listFocused={alwaysShowAsFocused || focused}\n                    onAction={() => onAction?.(item.key)}\n                  />\n                </SpeedSearchItemHighlightsProvider>\n              ),\n            })\n          )}\n        </StyledList>\n      </CollectionSpeedSearchContext.Provider>\n    </CollectionSpeedSearchContainer>\n  );\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Green circle indicator used with icons.\n * Reference: platform/execution/src/com/intellij/execution/runners/IndicatorIcon.kt\n */\nexport const StyledIconLiveIndicator = styled.span`\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  border-radius: 1000px;\n  background: #00ff00;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0, 0, 0, 0.4);\n  bottom: 1px;\n  right: 1px;\n`;\n","import { mergeProps } from \"@react-aria/utils\";\nimport React, { HTMLProps } from \"react\";\nimport { SpeedSearchContainer } from \"./SpeedSearchContainer\";\nimport { SpeedSearchPopup } from \"./SpeedSearchPopup\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"./useSpeedSearch\";\n\ninterface Props extends SpeedSearchStateProps {\n  children: React.ReactNode;\n  stickySearch?: boolean;\n  match?: boolean;\n  className?: string;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\" | \"ref\">;\n}\n\n// Maybe no need for this component, now that almost everything is moved to hooks, and a couple of\n// styled components. Then useSpeedSearchState can also be moved to useSpeedSearch\nexport function SpeedSearch({\n  children,\n  stickySearch = false,\n  className,\n  containerProps = {},\n  match,\n  ...otherProps\n}: Props) {\n  const speedSearchState = useSpeedSearchState(otherProps);\n  const { containerProps: speedSearchContainerProps } = useSpeedSearch(\n    { stickySearch },\n    speedSearchState\n  );\n\n  return (\n    <SpeedSearchContainer\n      /* We might as well use useFocusable. The return type was troublesome in the first try. */\n      tabIndex={-1}\n      {...mergeProps(containerProps, speedSearchContainerProps, { className })}\n    >\n      <SpeedSearchPopup active={speedSearchState.active} match={match}>\n        {speedSearchState.searchTerm}\n      </SpeedSearchPopup>\n      {children}\n    </SpeedSearchContainer>\n  );\n}\n","import React, { ForwardedRef, useRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { TreeProps as StatelyTreeProps } from \"@react-stately/tree\";\nimport { replaceSelectionManager } from \"@intellij-platform/core/selection\";\nimport { StyledTree } from \"./StyledTree\";\nimport { TreeRef } from \"./useTreeRef\";\nimport { TreeNode } from \"./TreeNode\";\nimport { TreeContext } from \"./TreeContext\";\nimport { useTreeState } from \"./__tmp__useTreeState\";\nimport { SelectableTreeProps, useSelectableTree } from \"./useSelectableTree\";\nimport { useTreeVirtualizer } from \"./useTreeVirtualizer\";\nimport { CollectionCacheInvalidationProps } from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\n\nexport interface TreeProps<T extends object>\n  extends StatelyTreeProps<T>,\n    CollectionCacheInvalidationProps,\n    Omit<SelectableTreeProps<T>, \"keyboardDelegate\" | \"isVirtualized\"> {\n  fillAvailableSpace?: boolean;\n  /**\n   * Shows the tree in focused style, even when it's not focused. Should be avoided in general, but there might be\n   * special valid use cases.\n   */\n  alwaysShowAsFocused?: boolean;\n}\n\n/**\n * TODO:\n *  - Match select all behaviour. Currently, `getSelectAllKeys` in `SelectionManager` returns\n *   all nested keys too. But it's not aligned with Tree implementation in Intellij Platform. And\n *   beside from that, it seems to be a little inconsistent in some edge cases where you select all,\n *   and then deselect a node. Then all of a sudden, all collapsed nested keys are no longer selected.\n */\nexport const Tree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      alwaysShowAsFocused = false,\n      ...props\n    }: TreeProps<T>,\n    forwardedRef: ForwardedRef<TreeRef>\n  ) => {\n    const state = replaceSelectionManager(useTreeState(props, forwardedRef));\n    const ref = useRef<HTMLDivElement>(null);\n\n    const { treeProps, treeContext } = useSelectableTree(\n      {\n        ...props,\n        isVirtualized: true,\n      },\n      state,\n      ref\n    );\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <StyledTree\n          as={Virtualizer}\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...virtualizerProps}\n          {...treeProps}\n        >\n          {(itemType: string, item: object) => (\n            <TreeNode\n              key={(item as Node<T>).key}\n              item={item as Node<T>}\n              alwaysShowAsFocused={alwaysShowAsFocused}\n            />\n          )}\n        </StyledTree>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\n\ntype Props = {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  onClose?: () => void;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n};\n\nexport const ToolWindowTabContent = React.forwardRef(\n  (\n    { icon, title, onClose, containerProps }: Props,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    return (\n      <TabContentLayout\n        containerProps={containerProps}\n        ref={ref}\n        startIcon={icon}\n        title={title}\n        endIcon={onClose && <TabCloseButton onPress={onClose} />}\n      />\n    );\n  }\n);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as juiComponents from \"@intellij-platform/core\";\nimport darculaThemeJson from \"@intellij-platform/core/themes/darcula.theme.json\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\nimport highContrastThemeJson from \"@intellij-platform/core/themes/HighContrast.theme.json\";\n\nconst LazyExampleApp = React.lazy(() => import(\"jui-example-app/src/App\"));\nconst ExampleApp = () => (\n  // Because ReactLive doesn't render a Suspense around what it renders.\n  <React.Suspense fallback=\"loading\">\n    <LazyExampleApp />\n  </React.Suspense>\n);\nimport React from \"react\";\n\n// Add react-live imports you need here\nconst ReactLiveScope = {\n  React,\n  ...React,\n  ...juiComponents,\n  ExampleApp,\n  darculaThemeJson,\n  lightThemeJson,\n  highContrastThemeJson,\n};\n\nexport default ReactLiveScope;\n","// extracted by mini-css-extract-plugin\nexport default {\"playground\":\"playground_whuD\",\"noPadding\":\"noPadding_tWI2\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Playground from \"@theme/Playground\";\nimport ReactLiveScope from \"@theme/ReactLiveScope\";\nimport CodeBlock from \"@theme-init/CodeBlock\";\nimport clsx from \"clsx\";\nimport styles from \"../Playground/style-overrides.module.css\";\n\nconst withLiveEditor = (Component) => {\n  function WithLiveEditor(props) {\n    if (props.live) {\n      // idea: We can support playground with alternative sources, where each of them will show up as a button\n      // below the default playground. Clicking on buttons will switch to that example. There can be a simple syntax\n      // for embedding multiple sources in one code block which then will be converted into examples here.\n      return <Playground scope={ReactLiveScope} {...props} />;\n    }\n\n    return <Component {...props} />;\n  }\n\n  return WithLiveEditor;\n};\n\nconst withThemeBackground = (Component) => {\n  function WithThemeBackground(props) {\n    const theme = useTheme();\n    const content = <Component {...props} />;\n    const style = { \"--ifm-list-item-margin\": 0 };\n    if (props.themed) {\n      style[\"--ifm-pre-background\"] = theme.color(\"*.background\");\n    }\n    return (\n      <div\n        style={style}\n        className={clsx(styles.playground, {\n          [styles.noPadding]: props.noPadding,\n        })}\n      >\n        {content}\n      </div>\n    );\n  }\n\n  return WithThemeBackground;\n};\n\nexport default withThemeBackground(withLiveEditor(CodeBlock));\n"],"names":["DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","StyledActionButton","styled","minSize","theme","color","ActionButton","React","ref","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","isDisabled","onPress","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","otherProps","pressProps","usePress","className","disabled","mergeProps","tabIndex","undefined","ArrowIcon","PlatformIcon","ActionButtonWithMenu","renderMenu","children","noArrow","buttonProps","previouslyFocusedElementRef","useRef","onOpenChange","open","current","focus","props","onFocus","e","relatedTarget","HTMLElement","icon","StyledActionToolbar","getBorder","hasBorder","dark","StyledHorizontalActionToolbar","StyledHorizontalSeparator","StyledVerticalActionToolbar","StyledVerticalSeparator","OrientationContext","ActionToolbar","orientation","Provider","value","ActionToolbarSeparator","useContext","bgColor","StyledHeaderActions","StyledBalloonContainer","StyledIconContainer","StyledBalloonHeader","StyledBalloonBody","lineClamp","StyledBalloonFooter","StyledToggleIconContainer","StyledToggleExpandButtonContainer","StyledHoverContainer","StyledToggleExpandButtonFooterContainer","BalloonContext","BalloonActionLink","context","Error","onClose","args","Balloon","iconProp","expanded","expandedProp","defaultExpanded","onExpandedChange","title","headerActions","body","actions","containerProps","bodyRef","expandable","setExpandable","useState","setExpanded","useControlledState","maxLinesWhenNotExpanded","useEffect","bodyElem","clientHeight","parseFloat","getComputedStyle","lineHeight","getNumLines","scrollHeight","find","iconType","index","arr","length","toggle","effectiveExpanded","Boolean","onClick","role","style","marginLeft","ToggleWrapper","enabled","onToggle","Component","stopPropagation","iconName","toggleIcon","NotImplementedFn","BalloonsContext","show","showSticky","useBalloons","BalloonsProvider","disablePortal","BalloonsContainer","StyledBalloonsStack","balloons","setBalloons","timeoutIdsRef","lastIdRef","api","useMemo","timeout","filter","aBalloon","balloon","key","timeoutId","window","setTimeout","aTimeoutId","concat","forEach","id","clearTimeout","notificationsStack","position","ReactDOM","document","StyledButton","variants","default","Button","variant","useButton","useObjectRef","domProps","filterDOMProps","autoFocus","StyledWrapperLabel","StyledCheckboxLabelText","Checkbox","preventFocus","disableFocusAlwaysVisible","state","useToggleState","inputProps","useCheckbox","isFocusVisible","isFocused","focusProps","useFocusRing","wrapperPressProps","focusDisabledProps","onFocusCapture","event","preventDefault","target","blur","isIndeterminate","isSelected","pointerEvents","CheckboxIcon","size","name","modifiers","Disabled","Selected","Focused","CollectionSpeedSearchContext","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","itemKey","item","collection","getItem","text","textValue","console","warn","highlightedRanges","matches","get","HighlightedTextValue","speedSearchContext","highlights","createSpeedSearchSelectionManager","wrappedSelectionManager","Object","create","selectAll","setSelectedKeys","Set","keys","disabledKeys","has","useCollectionSpeedSearch","selectionManager","stickySearch","keyboardDelegate","speedSearchStateProps","speedSearch","useSpeedSearchState","speedSearchSelectionManager","searchTerm","active","result","Map","getKeys","map","type","matchedRanges","minusculeMatch","set","latestValues","useLatest","matchedKeys","noneOfTheMatchesAreSelected","some","matchedKey","newSelectedKey","passedFirstSelection","firstSelectedKey","includes","getMatchToSelect","setFocusedKey","replaceSelection","useCollectionSpeedSearchResult","useSpeedSearch","speedSearchKeyboardDelegate","wrappedKeyboardDelegate","getKeyBelow","keyBelow","getKeyAbove","keyAfter","createSpeedSearchKeyboardDelegate","speedSearchContextValue","searchPopupProps","match","Divider","_Divider","getCollectionNode","element","rendered","hasChildNodes","DividerItem","seq","Item","_Item","StatelyItem","next","originalShouldInvalidate","shouldInvalidate","invalidated","StyledItemLayout","StyledHint","SelectionAwareSpan","commonColors","inactiveTextColor","ItemLayout","Hint","ItemStateContext","useCollectionAutoScroll","isVirtualized","focusedKey","querySelector","scrollIntoView","StyledIconHoverContainer","AutoHoverPlatformIcon","hoverIcon","amendName","LafIcon","forwardedRef","themePath","resolvedIconPath","iconDescriptor","useTheme","resolvedValue","isUnderDarcula","reduce","soFar","modifier","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","darkIcon","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","itemState","selected","unmounted","async","error","dataset","loadingIcon","svg","getSvgIcon","catch","remove","svgElement","createElement","appendChild","outerHTML","fetchIcon","Img","darkSrc","src","StyledLink","focusBorderColor","Link","linkProps","useLink","elementType","focusRingClass","as","List","disallowEmptySelection","alwaysShowAsFocused","fillAvailableSpace","onAction","useListState","listProps","focused","useList","listItemRenderer","listFocused","ListDivider","useSeparator","ListItem","itemProps","useSelectableItem","containerFocused","node","StyledList","css","StyledListItem","backgroundColor","labelForeground","labelSelectedForeground","display","whiteSpace","paddingLeft","outline","cursor","minWidth","StyledListSectionHeader","fontWeight","renderItem","sectionHeader","renderSectionHeader","render","isSectionNode","childNodes","isDividerNode","onMouseDown","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","focusWithinProps","useFocusWithin","onFocusWithinChange","firstKey","getFirstKey","isEmpty","select","replaceSelectionManager","originalUseListState","selectionBehavior","ContextMenuContainer","useMenuTriggerState","overlayProps","overlayRef","useContextMenu","restoreFocus","StyledMenu","isMac","MAC_WINDOW_SHADOW","StyledMenuItem","isActive","StyledNestedArrow","StyledSelectedMark","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItem","expandOn","nestedMenuRef","isExpanded","expandedKeys","selectedKeys","menuItemProps","useMenuItem","maybeOpenSubmenu","toggleKey","hoverProps","useHover","onHoverStart","keyboardProps","useKeyboard","onKeyDown","continuePropagation","positionProps","useOverlayPosition","targetRef","placement","shouldFlip","log","offset","crossOffset","isOpen","subMenuProps","useSubmenu","FocusScope","Menu","items","childItem","childItems","hasChildItems","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","headingProps","groupProps","useMenuSection","heading","MenuOverlayContext","close","useTreeState","expandedKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","menuProps","useMenu","StyledMenuItemLayout","Content","Icon","Shortcut","MenuItemLayout","content","shortcut","useContextOrThrow","MenuOverlay","forceRestoreFocus","MenuTrigger","direction","align","menuTriggerProps","triggerRef","triggerProps","useMenuTrigger","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","getPlacement","containerPadding","updatePosition","options","useLayoutEffect","fakeTarget","assign","width","height","visibility","left","clientX","top","clientY","useMouseEventOverlayPosition","onContextMenu","StyledWindowTitle","StyledWindowUnderlay","StyledWindowContainer","StyledWindowInnerContainer","StyledWindowContentWrapper","StyledWindowFooter","ModalWindowInner","interactions","footer","underlayProps","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","bounds","windowInteractionHandlerProps","useResizableMovableWindow","renderTitle","contain","moveHandleProps","minHeight","ModalWindow","StyledFooter","contrastBorder","StyledFooterSide","WindowLayout","Footer","right","ProgressBar","maxValue","minValue","namePosition","details","secondaryDetails","button","dense","progressBarProps","labelProps","useProgressBar","label","percentage","toFixed","forcedDetails","setForcedDetails","tooltip","setTooltip","contextValue","StyledProgressBarLabel","effectiveDetails","StyledProgressBarContainer","StyledProgressBarLineContainer","hasTopMargin","hasBottomMargin","StyledProgressBarTrack","indeterminate","StyledProgressBarProgress","showValueLabel","valueLabel","ProgressBarContext","StyledProgressBarDetails","contextHelpForeground","getIndeterminateStartColor","getIndeterminateEndColor","indeterminateBackgroundAnimation","keyframes","useProgressBarIconButton","hoverTooltip","isHovered","useProgressBarPauseIconButton","paused","ProgressBarPauseButton","onPausedChange","small","ProgressBarStopButton","ResizableView","onResize","resizerPlacement","firstView","firstSize","onFirstResize","lastView","lastSize","onLastResize","BottomResizer","onResizeEnd","onResizeStarted","resizerProps","useBottomResizer","StyledHorizontalResizer","StyledHorizontalResizerArea","handleSize","HorizontalResizer","outerPadding","background","LeftResizer","useLeftResizer","RightResizer","useRightResizer","TopResizer","useTopResizer","StyledVerticalResizer","StyledVerticalResizerArea","VerticalResizer","useResizer","invert","useMove","dragThreshold","onMoveStart","onMoveEnd","onMove","movement","startState","StyledSearchIcon","SpeedSearchPopup","StyledSpeedSearchPopup","replace","tooltipForeground","red","useGhostInput","onChange","valueRef","ctrlKey","altKey","metaKey","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","slice","setActive","onActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","ghostInputKeydown","trimmedValue","trimStart","clear","onKeyUp","onBlur","StatusBar","StyledStatusBar","StyledStatusBarLeft","StyledStatusBarRight","StyledStatusBarSection","StatusBarWidget","StyledWrapper","StyledStatusBarWidget","StyledStatusBarIconWidget","inset","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundClip","boxSizing","margin","border","flexShrink","DebuggerTabContent","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","editorTabTheme","borderColor","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","TabCloseButton","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabContentLayout","TabItem","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","intersectionObserver","tabProps","useTab","selectedKey","observe","unobserve","useIntersectionObserver","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","isScrolled","threshold","setIsScrolled","bottom","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetWidth","offsetTop","scrollTop","offsetBottom","offsetHeight","newIsScrolled","onScroll","useIsScrolled","overflowedKeys","scrollableItemsContainerRef","setIntersectionObserver","setOverflowedKeys","observer","IntersectionObserver","entries","newHiddenKeys","entry","isIntersecting","val","newVisibleKeys","currentOverflowMenuKeys","root","rootMargin","disconnect","useCollectionOverflowObserver","scrollableContainer","selectedTabElement","TabsOverflowMenu","onSelect","setSelectedKey","menuItem","inOverflowMenu","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","getAllRanges","ranges","from","push","to","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","TextWithHighlights","parts","highlighted","numberPattern","parseComponent","componentStr","parseInt","Math","round","min","parseHexRgba","str","i","parseShorthandHex","parseRgb","RegExp","parseRgba","Color","constructor","rgba","g","b","a","r","NaN","parse","Array","isArray","every","c","Number","isInteger","parseColorString","this","isValid","withTransparency","alpha","brighter","int","floor","FACTOR","darker","max","toString","blend","colorOrColorString","getBlendedValue","component","isNaN","padStart","StyledSplitterContainer","StyledSplitterInnerView","ThreeViewSplitter","resizerPropsOverrides","innerView","innerViewMinSize","containerRef","firstViewRef","lastViewRef","firstSizeState","setFirstSizeState","lastSizeState","setLastSizeState","horizontalValue","verticalValue","FirstResizer","SecondResizer","sizeStyleProp","minSizeStyleProp","isFractionSize","normalizeSize","getSize","getNewSize","currentSize","newSize","newFractionSize","getActualSize","viewElem","actualSize","currentLastSize","currentFirstSize","viewModes","anchors","anchor","isSplit","getAnchorName","toUpperCase","isHorizontalToolWindow","viewModeToString","undock","docked_pinned","docked_unpinned","float","ToolWindowSettingsIconMenu","changeViewMode","moveToSide","stretchWidth","stretchHeight","useToolWindowState","viewModeActions","viewMode","perform","moveToActions","resizeActions","alert","removeFromSideBarAction","gearIconActions","action","StyledToolWindowHeader","StyledToolWindowHeaderActions","StyledToolWindowHeaderContent","DefaultToolWindowHeader","additionalActions","contentHasFocus","hide","useToolWindow","contentRef","focusableContentRef","onFocusChange","setContentHasFocus","contentFocusWithinProps","toolWindowProps","autoHideProps","hideTimeoutId","windowFocusWithinProps","onBlurWithin","onFocusWithin","useAutoHide","focusDelegatorProps","currentTarget","possiblyBlurredElement","Element","contains","useFocusDelegator","activeElement","useWindowMoveHandle","toolWindowContentProps","toolWindowHeaderProps","StyledToolWindowContainer","StyledToolWindowContent","DefaultToolWindowContext","hasFocus","useDefaultToolWindowContext","DefaultToolWindow","headerContent","defaultToolWindowContext","MultiViewToolWindow","groupTabs","isToolWindowFocused","setToolWindowFocused","activeKey","setActiveKey","defaultActiveKey","onActiveKeyChange","contents","child","validChild","MultiContentToolWindowContent","renderedViewSwitcher","onSelectionChange","tabContent","previousKeys","usePrevious","newActiveKey","indexOf","activeContent","View","StyledFloatView","FloatView","onBoundsChange","effectiveBounds","WindowInteractionHandler","WindowResizeHandles","FloatToolWindows","floatWindows","renderToolWindow","stackedFloatWindows","getKey","sortedKeys","setSortedKeys","sorted","sort","bringToFront","move","useStackedLayersState","layersProps","_","toolWindow","MovableToolWindowStripeContext","MovableToolWindowStripeProvider","stripes","draggingRect","setDraggingRect","draggingKey","setDraggingKey","dropPosition","setDropPosition","getDropPositionRef","moveStartLocationRef","addStripe","propsRef","startMove","stripe","stripeElRef","stripeElement","getBoundingClientRect","getItemRect","toJSON","indexInMain","mainItems","findIndex","indexInSplit","splitItems","dropPositionGetters","createGetDropPosition","getDropPosition","draggedRect","endMove","TopStripe","BottomStripe","LeftStripe","RightStripe","MainView","StyledToolWindowOuterLayout","Shell","hideStripes","getSizeInAnchor","containerSize","mapToKey","prop","sortAndMapToKey","compose","sortBy","order","filterMains","getMains","filterSplits","filterVisible","expectedViewMode","isVisible","getSplits","filterVisibleDocked","filterVisibleUnDocked","getDocked","toolWindows","docks","mains","splits","weight","mainKey","sizeFraction","sideWeight","getUnDocked","windows","getSideState","main","activeKeys","undocked","docked","DEFAULT_HEIGHT","DEFAULT_WIDTH","getFloatWindowsState","pipe","floatingBounds","getFloatWindowState","getStripeRect","start","rect","end","getDropPositions","getRef","score","abs","flatMap","relative","keyToOffsets","boundingRect","getKeyToOffsets","dropPositions","lastDropPosition","stripeRect","getCanDrop","bestMatch","candidate","STRIPE_BUTTON_LINE_HEIGHT","StyledToolWindowStripeButton","StyledToolWindowStripe","theOtherSide","preventCollapse","StyledSpacer","useElementMove","ghost","ghostOption","otherOptions","updateGhostPosition","defaultGhost","cloneNode","colors","computedBackground","unshift","parentElement","resultColor","nextColor","findEffectiveBackgroundColor","createDefaultGhost","append","x","y","ToolWindowStripe","onItemPress","getProps","latestPropsRef","moveDisabled","useMovableStripeButtons","isNotCurrentItem","anItem","ToolWindowStripeButton","getStripeButtonStyles","styles","marginValue","StyledUndockSide","UndockSide","ToolWindows","hideToolWindowBars","useWidescreenLayout","toolWindowsState","onToolWindowStateChange","renderToolbarButton","renderWindow","mainContentMinWidth","layoutState","setLayoutState","groupBy","getToolWindowsLayoutState","renderStripe","ToolWindowStateProvider","renderSideDockedView","resizeDockSplitView","onDockResize","containerBounds","resizeDock","getSplitViewProps","firstAnchor","secondAnchor","horizontalSplitterProps","verticalSplitterProps","outerSplitterProps","innerSplitterProps","undockLayers","resizeUndock","setFloatingBound","renderInnerLayout","ToolWindowStateContext","side","container","setFloatingBounds","isDocked","areInSameSection","curry","window1","window2","getViewModeType","ToolWindowsState","targetKey","mapObjIndexed","closableViewModes","viewModeType","sideOrIndex","targetSide","targetIndex","targetSideWindows","indexInTargetSide","sortedTargetWindows","insert","newTargetSideWindows","fromPairs","newValue","targetViewMode","stretch","mapWindows","mapFn","property","currentFloatingBound","resizeSide","dock","isInResizingView","toolWindowState","inputs","getAnchorOrientation","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","treeProps","treeContext","useSpeedSearchTree","virtualizerProps","useTreeVirtualizer","TreeContext","StyledTree","Virtualizer","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","selectableTree","useSelectableTree","super","getKeyLeftOf","parentKey","getKeyRightOf","StyledTreeNodeIcon","TreeNodeIcon","iconPath","getIcon","useTreeNodeToggleButton","treeNodeToggleButtonProps","selectedDescendantKeys","toggleSelection","StyledTreeNode","attrs","level","onActionRef","togglePressProps","treeNodeProps","onDoubleClick","useTreeNode","Symbol","iterator","TreeCollection","nodes","keyMap","iterable","lastKey","last","visit","nextKey","prevKey","getKeyBefore","getKeyAfter","getLastKey","treeRef","setExpandedKeys","selectionState","useMultipleSelectionState","cacheInvalidation","invalidators","lastInvalidators","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","SelectionManager","useTreeRef","newKeys","res","delete","add","aKey","getSingleChildrenKeysRecursive","childNodesIterator","firstChild","done","noMoreChildren","isEmptyIterable","isExpandable","selectionKeyDown","onNodeKeyDown","shouldToggle","latestState","useImperativeHandle","VariableWidthListLayout","ListLayout","keyToWidth","visibleContentWidth","buildItem","layoutNode","layoutInfo","buildCollection","getVisibleContentWidth","invalidateEverything","contentSize","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","layoutInfos","virtualizer","visibleRect","visibleViews","view","itemContentWidth","intersects","getVisibleRect","FlattenedTreeLayout","buildChild","getVisibleLayoutInfos","layout","estimatedRowHeight","sizeToFit","scrollToItem","shouldScrollX","duration","scrollDirection","collectSelectableItemsRecursive","getChildren","collectedItems","NestedSelection","cache","WeakMap","getSelectionState","itemsInSubtree","collectSelectableItems","normalizeChildren","cachedState","allDescendantsStates","SpeedSearchTreeWithCheckboxes","nestedSelection","otherInvalidators","StyledCheckboxWrapper","TreeNodeCheckbox","selectItemOnPress","itemContext","useNestedSelectionState","selectedKeysProp","defaultSelectedKeys","onSelectedKeysChange","selectedKeysSetter","useControllableSet","rootNodes","WindowInteractionHandlerContext","useWindowInteractionHandler","interactionHandler","finishInteraction","startInteraction","updateBounds","WindowMoveHandle","FLOAT_WINDOW_MIN_WIDTH","FLOAT_WINDOW_MIN_HEIGHT","windowResizer","initialBoundsRef","newWidth","initialBounds","newHeight","getResizerProps","useWindowResizer","boundsProp","defaultBounds","interceptInteraction","setBounds","getDefaultBounds","currentInteractionBounds","setCurrentInteractionBounds","innerWidth","innerHeight","isWordSeparator","isWhitespace","char","test","isUpperCase","toLowerCase","isMeaningfulChar","ch","input","rawPattern","isStarts","isStart","pattern","join","continuous","inputIndex","patternIndex","lastMatch","pop","chars","previousChar","OriginalSelectionManager","selectionMode","shiftKey","extendSelection","isCtrlKeyPressed","manager","disallowSelectAll","useLocale","values","focusSafely","handlers","navigateToKey","childFocus","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","useOriginalSelectableItem","pointerType","styledComponents","ThemeConsumer","directChildRef","focusManagerRef","nodeToRestore","requestAnimationFrame","focusManager","containerElement","focusNext","GetFocusManager","hidden","useFocusManager","savedUserSelect","handlersRef","documentElement","webkitUserSelect","pageX","pageY","dragStarted","onMouseMove","addEventListener","runAfterTransition","removeEventListener","once","Context","nullErrorMessage","innerRef","ImmutableSet","setValueWithMutation","mutate","createSetInterface","currentValue","useStateSetterForSet","setValue","valueProp","defaultValue","useSpeedSearchList","listState","speedSearchContainerProps","SpeedSearchContainer","CollectionSpeedSearchContainer","SpeedSearchList","StyledIconLiveIndicator","SpeedSearch","speedSearchState","Tree","itemType","ToolWindowTabContent","LazyExampleApp","juiComponents","ExampleApp","fallback","darculaThemeJson","lightThemeJson","highContrastThemeJson","themed","clsx","noPadding","CodeBlock","live","Playground","scope","ReactLiveScope"],"sourceRoot":""}