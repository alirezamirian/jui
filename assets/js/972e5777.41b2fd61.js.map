{"version":3,"file":"assets/js/972e5777.41b2fd61.js","mappings":"oHAeO,MAAMA,E,QACXC,cAAiD,K,iHCI5C,MAAMC,EAAY,CAACC,EAAwBC,KAChD,MAAOC,EAAMC,GAAOH,EAAeI,MAAM,KACzC,MAAQ,GAAEF,IAAOD,IAAYE,EAAO,IAAGA,IAAQ,IAA/C,EAQIE,EAAuBC,GAC3BA,EAAaC,WAAW,KACpBD,EAAaE,MAAM,GAClB,sBAAqBF,IAUfG,EAAeX,EAAAA,YAC1B,CAAC,EAECY,KACI,IAFJ,KAAEC,EAAF,SAAQC,KAAaC,GAElB,EACH,MAAMC,GAAMC,EAAAA,EAAAA,GAAgBL,GAEtBM,GADQC,EAAAA,EAAAA,MACSC,KAzBA,EAACC,EAAcC,KACxC,MAAOlB,EAAMC,GAAOgB,EAAKf,MAAM,KAC/B,OAAOgB,GAAa,GAAElB,SAAYC,EAAO,IAAGA,IAAQ,IAApD,EAuBgCkB,CAAYV,EAAMC,GAAYD,EAS5D,OARAW,EAAAA,EAAAA,GACE,CACEH,KAAMd,EAAoBW,GAC1BO,aAAclB,EAAoBM,IAEpCG,GAGK,gBAAC,KAAD,UAAuBD,EAAvB,CAA8BC,IAAKA,IAA1C,IAhBG,kyB,kDCxCP,MAAMU,EAA8B,GAEvBC,EAAoBC,EAAAA,GAAAA,IAG9B;;;;;;WAMQ,QAAC,KAAEC,EAAOH,GAAV,QAAmC,GAAEG,KAArC;YACC,QAAC,KAAEA,EAAOH,GAAV,QAAmC,GAAEG,KAArC;;wECXL,SAASL,EAAT,EAQLR,GACC,IARD,KAAEK,EAAF,aAAQI,GAQR,EACA,MAAMK,GAAQX,EAAAA,EAAAA,MACRY,GAAYC,EAAAA,EAAAA,YAAWjC,EAAAA,GACvBkC,GAAoB,MAATF,OAAA,EAAAA,EAAWG,cAAX,MAAyBH,OAAzB,EAAyBA,EAAWI,qBACrDC,EAAAA,EAAAA,YAAU,KACR,IAAIC,GAAY,EAgChB,MA/BkBC,WAChB,IAAKjB,EAEH,YADAkB,QAAQC,MAAM,sBAGZxB,EAAIyB,UAENzB,EAAIyB,QAAQC,QAAQC,YAAc,QAEpC,MAAMC,QAAYd,EAAMe,WAAWxB,EAAMY,GAAUa,OAAOC,IACxD,GAAItB,EACF,OAAOK,EAAMe,WAAWpB,EAAcQ,GAExC,MAAMc,CAAN,IAEF,GAAIH,GACF,IAAKP,GAAD,MAAcrB,GAAAA,EAAKyB,SACjBzB,EAAK,CAAC,IAAD,QAEP,SAAAA,EAAIyB,UAAJ,WAAaO,cAAc,SAA3B,EAAmCC,SACnC,MAAMC,EAAaC,SAASC,cAAc,OAC1C,SAAApC,EAAIyB,UAAJ,EAAaY,YAAYH,GACzBA,EAAWI,UAAYV,EACvB,SAAO5B,EAAIyB,iBAAJ,EAAaC,QAAQC,WAC7B,OAGHJ,QAAQC,MAAM,0BAA2BnB,EAC1C,EAEHkC,GAAYT,MAAMP,QAAQC,OACnB,KACLH,GAAY,CAAZ,CADF,GAGC,CAAChB,EAAMY,GACX,C,8EC7CM,MAAML,EACX4B,EAAAA,GACWrC,EACXqC,EAAAA,GACWC,EAAMD,EAAAA,GACNE,EACXF,EAAAA,E,iDCRa,SAASvC,EACtBL,GAEA,MAAM+C,GAAWC,EAAAA,EAAAA,QAAU,MAc3B,OAbA5D,EAAAA,WAAgB,KACTY,IAIuB,mBAAjBA,EACTA,EAAa+C,EAASlB,SAErB7B,EAAkD6B,QACjDkB,EAASlB,QACZ,IAGIkB,CACR,C,uECpBD,MAAME,E,SAAejC,GAAAA,OAAAA,WAAH,sEAAGA,CAAH,6BAKZkC,EACJ,uBACEC,MAAM,OACNC,OAAO,OACP,cAAY,OACZC,QAAQ,YACRC,UAAU,6GAEV,wBACEC,KAAK,eACLC,EAAE,oHAcKC,EAAgB,IAMtB,IANuB,OAC5BL,EAAS,IADmB,QAE5BM,GAII,EACJ,MAAM,YAAEC,IAAgBC,EAAAA,EAAAA,KACxB,OACE,gCACE,gBAAC,IAAD,CACEC,KAAO,2BAAmCH,IAC1CI,OAAO,UAFT,oBAKGZ,GAEH,gBAACD,EAAD,CACEc,MAAO,CAAEX,UACTY,IAAKL,EACF,6BAAqCD,4BAZ9C,EARK,8U,gDC7BA,MAAMO,EAAwB,IAM9B,IAN+B,KACpCxD,EADoC,KAEpCjB,GAII,EACJ,OAGE,qBACEqE,KAAO,+DAA8DpD,IACrEqD,OAAO,UAENtE,GAAQiB,EAAKf,MAAM,KAAKwE,MAP7B,EAPK,+R,8LCKA,MAAMC,EAAc,CAAC,EACfC,EAAe,cACfC,EAAW,CACtB,cAAiB,yBACjB,GAAM,yBACN,MAAS,cACT,YAAe,wHACf,OAAU,wCACV,cAAiB,aACjB,KAAQ,0BACR,UAAa,mCACb,OAAS,EACT,QAAW,oGACX,KAAQ,GACR,QAAW,UACX,YAAe,CAAC,EAChB,QAAW,kBACX,SAAY,CACV,MAAS,OACT,UAAa,6BAEf,KAAQ,CACN,MAAS,UACT,UAAa,iCAGJC,EAAS,CAAC,EAOVC,EAAM,CAAC,CAClBC,MAAO,iBACPC,GAAI,iBACJC,MAAO,GACN,CACDF,MAAO,yBACPC,GAAI,yBACJC,MAAO,GACN,CACDF,MAAO,oBACPC,GAAI,oBACJC,MAAO,GACN,CACDF,MAAO,sBACPC,GAAI,sBACJC,MAAO,GACN,CACDF,MAAO,gCACPC,GAAI,gCACJC,MAAO,GACN,CACDF,MAAO,4BACPC,GAAI,4BACJC,MAAO,GACN,CACDF,MAAO,mBACPC,GAAI,mBACJC,MAAO,GACN,CACDF,MAAO,gCACPC,GAAI,gCACJC,MAAO,GACN,CACDF,MAAO,sBACPC,GAAI,sBACJC,MAAO,GACN,CACDF,MAAO,eACPC,GAAI,eACJC,MAAO,GACN,CACDF,MAAO,0BACPC,GAAI,0BACJC,MAAO,GACN,CACDF,MAAO,qBACPC,GAAI,qBACJC,MAAO,GACN,CACDF,MAAO,qBACPC,GAAI,qBACJC,MAAO,IAGHC,EAAc,CAClBJ,OAGa,SAASK,EAAT,GAGX,IAH+B,WACjCC,KACG1E,GACF,EACD,OAAO,QALS,WAKT,UAAewE,EAAiBxE,EAAhC,CAAuC0E,WAAYA,EAAYC,QAAQ,eAG5E,cACE,GAAM,eACH,gBACL,QAAC,IAAD,CAAuBrE,KAAK,uEAAuEqE,QAAQ,2BAC3G,iBAAK,obAIP,aAAGC,WAAW,IACR,KAAQ,oFACL,gCAAoC,aACvC,aAAGA,WAAW,IACd,KAAQ,gFACL,mCAAuC,MAC9C,cACE,GAAM,kBACH,mBACL,iBAAK,gCAA8B,sBAAYA,WAAW,KAAM,eAA4B,6BAA2B,sBAAYA,WAAW,KAAM,YAAyB,uDAChK,sBAAYA,WAAW,KAAM,oBAAiC,6GAE3E,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,uBACd,MAAQ,EACR,QAAU,EACV,UAAY,GACT,ozCA0CP,cACE,GAAM,0BACH,2BACL,iBAAK,gKAEP,aAAGA,WAAW,IACR,KAAQ,yDACL,mCAAuC,MAC9C,cACE,GAAM,qBACH,sBACL,iBAAK,8GACP,sBAAYA,WAAW,KAAM,qBAAkC,kGAC9D,QAAC,KAAD,CAAchB,MAAO,CAChBiB,cAAe,UACd/E,KAAK,oBAAoB6E,QAAQ,iBAJtC,gBAKH,QAAC,KAAD,CAAcf,MAAO,CACdiB,cAAe,UACd/E,KAAK,yBAAyB6E,QAAQ,iBAAmB,OAC9D,iBAAK,uCACL,cACE,UAAa,uBAEb,cAAIC,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,oDACpB,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,qDACpB,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,2CACpB,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,uEACpB,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,sDAAoD,sBAAYA,WAAW,MAAO,YAAyB,wFAE/H,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IACD,IAAK,+BAA6B,sBAAYA,WAAW,MAAO,aAA0B,gCAE3G,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,uBACd,MAAQ,EACR,QAAU,EACV,UAAY,GACT,4sCA6CP,cACE,GAAM,uBACH,wBACL,iBAAK,oBAAkB,aAAGA,WAAW,IACjC,KAAQ,sBACL,qBAAyB,4FACP,aAAGA,WAAW,IACnC,KAAQ,4BACL,QAAY,oBACnB,sBACE,MAAS,eACT,KAAQ,YACP,aAAGA,WAAW,cAAe,8EAA4E,sBAAYA,WAAW,KAAM,QAAqB,QAAM,sBAAYA,WAAW,KAAM,aAA0B,4BAC7N,aAAGA,WAAW,IACN,KAAQ,kDACL,mBACT,iBAAK,QAAM,sBAAYA,WAAW,KAAM,4BAAyC,UAAQ,sBAAYA,WAAW,KAAM,uBAAoC,qGAEvH,sBAAYA,WAAW,KAAM,uBAAoC,aAAW,sBAAYA,WAAW,KAAM,aAA0B,UAAQ,sBAAYA,WAAW,KAAM,qBAAkC,sDACtM,sBAAYA,WAAW,KAAM,oBAAiC,gBACrG,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,8QASP,kBAAG,sBAAYA,WAAW,KAAM,wBAAqC,sGACrE,cACE,GAAM,iCACH,kCACL,iBAAK,eAAa,aAAGA,WAAW,IAC5B,KAAQ,sBACL,qBAAyB,MAAI,sBAAYA,WAAW,KAAM,qBAAkC,SAAO,sBAAYA,WAAW,KAAM,iBAA8B,sLAEjH,sBAAYA,WAAW,KAAM,iBAA8B,uEACjD,sBAAYA,WAAW,KAAM,iBAA8B,+FAEzH,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,qnBAoBP,cACE,GAAM,6BACH,8BACL,QAAC,IAAD,CAAerB,QAAQ,oCAAoCN,OAAQ,IAAK0B,QAAQ,mBAChF,cACE,GAAM,oBACH,qBACL,iBAAK,QAAM,sBAAYC,WAAW,KAAM,oBAAiC,kFAC3E,sBAAYA,WAAW,KAAM,mBAAgC,kDAAgD,sBAAYA,WAAW,KAAM,WAAwB,kBAAgB,sBAAYA,WAAW,KAAM,mBAAgC,gCACrO,sBAAYA,WAAW,KAAM,mBAAgC,yCAC7C,sBAAYA,WAAW,KAAM,oBAAiC,+GACxC,sBAAYA,WAAW,KAAM,oBAAiC,0BAAwB,sBAAYA,WAAW,KAAM,WAAwB,wBACzL,sBACE,KAAQ,QACP,aAAGA,WAAW,cAAe,YAAU,sBAAYA,WAAW,KAAM,oBAAiC,uEAAqE,sBAAYA,WAAW,KAAM,oBAAiC,2EAE3O,sBACE,KAAQ,SACP,aAAGA,WAAW,cAAe,oBAAkB,sBAAYA,WAAW,KAAM,oBAAiC,2CAChH,oBAAK,gBAAMA,WAAW,MAClB,UAAa,gBACV,6LAKP,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,uBACd,MAAQ,EACR,UAAY,EACZ,QAAU,GACP,gzCA8CP,cACE,GAAM,iCACH,kCACL,kBAAG,sBAAYA,WAAW,KAAM,mBAAgC,8EAA4E,sBAAYA,WAAW,KAAM,mBAAgC,+CACzK,aAAGA,WAAW,IAC1C,KAAQ,qBACL,oBAAwB,cAC/B,sBACE,KAAQ,QACP,aAAGA,WAAW,cAAe,qBAAmB,kBAAQA,WAAW,KAAM,UAAmB,iDAA+C,sBAAYA,WAAW,KAAM,UAAuB,SAAO,sBAAYA,WAAW,KAAM,WAAwB,+BACxP,sBAAYA,WAAW,KAAM,aAA0B,QAAM,sBAAYA,WAAW,KAAM,QAAqB,yEAAuE,sBAAYA,WAAW,KAAM,eAA4B,OACrP,iBAAK,oCAAkC,sBAAYA,WAAW,KAAM,mBAAgC,MACpG,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,0GAGP,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,qTAQP,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACV,20BAkBP,cACE,GAAM,uBACH,wBACL,iBAAK,SACL,cACE,GAAM,gBACH,iBACL,cACE,GAAM,2BACH,4BACL,kBAAG,sBAAYA,WAAW,KAAM,sBAAmC,oCACrE,aAAGA,WAAW,IACR,KAAQ,oFACL,uBAA2B,0GAElC,cACE,GAAM,sBACH,uBACL,kBAAG,sBAAYA,WAAW,KAAM,uBAAoC,qBACtE,aAAGA,WAAW,IACR,KAAQ,sFACL,qCAAyC,MAChD,cACE,GAAM,sBACH,uBACL,kBAAG,sBAAYA,WAAW,KAAM,sBAAmC,sLAErE,aAAGA,WAAW,IACR,KAAQ,sBACL,qBAAyB,YAEnC,CAGDH,EAAWK,gBAAiB,C","sources":["webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/./src/components/EmbeddedStory.tsx","webpack://website/./src/components/RefToIntellijPlatform.tsx","webpack://website/./docs/components/ToolWindows.mdx"],"sourcesContent":["import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  /**\n   * Icon path in intellij platform repo.\n   * If starts with \"/\", the path will be from the repo root. Otherwise, it's relative to \"platform/icons/src\".\n   * \".svg\" extension is optional.\n   */\n  icon: string;\n  /**\n   * Similar to icon, but for dark themes.\n   */\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  relativePath.startsWith(\"/\")\n    ? relativePath.slice(1)\n    : `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n * @example <PlatformIcon icon=\"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme();\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            // potential SSR issues here?\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = svg;\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import Link from \"@docusaurus/Link\";\nimport { useBaseUrlUtils } from \"@docusaurus/useBaseUrl\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledIframe = styled.iframe`\n  width: 100%;\n  border: none;\n`;\n\nconst externalLinkIcon = (\n  <svg\n    width=\"13.5\"\n    height=\"13.5\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 24 24\"\n    className=\"iconExternalLink__-_-node_modules-@docusaurus-theme-classic-lib-next-theme-IconExternalLink-styles-module\"\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"\n    ></path>\n  </svg>\n);\nconst storybookBaseUrl =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:6008\"\n    : \"/storybook\";\n\n/**\n * A component for embedding a story based on storyId.\n *\n * TODO: pass theme based on docusaurus theme.\n */\nexport const EmbeddedStory = ({\n  height = 450,\n  storyId,\n}: {\n  storyId: string;\n  height?: number;\n}) => {\n  const { withBaseUrl } = useBaseUrlUtils();\n  return (\n    <>\n      <Link\n        href={`${storybookBaseUrl}/?path=/story/${storyId}`}\n        target=\"_blank\"\n      >\n        Open in storybook\n        {externalLinkIcon}\n      </Link>\n      <StyledIframe\n        style={{ height }}\n        src={withBaseUrl(\n          `${storybookBaseUrl}/iframe.html?id=${storyId}&args=&viewMode=story`\n        )}\n      />\n    </>\n  );\n};\n","import React from \"react\";\n\n/**\n * To make relation between things in jui and original reference impl in Intellij Platform\n */\nexport const RefToIntellijPlatform = ({\n  path,\n  name,\n}: {\n  path: string;\n  name?: string;\n}) => {\n  return (\n    // TODO: make it some nice box with an icon and a hint text which says something like \"Intellij Platform\" or\n    //  \"Reference\" or something better :D\n    <a\n      href={`https://github.com/JetBrains/intellij-community/blob/master/${path}`}\n      target=\"_blank\"\n    >\n      {name || path.split(\"/\").pop()}\n    </a>\n  );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'ToolWindows';\nexport const metadata = {\n  \"unversionedId\": \"components/ToolWindows\",\n  \"id\": \"components/ToolWindows\",\n  \"title\": \"ToolWindows\",\n  \"description\": \"ToolWindows is the main component in Intellij applications. It's consisted of a main content in the center (typically\",\n  \"source\": \"@site/docs/components/ToolWindows.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/ToolWindows\",\n  \"permalink\": \"/jui/docs/components/ToolWindows\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/ToolWindows.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Tabs\",\n    \"permalink\": \"/jui/docs/components/Tabs\"\n  },\n  \"next\": {\n    \"title\": \"Toolbar\",\n    \"permalink\": \"/jui/docs/components/Toolbar\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"@site/src/components/RefToIntellijPlatform.tsx\";\nimport { EmbeddedStory } from \"@site/src/components/EmbeddedStory\";\nimport { PlatformIcon } from \"@intellij-platform/core\";\nexport const toc = [{\n  value: 'Simple example',\n  id: 'simple-example',\n  level: 2\n}, {\n  value: 'Tool window components',\n  id: 'tool-window-components',\n  level: 2\n}, {\n  value: 'DefaultToolWindow',\n  id: 'defaulttoolwindow',\n  level: 3\n}, {\n  value: 'MultiViewToolWindow',\n  id: 'multiviewtoolwindow',\n  level: 3\n}, {\n  value: 'Multi view tool window header',\n  id: 'multi-view-tool-window-header',\n  level: 4\n}, {\n  value: 'MultiViewToolWindow story',\n  id: 'multiviewtoolwindow-story',\n  level: 4\n}, {\n  value: 'ToolWindowsState',\n  id: 'toolwindowsstate',\n  level: 2\n}, {\n  value: 'State of a single tool window',\n  id: 'state-of-a-single-tool-window',\n  level: 3\n}, {\n  value: 'Tool window actions',\n  id: 'tool-window-actions',\n  level: 2\n}, {\n  value: 'Advanced API',\n  id: 'advanced-api',\n  level: 2\n}, {\n  value: 'Hiding tool window bars',\n  id: 'hiding-tool-window-bars',\n  level: 3\n}, {\n  value: 'Wide screen layout',\n  id: 'wide-screen-layout',\n  level: 3\n}, {\n  value: 'useToolWindowState',\n  id: 'usetoolwindowstate',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toolwindows\"\n    }}>{`ToolWindows`}</h1>\n    <RefToIntellijPlatform path=\"platform/platform-impl/src/com/intellij/toolWindow/ToolWindowPane.kt\" mdxType=\"RefToIntellijPlatform\" />\n    <p>{`ToolWindows is the main component in Intellij applications. It's consisted of a main content in the center (typically\nthe editor), and a number of tool windows, typically positioned around the main area. Each side of the main area, can\nhost two groups of tool windows (Primary and Secondary), and tool windows can be moved across all these groups.\nThey can also be rendered as floating windows. Read more about tool windows, in\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://plugins.jetbrains.com/docs/intellij/tool-windows.html?from=jetbrains.org\"\n      }}>{`Intellij Platform Plugin SDK`}</a>{`,\nor in `}<a parentName=\"p\" {...{\n        \"href\": \"https://jetbrains.github.io/ui/components/tool_window/#tool-window-structure\"\n      }}>{`jetbrains design system website`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"simple-example\"\n    }}>{`Simple example`}</h2>\n    <p>{`Bellow is a simple usage of `}<inlineCode parentName=\"p\">{`ToolWindows`}</inlineCode>{`. Main content goes into `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{`, and the state of tool windows is\ncontrolled via `}<inlineCode parentName=\"p\">{`toolWindowsState`}</inlineCode>{` prop. Tool windows are identified by a unique string id.\nTry moving tool windows to different anchors.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed noInline\",\n        \"live\": true,\n        \"themed\": true,\n        \"noInline\": true\n      }}>{`const StyledContent = styled.div\\`\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.4);\n\\`;\n\nconst App = () => {\n  const [toolWindowsState, setToolWindowsState] = useState(\n    new ToolWindowsState({\n      Project: toolWindowState({ isVisible: true }),\n      Commit: toolWindowState({ isSplit: true }),\n      Run: toolWindowState({ anchor: \"bottom\", isVisible: true }),\n    })\n  );\n  const exampleToolWindow = (id) => ({\n    id,\n    toolbarButton: id,\n    content: <StyledContent>{id}</StyledContent>,\n  });\n  return (\n    <ToolWindows\n      toolWindowsState={toolWindowsState}\n      // called when the state is changed because of some UI interaction, e.g. opening/closing a tool window.\n      onToolWindowStateChange={setToolWindowsState}\n      windows={[\n        exampleToolWindow(\"Project\"),\n        exampleToolWindow(\"Commit\"),\n        exampleToolWindow(\"Run\"),\n      ]}\n      height={500} // Use \\`100vh\\` if it's the only top level component in your app.\n      containerProps={{ style: { margin: \"-1rem\" } }} // just to counteract the default padding in Live Preview\n    >\n      <StyledContent style={{ background: \"#2b2b2b\" }}>\n        Main content\n      </StyledContent>\n    </ToolWindows>\n  );\n};\nrender(<App />);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tool-window-components\"\n    }}>{`Tool window components`}</h2>\n    <p>{`While any content can be rendered in a tool window, there are a few built-in components that implement a header and\ncontent tool window view according to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://jetbrains.github.io/ui/components/tool_window\"\n      }}>{`Intellij Platform UI Guidelines`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"defaulttoolwindow\"\n    }}>{`DefaultToolWindow`}</h3>\n    <p>{`Implements a header and content view, where a title and some action buttons are displayed in the header.\n`}<inlineCode parentName=\"p\">{`additionalActions`}</inlineCode>{` prop can be used to render extra action buttons before the default action buttons: Options\n(`}<PlatformIcon style={{\n        verticalAlign: 'middle'\n      }} icon=\"general/gearPlain\" mdxType=\"PlatformIcon\" />) and Hide\n(<PlatformIcon style={{\n        verticalAlign: 'middle'\n      }} icon=\"general/hideToolWindow\" mdxType=\"PlatformIcon\" />{`).`}</p>\n    <p>{`Features provided by Options menu:`}</p>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`\"Stretch to left\" resize action in options menu`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`\"Stretch to right\" resize action in options menu`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Maximize resize action in options menu`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`\"Move to\" actions in options menu to change the tool window anchor`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`\"View Mode\" actions in options menu to change the `}<inlineCode parentName=\"li\">{`viewMode`}</inlineCode>{` of the tool window between \"Dock Pinned\",\n\"Dock Unpinned\", \"Undock\", and \"Float\".`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": true,\n          \"disabled\": true\n        }}></input>{` `}{`Hide button, which toggles `}<inlineCode parentName=\"li\">{`isVisible`}</inlineCode>{` of the tool window state.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed noInline\",\n        \"live\": true,\n        \"themed\": true,\n        \"noInline\": true\n      }}>{`const StyledContent = styled.div\\`\n  display: flex;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  color: rgba(255, 255, 255, 0.4);\n\\`;\n\nconst App = () => {\n  const [toolWindowsState, setToolWindowsState] = useState(\n    new ToolWindowsState({\n      Project: toolWindowState({ isVisible: true }),\n      Commit: toolWindowState({ isSplit: true }),\n      Run: toolWindowState({ anchor: \"bottom\", isVisible: true }),\n    })\n  );\n  const exampleToolWindow = (id) => ({\n    id,\n    toolbarButton: id,\n    content: (\n      <DefaultToolWindow>\n        <StyledContent>{id}</StyledContent>\n      </DefaultToolWindow>\n    ),\n  });\n  return (\n    <ToolWindows\n      toolWindowsState={toolWindowsState}\n      onToolWindowStateChange={setToolWindowsState}\n      windows={[\n        exampleToolWindow(\"Project\"),\n        exampleToolWindow(\"Commit\"),\n        exampleToolWindow(\"Run\"),\n      ]}\n      height={500}\n      containerProps={{ style: { margin: \"-1rem\" } }} // just to counteract the default padding in Live Preview\n    >\n      <StyledContent style={{ background: \"#2b2b2b\" }}>\n        Main content\n      </StyledContent>\n    </ToolWindows>\n  );\n};\nrender(<App />);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"multiviewtoolwindow\"\n    }}>{`MultiViewToolWindow`}</h3>\n    <p>{`Built on top of `}<a parentName=\"p\" {...{\n        \"href\": \"#defaulttoolwindow\"\n      }}>{`DefaultToolWindow`}</a>{`, extends it to support multiple views within the same tool\nwindow, switched by either `}<a parentName=\"p\" {...{\n        \"href\": \"./tabs#tool-window-theme\"\n      }}>{`Tabs`}</a>{` or a dropdown.`}</p>\n    <admonition {...{\n      \"title\": \"tab grouping\",\n      \"type\": \"warning\"\n    }}><p parentName=\"admonition\">{`Grouping tabs in a dropdown is not implemented at the moment, and passing `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`groupTabs`}</inlineCode>{` will throw a warning.\n`}<a parentName=\"p\" {...{\n          \"href\": \"https://github.com/alirezamirian/jui/issues/18\"\n        }}>{`Github issue`}</a></p></admonition>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`MultiViewToolWindow.View`}</inlineCode>{` in a `}<inlineCode parentName=\"p\">{`MultiViewToolWindow`}</inlineCode>{`, to render many views. Each view must have a unique\nkey.\nYou can control the active view of a `}<inlineCode parentName=\"p\">{`MultiViewToolWindow`}</inlineCode>{` through `}<inlineCode parentName=\"p\">{`activeKey`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`onActiveKeyChange`}</inlineCode>{` props.\nOr you can leave it uncontrolled and set `}<inlineCode parentName=\"p\">{`defaultActiveKey`}</inlineCode>{` if needed.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<MultiViewToolWindow>\n  <MultiViewToolWindow.View tabContent={<>First view</>} key=\"v1\">\n    ...\n  </MultiViewToolWindow.View>\n  <MultiViewToolWindow.View tabContent={<>Second view</>} key=\"v2\">\n    ...\n  </MultiViewToolWindow.View>\n</MultiViewToolWindow>\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`ToolWindowTabContent`}</inlineCode>{` can be used in tabContent, to show a tab with an icon, a text and maybe a optional close button.`}</p>\n    <h4 {...{\n      \"id\": \"multi-view-tool-window-header\"\n    }}>{`Multi view tool window header`}</h4>\n    <p>{`Similar to `}<a parentName=\"p\" {...{\n        \"href\": \"#defaulttoolwindow\"\n      }}>{`DefaultToolWindow`}</a>{`, `}<inlineCode parentName=\"p\">{`additionalActions`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`headerContent`}</inlineCode>{` props can be used to\ndefine the content that goes into the header of a multi view tool window. View switcher UI (whether\nit be tabs or dropdown) is rendered immediately after `}<inlineCode parentName=\"p\">{`headerContent`}</inlineCode>{`.\nIf you need more flexibility, you can pass a render function to `}<inlineCode parentName=\"p\">{`headerContent`}</inlineCode>{`. Rendered view switcher\nis then passed to that function to be placed in the returned UI:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<MultiViewToolWindow\n  headerContent={({ renderedViewSwitcher }) => (\n    <>\n      {<span style={{ marginRight: 4 }}>Some title:</span>}\n      {/* if there is only one view, render something else instead of the content switcher */}\n      {executions.length > 1 ? renderedViewSwitcher : <SomethingElse />}\n    </>\n  )}\n>\n  {executions.map((execution) => (\n    <MultiViewToolWindow.View\n      key={execution.id}\n      tabContent={execution.title}\n    >\n      ...\n    </MultiViewToolWindow.View>\n  ))}\n</MultiViewToolWindow>\n<></> // FIXME: this is a hack for fixing webstorm issue in formatting mdx files.\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"multiviewtoolwindow-story\"\n    }}>{`MultiViewToolWindow story`}</h4>\n    <EmbeddedStory storyId=\"components-toolwindow--multi-view\" height={450} mdxType=\"EmbeddedStory\" />\n    <h2 {...{\n      \"id\": \"toolwindowsstate\"\n    }}>{`ToolWindowsState`}</h2>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`ToolWindowsState`}</inlineCode>{` to create immutable state of tool windows. It accepts a mapping from ids to\n`}<inlineCode parentName=\"p\">{`ToolWindowState`}</inlineCode>{` objects, and keeps it on a readonly property `}<inlineCode parentName=\"p\">{`windows`}</inlineCode>{`. You can use `}<inlineCode parentName=\"p\">{`toolWindowState`}</inlineCode>{` helper function\nto create `}<inlineCode parentName=\"p\">{`ToolWindowState`}</inlineCode>{` objects.\nThere are many methods on `}<inlineCode parentName=\"p\">{`ToolWindowsState`}</inlineCode>{` for supported UI interactions that can change the state.\nAll of these functions return a new instance of `}<inlineCode parentName=\"p\">{`ToolWindowsState`}</inlineCode>{`, instead of mutating `}<inlineCode parentName=\"p\">{`windows`}</inlineCode>{` property in place.`}</p>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`Calling `}<inlineCode parentName=\"p\">{`ToolWindowsState`}</inlineCode>{` methods doesn't magically mutate the state. It just returns a new `}<inlineCode parentName=\"p\">{`ToolWindowsState`}</inlineCode>{` object.\nYou have to set the state yourself from the returned value.`}</p></admonition>\n    <admonition {...{\n      \"type\": \"note\"\n    }}><p parentName=\"admonition\">{`Immutability of `}<inlineCode parentName=\"p\">{`ToolWindowsState`}</inlineCode>{` is at typescript level, not runtime.`}</p></admonition>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`const [toolWindowsState, setToolWindowsState] = useState(\n  new ToolWindowsState(keyToWindowState)\n);\nconst toggleFoo = () => setToolWindowsState((state) => state.toggle(\"foo\"));\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live noInline themed\",\n        \"live\": true,\n        \"noInline\": true,\n        \"themed\": true\n      }}>{`const toolWindows = [\n  {\n    id: \"Foo\",\n    initialState: toolWindowState(),\n    toolbarButton: \"Foo\",\n    content: <DefaultToolWindow headerContent=\"Foo\"></DefaultToolWindow>,\n  },\n  {\n    id: \"Bar\",\n    initialState: toolWindowState({ anchor: \"bottom\", isVisible: true }),\n    toolbarButton: \"Bar\",\n    content: <DefaultToolWindow headerContent=\"Bar\"></DefaultToolWindow>,\n  },\n];\nconst App = () => {\n  const [toolWindowsState, setToolWindowsState] = useState(\n    () =>\n      new ToolWindowsState(\n        Object.fromEntries(\n          toolWindows.map(({ id, initialState }) => [id, initialState])\n        )\n      )\n  );\n\n  const isFooVisible = toolWindowsState.windows.Foo.isVisible;\n  const openFoo = () => setToolWindowsState((state) => state.toggle(\"Foo\"));\n  return (\n    <ToolWindows\n      toolWindowsState={toolWindowsState}\n      onToolWindowStateChange={setToolWindowsState}\n      windows={toolWindows}\n      height={500}\n      containerProps={{ style: { margin: \"-1rem\" } }} // just to counteract the default padding in Live Preview\n    >\n      <div style={{ padding: \"1rem\" }}>\n        {\n          <Button onClick={openFoo}>\n            {isFooVisible ? \"Close\" : \"Open\"} Foo\n          </Button>\n        }\n      </div>\n    </ToolWindows>\n  );\n};\nrender(<App />);\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"state-of-a-single-tool-window\"\n    }}>{`State of a single tool window`}</h3>\n    <p><inlineCode parentName=\"p\">{`ToolWindowState`}</inlineCode>{` describes the state of a single tool window, and it's usually created by `}<inlineCode parentName=\"p\">{`toolWindowState`}</inlineCode>{` helper\nfunction. It's used when creating `}<a parentName=\"p\" {...{\n        \"href\": \"#toolwindowsstate\"\n      }}>{`ToolWindowsState`}</a>{` objects.`}</p>\n    <admonition {...{\n      \"type\": \"tip\"\n    }}><p parentName=\"admonition\">{`No more than one `}<strong parentName=\"p\">{`docked`}</strong>{` tool window within the same group (the same `}<inlineCode parentName=\"p\">{`anchor`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`isSplit`}</inlineCode>{`) can be visible.\nSetting `}<inlineCode parentName=\"p\">{`isVisible`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` for more than one window in the same group causes a render error in `}<inlineCode parentName=\"p\">{`ToolWindows`}</inlineCode>{`.`}</p></admonition>\n    <p>{`Here are some example usages of `}<inlineCode parentName=\"p\">{`toolWindowState`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// closed docked and pinned tool window in the Primary group of the left side.\ntoolWindowState();\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// open unpinned docked tool window in the Secondary group of the bottom side\ntoolWindowState({\n  anchor: \"bottom\",\n  viewMode: \"docked_unpinned\", // docked (not an overlay), but unpinned, meaning that it will be closed when lost focus.\n  isSplit: true, // Secondary group\n  isVisible: true,\n});\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// open unpinned docked tool window in the Secondary group of the bottom side\ntoolWindowState({\n  anchor: \"bottom\",\n  viewMode: \"undock\", // An overlay over other tool windows and the main content. An undock tool window is unpinned too.\n  weight: 0.7, // Gets 70% of the available space of its side (\"bottom\"). The visible window from the Secondary\n  // group (if any) will take 30% of the width.\n\n  floatingBounds: {\n    // Defines the boundaries of the tool window if view mode is changed to \"float\". Note that a window state can have\n    // \\`floatingBounds\\`, even though its viewMode is not \"float\", this allows for \"remembering\" the full state, even if a\n    // a piece of state is not actively in use because of the value of some other pieces.\n    left: 300,\n    top: 300,\n    width: 600,\n    height: 300,\n  },\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"tool-window-actions\"\n    }}>{`Tool window actions`}</h2>\n    <p>{`TODO`}</p>\n    <h2 {...{\n      \"id\": \"advanced-api\"\n    }}>{`Advanced API`}</h2>\n    <h3 {...{\n      \"id\": \"hiding-tool-window-bars\"\n    }}>{`Hiding tool window bars`}</h3>\n    <p><inlineCode parentName=\"p\">{`hideToolWindowBars`}</inlineCode>{` prop can be used to implement\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.jetbrains.com/help/idea/tool-windows.html#show_hide_tool_window_bars\"\n      }}>{`quick access button`}</a>{` for showing\ntool windows. Quick access button itself is not available out of the box at the moment.`}</p>\n    <h3 {...{\n      \"id\": \"wide-screen-layout\"\n    }}>{`Wide screen layout`}</h3>\n    <p><inlineCode parentName=\"p\">{`useWidescreenLayout`}</inlineCode>{` can be used to\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://www.jetbrains.com/help/idea/manipulating-the-tool-windows.html#wide-screen\"\n      }}>{`optimize for wide-screen monitors`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"usetoolwindowstate\"\n    }}>{`useToolWindowState`}</h3>\n    <p><inlineCode parentName=\"p\">{`useToolWindowState`}</inlineCode>{` can be used from any content within a tool window, to access the state of the tool window.\nIt also provides some functions for updating the state. These functions are used in\n`}<a parentName=\"p\" {...{\n        \"href\": \"#defaulttoolwindow\"\n      }}>{`DefaultToolWindow`}</a>{` header.`}</p>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["ItemStateContext","React","amendName","iconNameOrPath","amendment","name","ext","split","getPlatformIconPath","relativePath","startsWith","slice","PlatformIcon","forwardedRef","icon","darkIcon","props","ref","useForwardedRef","iconName","useTheme","dark","path","darkPath","getDarkPath","useSvgIcon","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","styled","size","theme","itemState","useContext","selected","isSelected","isContainerFocused","useEffect","unmounted","async","console","error","current","dataset","loadingIcon","svg","getSvgIcon","catch","e","querySelector","remove","svgElement","document","createElement","appendChild","outerHTML","fetchIcon","styledComponents","css","ThemeConsumer","innerRef","useRef","StyledIframe","externalLinkIcon","width","height","viewBox","className","fill","d","EmbeddedStory","storyId","withBaseUrl","useBaseUrlUtils","href","target","style","src","RefToIntellijPlatform","pop","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","mdxType","parentName","verticalAlign","isMDXComponent"],"sourceRoot":""}