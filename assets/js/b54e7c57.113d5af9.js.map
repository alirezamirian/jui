{"version":3,"file":"assets/js/b54e7c57.113d5af9.js","mappings":"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","sources":["webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/listItemRenderer.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/__tmp__useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/SelectionManager.ts","webpack://website/../jui/src/selection/replaceSelectionManager.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/test-data.ts","webpack://website/../jui/src/story-components.tsx","webpack://website/../jui/src/List/story-helpers.tsx","webpack://website/../jui/src/List/List.stories.tsx","webpack://website/./docs/components/List.mdx","webpack://website/../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import React from \"react\";\nimport { CollectionSpeedSearchMatches } from \"@intellij-platform/core/CollectionSpeedSearch/useCollectionSpeedSearchResult\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext = React.createContext<CollectionSpeedSearchContextValue | null>(\n  null\n);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext = React.createContext<null | CollectionSpeedSearchItemContextValue>(\n  null\n);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{ itemKey: Key }> = ({\n  children,\n  itemKey,\n}) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue;\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function () {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return highlightedRanges ? (\n    <TextWithHighlights highlights={highlightedRanges}>\n      {text}\n    </TextWithHighlights>\n  ) : (\n    <>{text}</>\n  );\n};\n","import { Key } from \"react\";\nimport { SelectionManager } from \"../selection/SelectionManager\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { useCollectionSpeedSearchResult } from \"./useCollectionSpeedSearchResult\";\nimport { useMemo } from \"react\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  stickySearch,\n  keyboardDelegate,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  stickySearch?: boolean;\n} & SpeedSearchStateProps) {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps); // maybe allow control over state\n  // via props?\n\n  const {\n    matches,\n    selectionManager: speedSearchSelectionManager,\n  } = useCollectionSpeedSearchResult({\n    collection,\n    selectionManager,\n    speedSearch,\n  });\n  const { containerProps } = useSpeedSearch({ stickySearch }, speedSearch);\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager,\n  speedSearch,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const result = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key))\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n      selectionManager: createSpeedSearchSelectionManager(\n        selectionManager,\n        active ? matches : null\n      ),\n    };\n  }, [searchTerm, collection, active]);\n\n  const latestValues = useLatest({ ...result, collection });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n\n    if (matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      const newSelectedKey = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n\n      selectionManager.setFocusedKey(newSelectedKey);\n      selectionManager.replaceSelection(newSelectedKey);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return result;\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key: React.Key): React.Key | undefined => {\n        let keyBelow = wrappedKeyboardDelegate.getKeyBelow?.(key);\n        while (keyBelow != null) {\n          if (!matches || matches.has(keyBelow)) {\n            return keyBelow;\n          }\n          keyBelow = wrappedKeyboardDelegate.getKeyBelow?.(keyBelow);\n        }\n        return keyBelow;\n      },\n    },\n    getKeyAbove: {\n      value: (key: React.Key): React.Key | undefined => {\n        let keyAfter = wrappedKeyboardDelegate.getKeyAbove?.(key);\n        while (keyAfter != null) {\n          if (!matches || matches.has(keyAfter)) {\n            return keyAfter;\n          }\n          keyAfter = wrappedKeyboardDelegate.getKeyAbove?.(keyAfter);\n        }\n        return keyAfter;\n      },\n    },\n  });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ItemProps } from \"@react-types/shared\";\nimport { ReactElement } from \"react\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n}\n","import { ItemProps } from \"@react-types/shared\";\nimport React, { ReactElement } from \"react\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return (null as any) as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<\n    PartialNode<T>\n  > = (StatelyItem as any).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext = React.createContext<ItemStateContextType | null>(\n  null\n);\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { RefObject, useEffect } from \"react\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = ([\n    \"Editable\",\n    \"Selected\",\n    \"Pressed\",\n    \"Focused\",\n    \"Disabled\",\n  ] as Array<keyof typeof modifiers>).reduce(\n    (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n    \"\"\n  );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  icon: string;\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n`;\n","import { RefObject, useEffect } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            // potential SSR issues here?\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = svg;\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path]);\n}\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable } from \"@react-types/shared\";\nimport React, { Key, useRef } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { listItemRenderer } from \"./listItemRenderer\";\nimport { useListState } from \"./useListState\";\n\nexport type ListProps<T extends object> = Omit<\n  AriaListBoxProps<T>,\n  keyof AsyncLoadable\n> & {\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n  /**\n   * By default, if list is not focused, it shows a different style on the selected item,\n   * which acts as a visual clue for list's focus state. This behaviour can be suppressed by setting\n   * `alwaysShowListAsFocused` to `true`. One use case is in master-detail views where you don't\n   * want the list to appear as blurred, when interacting with the details view of the selected\n   * list item. Note that in such use cases, there won't be any visual clue to distinguish focused\n   * state of the link, which is not great from UX perspective, but it's kept like this to match\n   * Jetbrains UI behaviour.\n   */\n  alwaysShowListAsFocused?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n};\n\n/**\n * List view with speedSearch instead of default typeahead.\n * TODO:\n *  - Support virtualization\n *  - Support custom rendering\n *  -\n */\nexport function List<T extends object>({\n  disallowEmptySelection = true,\n  alwaysShowListAsFocused = false,\n  fillAvailableSpace = false,\n  onAction,\n  ...inputProps\n}: ListProps<T>) {\n  const props = { ...inputProps, disallowEmptySelection };\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useListState(props);\n  const { listProps, focused } = useList(props, state, ref);\n\n  return (\n    <StyledList\n      fillAvailableSpace={fillAvailableSpace}\n      {...listProps}\n      ref={ref}\n    >\n      {[...state.collection].map(\n        listItemRenderer({\n          item: (item) => (\n            <ListItem\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={() => onAction?.(item.key)}\n              listFocused={alwaysShowListAsFocused || focused}\n            />\n          ),\n        })\n      )}\n    </StyledList>\n  );\n}\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ orientation: \"vertical\" })}\n    />\n  );\n};\n","import { Node } from \"@react-types/shared\";\nimport { ListState } from \"@react-stately/list\";\nimport React from \"react\";\nimport { useSelectableItem } from \"@react-aria/selection\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { StyledListItem } from \"./StyledListItem\";\n\nexport interface ListItemProps<T> {\n  listFocused: boolean;\n  item: Node<T>;\n  state: ListState<T>;\n  onAction: () => void;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({\n  listFocused,\n  item,\n  state,\n  onAction,\n  children,\n}: ListItemProps<T>) {\n  const ref = React.useRef(null);\n  const disabled = state.disabledKeys.has(item.key);\n  const selected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction,\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={selected}\n      disabled={disabled}\n      aria-disabled={disabled}\n      aria-selected={selected}\n      {...pressProps}\n      ref={ref}\n    >\n      {children || item.rendered}\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\nexport const StyledList = styled.ul<{ fillAvailableSpace?: boolean }>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.li<StyledListItemProps>(\n  ({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\"*.textForeground\", theme.color(\"*.foreground\"));\n    if (selected) {\n      if (containerFocused) {\n        color = theme.color(\n          \"*.selectionForeground\",\n          theme.color(\"*.acceleratorSelectionForeground\")\n        );\n        backgroundColor = theme.color(\"*.selectionBackground\");\n      } else {\n        backgroundColor = theme.color(\"*.selectionBackgroundInactive\");\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n      position: \"relative\",\n      display: \"flex\",\n      whiteSpace: \"nowrap\",\n      paddingLeft: 8, // themed?\n      lineHeight: \"20px\",\n      outline: \"none\",\n      cursor: \"default\",\n      minWidth: \"min-content\", // ?\n    };\n  }\n);\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.li(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { Node } from \"@react-types/shared\";\nimport React from \"react\";\nimport { StyledListSectionHeader } from \"./StyledListSectionHeader\";\nimport { ListDivider } from \"./ListDivider\";\n\ninterface SectionNode<T> extends Node<T> {\n  type: \"section\";\n}\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\n\ninterface DividerNode<T> extends Node<T> {\n  type: \"divider\";\n}\n\nconst isItemNode = <T extends any>(node: Node<T>): node is ItemNode<T> =>\n  node.type === \"item\";\nconst isSectionNode = <T extends any>(node: Node<T>): node is SectionNode<T> =>\n  node.type === \"section\";\nconst isDividerNode = <T extends any>(node: Node<T>): node is DividerNode<T> =>\n  node.type === \"divider\";\n\ntype listItemRendererArgs<T extends any> = {\n  item: (item: ItemNode<T>) => React.ReactNode;\n  sectionHeader?: (item: SectionNode<T>) => React.ReactNode;\n};\nexport const listItemRenderer = <T extends any>({\n  item: renderItem,\n  sectionHeader: renderSectionHeader = (item) => (\n    <StyledListSectionHeader>{item.rendered}</StyledListSectionHeader>\n  ),\n}: listItemRendererArgs<T>) => {\n  return render;\n\n  function render(item: Node<T>): React.ReactNode {\n    if (isItemNode(item)) {\n      return renderItem(item);\n    }\n    if (isSectionNode(item)) {\n      return (\n        <React.Fragment key={item.key}>\n          {renderSectionHeader(item)}\n          {[...(item.childNodes as ItemNode<T>[])].map(render)}\n        </React.Fragment>\n      );\n    }\n    if (isDividerNode(item)) {\n      return <ListDivider key={item.key} />;\n    }\n    return null;\n  }\n};\n","import { SelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nexport interface ListProps\n  extends Omit<\n    SelectableListOptions,\n    | \"selectOnFocus\"\n    | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n    | \"collection\" // Grouped as state, the second argument, like in useListBox\n    | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n    | \"ref\" // Third argument\n  > {\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  props: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is gonna be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and disallowEmptySelection is true.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      props.disallowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.select(firstKey);\n    }\n  }, [props.disallowEmptySelection]);\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { Collection, FocusStrategy, KeyboardDelegate, Node, } from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { MultipleSelectionManager, SelectionManager, } from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"../selection/useSelectableCollection\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport { replaceSelectionManager } from \"../selection/replaceSelectionManager\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T>\n): ListState<T> {\n  return replaceSelectionManager(\n    originalUseListState({ ...props, selectionBehavior: \"replace\" })\n  );\n}\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown at the top left corner of list, tree, etc., which shows the search\n * query.\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} match={match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ match?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ match, theme }) =>\n    match\n      ? theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )\n      : theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\n\nexport interface SpeedSearchState {\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    active: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.active!,\n    props.active || false,\n    props.onActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active: active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n  };\n}\n\nexport interface SpeedSearchProps {\n  stickySearch?: boolean;\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { stickySearch }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      // intellij UI implementation removes the searchTerm by left/right arrows. Maybe do the same?\n      if (e.key === \"Escape\") {\n        clear();\n      } else {\n        ghostInputKeydown(e);\n      }\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onFocusWithinChange: (focused) => {\n      if (!focused && !stickySearch) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nconst StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n}: {\n  item: Node<T>;\n}) => (\n  <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n    <TreeNode key={item.key} item={item} />\n  </SpeedSearchItemHighlightsProvider>\n);\n","import { TreeRef } from \"@intellij-platform/core/Tree\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport React, { ForwardedRef, useRef } from \"react\";\nimport { StyledTree } from \"../StyledTree\";\nimport { replaceSelectionManager } from \"../../selection/replaceSelectionManager\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../__tmp__useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchTreeNode } from \"@intellij-platform/core/Tree/SpeedSearchTree/SpeedSearchTreeNode\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps;\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    { fillAvailableSpace = false, ...props }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<TreeRef>\n  ) => {\n    const state = replaceSelectionManager(useTreeState(props, forwardedRef));\n    const ref = useRef<HTMLDivElement>(null);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { RefObject } from \"react\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { TreeState } from \"@intellij-platform/core/Tree/__tmp__useTreeState\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    stickySearch: props.stickySearch,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if ([\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key)) {\n        speedSearch.setSearchTerm(\"\");\n        speedSearch.setActive(false);\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList)`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import { TreeState } from \"@intellij-platform/core/Tree/__tmp__useTreeState\";\nimport React, { Key, MutableRefObject } from \"react\";\n\nexport type TreeContextType<T> = {\n  state: TreeState<T>;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { StyledListItem } from \"../List/StyledListItem\";\nimport { styled } from \"../styled\";\nimport { TREE_ICON_SIZE, TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n};\nconst StyledTreeNode = styled(StyledListItem).attrs({ as: \"div\" })<{\n  level: number;\n}>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n`;\n\nexport function TreeNode<T>({ item }: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@react-aria/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }),\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n//@ts-nocheck\n\n/**\n * IMPORTANT: this is coppied from react spectrum, temporarily until,\n * https://github.com/adobe/react-spectrum/issues/1525 is fixed. Any version above 3.1.3 should be\n * sufficient to remove this copy and use the one from @react-stately/tree\n */\n\nimport {\n  Collection,\n  CollectionBase,\n  Expandable,\n  MultipleSelection,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeRef, useTreeRef } from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport {\n  SelectionManager,\n  useMultipleSelectionState,\n} from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n}\n\nexport interface TreeProps<T>\n  extends CollectionBase<T>,\n    Expandable,\n    MultipleSelection,\n    CollectionCacheInvalidationProps {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>;\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>;\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>;\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void;\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager;\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object, C>(\n  props: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRef>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? props.expandedKeys : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  let tree = useCollection(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const onToggle = (key: Key) => {\n    setExpandedKeys((expandedKeys) => {\n      const newKeys = toggleKey(expandedKeys, key);\n      // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n      // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n      for (const aKey of newKeys) {\n        if (tree.getItem(aKey) == null) {\n          newKeys.delete(aKey);\n        }\n      }\n\n      // If we are toggling it open, expand all expandable single-child items\n      if (newKeys.has(key)) {\n        for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n          newKeys.add(aKey);\n        }\n      }\n      return newKeys;\n    });\n  };\n\n  const selectionManager = new SelectionManager(tree, selectionState);\n\n  useTreeRef({ selectionManager }, treeRef);\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager,\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n\nconst isExpandable = (node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction getSingleChildrenKeys<T>(node: Node<T> | null | undefined): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n) {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import { CacheInvalidationContext } from \"@intellij-platform/core/Collections/Item\";\nimport { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import React, { Key, RefObject, useMemo, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"../selection/useSelectableCollection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { TreeState } from \"./__tmp__useTreeState\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\n\nexport interface SelectableTreeProps<T> extends DOMProps {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  { onAction, ...props }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    selectOnFocus: true,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    if (focusedKey == null) {\n      return;\n    }\n    const item = state.collection.getItem(focusedKey);\n    const isExpandable = item.hasChildNodes;\n    const expanded = state.expandedKeys.has(focusedKey);\n    const isDisabled = state.disabledKeys.has(focusedKey);\n    if (isDisabled) {\n      return;\n    }\n\n    props?.onNodeKeyDown?.(event, item);\n\n    const shouldToggle =\n      event.key === \"Enter\" ||\n      (event.key === \"ArrowLeft\" && expanded) ||\n      (event.key === \"ArrowRight\" && !expanded);\n\n    if (isExpandable && shouldToggle) {\n      event.preventDefault();\n      state.toggleKey(focusedKey);\n    } else if (event.key === \"Enter\") {\n      onAction?.(focusedKey);\n    } else {\n      // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n      // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n      // inputs when the propagation is not prevented.\n      selectionKeyDown?.(event);\n    }\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused,\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps\n    ),\n    treeContext,\n    focused,\n  };\n}\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport interface TreeRef {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef(\n  props: { selectionManager: SelectionManager },\n  forwardedRef?: ForwardedRef<TreeRef>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n      };\n    },\n    []\n  );\n}\n","import { LayoutNode, ListLayout } from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport { InvalidationContext, Rect, Size } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = super.buildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","import { TreeState } from \"@intellij-platform/core/Tree/__tmp__useTreeState\";\nimport React, { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager as OriginalSelectionManager,\n} from \"@react-stately/selection\";\nimport { Collection, Node, PressEvent } from \"@react-types/shared\";\nimport { Key } from \"react\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\nexport class SelectionManager extends OriginalSelectionManager {\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState\n  ) {\n    super(collection, state);\n  }\n  select(key: Key, e?: PressEvent | PointerEvent) {\n    if (this.selectionMode === \"none\") {\n      return;\n    }\n\n    if (this.selectionMode === \"single\") {\n      if (this.isSelected(key) && !this.disallowEmptySelection) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    } else {\n      if (e?.shiftKey) {\n        this.extendSelection(key);\n      } else if (\n        isCtrlKeyPressed(e) &&\n        (this.selectedKeys.size > 1 || !this.isSelected(key))\n      ) {\n        this.toggleSelection(key);\n      } else {\n        this.replaceSelection(key);\n      }\n    }\n  }\n}\n","import { SelectionManager } from \"./SelectionManager\";\nimport { Collection, Node } from \"@react-types/shared\";\n\n/**\n * collection state hooks like `useList`, `useTree`, etc, don't have an option to pass an\n * alternative `SelectionManager` implementation (which is required to achieve the desired\n * multi-select behavior). So this simple utility is kind of a hacky patch to replace selection\n * manager in the return value of those state hooks\n */\nexport function replaceSelectionManager<\n  T,\n  S extends {\n    selectionManager: SelectionManager;\n    collection: Collection<Node<T>>;\n  }\n>(state: S) {\n  state.selectionManager = new SelectionManager(\n    state.collection,\n    // @ts-expect-error state is private. There might be better ways of creating a custom selection manager\n    state.selectionManager.state\n  );\n  return state;\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled = styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme = styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer = styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import { isMac } from \"@react-aria/utils\";\n\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  ref.current = value;\n  return ref;\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { DividerItem } from \"./src/Collections/Divider\";\n\nexport type Legend = { name: string };\nexport const legends: Array<\n  Legend | DividerItem | { items: Legend[]; title: string }\n> = [\n  { name: \"Paco de Lucia\" },\n  { name: \"Vicente Amigo\" },\n  new DividerItem(),\n  { name: \"Gerardo Nunez\" },\n  { name: \"Paco Serrano\" },\n  new DividerItem(),\n  { name: \"Sabicas\" },\n  {\n    title: \"Super legends\",\n    items: [{ name: \"Sabicas2\" }],\n  },\n  { name: \"Pepe Habichuela\" },\n  { name: \"El Amir\" },\n  { name: \"Paco Peña\" },\n];\n","import { Item } from \"@react-stately/collections\";\nimport { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree } from \"./Tree/SpeedSearchTree/SpeedSearchTree\";\nimport { HighlightedTextValue } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Set<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = new Set([\"BasicList\"]),\n  onSelectedKeysChange,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: SelectedKeysType) => void;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={defaultSelectedKeys}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      <Item key=\"index.ts\">index.ts</Item>\n      <Item textValue=\"List\" title={<HighlightedTextValue />} key=\"List\">\n        <Item\n          textValue=\"BasicList\"\n          title={<HighlightedTextValue />}\n          key=\"BasicList\"\n        >\n          <Item textValue=\"BasicList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useBasicList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item\n          textValue=\"SpeedSearchList\"\n          title={<HighlightedTextValue />}\n          key=\"SpeedSearchList\"\n        >\n          <Item textValue=\"SpeedSearchList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useSpeedSearchList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item textValue=\"ListDivider.tsx\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n      <Item textValue=\"Theme\" title={<HighlightedTextValue />} key=\"Theme\">\n        <Item textValue=\"createTheme.ts\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n    </SpeedSearchTree>\n  );\n};\n","import { Legend, legends } from \"../../test-data\";\nimport React, { ReactNode } from \"react\";\nimport {\n  Divider,\n  DividerItem,\n  HighlightedTextValue,\n  Item,\n  Section,\n} from \"@intellij-platform/core\";\n\nexport const renderItemCustomUI = (item: Legend, content?: ReactNode) => (\n  <Item key={item.name} textValue={item.name}>\n    <div style={{ height: 40, display: \"flex\", alignItems: \"center\" }}>\n      🎸 &nbsp;\n      <b>{content || item.name}</b>\n    </div>\n  </Item>\n);\nexport const itemRenderer = (\n  renderItem: (item: Legend, content?: ReactNode) => JSX.Element,\n  content?: ReactNode\n) => (item: typeof legends[number]) => {\n  if (item instanceof DividerItem) {\n    return <Divider key={item.key} />;\n  }\n  if (\"items\" in item) {\n    return (\n      <Section items={item.items} key={item.title} title={item.title}>\n        {(item) => renderItem(item, content)}\n      </Section>\n    );\n  }\n  return renderItem(item as Legend, content);\n};\nexport const renderItemText = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    {item.name}\n  </Item>\n);\nexport const renderItemTextWithHighlights = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    <HighlightedTextValue />\n  </Item>\n);\n","import React from \"react\";\nimport { Meta, Story } from \"@storybook/react\";\nimport { List, ListProps } from \"./List\";\nimport { legends } from \"../../test-data\";\nimport { Item, Section } from \"@react-stately/collections\";\nimport { Divider } from \"../Collections/Divider\";\nimport { Pane } from \"../story-components\";\nimport {\n  itemRenderer,\n  renderItemCustomUI,\n  renderItemText,\n} from \"./story-helpers\";\n\nexport default {\n  title: \"Components/List (Basic)\",\n  component: List,\n} as Meta;\n\nexport const Default: Story<ListProps<never>> = (props) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        {...props}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const AlwaysShownAsFocused = () => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        // alwaysShowListAsFocused\n      >\n        {itemRenderer(renderItemCustomUI)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const WithStaticData = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"multiple\" fillAvailableSpace>\n        <Item>Paco de lucia</Item>\n        <Divider />\n        <Item>Vicente Amigo</Item>\n        <Section title=\"Other\">\n          <Item>Gerardo Nunez</Item>\n          <Item>El Amir</Item>\n        </Section>\n      </List>\n    </Pane>\n  );\n};\n\nexport const MultiSelect = ({\n  fillAvailableSpace,\n  shouldFocusWrap,\n  alwaysShowListAsFocused,\n}: any) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"multiple\"\n        items={legends}\n        fillAvailableSpace={fillAvailableSpace}\n        shouldFocusWrap={shouldFocusWrap}\n        alwaysShowListAsFocused={alwaysShowListAsFocused}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\nMultiSelect.argTypes = {\n  shouldFocusWrap: { control: \"boolean\" },\n};\nMultiSelect.args = {\n  shouldFocusWrap: { value: false },\n};\n\nDefault.args = {};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'List';\nexport const metadata = {\n  \"unversionedId\": \"components/List\",\n  \"id\": \"components/List\",\n  \"title\": \"List\",\n  \"description\": \"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\",\n  \"source\": \"@site/docs/components/List.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/List\",\n  \"permalink\": \"/jui/docs/components/List\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/List.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Link\",\n    \"permalink\": \"/jui/docs/components/Link\"\n  },\n  \"next\": {\n    \"title\": \"Menu\",\n    \"permalink\": \"/jui/docs/components/Menu\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"../../src/components/RefToIntellijPlatform.tsx\";\nimport { Default } from \"@intellij-platform/core/List/List.stories\";\nimport { ExampleContext } from \"../../src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'SpeedSearchList',\n  id: 'speedsearchlist',\n  level: 2\n}, {\n  value: 'Advanced use',\n  id: 'advanced-use',\n  level: 2\n}, {\n  value: 'Custom list component with useList and useSpeedSearchList',\n  id: 'custom-list-component-with-uselist-and-usespeedsearchlist',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h1>\n    <p>{`Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\na list of items with a single attribute. Here is some examples from JetBrains IDEs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Tools -> SSH Configurations`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Appearance & Behavior -> Scopes`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> General -> Console -> Exceptions`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> File and Code Templates`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> Natural Languages`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Show Local History`}</strong>{` window (advanced layout)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Virtualized scrolling support for performance with long lists`}</li>\n    </ul>\n    <ExampleContext mdxType=\"ExampleContext\">\n  <Default mdxType=\"Default\" />\n    </ExampleContext>\n    <h2 {...{\n      \"id\": \"speedsearchlist\"\n    }}>{`SpeedSearchList`}</h2>\n    <h2 {...{\n      \"id\": \"advanced-use\"\n    }}>{`Advanced use`}</h2>\n    <h3 {...{\n      \"id\": \"custom-list-component-with-uselist-and-usespeedsearchlist\"\n    }}>{`Custom list component with useList and useSpeedSearchList`}</h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}"],"names":["CollectionSpeedSearchContext","React","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","children","itemKey","context","useContext","Error","item","collection","getItem","text","textValue","undefined","props","console","warn","Provider","value","highlightedRanges","matches","get","HighlightedTextValue","speedSearchContext","highlights","createSpeedSearchSelectionManager","wrappedSelectionManager","Object","create","selectAll","state","setSelectedKeys","Set","keys","filter","key","disabledKeys","has","useCollectionSpeedSearch","selectionManager","stickySearch","keyboardDelegate","speedSearchStateProps","speedSearch","useSpeedSearchState","speedSearchSelectionManager","searchTerm","active","result","useMemo","Map","getKeys","map","type","forEach","matchedRanges","minusculeMatch","set","latestValues","useLatest","useEffect","current","matchedKeys","noneOfTheMatchesAreSelected","some","matchedKey","isSelected","length","newSelectedKey","passedFirstSelection","firstSelectedKey","includes","getMatchToSelect","setFocusedKey","replaceSelection","useCollectionSpeedSearchResult","containerProps","useSpeedSearch","speedSearchKeyboardDelegate","wrappedKeyboardDelegate","getKeyBelow","keyBelow","getKeyAbove","keyAfter","createSpeedSearchKeyboardDelegate","speedSearchContextValue","searchPopupProps","match","size","Divider","_Divider","getCollectionNode","element","rendered","hasChildNodes","DividerItem","seq","Item","_Item","StatelyItem","next","originalShouldInvalidate","shouldInvalidate","invalidated","ItemStateContext","useCollectionAutoScroll","ref","isVirtualized","focusedKey","querySelector","scrollIntoView","LafIcon","forwardedRef","themePath","icon","resolvedIconPath","iconDescriptor","theme","useTheme","resolvedValue","modifiers","name","isUnderDarcula","reduce","soFar","modifier","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","amendName","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","PlatformIcon","darkIcon","iconName","dark","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","styled","unmounted","async","error","dataset","loadingIcon","svg","getSvgIcon","catch","e","remove","svgElement","document","createElement","appendChild","outerHTML","fetchIcon","List","disallowEmptySelection","alwaysShowListAsFocused","fillAvailableSpace","onAction","inputProps","useRef","useListState","listProps","focused","useList","listItemRenderer","listFocused","ListDivider","as","useSeparator","orientation","ListItem","disabled","selected","itemProps","useSelectableItem","pressProps","usePress","isDisabled","preventFocusOnPress","containerFocused","StyledList","color","css","StyledListItem","backgroundColor","position","display","whiteSpace","paddingLeft","lineHeight","outline","cursor","minWidth","StyledListSectionHeader","fontWeight","renderItem","sectionHeader","renderSectionHeader","render","node","isSectionNode","childNodes","isDividerNode","onMouseDown","autoFocus","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","useState","focusWithinProps","useFocusWithin","onFocusWithinChange","firstKey","getFirstKey","isEmpty","select","mergeProps","replaceSelectionManager","originalUseListState","selectionBehavior","StyledSearchIcon","SpeedSearchPopup","StyledSpeedSearchPopup","replace","commonColors","tooltipForeground","red","useGhostInput","onChange","valueRef","onKeyDown","event","ctrlKey","altKey","metaKey","target","HTMLElement","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","slice","setActive","useControlledState","onActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","ghostInputKeydown","trimmedValue","trimStart","clear","keyboardProps","onKeyUp","useKeyboard","onFocus","onBlur","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundClip","boxSizing","margin","border","flexShrink","StyledHorizontalSeparator","StyledVerticalSeparator","getAllRanges","ranges","from","push","to","index","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","TextWithHighlights","parts","highlighted","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","useTreeState","treeProps","treeContext","useSpeedSearchTree","virtualizerProps","useTreeVirtualizer","TreeContext","StyledTree","Virtualizer","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","selectableTree","useSelectableTree","constructor","super","getKeyLeftOf","this","parentKey","getKeyRightOf","StyledTreeNodeIcon","TreeNodeIcon","expanded","Selected","iconPath","getIcon","useTreeNodeToggleButton","toggleKey","treeNodeToggleButtonProps","onPress","selectedDescendantKeys","selectedKeys","toggleSelection","StyledTreeNode","attrs","level","expandedKeys","onActionRef","togglePressProps","treeNodeProps","onDoubleClick","useTreeNode","isFocused","Symbol","iterator","TreeCollection","nodes","keyMap","iterable","lastKey","last","visit","child","nextKey","prevKey","getKeyBefore","getKeyAfter","getLastKey","treeRef","setExpandedKeys","defaultExpandedKeys","onExpandedChange","selectionState","useMultipleSelectionState","cacheInvalidation","invalidators","lastInvalidators","usePrevious","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","SelectionManager","useTreeRef","newKeys","res","delete","add","aKey","getSingleChildrenKeysRecursive","previousKeys","childNodesIterator","firstChild","done","noMoreChildren","_","isEmptyIterable","isExpandable","concat","domProps","filterDOMProps","selectionKeyDown","onNodeKeyDown","shouldToggle","preventDefault","latestState","useImperativeHandle","focus","setTimeout","VariableWidthListLayout","ListLayout","keyToWidth","visibleContentWidth","buildItem","x","y","layoutNode","layoutInfo","rect","width","buildCollection","getVisibleContentWidth","invalidateEverything","contentSize","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","layoutInfos","Math","max","virtualizer","visibleRect","visibleViews","view","itemContentWidth","intersects","getVisibleRect","FlattenedTreeLayout","buildChild","getVisibleLayoutInfos","layout","estimatedRowHeight","sizeToFit","scrollToItem","shouldScrollX","duration","scrollDirection","isWordSeparator","c","isWhitespace","char","test","isUpperCase","str","toUpperCase","toLowerCase","isMeaningfulChar","ch","input","rawPattern","isStarts","isStart","pattern","join","continuous","inputIndex","patternIndex","i","lastMatch","pop","chars","previousChar","OriginalSelectionManager","selectionMode","shiftKey","extendSelection","isCtrlKeyPressed","options","manager","disallowSelectAll","direction","useLocale","values","focusSafely","tabIndex","handlers","contains","navigateToKey","childFocus","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","activeElement","currentTarget","relatedTarget","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","styledComponents","ThemeConsumer","isMac","innerRef","legends","title","items","Pane","style","flexDirection","marginTop","height","renderItemCustomUI","content","alignItems","itemRenderer","renderItemText","Default","MultiSelect","argTypes","control","args","frontMatter","contentTitle","metadata","assets","toc","id","layoutProps","MDXContent","components","mdxType","parentName","ExampleContext","isMDXComponent","_taggedTemplateLiteralLoose","strings","raw"],"sourceRoot":""}