"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["7687"],{24392:function(e,n,t){t.r(n),t.d(n,{default:()=>u,frontMatter:()=>r,metadata:()=>i,assets:()=>c,toc:()=>a,contentTitle:()=>l});var i=JSON.parse('{"id":"components/Menu","title":"Menu","description":"Features","source":"@site/docs/components/Menu.mdx","sourceDirName":"components","slug":"/components/Menu","permalink":"/jui/docs/components/Menu","draft":false,"unlisted":false,"editUrl":"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Menu.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"List","permalink":"/jui/docs/components/List"},"next":{"title":"ModalWindow","permalink":"/jui/docs/components/ModalWindow"}}'),o=t("52322"),s=t("22840");let r={},l="Menu",c={},a=[{value:"Features",id:"features",level:3},{value:"Remaining",id:"remaining",level:4},{value:"Known differences",id:"known-differences",level:4},{value:"Known issues",id:"known-issues",level:4},{value:"Menu",id:"menu-1",level:2},{value:"Static API",id:"static-api",level:3},{value:"Dynamic API",id:"dynamic-api",level:3},{value:"MenuItemLayout",id:"menuitemlayout",level:3},{value:"Selection",id:"selection",level:3},{value:"Disabled items",id:"disabled-items",level:3},{value:"Full Example",id:"full-example",level:3},{value:"MenuTrigger",id:"menutrigger",level:2},{value:"Positioning options",id:"positioning-options",level:3},{value:"Controlled and uncontrolled",id:"controlled-and-uncontrolled",level:3},{value:"Focus restoration",id:"focus-restoration",level:3},{value:"ContextMenu",id:"contextmenu",level:2},{value:"MenuOverlayFromOrigin",id:"menuoverlayfromorigin",level:3},{value:"Submenu Behaviour",id:"submenu-behaviour",level:2},{value:"SpeedSearchMenu",id:"speedsearchmenu",level:2}];function d(e){let n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",input:"input",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"menu",children:"Menu"})}),"\n",(0,o.jsx)(n.h3,{id:"features",children:"Features"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Nested menu items"}),"\n",(0,o.jsx)(n.li,{children:"Check-able menu items"}),"\n",(0,o.jsx)(n.li,{children:"Default menu layout with icon, text and keyboard shortcut"}),"\n",(0,o.jsx)(n.li,{children:"Full keyboard support"}),"\n",(0,o.jsx)(n.li,{children:"Viewport-aware positioning with respect to a trigger."}),"\n",(0,o.jsx)(n.li,{children:"Toggle submenus by press, instead of hover. (example: Git Branches popup menu)"}),"\n",(0,o.jsx)(n.li,{children:"Ability to define action for menu items with submenu (Run Configurations dropdown menu)"}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"remaining",children:"Remaining"}),"\n",(0,o.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,o.jsxs)(n.li,{className:"task-list-item",children:[(0,o.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Advanced hover behaviour, which detects attempt to go to submenu and doesn't close the menu on mouse out."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"known-differences",children:"Known differences"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"In the reference impl, hovering over disabled items removes previously highlighted menu item. Here it preserves\nit."}),"\n",(0,o.jsx)(n.li,{children:"In the reference impl, there is a delay in opening submenu"}),"\n",(0,o.jsx)(n.li,{children:"Moving mouse out of the menu de-highlights currently highlighted menu, if it's not a menu item with a nested menu.\nHere menu items are not de-highlighted when mouse goes away from the menu."}),"\n",(0,o.jsxs)(n.li,{children:["If ",(0,o.jsx)(n.code,{children:"selectedKeys"}),' is passed and non-empty, it will be autofocused, irrespective of autoFocus value being true, "first"\nor "last", as long as autofocus is not ',(0,o.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h4,{id:"known-issues",children:"Known issues"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["The first selected key is a key in a submenu, ",(0,o.jsx)(n.code,{children:"autoFocus"}),' being set to "first" or "last" won\'t work.']}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"menu-1",children:"Menu"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Menu"})," component implements the UI of the menu itself. While ",(0,o.jsx)(n.a,{href:"#menutrigger",children:"MenuTrigger"})," implements how the menu is opened via a\ntrigger and positioned with respect to it."]}),"\n",(0,o.jsxs)(n.p,{children:["Similar to all ",(0,o.jsx)(n.a,{href:"../guides/Collections",children:"collection components"}),", there are two ways for defining menu items: as jsx, in\nchildren (static), and via ",(0,o.jsx)(n.code,{children:"items"})," prop (dynamic)."]}),"\n",(0,o.jsx)(n.h3,{id:"static-api",children:"Static API"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"Item"})," component can be rendered in the children of ",(0,o.jsx)(n.code,{children:"Menu"})," to define the menu items. It's best suited for the use cases\nwhere the menu items are static. Use ",(0,o.jsx)(n.code,{children:"key"})," to give each item a unique identifier, which is used in props on ",(0,o.jsx)(n.code,{children:"onAction"}),",\nor ",(0,o.jsx)(n.code,{children:"disabledKeys"}),". If ",(0,o.jsx)(n.code,{children:"key"})," is not provided, an index-based auto-generated key will be assigned to each item."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If the content of an ",(0,o.jsx)(n.code,{children:"Item"})," is not plain text, use ",(0,o.jsx)(n.code,{children:"textValue"})," to specify the plain text value for the item. It's needed\nfor making the menu item accessible via type-to-select."]})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["Render ",(0,o.jsx)(n.code,{children:"Item"}),"s inside another ",(0,o.jsx)(n.code,{children:"Item"})," to create nested menu. The parent item's content is provided via ",(0,o.jsx)(n.code,{children:"title"})," prop, in\nthis case."]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'// import { Item, Menu } from "@intellij-platform/core";\n\n<Menu>\n  <Item key="copy">Copy</Item>\n  <Item key="cut" textValue="Cut">\n    <span>Cut</span>\n  </Item>\n  <Item title="History">\n    <Item>Show History</Item>\n    <Item>Put Label</Item>\n  </Item>\n</Menu>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"dynamic-api",children:"Dynamic API"}),"\n",(0,o.jsxs)(n.p,{children:["While you can also dynamically map a list of objects to rendered ",(0,o.jsx)(n.code,{children:"Item"}),"s, ",(0,o.jsx)(n.code,{children:"items"})," prop is designed for dynamically\nrendering menu items based on an array of objects. Then you use a render function in children, to specify how each\nitem should be mapped to an ",(0,o.jsx)(n.code,{children:"Item"})," or ",(0,o.jsx)(n.code,{children:"Section"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'// import { Item, Menu } from "@intellij-platform/core";\n\n<Menu\n  items={[\n    { name: "Copy" },\n    { name: "Cut" },\n    {\n      name: "History",\n      children: [{ name: "Show History" }, { name: "Put Label" }],\n    },\n  ]}\n>\n  {(item) => (\n    <Item key={item.name} childItems={item.children}>\n      {item.name}\n    </Item>\n  )}\n</Menu>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"menuitemlayout",children:"MenuItemLayout"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MenuItemLayout"})," can be rendered inside ",(0,o.jsx)(n.code,{children:"Item"}),", when plain text is not enough for a menu item. ",(0,o.jsx)(n.code,{children:"MenuItemLayout"})," has\nthree parts:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"An icon rendered before the menu item text"}),"\n",(0,o.jsx)(n.li,{children:"The text content of the menu item"}),"\n",(0,o.jsx)(n.li,{children:"Shortcut rendered on the right side."}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<Menu>\n  <Item>\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/copy"} />}\n      content="Copy"\n      shortcut={"\u2318C"}\n    />\n  </Item>\n</Menu>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"selection",children:"Selection"}),"\n",(0,o.jsxs)(n.p,{children:["Menu items can be marked as selected via ",(0,o.jsx)(n.code,{children:"selectedKeys"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<Menu selectedKeys={["enablePreviewTab"]}>\n  <Item key="enablePreviewTab">Enable Preview Tab</Item>\n  <Item key="fileNesting">File Nesting...</Item>\n</Menu>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["There is no ",(0,o.jsx)(n.code,{children:"onSelectedKeys"})," change callback. You should use ",(0,o.jsx)(n.code,{children:"onAction"})," and adjust ",(0,o.jsx)(n.code,{children:"selectedKeys"})," if needed."]}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsxs)(n.p,{children:["If a selected menu item renders ",(0,o.jsx)(n.code,{children:"MenuItemLayout"})," with an icon, the checkmark icon will replace the menu item icon."]})}),"\n",(0,o.jsx)(n.h3,{id:"disabled-items",children:"Disabled items"}),"\n",(0,o.jsxs)(n.p,{children:["Menu items can be disabled through ",(0,o.jsx)(n.code,{children:"disabledKeys"})," prop on the ",(0,o.jsx)(n.code,{children:"Menu"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<Menu disabledKeys={["paste"]}>\n  <Item key="copy">Copy</Item>\n  <Item key="paste">Paste</Item>\n  <Item key="cut">Cut</Item>\n</Menu>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"full-example",children:"Full Example"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<Menu\n  disabledKeys={["jumpToExternalEditor"]}\n  onAction={(key) => alert(`Selected: ${key}`)}\n>\n  <Item textValue="Cut">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/menu-cut"} />}\n      content="Cut"\n      shortcut={"\u2318X"}\n    />\n  </Item>\n  <Item textValue="Copy">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/copy"} />}\n      content="Copy"\n      shortcut={"\u2318C"}\n    />\n  </Item>\n  <Item textValue="Paste">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/menu-paste"} />}\n      content="Paste"\n      shortcut={"\u2318V"}\n    />\n  </Item>\n  <Divider />\n  <Item>Reformat Code</Item>\n  <Item textValue="Optimize Imports">\n    <MenuItemLayout content="Optimize Imports" shortcut={"\u2303\u2325O"} />\n  </Item>\n  <Item textValue="Delete">\n    <MenuItemLayout content="Delete" shortcut={"\u232B"} />\n  </Item>\n  <Divider />\n  <Item textValue="Compare with...">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/diff"} />}\n      content="Compare with..."\n    />\n  </Item>\n  <Divider />\n  <Item key="jumpToExternalEditor" textValue="Jump to external editor">\n    <MenuItemLayout content="Jump to external editor" shortcut={"\u2325\u2318F4"} />\n  </Item>\n  <Divider />\n  <Item title={<MenuItemLayout content="History" />}>\n    <Item>Show History</Item>\n    <Item>Put label</Item>\n  </Item>\n</Menu>\n'})}),"\n",(0,o.jsx)(n.h2,{id:"menutrigger",children:"MenuTrigger"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"MenuTrigger"})," links a menu to a trigger for the menu. It handles the opening/closing logic and renders the menu as an\noverlay, positioned with respect to the trigger element. ",(0,o.jsx)(n.code,{children:"children"})," of ",(0,o.jsx)(n.code,{children:"MenuTrigger"})," must be a render function which\nrenders the trigger. It's invoked with props and ref to be passed down to the trigger element."]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsx)(n.p,{children:"Currently, menu is closed when a menu action is triggered. For some actions (e.g. toggleable view options), that's not\nthe best UX. In future releases, there will be a way to control if the menu should be kept open after the triggered\naction."})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<MenuTrigger\n  renderMenu={({ menuProps }) => (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        console.log(key);\n      }}\n    >\n      <Item textValue="Cut">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/menu-cut"} />}\n          content="Cut"\n          shortcut={"\u2318X"}\n        />\n      </Item>\n      <Item textValue="Copy">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/copy"} />}\n          content="Copy"\n          shortcut={"\u2318C"}\n        />\n      </Item>\n      <Item textValue="Paste">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/menu-paste"} />}\n          content="Paste"\n          shortcut={"\u2318V"}\n        />\n      </Item>\n    </Menu>\n  )}\n>\n  {(props, ref) => (\n    <ActionButton {...props} ref={ref}>\n      <PlatformIcon icon={"general/gearPlain"} />\n    </ActionButton>\n  )}\n</MenuTrigger>\n'})}),"\n",(0,o.jsx)(n.h3,{id:"positioning-options",children:"Positioning options"}),"\n",(0,o.jsx)(n.p,{children:"TODO"}),"\n",(0,o.jsx)(n.h3,{id:"controlled-and-uncontrolled",children:"Controlled and uncontrolled"}),"\n",(0,o.jsx)(n.p,{children:"TODO"}),"\n",(0,o.jsx)(n.h3,{id:"focus-restoration",children:"Focus restoration"}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"restoreFocus"})," to have focus restored to the trigger, after the menu is closed. While it's an accessibility best\npractice to restore the focus, ",(0,o.jsx)(n.code,{children:"restoreFocus"})," is ",(0,o.jsx)(n.code,{children:"false"})," by default. That is based on the observed majority of the use\ncases in Intellij Platform applications."]}),"\n",(0,o.jsx)(n.h2,{id:"contextmenu",children:"ContextMenu"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ContextMenuContainer"})," provides a generic container component that is capable of opening a context menu. You can use it\nas a wrapper for ",(0,o.jsx)(n.a,{href:"./List",children:"List"}),", ",(0,o.jsx)(n.a,{href:"./Tree",children:"Tree"}),", or anything else, to let them have a context menu."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live noPadding",live:!0,children:'<ContextMenuContainer\n  renderMenu={() => (\n    <Menu>\n      <Item textValue="Open in Right Split">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/splitVertically.svg"} />}\n          content="Open in Right Split"\n          shortcut={"\u21E7\u23CE"}\n        />\n      </Item>\n      <Item textValue="Open in Right Split">\n        <MenuItemLayout\n          content="Open in Split with Chooser..."\n          shortcut={"\u2325\u21E7\u23CE"}\n        />\n      </Item>\n      <Item title="Open in">\n        <Item>Finder</Item>\n        <Item>Terminal</Item>\n        <Item textValue="Github">\n          <MenuItemLayout\n            icon={<PlatformIcon icon={"vcs/vendors/github.svg"} />}\n            content="Github"\n          />\n        </Item>\n      </Item>\n    </Menu>\n  )}\n>\n  <div style={{ padding: "5vw", textAlign: "center" }}>\n    Right click somewhere to open the context menu.\n  </div>\n</ContextMenuContainer>\n'})}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["In future versions, there might be an integrated support for context menu in List, Tree, etc. But for now it's done\njust by composition of those components and ",(0,o.jsx)(n.code,{children:"ContextMenuContainer"}),". A caveat to have in mind is the extra wrapper\nelement that will be added if you want context menu, which may need some styling to have no effect on the layout."]})}),"\n",(0,o.jsx)(n.h3,{id:"menuoverlayfromorigin",children:"MenuOverlayFromOrigin"}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"ContextMenuContainer"})," uses ",(0,o.jsx)(n.code,{children:"MenuOverlayFromOrigin"})," under the hood,\nto position the menu overlay based on the contextmenu event's coordinate.\nFor use cases where ",(0,o.jsx)(n.code,{children:"ContextMenuContainer"})," can't be used, ",(0,o.jsx)(n.code,{children:"MenuOverlayFromOrigin"})," can be used directly\nto place a menu in an overlay that's positioned based on a pointer event, which can be used to implement contextmenu."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live noPadding",live:!0,children:'function ContextMenuExample() {\n  const [origin, setOrigin] = React.useState(null);\n  const defaultValue = "\\nRight click somewhere to open the context menu.\\n";\n  return (\n    <>\n      <MonacoEditor\n        height={200}\n        defaultValue={defaultValue}\n        options={{ contextmenu: false }}\n        onMount={(monacoEditor) => {\n          monacoEditor.focus();\n          monacoEditor.onContextMenu((c) => {\n            c.event.preventDefault();\n            Promise.resolve().then(() => {\n              setOrigin(c.event.browserEvent);\n            });\n          });\n        }}\n      ></MonacoEditor>\n      {origin && (\n        <MenuOverlayFromOrigin\n          origin={origin}\n          /**\n           * Context menus don\'t autofocus the first item in the reference impl.\n           * Note that this just defines the default value, and can always be controlled per case on the rendered Menu\n           */\n          defaultAutoFocus={true}\n          onClose={() => setOrigin(null)}\n        >\n          <Menu>\n            <Item>\n              <MenuItemLayout\n                icon={<PlatformIcon icon={"actions/copy"} />}\n                content="Copy"\n                shortcut={"\u2318C"}\n              />\n            </Item>\n            <Item>\n              <MenuItemLayout\n                icon={<PlatformIcon icon={"actions/paste-menu"} />}\n                content="Paste"\n                shortcut={"\u2318V"}\n              />\n            </Item>\n            <Divider />\n            <Item title="Open in">\n              <Item>Finder</Item>\n              <Item>Terminal</Item>\n              <Item textValue="Github">\n                <MenuItemLayout\n                  icon={<PlatformIcon icon={"vcs/vendors/github.svg"} />}\n                  content="Github"\n                />\n              </Item>\n            </Item>\n          </Menu>\n        </MenuOverlayFromOrigin>\n      )}\n    </>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"submenu-behaviour",children:"Submenu Behaviour"}),"\n",(0,o.jsxs)(n.p,{children:["By default, menu items with submenu open the submenu on hover. Pressing such items also opens the submenu, if not\nalready opened (e.g. when keyboard is used for navigation). Using ",(0,o.jsx)(n.code,{children:"submenuBehavior"})," prop, this default behavior can be\nfine-tuned for specific use cases:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"toggleOnPress"}),":"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"actionOnPress"}),":"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"speedsearchmenu",children:"SpeedSearchMenu"}),"\n",(0,o.jsx)(n.p,{children:"A drop-in replacement for Menu, which lets user filter items."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<SpeedSearchMenu\n  onAction={(key) => {\n    console.log(key);\n  }}\n>\n  <Section title="Local Branches">\n    <Item title="master">\n      <Item>Update</Item>\n      <Item>Push</Item>\n      <Divider />\n      <Item>Delete</Item>\n    </Item>\n    <Item title="feat/speed-search-menu">\n      <Item>Update</Item>\n      <Item>Push</Item>\n      <Divider />\n      <Item>Delete</Item>\n    </Item>\n  </Section>\n  <Section title="Remove Branches">\n    <Item title="origin/master">\n      <Item>Checkout</Item>\n      <Item>New Branch from \'origin/master\'...</Item>\n      <Divider />\n      <Item>Delete</Item>\n    </Item>\n    <Item>origin/feat/speed-search-menu</Item>\n  </Section>\n</SpeedSearchMenu>\n'})})]})}function u(e={}){let{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}}}]);
//# sourceMappingURL=0612fc38.cb742aaf.js.map