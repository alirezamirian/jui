{"version":3,"file":"assets/js/375aa0c7.89d965ef.js","mappings":"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","sources":["webpack://website/../jui/src/ActionButton/ActionButton.tsx","webpack://website/../jui/src/Button/BareButton.tsx","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useIsScrolled.tsx","webpack://website/../jui/src/Tabs/useCollectionOverflowObserver.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/Tooltip/ActionTooltip.tsx","webpack://website/../jui/src/Tooltip/Tooltip.tsx","webpack://website/../jui/src/Tooltip/TooltipContext.tsx","webpack://website/../jui/src/Tooltip/TooltipTrigger.tsx","webpack://website/../jui/src/Tree/__tmp__useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/./src/components/RefToIntellijPlatform.tsx","webpack://website/../jui/src/Tabs/3-TabThemes.stories.tsx","webpack://website/../jui/src/Tabs/2-Tabs.stories.tsx","webpack://website/./docs/components/Tabs.mdx","webpack://website/../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteralLoose.js"],"sourcesContent":["import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface ActionButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<HTMLProps<HTMLElement>, \"onFocus\" | \"onBlur\"> {\n  children?: React.ReactNode;\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for action buttons, which means they\n   * are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledActionButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled),\n  &:focus:not(:disabled) /* in intellij platform, the button doesn't grab the focus after being active. This is not the case in web,\n  for better accessibility. But there is no existing UI spec for it in intellij platform obviously. So for now, we\n  fallback to the same UI as hover state. Perhaps it can be improved with a opacity or something.*/ {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\nexport const ActionButton = React.forwardRef(function ActionButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: ActionButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledActionButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { ForwardedRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { AriaBaseButtonProps, ButtonProps } from \"@react-types/button\";\n\nexport interface BareButtonProps extends AriaBaseButtonProps, ButtonProps {\n  children: React.ReactElement;\n}\n\n/**\n * A component to make arbitrary content an accessible button which is also able to be a tooltip trigger.\n */\nexport const BareButton: React.FC<BareButtonProps> = React.forwardRef(\n  function BareButton(props: BareButtonProps, ref: ForwardedRef<HTMLElement>) {\n    const { buttonProps } = useButton(props, useObjectRef(ref));\n    const domProps = filterDOMProps(props);\n    const { autoFocus } = props;\n\n    return React.cloneElement(\n      props.children,\n      mergeProps(domProps, buttonProps, { autoFocus, ref })\n    );\n  }\n);\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return (null as any) as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<\n    PartialNode<T>\n  > = (StatelyItem as any).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext = React.createContext<ItemStateContextType | null>(\n  null\n);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = ([\n    \"Editable\",\n    \"Selected\",\n    \"Pressed\",\n    \"Focused\",\n    \"Disabled\",\n  ] as Array<keyof typeof modifiers>).reduce(\n    (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n    \"\"\n  );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  icon: string;\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            // potential SSR issues here?\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = svg;\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ orientation: \"vertical\" })}\n    />\n  );\n};\n","import { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\nexport const StyledMenu = styled.ul`\n  font-size: 0.87rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 100px;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n`;\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n  color: ${({ isActive, isDisabled, theme }) => {\n    if (isDisabled) {\n      return theme.color(\"MenuItem.disabledForeground\");\n    }\n    if (isActive) {\n      return theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      );\n    }\n    return theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    );\n  }};\n  ${({ isActive, theme }) =>\n    isActive &&\n    css`\n      background: ${theme.color(\n        \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n      )};\n      color: ${undefined};\n    `}\n  // would be nice to have a visual clue for focus visible state, but it's not like that in intellij platform\n  //border-left: 3px solid transparent;\n  //&:focus-visible {\n  //  border-left: 3px solid rgba(255, 255, 255, 0.1);\n  //}\n  padding: 0 20px 0 27px;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { Key } from \"react\";\nimport { useHover, useKeyboard } from \"@react-aria/interactions\";\nimport { useMenuItem } from \"@react-aria/menu\";\nimport { OverlayContainer, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { Item } from \"@react-stately/collections\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { Menu } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport { StyledMenuItem } from \"./StyledMenuItem\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onAction?: (key: Key) => void;\n  onSubmenuClose?: () => void;\n  expandOn?: \"hover\" | \"press\";\n}\n\nconst StyledNestedArrow = styled.span`\n  margin-right: -11px;\n  margin-left: 11px;\n  display: inline-flex; // to make it not take more height than the icon\n`;\n\nconst StyledSelectedMark = styled.span`\n  position: absolute;\n  left: 4px;\n  top: 50%;\n  transform: translateY(-50%);\n  display: inline-flex; // to make it not take more height than the icon\n`;\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nexport function MenuItem<T>({\n  item,\n  state,\n  onAction,\n  expandOn,\n}: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n\n  const { menuItemProps } = useMenuItem(\n    {\n      key: item.key,\n      isDisabled,\n      onAction: !item.hasChildNodes ? onAction : undefined,\n    },\n    state,\n    ref\n  );\n\n  const maybeOpenSubmenu = () => {\n    // Not the best way to clear expandedKeys, but current implementation of tree state only allows toggling keys\n    state.expandedKeys.forEach((key) => {\n      state.toggleKey(key);\n    });\n    if (item.hasChildNodes) {\n      state.toggleKey(item.key);\n    }\n  };\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled || expandOn !== \"hover\",\n    onHoverStart: () => {\n      maybeOpenSubmenu();\n    },\n  });\n\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if ([\"ArrowRight\", \"Enter\", \" \"].includes(e.key)) {\n        maybeOpenSubmenu();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose: () => {\n      console.log(\"on close\");\n    },\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const { subMenuProps } = useSubmenu({\n    onClose: () => {\n      state.toggleKey(item.key);\n      // setting focus with selection manager didn't work. Perhaps because of patchy implementation of nested menus\n      ref.current?.focus();\n    },\n  });\n\n  return (\n    <>\n      <StyledMenuItem\n        {...mergeProps(menuItemProps, hoverProps, keyboardProps)}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledSelectedMark>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledSelectedMark>\n        )}\n        <ItemStateContext.Provider\n          value={{ isDisabled, isFocused, isSelected, node: item }}\n        >\n          {typeof item.rendered === \"string\" ? (\n            <StyledMenuItemText>{item.rendered}</StyledMenuItemText>\n          ) : (\n            item.rendered\n          )}\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using OverlayContainer and FocusScope here:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         * So we need to render in a portal and that's done by OverlayContainer. We also need to render a FocusScope,\n         * because now that we are rendering in a portal, we are dom-wise outside the focus scope of the menu in\n         * MenuTrigger (or any other implementation that renders menu in an overlay with a focus scope), and therefore\n         * the autofocus behaviour for the nested menu doesn't work. That's because FocusScope works based on dom\n         * tree, not react tree. Although it's not clear why this problem persists while `contain` is not set on the\n         * FocusScope in MenuTrigger.\n         * So we need focus scope. Rendering a FocusScope here messes with the `restoreFocus` behaviour of the one\n         * in MenuTrigger, and that's why `forceRestoreFocus` is introduced in the locally implemented FocusScope.\n         * In a nutshell:\n         * Positioning -> need for OverlayContainer\n         * using OverlayContainer -> need for FocusScope\n         * FocusScope -> problem in focus restoration in MenuTrigger -> forceRestoreFocus as a patchy solution.\n         */\n        <OverlayContainer>\n          <FocusScope>\n            <div\n              ref={nestedMenuRef}\n              {...mergeProps(positionProps, subMenuProps)}\n            >\n              <Menu\n                aria-label={item[\"aria-label\"] || item.textValue}\n                items={item.childNodes}\n                disabledKeys={state.disabledKeys}\n                selectedKeys={state.selectionManager.selectedKeys}\n                onAction={onAction}\n                autoFocus\n              >\n                {(childItem) => {\n                  // FIXME: This is not complete and doesn't support section and divider\n                  return (\n                    <Item\n                      childItems={childItem.childNodes}\n                      hasChildItems={childItem.hasChildNodes}\n                      textValue={childItem.textValue}\n                    >\n                      {childItem.rendered}\n                    </Item>\n                  );\n                }}\n              </Menu>\n            </div>\n          </FocusScope>\n        </OverlayContainer>\n      )}\n    </>\n  );\n}\n\nconst useSubmenu = ({ onClose }: { onClose: () => void }) => {\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (e.key === \"ArrowLeft\" || e.key === \"Escape\") {\n        onClose();\n      } else if (![\"ArrowUp\", \"ArrowDown\"].includes(e.key)) {\n        e.continuePropagation();\n      }\n    },\n  });\n  return { subMenuProps: keyboardProps };\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { Key } from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { MenuItem } from \"@intellij-platform/core/Menu/MenuItem\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onAction?: (key: Key) => void;\n  expandOn?: \"hover\" | \"press\";\n}\n\nconst StyledMenuHeading = styled.li`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  onAction,\n  expandOn,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {[...item.childNodes].map((node) => {\n            return (\n              <MenuItem\n                key={node.key}\n                item={node}\n                state={state}\n                onAction={onAction}\n                expandOn={expandOn}\n              />\n            );\n          })}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import { useMenu } from \"@react-aria/menu\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport React, { Key, useContext, useEffect } from \"react\";\nimport { ListDivider } from \"../List/ListDivider\";\nimport { useTreeState } from \"../Tree/__tmp__useTreeState\";\nimport { MenuItem } from \"./MenuItem\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { MenuSection } from \"@intellij-platform/core/Menu/MenuSection\";\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key;\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   * if `expandOn` is \"focus\", or clicking on the menu item (when `expandOn` is \"press\").\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void;\n  defaultExpandedKey?: Key;\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n *\n *  TODO:\n *  - [Least important] pass aria props to icon, keyboard shortcut, and content part of menu item. Maybe a context\n *    can be provided for it from menu item, which also exposes state like selected.\n */\nexport function Menu<T extends object>({\n  expandOn = \"hover\",\n  ...props\n}: MenuProps<T>) {\n  const { close } = useContext(MenuOverlayContext);\n  const onAction: MenuProps<T>[\"onAction\"] = (...args) => {\n    close();\n    return props.onAction?.(...args);\n  };\n  if (expandOn === \"press\") {\n    // The only discovered use case so far is in \"Branches\" menu. Perhaps it's not even implemented as a Menu\n    // in Intellij Platform, but it seems it very well can be, by supporting expand on press.\n    throw new Error(\"expanding menu items only on press is not supported yet.\");\n  }\n  // Create state based on the incoming props\n  let state = useTreeState({\n    ...props,\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n\n  // Get props for the menu element\n  let ref = React.useRef<HTMLUListElement>(null);\n  let { menuProps } = useMenu(props, state, ref);\n\n  useEffect(() => {\n    if (props.autoFocus) {\n      setTimeout(() => {\n        // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n        // it sets the focus key, which will move focus to that item.\n        ref.current?.focus();\n      });\n    }\n  }, [props.autoFocus]);\n  return (\n    <StyledMenu {...menuProps} ref={ref}>\n      {[...state.collection].map((item: Node<T>) => {\n        switch (item.type) {\n          case \"item\":\n            return (\n              <MenuItem\n                key={item.key}\n                item={item}\n                state={state}\n                expandOn={expandOn}\n                onAction={onAction}\n              />\n            );\n          case \"section\":\n            // Maybe something like \"Branches\" menu needs titled sections.\n            return (\n              <MenuSection\n                key={item.key}\n                item={item}\n                state={state}\n                expandOn={expandOn}\n                onAction={onAction}\n              />\n            );\n          case \"divider\":\n            return <ListDivider key={item.key} />;\n        }\n      })}\n    </StyledMenu>\n  );\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { styled } from \"../styled\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\nimport { useContextOrThrow } from \"../utils/useContextOrThrow\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Icon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n  min-width: 16px;\n  margin-right: 5px;\n  margin-left: -21px;\n`;\n\nconst Shortcut = styled.kbd<{ selected: boolean }>`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme, selected }) =>\n    selected\n      ? theme.color(\n          \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n        )\n      : theme.color(\"MenuItem.acceleratorForeground\")};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isFocused, isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  return (\n    <StyledMenuItemLayout>\n      <Icon>{!isSelected && icon}</Icon>\n      <Content>{content}</Content>\n      {shortcut && <Shortcut selected={isFocused}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayContainer } from \"@react-aria/overlays\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <OverlayContainer>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </OverlayContainer>\n  );\n}\n","import React, { HTMLProps, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  children: (\n    props: HTMLProps<HTMLElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  renderMenu: (props: {\n    menuProps: React.HTMLAttributes<HTMLElement>;\n  }) => React.ReactNode;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = false,\n  ...otherProps\n}) => {\n  const menuTriggerProps: AriaMenuTriggerProps = {\n    ...otherProps,\n    direction,\n    align,\n    shouldFlip,\n  };\n  let state = useMenuTriggerState(menuTriggerProps);\n  let triggerRef = React.useRef(null);\n  let overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  let { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  let { buttonProps } = useButton(triggerProps, triggerRef);\n  let { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<AriaMenuTriggerProps>[\"direction\"],\n  align: Required<AriaMenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nconst StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  closeButton,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <DebuggerTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n}) => {\n  return (\n    <TabContentLayout startIcon={icon} title={title} endIcon={closeButton} />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\n\ninterface EditorTabContentProps {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button, shown in place of \"pin\" button if not pinned. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <EditorTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  closeButton,\n  onUnpin,\n  pinned,\n  containerProps,\n}: EditorTabContentProps) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <TooltipTrigger tooltip={<ActionTooltip actionName=\"Unpin Tab\" />}>\n            <BareButton onPress={onUnpin}>\n              <PlatformIcon icon=\"actions/pinTab\" />\n            </BareButton>\n          </TooltipTrigger>\n        ) : (\n          closeButton\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps = {} }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    // To allow tooltip be used easily. TooltipTrigger passes props via FocusableContext.\n    const { focusableProps } = useFocusable({}, useObjectRef(ref));\n    return (\n      <StyledTabItemLayout\n        {...mergeProps(focusableProps, containerProps)}\n        ref={ref}\n      >\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { useEffect } from \"react\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  intersectionObserver: IntersectionObserver | null;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = <T extends object>({\n  state,\n  item,\n  focusable,\n  active,\n  Component = StyledDefaultTab,\n  intersectionObserver,\n}: TabProps<T>): React.ReactElement => {\n  const { key, rendered } = item;\n  const ref = React.useRef(null);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab({ key }, state, ref);\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n  useIntersectionObserver(ref, intersectionObserver);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n};\n\nfunction useIntersectionObserver(\n  ref: React.MutableRefObject<null>,\n  intersectionObserver: IntersectionObserver | null\n) {\n  useEffect(() => {\n    const element = ref.current;\n    if (element) {\n      intersectionObserver?.observe(element);\n      return () => {\n        intersectionObserver?.unobserve(element);\n      };\n    }\n  }, [intersectionObserver]);\n}\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useCollectionOverflowObserver } from \"./useCollectionOverflowObserver\";\nimport { useIsScrolled } from \"./useIsScrolled\";\nimport { styled, css } from \"@intellij-platform/core/styled\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n *  - FIX: When a tab that was not selected is removed, selection should not change. It now changes to the tab before the removed one.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, isScrolled } = useIsScrolled({ ref });\n  const {\n    overflowedKeys,\n    intersectionObserver,\n  } = useCollectionOverflowObserver(ref);\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={isScrolled.left}\n        hasOverflowAtEnd={isScrolled.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              active={active}\n              Component={TabComponent}\n              intersectionObserver={intersectionObserver}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useIsScrolled<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [isScrolled, setIsScrolled] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newIsScrolled = {\n        top: offsetTop >= threshold,\n        bottom: offsetBottom >= threshold,\n        left: offsetLeft >= threshold,\n        right: offsetRight >= threshold,\n      };\n      if (\n        isScrolled.top !== isScrolled.top ||\n        isScrolled.bottom !== newIsScrolled.bottom ||\n        isScrolled.left !== newIsScrolled.left ||\n        isScrolled.right !== newIsScrolled.right\n      ) {\n        setIsScrolled(newIsScrolled);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    isScrolled,\n  };\n}\n","import { Key, RefObject, useEffect, useState } from \"react\";\n\n/**\n * Given a ref to a scrollable container of collection items, returns the keys that are not completely visible and\n * are off view because of scroll. It relies on data-key property of observed elements.\n * @param scrollableItemsContainerRef\n * @param threshold\n */\nexport function useCollectionOverflowObserver(\n  scrollableItemsContainerRef: RefObject<HTMLElement>,\n  { threshold = 0.9 }: { threshold?: number } = {}\n) {\n  const [\n    intersectionObserver,\n    setIntersectionObserver,\n  ] = useState<IntersectionObserver | null>(null);\n  const [overflowedKeys, setOverflowedKeys] = useState<Set<Key>>(new Set());\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        const newHiddenKeys = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof HTMLElement\n              ? entry.target.dataset.key\n              : undefined\n          )\n          .filter<string>((val): val is string => Boolean(val));\n        const newVisibleKeys = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof HTMLElement\n              ? entry.target.dataset.key\n              : null\n          )\n          .filter<string>((val): val is string => Boolean(val));\n\n        setOverflowedKeys(\n          (currentOverflowMenuKeys) =>\n            new Set(\n              [...currentOverflowMenuKeys]\n                .filter((key) => !newVisibleKeys.includes(`${key}`))\n                .concat(newHiddenKeys)\n            )\n        );\n      },\n      {\n        root: scrollableItemsContainerRef.current,\n        rootMargin: \"0px\",\n        threshold,\n      }\n    );\n    setIntersectionObserver(observer);\n    return () => {\n      observer.disconnect();\n    };\n  }, []);\n\n  return {\n    intersectionObserver,\n    overflowedKeys,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { ActionButton } from \"@intellij-platform/core/ActionButton/ActionButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [\n            ...collection,\n          ].filter((menuItem) => overflowedKeys.has(menuItem.key));\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <ActionButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </ActionButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n  />\n);\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionTooltipProps {\n  actionName: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action\"\n * @see {@link ActionHelpTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionTooltip = ({\n  actionName,\n  shortcut,\n}: ActionTooltipProps): JSX.Element => {\n  return (\n    <Tooltip>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n    </Tooltip>\n  );\n};\n","import React, { ForwardedRef, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n}\n\nconst StyledTooltip = styled.div<{ multiline?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${({ theme }) =>\n    theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\")};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\")\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\")};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") ? \"1px\" : \"0px\"};\n  border-color: ${({ theme }) =>\n    theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\")};\n  ${WINDOW_SHADOW};\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { state, isInteractive } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  return (\n    <StyledTooltip multiline={multiline} {...tooltipProps} ref={ref}>\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React from \"react\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\n\ninterface TooltipContextObject {\n  state: TooltipTriggerState;\n  isInteractive: boolean;\n}\n\nexport const TooltipContext = React.createContext<TooltipContextObject | null>(\n  null\n);\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  TooltipTriggerProps as AriaTooltipTriggerProps,\n  useTooltipTrigger as useAriaTooltipTrigger,\n} from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { OverlayContainer } from \"@react-aria/overlays\";\nimport { mergeProps, useLayoutEffect } from \"@react-aria/utils\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { TooltipContext } from \"@intellij-platform/core/Tooltip/TooltipContext\";\n\ninterface TooltipTriggerProps\n  extends Omit<AriaTooltipTriggerProps, \"isOpen\" | \"defaultOpen\" | \"trigger\"> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}.\n * Showing tooltip on focus and controlled open state are not supported at the moment, based on how tooltip works in the\n * reference impl. This may be revisited in the future.\n *\n * TODO: Implement timeout-based auto-hide (https://jetbrains.github.io/ui/controls/tooltip/#19)\n * TODO: HelpTooltip implements different types of Alignment, one of which is \"Cursor\". Maybe we can do the same. It may\n *   also help with the challenges in supporting \"tooltip on focus\" and \"controlled state\".\n */\nexport const TooltipTrigger = ({\n  tooltip,\n  children,\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const theme = useTheme();\n  const state = useTooltipTriggerState({\n    ...props,\n  });\n\n  const triggerRef = useRef<HTMLElement>(null);\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  const [isInteractive, setInteractive] = useState(false);\n  const {\n    /**\n     * onMouseDown is preventDefault-ed which interferes with functionality of the tooltip trigger, in use cases like\n     * tool window stripe button. Note that since pointerDown is handled for calling the tooltip trigger's onPressStart\n     * handler (which hides the tooltip), there is no issue in excluding onMouseDown, because it's only used to preventDefault\n     * the event, because of some edge cases focus handling which is not our concern.\n     */\n    triggerProps: { onMouseDown, ...triggerProps },\n    tooltipProps,\n  } = useTooltipTrigger(\n    props,\n    // In Intellij Platform. The tooltip hides right away. We follow the same, unless the tooltip is interactive.\n    // Maybe something to rethink if it's worth following the reference impl for.\n    { ...state, close: isInteractive ? state.close : () => state.close(true) },\n    triggerRef\n  );\n  const { overlayProps } = useMouseEventOverlayPosition({\n    overlayRef,\n    // targetRef: triggerRef,\n    isOpen: state.isOpen,\n    placement: \"bottom left\",\n    shouldFlip: true,\n    offset: theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20,\n  });\n  useLayoutEffect(() => {\n    setInteractive(\n      overlayRef.current?.querySelector(\n        'a, button, [role=\"button\"], [role=link]'\n      ) !== null\n    );\n  });\n  return (\n    <>\n      {normalizeChildren(children, { ...triggerProps, ref: triggerRef })}\n      {state.isOpen && (\n        <OverlayContainer>\n          <TooltipContext.Provider value={{ state, isInteractive }}>\n            <div\n              {...mergeProps(\n                overlayProps,\n                // Not sure if it's ok to apply tooltip props on this wrapper, but it probably is.\n                tooltipProps\n              )}\n              ref={overlayRef}\n            >\n              {tooltip}\n            </div>\n          </TooltipContext.Provider>\n        </OverlayContainer>\n      )}\n    </>\n  );\n};\n\nfunction normalizeChildren(\n  children: Pick<TooltipTriggerProps, \"children\">[\"children\"],\n  triggerProps: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n) {\n  if (typeof children === \"function\") {\n    return children(triggerProps);\n  }\n  if (React.isValidElement(children) && typeof children.type === \"string\") {\n    return React.cloneElement(children, triggerProps);\n  }\n  return <FocusableProvider {...triggerProps}>{children}</FocusableProvider>;\n}\n\n/**\n * A wrapper around react-aria's useTooltipTrigger, adjusting it for Intellij Platform.\n */\nconst useTooltipTrigger: typeof useAriaTooltipTrigger = (props, state, ref) => {\n  const {\n    /**\n     * Excluding onFocus, because in the original impl, tooltip is not shown upon focus. It's probably nicer to have\n     * the tooltip shown on focused tho, and it's something to revisit in the future.\n     * If we want to support showing tooltip on focus, or if we want to allow controlled open state, we should let it\n     * be positioned by the trigger element in that case, rather than mouse position.\n     * One solution would be to use useOverlayPosition as well, and conditionally use the right `overlayProps`, based on\n     * whether the position determined by mouse is within `triggerRef.current?.getBoundingClientRect()`. Another way\n     * (maybe better) would be to have `useMouseEventOverlayPosition` accept `bounds` or `containerBounds`, which if\n     * passed, makes sure the position is kept within that boundary. Outside positions would be mapped to the closest\n     * point on the border of the boundary.\n     */\n    triggerProps: { onFocus, ...triggerProps },\n    tooltipProps,\n  } = useAriaTooltipTrigger(props, state, ref);\n  // onPointerDown returned from the underlying usePress stops propagation which messes with some usages of tooltip\n  // like in tab or tool window stripe button. We replace onPointerDown handler with a similar handler that closes\n  // the tooltip.\n  triggerProps.onPointerDown = () => {\n    state.close(true);\n  };\n  return {\n    triggerProps,\n    tooltipProps,\n  };\n};\n","/* eslint-disable */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n//@ts-nocheck\n\n/**\n * IMPORTANT: this is coppied from react spectrum, temporarily until,\n * https://github.com/adobe/react-spectrum/issues/1525 is fixed. Any version above 3.1.3 should be\n * sufficient to remove this copy and use the one from @react-stately/tree\n */\n\nimport {\n  Collection,\n  CollectionBase,\n  Expandable,\n  MultipleSelection,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeRef, useTreeRef } from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport {\n  SelectionManager,\n  useMultipleSelectionState,\n} from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n}\n\nexport interface TreeProps<T>\n  extends CollectionBase<T>,\n    Expandable,\n    MultipleSelection,\n    CollectionCacheInvalidationProps {}\nexport interface TreeState<T> {\n  /** A collection of items in the tree. */\n  readonly collection: Collection<Node<T>>;\n\n  /** A set of keys for items that are disabled. */\n  readonly disabledKeys: Set<Key>;\n\n  /** A set of keys for items that are expanded. */\n  readonly expandedKeys: Set<Key>;\n\n  /** Toggles the expanded state for an item by its key. */\n  toggleKey(key: Key): void;\n\n  /** A selection manager to read and update multiple selection state. */\n  readonly selectionManager: SelectionManager;\n}\n\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n */\nexport function useTreeState<T extends object, C>(\n  props: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRef>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? props.expandedKeys : undefined,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  let tree = useCollection(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const onToggle = (key: Key) => {\n    setExpandedKeys((expandedKeys) => {\n      const newKeys = toggleKey(expandedKeys, key);\n      // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n      // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n      for (const aKey of newKeys) {\n        if (tree.getItem(aKey) == null) {\n          newKeys.delete(aKey);\n        }\n      }\n\n      // If we are toggling it open, expand all expandable single-child items\n      if (newKeys.has(key)) {\n        for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n          newKeys.add(aKey);\n        }\n      }\n      return newKeys;\n    });\n  };\n\n  const selectionManager = new SelectionManager(tree, selectionState);\n\n  useTreeRef({ selectionManager }, treeRef);\n\n  return {\n    collection: tree,\n    expandedKeys,\n    disabledKeys,\n    toggleKey: onToggle,\n    selectionManager,\n  };\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n\nconst isExpandable = (node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction getSingleChildrenKeys<T>(node: Node<T> | null | undefined): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n) {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport interface TreeRef {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef(\n  props: { selectionManager: SelectionManager },\n  forwardedRef?: ForwardedRef<TreeRef>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n      };\n    },\n    []\n  );\n}\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled = styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme = styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer = styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<{ focus: () => void }>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: () => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  ref.current = value;\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos = { x: 0, y: 0 };\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = (e) => {\n        lastMouseClientPos = { x: e.clientX, y: e.clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (options.isOpen && targetRef.current) {\n      targetRef.current.style.left = `${lastMouseClientPos.x}px`;\n      targetRef.current.style.top = `${lastMouseClientPos.y}px`;\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e?: React.MouseEvent) => {\n      if (targetRef.current && e) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import React from \"react\";\n\n/**\n * To make relation between things in jui and original reference impl in Intellij Platform\n */\nexport const RefToIntellijPlatform = ({\n  path,\n  name,\n}: {\n  path: string;\n  name?: string;\n}) => {\n  return (\n    // TODO: make it some nice box with an icon and a hint text which says something like \"Intellij Platform\" or\n    //  \"Reference\" or something better :D\n    <a\n      href={`https://github.com/JetBrains/intellij-community/blob/master/${path}`}\n      target=\"_blank\"\n    >\n      {name || path.split(\"/\").pop()}\n    </a>\n  );\n};\n","import { Meta } from \"@storybook/react\";\nimport { PlatformIcon } from \"../Icon\";\nimport { DebuggerTabContent } from \"./DebuggerTabs/DebuggerTabContent\";\nimport { EditorTabContent } from \"./EditorTabs/EditorTabContent\";\nimport { EditorTabs, EditorTabsProps } from \"./EditorTabs/EditorTabs\";\nimport { DebuggerTabs } from \"./DebuggerTabs/DebuggerTabs\";\nimport { Tabs, TabsProps } from \"./Tabs\";\nimport { TabContentLayout } from \"./TabContentLayout\";\nimport { ToolWindowTabs } from \"./ToolWindowTabs/ToolWindowTabs\";\nimport React from \"react\";\nimport { Item } from \"../Collections\";\n\ntype StoryProps<T extends TabsProps<unknown> = TabsProps<unknown>> = Pick<\n  T,\n  \"active\" | \"defaultSelectedKey\"\n>;\n\nexport default {\n  title: \"Components/Tabs/Tab Themes\",\n  component: Tabs,\n  parameters: {\n    controls: { exclude: \"TabComponent\" },\n  },\n} as Meta;\n\nexport const EditorTheme: React.FC<StoryProps<EditorTabsProps<any>>> = (\n  props\n) => {\n  return (\n    <EditorTabs {...props} items={editorTabs} active>\n      {(tab: typeof editorTabs[number]) => (\n        <Item key={tab.title} textValue={tab.title}>\n          <EditorTabContent\n            icon={<PlatformIcon icon={tab.icon} />}\n            title={tab.title}\n            pinned={tab.pinned}\n          />\n        </Item>\n      )}\n    </EditorTabs>\n  );\n};\nexport const DebuggerTheme: React.FC<StoryProps> = (props) => {\n  return (\n    <DebuggerTabs {...props} items={debuggerTabs}>\n      {(tab: typeof debuggerTabs[number]) => (\n        <Item key={tab.title} textValue={tab.title}>\n          <DebuggerTabContent\n            icon={tab.icon && <PlatformIcon icon={tab.icon} />}\n            title={tab.title}\n          />\n        </Item>\n      )}\n    </DebuggerTabs>\n  );\n};\nexport const ToolWindowTheme: React.FC<StoryProps> = (props) => {\n  return (\n    <ToolWindowTabs {...props} items={toolWindowTabs}>\n      {(tab: typeof toolWindowTabs[number]) => (\n        <Item key={tab.title} textValue={tab.title}>\n          <TabContentLayout\n            startIcon={<PlatformIcon icon={tab.icon} />}\n            title={tab.title}\n          />\n        </Item>\n      )}\n    </ToolWindowTabs>\n  );\n};\nconst editorTabs = [\n  {\n    title: \"Tabs.tsx\",\n    pinned: true,\n    icon: \"fileTypes/javaScript\",\n  },\n  {\n    title: \"Tabs.stories.tsx\",\n    pinned: false,\n    icon: \"fileTypes/javaScript\",\n  },\n  {\n    title: \"index.ts\",\n    pinned: false,\n    icon: \"fileTypes/javaScript\",\n  },\n  {\n    title: \"Tabs.test.ts\",\n    pinned: false,\n    icon: \"fileTypes/javaScript\",\n  },\n];\nconst toolWindowTabs = [\n  {\n    title: \"Project\",\n    icon: \"nodes/project\",\n  },\n  {\n    title: \"Project Files\",\n    icon: \"nodes/folder\",\n  },\n  {\n    title: \"Tests\",\n    icon: \"scope/tests\",\n  },\n];\nconst debuggerTabs = [\n  {\n    title: \"Console\",\n    icon: \"debugger/console\",\n  },\n  {\n    title: \"Frames\",\n    icon: null,\n  },\n  {\n    title: \"Variables | Coroutines | idea.log\",\n    icon: null,\n  },\n];\n","import { Meta, StoryFn } from \"@storybook/react\";\nimport { MenuItemLayout, PlatformIcon } from \"@intellij-platform/core\";\nimport React from \"react\";\nimport { TabContentLayout, TabItem, TabsProps } from \".\";\nimport { Tabs } from \"./Tabs\";\nimport { DOMProps } from \"@react-types/shared\";\n\ntype StoryProps<T extends TabsProps<unknown> = TabsProps<unknown>> = Pick<\n  T,\n  | \"active\"\n  | \"focusable\"\n  | \"defaultSelectedKey\"\n  | \"multiRow\"\n  | \"noOverflowMenu\"\n  | \"noBorders\"\n  | keyof DOMProps\n>;\n\nexport default {\n  title: \"Components/Tabs\",\n  component: Tabs,\n  parameters: {\n    controls: { exclude: \"TabComponent\" },\n  },\n} as Meta;\n\nexport const StaticItems: StoryFn<StoryProps> = (props) => {\n  return (\n    <Tabs {...props}>\n      <TabItem>Tab 1</TabItem>\n      <TabItem>Tab 2</TabItem>\n      <TabItem>Tab 3</TabItem>\n    </Tabs>\n  );\n};\n\nexport const DynamicItems = (props: StoryProps) => {\n  return (\n    <Tabs\n      {...props}\n      items={[\"Tab 1\", \"Tab 2\", \"Tab 3\"].map((title) => ({ title }))}\n    >\n      {({ title }: { title: string }) => <TabItem key={title}>{title}</TabItem>}\n    </Tabs>\n  );\n};\n\nexport const Overflow: StoryFn<StoryProps & { maxWidth: number }> = ({\n  maxWidth = 800,\n  ...props\n}) => {\n  const tabs = Array(10)\n    .fill(null)\n    .map((_, index) => ({\n      title: `Big tab title #${index}`,\n      icon: \"nodes/folder\",\n    }));\n  return (\n    <div style={{ maxWidth }}>\n      <Tabs {...props} items={tabs}>\n        {(tab) => {\n          const icon = <PlatformIcon icon={tab.icon} />;\n          return (\n            <TabItem\n              key={tab.title}\n              textValue={tab.title}\n              inOverflowMenu={\n                <MenuItemLayout content={tab.title} icon={icon} />\n              }\n            >\n              <TabContentLayout startIcon={icon} title={tab.title} />\n            </TabItem>\n          );\n        }}\n      </Tabs>\n    </div>\n  );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Tabs';\nexport const metadata = {\n  \"unversionedId\": \"components/Tabs\",\n  \"id\": \"components/Tabs\",\n  \"title\": \"Tabs\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Tabs.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Tabs\",\n  \"permalink\": \"/jui/docs/components/Tabs\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Tabs.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"StatusBar\",\n    \"permalink\": \"/jui/docs/components/StatusBar\"\n  },\n  \"next\": {\n    \"title\": \"ToolWindows\",\n    \"permalink\": \"/jui/docs/components/ToolWindows\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"@site/src/components/RefToIntellijPlatform.tsx\";\nimport {\n  EditorTheme,\n  DebuggerTheme,\n  ToolWindowTheme,\n} from \"@intellij-platform/core/Tabs/3-TabThemes.stories\";\nimport { Overflow } from \"@intellij-platform/core/Tabs/2-Tabs.stories\";\nimport { Example } from \"@site/src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'Simple usage',\n  id: 'simple-usage',\n  level: 2\n}, {\n  value: 'Overflow behavior',\n  id: 'overflow-behavior',\n  level: 2\n}, {\n  value: 'Customization',\n  id: 'customization',\n  level: 2\n}, {\n  value: 'Editor Theme',\n  id: 'editor-theme',\n  level: 3\n}, {\n  value: 'Debugger Theme',\n  id: 'debugger-theme',\n  level: 3\n}, {\n  value: 'Tool Window Theme',\n  id: 'tool-window-theme',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"tabs\"\n    }}>{`Tabs`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Fully customizable and themeable`}</li>\n      <li parentName=\"ul\">{`Support for different ways of handling overflow`}</li>\n      <li parentName=\"ul\">{`Default tab themes, with support for icon, close button and pinned tabs.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`drag and drop`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"simple-usage\"\n    }}>{`Simple usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<Tabs>\n  <Item>Tab 1</Item>\n  <Item>Tab 2</Item>\n  <Item>Tab 3</Item>\n</Tabs>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overflow-behavior\"\n    }}>{`Overflow behavior`}</h2>\n    <p>{`There are a few was of handling the overflow, when there is not enough space for showing all tabs. By default tabs will\nscroll horizontally and a small arrow down icon button is added next to the tabs which opens an overflow menu for the\ntabs that are not fully visible, based on the current scroll position.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-tip alert alert--success\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"12\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 12 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"\n              }}></path></svg></span>{`tip`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Use `}<inlineCode parentName=\"p\">{`TabItem`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` to specify via `}<inlineCode parentName=\"p\">{`inOverflowMenu`}</inlineCode>{` prop, a different react node to be shown when the tab\nis rendered in the overflow menu.`}</p></div></div>\n    <Example mdxType=\"Example\">\n  <Overflow maxWidth={1800} mdxType=\"Overflow\" />\n    </Example>\n    <br />\n    <p>{`Overflow menu can be disabled via `}<inlineCode parentName=\"p\">{`noOverflow`}</inlineCode>{` prop:`}</p>\n    <Example mdxType=\"Example\">\n  <Overflow maxWidth={1800} noOverflowMenu mdxType=\"Overflow\" />\n    </Example>\n    <br />\n    <p>{`Horizontal scroll can be disabled via `}<inlineCode parentName=\"p\">{`noScroll`}</inlineCode>{` prop. If overflow is also disabled, tabs will be shrunk to fit\nthe available space.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-warning alert alert--danger\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"12\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 12 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z\"\n              }}></path></svg></span>{`warning`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Support for `}<inlineCode parentName=\"p\">{`noScroll`}</inlineCode>{` is under development.`}</p></div></div>\n    <h2 {...{\n      \"id\": \"customization\"\n    }}>{`Customization`}</h2>\n    <p><inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{` component allows for `}<inlineCode parentName=\"p\">{`TabsComponent`}</inlineCode>{` (the container) and `}<inlineCode parentName=\"p\">{`TabComponent`}</inlineCode>{` to allow for customizing look and feel.\nBy default `}<inlineCode parentName=\"p\">{`StyledDefaultTabs`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`StyledDefaultTab`}</inlineCode>{` are used. The following variations are a thin wrapper around\n`}<inlineCode parentName=\"p\">{`Tabs`}</inlineCode>{`, which use those two props. They also expose a customized version of `}<inlineCode parentName=\"p\">{`TabContentLayout`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"editor-theme\"\n    }}>{`Editor Theme`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`EditorTabs`}</inlineCode>{` together with `}<inlineCode parentName=\"p\">{`EditorTabContent`}</inlineCode>{` for editor tab style.`}</p>\n    <Example mdxType=\"Example\">\n  <EditorTheme mdxType=\"EditorTheme\" />\n    </Example>\n    <h3 {...{\n      \"id\": \"debugger-theme\"\n    }}>{`Debugger Theme`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`DebuggerTabs`}</inlineCode>{` together with `}<inlineCode parentName=\"p\">{`DebuggerTabContent`}</inlineCode>{` for editor tab style.`}</p>\n    <Example mdxType=\"Example\">\n  <DebuggerTheme mdxType=\"DebuggerTheme\" />\n    </Example>\n    <h3 {...{\n      \"id\": \"tool-window-theme\"\n    }}>{`Tool Window Theme`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`ToolWindowTabs`}</inlineCode>{` together with the default `}<inlineCode parentName=\"p\">{`TabContentLayout`}</inlineCode>{` for editor tab style.`}</p>\n    <Example mdxType=\"Example\">\n  <ToolWindowTheme mdxType=\"ToolWindowTheme\" />\n    </Example>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n","export default function _taggedTemplateLiteralLoose(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  strings.raw = raw;\n  return strings;\n}"],"names":["DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","StyledActionButton","styled","minSize","theme","color","ActionButton","React","forwardedRef","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","isDisabled","onPress","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","otherProps","ref","useObjectRef","focusableProps","useFocusable","pressProps","usePress","className","disabled","mergeProps","tabIndex","undefined","BareButton","props","buttonProps","useButton","domProps","filterDOMProps","autoFocus","children","Item","_Item","getCollectionNode","context","result","StatelyItem","next","value","originalShouldInvalidate","shouldInvalidate","invalidated","ItemStateContext","LafIcon","themePath","icon","size","resolvedIconPath","iconDescriptor","useTheme","resolvedValue","modifiers","name","isUnderDarcula","reduce","soFar","modifier","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","amendName","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","PlatformIcon","darkIcon","iconName","dark","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","itemState","useContext","selected","isSelected","isFocused","useEffect","unmounted","async","console","error","current","dataset","loadingIcon","svg","getSvgIcon","catch","e","querySelector","remove","svgElement","document","createElement","appendChild","outerHTML","fetchIcon","ListDivider","as","useSeparator","orientation","StyledMenu","WINDOW_SHADOW","StyledVerticalSeparator","StyledMenuItem","isActive","css","StyledNestedArrow","StyledSelectedMark","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItem","item","state","onAction","expandOn","nestedMenuRef","disabledKeys","has","key","isExpanded","expandedKeys","selectionManager","selectedKeys","focusedKey","menuItemProps","useMenuItem","hasChildNodes","maybeOpenSubmenu","forEach","toggleKey","hoverProps","useHover","onHoverStart","keyboardProps","useKeyboard","onKeyDown","includes","continuePropagation","overlayProps","positionProps","useOverlayPosition","targetRef","overlayRef","placement","shouldFlip","onClose","log","offset","crossOffset","isOpen","subMenuProps","useSubmenu","focus","Selected","node","rendered","FocusScope","Menu","textValue","items","childNodes","childItem","childItems","hasChildItems","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","itemProps","headingProps","groupProps","useMenuSection","heading","map","MenuOverlayContext","close","args","Error","useTreeState","expandedKey","onExpandedChange","firstKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","menuProps","useMenu","setTimeout","collection","type","StyledMenuItemLayout","Content","Icon","Shortcut","MenuItemLayout","content","shortcut","useContextOrThrow","MenuOverlay","restoreFocus","forceRestoreFocus","MenuTrigger","renderMenu","direction","align","menuTriggerProps","useMenuTriggerState","triggerRef","triggerProps","useMenuTrigger","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","element","matches","getPlacement","containerPadding","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundColor","backgroundClip","boxSizing","margin","border","flexShrink","StyledHorizontalSeparator","DebuggerTabContent","title","closeButton","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","containerProps","tooltip","actionName","editorTabTheme","borderColor","background","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","commonColors","contrastBorder","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabContentLayout","TabItem","active","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","Component","intersectionObserver","tabProps","useTab","selectedKey","observe","unobserve","useIntersectionObserver","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","isScrolled","threshold","setIsScrolled","useState","left","right","top","bottom","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetWidth","offsetTop","scrollTop","offsetBottom","scrollHeight","offsetHeight","newIsScrolled","onScroll","useIsScrolled","overflowedKeys","scrollableItemsContainerRef","setIntersectionObserver","setOverflowedKeys","Set","observer","IntersectionObserver","entries","newHiddenKeys","entry","isIntersecting","target","HTMLElement","filter","val","Boolean","newVisibleKeys","currentOverflowMenuKeys","concat","root","rootMargin","disconnect","useCollectionOverflowObserver","scrollableContainer","selectedTabElement","scrollIntoView","style","minWidth","TabsOverflowMenu","onSelect","setSelectedKey","menuItem","inOverflowMenu","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","ActionTooltip","StyledTooltip","multiline","inset","StyledShortcut","StyledHeader","fontSizeDelta","StyledDescription","contextHelpForeground","StyledLink","linkForegroundEnabled","Tooltip","isInteractive","TooltipContext","tooltipProps","useTooltip","open","_Tooltip","Object","assign","Header","Description","Link","TooltipTrigger","useTooltipTriggerState","useRef","setInteractive","onMouseDown","useTooltipTrigger","useMouseEventOverlayPosition","useLayoutEffect","normalizeChildren","onFocus","useAriaTooltipTrigger","onPointerDown","Symbol","iterator","TreeCollection","constructor","nodes","keyMap","Map","iterable","lastKey","this","last","visit","set","child","index","nextKey","prevKey","getKeys","keys","getKeyBefore","get","getKeyAfter","getFirstKey","getLastKey","getItem","treeRef","setExpandedKeys","useControlledState","selectionState","useMultipleSelectionState","selectionBehavior","useMemo","cacheInvalidation","invalidators","lastInvalidators","usePrevious","length","some","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","setFocusedKey","SelectionManager","useTreeRef","newKeys","res","delete","add","aKey","getSingleChildrenKeysRecursive","previousKeys","childNodesIterator","firstChild","done","noMoreChildren","_","isEmptyIterable","isExpandable","latestState","useLatest","useImperativeHandle","replaceSelection","setFocused","styledComponents","ThemeConsumer","directChildRef","focusManagerRef","nodeToRestore","activeElement","requestAnimationFrame","body","contains","focusSafely","focusManager","containerElement","parentElement","focusNext","tabbable","GetFocusManager","hidden","useFocusManager","Context","nullErrorMessage","innerRef","globalMoveHandler","lastMouseClientPos","x","y","options","clientX","clientY","addEventListener","fakeTarget","width","height","pointerEvents","position","visibility","updatePosition","RefToIntellijPlatform","href","pop","EditorTheme","editorTabs","tab","DebuggerTheme","debuggerTabs","ToolWindowTheme","toolWindowTabs","Overflow","maxWidth","tabs","Array","fill","frontMatter","contentTitle","metadata","assets","toc","id","level","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent","_taggedTemplateLiteralLoose","strings","raw","slice"],"sourceRoot":""}