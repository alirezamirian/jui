{"version":3,"file":"assets/js/d87247ba.b51c2140.js","mappings":"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","sources":["webpack://website/../jui/src/ActionSystem/ActionGroup.tsx","webpack://website/../jui/src/ActionSystem/ActionShortcut.tsx","webpack://website/../jui/src/ActionSystem/useShortcut.ts","webpack://website/../jui/src/ActionSystem/ActionsProvider.tsx","webpack://website/../jui/src/ActionSystem/CommonActionIds.ts","webpack://website/../jui/src/ActionSystem/KeymapProvider.tsx","webpack://website/../jui/src/ActionSystem/Shortcut.ts","webpack://website/../jui/src/ActionSystem/components/ActionButton.tsx","webpack://website/../jui/src/ActionSystem/components/ActionGroupMenu.tsx","webpack://website/../jui/src/ActionSystem/components/ActionsMenu.tsx","webpack://website/../jui/src/ActionSystem/components/useCreateDefaultActionGroup.tsx","webpack://website/../jui/src/ActionSystem/defaultKeymap.tsx","webpack://website/../jui/src/ActionSystem/shortcutToString.ts","webpack://website/../jui/src/ActionSystem/useActionGroup.tsx","webpack://website/../jui/src/AlertDialog/AlertDialog.tsx","webpack://website/../jui/src/AlertDialog/useAlertDialog.tsx","webpack://website/../jui/src/Balloon/Balloon.styled.tsx","webpack://website/../jui/src/Balloon/Balloon.tsx","webpack://website/../jui/src/Balloon/BalloonManager.tsx","webpack://website/../jui/src/Balloon/StyledBalloonsStack.tsx","webpack://website/../jui/src/Button/BareButton.tsx","webpack://website/../jui/src/Button/StyledButton.tsx","webpack://website/../jui/src/Button/Button.tsx","webpack://website/../jui/src/Checkbox/Checkbox.tsx","webpack://website/../jui/src/Checkbox/CheckboxIcon.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemLayout.tsx","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Collections/useCollectionRef.ts","webpack://website/../jui/src/Collections/useCollectionSearchInput.ts","webpack://website/../jui/src/Icon/AutoHoverPlatformIcon.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/IconButton/IconButton.tsx","webpack://website/../jui/src/IconButtonWithMenu/IconButtonWithMenu.tsx","webpack://website/../jui/src/Img.tsx","webpack://website/../jui/src/InputField/Input.tsx","webpack://website/../jui/src/Label/StyledLabel.ts","webpack://website/../jui/src/InputField/InputField.tsx","webpack://website/../jui/src/Link/StyledLink.tsx","webpack://website/../jui/src/Link/Link.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListContext.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/renderWrapper.tsx","webpack://website/../jui/src/List/useListVirtualizer.tsx","webpack://website/../jui/src/Menu/ContextMenuContainer.tsx","webpack://website/../jui/src/Menu/useContextMenu.tsx","webpack://website/../jui/src/Collections/patchCollectionProps.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/Menu/SpeedSearchMenu.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/Submenu.tsx","webpack://website/../jui/src/Menu/_useSubmenu.ts","webpack://website/../jui/src/Menu/_useSubmenuState.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/renderMenuNodes.tsx","webpack://website/../jui/src/Overlay/UNSAFE_React17SuspenseFix.tsx","webpack://website/../jui/src/ModalWindow/ModalWindow.tsx","webpack://website/../jui/src/ModalWindow/WindowContext.ts","webpack://website/../jui/src/ModalWindow/WindowFooter.tsx","webpack://website/../jui/src/ModalWindow/WindowHeader.tsx","webpack://website/../jui/src/ModalWindow/WindowLayout.tsx","webpack://website/../jui/src/ModalWindow/WindowManager.tsx","webpack://website/../jui/src/Overlay/Overlay.tsx","webpack://website/../jui/src/Overlay/OverlayInteractionHandler.tsx","webpack://website/../jui/src/Overlay/OverlayMoveHandle.tsx","webpack://website/../jui/src/Overlay/OverlayResizeHandles.tsx","webpack://website/../jui/src/Overlay/bounds-helpers.tsx","webpack://website/../jui/src/utils/useDebounce.ts","webpack://website/../jui/src/Overlay/useContentSize.tsx","webpack://website/../jui/src/Overlay/useResizableMovableOverlay.tsx","webpack://website/../jui/src/Popup/Popup.tsx","webpack://website/../jui/src/Popup/_useDialog.ts","webpack://website/../jui/src/utils/mergeNonNullProps.tsx","webpack://website/../jui/src/Popup/PopupContext.tsx","webpack://website/../jui/src/Popup/PopupHeader.tsx","webpack://website/../jui/src/Popup/PopupLayout.tsx","webpack://website/../jui/src/Popup/PopupManager.tsx","webpack://website/../jui/src/Popup/PopupTrigger.tsx","webpack://website/../jui/src/Popup/StyledPopupHint.tsx","webpack://website/../jui/src/ProgressBar/ProgressBar.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarStopButton.tsx","webpack://website/../jui/src/ResizableView.tsx","webpack://website/../jui/src/Resizer/BottomResizer.tsx","webpack://website/../jui/src/Resizer/HorizontalResizer.tsx","webpack://website/../jui/src/Resizer/LeftResizer.tsx","webpack://website/../jui/src/Resizer/RightResizer.tsx","webpack://website/../jui/src/Resizer/TopResizer.tsx","webpack://website/../jui/src/Resizer/VerticalResizer.tsx","webpack://website/../jui/src/Resizer/useResizer.ts","webpack://website/../jui/src/SearchInput/SearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StatusBar/StatusBar.tsx","webpack://website/../jui/src/StatusBar/StatusBarWidget.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabCloseButton.tsx","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useHasOverflow.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabContent.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Theme/parseColorString.ts","webpack://website/../jui/src/Theme/Color.ts","webpack://website/../jui/src/ThreeViewSplitter/ThreeViewSplitter.tsx","webpack://website/../jui/src/ToolWindows/FloatView.tsx","webpack://website/../jui/src/ToolWindows/FloatToolWindows.tsx","webpack://website/../jui/src/ToolWindows/MovableToolWindowStripeProvider.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowOuterLayout.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsLayoutState.ts","webpack://website/../jui/src/ToolWindows/createGetDropPosition.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripeButton.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/useElementMove.tsx","webpack://website/../jui/src/ToolWindows/findEffectiveBackgroundColor.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/UndockSide.tsx","webpack://website/../jui/src/ToolWindows/ToolWindows.tsx","webpack://website/../jui/src/ToolWindows/useOnFocusLost.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowStateProvider.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsState.ts","webpack://website/../jui/src/ToolWindows/utils.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowSettingsIconMenu.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowHeader.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowToolbarButton.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindows.tsx","webpack://website/../jui/src/ToolWindowsImpl/MultiViewToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowActionIds.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowActions.tsx","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowsActions.tsx","webpack://website/../jui/src/Toolbar/Toolbar.tsx","webpack://website/../jui/src/Tooltip/ActionHelpTooltip.tsx","webpack://website/../jui/src/Tooltip/ActionTooltip.tsx","webpack://website/../jui/src/Tooltip/HelpTooltip.tsx","webpack://website/../jui/src/Tooltip/PositionedTooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/Tooltip.tsx","webpack://website/../jui/src/Tooltip/TooltipContext.tsx","webpack://website/../jui/src/Tooltip/TooltipPointer.tsx","webpack://website/../jui/src/Tooltip/TooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/TooltipTriggerAndOverlay.tsx","webpack://website/../jui/src/Tooltip/ValidationTooltip.tsx","webpack://website/../jui/src/Tooltip/tooltip-styles.ts","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/StyledTreeNode.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Tree/__copied__TreeCollection.ts","webpack://website/../jui/src/Tree/getSingleChildrenKeys.ts","webpack://website/../jui/src/Tree/TreeSelectionManager.ts","webpack://website/../jui/src/Tree/useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/TreeActions/useTreeActions.tsx","webpack://website/../jui/src/TreeCheckboxes/NestedSelection.ts","webpack://website/../jui/src/TreeCheckboxes/SpeedSearchTreeWithCheckboxes.tsx","webpack://website/../jui/src/TreeCheckboxes/TreeNodeCheckbox.tsx","webpack://website/../jui/src/TreeCheckboxes/useNestedSelectionState.ts","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/selection/useSelectableItem.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/array-utils.ts","webpack://website/../jui/src/utils/interaction-utils/textSelection.ts","webpack://website/../jui/src/utils/interaction-utils/useMove.tsx","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/overflow-utils/OverflowObserver.ts","webpack://website/../jui/src/utils/overflow-utils/useOverflowObserver.tsx","webpack://website/../jui/src/utils/tree-utils.ts","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useEventCallback.ts","webpack://website/../jui/src/utils/useFocusForwarder.ts","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/src/utils/immutableSet.ts","webpack://website/../jui/src/utils/useSet.ts","webpack://website/./src/components/ApiDescription.tsx","webpack://website/./src/theme/CodeBlock/Expandable.tsx","webpack://website/./src/theme/CodeBlock/Playground.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchContainer.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContainer.tsx","webpack://website/../jui/src/List/SpeedSearchList/useSpeedSearchList.ts","webpack://website/../jui/src/List/SpeedSearchList/SpeedSearchList.tsx","webpack://website/../jui/src/Icon/StyledIconLiveIndicator.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearch.tsx","webpack://website/../jui/src/Tree/Tree.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarPauseButton.tsx","webpack://website/./src/theme/ReactLiveScope/index.js","webpack://website/./src/theme/Playground/style-overrides.module.css","webpack://website/./src/theme/CodeBlock/index.js","webpack://website/./docs/components/Toolbar.mdx"],"sourcesContent":["import {\n  Action,\n  ActionDefinition,\n} from \"@intellij-platform/core/ActionSystem/Action\";\n\nexport type ActionInResolvedGroup = Action & { parent: ResolvedActionGroup };\n\n/**\n * - `popup`: shown as submenu (isPopup property in ActionGroup in the reference impl)\n * - `section`: a section with divider, but without section title\n * - `titledSection`: a section with divider and title.\n */\ntype ActionGroupPresentation = \"section\" | \"titledSection\" | \"popup\";\n\nexport interface MutableActionGroup extends Action {\n  children: Action[];\n  /**\n   * Whether the action group is searchable. See {@link getAvailableActionsFor}.\n   */\n  isSearchable?: boolean;\n  /**\n   * How the action group should be rendered, in menus.\n   */\n  presentation?: ActionGroupPresentation;\n}\nexport type ActionGroup = Readonly<MutableActionGroup>;\n\nexport interface ResolvedActionGroup extends ActionGroup {\n  parent: ResolvedActionGroup | null;\n  children: ActionInResolvedGroup[];\n}\nexport interface ActionGroupDefinition extends ActionDefinition {\n  children: ActionDefinition[]; // Should DividerItem be supported first-class here?\n  /**\n   * If the action group should be rendered as a popup (submenu), in menus.\n   */\n  presentation?: ActionGroupPresentation;\n}\n\nexport function isInResolvedActionGroup(\n  action: Action\n): action is ActionInResolvedGroup {\n  return \"parent\" in action;\n}\nexport function isActionGroup(action: Action): action is ActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isResolvedActionGroup<T extends Action>(\n  action: Action\n): action is ResolvedActionGroup {\n  return \"children\" in action && \"parent\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isActionGroupDefinition(\n  action: ActionDefinition\n): action is ActionGroupDefinition {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n","import React from \"react\";\nimport { useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\n\n/**\n * Renders the first keyboard shortcut for the action specified by {@param actionId}, based on the keymap context.\n * if {@param children} is provided, treats it as a render function that receives the shortcut string.\n */\nexport const ActionShortcut = ({\n  actionId,\n  children,\n}: {\n  actionId: string;\n  children?: (shortcut: string) => React.ReactNode;\n}) => {\n  const getShortcut = useGetActionShortcut();\n  const shortcutString = getShortcut(actionId);\n  return (\n    <>\n      {shortcutString && (children ? children(shortcutString) : shortcutString)}\n    </>\n  );\n};\n\n/**\n * Returns a function that gets first keyboard shortcut for the action specified by `actionId`, based on the\n * keymap context.\n */\nexport const useGetActionShortcut = (): ((actionId: string) => string) => {\n  const keymap = useKeymap();\n  return (actionId: string) => {\n    const keyboardShortcut = keymap?.[actionId]?.find(\n      ({ type }) => type === \"keyboard\"\n    );\n    return keyboardShortcut ? shortcutToString(keyboardShortcut) : \"\";\n  };\n};\n","import React, { KeyboardEventHandler, useRef } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  isKeyboardShortcut,\n  KeyboardShortcut,\n  KeyStroke,\n  Shortcut,\n  supportedModifiers,\n} from \"./Shortcut\";\n\nexport function useShortcuts(\n  shortcuts: { [actionId: string]: ReadonlyArray<Shortcut> },\n  onAction: (\n    actionId: string,\n    args: {\n      event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n    }\n  ) => void | boolean,\n  {\n    useCapture = false,\n  }: {\n    /**\n     * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n     * a descendant element handles events in capture phase, and that conflicts with an action.\n     */\n    useCapture?: boolean;\n  } = {}\n) {\n  const firstKeyActivatedShortcutsRef = useRef<\n    Array<{ actionId: string; shortcut: KeyboardShortcut }>\n  >([]);\n  const secondStrokeResetTimerIdRef = useRef<number | null>(null);\n  const onKeyDown: KeyboardEventHandler<HTMLElement> = useEventCallback((e) => {\n    // TODO: repeated key downs can trigger an action repeatedly, in the original impl. Example: expand/shrink selection\n    if (isModifierOnly(e.nativeEvent) || e.repeat) {\n      return;\n    }\n    // firstKeyActivatedShortcutsRef will be re-adjusted in any case. Cleaning whatever scheduled reset\n    if (secondStrokeResetTimerIdRef.current !== null) {\n      window.clearTimeout(secondStrokeResetTimerIdRef.current);\n    }\n\n    function triggerAction(actionId: string) {\n      const result = onAction(actionId, { event: e });\n      if (result !== false) {\n        // TODO: make sure about how propagation should be stopped and/or controlled\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n    // If there are keyboard shortcuts that are half way handled (first keystroke triggered already, and we are within\n    // the valid wait for the second keystroke), they should be prioritized over first keystroke matching.\n    if (firstKeyActivatedShortcutsRef.current.length > 0) {\n      firstKeyActivatedShortcutsRef.current.some(({ shortcut, actionId }) => {\n        if (isKeyMatch(shortcut.secondKeyStroke, e, true)) {\n          triggerAction(actionId);\n          return true;\n        }\n      });\n      firstKeyActivatedShortcutsRef.current = [];\n    } else {\n      const firstKeyMatches = Object.entries(shortcuts)\n        .flatMap(([actionId, shortcuts]) =>\n          shortcuts.map((shortcut) => ({ actionId, shortcut }))\n        )\n        .filter(\n          (\n            input\n          ): input is {\n            actionId: string;\n            shortcut: KeyboardShortcut;\n          } => isKeyboardShortcut(input.shortcut)\n        )\n        .filter(({ shortcut }) => isKeyMatch(shortcut.firstKeyStroke, e));\n\n      firstKeyActivatedShortcutsRef.current = firstKeyMatches.filter(\n        ({ shortcut, actionId }) => shortcut.secondKeyStroke\n      );\n\n      if (firstKeyActivatedShortcutsRef.current.length > 0) {\n        secondStrokeResetTimerIdRef.current = window.setTimeout(() => {\n          firstKeyActivatedShortcutsRef.current = [];\n        }, 2000);\n        document.addEventListener(\n          \"keydown\",\n          () => {\n            document.addEventListener(\n              \"keyup\",\n              () => {\n                firstKeyActivatedShortcutsRef.current = [];\n              },\n              { once: true }\n            );\n          },\n          //  by passing capture: true, we skip the current keydown event, since it's already passed capture phase\n          { once: true, capture: true }\n        );\n      } else if (firstKeyMatches.length > 0) {\n        triggerAction(firstKeyMatches[0].actionId);\n      }\n    }\n  });\n  const shortcutHandlerProps = {\n    /**\n     * by setting onKeyDownCapture is set instead of onKeyDown, we can prioritize action event handler over\n     * component-specific handlers. That might be useful for some components that aggressively stop propagation of\n     * events they handle, if the action is considered of higher priority compared to the conflicting component-internal\n     * functionality. So maybe an option would be in order to define whether the shortcut's event handling should be done\n     * in capture or bubbling phase.\n     * Another thing to get clarified as action system is more used, is to decide if action handler should stop\n     * propagation or not. Or should it be an option?\n     * UPDATE: Added an option to determine whether event handling should be done in capture phase. The use case is\n     * \"Find in files\" action with Cmd+Shift+O shortcut, which overlaps with some action in Monaco editor (only in .ts\n     * files). Monaco uses capture phase, and stops propagation, so unless we use capture phase, useShortcut's event\n     * handler is never called.\n     * An apposite use case is in SpeedSearchTree in tool windows, where we want Escape to be handled by speed search,\n     * and propagation stopped, if speed search is currently active. The second Escape keystroke should move focus to\n     * the editor. That wouldn't work if we unconditionally handle events in capture phase.\n     */\n    [useCapture ? \"onKeyDownCapture\" : \"onKeyDown\"]: onKeyDown,\n  };\n  return { shortcutHandlerProps };\n}\n\nconst isKeyMatch = (\n  keyStroke: KeyStroke | undefined,\n  e: React.KeyboardEvent,\n  loose?: boolean\n) =>\n  e.code === keyStroke?.code &&\n  (loose ? keyStroke.modifiers || [] : supportedModifiers).every(\n    (modifier) =>\n      e.getModifierState(modifier) ===\n      Boolean(keyStroke.modifiers?.includes(modifier))\n  );\n\nfunction isModifierOnly(event: KeyboardEvent) {\n  return event.location === 1 || event.location === 2;\n}\n","import { sortBy } from \"ramda\";\nimport React, { HTMLAttributes, useContext, useEffect, useState } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { dfsVisit } from \"@intellij-platform/core/utils/tree-utils\";\n\nimport { Keymap, useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\nimport { useShortcuts } from \"./useShortcut\";\nimport {\n  ActionGroup,\n  ActionInResolvedGroup,\n  isActionGroup,\n  isActionGroupDefinition,\n  MutableActionGroup,\n} from \"./ActionGroup\";\nimport {\n  Action,\n  ActionContext,\n  ActionDefinition,\n  MutableAction,\n} from \"./Action\";\n\n/**\n * Represents the properties required for the ActionsProvider component.\n */\nexport interface ActionsProviderProps {\n  /**\n   * A collection of action definitions.\n   */\n  actions: ActionDefinition[];\n  children: (args: {\n    shortcutHandlerProps: HTMLAttributes<HTMLElement>;\n  }) => React.ReactElement;\n\n  /**\n   * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n   * a descendant element handles events in capture phase, and that conflicts with an action.\n   */\n  useCapture?: boolean;\n}\n\nconst ActionsContext = React.createContext<Action[]>([]);\n\nfunction generateId() {\n  return `jui-${Math.floor(Math.random() * 10000000)}`;\n}\n\nconst ACTION_PROVIDER_ID_ATTRIBUTE = \"data-action-provider\";\nconst ACTION_PROVIDER_ID_DATA_PREFIX = \"action_provider_id_\";\nconst actionProvidersMap = new Map<string, Action[]>();\n\n/**\n * Provides a set of actions for the wrapped UI. Uses the currently provided keymap to find the shortcuts\n * for each action, and passes the necessary event handlers for the shortcuts, to the `children` render function.\n *\n * @param {Array<Action>} props.actions - The actions to be provided.\n * @param {boolean} [props.useCapture] - Specifies whether to use capture phase for event handling.\n * @param {Function} props.children - Render function that accepts shortcutHandlerProps as argument.\n */\nexport function ActionsProvider(props: ActionsProviderProps): JSX.Element {\n  const parentContext = useContext(ActionsContext);\n  const keymap = useKeymap();\n  const actions: Action[] = [];\n  dfsVisit(\n    (action: Action | null) =>\n      action && isActionGroup(action) ? action.children : null,\n    (action) => actions.push(action),\n    recursivelyCreateActions(keymap, props.actions)\n  );\n\n  const shortcuts = Object.fromEntries(\n    actions.map((action) => [action.id, action.shortcuts || []])\n  );\n  const [actionProviderId] = useState(generateId);\n\n  const { shortcutHandlerProps } = useShortcuts(\n    shortcuts,\n    (actionId, { event }) => {\n      actions\n        .find((action) => action.id === actionId)\n        ?.perform({\n          event,\n          // it's important to use target and not currentTarget\n          element: event.target instanceof Element ? event.target : null,\n        });\n    },\n    { useCapture: props.useCapture }\n  );\n\n  const allActions = [...parentContext, ...actions]; // Maybe warn overrides?\n\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[ACTION_PROVIDER_ID_ATTRIBUTE] = actionProviderId;\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[\n    `data-${ACTION_PROVIDER_ID_DATA_PREFIX}${actionProviderId}`\n  ] = \"\";\n\n  useEffect(() => {\n    actionProvidersMap.set(actionProviderId, allActions);\n  });\n  useEffect(() => {\n    return () => {\n      actionProvidersMap.delete(actionProviderId);\n    };\n  }, []);\n  return (\n    <ActionsContext.Provider value={allActions}>\n      {props.children({ shortcutHandlerProps })}\n    </ActionsContext.Provider>\n  );\n}\n\nfunction isMutableActionGroup(\n  action: MutableAction\n): action is MutableActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent: ActionGroup\n): Array<ActionInResolvedGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[]\n): Array<Action | ActionGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent?: ActionGroup\n): Array<Action | ActionInResolvedGroup | ActionGroup> {\n  return actionDefinitions.map((actionDefinition: ActionDefinition): Action => {\n    const shortcuts =\n      keymap?.[actionDefinition.id] ??\n      (actionDefinition.useShortcutsOf\n        ? keymap?.[actionDefinition.useShortcutsOf]\n        : undefined);\n    const firstShortcut = shortcuts?.[0];\n    const action: MutableAction | ActionInResolvedGroup = {\n      ...actionDefinition,\n      ...(isActionGroupDefinition(actionDefinition)\n        ? { parent: parent ?? null }\n        : {}),\n      shortcuts,\n      shortcut: firstShortcut ? shortcutToString(firstShortcut) : undefined, // Maybe it should be all shortcuts?\n      perform: (context) => {\n        if (!action.isDisabled) {\n          actionDefinition.actionPerformed(\n            context || { event: null, element: null }\n          );\n        }\n      },\n    };\n    if (\n      isMutableActionGroup(action) &&\n      isActionGroupDefinition(actionDefinition)\n    ) {\n      action.children = recursivelyCreateActions(\n        keymap,\n        actionDefinition.children,\n        action\n      );\n    }\n    return action;\n  });\n}\n\n/**\n * Experimental function to get list of all actions available from a given html elements. Useful for implementing\n * action search UI.\n * @experimental\n */\nexport function getAvailableActionsFor(element: Element): Action[] {\n  const closestActionProvider = element.closest(\n    `[${ACTION_PROVIDER_ID_ATTRIBUTE}]`\n  );\n  if (closestActionProvider instanceof HTMLElement) {\n    /**\n     * NOTE: initially, only one data attribute was used to hold the action provider id. Although simpler, that approach\n     * is subject to bug in some edge cases, where multiple nested action providers are rendered, but `actionProviderProps`\n     * is merged on a single dom element. In such cases, it's important that the props from the innermost action provider\n     * is merged last, overwriting other values for data-action-provider-id.\n     * Because that's error-prone, we keep unique data attributes (`data-action_provider_id_...`} for each action\n     * provider id, and to simplify querying part, we also add a constant data attribute (data-action-provider).\n     * This way we can read all action providers applied on the same dom element. Since action providers inherit actions\n     * from parent action providers, we can reliably pick the actions from the one with the highest number of actions.\n     */\n    const actionSets = Object.keys(closestActionProvider.dataset)\n      .filter((dataKey) => dataKey.startsWith(ACTION_PROVIDER_ID_DATA_PREFIX))\n      .map((dataKey) => {\n        const id = dataKey?.replace(ACTION_PROVIDER_ID_DATA_PREFIX, \"\");\n        const actions = id && actionProvidersMap.get(id);\n        // noinspection PointlessBooleanExpressionJS\n        return actions\n          ? Object.values(actions).filter(\n              ({ isSearchable }) => isSearchable !== false\n            )\n          : [];\n      })\n      .concat();\n    return sortBy((actionSet) => -actionSet.length, actionSets)[0] || [];\n  }\n  return [];\n}\n\nexport function useActions(): Action[] {\n  return useContext(ActionsContext);\n}\n\nexport const useAction = (actionId: string): Action | null => {\n  return useActions().find(({ id }) => id === actionId) ?? null;\n};\n\nexport const usePerformAction = (): ((\n  actionId: string,\n  context?: ActionContext\n) => void) => {\n  const actions = useActions();\n  return useEventCallback((actionId: string, context?: ActionContext) => {\n    const action = actions.find(({ id }) => id === actionId);\n    if (action) {\n      action.perform(context);\n    } else {\n      console.error(\n        `An attempt to perform action with id ${actionId} failed because action was not found`\n      );\n    }\n  });\n};\n","export const CommonActionId = {\n  EXPAND_ALL: \"ExpandAll\",\n  COLLAPSE_ALL: \"CollapseAll\",\n  EXPAND_SELECTION: \"EditorSelectWord\",\n  SHRINK_SELECTION: \"EditorUnSelectWord\",\n  GO_TO_ACTION: \"GotoAction\",\n  GO_TO_FILE: \"GotoFile\",\n  SHOW_INTENTION_ACTIONS: \"ShowIntentionActions\",\n  EDIT_SOURCE: \"Documentation.EditSource\",\n  SHOW_SEARCH_HISTORY: \"ShowSearchHistory\",\n  COPY_REFERENCE: \"CopyReference\",\n  REFRESH: \"Refresh\",\n  Delete: \"$Delete\",\n};\n","import React, { useContext } from \"react\";\nimport { Shortcut } from \"./Shortcut\";\nimport { defaultKeymap } from \"./defaultKeymap\";\n\nexport interface Keymap {\n  [actionId: string]: ReadonlyArray<Shortcut>;\n}\n\nexport const KeymapContext = React.createContext<Keymap | null>(defaultKeymap);\n\nexport const KeymapProvider: React.FC<{ keymap: Keymap }> = ({\n  keymap: keymapProp,\n  children,\n}) => {\n  const parentKeyMap = useContext(KeymapContext);\n  const keymap = Object.assign(Object.create(parentKeyMap), keymapProp);\n  return (\n    <KeymapContext.Provider value={keymap}>{children}</KeymapContext.Provider>\n  );\n};\n\nexport const useKeymap = () => useContext(KeymapContext);\n","type ShortcutType = \"mouse\" | \"keyboard\";\nexport type KeyStrokeModifier = \"Alt\" | \"Shift\" | \"Meta\" | \"Control\";\n\nexport interface KeyStroke {\n  /**\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key}\n   */\n  code: string;\n  modifiers?: Array<KeyStrokeModifier>;\n}\n\ninterface ShortcutBase {\n  type: ShortcutType;\n}\n\ninterface MouseShortcut extends ShortcutBase {\n  type: \"mouse\";\n}\n\nexport interface KeyboardShortcut extends ShortcutBase {\n  type: \"keyboard\";\n  firstKeyStroke: KeyStroke;\n  secondKeyStroke?: KeyStroke;\n}\n\nexport type Shortcut = MouseShortcut | KeyboardShortcut;\n\nexport const isKeyboardShortcut = (\n  shortcut: Shortcut\n): shortcut is KeyboardShortcut => shortcut.type === \"keyboard\";\n\nexport const supportedModifiers: KeyStrokeModifier[] = [\n  \"Alt\",\n  \"Meta\",\n  \"Shift\",\n  \"Control\",\n];\n","import React from \"react\";\nimport { useAction } from \"@intellij-platform/core/ActionSystem/ActionsProvider\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport const ActionButton = ({\n  actionId,\n  children,\n  ...otherProps\n}: {\n  actionId: string;\n  /**\n   * Content to show instead of `action.icon`.\n   */\n  children?: React.ReactNode;\n} & IconButtonProps): JSX.Element => {\n  const action = useAction(actionId);\n  if (!action) {\n    return <></>;\n  }\n  const actionButton = (\n    <IconButton\n      isDisabled={action.isDisabled}\n      {...otherProps}\n      onPress={(e) => {\n        action?.perform();\n        otherProps.onPress?.(e);\n      }}\n    >\n      {children || action.icon}\n    </IconButton>\n  );\n  if (action.title) {\n    return (\n      <TooltipTrigger\n        tooltip={\n          <ActionTooltip actionName={action.title} shortcut={action.shortcut} />\n        }\n      >\n        {actionButton}\n      </TooltipTrigger>\n    );\n  }\n  return actionButton;\n};\n","import React from \"react\";\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type ActionMenuProps, ActionsMenu } from \"./ActionsMenu\";\n\nexport type ActionGroupMenuProps = Omit<ActionMenuProps, \"actions\"> & {\n  actionGroup: ActionGroup;\n};\n/**\n * Renders children of an action group as a menu.\n */\nexport const ActionGroupMenu = ({\n  actionGroup,\n  ...props\n}: ActionGroupMenuProps) => {\n  return (\n    <ActionsMenu\n      aria-label={actionGroup.title}\n      actions={actionGroup.children}\n      {...props}\n    />\n  );\n};\n","import React from \"react\";\nimport { flatten } from \"ramda\";\nimport { Menu, MenuItemLayout, MenuProps } from \"@intellij-platform/core/Menu\";\nimport { Divider, Item, Section } from \"@intellij-platform/core/Collections\";\nimport { DividerItem } from \"@intellij-platform/core/Collections/Divider\"; // Importing from /Collections breaks the build for some reason\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type Action } from \"@intellij-platform/core/ActionSystem/Action\";\n\ntype ActionGroupAsMenuItem = Pick<\n  ActionGroup,\n  \"id\" | \"icon\" | \"title\" | \"isDisabled\" | \"children\" | \"presentation\"\n>;\nexport type ActionItem = ActionGroupAsMenuItem | Action | DividerItem;\n\nfunction isAction(item: ActionItem): item is Action {\n  return \"perform\" in item;\n}\n\nexport type ActionMenuProps = {\n  selectedKeys?: string[];\n  menuProps?: React.HTMLAttributes<HTMLElement>;\n  menuComponent?: React.ComponentType<\n    Pick<\n      MenuProps<ActionItem>,\n      | \"onAction\"\n      | \"selectedKeys\"\n      | \"disabledKeys\"\n      | \"items\"\n      | \"autoFocus\"\n      | \"children\"\n    >\n  >;\n  actions: Array<ActionItem>;\n};\n\n/**\n * Given a nested list of resolved actions, renders a menu corresponding to them.\n */\nexport function ActionsMenu({\n  actions,\n  selectedKeys,\n  menuProps,\n  menuComponent: MenuComponent = Menu,\n}: ActionMenuProps) {\n  const allActions = getAllActions(actions);\n  const disabledKeys = allActions\n    .filter(({ isDisabled }) => isDisabled)\n    .map(({ id }) => id);\n\n  return (\n    <MenuComponent\n      {...menuProps}\n      onAction={(key) => {\n        const action = allActions.find(({ id }) => id === key);\n        if (action && isAction(action)) {\n          action.perform(); // TODO: pass context, containing the menu item as `element`\n        }\n      }}\n      selectedKeys={selectedKeys} // FIXME: keep isSelected on actions (toggle action)?\n      disabledKeys={disabledKeys}\n      items={actions}\n      autoFocus\n    >\n      {(action) => {\n        if (action instanceof DividerItem) {\n          return <Divider />;\n        }\n        return renderActionAsMenuItem(action);\n      }}\n    </MenuComponent>\n  );\n}\n\ntype ActionAsMenuItem = Omit<Action, \"perform\" | \"shortcuts\">;\n\nexport function renderActionAsMenuItem(\n  action: ActionAsMenuItem | ActionGroupAsMenuItem\n) {\n  const isGroup = \"children\" in action;\n  if (isGroup && action.presentation !== \"popup\") {\n    return (\n      <Section\n        key={action.id}\n        // @ts-expect-error: hasDivider is not yet made a public API.\n        hasDivider\n        aria-label={\n          action.presentation === \"section\" ? action.title : undefined\n        }\n        title={\n          action.presentation === \"titledSection\" ? action.title : undefined\n        }\n        items={action.children}\n      >\n        {renderActionAsMenuItem}\n      </Section>\n    );\n  }\n  return (\n    <Item\n      key={action.id}\n      textValue={action.title}\n      childItems={isGroup ? action.children : undefined}\n    >\n      <MenuItemLayout\n        content={action.title}\n        icon={action.icon}\n        shortcut={\"shortcut\" in action ? action.shortcut : undefined}\n      />\n    </Item>\n  );\n}\n\nfunction getAllActions(items: ActionItem[]): Action[] {\n  return flatten(\n    items.map((item) => (\"children\" in item ? item.children : item))\n  ).filter(isAction);\n}\n","import { flatten } from \"ramda\";\nimport React from \"react\";\nimport { Popup, usePopupManager } from \"@intellij-platform/core/Popup\";\nimport { SpeedSearchMenu } from \"@intellij-platform/core/Menu\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  ActionContext,\n  type ActionGroupDefinition,\n  isActionGroupDefinition,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\n\nimport { renderActionAsMenuItem } from \"./ActionsMenu\";\n\nexport const useCreateDefaultActionGroup = () => {\n  const { show } = usePopupManager();\n  const getActionShortcut = useGetActionShortcut();\n  const openActionsInPopup = useEventCallback(\n    (\n      { children, title }: Pick<ActionGroupDefinition, \"children\" | \"title\">,\n      context: ActionContext\n    ) => {\n      show(({ close }) => (\n        <Popup>\n          <Popup.Layout\n            content={\n              /**\n               * NOTE: It would be much nicer to use {@link ActionGroupMenu} component here. But the action group is not\n               * yet provided when the group definition is being created. It seems like a sign of bad design that needs\n               * to get addressed.\n               */\n              <SpeedSearchMenu\n                aria-label={title}\n                items={children}\n                onAction={(key) => {\n                  // The need for calculating `allActions` is a consequence of the issue explained in the note above.\n                  const allActions = flatten(\n                    children.map((item) =>\n                      isActionGroupDefinition(item) ? item.children : item\n                    )\n                  );\n                  const action = allActions.find((action) => action.id === key);\n                  if (action && !action.isDisabled) {\n                    action.actionPerformed(context);\n                  }\n                }}\n                onClose={close}\n                autoFocus=\"first\"\n              >\n                {(item) =>\n                  renderActionAsMenuItem({\n                    ...item,\n                    // a consequence of the issue explained in the note above.\n                    shortcut: getActionShortcut(item.id),\n                  })\n                }\n              </SpeedSearchMenu>\n            }\n            header={title}\n          />\n        </Popup>\n      ));\n    }\n  );\n\n  return (\n    groupDefinition: Omit<ActionGroupDefinition, \"actionPerformed\">\n  ): ActionGroupDefinition => {\n    return {\n      presentation: \"popup\",\n      ...groupDefinition,\n      actionPerformed: (context) =>\n        openActionsInPopup(groupDefinition, context),\n    };\n  };\n};\n","import {\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  // For some reason importing from shorter paths doesn't work as expected in cypress ¯\\_(ツ)_/¯\n  // Weirdly, `import *` works in that case.\n} from \"@intellij-platform/core/ToolWindowsImpl/ToolWindowActionIds\";\n\nimport { Keymap } from \"./KeymapProvider\";\nimport { CommonActionId } from \"./CommonActionIds\";\n\n// TODO: OS specific defaults\n// TODO: extract and export action ids\n// NOTE: defaultKeymap doesn't belong to ActionSystem semantically. Would be something to be moved to a separate module\n/**\n * Default Intellij Idea keymapping for common action ids, including tool window actions.\n * @see CommonActionId\n */\nexport const defaultKeymap: Keymap = {\n  [RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowRight\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_LEFT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowLeft\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_TOP_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowUp\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowDown\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [MAXIMIZE_TOOL_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Quote\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [FOCUS_EDITOR_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n      },\n    },\n  ],\n  [HIDE_ACTIVE_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n        modifiers: [\"Shift\"],\n      },\n    },\n  ],\n  [HIDE_ALL_WINDOWS_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [JUMP_TO_LAST_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowUp\",\n      },\n    },\n  ],\n  [CommonActionId.SHRINK_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Equal\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadAdd\",\n      },\n    },\n  ],\n  [CommonActionId.COLLAPSE_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Minus\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadSubtract\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_ACTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyA\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_INTENTION_ACTIONS]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"Enter\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_FILE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyO\",\n      },\n    },\n  ],\n  [CommonActionId.EDIT_SOURCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"ArrowDown\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F4\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_SEARCH_HISTORY]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.COPY_REFERENCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\", \"Alt\"],\n        code: \"KeyC\",\n      },\n    },\n  ],\n  [CommonActionId.REFRESH]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyR\",\n      },\n    },\n  ],\n  [CommonActionId.Delete]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Backspace\",\n      },\n    },\n  ],\n};\n","import { fromPairs } from \"ramda\";\nimport { isMac } from \"@react-aria/utils\";\nimport {\n  isKeyboardShortcut,\n  KeyStroke,\n  KeyStrokeModifier,\n  Shortcut,\n} from \"./Shortcut\";\nimport {\n  KeyboardEventKey,\n  LinuxDeadKeys,\n  NumericKeypadKeys,\n  UpperAlpha,\n} from \"./KeyboardEventKey\";\n\nconst defaultKeyToStr: {\n  [key in Exclude<\n    KeyStrokeModifier | KeyboardEventKey,\n    LinuxDeadKeys | UpperAlpha | NumericKeypadKeys\n  >]: string;\n} = {\n  Control: \"Ctrl\",\n  \" \": \"Space\",\n  ArrowDown: \"↓\",\n  ArrowUp: \"↑\",\n  ArrowLeft: \"←\",\n  ArrowRight: \"→\",\n  Enter: \"⏎\",\n  Quote: \"'\",\n  Minus: \"-\",\n  Equal: \"+\",\n  Backspace: \"⌫\",\n  // lowercase to uppercase map\n  ...fromPairs(\n    Array.from(Array(26))\n      .map((e, i) => i + \"a\".charCodeAt(0))\n      .map((x) => String.fromCharCode(x))\n      .map((a) => [a, a.toUpperCase()])\n  ),\n};\nconst KeystrokeToString: {\n  separator: string;\n  codeToStr: Record<KeyStrokeModifier | KeyboardEventKey, string>;\n} = isMac()\n  ? {\n      separator: \"\",\n      codeToStr: {\n        ...defaultKeyToStr,\n        Alt: \"⌥\",\n        Shift: \"⇧\",\n        Meta: \"⌘\",\n        Control: \"^\",\n        Escape: \"⎋\",\n      },\n    }\n  : {\n      separator: \"+\",\n      codeToStr: defaultKeyToStr,\n    };\n\nconst modifiersOrder: KeyStrokeModifier[] = [\"Control\", \"Alt\", \"Shift\", \"Meta\"];\nexport const keystrokeToString = (keystroke: KeyStroke) => {\n  return [\n    ...(keystroke.modifiers || []).sort(\n      (a, b) => modifiersOrder.indexOf(a) - modifiersOrder.indexOf(b)\n    ),\n    keystroke.code,\n  ]\n    .map((code) => KeystrokeToString.codeToStr[code] || code)\n    .map((code) => code.replace(/^(Key|Digit|Numpad)(.)$/, \"$2\"))\n    .join(KeystrokeToString.separator);\n};\nexport const shortcutToString = (shortcut: Shortcut) => {\n  if (isKeyboardShortcut(shortcut)) {\n    return [shortcut.firstKeyStroke, shortcut.secondKeyStroke]\n      .filter((i): i is KeyStroke => i != undefined)\n      .map(keystrokeToString)\n      .join(\", \");\n  }\n  throw new Error(\"Not implemented yet\");\n};\n","import { useAction } from \"./ActionsProvider\";\nimport { isResolvedActionGroup, ResolvedActionGroup } from \"./ActionGroup\";\n\nexport const useActionGroup = (\n  actionGroupId: string\n): ResolvedActionGroup | null => {\n  const action = useAction(actionGroupId);\n  if (action) {\n    if (isResolvedActionGroup(action)) {\n      return action;\n    }\n    throw new Error(`Action with id ${actionGroupId} is not a group`);\n  }\n  return null;\n};\n","import React from \"react\";\nimport {\n  ModalWindow,\n  ModalWindowProps,\n} from \"@intellij-platform/core/ModalWindow\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\nimport { styled } from \"../styled\";\nimport { StyledWindowContainer } from \"@intellij-platform/core/ModalWindow/ModalWindow\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { Button } from \"@intellij-platform/core/Button\";\nimport { isEventOnEmptySpaces } from \"@intellij-platform/core/utils/interaction-utils/useMove\";\n\nexport interface AlertDialogProps\n  extends Pick<ModalWindowProps, \"minWidth\" | \"id\" | \"onClose\"> {\n  /**\n   * Content slot for the heading, aka. title of the dialog. Typically plain text.\n   */\n  heading?: React.ReactNode;\n  /**\n   * Content slot for the body, aka. message of the dialog. Typically plain text.\n   */\n  body?: React.ReactNode;\n  /**\n   * Content slot for the checkbox (\"Do not ask again\").\n   * @example\n   * ```jsx\n   * <AlertDialog checkbox={<Checkbox>Do not ask again</Checkbox>} />\n   * ```\n   * @see Checkbox\n   */\n  checkbox?: React.ReactNode;\n\n  /**\n   * Type of the alert dialog. The icon is set based on type.\n   */\n  type?: \"error\" | \"warning\" | \"information\" | \"question\";\n\n  /**\n   * Content slot for buttons.\n   * @example\n   * ```jsx\n   * <AlertDialog\n   *   buttons={\n   *     <>\n   *       <Button>Cancel</Button>\n   *       <Button variant=\"default\">Ok</Button>\n   *     </>\n   *   }\n   * />\n   * ```\n   * @see Button\n   */\n  buttons?: React.ReactNode;\n\n  /**\n   * Content slot for help icon button in the footer.\n   * @example\n   * ```jsx\n   * <AlertDialog\n   *   helpButton={\n   *     <TooltipTrigger tooltip={<HelpTooltip helpText=\"Show Help Contents\" />}>\n   *       <Button variant=\"icon\">\n   *         <PlatformIcon icon=\"actions/help\"></PlatformIcon>\n   *       </Button>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   * @see Button\n   */\n  helpButton?: React.ReactNode;\n}\n\nconst StyledModalWindow = styled(ModalWindow)`\n  ${StyledWindowContainer} {\n    border-radius: 0;\n    outline: 0.5px solid rgba(0, 0, 0, 0.85); // FIXME\n  }\n`;\n\nconst StyledContainer = styled.div`\n  padding: 1.25rem;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto auto;\n  align-items: center;\n  gap: 0.875rem;\n`;\n\nconst StyledHeading = styled.h2`\n  margin: 0;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  font-weight: bold;\n`;\n\nconst StyledBody = styled.div`\n  line-height: 1.2;\n`;\n\nconst StyledContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  cursor: default;\n`;\n\nconst StyledCheckbox = styled.div`\n  padding: 0.375rem 0;\n  // to align the checkbox with the content, since the box has a padding. Maybe Checkbox should not have any padding.\n  margin-left: -0.25rem;\n`;\n\nconst StyledButtons = styled.div`\n  display: flex;\n  justify-self: end;\n  gap: 1rem;\n`;\n\nconst StyledIcon = styled.span`\n  align-self: start;\n`;\n\nconst StyledHelpIcon = styled.div`\n  justify-self: center;\n`;\n\n/**\n * A modal dialog implementing [Alert](https://jetbrains.github.io/ui/controls/alert), which is the\n * [notification](https://jetbrains.github.io/ui/controls/notifications/) pattern for use cases where\n * immediate user action is required.\n * Since the use cases are quite specific, and the component is expected to be used with pretty specific\n * content items, the layout is not implemented as a separate component, the way it is in many other components.\n *\n */\nexport const AlertDialog = ({\n  type = \"question\",\n  heading,\n  body,\n  checkbox,\n  helpButton,\n  buttons,\n  minWidth = 370,\n  ...otherProps\n}: AlertDialogProps): JSX.Element => {\n  return (\n    <StyledModalWindow\n      role=\"alertdialog\"\n      interactions=\"move\"\n      minWidth={minWidth}\n      defaultBounds={{\n        top: window.innerHeight / 4,\n      }}\n      // Reacting to content size, to make sure the content will be visible, considering the window is not resizable.\n      observeContentResize\n      {...otherProps}\n    >\n      <OverlayMoveHandle dragThreshold={6} canMoveStart={isEventOnEmptySpaces}>\n        {({ moveHandleProps }) => (\n          <StyledContainer {...moveHandleProps}>\n            <StyledIcon>\n              {/* Icon name is theme-able in the reference impl via OptionPane[`${icon}Icon`] */}\n              <PlatformIcon size={32} icon={`general/${type}Dialog`} />\n            </StyledIcon>\n            <StyledContent>\n              <StyledHeading>{heading}</StyledHeading>\n              <StyledBody>{body}</StyledBody>\n              {checkbox && <StyledCheckbox>{checkbox}</StyledCheckbox>}\n            </StyledContent>\n            <StyledHelpIcon>{helpButton}</StyledHelpIcon>\n            <StyledButtons>{buttons}</StyledButtons>\n          </StyledContainer>\n        )}\n      </OverlayMoveHandle>\n    </StyledModalWindow>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport { useWindowManager } from \"@intellij-platform/core/ModalWindow\";\nimport { Button } from \"@intellij-platform/core/Button\";\n\nimport { AlertDialog } from \"./AlertDialog\";\n\nexport interface AlertDialogApi {\n  confirm(options: {\n    title: ReactNode;\n    message: ReactNode;\n    okText?: string;\n    cancelText?: string;\n  }): Promise<boolean>;\n}\n\n/**\n * Similar to com.intellij.openapi.ui.Messages class in the reference impl, provides helper functions\n * to show different types of Alert dialog. The helper functions return a Promise of the selected option,\n * which makes it easy to use it imperatively, in a flow of statements, regardless of how the UI of the\n * alert dialog is handled.\n * {@link useAlertDialog} depends on {@link WindowManager}, to imperatively open modal windows.\n * @experimental\n */\nexport function useAlertDialog(): AlertDialogApi {\n  const { open } = useWindowManager();\n  return {\n    confirm: ({ title, message, okText = \"Ok\", cancelText = \"Cancel\" }) =>\n      new Promise((resolve) => {\n        open(({ close }) => (\n          <AlertDialog\n            type=\"question\"\n            body={message}\n            heading={title}\n            buttons={\n              <>\n                <Button onPress={close}>{cancelText}</Button>\n                <Button\n                  variant=\"default\"\n                  onPress={() => {\n                    resolve(true);\n                    close();\n                  }}\n                >\n                  {okText}\n                </Button>\n              </>\n            }\n            onClose={() => resolve(false)}\n          />\n        ));\n      }),\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nconst CORNER_RADIUS = 12; // it used to be 8. After introduction of Notifications tool window, it's 12\n\nconst bgColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Notification.background\",\n    !theme.dark ? \"rgb(242,242,242)\" : \"#4E5052\"\n  );\n\nexport const StyledHeaderActions = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  background: inherit;\n  padding: 0.375rem 0.5rem 0;\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: 100%;\n    background: linear-gradient(90deg, transparent, ${bgColor});\n    width: 20px;\n    height: 100%;\n    z-index: 1;\n    top: 0;\n  }\n`;\n\nexport const StyledBalloonContainer = styled.div`\n  line-height: 1.2;\n  box-sizing: border-box;\n  overflow: hidden; // header actions overflows a little at the top right rounded corner\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); // shadow doesn't seem to be themed\n  padding: 0.5rem 0;\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"Notification.borderColor\",\n        !theme.dark ? \"#B2B2B2CD\" : \"#565A5CCD\"\n      )};\n  border-radius: ${({ theme }) =>\n    `${\n      (theme.value<number>(\n        \"Notification.arc\" as UnknownThemeProp<\"Notification.arc\">\n      ) ?? CORNER_RADIUS) / 2\n    }px`};\n  //display: inline-flex;\n  width: 23.3125rem;\n  position: relative;\n  background-color: ${bgColor};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Notification.foreground\",\n      !theme.dark ? \"#000\" : \"rgb(191,191,191)\"\n    )};\n\n  ${StyledHeaderActions} {\n    display: none;\n  }\n  &:hover ${StyledHeaderActions} {\n    display: initial;\n  }\n`;\n\nexport const StyledIconContainer = styled.span`\n  position: absolute;\n  left: 0.75rem;\n  top: 0.5rem;\n`;\n\nexport const StyledBalloonHeader = styled.div`\n  line-height: 1rem;\n  font-weight: bold;\n  margin: 0 2.125rem 0.25rem;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; // this is not the case in original impl, but it's a clear improvement\n`;\n\nexport const StyledBalloonBody = styled.div<{\n  lineClamp: number | false;\n}>`\n  margin: 0 2.125rem 0 2.125rem;\n  line-height: 1rem;\n  display: inline;\n  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};\n  word-break: ${({ lineClamp }) => lineClamp === 1 && \"break-all\"};\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nexport const StyledBalloonFooter = styled.div`\n  margin: 0.375rem 1.875rem 0 2.125rem;\n  display: inline-flex;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 1rem;\n\n  // could be -webkit-fill-available too, if it has good support. Probably it doesn't tho\n  max-width: calc(100% - 3.5rem);\n`;\n\nexport const StyledToggleIconContainer = styled.span`\n  display: inline-flex;\n  position: absolute;\n  right: 0.5rem;\n  bottom: 0;\n  background-color: ${bgColor};\n  padding-left: 0.5rem;\n`;\n\nexport const StyledToggleExpandButtonContainer = styled.span`\n  display: block;\n  position: relative; // for icon absolute positioning\n  cursor: pointer;\n  flex: 1;\n`;\n\nexport const StyledToggleExpandButtonFooterContainer = styled(\n  StyledToggleExpandButtonContainer\n)`\n  min-height: 1.5rem;\n  margin: -0.5rem 0;\n  position: relative;\n  z-index: 1;\n  ${StyledToggleIconContainer} {\n    bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter} {\n    margin-top: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter}:hover + * .icon[data-hover] {\n    display: none;\n  }\n  ${StyledBalloonFooter}:hover + * .icon {\n    display: unset;\n  }\n`;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { IconProps } from \"@intellij-platform/core/Icon/IconProps\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  StyledBalloonBody,\n  StyledBalloonContainer,\n  StyledBalloonFooter,\n  StyledBalloonHeader,\n  StyledHeaderActions,\n  StyledIconContainer,\n  StyledToggleExpandButtonContainer,\n  StyledToggleExpandButtonFooterContainer,\n  StyledToggleIconContainer,\n} from \"@intellij-platform/core/Balloon/Balloon.styled\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { Link } from \"@intellij-platform/core/Link\";\n\nexport type BalloonProps = ControlledStateProps<{ expanded: boolean }> &\n  DOMProps & {\n    /**\n     * Icon rendered in the top left\n     */\n    icon?: \"Info\" | \"Warning\" | \"Error\" | React.ReactElement<IconProps>;\n    /**\n     * Rendered beside close button. Can be used for rendering a \"notification settings\" icon button.\n     */\n    headerActions?: React.ReactNode;\n    /**\n     * Called when the close button is clicked. If not passed, close button will not be rendered.\n     */\n    onClose?: () => void;\n    /**\n     * Actions rendered in the footer.\n     */\n    actions?: React.ReactNode;\n  } & (\n    | {\n        title?: React.ReactNode;\n        body: React.ReactNode;\n      }\n    | {\n        title: React.ReactNode;\n        body?: React.ReactNode;\n      }\n  );\n\ntype BalloonContextObj = {\n  onClose?: () => void;\n};\nconst BalloonContext = React.createContext<BalloonContextObj | null>(null);\n\n/**\n * A tiny wrapper around {@link Link} component, to be used for actions in Balloon.\n * It closes the balloon when pressed.\n */\nexport const BalloonActionLink: typeof Link = React.forwardRef(\n  ({ onPress, ...props }, ref) => {\n    const context = useContext(BalloonContext);\n    if (context === null) {\n      throw new Error(\n        \"BalloonActionLink should only be rendered inside Balloon notifications\"\n      );\n    }\n    return (\n      <Link\n        ref={ref}\n        {...props}\n        onPress={(...args) => {\n          context?.onClose?.();\n          return onPress?.(...args);\n        }}\n      />\n    );\n  }\n);\n/**\n * [Balloon notification](https://jetbrains.github.io/ui/controls/balloon/) UI.\n *\n * Notes and TODO:\n * - Add support for \"error\" variant: https://github.com/JetBrains/intellij-community/blob/48c024fcd38bd8d1eccdada05489a8952a494270/platform/platform-impl/src/com/intellij/diagnostic/IdeMessagePanel.java#L215\n * - Add support for timeout. Although if the auto close behaviour is only timeout-based, maybe there is not much value in adding a prop for it and calling onClose on timeout.\n * - BalloonActions component to be used for rendering a bunch of links in the actions. It should encapsulate the\n *   behaviour of moving actions into a menu when there is not enough room.\n */\nexport const Balloon = ({\n  icon: iconProp = \"Info\",\n  expanded: expandedProp,\n  defaultExpanded = false,\n  onExpandedChange,\n  title,\n  headerActions,\n  onClose,\n  body,\n  actions,\n  ...containerProps\n}: BalloonProps): React.ReactElement => {\n  const bodyRef = useRef<HTMLDivElement>(null);\n  const [expandable, setExpandable] = useState(false);\n  const [expanded, setExpanded] = useControlledState(\n    expandedProp!,\n    defaultExpanded,\n    onExpandedChange!\n  );\n  const maxLinesWhenNotExpanded = 1 + (title ? 0 : 1) + (actions ? 0 : 1);\n\n  useEffect(() => {\n    const bodyElem = bodyRef.current;\n    if (bodyElem) {\n      setExpandable(\n        expanded\n          ? getNumLines(bodyElem) > maxLinesWhenNotExpanded\n          : bodyElem.scrollHeight > bodyElem.clientHeight\n      );\n    } else {\n      setExpandable(false);\n    }\n  }, [expanded]);\n  const validIconTypes = [\"Error\", \"Warning\", \"Info\"] as const;\n  const icon =\n    typeof iconProp === \"string\" ? (\n      <PlatformIcon\n        icon={`general/notification${validIconTypes.find(\n          (iconType, index, arr) =>\n            iconType === iconProp || index === arr.length - 1\n        )}.svg`}\n      />\n    ) : (\n      iconProp\n    );\n  // @ts-expect-error support for callback updater is removed from useControlledState. https://github.com/adobe/react-spectrum/issues/2320\n  const toggle = () => setExpanded((expanded) => !expanded);\n\n  const effectiveExpanded = expanded && Boolean(body);\n\n  return (\n    <BalloonContext.Provider value={{ onClose }}>\n      <StyledBalloonContainer data-testid=\"balloon\" {...containerProps}>\n        <StyledIconContainer>{icon}</StyledIconContainer>\n        {title && <StyledBalloonHeader>{title}</StyledBalloonHeader>}\n        <StyledHeaderActions>\n          {headerActions}\n          {onClose && (\n            <AutoHoverPlatformIcon\n              icon=\"ide/notification/close.svg\"\n              onClick={onClose}\n              role=\"button\"\n              data-testid=\"close-btn\"\n              style={{ marginLeft: \"0.75rem\" }}\n            />\n          )}\n        </StyledHeaderActions>\n        {body && (\n          <ToggleWrapper\n            expanded={effectiveExpanded}\n            enabled={expandable && !effectiveExpanded}\n            onToggle={toggle}\n          >\n            <StyledBalloonBody\n              lineClamp={!effectiveExpanded && maxLinesWhenNotExpanded}\n              ref={bodyRef}\n            >\n              {body}\n            </StyledBalloonBody>\n          </ToggleWrapper>\n        )}\n        <ToggleWrapper\n          expanded={effectiveExpanded}\n          enabled={expandable && effectiveExpanded}\n          onToggle={toggle}\n          Component={StyledToggleExpandButtonFooterContainer}\n        >\n          {actions && (\n            <StyledBalloonFooter onClick={(e) => e.stopPropagation()}>\n              {actions}\n            </StyledBalloonFooter>\n          )}\n        </ToggleWrapper>\n      </StyledBalloonContainer>\n    </BalloonContext.Provider>\n  );\n};\n\n/**\n * If enabled wraps its children in a clickable area (with the expand/collapse arrow),f for toggling expanded state.\n */\nconst ToggleWrapper: React.FC<{\n  enabled: boolean;\n  expanded: boolean;\n  Component?: typeof StyledToggleExpandButtonContainer;\n  onToggle: () => void;\n}> = ({\n  children,\n  onToggle,\n  expanded,\n  enabled,\n  Component = StyledToggleExpandButtonContainer,\n}) => {\n  const iconName = expanded ? \"collapse\" : \"expand\";\n  const toggleIcon = (\n    <StyledToggleIconContainer>\n      <AutoHoverPlatformIcon\n        hoverContainerSelector={`${Component}`}\n        icon={`ide/notification/${iconName}.svg`}\n        className=\"icon\"\n      />\n    </StyledToggleIconContainer>\n  );\n\n  return enabled ? (\n    <Component\n      onClick={onToggle}\n      role=\"button\"\n      data-testid={`${expanded ? \"collapse\" : \"expand\"}-btn`}\n    >\n      {children}\n      {toggleIcon}\n    </Component>\n  ) : (\n    <>{children}</>\n  );\n};\n\n/**\n * Based on the computed line-height and clientHeight of the element, returns the number of lines of the content.\n */\nfunction getNumLines(bodyElem: Element) {\n  return (\n    bodyElem.clientHeight / parseFloat(getComputedStyle(bodyElem).lineHeight)\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Balloon, BalloonProps } from \"./Balloon\";\nimport { StyledBalloonsStack } from \"./StyledBalloonsStack\";\n\ntype ShowProps = Pick<\n  BalloonProps,\n  \"title\" | \"icon\" | \"body\" | \"actions\" | \"headerActions\"\n>;\n\nexport interface BalloonManagerAPI {\n  /**\n   * Shows a Balloon notification on the bottom left of the screen.\n   * @param props: Props to pass to the Balloon component\n   * @param [autoHideTimeout=10_000] timeout in ms for hiding the balloon notification.\n   * @returns hide function, in case the notification can expire for some reason.\n   */\n  show(props: ShowProps, autoHideTimeout?: number): () => void;\n  showSticky(props: ShowProps): () => void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\"You must render a BalloonManager...\");\n};\n\nconst BalloonsContext = React.createContext<BalloonManagerAPI>({\n  show: NotImplementedFn,\n  showSticky: NotImplementedFn,\n});\n\nexport const useBalloonManager = (): BalloonManagerAPI =>\n  useContext(BalloonsContext);\n\ntype BalloonElement = ReactElement<BalloonProps, typeof Balloon>;\n\nexport interface BalloonManagerProps {\n  disablePortal?: boolean;\n  BalloonsContainer?: React.ElementType;\n}\n\n/**\n * Enables imperative API (via {@link useBalloonManager}) for showing Balloon notifications on the bottom right of the screen.\n * It renders notifications in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n * @param disablePortal: if `true`, the container for notifications will not be rendered in a portal\n * @param BalloonsContainer: container component for the notifications. It's {@link StyledBalloonsStack} by default.\n *\n * TODO: fade in/out transition. Notes:\n *  - Doesn't seem fade-in is needed. Tho it's much easier than fade-out, as it can be achieved with a css animation.\n *  - Fade out should happen only when the balloon is being hidden by timeout.\n * TODO: Support for maximum number of notifications and showing \"x more notification(s)\" button if the limit exceeds\n */\n\nexport const BalloonManager: React.FC<BalloonManagerProps> = ({\n  children,\n  disablePortal,\n  BalloonsContainer = StyledBalloonsStack,\n}) => {\n  const [balloons, setBalloons] = useState<Array<BalloonElement>>([]);\n  const timeoutIdsRef = useRef<number[]>([]);\n  const lastIdRef = useRef<number>(0);\n\n  const api = useMemo<BalloonManagerAPI>(() => {\n    const show: BalloonManagerAPI[\"show\"] = (props, timeout = 10_000) => {\n      lastIdRef.current++;\n      const onClose = () => {\n        setBalloons((balloons) =>\n          balloons.filter((aBalloon) => aBalloon !== balloon)\n        );\n      };\n      const balloon = (\n        <Balloon\n          key={lastIdRef.current}\n          {...props}\n          title={props.title} // TS acts unreasonable without this\n          onClose={onClose}\n        />\n      );\n      setBalloons((balloons) => {\n        if (timeout > 0) {\n          const timeoutId = window.setTimeout(() => {\n            onClose();\n            timeoutIdsRef.current = timeoutIdsRef.current.filter(\n              (aTimeoutId) => aTimeoutId !== timeoutId\n            );\n          }, timeout);\n          timeoutIdsRef.current = [...timeoutIdsRef.current, timeoutId];\n        }\n        return balloons.concat(balloon);\n      });\n      return onClose;\n    };\n    return {\n      show,\n      showSticky: (props) => show(props, 0),\n    };\n  }, []);\n\n  // clear timeouts when unmounted\n  useEffect(() => {\n    return () => {\n      timeoutIdsRef.current.forEach((id) => {\n        window.clearTimeout(id);\n      });\n    };\n  }, []);\n\n  const notificationsStack = (\n    <BalloonsContainer\n      style={{ position: disablePortal ? \"absolute\" : undefined }}\n    >\n      {balloons}\n    </BalloonsContainer>\n  );\n\n  return (\n    <BalloonsContext.Provider value={api}>\n      {children}\n      {disablePortal\n        ? notificationsStack\n        : ReactDOM.createPortal(notificationsStack, document.body)}\n    </BalloonsContext.Provider>\n  );\n};\n","import styled from \"styled-components\";\nimport { StyledBalloonContainer } from \"@intellij-platform/core/Balloon/Balloon.styled\";\n\n/**\n * Container component for stacking a number of Balloons in an overlay placed on the bottom right of where it's rendered.\n */\nexport const StyledBalloonsStack = styled.div`\n  position: fixed;\n  z-index: 1;\n  bottom: 42px;\n  right: 26px;\n  ${StyledBalloonContainer} {\n    margin-bottom: 12px;\n  }\n`;\n","import React, { ForwardedRef, JSXElementConstructor } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { AriaBaseButtonProps, ButtonProps } from \"@react-types/button\";\n\nexport interface BareButtonProps extends AriaBaseButtonProps, ButtonProps {\n  children: React.ReactElement;\n\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n}\n\n/**\n * A component to make arbitrary content an accessible button which is also able to be a tooltip trigger.\n */\nexport const BareButton: React.FC<BareButtonProps> = React.forwardRef(\n  function BareButton(props: BareButtonProps, ref: ForwardedRef<HTMLElement>) {\n    const elementType = React.isValidElement(props.children)\n      ? (props.children.type as JSXElementConstructor<unknown>)\n      : undefined;\n    const { buttonProps } = useButton(\n      {\n        elementType,\n        ...props,\n      },\n      useObjectRef(ref)\n    );\n    const domProps = filterDOMProps(props);\n    const { autoFocus } = props;\n\n    return React.cloneElement(\n      props.children,\n      mergeProps(domProps, buttonProps, { autoFocus, ref })\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  height: 1.5rem;\n  font-family: inherit;\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, {\n  ButtonHTMLAttributes,\n  CSSProperties,\n  ForwardedRef,\n} from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  StyledButton,\n  StyledDefaultButton,\n  StyledIconButton,\n} from \"@intellij-platform/core/Button/StyledButton\";\n\ntype ButtonVariant = \"default\" | \"icon\";\nexport interface ButtonProps extends AriaButtonProps {\n  variant?: ButtonVariant; // can allow for custom (styled) component too if needed.\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  // Should this be become true by default? Maybe an context-based API to set defaults like this for a section?\n  preventFocusOnPress?: boolean;\n\n  form?: ButtonHTMLAttributes<HTMLButtonElement>[\"form\"];\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst variants: { [key in ButtonVariant]: typeof StyledButton } = {\n  default: StyledDefaultButton,\n  icon: StyledIconButton,\n};\n\n/**\n * https://jetbrains.github.io/ui/controls/button/\n *\n * TODO:\n * - Support for \"default\" button behaviour. it's kind of similar to a <button type=\"submit\" /> in html, but textarea\n * behaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\n * Cmd+Enter should always trigger onPress. Plus, maybe it should work independent of \"form\" being used? or maybe it's\n * not a big deal to expect an ancestor \"form\" element, when variant is \"default\"?\n * - Support for mnemonic\n * - \"Default\" style differences in Windows.\n * - Gradient colors (low hanging fruit, but negligible added value).\n *\n * Known issues:\n * - In the original impl, default button looks the same as normal button, when focus is not within the same area that\n * the button is. For example in the commit tool window, \"Commit\" button which is default, is not blue, unless the\n * \"Commit\" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n * \"default\" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\n * DefaultToolWindow is used. But we need to see if the same requirement exists in various places.\n * NOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\n * which enables \"default\" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n * - In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\n * behaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.\n *\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef(function Button(\n  { variant, style, className, ...props }: ButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const { buttonProps } = useButton(props, ref);\n  const domProps = filterDOMProps(props);\n  const { autoFocus, form } = props;\n\n  const Component = (variant && variants[variant]) || StyledButton;\n  return (\n    <Component\n      {...mergeProps(domProps, buttonProps, { autoFocus, form })}\n      style={style}\n      className={className}\n      ref={ref}\n    >\n      {props.children}\n    </Component>\n  );\n});\n","import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n}\n\nconst StyledWrapperLabel = styled.label`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  isDisabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, isDisabled }) =>\n    isDisabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\nconst StyledInput = styled.input`\n  opacity: 0.0001;\n  position: absolute;\n  z-index: 1;\n  inset: 0;\n  cursor: default;\n  &:disabled {\n    cursor: default;\n  }\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel className={className}>\n      <StyledInput\n        {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n        ref={ref}\n      />\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={disableFocusAlwaysVisible ? isFocusVisible : isFocused}\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText isDisabled={props.isDisabled}>\n          {props.children}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import React, { ComponentProps } from \"react\";\nimport { LafIcon } from \"@intellij-platform/core/Icon\";\n\n/**\n * Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\n * with the interactions\n */\nexport const CheckboxIcon = ({\n  isDisabled,\n  isFocused,\n  isIndeterminate,\n  isSelected,\n  ...otherProps\n}: Omit<ComponentProps<typeof LafIcon>, \"size\" | \"icon\"> & {\n  isIndeterminate: boolean | undefined;\n  isFocused: boolean;\n  isDisabled: boolean | undefined;\n  isSelected: boolean;\n}) => {\n  return (\n    <LafIcon\n      {...otherProps}\n      size={20}\n      icon={{\n        name: isIndeterminate ? \"checkBoxIndeterminate\" : \"checkBox\",\n        modifiers: {\n          Disabled: isDisabled,\n          Selected: isSelected || isIndeterminate,\n          Focused: isFocused,\n        },\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { CollectionSpeedSearchMatches } from \"./useCollectionSpeedSearchResult\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext =\n  React.createContext<CollectionSpeedSearchContextValue | null>(null);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext =\n  React.createContext<null | CollectionSpeedSearchItemContextValue>(null);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{ itemKey: Key }> = ({\n  children,\n  itemKey,\n}) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue;\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function ({\n  Component = \"span\",\n}: {\n  /**\n   * When rendering in a flex parent (which is the case for tree or list), rendering a container is necessary to have\n   * the right spacing around highlights, when the highlighter span is immediately followed or proceeded by a white\n   * space. By default, a \"span\" is rendered.\n   */\n  Component?: React.ElementType;\n}) {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return (\n    <Component>\n      {highlightedRanges ? (\n        <TextWithHighlights highlights={highlightedRanges}>\n          {text}\n        </TextWithHighlights>\n      ) : (\n        text\n      )}\n    </Component>\n  );\n};\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager: inputSelectionManager,\n  speedSearch,\n  focusBestMatch = false,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n  /**\n   * If true, focusing the best match (the longest \"start-with\" match) will be preferred.\n   * By default, the focus is moved to the first match that comes after the currently focused item, if currently\n   * focused item itself is not a match.\n   * A typical use case would be collections that filter out non-match items.\n   * @default false\n   */\n  focusBestMatch?: boolean;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const { matches } = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key))\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n    };\n  }, [searchTerm, collection, active]);\n\n  const selectionManager = createSpeedSearchSelectionManager(\n    inputSelectionManager,\n    active ? matches : null\n  );\n  const latestValues = useLatest({\n    matches,\n    selectionManager,\n    collection,\n    focusBestMatch,\n  });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n    let keyToFocus: Key | undefined;\n    if (latestValues.current.focusBestMatch) {\n      keyToFocus = getLongestCommonPrefixMatch(matches);\n    }\n    if (!keyToFocus && matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      keyToFocus = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n    }\n    if (keyToFocus) {\n      selectionManager.setFocusedKey(keyToFocus);\n      selectionManager.replaceSelection(keyToFocus);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return {\n    matches,\n    selectionManager,\n  };\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n\n/**\n * Returns the longest match from the beginning, if exists.\n */\nfunction getLongestCommonPrefixMatch(matches: CollectionSpeedSearchMatches) {\n  return [...matches.entries()]\n    .filter(([, [firstRange]]) => firstRange?.from === 0)\n    .sort(\n      ([, [rangeA]], [, [rangeB]]) =>\n        rangeB.to - rangeB.from - rangeA.to - rangeA.from\n    )?.[0]?.[0];\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { Key } from \"react\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { HTMLAttributes, RefObject, useMemo } from \"react\";\nimport { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport {\n  SpeedSearchPopupProps,\n  SpeedSearchProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport {\n  SpeedSearchState,\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { CollectionSpeedSearchContextValue } from \"./CollectionSpeedSearchContext\";\nimport {\n  CollectionSpeedSearchMatches,\n  useCollectionSpeedSearchResult,\n} from \"./useCollectionSpeedSearchResult\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\nexport interface CollectionSpeedSearch {\n  containerProps: HTMLAttributes<HTMLElement>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n}\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  keepSearchActiveOnBlur,\n  keyboardDelegate,\n  focusBestMatch,\n  ref,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  ref: RefObject<HTMLElement>;\n  focusBestMatch?: boolean;\n} & SpeedSearchStateProps &\n  Pick<SpeedSearchProps, \"keepSearchActiveOnBlur\">): CollectionSpeedSearch {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps);\n\n  const { matches, selectionManager: speedSearchSelectionManager } =\n    useCollectionSpeedSearchResult({\n      collection,\n      selectionManager,\n      speedSearch,\n      focusBestMatch,\n    });\n  const { containerProps } = useSpeedSearch(\n    { keepSearchActiveOnBlur },\n    speedSearch,\n    ref\n  );\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  const findFirstMatch = <T extends React.Key | undefined, K>(\n    fromKey: React.Key | undefined | null,\n    direction: \"up\" | \"down\"\n  ) => {\n    let currentKey: React.Key | undefined | null = fromKey;\n    while (currentKey != null) {\n      if (!matches || matches.has(currentKey)) {\n        return currentKey;\n      }\n      currentKey =\n        direction === \"up\"\n          ? wrappedKeyboardDelegate.getKeyAbove?.(currentKey)\n          : wrappedKeyboardDelegate.getKeyBelow?.(currentKey);\n    }\n    return currentKey ?? undefined;\n  };\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyBelow?.(key), \"down\"),\n    },\n    getKeyAbove: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyAbove?.(key), \"up\"),\n    },\n    getFirstKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const firstKey = findFirstMatch(\n          wrappedKeyboardDelegate.getFirstKey?.(key, global),\n          \"down\"\n        );\n        return firstKey == null ? matches?.values().next().value : firstKey;\n      },\n    },\n    getLastKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const lastKey = findFirstMatch(\n          wrappedKeyboardDelegate.getLastKey?.(key, global),\n          \"down\"\n        );\n        return lastKey == null\n          ? [...(matches?.keys() || [])].pop() ?? null\n          : lastKey;\n      },\n    },\n  } as { [key in keyof KeyboardDelegate]: { value: KeyboardDelegate[key] } });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n  get id() {\n    return this.key;\n  }\n}\n\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return null as any as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<PartialNode<T>> = (\n    StatelyItem as any\n  ).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { styled } from \"../styled\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nconst GAP = \"0.1875rem\";\nconst StyledItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 0.25rem;\n  gap: ${GAP};\n`;\n\nconst StyledHint = styled.span<{ small?: boolean }>`\n  display: inline-flex;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(theme.commonColors.inactiveTextColor)};\n  padding-left: 0.1rem;\n  font-size: ${({ small }) => small && \"0.9em\"};\n`;\n\nconst StyledGroup = styled.span.attrs({\n  role: \"presentation\" as string,\n})`\n  display: inline-flex;\n  display: flex;\n  align-items: center;\n  gap: ${GAP};\n`;\n/**\n * Generic layout component capturing common use cases of tree or list items.\n * It handles the spacing between parts, and provides styled components for parts that need specific styling.\n * For more flexibility over the order of various pieces of content in list/tree items, there is no specific props\n * for parts. Different parts should just be rendered in children.\n *\n * @example\n * ```tsx\n * <ItemLayout>\n *   <PlatformIcon icon=\"nodes/folder\" />\n *   <HighlightedTextValue />\n *   <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n * </ItemLayout>\n * ```\n * @beta\n */\nexport const ItemLayout = (\n  props: { children: React.ReactNode } & DOMAttributes\n) => {\n  return <StyledItemLayout {...props} />;\n};\n\n/**\n * A more subtle text usually rendered next to the main text in the item.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Hint = StyledHint;\n\n/**\n * Useful when a number of items need to be grouped by a wrapper, e.g. to have a tooltip.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Group = StyledGroup;\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import { RefObject, useEffect } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { RefObject, useImperativeHandle } from \"react\";\n\nexport type CollectionRefProps = {\n  /**\n   * Gives imperative access to selection manager.\n   */\n  selectionManagerRef?: RefObject<SelectionManager>;\n};\n\n/**\n * Common imperative API for collections. Used in Lists at the moment. Tree components implement a different imperative\n * API that can be refactored later for more consistency.\n */\nexport function useCollectionRef(\n  { selectionManagerRef }: CollectionRefProps,\n  state: { selectionManager: SelectionManager }\n) {\n  useImperativeHandle(selectionManagerRef, () => state.selectionManager);\n}\n","import React, { RefObject } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\n/**\n * A solution for connecting a collection to a search input, so that collection can still be navigated by keyboard\n * while the input is focused. It works by replaying certain keyboard events on the collection container and focused\n * item. An alternative approach (which is used in react-aria's useCombobox) is to use useSelectableCollection\n * separately for the input, but the biggest issue with that approach is that it's limiting in the following ways:\n * - Rendering input should be a part of the same component that renders the collection. Having specific components\n *   for use cases that requires a search input is not flexible enough. For example one may want to use SpeedSearchList\n *   or List connected to an input. Also, the input and the collection may need to be in different layouts in different\n *   use cases. Decoupling the rendering of the input and collection is a more flexible solution.\n * - The same options used for collection should be passed to the input field for behavior consistency, and that can be\n *   prone to error. Some of these options, like `keyboardDelegate` can even have a default value in hooks like\n *   `useSelectableList`, which means for making sure the same value is passed to the useSelectableCollection for input,\n *   would require to not use the default value, since the same value can't be accessed.\n *\n * With this event forwarding approach, it's an arrow up or down event would behave exactly like it was triggered on\n * the collection itself, leaving no room for behavior discrepancies. But it has a few drawbacks:\n * - Although small, there is still some coupling between this code and implementation of the collection component.\n *   More specifically, the following things are assumed by this implementation:\n *   - \"Enter\" keys (selection or action) are handled on items, but arrow keys are handled on the collection element.\n *   - \"[data-key] attribute is set on items. That is used to find the element for the focused item (which of course is\n *     not actually focused while the input is).\n */\nexport const useCollectionSearchInput = ({\n  collectionRef,\n  selectionManager,\n}: {\n  /**\n   * ref to the html element of the collection component\n   */\n  collectionRef: RefObject<HTMLElement>;\n  /**\n   * SelectionManager instance, returned from the state management hook for the collection component.\n   * {@link CollectionRefProps.selectionManagerRef} can be used on collection components that implement\n   * `useCollectionRef`, to get a hold of selection manager, from outside.\n   */\n  selectionManager: SelectionManager | null | undefined;\n}): { collectionSearchInputProps: DOMAttributes<HTMLInputElement> } => {\n  const relayEventsToCollection = useEventCallback(\n    (event: React.KeyboardEvent) => {\n      // Relay ArrowUp and ArrowDown to the container\n      if (\n        event.type === \"keydown\" &&\n        (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        collectionRef.current?.dispatchEvent(\n          new KeyboardEvent(event.type, event.nativeEvent)\n        );\n      }\n      // Relay Enter to the focused item\n      else if (event.key === \"Enter\" && selectionManager?.focusedKey) {\n        collectionRef.current\n          ?.querySelector(`[data-key=\"${selectionManager?.focusedKey}\"]`)\n          ?.dispatchEvent(new KeyboardEvent(event.type, event.nativeEvent));\n        event.preventDefault();\n      }\n    }\n  );\n\n  return {\n    collectionSearchInputProps: {\n      onKeyDown: relayEventsToCollection,\n      onKeyUp: relayEventsToCollection,\n      onKeyPress: relayEventsToCollection,\n    },\n  };\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { ForwardedRef } from \"react\";\nimport { amendName, PlatformIcon, PlatformIconProps } from \"./PlatformIcon\";\n\nexport const StyledHoverContainer = styled.span<{\n  hoverContainerSelector?: string;\n}>`\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector\n      ? `${hoverContainerSelector} &`\n      : \"\"} .icon[data-hover] {\n    display: none;\n  }\n\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector ? `${hoverContainerSelector}:hover &` : \"&:hover\"} {\n    .icon {\n      display: none;\n    }\n\n    .icon[data-hover] {\n      display: inline-flex;\n    }\n  }\n`;\n\nconst StyledIconHoverContainer = styled(StyledHoverContainer)`\n  display: inline-flex;\n`;\n\n/**\n * A common use case for PlatformIcons is to have a default icon and a hover icon.\n * This component captures that simple use case, by rendering both icons, and hiding one based on a hover selector.\n *\n * ### Parent hover container\n *\n * If the hover-able element is a parent of the icon, and not the icon itself (i.e., the icon should change if the\n * that parent is hovered), you can use `StyledHoverContainer` to define that parent element:\n *\n * ```tsx\n * const SomeParent = styled(StyledHoverContainer)`...`;\n * <SomeParent><AutoHoverPlatformIcon icon=\"...\" /></SomeParent>\n * ```\n *\n * If the hover-able element is a parent of the icon, with a known selector, you can pass `hoverContainerSelector`,\n * instead of using `StyledHoverContainer`:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector=\"[role=menuitem]\" />\n * ```\n *\n * If the hover container is a styled component, you can have it converted to selector like this:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector={`${MyStyledHoverContainer}`} />\n * ```\n *\n * In all examples above, the hover icon is shown when the parent is hovered, instead of the icon itself.\n *\n */\nexport const AutoHoverPlatformIcon = React.forwardRef(\n  function AutoHoverPlatformIcon(\n    {\n      hoverIcon,\n      hoverContainerSelector,\n      ...props\n    }: PlatformIconProps & {\n      /**\n       * The icon to be used when hovered. If not provided, it will be the \"somethingHovered\" where \"something\" is the `icon`\n       */\n      hoverIcon?: string;\n      hoverContainerSelector?: string;\n    },\n    ref: ForwardedRef<HTMLSpanElement>\n  ) {\n    const className = `icon ${props.className || \"\"}`;\n    return (\n      <StyledIconHoverContainer\n        ref={ref}\n        hoverContainerSelector={hoverContainerSelector}\n      >\n        <PlatformIcon {...props} className={className} />\n        <PlatformIcon\n          {...props}\n          className={className}\n          icon={hoverIcon ?? amendName(props.icon, \"Hover\")}\n          data-hover\n        />\n      </StyledIconHoverContainer>\n    );\n  }\n);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = (\n    [\"Editable\", \"Selected\", \"Pressed\", \"Focused\", \"Disabled\"] as Array<\n      keyof typeof modifiers\n    >\n  )\n    .filter((modifier) =>\n      // Focused or Pressed can't coexist with Disabled\n      modifiers.Disabled ? ![\"Focused\", \"Pressed\"].includes(modifier) : true\n    )\n    .reduce(\n      (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n      \"\"\n    );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  /**\n   * Icon path in intellij platform repo.\n   * If starts with \"/\", the path will be from the repo root. Otherwise, it's relative to \"platform/icons/src\".\n   * \".svg\" extension is optional.\n   */\n  icon: string;\n  /**\n   * Similar to icon, but for dark themes.\n   */\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  relativePath.startsWith(\"/\")\n    ? relativePath.slice(1)\n    : `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n * @example <PlatformIcon icon=\"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme();\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = makeIdsUnique(svg); // UNSAFE! Would require sanitization, or icon sources must be trusted.\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n\n/**\n * If multiple instance of the same icon is rendered at the same time, and the SVG includes\n * url(#...) references to locally defined ids, in some cases the icon is not rendered properly.\n * because of ids colliding. We make sure the ids are unique in each rendered icon.\n */\nfunction makeIdsUnique(svg: string): string {\n  const randomPostfix = (Math.random() * 1000).toFixed(0);\n  const idMatches = svg.matchAll(/id=\"(.*?)\"/g);\n  return [...idMatches].reduce((modifiedSvg, [_, id]) => {\n    const newId = `${id}-${randomPostfix}`;\n    return replaceAll(\n      `id=\"${id}\"`,\n      `id=\"${newId}\"`,\n      replaceAll(`url(#${id})`, `url(#${newId})`, modifiedSvg)\n    );\n  }, svg);\n}\n\nfunction replaceAll(theOld: string, theNew: string, str: string): string {\n  const replaced = str.replace(theOld, theNew);\n  const replacedAgain = replaced.replace(theOld, theNew);\n  if (replaced === replacedAgain) {\n    return replaced;\n  }\n  return replaceAll(theOld, theNew, replacedAgain);\n}\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { MenuTrigger, MenuTriggerProps } from \"@intellij-platform/core/Menu\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst ArrowIcon = styled(PlatformIcon)`\n  position: absolute;\n  right: 1px;\n  bottom: 1px;\n`;\n\ntype IconButtonWithMenuProps = IconButtonProps &\n  Pick<MenuTriggerProps, \"renderMenu\"> & {\n    /**\n     * whether the default arrow should be removed or not. false by default.\n     */\n    noArrow?: boolean;\n  };\n/**\n * Renders an IconButton which opens a menu. by default a down arrow icon is shown as an overlay on the rendered\n * icon, but it can be disabled by passing `noArrow`. It also restores the focus to the previously focused element,\n * when the menu is closed.\n * @param renderMenu: render prop for rendering the menu\n * @param children: the content of the icon button\n * @param noArrow: whether the default arrow should be removed or not. false by default.\n * @param buttonProps: the rest of the props that will be passed down to IconButton\n *\n * TODO: Add story and write test for focus restoration, noArrow, and basic functionality.\n */\nexport const IconButtonWithMenu = ({\n  renderMenu,\n  children,\n  noArrow = false,\n  ...buttonProps\n}: IconButtonWithMenuProps) => {\n  const previouslyFocusedElementRef = useRef<HTMLElement>();\n  return (\n    <MenuTrigger\n      renderMenu={renderMenu}\n      onOpenChange={(open) => {\n        if (!open && previouslyFocusedElementRef.current) {\n          previouslyFocusedElementRef.current.focus();\n        }\n      }}\n    >\n      {(props, ref) => (\n        <IconButton\n          {...mergeProps(buttonProps, props, {\n            onFocus: (e: FocusEvent) => {\n              if (e.relatedTarget && e.relatedTarget instanceof HTMLElement) {\n                previouslyFocusedElementRef.current = e.relatedTarget;\n              }\n            },\n          })}\n          ref={ref}\n        >\n          {children}\n          {!noArrow && <ArrowIcon icon=\"general/dropdown.svg\" />}\n        </IconButton>\n      )}\n    </MenuTrigger>\n  );\n};\n","import React, { ComponentProps, HTMLAttributes, HTMLProps } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"./Theme/Theme\";\n\ninterface Props extends React.ImgHTMLAttributes<HTMLImageElement> {\n  /**\n   * src for when a dark theme is active. if `darkSrc` doesn't have a non-empty string value, src will be used both\n   * for dark and light themes.\n   */\n  darkSrc?: string;\n}\n/**\n * Same as default `img`, but theme aware. Meaning that you can specify different sources for normal and dark mode.\n */\nexport const Img: React.FC<Props> = ({ darkSrc, ...props }) => {\n  const theme = useTheme() as Theme;\n  if (theme.dark) {\n    return <img {...props} src={darkSrc || props.src} />;\n  }\n  return <img {...props} />;\n};\n","import React, {\n  ForwardedRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableOptions, useFocusable } from \"@react-aria/focus\";\nimport { ValidationState } from \"@react-types/shared\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled, css } from \"@intellij-platform/core/styled\";\n\nconst StyledInputBox = styled.div<{\n  disabled?: boolean;\n  focused?: boolean;\n  validationState: InputProps[\"validationState\"];\n  appearance: InputProps[\"appearance\"];\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  min-width: 4rem; // https://jetbrains.github.io/ui/controls/input_field/#28\n  background: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"TextField.disabledBackground\")\n      : theme.color(\"TextField.background\")};\n  border: 1px solid\n    ${({ theme, focused, disabled, validationState }) =>\n      theme.commonColors.border({\n        focused: focused,\n        disabled: disabled,\n        invalid: validationState === \"invalid\",\n      })};\n  box-shadow: 0 0 0 0.125rem\n    ${({ theme, focused = false, validationState, disabled }) =>\n      disabled\n        ? \"transparent\"\n        : theme.commonColors.focusRing({\n            invalid: validationState === \"invalid\",\n            focused: focused,\n          })};\n  border-radius: 1px;\n  cursor: text; // the whole box moves focus to the input\n  overflow: hidden;\n  ${({ appearance, validationState, disabled }) =>\n    appearance === \"embedded\" &&\n    css`\n      border-color: ${validationState !== \"invalid\" && \"transparent\"};\n      box-shadow: ${validationState !== \"invalid\" && \"none\"};\n      background: ${!disabled && \"transparent\"};\n    `};\n`;\n\nconst StyledInput = styled.input<{ disabled?: boolean }>`\n  all: unset;\n  padding: 0.1875rem 0.375rem;\n  flex: 1; // fill in the available space within the input box\n  min-width: 0;\n  line-height: 1rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )};\n  color: ${({ theme, disabled }) =>\n    disabled &&\n    theme.color(\n      \"TextField.inactiveForeground\" as UnknownThemeProp<\"TextField.inactiveForeground\">\n    )};\n\n  caret-color: ${({ theme }) =>\n    theme.color(\n      \"TextField.caretForeground\" as UnknownThemeProp<\"TextField.caretForeground\">\n    )};\n  &::selection {\n    background: ${({ theme }) =>\n      theme.color(\n        \"*.selectionBackground\"\n      )}; // Not checked with the reference impl\n    color: ${({ theme }) =>\n      theme.color(\n        \"*.selectionForeground\"\n      )}; // Not checked with the reference impl\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  }\n`;\n\nconst StyledAddons = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem; /* TODO: check */\n  padding: 1px 0;\n`;\nconst StyledRightAddons = styled(StyledAddons)`\n  margin-right: 0.125rem; /* TODO: check */\n`;\n\nconst StyledLeftAddons = styled(StyledAddons)`\n  margin-left: 0.375rem; /* TODO: check */\n`;\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  validationState?: ValidationState;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n\n  /**\n   * Rendered inside the input box and after the input element.\n   * Used to render [Built-in buttons](https://jetbrains.github.io/ui/controls/built_in_button/).\n   */\n  addonAfter?: React.ReactNode;\n  /**\n   * Rendered inside the input box and before the input element.\n   */\n  addonBefore?: React.ReactNode;\n\n  /**\n   * Ref to the underlying input element\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n\n  /**\n   * Appearance of the input.\n   * - \"ghost\": Without the border and shadow in valid state.\n   * - \"boxed\" With the border and shadow.\n   * @default \"box\"\n   */\n  appearance?: \"embedded\" | \"box\";\n}\n\n/**\n * Bare input, themed, and with a few extra features:\n * - Support for \"invalid\" state ({@param validationState}\n * - Support for autoSelect.\n * - Disables spell check by default. It can be overwritten.\n * Use {@link InputField} for more features like an associated label, error message and context help.\n */\nexport const Input = React.forwardRef(function Input(\n  {\n    validationState,\n    autoSelect,\n    addonBefore,\n    addonAfter,\n    style,\n    className,\n    inputRef: inputRefProp,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    autoFocus,\n    appearance,\n    ...props\n  }: InputProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const { focusableProps } = useFocusable(\n    {\n      isDisabled: props.disabled,\n      autoFocus,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    } as FocusableOptions,\n    inputRef\n  );\n  const [isFocused, setIsFocused] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setIsFocused,\n  });\n\n  useEffect(() => {\n    if (autoSelect) {\n      inputRef.current.select();\n    }\n  }, [autoSelect]);\n\n  return (\n    <StyledInputBox\n      ref={ref}\n      spellCheck={false}\n      appearance={appearance}\n      {...mergeProps(focusWithinProps, {\n        className,\n        style,\n        onMouseDown: (event: MouseEvent) => {\n          if (event.target !== inputRef.current) {\n            event.preventDefault();\n            inputRef.current.focus();\n          }\n        },\n      })}\n      focused={isFocused}\n      validationState={validationState}\n      disabled={props.disabled}\n    >\n      {addonBefore && <StyledLeftAddons>{addonBefore}</StyledLeftAddons>}\n      <StyledInput ref={inputRef} {...mergeProps(props, focusableProps)} />\n      {addonAfter && <StyledRightAddons>{addonAfter}</StyledRightAddons>}\n    </StyledInputBox>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledLabel = styled.label<{ disabled?: boolean }>`\n  color: ${({ theme, disabled }) => theme.commonColors.label({ disabled })};\n`;\n","import React, {\n  ChangeEvent,\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n} from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { AriaFieldProps, useField } from \"@react-aria/label\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableProps } from \"@react-types/shared\";\nimport { Label } from \"@intellij-platform/core/Label\";\nimport {\n  PositionedTooltipTrigger,\n  ValidationTooltip,\n} from \"@intellij-platform/core/Tooltip\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField/Input\";\n\ntype LabelPlacement = \"above\" | \"before\";\n\nexport interface InputFieldProps\n  extends Omit<AriaFieldProps, \"labelElementType\">,\n    FocusableProps,\n    Pick<InputProps, \"addonBefore\" | \"addonAfter\" | \"inputRef\"> {\n  /**\n   * className applied on the field's wrapper div.\n   */\n  className?: string;\n  /**\n   * style applied on the field's wrapper div.\n   */\n  style?: CSSProperties;\n  /**\n   * Label to be associated with the input.\n   */\n  label?: React.ReactNode;\n  /**\n   * Context help, shown below the input. A typical use case is\n   * [to provide example values](https://jetbrains.github.io/ui/principles/context_help/#07).\n   */\n  contextHelp?: React.ReactNode;\n  /**\n   * Placement of the label with respect to the input box.\n   */\n  labelPlacement?: LabelPlacement;\n\n  /**\n   * Whether the input is disabled. Use this prop\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Convenient prop to be used instead of inputProps.placeholder\n   **/\n  placeholder?: string;\n  /**\n   * Convenient prop to be used instead of inputProps.value\n   **/\n  value?: HTMLProps<HTMLInputElement>[\"value\"];\n  /**\n   * Convenient prop to be used instead of inputProps.defaultValue\n   **/\n  defaultValue?: HTMLProps<HTMLInputElement>[\"defaultValue\"];\n  /**\n   * Convenient prop to be used instead of inputProps.onChange. It also calls the passed callback with the\n   * change value instead of input.\n   **/\n  onChange?: (newValue: string) => void;\n  /**\n   * Props to be passed to the underlying input element.\n   **/\n  inputProps?: Omit<\n    HTMLProps<HTMLInputElement>,\n    \"as\" | \"ref\" | \"disabled\" //isDisabled should be used\n  >;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n}\n\nconst StyledInputContainer = styled.div<{ labelPlacement?: LabelPlacement }>`\n  display: inline-flex;\n  flex-direction: ${({ labelPlacement }) =>\n    labelPlacement === \"above\" ? \"column\" : \"row\"};\n  align-items: start;\n  gap: 0.375rem;\n`;\n\nconst StyledLabel = styled(Label)`\n  margin-top: 0.25rem;\n  line-height: 1.2;\n`;\nconst StyledContextHelp = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n`;\n\nconst StyledBoxAndContextHelpWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: 0.25rem; /* Not checked with the reference impl */\n`;\n\n/**\n * An input box with an associated label, error message, and context help.\n */\nexport const InputField = React.forwardRef(function InputField(\n  {\n    className,\n    style,\n    labelPlacement = \"before\",\n    contextHelp,\n    inputProps = {},\n    addonBefore,\n    addonAfter,\n    inputRef,\n    ...props\n  }: InputFieldProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { fieldProps, errorMessageProps, labelProps, descriptionProps } =\n    useField(props);\n\n  return (\n    <StyledInputContainer\n      ref={ref}\n      labelPlacement={labelPlacement}\n      className={className}\n      style={style}\n    >\n      <StyledLabel {...labelProps} disabled={props.isDisabled}>\n        {props.label}\n      </StyledLabel>\n      <StyledBoxAndContextHelpWrapper>\n        <PositionedTooltipTrigger\n          placement=\"top start\"\n          crossOffset={36}\n          showOnFocus\n          isDisabled={!props.errorMessage}\n          tooltip={\n            <ValidationTooltip>\n              <div {...errorMessageProps}>{props.errorMessage}</div>\n            </ValidationTooltip>\n          }\n          delay={0}\n        >\n          <Input\n            inputRef={inputRef}\n            placeholder={props.placeholder}\n            disabled={props.isDisabled}\n            validationState={props.validationState}\n            autoSelect={props.autoSelect}\n            autoFocus={props.autoFocus}\n            addonAfter={addonAfter}\n            addonBefore={addonBefore}\n            {...mergeProps(fieldProps, inputProps, {\n              value: props.value,\n              defaultValue: props.defaultValue,\n              onChange: (e: ChangeEvent<HTMLInputElement>) =>\n                props.onChange?.(e.target.value),\n            })}\n          />\n        </PositionedTooltipTrigger>\n        {contextHelp && (\n          <StyledContextHelp {...descriptionProps}>\n            {contextHelp}\n          </StyledContextHelp>\n        )}\n      </StyledBoxAndContextHelpWrapper>\n    </StyledInputContainer>\n  );\n});\n","import { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst getDefaultLinkColor = ({ theme }: { theme: Theme }) =>\n  theme.commonColors.linkForegroundEnabled;\n\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n  outline: none;\n  // &:focus-visible didn't work as expected, so FocusRing is used\n  &.focus-visible {\n    outline: 1px solid\n      ${({ theme }) =>\n        theme.color(\n          \"Link.focusedBorderColor\" as UnknownThemeProp<\"Link.focusedBorderColor\">,\n          theme.commonColors.focusBorderColor\n        )};\n    border-radius: 2px; // Registry.intValue(\"ide.link.button.focus.round.arc\", 4)\n  }\n  color: ${getDefaultLinkColor};\n\n  &:hover,\n  &.hover /* for testing purposes*/ {\n    text-decoration: underline;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.hoverForeground\",\n        theme.color(\n          \"link.hover.foreground\" as UnknownThemeProp<\"link.hover.foreground\">,\n          \"\" /*FIXME: check*/\n        )\n      )};\n  }\n  &:active,\n  &.active {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.pressedForeground\",\n        theme.color(\n          \"link.pressed.foreground\" as UnknownThemeProp<\"link.pressed.foreground\">,\n          !theme.dark ? \"#F00000\" : \"#BA6F25\"\n        )\n      )};\n  }\n  &:disabled,\n  &.disabled {\n    cursor: default;\n    text-decoration: none;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.disabledForeground\" as UnknownThemeProp<\"Link.disabledForeground\">,\n        theme.color(\n          \"Label.disabledForeground\",\n          theme.color(\"Label.disabledText\", \"#999\")\n        )\n      )};\n  }\n  // We may need to refine this to allow passing visited as a prop for links that don't have href, and not apply the\n  // styles in that case, since it seems no href is considered visited by default. Although, in all main themes\n  // Link.visitedForeground is set to the default link color.\n  &:visited,\n  &.visited {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.visitedForeground\",\n        theme.color(\n          \"link.visited.foreground\" as UnknownThemeProp<\"link.visited.foreground\">,\n          !theme.dark ? \"#800080\" : \"#9776A9\"\n        )\n      )};\n  }\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { AriaLinkProps } from \"@react-types/link\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { FocusRing, useFocusable } from \"@react-aria/focus\";\nimport { StyledLink } from \"@intellij-platform/core/Link/StyledLink\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\n\nexport type LinkProps = AriaLinkProps & {\n  isDisabled?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n  excludeFromTabOrder?: boolean;\n};\n\n/**\n * A focusable span in style of [Link](https://jetbrains.github.io/ui/controls/link/) and with accessibility role of link.\n *\n * TODO and known issues:\n * - in the reference impl, Space presses the link, Enter doesn't. It's vice versa here, because of how usePress is implemented.\n * - Support for External links\n * - Support for Anchor elements?\n *\n * Unknowns:\n * - What are ActionLink and DefaultLinkButtonUI?\n * - What is HyperLinkLabel compared to LabelLink (which was looked into in implementation of this component)?\n */\nexport const Link = React.forwardRef(\n  (\n    props: LinkProps,\n    forwardedRef: ForwardedRef<HTMLAnchorElement>\n  ): React.ReactElement => {\n    const ref = useForwardedRef(forwardedRef);\n\n    const { focusableProps } = useFocusable(props, ref);\n    const { pressProps, isPressed } = usePress({ ...props, ref });\n    const domProps = filterDOMProps(props, { labelable: true });\n    const interactionHandlers = mergeProps(focusableProps, pressProps);\n\n    return (\n      <FocusRing focusRingClass=\"focus-visible\">\n        <StyledLink\n          {...mergeProps(focusableProps, interactionHandlers, domProps)}\n          as=\"span\"\n          role=\"link\"\n          ref={ref}\n          // maybe use clsx\n          className={`${props.isDisabled ? \"disabled\" : \"\"} ${\n            isPressed ? \"active\" : \"\"\n          } ${props.className || \"\"}`}\n          aria-disabled={props.isDisabled || undefined}\n          tabIndex={\n            !props.isDisabled ? (props.excludeFromTabOrder ? -1 : 0) : undefined\n          }\n        >\n          {props.children}\n        </StyledLink>\n      </FocusRing>\n    );\n  }\n);\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable, Node } from \"@react-types/shared\";\nimport React, { ForwardedRef, Key } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { useListState } from \"./useListState\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { useListVirtualizer } from \"@intellij-platform/core/List/useListVirtualizer\";\nimport { ListContext } from \"@intellij-platform/core/List/ListContext\";\n\nexport type ListProps<T extends object> = Omit<\n  Omit<AriaListBoxProps<T>, \"disallowEmptySelection\">,\n  keyof AsyncLoadable\n> &\n  CollectionRefProps & {\n    /**\n     * fills the available horizontal or vertical space, when rendered in a flex container.\n     */\n    fillAvailableSpace?: boolean;\n    /**\n     * When true, shows the list in focused style, even when it's not focused. A common use case is when the list\n     * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n     * keyboard events as if the list was focused.\n     * Another (maybe questionable) use case is master detail views, where the master view is shown as focused, even\n     * when the details view has physical focus.\n     */\n    showAsFocused?: boolean;\n    allowEmptySelection?: boolean;\n    /**\n     * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n     * Enter not implemented yet :D\n     */\n    onAction?: (key: Key) => void;\n\n    /**\n     * Useful when list items have a custom height, to hint layout calculation logic about the item height which\n     * increases rendering efficiency and also prevents flash of items with wrong height.\n     */\n    estimatedItemHeight?: number;\n\n    className?: string;\n  };\n\n/**\n * List view\n */\nexport const List = React.forwardRef(function List<T extends object>(\n  {\n    allowEmptySelection = false,\n    fillAvailableSpace = false,\n    estimatedItemHeight,\n    className,\n    ...inputProps\n  }: ListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n  const { listProps, listContext } = useList(\n    {\n      ...props,\n      isVirtualized: true,\n    },\n    state,\n    ref\n  );\n\n  const {\n    virtualizerProps: { children: renderNode, ...virtualizerProps },\n  } = useListVirtualizer({\n    state,\n    estimatedItemHeight,\n    renderItem: (item) => <ListItem key={item.key} item={item} />,\n  });\n\n  return (\n    <ListContext.Provider value={listContext}>\n      <StyledList\n        as={Virtualizer<Node<any>, any>}\n        {...virtualizerProps}\n        {...listProps}\n        fillAvailableSpace={fillAvailableSpace}\n        className={className}\n        ref={ref}\n      >\n        {renderNode}\n      </StyledList>\n    </ListContext.Provider>\n  );\n});\n","import React, { Key } from \"react\";\nimport { ListState } from \"@react-stately/list\";\n\nexport type ListContextType<T> = {\n  state: ListState<T>;\n  focused: boolean;\n  onAction: ((key: Key) => void) | undefined;\n};\n\nexport const ListContext = React.createContext<ListContextType<any> | null>(\n  null\n);\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ elementType: \"li\", orientation: \"vertical\" })\n        .separatorProps}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport { StyledListItem } from \"./StyledListItem\";\nimport { ListContext } from \"@intellij-platform/core/List/ListContext\";\n\nexport interface ListItemProps<T> {\n  item: Node<T>;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({ item, children }: ListItemProps<T>) {\n  const { state, focused: listFocused, onAction } = useContext(ListContext)!;\n  const ref = React.useRef(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isSelected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction: () => onAction?.(item.key),\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={isSelected}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      aria-selected={isSelected}\n      {...pressProps}\n      ref={ref}\n    >\n      <ItemStateContext.Provider\n        value={{\n          isDisabled,\n          isSelected,\n          isContainerFocused: listFocused,\n          node: item,\n        }}\n      >\n        {children || item.rendered}\n      </ItemStateContext.Provider>\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\ntype StyledListProps = {\n  fillAvailableSpace?: boolean;\n};\nexport const StyledList = styled.div\n  .attrs<StyledListProps>({ role: \"list\" })\n  .withConfig<StyledListProps>({\n    shouldForwardProp: (prop) => prop !== \"fillAvailableSpace\",\n  })<StyledListProps>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.div.attrs<StyledListItemProps>({\n  role: \"listitem\",\n})<StyledListItemProps>`\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"List.foreground\" as UnknownThemeProp<\"List.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"List.selectionForeground\" as UnknownThemeProp<\"List.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"List.selectionBackground\" as UnknownThemeProp<\"List.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"List.selectionInactiveForeground\" as UnknownThemeProp<\"List.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"List.selectionBackgroundInactive\" as UnknownThemeProp<\"List.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor: theme.asCurrentBackground(backgroundColor),\n      color,\n    };\n  }};\n  position: relative;\n  display: flex;\n  white-space: nowrap;\n  padding: 0 0.5rem; // themed?\n  line-height: 1.25rem;\n  outline: none;\n  cursor: default;\n  min-width: min-content; // Needed for content sizing for when list/tree is used inside popup or modal window\n`;\n","import { AriaSelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { Key, useEffect, useMemo, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { ListContextType } from \"@intellij-platform/core/List/ListContext\";\n\nexport interface ListProps\n  extends Omit<\n      AriaSelectableListOptions,\n      | \"disallowEmptySelection\"\n      | \"selectOnFocus\"\n      | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n      | \"collection\" // Grouped as state, the second argument, like in useListBox\n      | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n      | \"ref\" // Third argument\n    >,\n    CollectionRefProps {\n  allowEmptySelection?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n  showAsFocused?: boolean;\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  { onAction, showAsFocused, ...props }: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is going to be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and allowEmptySelection is false.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      !props.allowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.setFocusedKey(firstKey);\n      state.selectionManager.select(firstKey);\n    }\n  }, [!props.allowEmptySelection]);\n\n  const onActionCallback = useEventCallback(onAction ?? (() => {}));\n  const listContext: ListContextType<T> = useMemo(\n    () => ({\n      state,\n      focused: Boolean(focused || showAsFocused),\n      onAction: onActionCallback,\n    }),\n    [state, focused, showAsFocused]\n  );\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    listContext,\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  KeyboardDelegate,\n  Node,\n} from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  MultipleSelectionManager,\n  SelectionManager,\n} from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { useCollectionAutoScroll } from \"@intellij-platform/core/Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T> & CollectionRefProps\n): ListState<T> {\n  const state = originalUseListState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  useCollectionRef(props, state);\n  return state;\n}\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.div(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { ReusableView } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\nimport React, { ReactNode, useRef } from \"react\";\nimport {\n  layoutInfoToStyle,\n  useVirtualizerItem,\n  VirtualizerItem,\n  VirtualizerProps,\n} from \"@react-aria/virtualizer\";\nimport { StyledListSectionHeader } from \"@intellij-platform/core/List/StyledListSectionHeader\";\n\ninterface SectionProps<T> {\n  reusableView: ReusableView<Node<T>, unknown>;\n  header: ReusableView<Node<T>, unknown>;\n  children?: ReactNode;\n}\n\nfunction ListSection<T extends object>({\n  reusableView,\n  header,\n  children,\n}: SectionProps<T>) {\n  const headerRef = useRef<HTMLDivElement>(null);\n  useVirtualizerItem({\n    reusableView: header,\n    ref: headerRef,\n  });\n  return (\n    <>\n      <StyledListSectionHeader\n        role=\"presentation\"\n        ref={headerRef}\n        style={layoutInfoToStyle(header.layoutInfo!, \"ltr\")}\n      >\n        {reusableView.content.rendered}\n      </StyledListSectionHeader>\n      <div\n        key={reusableView.key}\n        style={layoutInfoToStyle(reusableView.layoutInfo!, \"ltr\")}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport const renderWrapper: VirtualizerProps<\n  Node<any>,\n  unknown\n>[\"renderWrapper\"] = (parent, reusableView, children, renderChildren) => {\n  if (reusableView.viewType === \"section\") {\n    return (\n      <ListSection\n        key={reusableView.key}\n        reusableView={reusableView}\n        header={children.find((c) => c.viewType === \"header\")!}\n      >\n        {renderChildren(children.filter((c) => c.viewType === \"item\"))}\n      </ListSection>\n    );\n  }\n  return (\n    <VirtualizerItem\n      key={reusableView.key}\n      reusableView={reusableView}\n      parent={parent ?? undefined}\n    />\n  );\n};\n","import React, { HTMLAttributes, useMemo } from \"react\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\nimport { ListState } from \"@react-stately/list\";\nimport { Node } from \"@react-types/shared\";\nimport { renderWrapper } from \"./renderWrapper\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\";\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\nexport const useListVirtualizer = <T extends object>({\n  renderItem,\n  estimatedItemHeight = 20,\n  state,\n}: {\n  renderItem: (item: ItemNode<T>) => React.ReactNode;\n  estimatedItemHeight?: number;\n  state: ListState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<Node<T>, unknown>,\n    keyof HTMLAttributes<HTMLElement>\n  > & { children: (type: string, content: Node<T>) => React.ReactNode };\n} => {\n  const layout = useMemo(\n    () =>\n      new VariableWidthListLayout<T>({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: estimatedItemHeight,\n        estimatedHeadingHeight: 20,\n        dividerHeight: 2,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      children: (type, item) => {\n        if (type === \"item\") {\n          return renderItem(item as ItemNode<T>);\n        }\n        if (type === \"divider\") {\n          return <ListDivider key={item.key} />;\n        }\n      },\n      renderWrapper,\n\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { HTMLAttributes, HTMLProps } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayTriggerProps } from \"@react-types/overlays\";\n\nimport { useContextMenu } from \"./useContextMenu\";\nimport { MenuOverlay } from \"./MenuOverlay\";\n\ninterface ContextMenuContainerProps extends HTMLProps<HTMLDivElement> {\n  /**\n   * Will be called to return the Menu when context menu is triggered. Use {@link Menu} component to render a menu.\n   */\n  renderMenu: () => React.ReactNode;\n  /**\n   * If children is a function, context menu props is passed to it, to be passed to the underlying element.\n   * Otherwise, a div container will be rendered.\n   */\n  children:\n    | React.ReactNode\n    | ((props: HTMLAttributes<HTMLElement>) => React.ReactNode);\n}\n\n/**\n * A generic container for context menu. It's the same as a normal div, only with an additional `renderMenu` prop,\n * to be used to render context menu, when it's triggered.\n * Closes the menu when a menu action is triggered.\n */\nexport const ContextMenuContainer = ({\n  children,\n  renderMenu,\n  ...props\n}: ContextMenuContainerProps) => {\n  const state = useMenuTriggerState({} as OverlayTriggerProps);\n\n  const { overlayProps, containerProps, overlayRef } = useContextMenu(\n    {},\n    state\n  );\n  const allProps = mergeProps(props, containerProps);\n  return (\n    <>\n      {typeof children === \"function\" ? (\n        children(allProps)\n      ) : (\n        <div {...allProps}>{children}</div>\n      )}\n      <MenuOverlay\n        state={state}\n        overlayRef={overlayRef}\n        overlayProps={overlayProps}\n        restoreFocus\n      >\n        {renderMenu()}\n      </MenuOverlay>\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { useOverlay } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { areInNestedOverlays } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Functionality and accessibility of context menu.\n */\nexport const useContextMenu = (\n  { isDisabled = false }: { isDisabled?: boolean },\n  state: MenuTriggerState\n) => {\n  /**\n   * NOTE: not using useMenuTrigger because:\n   * - There is no option to have a trigger like this: \"right click + long press only by touch\" which seems to be the\n   *   reasonable trigger for context menu. If we want to use it just for long press, we could disable it if it's not\n   *   a touch device, but that would be suboptimal, since both touch and mouse can be available, and it should depend\n   *   not on availability of touch, but on the triggered event type. Plus, isDisabled is broken in v<3.5.0\n   * - It's not quite clear at the moment, if the aria attributes that useMenuTrigger sets would be applicable in case\n   *   of this context menu component too. the trigger is not the container. For example, if there is a list rendered\n   *   inside, the selected item would be the trigger. Maybe even this component, as a container for context menu\n   *   is not the best way to allow for context menu, when comes to a11y concerns. For now, we skip a11y props of the\n   *   trigger. A11y props of the menu itself (e.g. aria-label) would also be up to the usage of this component.\n   *\n   *   TODO: add support for long touch\n   */\n  const onContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    // NOTE: we can't use offsetX/offsetY, because it would depend on the exact target that was clicked.\n    if (!state.isOpen) {\n      state.open(null);\n    }\n    updatePosition(e);\n  };\n\n  const overlayRef = useRef(null);\n\n  const { overlayProps: positionProps, updatePosition } =\n    useMouseEventOverlayPosition({\n      overlayRef,\n      placement: \"bottom start\",\n      // shouldFlip should be false, but it doesn't work as expected. Overlay container is rendered within the view port\n      // but the menu overflows from the overlay container\n      shouldFlip: true,\n      offset: -8,\n      isOpen: state.isOpen,\n    });\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        return !areInNestedOverlays(overlayRef.current, element);\n      },\n    },\n    overlayRef\n  );\n\n  const containerProps: React.HTMLAttributes<HTMLElement> = isDisabled\n    ? {}\n    : { onContextMenu };\n  return {\n    /**\n     * props to be applied on the container element which is supposed to have the context menu\n     */\n    containerProps,\n    /**\n     * The ref to be applied on the menu overlay wrapper. It's usually an input instead of an output in similar\n     * react-aria hooks, but it seemed unnecessary here.\n     */\n    overlayRef,\n    /**\n     * props to be applied on the menu overlay wrapper.\n     */\n    overlayProps: mergeProps(overlayProps, positionProps),\n  };\n};\n","import { Item, PartialNode, Section } from \"@react-stately/collections\";\nimport { Item as Item2 } from \"./Item\";\nimport {\n  CollectionBase,\n  CollectionElement,\n  ItemProps,\n  SectionProps,\n} from \"@react-types/shared\";\nimport React from \"react\";\n\nfunction* patchCollectionItem<T>(nodes: Generator<PartialNode<T>>) {\n  for (const partialNode of nodes)\n    yield {\n      ...partialNode,\n      *childNodes() {\n        const result2 = partialNode.childNodes?.();\n        if (result2) {\n          for (const partialChildNode of result2) {\n            const { type, ...partialChildNodeWithoutType } = partialChildNode;\n            yield partialChildNodeWithoutType;\n          }\n        }\n      },\n    };\n}\n\nconst PatchedItem = Item.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedItem.getCollectionNode = function getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Item.getCollectionNode(props, context));\n};\n\nconst PatchedSection = Section.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedSection.getCollectionNode = function getCollectionNode<T>(\n  props: SectionProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Section.getCollectionNode(props, context));\n};\nfunction convertCollectionElement<T>(\n  result: CollectionElement<T> | React.ReactNode\n): CollectionElement<T> {\n  if (\n    React.isValidElement(result) &&\n    (result.type === Item || result.type === Item2)\n  ) {\n    return React.createElement(\n      PatchedItem,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as ItemProps<T>),\n      },\n      convertChildren(result.props.children)\n    ) as CollectionElement<T>;\n  }\n  if (React.isValidElement(result) && result.type === Section) {\n    return React.createElement(\n      PatchedSection,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as SectionProps<T>),\n      } as any,\n      convertChildren((result.props as any).children)\n    ) as CollectionElement<T>;\n  }\n  return result as CollectionElement<T>;\n}\n\nfunction convertChildren<T>(children: React.ReactNode): React.ReactNode {\n  return Array.isArray(children)\n    ? // NOTE: We intentionally avoid using React.Children.map as it messes with keys.\n      children.map(convertChildren)\n    : convertCollectionElement(children);\n}\n\n/**\n * CollectionBuilder expects child type to be the same as parent type, which is weird in the first place:\n * https://github.com/adobe/react-spectrum/blob/cae83ff95f2f709b761c70d47ace96d6346ed873/packages/%40react-stately/collections/src/CollectionBuilder.ts#L148\n * On the other hand, the default Item components sets the `type` to item, for all child PartialNode objects:\n * https://github.com/adobe/react-spectrum/blob/c49d9819adc2cb63377f39557352440c72072caf/packages/%40react-stately/collections/src/Item.ts#L40-L54\n * Which is also a little unexpected, as in many nested collections, an item can have all types of children.\n * This function patches that, replacing Item elements with PatchedItem element which doesn't set type on children\n * PartialNodes.\n */\nexport function patchCollectionProps<T>({\n  children,\n  ...props\n}: CollectionBase<T>): CollectionBase<T> {\n  return {\n    ...props,\n    children:\n      typeof children === \"function\"\n        ? (node: T) => convertChildren(children(node)) as CollectionElement<T>\n        : (convertChildren(children) as CollectionElement<T>),\n  };\n}\n","import React, { CSSProperties, Key, RefObject, useContext } from \"react\";\nimport { AriaMenuOptions, useMenu as useMenuAria } from \"@react-aria/menu\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { patchCollectionProps } from \"@intellij-platform/core/Collections/patchCollectionProps\";\nimport { TreeProps, useTreeState } from \"../Tree/useTreeState\"; // shared dependency between tree and menu, that could be lifted up import {Submenu} from '@intellij-platform/core/Menu/Submenu'\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { SubmenuProps } from \"./Submenu\"; // internal export\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key; // FIXME: should be keys\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void; // FIXME: should be keys\n  defaultExpandedKey?: Key; // FIXME: should be keys\n  /**\n   * @deprecated\n   */\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n\n  /**\n   * Defines the press behaviour (either by mouse or by pressing Enter when focused) on menu items with submenu.\n   * By default (undefined), pressing or hovering over a menu item with submenu, opens the submenu.\n   * When set to \"toggle\", pressing a menu item with submenu will toggle the submenu. Hovering over such items will\n   * no longer open the submenu.\n   * When set to \"action\", pressing a menu item with submenu will call onAction for that item, and closes the menu.\n   * Hovering over such items will no longer open the submenu.\n   *\n   * In all cases, pressing the right arrow will always open the submenu.\n   */\n  submenuBehavior?: \"default\" | \"toggleOnPress\" | \"actionOnPress\";\n\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n\n  /**\n   * Minimum width of the menu\n   * @default: 120px\n   */\n  minWidth?: CSSProperties[\"minWidth\"];\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\nexport const MenuContext = React.createContext<\n  Pick<\n    MenuProps<unknown>,\n    \"onClose\" | \"onAction\" | \"submenuBehavior\" | \"autoFocus\"\n  > & {\n    itemWrapper?: (\n      renderedItem: React.ReactNode,\n      item: Node<unknown>\n    ) => React.ReactNode;\n    renderSubmenu?: (props: SubmenuProps<unknown>) => React.ReactNode;\n  }\n>({});\n\nexport function useMenu<T>(\n  {\n    onAction: onActionProp,\n    submenuBehavior = \"default\",\n    ...props\n  }: MenuProps<T> & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { close } = useContext(MenuOverlayContext);\n  const onClose = () => {\n    props.onClose?.();\n    close();\n  };\n  const onAction = (key: Key) => {\n    if (\n      // The following check should have been in useMenu, but it's not currently. Probably because they haven't yet\n      // covered nested menus.\n      !state.collection.getItem(key)?.hasChildNodes\n    ) {\n      return onActionProp?.(key);\n    } else if (submenuBehavior === \"actionOnPress\") {\n      onClose();\n      return onActionProp?.(key);\n    }\n  };\n  const menuContextValue: React.ContextType<typeof MenuContext> = {\n    submenuBehavior,\n    autoFocus: props.autoFocus,\n    onAction,\n    onClose,\n  };\n  const { menuProps } = useMenuAria(\n    { ...props, onAction, onClose },\n    state,\n    ref\n  );\n\n  return {\n    menuProps,\n    menuContextValue,\n  };\n}\n\nexport function useMenuState<T extends object>(\n  props: TreeProps<T> &\n    Pick<\n      MenuProps<T>,\n      \"expandedKey\" | \"defaultExpandedKey\" | \"onExpandedKeyChange\"\n    >\n) {\n  props = patchCollectionProps(props);\n  return useTreeState({\n    ...props,\n    childExpansionBehaviour: \"single\",\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n}\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also, there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n */\nexport function Menu<T extends object>({ minWidth, ...props }: MenuProps<T>) {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useMenuState(props);\n  const { menuContextValue, menuProps } = useMenu(props, state, ref);\n\n  return (\n    /**\n     * MenuContext is used to pass onAction and onClose to be passed to useMenu in submenus.\n     * That's needed because in useMenuItem onAction and onClose are read off a WeakMap which has the menu state\n     * (TreeState) as key. So we have to pass onAction and onClose everytime we call useMenu in submenus, to let the\n     * menu items in that submenu access the right value of onAction and onClose. To avoid drilling these props down,\n     * we keep it in a context.\n     */\n    <MenuContext.Provider value={menuContextValue}>\n      <StyledMenu\n        {...menuProps}\n        ref={ref}\n        style={{ minWidth }}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        {renderMenuNodes(state, [...state.collection])}\n      </StyledMenu>\n    </MenuContext.Provider>\n  );\n}\n","import React, { HTMLAttributes, ReactNode, RefObject, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const hasSubmenu = item.hasChildNodes;\n  const { menuItemProps: ariaMenuItemProps, ...result } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: hasSubmenu ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n\n  // useMenuItem in react aria utilizes useHover to focus item on hover. The logic there conflicts with nested menus\n  // requirements (at least based on how nested menu is implemented here currently). Also, submenuBehavior requires\n  // some more customization. So we delete the handlers set by useHover in useMenuItem, and add a custom useHover.\n  delete ariaMenuItemProps.onMouseEnter;\n  delete ariaMenuItemProps.onPointerEnter;\n\n  if (submenuBehavior === \"default\" && isExpanded) {\n    // When menu item has its submenu opened, clicking it should not move focus or do anything.\n    delete ariaMenuItemProps.onPointerDown;\n  }\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled,\n    onHoverStart: () => {\n      const isAnySubmenuOpen = [...state.expandedKeys].some(\n        (expandedKey) =>\n          state.collection.getItem(expandedKey)?.parentKey === item.parentKey\n      );\n\n      if (submenuBehavior === \"default\" && !isExpanded) {\n        state.toggleKey(item.key);\n      }\n\n      if (!isFocusVisible()) {\n        const shouldFocus =\n          submenuBehavior === \"default\" ? !isExpanded : !isAnySubmenuOpen;\n        if (shouldFocus) {\n          state.selectionManager.setFocused(true);\n        }\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  return {\n    ...result,\n    menuItemProps: mergeProps(\n      hasSubmenu\n        ? {\n            \"aria-expanded\": isExpanded,\n            \"aria-haspopup\": \"menu\",\n          }\n        : {},\n      ariaMenuItemProps,\n      hoverProps,\n      keyboardProps,\n      submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n    ),\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...menuItemProps}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using Overlay:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         *\n         */\n        <Overlay\n          OverlayComponent={\n            /**\n             *  The FocusScope included in the default Overlay, messes with a particular expected behavior. So we use\n             *  SimpleOverlay, which just renders its children as a portal. There may be a better solution for that\n             *  problem, which would eliminate the need for the funky `OverlayComponent` prop on our `Overlay`\n             *  component. Something to look into in the future.\n             */\n            SimpleOverlay\n          }\n        >\n          <div ref={nestedMenuRef} {...positionProps}>\n            {renderSubmenu({ parentState: state, rootKey: item.key })}\n          </div>\n        </Overlay>\n      )}\n    </>\n  );\n}\n\n/**\n * A replacement for react-aria Overlay, which doesn't render FocusScope\n */\nfunction SimpleOverlay({\n  children,\n  portalContainer = document.body,\n}: {\n  children: ReactNode;\n  portalContainer?: Element | undefined;\n}) {\n  return ReactDOM.createPortal(children, portalContainer);\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <Overlay>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </Overlay>\n  );\n}\n","import React, { HTMLAttributes, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\nimport { AriaButtonProps } from \"@react-types/button\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  // TODO: replace render function children with normal children, and utilize PressResponder. Add a story for the\n  //  edge case of custom trigger, using PressResponder\n  children: (\n    props: HTMLAttributes<HTMLButtonElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean;\n  /**\n   * By default, the menu is positioned relative to the trigger. `positioningTargetRef` can be used to have the menu\n   * positioned to another element. An example use case is when the menu trigger is a button inside some list item or\n   * text box, but the menu semantically belongs to the container list item or text box.\n   */\n  positioningTargetRef?: React.RefObject<HTMLElement>;\n  renderMenu: (props: {\n    menuProps: React.HTMLAttributes<HTMLElement>;\n  }) => React.ReactNode;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = true,\n  preventFocusOnPress = true,\n  positioningTargetRef,\n  ...otherProps\n}) => {\n  const menuTriggerProps: AriaMenuTriggerProps = {\n    ...otherProps,\n    direction,\n    align,\n    shouldFlip,\n  };\n  const state = useMenuTriggerState(menuTriggerProps);\n  const triggerRef = React.useRef(null);\n  const overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  const { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  const ariaButtonProps: AriaButtonProps<\"button\"> = {\n    ...triggerProps,\n    // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n    preventFocusOnPress,\n  };\n  const { buttonProps } = useButton(ariaButtonProps, triggerRef);\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: positioningTargetRef ?? triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<AriaMenuTriggerProps>[\"direction\"],\n  align: Required<AriaMenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import React, {\n  HTMLAttributes,\n  RefObject,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport {\n  mergeProps,\n  useLayoutEffect,\n  useResizeObserver,\n} from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { ListCollection } from \"@react-stately/list\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  useCollectionSpeedSearch,\n  CollectionSpeedSearchMatches,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchInput,\n  SpeedSearchPopupProps,\n  SpeedSearchState,\n} from \"@intellij-platform/core/SpeedSearch\";\n\nimport { StyledMenu } from \"./StyledMenu\";\nimport { MenuContext, MenuProps, useMenu, useMenuState } from \"./Menu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { SubmenuProps, useSubmenu } from \"./Submenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuKeyboardDelegate } from \"./_useSubmenu\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledVerticalSeparator } from \"@intellij-platform/core/StyledSeparator\";\n\nexport interface SpeedSearchMenuProps<T>\n  extends Omit<MenuProps<T>, \"submenuBehavior\"> {\n  submenuBehavior?: Exclude<MenuProps<T>[\"submenuBehavior\"], \"default\">;\n  /**\n   * Text to show when the filtering is active but no match is found for the current query.\n   * @default \"Nothing to show\"\n   */\n  emptyText?: React.ReactNode;\n}\n\nconst StyledItemsContainer = styled.ul`\n  all: unset;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst StyledSearchFieldWrapper = styled.div`\n  flex-shrink: 0;\n  padding: 0 0.2rem 0.3rem;\n`;\n\nconst StyledSpeedSearchMenu = styled(StyledMenu)`\n  --jui-menu-item-padding: 1.25rem;\n  ${StyledVerticalSeparator} {\n    margin: 0 3px; // FIXME: probably use theme\n  }\n`;\n\nconst StyledPlaceholder = styled.div`\n  color: ${({ theme }) =>\n    // Ref: StatusText => DEFAULT_ATTRIBUTES => SimpleTextAttributes.GRAYED_ATTRIBUTES\n    theme.color(\n      \"Component.infoForeground\",\n      theme.dark ? \"#787878\" : \"#999999\"\n    )};\n\n  // center positioning. Intentionally different from reference impl.\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  white-space: nowrap;\n`;\n\nfunction useSpeedSearchMenu<T>(\n  state: TreeState<T>,\n  rootKey: React.Key | null,\n  ref: React.RefObject<HTMLUListElement>,\n  containerRef: React.RefObject<HTMLDivElement>\n) {\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n  } = useCollectionSpeedSearch({\n    collection: useMemo(\n      () =>\n        new ListCollection(\n          rootKey\n            ? state.collection.getItem(rootKey).childNodes\n            : state.collection\n        ),\n      [rootKey, state.collection]\n    ),\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new MenuKeyboardDelegate(\n      rootKey,\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    keepSearchActiveOnBlur: true,\n    focusBestMatch: true,\n    ref,\n  });\n\n  // When a menu item which was focused is filtered out, the focus goes to body.\n  // We manually move focus back to the container.\n  useEffect(() => {\n    const element = ref.current;\n    if (\n      element &&\n      state.selectionManager.isFocused &&\n      !element?.contains(document.activeElement)\n    ) {\n      focusSafely(element);\n    }\n  });\n\n  const lastSize = useRef<{ width: number; height: number } | null>(null);\n  const [size, setSize] = useState<{ width: number; height: number } | null>(\n    null\n  );\n  const measureSize = () => {\n    const { offsetWidth = 0, offsetHeight = 0 } = containerRef.current || {};\n    if (offsetWidth > 0 && offsetHeight > 0) {\n      lastSize.current = {\n        width: offsetWidth,\n        height: offsetHeight,\n      };\n    }\n  };\n  const isSearchActive =\n    speedSearch.active && speedSearch.searchTerm.length > 0;\n  useResizeObserver({\n    ref: containerRef,\n    onResize: useEventCallback(() => {\n      if (!isSearchActive) {\n        measureSize();\n      }\n    }),\n  });\n  useLayoutEffect(() => {\n    if (isSearchActive) {\n      if (lastSize.current) {\n        setSize(lastSize.current);\n      }\n    } else {\n      if (!lastSize.current) {\n        measureSize();\n      }\n      setSize(null);\n    }\n  }, [isSearchActive]);\n\n  const sizeStyleProps: HTMLAttributes<HTMLElement> = size\n    ? {\n        style: {\n          ...size,\n          minHeight: size.height,\n          maxHeight: size.height,\n        },\n      }\n    : {};\n  return {\n    speedSearch,\n    keyboardDelegate,\n    selectionManager,\n    speedSearchContainerProps: mergeProps<HTMLAttributes<HTMLElement>[]>(\n      speedSearchContainerProps,\n      sizeStyleProps,\n      {\n        onMouseDown: (e: React.MouseEvent) => {\n          // Until SearchInput and connecting that to a selectable list is implemented, we should prevent menu from\n          // losing focus when the fake search input is clicked\n          e.preventDefault();\n        },\n      }\n    ),\n    searchPopupProps,\n  };\n}\n\n/**\n * Drop-in replacement for Menu, which implements SpeedSearch.\n *\n *\n */\nexport const SpeedSearchMenu = <T extends object>({\n  submenuBehavior = \"toggleOnPress\",\n  autoFocus = \"first\",\n  emptyText = \"Nothing to show\",\n  minWidth,\n  ...props\n}: SpeedSearchMenuProps<T>) => {\n  const onAction = (key: React.Key) => {\n    props.onAction?.(key);\n    speedSearch.clear();\n  };\n  const ref = React.useRef<HTMLUListElement>(null);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const state = useMenuState({ ...props });\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, null, ref, containerRef);\n  const { menuContextValue, menuProps } = useMenu(\n    {\n      ...props,\n      autoFocus,\n      onAction,\n      keyboardDelegate,\n      submenuBehavior,\n    },\n    state,\n    ref\n  );\n\n  return (\n    <MenuContext.Provider\n      value={{\n        ...menuContextValue,\n        renderSubmenu: (props) => (\n          <SpeedSearchSubmenu emptyText={emptyText} {...props} />\n        ),\n      }}\n    >\n      <StyledSpeedSearchMenu\n        as=\"div\"\n        ref={containerRef}\n        style={{ minWidth }}\n        {...speedSearchContainerProps}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        <SpeedSearchMenuContent\n          items={[...state.collection]}\n          emptyText={emptyText}\n          speedSearch={speedSearch}\n          searchPopupProps={searchPopupProps}\n          state={state}\n          menuProps={menuProps}\n          menuRef={ref}\n        />\n      </StyledSpeedSearchMenu>\n    </MenuContext.Provider>\n  );\n};\n\nfunction SpeedSearchMenuContent<T>({\n  items,\n  state,\n  speedSearch,\n  searchPopupProps,\n  menuProps,\n  menuRef,\n  emptyText,\n}: {\n  state: TreeState<T>;\n  items: Node<T>[];\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  menuProps: HTMLAttributes<HTMLElement>;\n  menuRef: RefObject<HTMLUListElement>;\n  emptyText: React.ReactNode;\n}) {\n  const filter = speedSearch.active\n    ? ({ key, type }: Node<T>) =>\n        type !== \"item\" || speedSearch.matches.has(key)\n    : undefined;\n  return (\n    <>\n      {searchPopupProps.children && (\n        <StyledSearchFieldWrapper\n          onClick={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <SpeedSearchInput {...searchPopupProps} clear={speedSearch.clear} />\n        </StyledSearchFieldWrapper>\n      )}\n      <StyledItemsContainer {...menuProps} ref={menuRef}>\n        {renderMenuNodes(state, items, filter)}\n        {speedSearch.active && speedSearch.matches.size === 0 && (\n          <StyledPlaceholder>{emptyText}</StyledPlaceholder>\n        )}\n      </StyledItemsContainer>\n    </>\n  );\n}\n\nfunction SpeedSearchSubmenu<T>({\n  parentState,\n  rootKey,\n  emptyText,\n}: SubmenuProps<T> & { emptyText: React.ReactNode }) {\n  const ref = useRef<HTMLUListElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, rootKey, ref, containerRef);\n  const { submenuProps } = useSubmenu(\n    { rootKey, parentState, keyboardDelegate },\n    state,\n    ref\n  );\n\n  return (\n    <StyledSpeedSearchMenu\n      {...speedSearchContainerProps}\n      as=\"div\"\n      ref={containerRef}\n    >\n      <SpeedSearchMenuContent\n        items={[...(rootItem?.childNodes || [])]}\n        speedSearch={speedSearch}\n        searchPopupProps={searchPopupProps}\n        state={state}\n        menuProps={submenuProps}\n        menuRef={ref}\n        emptyText={emptyText}\n      />\n    </StyledSpeedSearchMenu>\n  );\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ isActive }) => isActive && highlightedStyle};\n  ${({ isDisabled }) => isDisabled && disabledStyle};\n\n  padding-right: 1.25rem;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuOptions, useMenu } from \"@react-aria/menu\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport {\n  MenuKeyboardDelegate,\n  useSubmenu as useSubmenuAria,\n} from \"./_useSubmenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuContext } from \"./Menu\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport function useSubmenu<T>(\n  {\n    rootKey,\n    parentState,\n    keyboardDelegate,\n  }: { rootKey: React.Key; parentState: TreeState<T> } & Pick<\n    AriaMenuOptions<T>,\n    \"keyboardDelegate\"\n  >,\n  state: TreeState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const rootItem = state.collection.getItem(rootKey);\n  const {\n    submenuBehavior,\n    autoFocus = true,\n    onClose,\n    onAction,\n  } = useContext(MenuContext);\n  let { menuProps } = useMenu(\n    {\n      \"aria-label\": rootItem?.[\"aria-label\"] || rootItem?.textValue,\n      onAction,\n      onClose,\n      selectedKeys: state.selectionManager.selectedKeys,\n      keyboardDelegate:\n        keyboardDelegate ||\n        new MenuKeyboardDelegate(\n          rootKey,\n          state.collection,\n          state.disabledKeys,\n          ref\n        ),\n      autoFocus,\n    },\n    state,\n    ref\n  );\n  const { submenuProps } = useSubmenuAria({ rootKey }, parentState, ref);\n\n  const submenuBehaviorProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        // Close the menu and submenu root node.\n        state.toggleKey(rootKey);\n        state.selectionManager.setFocusedKey(rootKey);\n        parentState.selectionManager.setFocused(true);\n        if (submenuBehavior !== \"default\") {\n          e.stopPropagation();\n        }\n        return;\n      }\n    },\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n      // it sets the focus key, which will move focus to that item.\n      // noinspection PointlessBooleanExpressionJS seems to be false positive. autoFocus can be \"first\" or \"last\"\n      if (autoFocus === true) {\n        ref.current?.focus();\n      }\n    });\n  }, []);\n\n  return {\n    submenuProps: mergeProps(menuProps, submenuProps, submenuBehaviorProps),\n  };\n}\n\nexport interface SubmenuProps<T> {\n  parentState: TreeState<T>;\n  rootKey: React.Key;\n}\n\nexport function Submenu<T>({ parentState, rootKey }: SubmenuProps<T>) {\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const { submenuProps } = useSubmenu({ rootKey, parentState }, state, ref);\n\n  return (\n    <StyledMenu {...submenuProps} ref={ref}>\n      {renderMenuNodes(state, [...(rootItem?.childNodes || [])])}\n    </StyledMenu>\n  );\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport React, { Key, RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\n\nexport class MenuKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  private keys: React.Key[];\n  constructor(\n    rootKey: Key | null,\n    private collection: Collection<Node<T>>,\n    disabledKeys: Set<React.Key>,\n    ref: React.RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n    this.keys = [...collection.getKeys()]\n      .map((key) => collection.getItem(key))\n      .flatMap((item) => {\n        if (item.parentKey == rootKey) {\n          if (item.type === \"item\") {\n            return [item.key];\n          } else if (item.type === \"section\") {\n            return [...item.childNodes].map(({ key }) => key);\n          }\n        }\n        return [];\n      });\n  }\n\n  getFirstKey(): React.Key {\n    return this.keys[0];\n  }\n  getLastKey(): React.Key {\n    return this.keys.slice(-1)[0];\n  }\n\n  getKeyBelow(key: React.Key): React.Key {\n    const keyBelow = super.getKeyBelow(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyBelow) ? keyBelow : null;\n  }\n  getKeyAbove(key: React.Key): React.Key {\n    const keyAbove = super.getKeyAbove(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyAbove) ? keyAbove : null;\n  }\n}\n\n/**\n * Behavior accessibility of submenus:\n * - Closing submenu on ArrowLeft key press.\n *   Note that it can't be implemented in useMenuItem, because the focus might be on no the submenu itself and not any\n *   of its items\n * @param rootKey: Key of the root node, the submenu is created from its children\n * @param state\n * @param ref\n */\nexport function useSubmenu<T>(\n  { rootKey }: { rootKey: Key },\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { keyboardProps: submenuProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Keyboard events bubble through portals. Don't handle keyboard events\n      // for elements outside the collection (e.g. menus).\n      if (!ref.current?.contains(e.target as Element)) {\n        e.continuePropagation();\n        return;\n      }\n      const root = state.collection.getItem(rootKey);\n      if (e.key === \"ArrowLeft\" && state.expandedKeys.has(root.key)) {\n        state.toggleKey(root.key);\n        state.selectionManager.setFocused(true);\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return {\n    submenuProps,\n  };\n}\n","import { TreeState } from \"@react-stately/tree\";\nimport { Key, useRef, useState } from \"react\";\nimport {\n  MultipleSelectionState,\n  SelectionManager,\n} from \"@react-stately/selection\";\n\n/**\n * Creates a TreeState corresponding to the submenu, from the state of a parent (sub)menu.\n * The collection and everything is the same, and the only difference from the parent state is selection manager\n * having a separate focused state to keep the focused state of each menu container separately, as the submenus\n * are usually rendered in separate overlays.\n */\nexport function useSubmenuState<T>(parentState: TreeState<T>) {\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a re-render. So, we have both a ref (sync) and state (async).\n  const [, setFocused] = useState(false);\n  const [, setFocusedKey] = useState<Key | null>(null);\n  const isFocusedRef = useRef(false);\n  const focusedKeyRef = useRef<Key | null>(null);\n\n  const state: MultipleSelectionState = {\n    // @ts-expect-error state is private\n    ...parentState.selectionManager.state,\n    setFocused: (isFocused: boolean) => {\n      isFocusedRef.current = isFocused;\n      setFocused(isFocused);\n    },\n    setFocusedKey(key: Key) {\n      focusedKeyRef.current = key;\n      setFocusedKey(key);\n    },\n  };\n  Object.defineProperties(state, {\n    isFocused: {\n      get() {\n        return isFocusedRef.current;\n      },\n    },\n    focusedKey: {\n      get() {\n        return focusedKeyRef.current!;\n      },\n    },\n  });\n\n  return {\n    ...parentState,\n    selectionManager: new SelectionManager(parentState.collection, state),\n  };\n}\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.div`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\"; // private import\n\nimport { MenuItem } from \"./MenuItem\";\nimport { MenuSection } from \"./MenuSection\";\n\nexport function renderMenuNodes<T>(\n  state: TreeState<T>,\n  nodes: Node<T>[],\n  filter: (node: Node<T>) => boolean = () => true\n) {\n  return nodes.filter(filter).map((node) => {\n    switch (node.type) {\n      case \"item\":\n        return <MenuItem key={node.key} item={node} state={state} />;\n      case \"section\":\n        return (\n          <>\n            {node.props.hasDivider && (\n              <ListDivider key={node.key + \"-divider\"} />\n            )}\n            <MenuSection\n              key={node.key}\n              item={node}\n              state={state}\n              filter={filter}\n            />\n          </>\n        );\n      case \"divider\":\n        return <ListDivider key={node.key} />;\n    }\n  });\n}\n","import { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport React, { useEffect } from \"react\";\n\n/**\n * A workaround for an issue in measuring overlay size, caused by a limitation/bug in how React 17 runs effects when\n * children suspend rendering: https://github.com/facebook/react/issues/21510\n *\n * Here is a simplified demonstration of the issue:\n * Expected behavior (React 18): https://codesandbox.io/s/parent-effects-suspense-v18-38m8p7?file=/src/App.tsx\n * Broken behavior (React 17): https://codesandbox.io/s/parent-effects-suspense-v17-h39g4g\n *\n * The overlay content size measuring runs in an effect, and that effect won't run when the content is rendered after\n * suspense.\n */\nexport function UNSAFE_React17SuspenseFix({\n  measureContentSize,\n  children,\n}: {\n  measureContentSize: () => void;\n  children: React.ReactNode;\n}) {\n  if (React.version.startsWith(\"17\")) {\n    return (\n      <React.Suspense\n        fallback={\n          <NullSuspenseFallback afterUnsuspended={measureContentSize} />\n        }\n      >\n        {children}\n      </React.Suspense>\n    );\n  }\n  return <>{children}</>;\n}\n\nfunction NullSuspenseFallback({\n  afterSuspended: afterSuspendedProp = () => {},\n  afterUnsuspended: afterUnsuspendedProp = () => {},\n}: {\n  afterUnsuspended?: () => void;\n  afterSuspended?: () => void;\n}) {\n  const afterSuspended = useEventCallback(afterSuspendedProp);\n  const afterUnsuspended = useEventCallback(afterUnsuspendedProp);\n  useEffect(() => {\n    afterSuspended?.();\n    return () => {\n      afterUnsuspended?.();\n    };\n  }, []);\n  return null;\n}\n","import React, { FocusEventHandler, useContext, useRef } from \"react\";\nimport { useModal, useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { focusSafely, FocusScope } from \"@react-aria/focus\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { AriaDialogProps } from \"@react-types/dialog\"; // temporary phantom dependency\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { WindowContext } from \"@intellij-platform/core/ModalWindow/WindowContext\";\nimport { UNSAFE_React17SuspenseFix } from \"@intellij-platform/core/Overlay/UNSAFE_React17SuspenseFix\";\n\nexport interface ModalWindowProps\n  extends AriaDialogProps,\n    ResizableMovableOverlayOptions {\n  children: React.ReactNode;\n  className?: string;\n  onClose?: () => void;\n}\n\nconst StyledWindowUnderlay = styled.div`\n  position: fixed;\n  z-index: 1000; // FIXME: z-index should not be hard-coded like this\n  inset: 0;\n`;\n\nexport const StyledWindowContainer = styled.div`\n  position: fixed;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  border-radius: 8px;\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n  outline: 1px solid #555; // FIXME\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledWindowInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DEFAULT_WINDOW_MIN_WIDTH = 50;\nexport const DEFAULT_WINDOW_MIN_HEIGHT = 24;\n\nexport const WindowControllerContext = React.createContext<\n  Partial<Pick<ModalWindowProps, \"onClose\">>\n>({});\n\n/**\n * A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\n * In the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\n * are not relevant here since they wouldn't be os-native windows. A close button is still relevant (and kind of\n * necessary) and will be added in next iterations.\n *\n * The content container doesn't come with any padding. Other related components should be used for common layouts in\n * modal windows.\n * Example use cases: Window for git operations such as push, update, revert, new branch, etc.\n *\n * ![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n *\n * NOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\n * overlay container could be extracted into a component which is then used to create custom resizable/movable overlay\n * dialogs, like \"Branches\", or \"Search Everywhere\".\n *\n * TODO: show close button (maybe os-aware styles?)\n *\n */\nexport const ModalWindow = ({\n  interactions = \"all\",\n  minWidth = DEFAULT_WINDOW_MIN_WIDTH,\n  minHeight = DEFAULT_WINDOW_MIN_HEIGHT,\n  className,\n  ...props\n}: ModalWindowProps): React.ReactElement => {\n  const { children } = props;\n  const propsContext = useContext(WindowControllerContext);\n  const onClose = () => {\n    propsContext.onClose?.();\n    props.onClose?.();\n  };\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      isOpen: true, // maybe allow rendering closed window? :-?\n      onClose,\n      isDismissable: false,\n      isKeyboardDismissDisabled: false,\n      shouldCloseOnBlur: false,\n    },\n    ref\n  );\n  usePreventScroll();\n  const { modalProps } = useModal();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  const {\n    bounds: style,\n    overlayInteractionHandlerProps,\n    UNSAFE_measureContentSize,\n  } = useResizableMovableOverlay(ref, { ...props, minHeight, minWidth });\n\n  const { focusContainmentFixProps } = useFocusContainmentFix();\n\n  return (\n    <StyledWindowUnderlay {...underlayProps} className={className}>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        <FocusScope contain restoreFocus autoFocus>\n          <StyledWindowContainer\n            {...mergeProps(\n              overlayProps,\n              dialogProps,\n              modalProps,\n              focusContainmentFixProps,\n              { style }\n            )}\n            ref={ref}\n          >\n            <StyledWindowInnerContainer>\n              <WindowContext.Provider\n                value={{\n                  isActive: true, // because it's modal. WindowContext would be used for non-modal windows too, in future\n                  titleProps,\n                  movable: interactions !== \"none\",\n                }}\n              >\n                <UNSAFE_React17SuspenseFix\n                  measureContentSize={UNSAFE_measureContentSize}\n                >\n                  {children}\n                </UNSAFE_React17SuspenseFix>\n              </WindowContext.Provider>\n            </StyledWindowInnerContainer>\n            {interactions === \"all\" && <OverlayResizeHandles />}\n          </StyledWindowContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </StyledWindowUnderlay>\n  );\n};\n\n/**\n * The way FocusScope is implemented at the moment, it's possible for another focus scope to steal the focus,\n * right after the modal window is opened. The issue is not tracked down to the root cause. But with this hook,\n * we make sure there is no way for focus to go out of the modal window, when it's mounted.\n */\nfunction useFocusContainmentFix<T extends HTMLElement>() {\n  const lastFocusedElementRef = useRef<HTMLElement | null>(null);\n  const onFocus: FocusEventHandler<T> = (e) => {\n    lastFocusedElementRef.current = e.target;\n  };\n  const onBlur: FocusEventHandler = (e) => {\n    const probablyFocusedElement = e.relatedTarget;\n    if (\n      !probablyFocusedElement ||\n      (probablyFocusedElement instanceof Element &&\n        !e.currentTarget.contains(probablyFocusedElement))\n    ) {\n      const elementToFocus = lastFocusedElementRef.current;\n      if (elementToFocus) {\n        focusSafely(elementToFocus);\n      }\n    }\n  };\n  return {\n    focusContainmentFixProps: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n","import React from \"react\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nexport const WindowContext = React.createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nexport function WindowFooter({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer. {@link Button}s are usually used inside the right content\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>{right}</StyledFooterSide>\n    </StyledFooter>\n  );\n}\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { WindowContext } from \"./WindowContext\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 24px; // Double check\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\n/**\n * Implements appearance of Window header, and also acts as a handle for moving the window.\n * Expected to be used with {@link WindowLayout}:\n *\n * @example\n * ```tsx\n * <ModalWindow>\n *    <WindowLayout header={<WindowHeader>header</WindowHeader>} />\n * </ModalWindow>\n * ```\n */\nexport const WindowHeader = ({ children }: { children?: React.ReactNode }) => {\n  const { movable, titleProps } = useContext(WindowContext);\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {children || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderTitle()\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { WindowHeader } from \"./WindowHeader\";\nimport { WindowFooter } from \"@intellij-platform/core/ModalWindow/WindowFooter\";\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\n/**\n * Window content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function WindowLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the window at the top. Use {@link WindowLayout.Header} for the default window header,\n   * which also acts as a move handle for the window. If a string is passed, it will be wrapped by\n   * {@link WindowLayout.Header} automatically.\n   */\n  header: React.ReactNode;\n  /**\n   * Scrollable content of the window.\n   */\n  content: React.ReactNode;\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `content`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <>\n      {header &&\n        (typeof header === \"string\" ? (\n          <WindowHeader>{header}</WindowHeader>\n        ) : (\n          header\n        ))}\n      <StyledWindowContentWrapper>{content}</StyledWindowContentWrapper>\n      {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n    </>\n  );\n}\n\n// Just for improved discoverability. Might as well export WindowFooter and WindowHeader instead.\nWindowLayout.Footer = WindowFooter;\nWindowLayout.Header = WindowHeader;\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ModalWindow,\n  WindowControllerContext,\n  ModalWindowProps,\n} from \"./ModalWindow\";\n\nexport interface WindowManagerAPI {\n  /**\n   * Shows a modal window within the stack of windows managed by {@link WindowManager}.\n   * The opened windows will be closed when `onClose` interactions happen.\n   */\n  open(\n    props:\n      | React.ReactElement<ModalWindowProps, typeof ModalWindow>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<ModalWindowProps, typeof ModalWindow>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"WindowManager not found. Wrap your application with WindowManager to be able to open windows imperatively\"\n  );\n};\n\nconst WindowsContext = React.createContext<WindowManagerAPI>({\n  open: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing windows.\n *\n */\nexport const useWindowManager = (): WindowManagerAPI =>\n  useContext(WindowsContext);\n\ntype WindowElement = ReactElement<ModalWindowProps, typeof ModalWindow>;\n\nexport interface WindowManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link useWindowManager}) for opening windows.\n * It renders windows in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n */\nexport const WindowManager: React.FC<WindowManagerProps> = ({ children }) => {\n  const [windows, setWindows] = useState<Array<WindowElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<WindowManagerAPI>(() => {\n    const openModalWindow: WindowManagerAPI[\"open\"] = (content) => {\n      newKeyRef.current++;\n      const close = () => {\n        setWindows((currentWindows) =>\n          currentWindows.filter((aWindow) => aWindow !== window)\n        );\n      };\n      const window = (\n        <WindowControllerContext.Provider\n          value={{ onClose: close }}\n          key={newKeyRef.current}\n        >\n          {typeof content === \"function\" ? content({ close }) : content}\n        </WindowControllerContext.Provider>\n      );\n      setWindows((currentWindows) => currentWindows.concat(window));\n    };\n    return {\n      open: openModalWindow,\n    };\n  }, []);\n\n  return (\n    <WindowsContext.Provider value={api}>\n      {children}\n      {windows}\n    </WindowsContext.Provider>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { Overlay as AriaOverlay, OverlayProps } from \"@react-aria/overlays\";\n\nconst ParentOverlayContext = React.createContext<HTMLElement | null>(null);\n\n/**\n * A (drop-in replacement) wrapper around Overlay, which makes sure overlays created in nested\n * react components will be ported to the same top level container. This is especially useful to detect\n * \"outside clicks\" when overlays are nested. The most common example would be nested menu in popup.\n *\n */\nexport function Overlay({\n  children,\n  OverlayComponent = AriaOverlay,\n}: {\n  children: React.ReactNode;\n  OverlayComponent?: React.ComponentType<OverlayProps>;\n}) {\n  const root = useContext(ParentOverlayContext);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  if (root) {\n    return (\n      <OverlayComponent portalContainer={root}>{children}</OverlayComponent>\n    );\n  }\n  return (\n    <ParentOverlayContext.Provider value={containerRef.current}>\n      <OverlayComponent>\n        <div ref={containerRef} data-overlay-root=\"\">\n          {children}\n        </div>\n      </OverlayComponent>\n    </ParentOverlayContext.Provider>\n  );\n}\n\n/**\n * Returns true, if element1 and element2 are in nested overlays. \"Nested\" being in terms of React component tree.\n * Useful for detecting \"outside click\" when overlay components are nested in each other.\n */\nexport function areInNestedOverlays(\n  element1: Element | null,\n  element2: Element | null\n) {\n  const overlayRoot1 = element1?.closest(\"[data-overlay-root]\");\n  const overlayRoot2 = element2?.closest(\"[data-overlay-root]\");\n  return Boolean(overlayRoot1) && overlayRoot1 === overlayRoot2;\n}\n","import React, { useContext } from \"react\";\n\nexport type Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * TODO(docs): add a few words about this abstraction and it's use.\n */\nexport type OverlayInteractionHandlerProps = {\n  /**\n   * Signals start of a UI interaction like resize or move, in which overlay bounds change.\n   */\n  startInteraction: (type: \"move\" | \"resize\") => Bounds;\n  /**\n   * Used to update bounds state during a UI interaction.\n   */\n  updateBounds: (bounds: Bounds) => void;\n  /**\n   * Signals end of a UI interaction.\n   */\n  finishInteraction: () => void;\n\n  minWidth?: number;\n  minHeight?: number;\n};\n\nconst OverlayInteractionHandlerContext =\n  React.createContext<OverlayInteractionHandlerProps | null>(null);\n\n/**\n * Provides the context used by components like {@link OverlayMoveHandle} and {@link OverlayResizeHandles} that provide\n * user interactions that change the boundary of the overlay they are rendered in.\n * Use {@link useResizableMovableOverlay} which implements an efficient state management for overlay bounds and returns\n * props to be passed to `OverlayInteractionHandler`:\n *\n * @example\n *\n * const {\n *    bounds, // Bounds to be applied to the overlay element.\n *    overlayInteractionHandlerProps,\n *  } = useResizableMovableOverlay(props);\n *\n * return (\n *   <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n *     <div style={bounds}>...</div>\n *   </OverlayInteractionHandler>\n * );\n *\n * @see useResizableMovableOverlay\n */\nexport const OverlayInteractionHandler = ({\n  children,\n  ...props\n}: OverlayInteractionHandlerProps & { children: React.ReactNode }) => {\n  return (\n    <OverlayInteractionHandlerContext.Provider value={props}>\n      {children}\n    </OverlayInteractionHandlerContext.Provider>\n  );\n};\n\nexport const useOverlayInteractionHandler = () =>\n  useContext(OverlayInteractionHandlerContext);\n","import { useMove, UseMoveOptions } from \"../utils/interaction-utils/useMove\";\nimport { useOverlayInteractionHandler } from \"./OverlayInteractionHandler\";\nimport React from \"react\";\n\nexport type UseOverlayMoveHandleOptions = Omit<\n  UseMoveOptions<unknown>,\n  \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n>;\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}, and returns props to be applied on a dom element to\n * make it a move handle for the overlay it's being rendered in.\n *\n * @see OverlayMoveHandle\n */\nexport function useOverlayMoveHandle(options?: UseOverlayMoveHandleOptions) {\n  const interactionHandler = useOverlayInteractionHandler();\n  if (!interactionHandler) {\n    return { moveHandleProps: {} };\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const moveProps = useMove({\n    ...options,\n    onMoveStart: () => {\n      return startInteraction(\"move\");\n    },\n    onMove: ({ startState, movement }) => {\n      updateBounds({\n        ...startState,\n        top: startState.top + movement.y,\n        left: startState.left + movement.x,\n      });\n    },\n    onMoveEnd: () => {\n      finishInteraction();\n    },\n  });\n  return { moveHandleProps: moveProps || {} };\n}\n\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}. A render function is expected as `children`. It's\n * passed the event handlers that need to be applied on a dom element to make it a move handle for the overlay it's\n * being rendered in.\n */\nexport const OverlayMoveHandle = ({\n  children,\n  ...props\n}: {\n  children: (\n    props: ReturnType<typeof useOverlayMoveHandle>\n  ) => React.ReactElement;\n} & UseOverlayMoveHandleOptions) => {\n  return children(useOverlayMoveHandle(props));\n};\n","import React, { useRef } from \"react\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport {\n  HorizontalResizerProps,\n  VerticalResizerProps,\n} from \"../Resizer/ResizerProps\";\nimport {\n  Bounds,\n  useOverlayInteractionHandler,\n} from \"./OverlayInteractionHandler\";\n\ntype OverlayResizeHandlesProps = {\n  minWidth?: number;\n  minHeight?: number;\n};\n\n/**\n * Renders invisible resize handles at the edges of the overlay it's rendered in. It uses the context provided by\n * {@link OverlayInteractionHandler} to resize the overlay when the handles are used.\n */\nexport function OverlayResizeHandles(props: OverlayResizeHandlesProps) {\n  const overlayResizer = useOverlayResizer(props);\n  return (\n    overlayResizer && (\n      <>\n        <RightResizer {...overlayResizer.getResizerProps(\"right\")} />\n        <LeftResizer {...overlayResizer.getResizerProps(\"left\")} />\n        <TopResizer {...overlayResizer.getResizerProps(\"top\")} />\n        <BottomResizer {...overlayResizer.getResizerProps(\"bottom\")} />\n      </>\n    )\n  );\n}\n\n/**\n * overlay resizing logic and state. When resizing is in progress, the source of truth is a local state, for performance\n * reasons. When the resize is done (e.g. by mouse being released), `onBoundsChange` is called with the new bounds.\n */\nfunction useOverlayResizer(props: OverlayResizeHandlesProps = {}) {\n  const initialBoundsRef = useRef<Bounds>({\n    top: 0,\n    height: 0,\n    width: 0,\n    left: 0,\n  });\n  const interactionHandler = useOverlayInteractionHandler();\n  const {\n    minWidth = interactionHandler?.minWidth ?? 1,\n    minHeight = interactionHandler?.minHeight ?? 1,\n  } = props;\n  if (!interactionHandler) {\n    return null;\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const onResize = {\n    right: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        width: Math.max(minWidth, initialBoundsRef.current.width + size),\n      }),\n    bottom: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        height: Math.max(minHeight, initialBoundsRef.current.height + size),\n      }),\n    left: (size: number) => {\n      const newWidth = Math.max(\n        minWidth,\n        initialBoundsRef.current.width + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        left: initialBounds.left + initialBounds.width - newWidth,\n        width: newWidth,\n      });\n    },\n    top: (size: number) => {\n      const newHeight = Math.max(\n        minHeight,\n        initialBoundsRef.current.height + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        top: initialBounds.top + initialBounds.height - newHeight,\n        height: newHeight,\n      });\n    },\n  };\n\n  function getResizerProps(side: \"left\" | \"right\"): HorizontalResizerProps;\n  function getResizerProps(side: \"top\" | \"bottom\"): VerticalResizerProps;\n  function getResizerProps(\n    side: \"left\" | \"right\" | \"top\" | \"bottom\"\n  ): HorizontalResizerProps | VerticalResizerProps {\n    const horizontal = side === \"left\" || side === \"right\";\n    return {\n      size: 1,\n      cursor: horizontal ? \"ew\" : \"ns\",\n      onResizeStarted: () => {\n        initialBoundsRef.current = startInteraction(\"resize\");\n      },\n      onResize: onResize[side],\n      onResizeEnd: finishInteraction,\n      style: { position: \"absolute\", [side]: 0 },\n    };\n  }\n\n  return {\n    getResizerProps,\n  };\n}\n","import { Bounds } from \"@intellij-platform/core/Overlay/OverlayInteractionHandler\";\nimport { clamp } from \"ramda\";\nimport { ResizableMovableOverlayOptions } from \"@intellij-platform/core/Overlay/useResizableMovableOverlay\";\n\nexport const withMinSize =\n  ({ width: minWidth, height: minHeight }: { width: number; height: number }) =>\n  (bounds: Bounds) => {\n    const width = Math.max(minWidth, bounds.width);\n    const height = Math.max(minHeight, bounds.height);\n    if (bounds.width != width || bounds.height != height) {\n      return { ...bounds, width, height };\n    }\n    return bounds;\n  };\n\nexport function getCenteredBounds(width: number, height: number): Bounds {\n  return {\n    left: (window.innerWidth - width) / 2,\n    top: (window.innerHeight - height) / 2,\n    width,\n    height,\n  };\n}\n\n/**\n * A helper function to create interaction interceptor which ensures bounds are contained within a container.\n *\n * @example\n * const ensureInViewPort = containedWithin({left: 0, top: 0, width: window.innerWidth, height: window.innerHeight})\n *\n * useResizableMovableOverlay({ onBoundsChanging: ensureInViewPort});\n */\nexport const containedWithin =\n  (\n    containerBounds: Bounds\n  ): ResizableMovableOverlayOptions[\"onBoundsChanging\"] =>\n  (bounds, interactionType) => {\n    if (interactionType === \"move\") {\n      const left = clamp(\n        containerBounds.left,\n        containerBounds.left + containerBounds.width - bounds.width,\n        bounds.left\n      );\n      const top = clamp(\n        containerBounds.top,\n        containerBounds.top + containerBounds.height - bounds.height,\n        bounds.top\n      );\n      return {\n        ...bounds,\n        left,\n        top,\n      };\n    } else if (interactionType === \"resize\") {\n      const left = Math.max(containerBounds.left, bounds.left);\n      const top = Math.max(containerBounds.top, bounds.top);\n      // the logic here seems unnecessarily complicated\n      return {\n        left,\n        top,\n        width:\n          bounds.width -\n          Math.max(\n            0,\n            bounds.left +\n              bounds.width -\n              (containerBounds.left + containerBounds.width)\n          ) -\n          (left - bounds.left),\n        height:\n          bounds.height -\n          Math.max(\n            0,\n            bounds.top +\n              bounds.height -\n              (containerBounds.top + containerBounds.height)\n          ) -\n          (top - bounds.top),\n      };\n    }\n    return bounds;\n  };\nexport const position =\n  ({\n    targetElement,\n    placement = \"bottom\",\n  }: {\n    placement?: \"bottom\" | \"top\";\n    targetElement: HTMLElement;\n  }) =>\n  ({ height, width }: Bounds): Bounds => {\n    const targetBounds = targetElement.getBoundingClientRect();\n    return {\n      left: targetBounds.left,\n      top:\n        placement === \"bottom\"\n          ? targetBounds.top + targetBounds.height\n          : targetBounds.top - height,\n      width,\n      height,\n    };\n  };\n\nexport function ensureInViewport(\n  bounds: Bounds,\n  { gap = 0 }: { gap?: number } = {}\n): Bounds {\n  const viewportWidth = window.innerWidth - gap;\n  const viewportHeight = window.innerHeight - gap;\n  const left = clamp(gap, viewportWidth - bounds.width, bounds.left);\n  const top = clamp(gap, viewportHeight - bounds.height, bounds.top);\n  if (left !== bounds.left || top !== bounds.top) {\n    return {\n      left,\n      top,\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n  return bounds;\n}\n","import { useCallback, useEffect, useLayoutEffect, useRef } from \"react\";\n\nexport const useDebouncedCallback = (\n  fn: () => void,\n  { timeout = 100 } = {}\n) => {\n  const fnRef = useRef(fn);\n  const currentTimeoutId = useRef<number | null>(null);\n  useLayoutEffect(() => {\n    fnRef.current = fn;\n  });\n  useEffect(() => {\n    return () => {\n      if (currentTimeoutId.current !== null) {\n        clearTimeout(currentTimeoutId.current);\n      }\n    };\n  }, []);\n  return useCallback(() => {\n    if (currentTimeoutId.current !== null) {\n      clearTimeout(currentTimeoutId.current);\n    }\n    currentTimeoutId.current = window.setTimeout(fnRef.current, timeout);\n  }, []);\n};\n","import { RefObject, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useDebouncedCallback } from \"@intellij-platform/core/utils/useDebounce\";\n\n/**\n * Clones the element, applies the temporary styles, and calls {@param fn} on the clone.\n * Previously, we applied the temporary styles on the element itself, run fn, and then revert to previous styles,\n * but that can mess with the scroll bar in the content. If there is a scrollable part in some nested element,\n * applying temporary style (in our case width: fit-content, height: fit-content) can cause scroll to jump which is not\n * restored after the style reversion. Now the approach is changed to apply the temporary styles on a temporary clone\n * of the element. It's certainly not as efficient and some optimization may be needed.\n * @param style: temporary styles to apply before fn is invoked, and revert after.\n * @param fn the function to compute something on the element with temporary styles\n */\nconst withTemporaryStyle =\n  <T extends any>(\n    style: Partial<CSSStyleDeclaration>,\n    fn: (element: HTMLElement) => T\n  ) =>\n  (element: HTMLElement): T => {\n    const clone = element.cloneNode(true) as HTMLElement;\n    clone.style.position = \"absolute\";\n    clone.style.left = \"-9999px\";\n    document.body.appendChild(clone);\n\n    Object.assign(clone.style, style);\n    const returnValue = fn(clone);\n\n    document.body.removeChild(clone);\n    return returnValue;\n  };\n\n/**\n * FIXME: withTemporaryStyle is not side-effect free and can cause scroll jumps. It creates awfully hard-to-debug\n *  issues.\n */\nexport const getContentSize = withTemporaryStyle(\n  {\n    width: \"\",\n    minWidth: \"fit-content\", // Shouldn't it be min-content? :-?\n    height: \"\",\n    minHeight: \"fit-content\",\n  },\n  (element) => ({\n    width: Math.ceil(parseFloat(getComputedStyle(element).width)),\n    height: Math.ceil(parseFloat(getComputedStyle(element).height)),\n  })\n);\n\nexport const useContentSize = (\n  ref: RefObject<HTMLElement>,\n  {\n    observe = false,\n  }: {\n    /**\n     * if false, the content size is measured only initially. If true, the dom changes are observed, and content size\n     * is updated accordingly.\n     * @default false\n     */\n    observe?: boolean;\n  } = {}\n) => {\n  const [measuredSizes, setMeasuredSizes] = useState<Size[]>([]);\n  useLayoutEffect(() => {\n    const element = ref.current;\n    if (!element || measuredSizes.length > 5) {\n      return;\n    }\n    const size = getContentSize(element);\n\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (!lastMeasuredSize || !Size.isEqual(lastMeasuredSize, size)) {\n      setMeasuredSizes([size]);\n    }\n    const id = window.requestAnimationFrame(() => {\n      const newSize = getContentSize(element);\n      if (!Size.isEqual(newSize, size)) {\n        setMeasuredSizes([...measuredSizes, newSize]);\n      }\n    });\n    return () => {\n      window.cancelAnimationFrame(id);\n    };\n  }, [\n    measuredSizes,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  const measure = () => {\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (ref.current && lastMeasuredSize) {\n      const currentSize = getContentSize(ref.current);\n      if (\n        currentSize.height !== lastMeasuredSize.height ||\n        currentSize.width !== lastMeasuredSize.width\n      ) {\n        setMeasuredSizes(\n          measuredSizes.map((aSize) =>\n            aSize === lastMeasuredSize ? currentSize : aSize\n          )\n        );\n      }\n    }\n  };\n  const debouncedMeasure = useDebouncedCallback(measure);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (observe && element) {\n      const mutationObserver = new MutationObserver(() => {\n        debouncedMeasure();\n      });\n      mutationObserver.observe(element, {\n        subtree: true,\n        childList: true,\n      });\n      return () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [\n    observe,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  return [measuredSizes.at(-1) || { width: 0, height: 0 }, measure] as const;\n};\n\ninterface Size {\n  width: number;\n  height: number;\n}\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const Size = {\n  isEqual: (\n    { width, height }: Size,\n    { width: width2, height: height2 }: { width: number; height: number }\n  ) => width === width2 && height === height2,\n};\n","import React, { RefObject, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  Bounds,\n  OverlayInteractionHandler,\n  OverlayInteractionHandlerProps,\n} from \"./OverlayInteractionHandler\";\nimport { clamp, filter } from \"ramda\";\nimport { useContentSize } from \"@intellij-platform/core/Overlay/useContentSize\";\nimport {\n  getCenteredBounds,\n  withMinSize,\n} from \"@intellij-platform/core/Overlay/bounds-helpers\";\n\n/**\n * Common props for resizable and movable overlays such as Windows or Popups.\n * There is currently no corresponding component/hook, and this is just a type helper.\n */\nexport interface ResizableMovableOverlayOptions {\n  onBoundsChange?: (bounds: Bounds, interactionType: \"move\" | \"resize\") => void;\n  /**\n   * For performance reason, overlay bounds is kept in a local state during a resize or move interaction, and\n   * `onBoundsChange` is called once at the end of interaction. `onBoundsChanging` gives a chance of rectifying\n   * bounds changes during an interaction to for example apply custom size/placement constraints.\n   */\n  onBoundsChanging?: (\n    newBounds: Bounds,\n    /**\n     * Whether the interaction is a \"move\" or \"resize\" considering the initial bounds when interaction was started.\n     */\n    interactionType: \"move\" | \"resize\"\n  ) => Bounds;\n  /**\n   * Controlled bounds. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `bounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  bounds?: Partial<Bounds>;\n  /**\n   * Default bounds in uncontrolled mode. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `defaultBounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  defaultBounds?: Partial<Bounds>;\n  minWidth?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n  minHeight?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n\n  /**\n   * Allowed interactions:\n   * - \"all\": both resizable and movable\n   * - \"move\": movable, but not resizable\n   * - \"none\": fixed size and position\n   * The reason there are no `resizable` and `movable` boolean props is that resizable=true,movable=false doesn't make\n   * sense from UX perspective.\n   * @default \"all\"\n   */\n  interactions?: \"all\" | \"move\" | \"none\"; // FIXME: it's not used in useResizableMovableOverlay, maybe separate props?\n\n  /**\n   * When the size is not specified by `bounds` or `defaultBounds` props, the content size is measured and used in the\n   * returned bounds. By default, the content size is measured initially. If `observeContentSize` is true, the DOM\n   * mutations will be observed and the content is re-measured as changes are observed.\n   */\n  observeContentResize?: boolean;\n}\n/**\n *\n * TODO: rename to something better? :D\n * TODO: maybe an option like ensureInViewport that would move the final bound into the viewport (if necessary), when\n *  calling onBoundsChange at the end of an interaction. That's important because if move handle(s) (usually rendered\n *  at the top of the overlay) are out of reach, there would be no way back.\n * TODO: description\n * Assumptions:\n * - The overlay is rendered in a portal, and with position \"fixed\".\n * - The returned bounds should be used to style the overlay.\n *   - There shouldn't be other style affecting the positioning, such as margin, or transform.\n *   - If the overlay has border, box-sizing should be \"border-box\"\n */\nexport function useResizableMovableOverlay(\n  overlayRef: RefObject<HTMLElement>,\n  {\n    bounds: inputBounds,\n    defaultBounds,\n    onBoundsChange,\n    onBoundsChanging = (i) => i,\n    minWidth,\n    minHeight,\n    observeContentResize,\n  }: ResizableMovableOverlayOptions\n): {\n  /**\n   * The bounds to be applied as `style` on the overlay, to position it. Even if the input `bounds` or `defaultBounds`\n   * is not defined, returned `bounds` is always a full bounds object. This eliminates any other need for styling,\n   * if the input bounds doesn't define size or position.\n   * NOTE: even when the size is not specified as input, and is to be based on content, the returned `bounds` include\n   * explicit, size, measured **after the first render**. This is because overlays such as windows are not expected to\n   * be resized without user interaction, and just based on the content size change. So we make sure even when the\n   * sizing is based on content, it's stable. If imperative re-measure of the size is needed, or even dynamic resizing\n   * based on content is needed in some cases, it is feasible to add it as an option.\n   */\n  bounds: Bounds;\n  /**\n   * `true` if the returned bounds has explicit position. `false` if it's centered as a fallback.\n   */\n  positioned: boolean;\n  /**\n   * `true` if the returned bounds has explicit size. `false` if it's measured based on content.\n   */\n  sized: boolean;\n  /**\n   * Props to be passed to {@link OverlayInteractionHandler}\n   */\n  overlayInteractionHandlerProps: OverlayInteractionHandlerProps;\n\n  /**\n   * Allow for remeasuring content size imperatively, when needed. Currently only used to work around\n   * an issue related to Suspense in React 17.\n   */\n  UNSAFE_measureContentSize: () => void;\n} {\n  const [bounds, setBounds] = useControlledState<Partial<Bounds> | undefined>(\n    inputBounds!,\n    defaultBounds!,\n    // onBoundsChange is called with Bounds object. Not Partial<Bounds>, and not undefined.\n    onBoundsChange as (\n      value: Partial<Bounds> | undefined,\n      reason: \"resize\" | \"move\"\n    ) => void\n  );\n  const [contentSize, measureContentSize] = useContentSize(overlayRef, {\n    observe: observeContentResize,\n  });\n  // local state of bounds for when the overlay is in a UI interaction, like movement or resize with mouse.\n  // We don't want to update the state in the higher levels repeatedly in such transactions, and we just want to\n  // trigger on update when the UI interaction is done.\n  // It's maintained during a UI interaction and then reset to null.\n  const [currentInteraction, setCurrentInteraction] = useState<null | {\n    type: \"move\" | \"resize\";\n    bounds: Bounds;\n  }>(null);\n\n  const effectiveMinWidth =\n    minWidth === \"content\" ? contentSize.width : minWidth || 0;\n  const effectiveMinHeight =\n    minHeight === \"content\" ? contentSize.height : minHeight || 0;\n  const applyMinSize = withMinSize({\n    width: effectiveMinWidth,\n    height: effectiveMinHeight,\n  });\n  const overlayInteractionHandlerProps: OverlayInteractionHandlerProps = {\n    startInteraction: (type: \"move\" | \"resize\") => {\n      if (!overlayRef.current) {\n        throw new Error(\n          \"overlayRef value is not set. Make sure to have the ref passed to the resizable/movable overlay\"\n        );\n      }\n      const bounds = getBounds(overlayRef.current);\n      setCurrentInteraction({ bounds, type });\n      return bounds;\n    },\n    updateBounds: (updatedBounds) => {\n      setCurrentInteraction((currentInteraction) => {\n        if (currentInteraction) {\n          const { type } = currentInteraction;\n          return {\n            type,\n            bounds: onBoundsChanging(updatedBounds, type) || updatedBounds,\n          };\n        }\n        return currentInteraction;\n      });\n    },\n    finishInteraction: () => {\n      if (currentInteraction && overlayRef.current) {\n        setBounds(getBounds(overlayRef.current), currentInteraction.type);\n      }\n      setCurrentInteraction(null);\n    },\n    minWidth: effectiveMinWidth,\n    minHeight: effectiveMinHeight,\n  };\n\n  const partialBounds = currentInteraction?.bounds ?? bounds;\n  const centeredContentBounds = getCenteredBounds(\n    clamp(\n      effectiveMinWidth,\n      window.innerWidth,\n      bounds?.width ?? contentSize.width\n    ),\n    clamp(\n      effectiveMinHeight,\n      window.innerHeight,\n      bounds?.height ?? contentSize.height\n    )\n  );\n  return {\n    positioned:\n      partialBounds?.left != undefined && partialBounds?.top != undefined,\n    sized:\n      partialBounds?.width != undefined && partialBounds?.height != undefined,\n    bounds: applyMinSize({\n      /**\n       * Since input bounds may be partial (e.g. only specifying size), we create a full bounds object as a fallback,\n       * based on the measured size, positioned in center. We can introduce a \"loose\" mode, where the returned bound\n       * is not \"filled\" with default properties.\n       */\n      ...centeredContentBounds,\n      ...(partialBounds && filter((value) => value != null, partialBounds)),\n    }),\n    UNSAFE_measureContentSize: measureContentSize,\n    overlayInteractionHandlerProps,\n  };\n}\n\nfunction getBounds(element: HTMLElement) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  return { left, top, width, height };\n}\n","import React, { ForwardedRef, RefObject, useContext, useState } from \"react\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { useFocusWithin, useInteractOutside } from \"@react-aria/interactions\";\nimport { FocusScope, useFocusable } from \"@react-aria/focus\";\nimport { useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\nimport { pipe } from \"ramda\";\n\nimport {\n  ensureInViewport,\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  position,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { areInNestedOverlays, Overlay } from \"@intellij-platform/core/Overlay\";\nimport { mergeNonNullProps } from \"@intellij-platform/core/utils/mergeNonNullProps\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nimport { useDialog } from \"./_useDialog\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { PopupContext, PopupControllerContext } from \"./PopupContext\";\nimport { PopupLayout } from \"./PopupLayout\";\nimport { StyledPopupHint } from \"./StyledPopupHint\";\n\nexport const StyledPopupContainer = styled.div`\n  position: fixed;\n  box-sizing: border-box;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  outline: none; // Focus will be reflected in header. No need for outline or any other focus style on the container\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n`;\nexport interface PopupProps extends ResizableMovableOverlayOptions, DOMProps {\n  children: React.ReactNode;\n  onClose?: () => void;\n\n  nonDismissable?: boolean;\n\n  /**\n   * By default, Popup prevents scrolling on the scrollable ancestor, if popup is positioned relative to a target\n   * element. Allowing or disallowing scroll can be forced by passing boolean value.\n   */\n  allowScroll?: \"auto\" | boolean;\n\n  /**\n   * Used to position the popup relative to a target element, if there is no positioning information in the input\n   * `bounds`/`defaultBounds`.\n   */\n  positioning?: {\n    targetRef: RefObject<HTMLElement>;\n    placement?: \"bottom\" | \"top\";\n  };\n}\n\nexport const DEFAULT_POPUP_MIN_WIDTH = 50;\nexport const DEFAULT_POPUP_MIN_HEIGHT = 50;\n\n/**\n * [Popup](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75426%3A16881&t=vzpRGV2y2cDw5a6Z-0)\n * component, rendered as a draggable overlay which is positioned either in the center of the viewport or relative to a trigger element.\n * If there is a trigger element, use {@link PopupTrigger} instead.\n */\nexport const _Popup = (\n  // NOTE: export is only for __docgenInfo to be emitted for this.\n  {\n    interactions = \"move\",\n    nonDismissable = false,\n    allowScroll = \"auto\",\n    minWidth = DEFAULT_POPUP_MIN_WIDTH,\n    minHeight = DEFAULT_POPUP_MIN_HEIGHT,\n    positioning: positioningProp,\n    onClose: onCloseProp,\n    ...props\n  }: PopupProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element => {\n  const propsContext = useContext(PopupControllerContext);\n  const positioning = positioningProp || propsContext.positioning;\n  const onClose = () => {\n    onCloseProp?.();\n    propsContext.onClose?.();\n  };\n  const ref = useObjectRef<HTMLDivElement>(forwardedRef);\n  const shouldCloseOnInteractOutside = (element: Element) => {\n    return (\n      !positioning?.targetRef.current?.contains(element) &&\n      !areInNestedOverlays(ref.current, element)\n    );\n  };\n  const { overlayProps } = useOverlay(\n    {\n      isOpen: true, // FIXME?\n      onClose,\n      shouldCloseOnBlur: !nonDismissable,\n      shouldCloseOnInteractOutside,\n    },\n    ref\n  );\n  // Passing isDismissable to useOverlay also utilizes useInteractOutside and closes the overlay, but it calls\n  // preventDefault() and stopPropagation() on the event, which prevents focus from going to elements outside the popup.\n  // Not sure why they do this in react-aria, but it seems we are better off not using that option and using\n  // useInteractOutside directly here like this:\n  useInteractOutside({\n    ref,\n    onInteractOutsideStart: (e) => {\n      if (\n        !ref.current?.contains(document.activeElement) && // If we are focused, shouldCloseOnBlur will call onClose.\n        !nonDismissable &&\n        shouldCloseOnInteractOutside(e.target as Element)\n      ) {\n        onClose();\n      }\n    },\n    // onInteractOutsideStart will not be called if onInteractOutside is not passed!\n    onInteractOutside: () => {},\n  });\n\n  usePreventScroll({\n    isDisabled: allowScroll === \"auto\" ? !positioning : allowScroll,\n  });\n\n  const { bounds, positioned, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      ...props,\n      minWidth,\n      minHeight,\n      observeContentResize: true,\n    });\n  const positionedBounds =\n    positioning?.targetRef.current && !positioned\n      ? pipe(\n          position({\n            targetElement: positioning.targetRef.current,\n            placement: positioning.placement,\n          }),\n          ensureInViewport\n        )(bounds)\n      : bounds;\n\n  const [isActive, setActive] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setActive,\n  });\n  const { focusableProps } = useFocusable(\n    {\n      excludeFromTabOrder: true,\n    },\n    ref\n  );\n  const { focusForwarderProps } = useFocusForwarder();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  /**\n   * A hook like useOverlayStack or useOverlayZIndex can be introduced which would handle focus/blur, and return/set\n   * the right z-index so that only the overlay holding the focus would have a higher z-index than others.\n   */\n  const zIndex = isActive ? 1 : 0;\n\n  return (\n    <Overlay>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        {/* TODO: FocusScope is redundant. Test focus restoration without it (in status bar progress), and remove it if unnecessary */}\n        <FocusScope restoreFocus>\n          <StyledPopupContainer\n            ref={ref}\n            style={{\n              ...positionedBounds,\n              zIndex,\n            }}\n            tabIndex={-1}\n            {...mergeNonNullProps(\n              focusWithinProps,\n              focusableProps,\n              focusForwarderProps,\n              overlayProps,\n              propsContext.overlayProps || {},\n              dialogProps,\n              filterDOMProps(props)\n            )}\n          >\n            <PopupContext.Provider\n              value={{\n                isActive,\n                movable: interactions !== \"none\",\n                titleProps,\n              }}\n            >\n              <StyledInnerContainer>{props.children}</StyledInnerContainer>\n              {interactions === \"all\" && <OverlayResizeHandles />}\n            </PopupContext.Provider>\n          </StyledPopupContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </Overlay>\n  );\n};\n\nexport const Popup = Object.assign(React.forwardRef(_Popup), {\n  Header: PopupHeader,\n  Layout: PopupLayout,\n  Hint: StyledPopupHint,\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaDialogProps } from \"@react-types/dialog\";\nimport { FocusableElement } from \"@react-types/shared\";\nimport { filterDOMProps, useSlotId } from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { RefObject, useEffect } from \"react\";\nimport { useOverlayFocusContain } from \"@react-aria/overlays\";\nimport { DialogAria } from \"@react-aria/dialog\";\n\n////////////////// NOTE //////////////////////////\n// This is a copy of useDialog from react-aria, with a little part removed from the useEffect call.\n// In the original code, inside the effect, there is a hack to fix an issue in Safari, which involves\n// blurring and refocusing the element. Even though there is a comment about an attempt to make it work\n// nice when used with `shouldCloseOnBlur` option of `useOverlay`, it didn't work and the refocusing causes\n// the popup to close. Probably because in our case useOverlay and useDialog are used in the same level, but\n// in what they've tested on in react-aria, useDialog is used in something nested in the component that uses\n// useDialog.\n// TODO: replace with original useDialog, if the issue explained above got fixed in some version of react-aria.\n//////////////////////////////////////////////////\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(\n  props: AriaDialogProps,\n  ref: RefObject<FocusableElement>\n): DialogAria {\n  let { role = \"dialog\" } = props;\n  let titleId: string | undefined = useSlotId();\n  titleId = props[\"aria-label\"] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, { labelable: true }),\n      role,\n      tabIndex: -1,\n      \"aria-labelledby\": props[\"aria-labelledby\"] || titleId,\n    },\n    titleProps: {\n      id: titleId,\n    },\n  };\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport { filter } from \"ramda\";\n\n/**\n * Like mergeProps, but doesn't merge props where value is null or undefined. That's needed because useFocusable (and\n * maybe some other react-aria hooks as well) return props like onFocus, with value set to null or undefined, which\n * overrides the same prop from other sources.\n */\n// @ts-expect-error not sure why!\nexport const mergeNonNullProps: typeof mergeProps = (...propsArray) => {\n  return mergeProps(\n    ...propsArray.map((props): typeof props =>\n      filter((value) => value != undefined, props)\n    )\n  );\n};\n","import { DOMAttributes } from \"@react-types/shared\";\nimport { createContext } from \"react\";\nimport { PopupProps } from \"./Popup\";\n\nexport const PopupContext = createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n\n/**\n * A context to provide some props that are necessary for PopupTrigger or PopupManager.\n * Passing those props via context helps with providing a nice API in those components.\n */\nexport const PopupControllerContext = createContext<\n  {\n    overlayProps?: DOMAttributes;\n  } & Partial<Pick<PopupProps, \"positioning\" | \"onClose\">>\n>({});\n","import React, { CSSProperties, HTMLAttributes, useContext } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { PopupContext } from \"./PopupContext\";\n\nconst StyledPopupHeader = styled.div<{\n  active?: boolean;\n  hasControls?: boolean;\n}>`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 1.5rem;\n  min-height: ${({ hasControls }) => hasControls && \"1.75rem\"};\n  cursor: default;\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"Popup.Header.activeForeground\" as UnknownThemeProp<\"Popup.Header.activeForeground\">,\n          theme.commonColors.labelForeground\n        )\n      : theme.color(\n          \"Popup.Header.inactiveForeground\" as UnknownThemeProp<\"Popup.Header.inactiveForeground\">,\n          theme.commonColors.labelDisabledForeground\n        )};\n  background-color: ${({ theme, active }) =>\n    active\n      ? theme.color(\"Popup.Header.activeBackground\", \"#e6e6e6\")\n      : theme.color(\"Popup.Header.inactiveBackground\", `#ededed`)};\n`;\n/**\n * Implements appearance of\n * [Popup Header](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75455%3A26566&t=Hzwse5j5R6iCEzVW-4),\n * and also acts as a handle for moving the panel.\n * Expected to be used with {@link Popup#Layout}:\n *\n * @example\n * ```tsx\n * <Popup>\n *    <Popup.Layout header={<Popup.Header>header</Popup.Header>} />\n * </Popup>\n * ```\n */\nexport const PopupHeader = ({\n  children,\n  hasControls,\n  className,\n  style,\n}: {\n  children?: React.ReactNode;\n  hasControls?: boolean;\n  className?: string;\n  style?: CSSProperties;\n}) => {\n  const { isActive, movable, titleProps } = useContext(PopupContext);\n  const renderHeader = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledPopupHeader\n      active={isActive}\n      hasControls={hasControls}\n      className={className}\n      style={style}\n      {...mergeProps(titleProps, otherProps)}\n    >\n      {children}\n    </StyledPopupHeader>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderHeader(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderHeader()\n  );\n};\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { Popup } from \"./Popup\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { StyledPopupHint } from \"@intellij-platform/core/Popup/StyledPopupHint\";\n\nconst StyledPopupLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: inherit;\n`;\nconst StyledPopupLayoutHeader = styled.div`\n  flex-shrink: 0;\n`;\nconst StyledPopupLayoutContent = styled.div`\n  flex: 1;\n  overflow: auto;\n  // Not sure about making the content area a vertical flex container, but it seemed it makes sense as default.\n  // The use case at hand where this was added was \"Branches\" popup, which would of course be implementable without this\n  // too, with an extra flex container around the menu.\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledPopupLayoutFooter = styled.div`\n  flex-shrink: 0;\n`;\n\n/**\n * Popup content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function PopupLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the popup at the top. {@link Popup.Header} can be used for the content.\n   */\n  header?: React.ReactNode;\n  /**\n   * Scrollable content of the popup.\n   */\n  content: React.ReactNode;\n  /**\n   * Fixed position footer of the popup at the bottom. {@link Popup.Hint} can be used for the content.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <StyledPopupLayout>\n      {header && (\n        <StyledPopupLayoutHeader>\n          {typeof header === \"string\" ? (\n            <PopupHeader>{header}</PopupHeader>\n          ) : (\n            header\n          )}\n        </StyledPopupLayoutHeader>\n      )}\n      <StyledPopupLayoutContent>{content}</StyledPopupLayoutContent>\n      {footer && (\n        <StyledPopupLayoutFooter>\n          {typeof footer === \"string\" ? (\n            <StyledPopupHint>{footer}</StyledPopupHint>\n          ) : (\n            footer\n          )}\n        </StyledPopupLayoutFooter>\n      )}\n    </StyledPopupLayout>\n  );\n}\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Popup, PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"@intellij-platform/core/Popup/PopupContext\";\n\nexport interface PopupManagerAPI {\n  /**\n   * Shows a popup within the stack of popups managed by {@link PopupManager}.\n   * The opened popup will be closed when `onClose` interactions happen.\n   */\n  show(\n    popup:\n      | React.ReactElement<PopupProps, typeof Popup>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<PopupProps, typeof Popup>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"PopupManager not found. Wrap your application with PopupManager to be able to open popups imperatively\"\n  );\n};\n\nconst PopupsContext = React.createContext<PopupManagerAPI>({\n  show: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing popups.\n */\nexport const usePopupManager = (): PopupManagerAPI => useContext(PopupsContext);\n\ntype PopupElement = ReactElement<PopupProps, typeof Popup>;\n\nexport interface PopupManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link usePopupManager}) for showing Popups.\n * It renders popups in a portal appended to `body`, unless `disablePortal` is `true`.\n */\nexport const PopupManager: React.FC<PopupManagerProps> = ({ children }) => {\n  const [popups, setPopups] = useState<Array<PopupElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<PopupManagerAPI>(() => {\n    const show: PopupManagerAPI[\"show\"] = (popup) => {\n      newKeyRef.current++;\n      const close = () => {\n        setPopups((currentPopups) =>\n          currentPopups.filter((aPopup) => aPopup !== wrappedPopup)\n        );\n      };\n      const wrappedPopup = (\n        <PopupControllerContext.Provider\n          key={newKeyRef.current}\n          value={{ onClose: close }}\n        >\n          {typeof popup === \"function\" ? popup({ close }) : popup}\n        </PopupControllerContext.Provider>\n      );\n      setPopups((currentPopups) => currentPopups.concat(wrappedPopup));\n    };\n    return {\n      show,\n    };\n  }, []);\n\n  return (\n    <PopupsContext.Provider value={api}>\n      {children}\n      {popups}\n    </PopupsContext.Provider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { OverlayTriggerProps, useOverlayTrigger } from \"@react-aria/overlays\";\nimport { PressResponder } from \"@react-aria/interactions\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport {\n  OverlayTriggerProps as OverlayTriggerStateProps,\n  useOverlayTriggerState,\n} from \"@react-stately/overlays\";\n\nimport { PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"./PopupContext\";\n\nexport interface PopupTriggerProps\n  extends Partial<OverlayTriggerProps>,\n    OverlayTriggerStateProps {\n  placement?: Required<PopupProps>[\"positioning\"][\"placement\"];\n  popup:\n    | React.ReactElement\n    | (({ close }: { close: () => void }) => React.ReactNode);\n  children: React.ReactElement;\n}\n\n/**\n * Popup opened by a trigger. `trigger` can be an element of any pressable component (such as {@link Button} or\n * {@link IconButton}), and is rendered in place. Similar to {@link Popup component}, `children` defines the content\n * of Popup.\n */\nexport const PopupTrigger = React.forwardRef(function PopupTrigger(\n  { placement, children, popup, ...props }: PopupTriggerProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const state = useOverlayTriggerState(props);\n  const triggerRef = useObjectRef(forwardedRef);\n  const { overlayProps, triggerProps } = useOverlayTrigger(\n    { type: props.type || \"menu\" },\n    state,\n    triggerRef\n  );\n  return (\n    <>\n      <PressResponder ref={triggerRef} {...triggerProps}>\n        {children}\n      </PressResponder>\n      {state.isOpen && (\n        <PopupControllerContext.Provider\n          value={{\n            overlayProps,\n            positioning: {\n              targetRef: triggerRef,\n              placement,\n            },\n            onClose: state.close,\n          }}\n        >\n          {typeof popup === \"function\" ? popup({ close: state.close }) : popup}\n        </PopupControllerContext.Provider>\n      )}\n    </>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\n/**\n * Hint component (aka Advertiser) used in Popup's footer.\n * {@see Popup.Layout}\n */\nexport const StyledPopupHint = styled.div`\n  // NOTE: Following the reference implementation, would require to set fallback colors non-prior to\n  // *.(background|foreground) colors (by not passing the fallback color as the second argument to theme.color).\n  // It's only in BigPopup that the fallback colors are prioritized over *-fallback. But in Figma designs, this is\n  // simplified, and hint always has the muted color (like in BigPopup), instead of the default foreground.\n  // So we are intentionally deviating from the reference implementation here.\n  background: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.background\",\n      theme.color(\"SearchEverywhere.Advertiser.background\")\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.foreground\",\n      theme.color(\"SearchEverywhere.Advertiser.foreground\")\n    )};\n  padding: 0.3125rem 0.9375rem 0.3125rem 0.625rem;\n  font-size: 0.875em;\n  line-height: normal;\n  user-select: none;\n  cursor: default;\n  // NOTE: white-space is intentionally not set as nowrap.\n`;\n","import React, {\n  CSSProperties,\n  HTMLAttributes,\n  Ref,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { keyframes } from \"styled-components\";\nimport { useProgressBar } from \"@react-aria/progress\";\nimport { AriaProgressBarProps } from \"@react-types/progress\";\nimport { PressProps, useHover } from \"@react-aria/interactions\";\nimport { useButton } from \"@react-aria/button\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, \"label\"> {\n  /**\n   * Process name, shown above or to the left of the progress bar. Placement is controlled by {@link namePosition}.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-name\n   */\n  name?: React.ReactNode;\n\n  /**\n   * Process name position with respect to the progress bar.\n   * If `namePosition` is \"side\", {@link name} is **not** automatically appended with a colon.\n   * @default \"top\"\n   */\n  namePosition?: \"side\" | \"top\";\n\n  /**\n   * Process details, placed bellow the progress bar, with a de-emphasized color.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-details\n   */\n  details?: React.ReactNode;\n\n  /**\n   * A second line of details. Not an officially documented feature, but it's supported in the reference impl.\n   */\n  secondaryDetails?: React.ReactNode;\n\n  /**\n   * Placed next to and aligned with the progress bar, used for\n   * [process control](https://jetbrains.github.io/ui/controls/progress_bar/#process-control) buttons.\n   */\n  button?: React.ReactNode;\n\n  /**\n   * Progress bar track width.\n   */\n  width?: CSSProperties[\"width\"];\n\n  /**\n   * Not supported in [the official specs](https://jetbrains.github.io/ui/controls/progress_bar/#25), but the progress\n   * bar in status bar has a denser spacing. It still won't be a pixel perfect match with the progress bar in the\n   * status bar.\n   */\n  dense?: boolean;\n\n  style?: HTMLAttributes<unknown>[\"style\"];\n  className?: HTMLAttributes<unknown>[\"className\"];\n}\n\ninterface ProgressBarContextObj {\n  setForcedDetails: (details: string | null) => void;\n  setTooltip: (tooltip: string | null) => void;\n}\n\n/**\n * @see https://jetbrains.github.io/ui/controls/progress_bar/\n * @see https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/platform-api/src/com/intellij/openapi/ui/panel/ProgressPanelBuilder.java\n *\n * Known issues:\n * There are a couple of UI issues because of the current layout (which can be improved probably):\n * - max-width of the label and details, it's not necessarily aligned with the the progressbar track, because they don't\n *   share the same container\n * - when label is on the side, details is aligned with the label, instead of the progressbar track.\n */\nexport const ProgressBar = ({\n  value = 0,\n  maxValue = 100,\n  minValue = 0,\n  name,\n  namePosition = \"top\",\n  details,\n  secondaryDetails,\n  button,\n  width,\n  dense,\n  className,\n  style,\n  ...props\n}: ProgressBarProps): React.ReactElement => {\n  const { progressBarProps, labelProps } = useProgressBar({\n    ...props,\n    label: name,\n    value,\n    maxValue,\n    minValue,\n  });\n  const percentage = (100 * (value / maxValue)).toFixed(0);\n  const [forcedDetails, setForcedDetails] = useState<null | string>(\"\");\n  const [tooltip, setTooltip] = useState<null | string>(\"\");\n\n  const contextValue: ProgressBarContextObj = useMemo(\n    () => ({\n      setForcedDetails,\n      setTooltip,\n    }),\n    []\n  );\n  const label = (\n    <StyledProgressBarLabel {...labelProps}>{name}</StyledProgressBarLabel>\n  );\n  const effectiveDetails = details ? tooltip || forcedDetails || details : null;\n  return (\n    <StyledProgressBarContainer style={style} className={className}>\n      {namePosition === \"top\" && label}\n      <StyledProgressBarLineContainer\n        dense={dense}\n        hasTopMargin={Boolean(name) && namePosition === \"top\"}\n        hasBottomMargin={Boolean(effectiveDetails)}\n      >\n        {namePosition === \"side\" && label}\n        <StyledProgressBarTrack\n          style={{ width }}\n          {...progressBarProps}\n          indeterminate={props.isIndeterminate}\n        >\n          {!props.isIndeterminate && (\n            <StyledProgressBarProgress style={{ width: `${percentage}%` }} />\n          )}\n        </StyledProgressBarTrack>\n        {props.showValueLabel && (\n          <span>{props.valueLabel ?? `${percentage}%`}</span>\n        )}\n        <ProgressBarContext.Provider value={contextValue}>\n          {button}\n        </ProgressBarContext.Provider>\n      </StyledProgressBarLineContainer>\n      <StyledProgressBarDetails>{effectiveDetails}</StyledProgressBarDetails>\n      <StyledProgressBarDetails>{secondaryDetails}</StyledProgressBarDetails>\n    </StyledProgressBarContainer>\n  );\n};\n\nconst ProgressBarContext = React.createContext<null | ProgressBarContextObj>(\n  null\n);\n\nconst StyledProgressBarContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground /* TODO: check*/};\n  cursor: default; // prevent cursor on text\n`;\n\nconst StyledProgressBarLineContainer = styled.div<{\n  dense?: boolean;\n  hasTopMargin?: boolean;\n  hasBottomMargin?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: ${({ dense }) => (dense ? \"0.5rem\" : \"0.625rem\")};\n  height: 4px;\n  // spacing is based on the reference impl and figma designs. top and bottom spacing is inverted in the spec document\n  // figma: https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?node-id=75426%3A16650\n  // spec document: https://jetbrains.github.io/ui/controls/progress_bar/#25\n  margin-top: ${({ hasTopMargin }) => hasTopMargin && \"0.375rem\"};\n  margin-bottom: ${({ hasBottomMargin }) => hasBottomMargin && \"0.25rem\"};\n`;\n\nconst StyledProgressBarLabel = styled.div`\n  white-space: nowrap;\n  max-width: calc(100% - 2rem);\n  overflow: hidden;\n`;\n\nconst StyledProgressBarDetails = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n  font-size: 0.82em;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 2rem); // not the best way\n`;\n\nconst StyledProgressBarTrack = styled.div<{ indeterminate?: boolean }>`\n  height: inherit;\n  border-radius: 2px;\n  overflow: hidden;\n  display: flex;\n\n  // In case used in flex layout\n  min-width: 0;\n  flex: 1;\n\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.trackColor\",\n      theme.dark ? \"rgb(85,85,85)\" : \"rgb(196,196,196)\"\n    )};\n  ${({ indeterminate }) =>\n    indeterminate &&\n    css`\n      background: linear-gradient(\n        90deg,\n        ${getIndeterminateStartColor} 0%,\n        ${getIndeterminateEndColor} 50%,\n        ${getIndeterminateStartColor} 100%\n      );\n      background-size: 96px auto;\n      animation: 800ms ${indeterminateBackgroundAnimation} linear infinite;\n    `}\n`;\n\nconst getIndeterminateStartColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateStartColor\");\nconst getIndeterminateEndColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateEndColor\");\n\nconst indeterminateBackgroundAnimation = keyframes`\n  0% {\n    background-position: 0;\n  }\n  100% {\n    background-position: 96px;\n  }\n`;\n\nconst StyledProgressBarProgress = styled.div`\n  height: 100%;\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.progressColor\",\n      theme.dark ? \"rgb(160,160,160)\" : \"rgb(128,128,128)\"\n    )};\n`;\n\ntype ProgressBarIconButtonProps = Pick<PressProps, \"onPress\"> & {\n  hoverTooltip: string;\n};\n\n/**\n * Accessibility and functionality of progress bar icon buttons\n * @private maybe?\n */\nexport function useProgressBarIconButton(\n  { onPress, hoverTooltip }: ProgressBarIconButtonProps,\n  ref: Ref<HTMLElement>\n) {\n  const { buttonProps } = useButton(\n    {\n      onPress,\n      elementType: \"span\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: it works, but it's intentionally excluded from the type.\n      preventFocusOnPress: true,\n    },\n    ref\n  );\n  const context = useContext(ProgressBarContext);\n  const { hoverProps, isHovered } = useHover({});\n  useEffect(() => {\n    context?.setTooltip(isHovered ? hoverTooltip : null);\n  }, [hoverTooltip, isHovered]);\n  return {\n    buttonProps: mergeProps(buttonProps, hoverProps),\n  };\n}\n\n/**\n * @private maybe?\n * */\nexport function useProgressBarPauseIconButton(\n  { paused, ...props }: ProgressBarIconButtonProps & { paused: boolean },\n  ref: Ref<HTMLElement>\n) {\n  const context = useContext(ProgressBarContext);\n  useEffect(() => {\n    context?.setForcedDetails(paused ? \"Paused\" : null);\n  }, [paused]);\n  return useProgressBarIconButton(props, ref);\n}\n\n/**\n * Experimenting with an idea of exposing parts on each component, to maximize styling customizability, similar to\n * [classes](https://mui.com/joy-ui/api/button/#classes) API in MUI components. But instead of passing classes prop,\n * one would be able to create custom versions of a component by doing something like this:\n * const CustomComponent = styled(Component)`\n *   ${Component.part1} {\n *     // custom style here\n *   }\n * `;\n * The question is if this type of customizability is actually a good thing in the balance between flexibility for\n * catering for different use cases and not stepping out of the design system boundaries.\n * Another potential downside is that the public API expands to the anatomy of the component.\n */\nProgressBar.Container = StyledProgressBarContainer;\nProgressBar.Label = StyledProgressBarLabel;\nProgressBar.LineContainer = StyledProgressBarLineContainer;\nProgressBar.Track = StyledProgressBarTrack;\nProgressBar.Progress = StyledProgressBarProgress;\nProgressBar.Details = StyledProgressBarDetails;\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarCancelButtonProps {\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n  onPress: () => void;\n}\n\n/**\n * Stop (cancel) icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarStopButton = ({\n  small,\n  onPress,\n}: ProgressBarCancelButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarIconButton(\n    { onPress, hoverTooltip: \"Cancel\" },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      ref={ref}\n      {...buttonProps}\n      icon={`process/stop${small ? \"Small\" : \"\"}.svg`}\n      hoverIcon={`process/stop${small ? \"Small\" : \"\"}Hovered.svg`}\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  ThreeViewSplitter,\n  ThreeViewSplitterProps,\n} from \"./ThreeViewSplitter/ThreeViewSplitter\";\n\ntype ResizableViewProps = Omit<\n  ThreeViewSplitterProps,\n  | \"innerView\"\n  | \"firstView\"\n  | \"firstSize\"\n  | \"onFirstResize\"\n  | \"lastView\"\n  | \"lastSize\"\n  | \"onLastResize\"\n> & {\n  children: React.ReactNode;\n  onResize: ThreeViewSplitterProps[\"onFirstResize\"];\n  size: ThreeViewSplitterProps[\"firstSize\"];\n  /**\n   * Whether the resizer should be placed at before or after the resizable view.\n   */\n  resizerPlacement?: \"before\" | \"after\";\n};\n/**\n * A single resizable view, built on top of {@link ThreeViewSplitter}, just to provide better prop interface.\n * Like `ThreeViewSplitter` it supports \"horizontal\" or \"vertical orientations. There is an extra `resizerPlacement`\n * prop which determines where the resizer should be placed in relation with the view. When set to \"before\" the view\n * will be resizable from the start (\"left\" or \"top\"). When set to \"after\" the view will be resizable from end (\"right\"\n * or \"bottom\"). Default is \"after\"\n */\nexport const ResizableView = ({\n  children,\n  size,\n  onResize,\n  resizerPlacement = \"after\",\n  ...props\n}: ResizableViewProps) => (\n  <ThreeViewSplitter\n    {...(resizerPlacement === \"after\"\n      ? { firstView: children, firstSize: size, onFirstResize: onResize }\n      : { lastView: children, lastSize: size, onLastResize: onResize })}\n    {...props}\n  />\n);\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useBottomResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will increase/decrease the height\n */\nexport const BottomResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useBottomResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype HorizontalResizerViewProps = ResizerViewProps<\"horizontal\">;\n\nconst StyledHorizontalResizer = styled.div`\n  top: 0;\n  height: 100%;\n  width: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledHorizontalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: HorizontalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  width: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  height: 100%;\n  left: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a horizontal layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const HorizontalResizer: React.FC<HorizontalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"col\",\n  children,\n  style = {},\n  resizerProps,\n}) => {\n  return (\n    <StyledHorizontalResizer\n      {...resizerProps}\n      style={{ ...style, background, width: size }}\n    >\n      {children}\n      <StyledHorizontalResizerArea handleSize={outerPadding} cursor={cursor} />\n    </StyledHorizontalResizer>\n  );\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useLeftResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the left side of the resizable view. i.e.\n * moving mouse to right/left will decrease/increase the width\n */\nexport const LeftResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useLeftResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useRightResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the right side of the resizable view. i.e.\n * moving mouse to right/left will increase/decrease the width\n */\nexport const RightResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useRightResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useTopResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will decrease/increase the height\n */\nexport const TopResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useTopResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype VerticalResizerViewProps = ResizerViewProps<\"vertical\">;\n\nconst StyledVerticalResizer = styled.div`\n  width: 100%;\n  height: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledVerticalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: VerticalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  height: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  width: 100%;\n  top: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a vertical layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const VerticalResizer: React.FC<VerticalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"row\",\n  resizerProps,\n  children,\n  style = {},\n}) => (\n  <StyledVerticalResizer\n    {...resizerProps}\n    style={{ ...style, background, height: size }}\n  >\n    {children}\n    <StyledVerticalResizerArea handleSize={outerPadding} cursor={cursor} />\n  </StyledVerticalResizer>\n);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { ResizerProps } from \"./ResizerProps\";\n\ntype UseResizerProps = Pick<\n  ResizerProps,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n>;\n\nexport type ResizerViewProps<O = \"horizontal\" | \"vertical\"> = Omit<\n  ResizerProps<O>,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n> &\n  ReturnType<typeof useResizer>;\n\nconst useResizer = (\n  orientation: \"horizontal\" | \"vertical\",\n  invert: boolean,\n  { onResizeStarted, onResize, onResizeEnd }: UseResizerProps\n) => {\n  const props = useMove({\n    dragThreshold: 0,\n    onMoveStart: () => onResizeStarted() || 0,\n    onMoveEnd: () => onResizeEnd?.(),\n    onMove: ({ movement, startState }) =>\n      onResize(\n        startState +\n          (invert ? -1 : +1) *\n            movement[orientation === \"horizontal\" ? \"x\" : \"y\"]\n      ),\n  });\n  return {\n    resizerProps: props,\n  };\n};\n\nexport const useLeftResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", true, props);\n};\n\nexport const useRightResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", false, props);\n};\n\nexport const useTopResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", true, props);\n};\n\nexport const useBottomResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", false, props);\n};\n","import React, { ComponentProps, useState } from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n  CommonActionId,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { Item } from \"@intellij-platform/core/Collections\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport interface SearchInputProps\n  extends Omit<InputProps, \"onSubmit\" | \"onChange\"> {\n  /**\n   * Search history to be shown as a menu when the search icon is pressed.\n   */\n  searchHistory?: Array<string>;\n  /**\n   * The content of \"show history\" button tooltip, and the corresponding action title.\n   * @default \"Recent Search\"\n   */\n  historyButtonTitle?: string;\n  /**\n   * Called when the search input is cleared by either clear button or `Escape` key.\n   * `onChange` is also called with an empty string, whenever the input is cleared,\n   * so there is no need for updating the state using `onClear`, when the value is controlled.\n   *\n   * @param clearedValue the value before clearing.\n   */\n  onClear?: (clearedValue: string) => void;\n  /**\n   * Called when the search is submitted by pressing `Enter`\n   * @param value submitted text\n   */\n  onSubmit?: (value: string) => void;\n  /**\n   * Controlled value of the search input\n   */\n  value?: string;\n  /**\n   * Default value of the search input, used for initialization when value is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * Called when the value is changed.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Called when a history item is selected. `onChange` is called with the selected text, so\n   * there is no need for updating the state using `onHistoryItemSelected`, when the value is controlled.\n   *\n   * @param value text selected from history.\n   * @param previousValue the value of the input before the history item was selected.\n   */\n  onHistoryItemSelected?: (value: string, previousValue: string) => void;\n}\n\nconst StyledInput = styled(Input)`\n  input[type=\"search\"] {\n    -webkit-appearance: none;\n    &::-webkit-search-cancel-button {\n      -webkit-appearance: none;\n    }\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n  }\n`;\n\n/**\n * A wrapper around {@link Input} with a few additions:\n * - A Search icon, added as an {@link InputProps#addonBefore addonBefore}.\n * - A clear button, added as an {@link InputProps#addonAfter addonAfter}, when the input has value.\n *   {@link SearchInputProps#onClear onClear} is called when the clear button is clicked.\n * - A list of search queries shown as a menu, when the search icon is clicked,\n *   if {@link SearchInputProps#searchHistory searchHistory} is provided.\n * - An action provided on the input element, to open the search history via\n *   {@link CommonActionId.SHOW_SEARCH_HISTORY} shortcut.\n * - Search submission callback ({@link SearchInputProps#onSubmit onSubmit}) called when search is submitted by pressing Enter\n *\n * {@link InputProps#onChange onChange} and {@link InputProps#onSubmit onSubmit} props are also different in SearchInput, compared to\n * the corresponding props of the native input.\n *\n * Caveat: If the width is not set (either explicitly or via the entailing layout), the width of the input will change when clear button shows/hides.\n *\n */\nexport const SearchInput = React.forwardRef(function SearchInput(\n  {\n    addonBefore,\n    addonAfter,\n    searchHistory,\n    onClear,\n    onSubmit,\n    onHistoryItemSelected,\n    historyButtonTitle = \"Recent Search\",\n    value: valueProp,\n    defaultValue = \"\",\n    onChange,\n    type = \"search\",\n    inputRef: inputRefProp,\n    ...props\n  }: SearchInputProps,\n  forwardedRef: React.Ref<HTMLDivElement>\n) {\n  const [value, setValue] = useControlledState(\n    valueProp!,\n    defaultValue,\n    onChange!\n  );\n  const inputContainerRef = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const [isSearchHistoryOpen, setSearchHistoryOpen] = useState(false);\n  const showSearchHistoryAction: ActionDefinition = {\n    id: CommonActionId.SHOW_SEARCH_HISTORY,\n    title: historyButtonTitle,\n    actionPerformed: () => {\n      setSearchHistoryOpen(true);\n    },\n  };\n  // TODO: rename HelpTooltip, ActionTooltip, etc. to Tooltip.Action Tooltip.Help, then add ActionTooltip in action\n  //  components, and use that instead of the more low-level API used here.\n  const getShortcut = useGetActionShortcut();\n  const searchIcon = searchHistory ? (\n    <MenuTrigger\n      isOpen={isSearchHistoryOpen}\n      onOpenChange={setSearchHistoryOpen}\n      positioningTargetRef={inputContainerRef}\n      renderMenu={({ menuProps }) => (\n        <Menu\n          {...menuProps}\n          autoFocus=\"first\"\n          onAction={(key) => {\n            const historyItemText =\n              searchHistory[parseInt(`${key}`.split(\"_\")[0])];\n            if (historyItemText !== undefined) {\n              setValue(historyItemText);\n              onHistoryItemSelected?.(historyItemText, value);\n              inputRef.current?.focus();\n            }\n          }}\n        >\n          {searchHistory.map((historyItem, index) => (\n            <Item key={`${index}_${historyItem}`}>{historyItem}</Item>\n          ))}\n        </Menu>\n      )}\n    >\n      {(menuTriggerProps, ref) => (\n        <TooltipTrigger\n          tooltip={\n            <ActionTooltip\n              actionName={historyButtonTitle}\n              shortcut={getShortcut(CommonActionId.SHOW_SEARCH_HISTORY)}\n            />\n          }\n        >\n          {(tooltipTriggerProps) => (\n            <PlatformIcon\n              {...mergeProps(tooltipTriggerProps, menuTriggerProps)}\n              ref={ref}\n              icon=\"actions/searchWithHistory.svg\"\n              role=\"button\"\n              aria-label={historyButtonTitle}\n            />\n          )}\n        </TooltipTrigger>\n      )}\n    </MenuTrigger>\n  ) : (\n    <PlatformIcon icon=\"actions/search.svg\" />\n  );\n  const clear = () => {\n    setValue(\"\");\n    onClear?.(value);\n  };\n  const inputProps = mergeProps<ComponentProps<typeof Input>[]>(props, {\n    ref: inputContainerRef,\n    inputRef,\n    value,\n    type,\n    onChange: (event) => {\n      setValue(event.target.value);\n    },\n    addonBefore: (\n      <>\n        {searchIcon}\n        {addonBefore}\n      </>\n    ),\n    addonAfter: (\n      <>\n        {value && (\n          <AutoHoverPlatformIcon\n            onClick={clear}\n            role=\"button\"\n            aria-label=\"Clear search\"\n            icon=\"actions/close\"\n            hoverIcon=\"actions/closeHovered\"\n          />\n        )}\n        {addonAfter}\n      </>\n    ),\n    onKeyDown: (event) => {\n      if (event.repeat) {\n        return;\n      }\n      if (event.key === \"Enter\") {\n        onSubmit?.(event.currentTarget.value);\n      } else if (event.key === \"Escape\") {\n        clear();\n      }\n    },\n  });\n  if (searchHistory) {\n    return (\n      <ActionsProvider actions={[showSearchHistoryAction]}>\n        {({ shortcutHandlerProps }) => (\n          <StyledInput {...mergeProps(inputProps, shortcutHandlerProps)} />\n        )}\n      </ActionsProvider>\n    );\n  }\n  return <StyledInput {...inputProps} />;\n});\n","import React, { useRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface SpeedSearchInputProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n  clear: () => void;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 0.25rem;\n`;\n\nconst StyledSpeedSearchInput = styled.span<{ noMatch?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  background: ${({ theme, noMatch }) =>\n    noMatch\n      ? theme.color(\n          \"SearchField.errorBackground\",\n          theme.dark ? \"#743A3A\" : \"#ffcccc\"\n        )\n      : theme.color(\n          \"TextField.background\"\n        )}; // fallback logic not checked with the ref impl\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )}; // fallback logic not checked with the ref impl\n  height: 1.5rem; // 24px, JBTextField COMPACT_HEIGHT\n  padding: 0.125rem 0.375rem;\n  border: 1px solid ${({ theme }) => theme.getOutlineColor(true, false)};\n  border-radius: ${({ theme }) =>\n    ((theme.value(\"Component.arc\") as number) ?? 5) / 2}px;\n`;\nconst StyledSearchText = styled.span`\n  flex: 1;\n  font-size: 0.91em; // RelativeFont.SMALL\n`;\n\n/**\n * An input field to be rendered to show the filter value in speed search in menus and similar speedSearch-enabled\n * components.\n * @see SpeedSearchPopup\n */\nexport const SpeedSearchInput = React.forwardRef<\n  HTMLElement,\n  SpeedSearchInputProps\n>(({ active, match, children, clear }, ref) => {\n  const clearButtonRef = useRef<HTMLElement>(null);\n  const { buttonProps } = useButton(\n    {\n      elementType: \"span\",\n      \"aria-label\": \"Clear search\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n      preventFocusOnPress: true,\n      onPress: clear,\n    },\n    clearButtonRef\n  );\n\n  // Temporary styled components until SearchInput is implemented\n  return active ? (\n    <StyledSpeedSearchInput ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      <StyledSearchText>\n        {(children || \"\").replace(/ /g, \"\\u00A0\")}\n      </StyledSearchText>\n      {children && (\n        <AutoHoverPlatformIcon\n          {...buttonProps}\n          ref={clearButtonRef}\n          icon=\"actions/close\"\n          hoverIcon=\"actions/closeHovered\"\n        />\n      )}\n    </StyledSpeedSearchInput>\n  ) : null;\n});\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown in the top left corner of list, tree, etc., which shows the search\n * query.\n * @see SpeedSearchInput\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ noMatch?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ noMatch, theme }) =>\n    noMatch\n      ? theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)\n      : theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        // Seems reasonable to prevent default here generally, but the specific case this is added for is the space key,\n        // scrolling the page.\n        event.preventDefault();\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport React, { RefObject } from \"react\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\nexport interface SpeedSearchState {\n  /**\n   * Whether speed search is active. Speed search becomes active when the user starts to type and becomes inactive\n   * when Escape is pressed, or when the speed search container is blurred and `keepSearchActiveOnBlur` is false.\n   * Whenever speed search becomes inactive, search text is also cleared.\n   * Note that speed search can be active while search term is empty.\n   */\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  /**\n   * clears search term and sets active to false\n   */\n  clear: () => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    isSearchActive: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.isSearchActive!,\n    props.defaultIsSearchActive ?? false,\n    props.onIsSearchActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n    clear: () => {\n      setSearchTerm(\"\");\n      setActive(false);\n    },\n  };\n}\n\nexport interface SpeedSearchProps {\n  keepSearchActiveOnBlur?: boolean | ((e: React.FocusEvent) => boolean);\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { keepSearchActiveOnBlur }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState,\n  ref: RefObject<HTMLElement>\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!ref.current?.contains(e.target as HTMLElement)) {\n        // In case events are propagated through portals\n        return;\n      }\n      if (e.key === \"a\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n      }\n      if (e.key === \"Escape\") {\n        clear();\n      } else {\n        ghostInputKeydown(e);\n      }\n      /**\n       * In the reference impl, at least some action shortcuts are allowed\n       * while the search is active. But actions with some other shortcuts\n       * (like Delete) are not triggered while the speed search is active\n       * the current condition below is not 100% matching the reference impl,\n       * but seems to be good enough for now.\n       */\n      if (!active || hasAnyModifier(e)) {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onBlurWithin: (event) => {\n      if (\n        !(typeof keepSearchActiveOnBlur === \"function\"\n          ? keepSearchActiveOnBlur(event)\n          : keepSearchActiveOnBlur)\n      ) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarProps {\n  left: React.ReactNode;\n  right: React.ReactNode;\n}\n\n/**\n * Status bar rendered at the bottom of the main window. In the reference implementation, there are three slots for\n * content: left, right and center. It doesn't seem center is really necessary, so only left and right are supported\n * for now.\n * @param left content on the left side of the status bar.\n * @param right content on the right side of the status bar. Typically, a bunch of {@link StatusBarWidget}s\n */\nexport const StatusBar = ({\n  left,\n  right,\n}: StatusBarProps): React.ReactElement => {\n  return (\n    <StyledStatusBar\n      onMouseDown={(e) => {\n        // stop focus from going out of the currently focused element, when status bar is clicked\n        // might be too intrusive to prevent default unconditionally :-? Also, it may make sense for it to be an option\n        e.preventDefault();\n      }}\n    >\n      <StyledStatusBarLeft>{left}</StyledStatusBarLeft>\n      <StyledStatusBarRight>{right}</StyledStatusBarRight>\n    </StyledStatusBar>\n  );\n};\n\nconst StyledStatusBar = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.25rem;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between; // because there is left and right sides\n  background-color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.background\" as UnknownThemeProp<\"StatusBar.background\">,\n      theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)\n    ) || \"#fff\"};\n  color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.Widget.foreground\" as UnknownThemeProp<\"StatusBar.Widget.foreground\">,\n      theme.commonColors.labelForeground\n    )};\n  border-top: 1px solid\n    ${({ theme }) => theme.color(\"StatusBar.borderColor\", \"rgb(145, 145, 145)\")};\n  height: calc(1.25rem + 1px /* border*/);\n  line-height: 1.25rem;\n  font-size: 0.656rem; // not verified\n  cursor: default;\n`;\n\nconst StyledStatusBarSection = styled.div`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst StyledStatusBarRight = styled(StyledStatusBarSection)`\n  flex-shrink: 0;\n`;\nconst StyledStatusBarLeft = styled(StyledStatusBarSection)`\n  flex-shrink: 1;\n  min-width: 0;\n  overflow: hidden;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { PressProps, usePress } from \"@react-aria/interactions\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface StatusBarWidgetProps extends PressProps {\n  label?: React.ReactNode;\n  icon?: React.ReactNode;\n}\n\n/**\n * Status bar button (aka widget), with the right hover and pressed appearance.\n * It doesn't get focused when pressed, and is excluded from tab order.\n * Disabled style is not couldn't be found, so it's skipped at the moment.\n */\nexport const StatusBarWidget = React.forwardRef(function StatusBarWidget(\n  props: StatusBarWidgetProps,\n  forwardedRef: ForwardedRef<HTMLSpanElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  // Maybe it's better for a11y to use useButton, or at least use button element?\n  const { pressProps, isPressed } = usePress({\n    ref,\n    ...props,\n    preventFocusOnPress: true,\n  });\n  const { focusableProps } = useFocusable({ excludeFromTabOrder: true }, ref);\n\n  const StyledWrapper = props.label\n    ? StyledStatusBarWidget\n    : StyledStatusBarIconWidget;\n  return (\n    <StyledWrapper\n      {...mergeProps(pressProps, focusableProps)}\n      className={isPressed ? \"pressed\" : \"\"}\n      ref={ref}\n    >\n      {props.icon}\n      {props.icon && props.label && (\n        <>&nbsp;</> //not the nicest way to handle spacing!\n      )}\n      {props.label}\n    </StyledWrapper>\n  );\n});\n\nconst StyledStatusBarWidget = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.375rem\"};\n  height: 1.125rem;\n  white-space: nowrap;\n  &:hover {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverBackground\" as UnknownThemeProp<\"StatusBar.Widget.hoverBackground\">,\n        theme.color(\"ActionButton.hoverBackground\", \"#dfdfdf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverForeground\" as UnknownThemeProp<\"StatusBar.Widget.hoverForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n  &.pressed {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedBackground\" as UnknownThemeProp<\"StatusBar.Widget.pressedBackground\">,\n        theme.color(\"ActionButton.pressedBackground\", \"#cfcfcf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedForeground\" as UnknownThemeProp<\"StatusBar.Widget.pressedForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n`;\n\nconst StyledStatusBarIconWidget = styled(StyledStatusBarWidget)`\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.25rem\"};\n`;\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  closeButton,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <DebuggerTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n}) => {\n  return (\n    <TabContentLayout startIcon={icon} title={title} endIcon={closeButton} />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\n\ninterface EditorTabContentProps {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button, shown in place of \"pin\" button if not pinned. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <EditorTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  closeButton,\n  onUnpin,\n  pinned,\n  containerProps,\n}: EditorTabContentProps) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <TooltipTrigger tooltip={<ActionTooltip actionName=\"Unpin Tab\" />}>\n            <BareButton\n              onPress={onUnpin}\n              excludeFromTabOrder\n              preventFocusOnPress\n            >\n              <PlatformIcon icon=\"actions/pinTab\" />\n            </BareButton>\n          </TooltipTrigger>\n        ) : (\n          closeButton\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import React from \"react\";\nimport { BareButton, BareButtonProps } from \"@intellij-platform/core/Button\";\nimport { PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\n\nconst StyledIconWrapper = styled.span`\n  display: inherit;\n  .icon.hover {\n    display: none;\n  }\n  &:hover {\n    .icon {\n      display: none;\n    }\n    .icon.hover {\n      display: unset;\n    }\n  }\n`;\n/**\n * Close button for Tab\n */\nexport const TabCloseButton = (props: Omit<BareButtonProps, \"children\">) => {\n  // using useHover proved to be unstable.\n  return (\n    <BareButton {...props} excludeFromTabOrder preventFocusOnPress>\n      <StyledIconWrapper>\n        <PlatformIcon icon={\"actions/closeHovered\"} className=\"icon hover\" />\n        <PlatformIcon icon={\"actions/close\"} className=\"icon\" />\n      </StyledIconWrapper>\n    </BareButton>\n  );\n};\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps = {} }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    // To allow tooltip be used easily. TooltipTrigger passes props via FocusableContext.\n    const { focusableProps } = useFocusable({}, useObjectRef(ref));\n    return (\n      <StyledTabItemLayout\n        {...mergeProps(focusableProps, containerProps)}\n        ref={ref}\n      >\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { ForwardedRef, forwardRef, RefObject, useEffect } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  shouldSelectOnPressUp?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = forwardRef(function Tab<T extends object>(\n  {\n    state,\n    item,\n    focusable,\n    active,\n    shouldSelectOnPressUp,\n    Component = StyledDefaultTab,\n  }: TabProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): React.ReactElement {\n  const { key, rendered } = item;\n  const ref = useForwardedRef(forwardedRef);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab(\n    {\n      key,\n      // @ts-expect-error  TODO(@react-aria/tabs): update to ^3.6.0 to support this\n      shouldSelectOnPressUp,\n    },\n    state,\n    ref\n  );\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n});\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useOverflowObserver } from \"../utils/overflow-utils/useOverflowObserver\";\nimport { useHasOverflow } from \"./useHasOverflow\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Whether selected tab should change on press up instead of press down.\n   * @default false.\n   */\n  shouldSelectOnPressUp?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n *  - FIX: When a tab that was not selected is removed, selection should not change. It now changes to the tab before the removed one.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  shouldSelectOnPressUp,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, hasOverflow } = useHasOverflow({ ref });\n  const { overflowedElements } = useOverflowObserver(ref);\n  const overflowedKeys = new Set(\n    overflowedElements\n      .map((element) =>\n        element instanceof HTMLElement ? element.dataset[\"key\"] : null\n      )\n      .filter(notNull)\n  );\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={hasOverflow.left}\n        hasOverflowAtEnd={hasOverflow.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              shouldSelectOnPressUp={shouldSelectOnPressUp}\n              active={active}\n              Component={TabComponent}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useHasOverflow<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [hasOverflow, setHasOverflow] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newHasOverflow = {\n        top: offsetTop > threshold,\n        bottom: offsetBottom > threshold,\n        left: offsetLeft > threshold,\n        right: offsetRight > threshold,\n      };\n      if (\n        hasOverflow.top !== newHasOverflow.top ||\n        hasOverflow.bottom !== newHasOverflow.bottom ||\n        hasOverflow.left !== newHasOverflow.left ||\n        hasOverflow.right !== newHasOverflow.right\n      ) {\n        setHasOverflow(newHasOverflow);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    hasOverflow,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [...collection].filter(\n            (menuItem) => overflowedKeys.has(menuItem.key)\n          );\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <IconButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </IconButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\n\ntype ToolWindowTabContentProps = {\n  icon?: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <ToolWindowTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactNode;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n};\n\nexport const ToolWindowTabContent = React.forwardRef(\n  (\n    { icon, title, closeButton, containerProps }: ToolWindowTabContentProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    return (\n      <TabContentLayout\n        containerProps={containerProps}\n        ref={ref}\n        startIcon={icon}\n        title={title}\n        endIcon={closeButton}\n      />\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n    shouldSelectOnPressUp\n  />\n);\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","// language=JSRegexp\nconst numberPattern = \"[0-9]{0,3}.?[0-9]*\";\n\nconst parseComponent = (componentStr: string, index: number) =>\n  componentStr\n    ? index < 3\n      ? parseInt(componentStr)\n      : Math.round(Math.min(parseFloat(componentStr), 1) * 255)\n    : undefined;\n\nconst parseHexRgba = (str: string) =>\n  str\n    .match(/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?$/i)\n    ?.slice(1, 5)\n    .map((i) => (i ? parseInt(i, 16) : undefined));\nconst parseShorthandHex = (str: string) =>\n  str\n    .match(/^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i)\n    ?.slice(1, 4)\n    .map((i) => (i ? parseInt(i + i, 16) : undefined));\nconst parseRgb = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgb\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\nconst parseRgba = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgba\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\n\n/**\n * parses a color string into rgba components.\n * @param str\n */\nexport const parseColorString = (\n  str: string\n): [number, number, number, number?] | null => {\n  const result = [parseHexRgba, parseShorthandHex, parseRgb, parseRgba].reduce<\n    (number | undefined)[] | undefined\n  >((result, parse) => result || parse(str), undefined);\n  return Array.isArray(result) &&\n    result.slice(0, 3).every((c) => Number.isInteger(c))\n    ? (result as [number, number, number, number?])\n    : null;\n};\n","import { parseColorString } from \"./parseColorString\";\n\n/**\n * A Color class resembling AWT Color\n */\nexport class Color {\n  public readonly r: number;\n  public readonly g: number;\n  public readonly b: number;\n  public readonly a: number;\n\n  private static readonly FACTOR = 0.7;\n\n  constructor(r: number, g: number, b: number, a?: number);\n  constructor(rgba: string);\n  constructor(rgba: Color);\n  constructor(\n    rgba: string | number | Color,\n    g?: number,\n    b?: number,\n    a: number = 255\n  ) {\n    let r: number;\n    if (typeof rgba === \"string\") {\n      [r = NaN, g = NaN, b = NaN, a = 255] = parseColorString(rgba) || [];\n    } else if (rgba instanceof Color) {\n      [r, g, b, a] = [rgba.r, rgba.g, rgba.b, rgba.a];\n    } else {\n      r = rgba;\n    }\n    this.r = r;\n    this.g = g!;\n    this.b = b!;\n    this.a = a < 1 ? Math.round(a * 255) : a;\n  }\n\n  isValid() {\n    return (\n      Number.isInteger(this.r) &&\n      Number.isInteger(this.g) &&\n      Number.isInteger(this.b) &&\n      Number.isInteger(this.a)\n    );\n  }\n\n  /**\n   * Extra method for changing transparency\n   */\n  withTransparency(alpha: number) {\n    return new Color(this.r, this.g, this.b, alpha);\n  }\n\n  brighter() {\n    let { r, g, b, a: alpha } = this;\n    const int = Math.floor,\n      FACTOR = Color.FACTOR;\n    // The rest is copy paste of java.awt.Color (only `int i` is changed to `let i` :D)\n    let i = int(1.0 / (1.0 - FACTOR));\n    if (r == 0 && g == 0 && b == 0) {\n      return new Color(i, i, i, alpha);\n    }\n    if (r > 0 && r < i) r = i;\n    if (g > 0 && g < i) g = i;\n    if (b > 0 && b < i) b = i;\n\n    return new Color(\n      Math.min(int(r / FACTOR), 255),\n      Math.min(int(g / FACTOR), 255),\n      Math.min(int(b / FACTOR), 255),\n      alpha\n    );\n  }\n\n  darker() {\n    const FACTOR = Color.FACTOR;\n    const int = Math.floor;\n\n    return new Color(\n      Math.max(int(this.r * FACTOR), 0),\n      Math.max(int(this.g * FACTOR), 0),\n      Math.max(int(this.b * FACTOR), 0),\n      this.a\n    );\n  }\n\n  static brighter(color: string): string {\n    // note: we can't type args simply with ConstructorParameters<typeof Color>.\n    // see more: https://github.com/microsoft/TypeScript/issues/37079\n    return new Color(color).brighter().toString();\n  }\n\n  blend(colorOrColorString: Color | string) {\n    const color =\n      typeof colorOrColorString === \"string\"\n        ? new Color(colorOrColorString)\n        : colorOrColorString;\n    const getBlendedValue = (component: \"r\" | \"g\" | \"b\") =>\n      Math.round(\n        (color.a / 255) * color[component] +\n          (this.a / 255) * (1 - color.a / 255) * this[component]\n      );\n    return new Color(\n      getBlendedValue(\"r\"),\n      getBlendedValue(\"g\"),\n      getBlendedValue(\"b\")\n    );\n  }\n\n  toString() {\n    const toString = (component: number) =>\n      Number.isNaN(component) ? \"\" : component.toString(16).padStart(2, \"0\");\n    const r = toString(this.r);\n    const g = toString(this.g);\n    const b = toString(this.b);\n    const a = this.a === 255 ? \"\" : toString(this.a);\n    return `#${r}${g}${b}${a}`;\n  }\n}\n","import React, { CSSProperties, useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport { ResizerProps } from \"../Resizer/ResizerProps\";\nimport { Theme } from \"../Theme/Theme\";\n\n/**\n * Props are named mostly based on ThreeComponentsSplitter in Intellij Platform.\n */\nexport interface ThreeViewSplitterProps {\n  orientation?: \"horizontal\" | \"vertical\";\n  resizerProps?: Partial<\n    Omit<ResizerProps, \"onResize\" | \"onResizeStarted\" | \"onResizeEnd\">\n  >;\n  innerView?: React.ReactNode;\n  innerViewMinSize?: number;\n  firstView?: React.ReactNode;\n  firstSize?: number | null;\n  firstViewMinSize?: number;\n  lastView?: React.ReactNode;\n  lastSize?: number | null;\n  lastViewMinSize?: number;\n  onFirstResize?: (size: number) => void;\n  onLastResize?: (size: number) => void;\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst StyledSplitterContainer = styled.div<{\n  orientation: \"horizontal\" | \"vertical\";\n}>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  flex-direction: ${({ orientation }) =>\n    orientation === \"vertical\" ? \"column\" : \"row\"};\n`;\n\nconst StyledView = styled.div`\n  // The default overflow visible should be changed obviously. Not sure if there is any layout implication\n  // in using 'auto' instead of hidden, to provide scroll behaviour by default, but even if we realize later\n  // that we need to set overflow to hidden here, we can have scrollable content inside the inner view via an\n  // intermediate element inside the inner view, with overflow set to auto and width set to 100%.\n  overflow: auto;\n`;\n\nconst StyledSplitterInnerView = styled(StyledView)`\n  flex: 1;\n`;\n\n/**\n * Corresponding to\n * [ThreeComponentsSplitter](https://github.com/JetBrains/intellij-community/blob/58dbd93e9ea527987466072fa0bfbf70864cd35f/platform/platform-api/src/com/intellij/openapi/ui/ThreeComponentsSplitter.java#L40-L40)\n * `firstView` and `lastView` are optional, and if not provided, the corresponding resizer is not rendered.\n * innerView is supposed to fill the remaining space, while firstView and lastView have specific sizes.\n * size changes in a resize interaction is not reported and is handled by local state in the component. That's\n * to prevent frequent state updates in a higher level which can be expensive. It's also based on this assumption\n * that in the usage side there is no need for any control over resizing or even knowing the intermediate state.\n * Maybe a minSize and maxSize would be the extent of the required control over resizing. But anyway, this model\n * of keeping the size as a local state during a resize session is something that can be changed if needed.\n *\n * Features:\n * - Relative sizing (fraction of the container)\n * - Default size by content\n * - Change handling only when resize is done.\n *\n * TODO: max and min size not implemented\n * TODO: add support for uncontrolled version\n */\nexport const ThreeViewSplitter: React.FC<ThreeViewSplitterProps> = ({\n  orientation = \"horizontal\",\n  firstView,\n  firstSize,\n  lastView,\n  lastSize,\n  onFirstResize,\n  onLastResize,\n  resizerProps: resizerPropsOverrides = {},\n  innerView,\n  firstViewMinSize,\n  lastViewMinSize,\n  innerViewMinSize,\n  ...containerProps\n}: ThreeViewSplitterProps): React.ReactElement => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const firstViewRef = useRef<HTMLDivElement>(null);\n  const lastViewRef = useRef<HTMLDivElement>(null);\n  const [firstSizeState, setFirstSizeState] = useState<number | null>(null);\n  const [lastSizeState, setLastSizeState] = useState<number | null>(null);\n  const theme = useTheme() as Theme;\n\n  const value = <T1, T2>(horizontalValue: T1, verticalValue: T2) =>\n    orientation === \"horizontal\" ? horizontalValue : verticalValue;\n\n  const FirstResizer: React.ComponentType<ResizerProps> = value(\n    RightResizer,\n    BottomResizer\n  );\n  const SecondResizer: React.ComponentType<ResizerProps> = value(\n    LeftResizer,\n    TopResizer\n  );\n  const sizeStyleProp = value(\"width\", \"height\");\n  const minSizeStyleProp = value(\"minWidth\", \"minHeight\");\n\n  const resizerProps: ThreeViewSplitterProps[\"resizerProps\"] = {\n    background: theme.commonColors.contrastBorder,\n    size: 1,\n    ...resizerPropsOverrides,\n  };\n\n  const isFractionSize = (size: number) => size < 1;\n\n  const normalizeSize = (\n    size: number | undefined | null\n  ): CSSProperties[\"width\" | \"height\"] =>\n    size != null\n      ? isFractionSize(size)\n        ? `${size * 100}%`\n        : Math.round(size)\n      : undefined;\n\n  const getSize = (elem: HTMLElement): number =>\n    value(elem.offsetWidth, elem.offsetHeight);\n\n  const getNewSize = (currentSize: number, newSize: number) => {\n    if (currentSize != null && isFractionSize(currentSize)) {\n      if (!containerRef.current) {\n        throw new Error(\n          \"ThreeViewSplitter: Could not locate container to calculate fraction size\"\n        );\n      }\n      const containerSize = value(\n        containerRef.current.offsetWidth,\n        containerRef.current.offsetHeight\n      );\n      const newFractionSize = newSize / containerSize;\n      return newFractionSize < 1 ? newFractionSize : currentSize;\n    } else {\n      return Math.max(newSize, 1);\n    }\n  };\n\n  const getActualSize = (viewElem: HTMLElement | null): number | null => {\n    if (!containerRef.current || !viewElem) {\n      return null;\n    }\n    const actualSize = getSize(viewElem);\n    if (viewElem.style[sizeStyleProp]?.includes(\"%\")) {\n      return actualSize / getSize(containerRef.current);\n    }\n    return actualSize;\n  };\n\n  const currentLastSize = normalizeSize(lastSizeState ?? lastSize);\n  const currentFirstSize = normalizeSize(firstSizeState ?? firstSize);\n  return (\n    <StyledSplitterContainer\n      ref={containerRef}\n      orientation={orientation}\n      {...containerProps}\n    >\n      {firstView && (\n        <>\n          <StyledView\n            ref={firstViewRef}\n            style={{\n              [sizeStyleProp]: currentFirstSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (lastSizeState !== null ? currentFirstSize : undefined) ??\n                firstViewMinSize,\n            }}\n          >\n            {firstView}\n          </StyledView>\n          <FirstResizer\n            onResizeStarted={() => {\n              const size = firstViewRef.current\n                ? getSize(firstViewRef.current)\n                : 0;\n              setFirstSizeState(firstSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (firstSizeState != null) {\n                setFirstSizeState(getNewSize(firstSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(firstViewRef.current);\n              if (actualSize !== null) {\n                onFirstResize?.(actualSize);\n              }\n              setFirstSizeState(null);\n            }}\n            {...resizerProps}\n          />\n        </>\n      )}\n      {innerView && (\n        <StyledSplitterInnerView\n          style={{\n            [minSizeStyleProp]: innerViewMinSize,\n          }}\n        >\n          {innerView}\n        </StyledSplitterInnerView>\n      )}\n      {lastView && (\n        <>\n          <SecondResizer\n            onResizeStarted={() => {\n              const size = getSize(lastViewRef.current!);\n              setLastSizeState(lastSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (lastSizeState != null) {\n                setLastSizeState(getNewSize(lastSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(lastViewRef.current);\n              if (actualSize !== null) {\n                onLastResize?.(actualSize);\n              }\n              setLastSizeState(null);\n            }}\n            {...resizerProps}\n          />\n          <StyledView\n            ref={lastViewRef}\n            style={{\n              [sizeStyleProp]: currentLastSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (firstSizeState !== null ? currentLastSize : undefined) ??\n                lastViewMinSize,\n            }}\n          >\n            {lastView}\n          </StyledView>\n        </>\n      )}\n    </StyledSplitterContainer>\n  );\n};\n","import { isMac } from \"@react-aria/utils\";\nimport React, { HTMLProps, useRef } from \"react\";\nimport { css } from \"styled-components\";\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { Theme } from \"../Theme/Theme\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { Overlay } from \"@react-aria/overlays\";\n\nconst FLOAT_WINDOW_MIN_WIDTH = 100;\nconst FLOAT_WINDOW_MIN_HEIGHT = 40; // in Intellij Platform it's zero but there is window frame which doesn't exist here\n\nconst StyledFloatView = styled.div`\n  box-sizing: border-box;\n  position: fixed;\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  // border color doesn't seem to be correct and needs more investigation. might be even os-specific and outside\n  // theme colors.\n  border: ${({ theme }) => `1px solid ${theme.color(\"Component.borderColor\")}`};\n  ${WINDOW_SHADOW};\n  ${isMac() &&\n  css<{ theme: Theme }>`\n    border-radius: 8px;\n  `}\n  z-index: 2;\n`;\n\n/**\n * Container for tool windows in float view mode. It handles some visual aspects like the border and shadow, as well as\n * UI interactions for changing the floatingBound of the tool window.\n */\nexport const FloatView: React.FC<\n  {\n    state: FloatWindowState;\n    onBoundsChange: (bounds: WindowBounds) => void;\n  } & Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">\n> = ({ children, state: { bounds }, onBoundsChange, ...otherProps }) => {\n  const ref = useRef(null);\n  const { bounds: boundsStyle, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      bounds,\n      onBoundsChange,\n    });\n\n  return (\n    <Overlay>\n      <StyledFloatView\n        {...otherProps}\n        ref={ref}\n        style={{ ...otherProps.style, ...boundsStyle }}\n      >\n        <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n          <OverlayResizeHandles\n            minWidth={FLOAT_WINDOW_MIN_WIDTH}\n            minHeight={FLOAT_WINDOW_MIN_HEIGHT}\n          />\n          {children}\n        </OverlayInteractionHandler>\n      </StyledFloatView>\n    </Overlay>\n  );\n};\n","import { move } from \"ramda\";\nimport React, { HTMLProps, Key, useState } from \"react\";\nimport { FloatView } from \"./FloatView\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\n\n// NOTE: useStackedLayersState and useStackedLayers are generic but kept here since there is no other use case at the\n// moment. They should be moved to their own file(s) when/if other use case came up.\n\ninterface StackedLayersState<T> {\n  /**\n   * Sorted list of items representing layers.\n   */\n  sorted: T[];\n  /**\n   * A function to be used when the layer should be brought to front, typically based on some UI interaction.\n   */\n  bringToFront: (index: number) => void;\n}\n\n/**\n * State management for a stacked list of layers with **bring to front** functionality.\n */\nfunction useStackedLayersState<T, K = React.Key>(\n  /**\n   * A list of arbitrary items representing stacked layers.\n   */\n  items: T[],\n  /**\n   * A function for converting each item into a key which consistently identifies each item, in subsequent renders.\n   * It's used to maintain current sorting state. Although it can be of any type, it's usually a string or number.\n   */\n  getKey: (item: T) => K\n): StackedLayersState<T> {\n  // Local state for now, but can easily change to controllable if needed.\n  const [sortedKeys, setSortedKeys] = useState<K[]>([]);\n  const sorted = items.sort(\n    (a, b) => sortedKeys.indexOf(getKey(a)) - sortedKeys.indexOf(getKey(b))\n  );\n  return {\n    sorted,\n    bringToFront: (index: number) => {\n      setSortedKeys(move(index, -1, sorted).map(getKey));\n    },\n  };\n}\n\n/**\n * Given the state of a stacked list of layers, returns DOM props to be applied to each layer for interaction-based\n * \"bring to front\" behaviour.\n */\nfunction useStackedLayers<T>(state: StackedLayersState<T>): {\n  layersProps: Array<HTMLProps<HTMLElement>>;\n} {\n  return {\n    layersProps: state.sorted.map((_, index) => ({\n      onFocus: () => {\n        state.bringToFront(index);\n      },\n    })),\n  };\n}\n\n/**\n * Renders float tool windows.\n * - handles resize and move actions for float windows.\n * - handles layering of float tool windows.\n */\nexport function FloatToolWindows({\n  floatWindows = [],\n  onBoundsChange,\n  renderToolWindow,\n}: {\n  floatWindows: FloatWindowState[] | undefined;\n  onBoundsChange: (key: Key, bounds: WindowBounds) => void;\n  renderToolWindow: (key: Key) => React.ReactNode;\n}) {\n  const stackedFloatWindows = useStackedLayersState(\n    floatWindows,\n    ({ key }) => key\n  );\n  const { layersProps } = useStackedLayers(stackedFloatWindows);\n  // sorted list is used to render layers. We could as well use z-index and always render with the same order, but\n  // it doesn't really matter as long as key is set.\n  return (\n    <>\n      {stackedFloatWindows.sorted.map((toolWindow, index) => (\n        <FloatView\n          key={toolWindow.key}\n          state={toolWindow}\n          {...layersProps[index]}\n          onBoundsChange={(bounds) => onBoundsChange(toolWindow.key, bounds)}\n        >\n          {renderToolWindow(toolWindow.key)}\n        </FloatView>\n      ))}\n    </>\n  );\n}\n","import React, {\n  Key,\n  MutableRefObject,\n  RefObject,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"../utils/useLatest\";\nimport { DropPosition } from \"./createGetDropPosition\";\nimport { UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor } from \"./utils\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\ntype StripeLocation<T extends unknown> = {\n  index: number;\n  anchor: Anchor;\n  isSplit: boolean;\n};\ntype MovableStripeProps<T> = {\n  stripeElRef: React.RefObject<HTMLElement>;\n  getKey: (item: T) => Key;\n  anchor: Anchor;\n  mainItems: T[];\n  splitItems: T[];\n  createGetDropPosition: (\n    key: Key\n  ) => (draggedRect: Rect) => DropPosition | null;\n};\n\ntype MovableToolWindowStripeContextType<T> = {\n  addStripe: <T>(\n    id: string,\n    propsRef: MutableRefObject<MovableStripeProps<T>>\n  ) => () => void;\n  startMove: (id: string, args: { from: Rect; key: Key }) => void;\n  move: (args: { to: Rect }) => void;\n  endMove: () => void;\n  dropPosition: null | { id: string; dropPosition: DropPosition };\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n};\n\nexport type MovableToolWindowStripeProviderProps<T = unknown> = {\n  children: React.ReactNode;\n  onMove: (args: { from: StripeLocation<T>; to: StripeLocation<T> }) => void;\n};\n\nconst MovableToolWindowStripeContext =\n  React.createContext<MovableToolWindowStripeContextType<any> | null>(null);\n\n/**\n * A wrapper component to render around `ToolWindowStripe`s to make their button movable. Stripe buttons then become\n * draggable and can be moved either within the same `ToolWindowStripe` or across different ones.\n * @param onMove: called when a stripe button is moved from one anchor to another.\n * @param children: child element tree, containing one or more ToolWindowStripe elements. No need to be direct children.\n */\nexport const MovableToolWindowStripeProvider = <T extends unknown>({\n  onMove,\n  children,\n}: MovableToolWindowStripeProviderProps<T>) => {\n  const stripes = useRef<{\n    [id: string]: RefObject<MovableStripeProps<T>>;\n  }>({});\n  const [draggingRect, setDraggingRect] = useState<Rect | null>(null);\n  const [draggingKey, setDraggingKey] = useState<Key | null>(null);\n  const [dropPosition, setDropPosition] = useState<{\n    id: string;\n    dropPosition: DropPosition;\n  } | null>(null);\n  const getDropPositionRef = useRef<\n    (to: Rect) => {\n      id: string;\n      dropPosition: DropPosition;\n    } | null\n  >(() => null);\n  const moveStartLocationRef = useRef<null | {\n    id: string;\n    index: number;\n    anchor: Anchor;\n    isSplit: boolean;\n  }>(null);\n\n  const contextValue = useMemo(\n    (): MovableToolWindowStripeContextType<T> => ({\n      addStripe: (id, propsRef) => {\n        if (stripes.current[id]) {\n          console.error(`multiple stripes with the same id \"${id}`);\n        }\n        // @ts-expect-error\n        stripes.current[id] = propsRef;\n        return () => {\n          delete stripes.current[id];\n        };\n      },\n      startMove: (id, { from, key }) => {\n        const stripe = stripes.current[id]?.current;\n        if (!stripe) {\n          return;\n        }\n        const { stripeElRef } = stripe;\n        const stripeElement = stripeElRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n\n        // Running the following two state setters immediately affect the layout\n        // in a way that is necessary for drop position calculation, so the order\n        // is important\n        setDraggingRect(getItemRect(key).toJSON());\n        setDraggingKey(key);\n\n        const indexInMain = stripe.mainItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        const indexInSplit = stripe.splitItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        moveStartLocationRef.current = {\n          id,\n          anchor: stripe.anchor,\n          index: indexInMain > -1 ? indexInMain : indexInSplit,\n          isSplit: indexInSplit > -1,\n        };\n\n        const dropPositionGetters = Object.entries(stripes.current).map(\n          ([id, stripe]) =>\n            [id, stripe.current!.createGetDropPosition(key)] as const\n        );\n        const getDropPosition = (draggedRect: Rect) => {\n          for (const [id, getDropPosition] of dropPositionGetters) {\n            const dropPosition = getDropPosition(draggedRect);\n            if (dropPosition) {\n              return {\n                id,\n                dropPosition,\n              };\n            }\n          }\n          return null;\n        };\n\n        setDropPosition(getDropPosition(from));\n\n        getDropPositionRef.current = getDropPosition;\n      },\n      move: ({ to }) => {\n        setDropPosition(getDropPositionRef.current(to));\n      },\n      endMove: () => {\n        if (dropPosition && draggingKey) {\n          onMove({\n            from: moveStartLocationRef.current!,\n            to: {\n              anchor: dropPosition.id as Anchor /*FIXME*/,\n              index: dropPosition.dropPosition.index,\n              isSplit: dropPosition.dropPosition.split,\n            },\n          });\n        }\n        setDraggingKey(null);\n        setDropPosition(null);\n        setDraggingRect(null);\n      },\n      dropPosition,\n      draggingRect,\n      draggingKey,\n    }),\n    [dropPosition, draggingKey, draggingRect]\n  );\n\n  return (\n    <MovableToolWindowStripeContext.Provider value={contextValue}>\n      {children}\n    </MovableToolWindowStripeContext.Provider>\n  );\n};\n\nexport function useMovableStripeButtons<T>(props: MovableStripeProps<T>) {\n  // Seems reasonable to assume anchor is unique. Also current onMove signature is coupled with anchor, not a more generic id.\n  const id = props.anchor;\n  const context = useContext(MovableToolWindowStripeContext);\n  const latestPropsRef = useLatest(props);\n  useEffect(() => {\n    if (context) {\n      return context.addStripe(id, latestPropsRef);\n    }\n  }, [context, id]);\n\n  const getProps = (\n    key: Key\n  ): Pick<\n    Required<UseElementMoveOptions<unknown>>,\n    \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n  > & { moveDisabled: boolean } => ({\n    moveDisabled: !context,\n    onMoveStart: ({ from }) => {\n      context?.startMove?.(id, { from, key });\n    },\n    onMove: ({ to }) => {\n      context?.move({ to });\n    },\n    onMoveEnd: () => {\n      context?.endMove();\n    },\n  });\n  return {\n    getProps,\n    draggingRect: context?.draggingRect ?? null,\n    dropPosition:\n      context?.dropPosition?.id === id\n        ? context?.dropPosition.dropPosition\n        : null,\n    draggingKey: context?.draggingKey ?? null,\n  };\n}\n","import { styled } from \"../styled\";\nimport { css } from \"styled-components\";\n\nconst TopStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: ts;\n`;\nconst BottomStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: bs;\n`;\nconst LeftStripe = styled.div`\n  grid-area: ls;\n`;\nconst RightStripe = styled.div`\n  grid-area: rs;\n`;\nconst InnerView = styled.div`\n  grid-area: main;\n  min-height: 0; // necessary to prevent overflow;\n  position: relative; // necessary for undock views which are absolute positioned\n  background: inherit;\n  min-width: 0; // very important for layout. If not set, resizing tool windows can cause weird scrollbar inside tool windows pane.\n`;\n\n/**\n * The container which renders top,bottom,left and right stripes with a centered content.\n * responsible only for the layout of the stripes and the centered content. layout doesn't\n * include the opened tool windows on different sides and is just about the stripes around\n * the center area.\n * It also supports toggling stripes visibility.\n */\nconst Shell = styled.div<{ hideStripes: boolean }>`\n  display: grid;\n  grid-template-columns: min-content auto min-content;\n  grid-template-rows: min-content auto min-content;\n  grid-template-areas:\n    \".   ts   .\"\n    \"ls main rs\"\n    \".   bs   .\";\n\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  ${({ hideStripes }) =>\n    hideStripes &&\n    css`\n      ${TopStripe},\n      ${BottomStripe}, \n      ${LeftStripe}, \n      ${RightStripe} {\n        display: none;\n      }\n    `}\n`;\n\nexport const StyledToolWindowOuterLayout = {\n  Shell,\n  TopStripe,\n  BottomStripe,\n  LeftStripe,\n  RightStripe,\n  InnerView,\n};\n","import { compose, filter, groupBy, map, pipe, prop, sortBy } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\nimport {\n  ToolWindowsState,\n  ToolWindowState,\n  ViewMode,\n} from \"./ToolWindowsState\";\n\ntype ToolWindowStateWithKey = { key: Key } & ToolWindowState;\n\nexport interface StripesState {\n  main: Key[];\n  split: Key[];\n  activeKeys: Key[];\n}\n\n/**\n * Represents UI state of the split view (aka secondary or side view) within a docked view at one of the four sides.\n */\ntype SideDockedSplitState = {\n  key: Key;\n  /**\n   * relative size of the split view inside a docked view. Note that this is intentionally a fraction size (0≤size<1),\n   * based on the expected behaviour. split views inside a docked view are not fixed sized and resizing the window\n   * affect their size. This is not the case for the docked views themselves inside the main layout, which have fixed\n   * size which is not affected by window resizing.\n   */\n  sizeFraction: number;\n};\n\n// A potential improvement for this and similar nullable types like SideDockedState.split might be to avoid null type\n// and have it like { open: false} | {open: true, ...relevantProps}\n// Not sure if it's really preferred in terms of usage in the react component.\nexport type SideDockedState = null | {\n  size: number;\n  mainKey: Key;\n  split: SideDockedSplitState | null;\n};\n\nexport type SideUnDockedState = null | {\n  size: number;\n  key: Key;\n};\n\nexport interface SideState {\n  docked: SideDockedState;\n  undocked: SideUnDockedState;\n  stripes: StripesState;\n}\n\nexport interface FloatWindowState {\n  key: Key;\n  bounds: Exclude<ToolWindowState[\"floatingBounds\"], undefined>;\n}\n\n/**\n * Derived from ToolWindowsState, it represents the same information in a away that is suitable for ToolWindows\n * component to render the layout.\n */\nexport interface ToolWindowsLayoutState {\n  left: SideState;\n  top: SideState;\n  right: SideState;\n  bottom: SideState;\n  floatWindows: Array<FloatWindowState>;\n  windows: Array<FloatWindowState>;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nconst getSizeInAnchor = (containerSize: ContainerSize, anchor: Anchor) =>\n  containerSize[isHorizontalToolWindow(anchor) ? \"height\" : \"width\"];\n\nconst mapToKey = map<ToolWindowStateWithKey, Key>(prop(\"key\"));\nconst sortAndMapToKey = compose(\n  mapToKey,\n  sortBy(({ order }: ToolWindowStateWithKey) => order)\n);\nconst filterMains = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => !isSplit\n);\nconst getMains = compose(sortAndMapToKey, filterMains);\nconst filterSplits = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => isSplit\n);\nconst filterVisible = (expectedViewMode: ViewMode | ViewMode[] = []) =>\n  filter<ToolWindowStateWithKey, \"array\">(\n    ({ viewMode, isVisible }: ToolWindowStateWithKey) =>\n      isVisible &&\n      ([] as ViewMode[]).concat(expectedViewMode).includes(viewMode)\n  );\nconst getSplits = compose(sortAndMapToKey, filterSplits);\n\nconst filterVisibleDocked = filterVisible([\"docked_unpinned\", \"docked_pinned\"]);\nconst filterVisibleUnDocked = filterVisible(\"undock\");\n\nconst getDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideDockedState => {\n  const docks = filterVisibleDocked(toolWindows);\n  const mains = filterMains(docks);\n  const splits = filterSplits(docks);\n  if (mains.length > 1 || splits.length > 1) {\n    throw new Error(\n      \"More than one visible docked window in a side is not possible\"\n    );\n  }\n  if (mains[0] || splits[0]) {\n    const weight = mains[0]?.weight || splits[0]?.weight;\n    return {\n      mainKey: mains[0]?.key || splits[0]?.key,\n      split:\n        mains[0]?.key && splits[0]?.key\n          ? {\n              key: splits[0].key,\n              sizeFraction: mains[0].weight\n                ? 1 - mains[0].sideWeight\n                : splits[0].sideWeight,\n            }\n          : null,\n      size: weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  return null;\n};\n\nconst getUnDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideUnDockedState => {\n  const windows = filterVisibleUnDocked(toolWindows);\n  if (windows.length === 1) {\n    return {\n      key: windows[0].key,\n      size: windows[0].weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  if (windows.length === 0) {\n    return null;\n  }\n  throw new Error(\n    \"More than one visible undocked window in a side is not possible\"\n  );\n};\n\nconst getSideState = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideState => ({\n  stripes: {\n    main: getMains(toolWindows),\n    split: getSplits(toolWindows),\n    activeKeys: mapToKey(toolWindows.filter(({ isVisible }) => isVisible)),\n  },\n  undocked: getUnDocked(anchor, containerSize, toolWindows),\n  docked: getDocked(anchor, containerSize, toolWindows),\n});\n\nconst DEFAULT_HEIGHT = 300;\nconst DEFAULT_WIDTH = 400;\nconst getFloatWindowState =\n  (containerSize: ContainerSize) =>\n  ({\n    floatingBounds: bounds = {\n      top: containerSize.height / 2 - DEFAULT_HEIGHT / 2,\n      left: containerSize.width / 2 - DEFAULT_WIDTH / 2,\n      height: DEFAULT_HEIGHT,\n      width: DEFAULT_WIDTH,\n    },\n    key,\n  }: ToolWindowStateWithKey): FloatWindowState => ({ bounds, key });\n\nconst getFloatWindowsState = (\n  viewMode: \"float\" | \"window\",\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n) =>\n  pipe(\n    filterVisible(viewMode),\n    map<ToolWindowStateWithKey, FloatWindowState>(\n      getFloatWindowState(containerSize)\n    )\n  )(toolWindows);\n\nexport function getToolWindowsLayoutState(\n  state: Readonly<ToolWindowsState>,\n  containerSize: ContainerSize,\n  /**\n   * list of valid window ids. If state contains window ids that are not included here, they will be excluded in\n   * the returned state object.\n   */\n  windowIds: string[] = Object.keys(state.windows)\n): ToolWindowsLayoutState {\n  const toolWindows = Object.keys(state.windows)\n    .filter(\n      (key) => windowIds.includes(key) && !state.removedFromSideBarIds.has(key)\n    )\n    .map((key) => ({\n      ...state.windows[key],\n      key,\n    }));\n  const {\n    top = [],\n    bottom = [],\n    left = [],\n    right = [],\n  } = groupBy(({ anchor }) => anchor, toolWindows);\n  return {\n    left: getSideState(\"left\", containerSize, left),\n    top: getSideState(\"top\", containerSize, top),\n    right: getSideState(\"right\", containerSize, right),\n    bottom: getSideState(\"bottom\", containerSize, bottom),\n    windows: getFloatWindowsState(\"window\", containerSize, toolWindows),\n    floatWindows: getFloatWindowsState(\"float\", containerSize, toolWindows),\n  };\n}\n","import { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { Key } from \"react\";\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface DropPosition {\n  index: number;\n  split: boolean;\n\n  relative?: {\n    placement: \"before\" | \"after\";\n    key: Key;\n  };\n}\n\n/**\n * TODO: Add a few words about what this function do.\n */\nexport const createGetDropPosition = <T extends any>({\n  anchor,\n  stripeElement,\n  splitItems,\n  mainItems,\n  getItemRect,\n  getKey,\n}: {\n  stripeElement: HTMLElement;\n  anchor: Anchor;\n  getItemRect: (key: Key) => Rect;\n  getKey: (key: T) => Key;\n  mainItems: T[];\n  splitItems: T[];\n}): ((draggedRect: Rect) => DropPosition | null) => {\n  // Note: It may be tempting to calculate stripe element boundaries just once\n  // here, since it's not supposed to change during a drag session, but it\n  // can change due to getting empty when the only button is being dragged out.\n  const getStripeRect = () => stripeElement.getBoundingClientRect();\n\n  const getCanDrop = (draggingRect: Rect) => {\n    const stripeRect = getStripeRect();\n    return (\n      draggingRect.right > stripeRect.left - stripeRect.width &&\n      draggingRect.left < stripeRect.right &&\n      draggingRect.bottom > stripeRect.top - stripeRect.height &&\n      draggingRect.top < stripeRect.bottom\n    );\n  };\n\n  const start = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.left : rect.top;\n  const end = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.right : rect.bottom;\n\n  const getKeyToOffsets = (items: T[]) => {\n    const keyToOffsets: Record<Key, { start: number; end: number }> = {};\n    items.forEach((item) => {\n      const key = getKey(item);\n      const boundingRect = getItemRect(key);\n      keyToOffsets[key] = {\n        start: start(boundingRect),\n        end: end(boundingRect),\n      };\n    });\n    return keyToOffsets;\n  };\n\n  const getDropPositions = (\n    items: T[],\n    split = false\n    // FIXME: score is a bad name. it's quite the opposite! the less means the higher score.\n  ): Array<DropPosition & { score: (rect: Rect) => number }> => {\n    const getRef = split ? end : start;\n    if (items.length === 0) {\n      // if the section is empty, we should still allow adding to it.\n      return [\n        {\n          index: 0,\n          split,\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - getRef(getStripeRect())),\n        },\n      ];\n    }\n    return items.flatMap((item, index) => {\n      const key = getKey(item);\n      return [\n        {\n          index,\n          split,\n          relative: { key, placement: \"before\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].start),\n        },\n        {\n          index: index + 1,\n          split,\n          relative: { key, placement: \"after\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].end),\n        },\n      ];\n    });\n  };\n\n  const keyToOffsets = getKeyToOffsets([...mainItems, ...splitItems]);\n\n  const dropPositions = [\n    ...getDropPositions(mainItems),\n    ...getDropPositions(splitItems, true),\n  ];\n\n  let lastDropPosition: DropPosition | null = null;\n  return (draggingRect: Rect) => {\n    if (!getCanDrop(draggingRect)) {\n      return null;\n    }\n    const result = dropPositions.reduce(\n      (bestMatch, candidate) => {\n        const score = candidate.score(draggingRect);\n        if (!bestMatch || score < bestMatch.score) {\n          return {\n            ...candidate,\n            score,\n          };\n        }\n        return bestMatch;\n      },\n      null as\n        | null\n        | (DropPosition & {\n            score: number;\n          })\n    );\n\n    if (!result) {\n      return null;\n    }\n    if (\n      result.split !== lastDropPosition?.split ||\n      result.index !== lastDropPosition?.index\n    ) {\n      lastDropPosition = result;\n    }\n    return lastDropPosition;\n  };\n};\n","import { StyledIconWrapper } from \"../Icon/StyledIconWrapper\";\nimport { styled } from \"../styled\";\nimport React from \"react\";\nimport { css } from \"styled-components\";\nimport { Anchor } from \"./utils\";\n\nexport interface StyledToolWindowStripeButtonProps {\n  anchor: Anchor;\n  active?: boolean;\n}\n\nexport const STRIPE_BUTTON_CROSS_PADDING = 2.5;\nexport const STRIPE_BUTTON_LINE_HEIGHT = \"1rem\";\n\nconst anchorStyles = ({ anchor }: { anchor: Anchor }) => {\n  const orientation =\n    anchor === \"left\" || anchor === \"right\" ? \"vertical\" : \"horizontal\";\n\n  return orientation === \"horizontal\"\n    ? css`\n        padding: ${STRIPE_BUTTON_CROSS_PADDING}px 10px;\n      `\n    : css`\n        padding: 10px ${STRIPE_BUTTON_CROSS_PADDING}px;\n        writing-mode: vertical-lr;\n        // writing-mode: sideways-lr is not supported anywhere other than FF, so, we need to rotate\n        transform: ${anchor === \"left\" ? \"rotateZ(180deg)\" : undefined};\n\n        // icons are not rotated like text in Intellij Platform implementation. It kind of makes sense.\n        ${StyledIconWrapper} {\n          transform: rotate(180deg);\n        }\n      `;\n};\n\nexport const StyledToolWindowStripeButton = styled.span<StyledToolWindowStripeButtonProps>`\n  box-sizing: border-box;\n  display: flex; // to allow icon and text alignment by default;\n  align-items: center;\n  cursor: default;\n  user-select: none;\n  overflow: hidden;\n  direction: ltr;\n  flex-shrink: 0;\n  font-size: 0.7rem;\n  line-height: ${STRIPE_BUTTON_LINE_HEIGHT}; // absolute value seems to be problematic when the base font size is changed\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedForeground\",\n          theme.dark ? \"rgb(255,255,255)\" : \"rgb(0,0,0)\"\n        )\n      : theme.color(\"*.foreground\")};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedBackground\",\n          theme.dark ? \"rgba(15,15,15,.332)\" : \"rgba(85,85,85,.332)\"\n        )\n      : undefined};\n\n  ${anchorStyles}\n  ${({ active }) =>\n    !active &&\n    css`\n      &:hover {\n        background: ${({ theme }) =>\n          theme.color(\n            \"ToolWindow.Button.hoverBackground\",\n            theme.dark ? \"rgba(15,15,15,.156)\" : \"rgba(85,85,85,.156)\"\n          )};\n      }\n    `};\n`;\n","import {\n  STRIPE_BUTTON_CROSS_PADDING,\n  STRIPE_BUTTON_LINE_HEIGHT,\n  StyledToolWindowStripeButton,\n} from \"./StyledToolWindowStripeButton\";\nimport { Anchor, isHorizontalToolWindow, theOtherSide } from \"./utils\";\nimport { css } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { styled } from \"../styled\";\nimport { Color } from \"../Theme/Color\";\n\nconst minHeight = `calc(${STRIPE_BUTTON_LINE_HEIGHT} + ${\n  2 * STRIPE_BUTTON_CROSS_PADDING + 1 /*border*/\n}px)`;\n\nconst anchorStyles = ({\n  anchor,\n  preventCollapse,\n}: StyledToolWindowStripeProps) =>\n  isHorizontalToolWindow(anchor)\n    ? css`\n        flex-direction: row;\n        width: 100%;\n        min-height: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          height: 1.25rem;\n        }\n      `\n    : css`\n        flex-direction: column;\n        height: 100%;\n        min-width: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          width: 1.25rem;\n        }\n      `;\nconst borderStyle = ({ anchor, theme }: { anchor: Anchor; theme: Theme }) =>\n  css`border-${theOtherSide(anchor)}: 1px solid ${\n    theme.commonColors.contrastBorder\n  }`;\n\nexport interface StyledToolWindowStripeProps {\n  anchor: Anchor;\n  highlighted?: boolean;\n  preventCollapse?: boolean;\n}\n\nexport const StyledToolWindowStripe = styled.div<StyledToolWindowStripeProps>`\n  box-sizing: border-box;\n  background: ${({ theme, highlighted }) =>\n    highlighted\n      ? Color.brighter(theme.commonColors.panelBackground)\n      : theme.commonColors.panelBackground};\n  display: inline-flex;\n  overflow: hidden;\n  ${borderStyle};\n  ${anchorStyles}\n`;\n\nexport const StyledSpacer = styled.div`\n  flex: 1;\n`;\n","import { RefObject } from \"react\";\nimport {\n  useMove,\n  UseMoveOptions,\n  XY,\n} from \"../utils/interaction-utils/useMove\";\nimport { findEffectiveBackgroundColor } from \"./findEffectiveBackgroundColor\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface UseElementMoveOptions<S>\n  extends Omit<UseMoveOptions<S>, \"onMoveStart\" | \"onMove\"> {\n  ref: RefObject<HTMLElement>;\n  /**\n   * if true a clone of the element is created and used as ghost.\n   * A function can be passed to customize the default ghost element or return a completely\n   * different one.\n   */\n  ghost?: boolean | ((defaultGhost: HTMLElement) => HTMLElement);\n\n  onMoveStart: (args: { from: Rect }) => S;\n  onMove: (args: { from: Rect; to: Rect; movement: XY; startState: S }) => void;\n}\n\n/**\n * Provides necessary event handling props to be applied on an element to make it movable.\n * It's implemented on top of {@link useMove}. The differences are:\n * - The signature of `onMoveStart`, `onMove` and `onMoveEnd` are changed to pass\n *   {@link Rect} instead of {@link XY}.\n * - rendering a ghost element.\n *\n * ## A note about ghost:\n * There is no easy way to create a snapshot image of an html element. Native drag and drop API\n * supports [setting drag\n * image](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage) but we are\n * not using drag events mainly because of not being able to customize the offset after which drag\n * should start. See {@link UseMoveOptions#dragThreshold dragThreshold} for more details. There are\n * some libraries like html2canvas for creating an image from an html element, but they are very\n * big and using them doesn't make sense at all from a value/cost ratio perspective. There might be\n * some ways of implementing custom move threshold on top of native drag events. For example by\n * delaying the call to setDragImage, but it needs more investigation. Also, not sure if opacity of\n * the ghost is something you can control when using setDragImage.\n **/\nexport function useElementMove<S>({\n  ref,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  ghost: ghostOption,\n  ...otherOptions\n}: UseElementMoveOptions<S>) {\n  return useMove({\n    ...otherOptions,\n    onMoveStart: () => {\n      const element = ref.current;\n      let ghost: HTMLElement | null = null;\n      if (!element) {\n        throw new Error(\n          \"Movement started but ref value is null. Make sure the passed ref is applied on the same element that other props are.\"\n        );\n      }\n      const updateGhostPosition = (rect: Rect) => {\n        if (ghost) {\n          ghost.style.left = `${rect.left}px`;\n          ghost.style.top = `${rect.top}px`;\n        }\n      };\n      const from: Rect = element.getBoundingClientRect();\n      if (ghostOption) {\n        const defaultGhost = createDefaultGhost(element);\n        ghost =\n          typeof ghostOption === \"function\"\n            ? ghostOption(defaultGhost) || defaultGhost\n            : defaultGhost;\n        ghost.style.position = \"fixed\";\n        document.body.append(ghost);\n        updateGhostPosition(from);\n      }\n      return {\n        ghost,\n        from,\n        updateGhostPosition,\n        startState: onMoveStart({ from }),\n      };\n    },\n    onMove: ({\n      movement,\n      startState: { from, updateGhostPosition, startState },\n    }) => {\n      const to: Rect = {\n        left: from.left + movement.x,\n        right: from.right + movement.x,\n        top: from.top + movement.y,\n        bottom: from.bottom + movement.y,\n        height: from.height,\n        width: from.width,\n      };\n      updateGhostPosition(to);\n      onMove({ from, to, movement, startState });\n    },\n    onMoveEnd: ({ startState: { ghost, startState } }) => {\n      ghost?.remove();\n      onMoveEnd?.({ startState });\n    },\n  });\n}\n\nfunction createDefaultGhost(element: HTMLElement) {\n  const ghost = element.cloneNode(true) as HTMLElement;\n  ghost.style.backgroundColor = findEffectiveBackgroundColor(element);\n  return ghost;\n}\n","import { Color } from \"../Theme/Color\";\n\n/**\n * Computes the effective background color of the element by blending translucent backgrounds of\n * the elements ancestors. It traverses up the parents, until reaches a solid background color.\n * all translucent backgrounds in between are blended with that solid color, with respect to their\n * transparency. It's meant to be used only for the simple cases where an element doesn't overflow\n * the parents. Obviously, in other cases there won't be one single effective background color\n * for the element.\n */\nexport function findEffectiveBackgroundColor(element: HTMLElement): string {\n  let elem: HTMLElement | null = element;\n  let colors: Color[] = [];\n  while (elem != null) {\n    const computedBackground = getComputedStyle(elem).backgroundColor;\n    if (computedBackground) {\n      const color = new Color(computedBackground);\n      colors.unshift(color);\n      if (color.a === 255) {\n        // if we've reached a solid color, we don't need to continue traversing ancestors\n        break;\n      }\n    }\n    elem = elem.parentElement;\n  }\n  return (\n    colors\n      .reduce<Color | null>((resultColor, nextColor) => {\n        return resultColor ? resultColor.blend(nextColor) : nextColor;\n      }, null)\n      ?.toString() || \"\"\n  );\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport React, { CSSProperties, HTMLAttributes, Key, useRef } from \"react\";\nimport { createGetDropPosition, DropPosition } from \"./createGetDropPosition\";\nimport { useMovableStripeButtons } from \"./MovableToolWindowStripeProvider\";\nimport { StyledSpacer, StyledToolWindowStripe } from \"./StyledToolWindowStripe\";\nimport { StyledToolWindowStripeButton } from \"./StyledToolWindowStripeButton\";\nimport { useElementMove, UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\ninterface ToolWindowStripeProps<T> {\n  anchor: Anchor;\n  items: T[];\n  splitItems?: T[];\n  getKey: (item: T) => Key;\n  renderItem: (item: T) => React.ReactNode;\n  selectedKeys?: Key[];\n  onItemPress?: (key: Key) => void;\n}\n\n/**\n * TODO: refactor to remove the key based interface.\n */\nexport function ToolWindowStripe<T>({\n  anchor,\n  items: mainItems,\n  renderItem: render,\n  splitItems = [],\n  selectedKeys = [],\n  onItemPress,\n  getKey,\n}: ToolWindowStripeProps<T>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { getProps, draggingRect, draggingKey, dropPosition } =\n    useMovableStripeButtons({\n      stripeElRef: containerRef,\n      getKey,\n      anchor,\n      mainItems,\n      splitItems,\n      createGetDropPosition: (key: Key) => {\n        const isNotCurrentItem = (anItem: T) => getKey(anItem) !== key;\n        const stripeElement = containerRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n        return createGetDropPosition({\n          stripeElement: stripeElement,\n          mainItems: mainItems.filter(isNotCurrentItem),\n          splitItems: splitItems.filter(isNotCurrentItem),\n          getKey,\n          anchor,\n          getItemRect,\n        });\n      },\n    });\n\n  const highlighted =\n    dropPosition != null &&\n    draggingKey != null &&\n    [...mainItems, ...splitItems].every((item) => getKey(item) !== draggingKey);\n\n  const renderItem = (item: T) => {\n    const key = getKey(item);\n\n    return (\n      <ToolWindowStripeButton\n        anchor={anchor}\n        key={key}\n        data-key={key}\n        style={{\n          ...getStripeButtonStyles({\n            key,\n            dropPosition,\n            anchor,\n            draggingRect,\n            draggingKey,\n          }),\n        }}\n        {...getProps(key)}\n        active={selectedKeys.includes(key)}\n        onPress={() => onItemPress?.(key)}\n      >\n        {render(item)}\n      </ToolWindowStripeButton>\n    );\n  };\n  return (\n    <>\n      <StyledToolWindowStripe\n        anchor={anchor}\n        preventCollapse={Boolean(dropPosition)}\n        highlighted={highlighted}\n        ref={containerRef}\n      >\n        {mainItems.map(renderItem)}\n        <StyledSpacer />\n        {splitItems.map(renderItem)}\n      </StyledToolWindowStripe>\n    </>\n  );\n}\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nfunction getStripeButtonStyles({\n  anchor,\n  key,\n  dropPosition,\n  draggingRect,\n  draggingKey,\n}: {\n  anchor: Anchor;\n  key: Key;\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n  dropPosition: DropPosition | null;\n}) {\n  const styles: CSSProperties = {\n    // transition: \"margin 100ms\", // maybe only when drag is in progress, if unwanted transition at drop\n  };\n  if (dropPosition?.relative?.key === key && draggingRect) {\n    const marginValue = isHorizontalToolWindow(anchor)\n      ? draggingRect.width\n      : draggingRect.height;\n\n    if (isHorizontalToolWindow(anchor)) {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginLeft\"\n          : \"marginRight\"\n      ] = marginValue;\n    } else {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginTop\"\n          : \"marginBottom\"\n      ] = marginValue;\n    }\n  }\n  if (key === draggingKey) {\n    styles.display = \"none\";\n  }\n  return styles;\n}\n\nfunction ToolWindowStripeButton<T, S>({\n  children,\n  anchor,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  onPress,\n  moveDisabled,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  anchor: Anchor;\n  style: CSSProperties;\n  active: boolean;\n  onPress: () => void;\n  moveDisabled?: boolean;\n  onMoveStart: UseElementMoveOptions<S>[\"onMoveStart\"];\n  onMove: UseElementMoveOptions<S>[\"onMove\"];\n  onMoveEnd: UseElementMoveOptions<S>[\"onMoveEnd\"];\n}) {\n  const ref = useRef<HTMLElement>(null);\n\n  // for some reason, usePress and useMove (used in useElementMove) are not compatible.\n  // it seems onMouseDown in useMove is not called, even when handlers are merged by mergeProps.\n  // FIXME: fix compatibility of useMove and usePress, and switch to usePress({ onPress })\n  const { pressProps } = {\n    pressProps: {\n      onPointerUp: onPress,\n      onMouseDown: (e) => {\n        e.preventDefault();\n      },\n    } as HTMLAttributes<HTMLElement>,\n  }; //usePress({ onPress });\n  const props = useElementMove({\n    ref,\n    disabled: moveDisabled,\n    dragThreshold: 7,\n    ghost: true,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n  });\n\n  return (\n    <StyledToolWindowStripeButton\n      anchor={anchor}\n      {...mergeProps(otherProps, pressProps, props)}\n      ref={ref}\n    >\n      {children}\n    </StyledToolWindowStripeButton>\n  );\n}\n","import React from \"react\";\nimport { css } from \"styled-components\";\nimport { ResizableView } from \"../ResizableView\";\nimport { styled } from \"../styled\";\nimport { SideUnDockedState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nexport const StyledUndockSide = styled.div<{ anchor: Anchor }>`\n  position: absolute;\n  background: inherit;\n  z-index: 1;\n  ${({ anchor }) =>\n    isHorizontalToolWindow(anchor)\n      ? css`\n          left: 0;\n          right: 0;\n        `\n      : css`\n          top: 0;\n          bottom: 0;\n        `};\n  ${({ anchor }) =>\n    css`\n      ${anchor}: 0;\n    `};\n`;\n\nexport function UndockSide({\n  state,\n  anchor,\n  children,\n  onResize,\n}: {\n  state: Exclude<SideUnDockedState, null>;\n  anchor: Anchor;\n  children: React.ReactNode;\n  onResize: (size: number) => void;\n}) {\n  return (\n    state && (\n      <StyledUndockSide anchor={anchor}>\n        <ResizableView\n          orientation={\n            isHorizontalToolWindow(anchor) ? \"vertical\" : \"horizontal\"\n          }\n          resizerPlacement={\n            anchor === \"left\" || anchor === \"top\" ? \"after\" : \"before\"\n          }\n          size={state.size}\n          onResize={onResize}\n        >\n          {children}\n        </ResizableView>\n      </StyledUndockSide>\n    )\n  );\n}\n","import { indexBy } from \"ramda\";\nimport React, {\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n  Key,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nimport { ThreeViewSplitter } from \"../ThreeViewSplitter/ThreeViewSplitter\";\nimport { FocusScope } from \"../utils/FocusScope\";\nimport { FloatToolWindows } from \"./FloatToolWindows\";\nimport { MovableToolWindowStripeProvider } from \"./MovableToolWindowStripeProvider\";\nimport { StyledToolWindowOuterLayout } from \"./StyledToolWindowOuterLayout\";\nimport {\n  getToolWindowsLayoutState,\n  SideDockedState,\n  StripesState,\n  ToolWindowsLayoutState,\n} from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { ToolWindowsState } from \"./ToolWindowsState/ToolWindowsState\";\nimport { ToolWindowStateProvider } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { ToolWindowStripe } from \"./ToolWindowStripe\";\nimport { UndockSide } from \"./UndockSide\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { useOnFocusLost } from \"./useOnFocusLost\";\nimport { useInteractOutside } from \"@react-aria/interactions\";\n\ninterface ToolWindow {\n  id: string;\n  toolbarButton: React.ReactNode;\n  content: React.ReactNode;\n}\n\nexport interface ToolWindowsProps {\n  children: React.ReactNode;\n  windows: ToolWindow[];\n  toolWindowsState: Readonly<ToolWindowsState>;\n  onToolWindowStateChange: (newState: ToolWindowsState) => void;\n\n  /**\n   * Whether stripe buttons should be hidden or not.\n   * `hideToolStripes` UISettings in Intellij Platform\n   */\n  hideToolWindowBars?: boolean;\n\n  /**\n   *\n   * `wideScreenSupport` in UISettings in Intellij Platform\n   */\n  useWidescreenLayout?: boolean;\n\n  /**\n   * min width applied to the main content (children).\n   * @default 50\n   */\n  mainContentMinWidth?: number;\n\n  height?: CSSProperties[\"height\"];\n  minHeight?: CSSProperties[\"minHeight\"];\n  margin?: CSSProperties[\"margin\"];\n\n  /**\n   * props to be passed to the container element.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\">;\n}\n\nexport interface ToolWindowRefValue {\n  focus(key: Key): void;\n  hasFocus(key: Key): void;\n  focusLastActiveWindow(): void;\n  focusMainContent(): void;\n  changeState(\n    updater: (currentState: Readonly<ToolWindowsState>) => ToolWindowsState\n  ): void;\n}\n\n/**\n * @constructor\n *\n * Corresponding to ToolWindowPane in Intellij Platform\n *\n * Known issues:\n * - in Firefox and Safari, left and right toolbars are not properly shown. Seems like a nasty bug, since adding and\n * then removing some min-width: fit-content style fixes it.\n * - in the dock view of a side, open only a window from the split ones. then open a window from main ones.\n *   focus is not moved to the just opened window. The reason is we rely on autofocusing and because the React tree\n *   changes for both windows, even the split one which was open will be unmounted and mounted again, and since it's\n *   placed after the main one, and hence mounted later, it will get the focus again. This becomes a bigger issue\n *   if the main one is unpinned, because it immediately gets closed after opening.\n *   Possible solutions:\n *   - make sure the split one won't unmount and mount again in such scenario.\n *   - decouple focusing logic from mounting logic, and only focus windows somehow, when the `isVisible` is changed\n *     from false to true, not when mounted.\n * - related to previous issue: open a tool window in split section of a side. set view mode for a tool window in main\n *   section of the same side to docked_unpinned. try to open the unpinned one while the split one is open. it doesn't\n *   work.\n */\nexport const ToolWindows = React.forwardRef(function ToolWindows(\n  {\n    hideToolWindowBars = false,\n    useWidescreenLayout = false,\n    height = \"100%\",\n    minHeight = \"0\",\n    toolWindowsState,\n    onToolWindowStateChange,\n    windows,\n    children,\n    mainContentMinWidth = 50,\n    containerProps = {},\n  }: ToolWindowsProps,\n  ref: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const windowsById = indexBy(({ id }) => id, windows);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mainContentFocusScopeRef =\n    useRef<React.ComponentRef<typeof FocusScope>>(null);\n  const [layoutState, setLayoutState] = useState<ToolWindowsLayoutState>();\n  const windowFocusableRefs = useRef<{\n    [key: string]: React.RefObject<React.ComponentRef<typeof FocusScope>>;\n  }>({});\n\n  const latestRef = useLatest({ toolWindowsState, onToolWindowStateChange });\n\n  useLayoutEffect(() => {\n    const container = containerRef.current;\n    const _setLayoutState = () =>\n      setLayoutState(\n        getToolWindowsLayoutState(\n          toolWindowsState,\n          container!.getBoundingClientRect(),\n          windows.map(({ id }) => id)\n        )\n      );\n\n    // If container is rendered but has zero dimensions for any reason, we start observing size changes, until\n    // it's no longer collapsed. Note that we don't want to unconditionally observe resizes and update the layout state.\n    // because tool windows are not supposed to keep the fraction width as the window resizes. They are supposed to have\n    // a fixed width which is determined fraction-based, but only when the tool window is opened. In fact, updating the\n    // layout state, on each and every change to toolWindowsState is also not quite correct, as some state changes\n    // are unrelated and shouldn't cause a re-calculation of the size. FIXME: don't re-calculate fraction base sizes on\n    //  every state change.\n    if (container?.offsetWidth === 0 || container?.offsetHeight === 0) {\n      const observer = new ResizeObserver(([resize]) => {\n        if (resize.contentRect.width > 0 && resize.contentRect.height > 0) {\n          _setLayoutState();\n          observer.unobserve(container);\n        }\n      });\n      observer.observe(container);\n    }\n    _setLayoutState();\n  }, [toolWindowsState]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (key: Key) => {\n        windowFocusableRefs.current[key]?.current?.focus();\n      },\n      hasFocus: (key: Key) =>\n        document.activeElement?.closest(`[data-tool-window-id=\"${key}\"]`) !==\n        null,\n      focusLastActiveWindow: () => {\n        const { lastFocusedKey } = latestRef.current.toolWindowsState;\n        if (lastFocusedKey != null) {\n          if (\n            !latestRef.current.toolWindowsState.windows[lastFocusedKey]\n              .isVisible\n          ) {\n            latestRef.current.onToolWindowStateChange(\n              toolWindowsState.show(lastFocusedKey)\n            );\n          }\n          windowFocusableRefs.current[lastFocusedKey].current?.focus(true);\n        }\n      },\n      focusMainContent: () => {\n        mainContentFocusScopeRef.current?.focus();\n      },\n      changeState: (updater) => {\n        onToolWindowStateChange(updater(latestRef.current.toolWindowsState));\n      },\n    }),\n    []\n  );\n\n  const interactionOutsideRef = useRef(false);\n  useInteractOutside({\n    ref: containerRef,\n    onInteractOutsideStart: () => {\n      interactionOutsideRef.current = true;\n    },\n    onInteractOutside: () => {\n      interactionOutsideRef.current = false;\n    },\n  });\n\n  useOnFocusLost(({ focusReceivingElement }) => {\n    if (!focusReceivingElement && !interactionOutsideRef.current) {\n      mainContentFocusScopeRef.current?.focus();\n    }\n  }, containerRef);\n\n  // TODO: extract component candidate\n  const renderStripe = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: StripesState;\n  }) => (\n    <ToolWindowStripe\n      anchor={anchor}\n      items={state.main}\n      splitItems={state.split}\n      getKey={(item) => item}\n      renderItem={(item) => windowsById[item]?.toolbarButton}\n      onItemPress={(key) =>\n        onToolWindowStateChange(toolWindowsState.toggle(key))\n      }\n      selectedKeys={state.activeKeys}\n    />\n  );\n\n  const renderToolWindow = (key: Key) => {\n    if (!windowFocusableRefs.current[key]) {\n      windowFocusableRefs.current[key] = React.createRef();\n    }\n    return (\n      <div\n        style={{ all: \"unset\" }}\n        data-tool-window-id={key}\n        onFocus={() => {\n          onToolWindowStateChange(toolWindowsState.lastFocused(key));\n        }}\n      >\n        <FocusScope ref={windowFocusableRefs.current[key]}>\n          <ToolWindowStateProvider\n            id={key}\n            containerRef={containerRef}\n            mainContentFocusableRef={mainContentFocusScopeRef}\n            toolWindowsState={toolWindowsState}\n            onToolWindowStateChange={onToolWindowStateChange}\n          >\n            {windowsById[key]?.content}\n          </ToolWindowStateProvider>\n        </FocusScope>\n      </div>\n    );\n  };\n  // TODO: candidate for component extraction\n  const renderSideDockedView = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: SideDockedState;\n  }) => {\n    if (!state) {\n      return null;\n    }\n    return (\n      <ThreeViewSplitter\n        innerView={renderToolWindow(state.mainKey)}\n        innerViewMinSize={50}\n        lastView={state.split && renderToolWindow(state.split.key)}\n        lastSize={state.split?.sizeFraction}\n        onLastResize={(newSize) => {\n          onToolWindowStateChange(\n            toolWindowsState.resizeDockSplitView(anchor, newSize)\n          );\n        }}\n        orientation={isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\"}\n      />\n    );\n  };\n  const onDockResize = (anchor: Anchor) => (size: number) => {\n    const containerBounds = containerRef.current?.getBoundingClientRect();\n    // containerBounds should have value in normal course of events\n    if (containerBounds) {\n      onToolWindowStateChange(\n        toolWindowsState.resizeDock(anchor, size, containerBounds)\n      );\n    }\n  };\n  const getSplitViewProps = (\n    layoutState: ToolWindowsLayoutState,\n    orientation: \"horizontal\" | \"vertical\"\n  ) => {\n    const firstAnchor = orientation === \"horizontal\" ? \"left\" : \"top\";\n    const secondAnchor = orientation === \"horizontal\" ? \"right\" : \"bottom\";\n    return {\n      orientation,\n      firstView: renderSideDockedView({\n        anchor: firstAnchor,\n        state: layoutState[firstAnchor].docked,\n      }),\n      firstSize: layoutState[firstAnchor].docked?.size,\n      onFirstResize: onDockResize(firstAnchor),\n      lastView: renderSideDockedView({\n        anchor: secondAnchor,\n        state: layoutState[secondAnchor].docked,\n      }),\n      lastSize: layoutState[secondAnchor].docked?.size,\n      onLastResize: onDockResize(secondAnchor),\n    };\n  };\n  const renderInnerLayout = (layoutState: ToolWindowsLayoutState) => {\n    const horizontalSplitterProps = getSplitViewProps(\n      layoutState,\n      \"horizontal\"\n    );\n    const verticalSplitterProps = getSplitViewProps(layoutState, \"vertical\");\n\n    const [outerSplitterProps, innerSplitterProps] = useWidescreenLayout\n      ? [horizontalSplitterProps, verticalSplitterProps]\n      : [verticalSplitterProps, horizontalSplitterProps];\n\n    const undockLayers = ([\"left\", \"top\", \"right\", \"bottom\"] as const).map(\n      (anchor) => {\n        const state = layoutState[anchor].undocked;\n        return (\n          state && (\n            <UndockSide\n              key={anchor}\n              anchor={anchor}\n              state={state}\n              onResize={(size) => {\n                containerRef.current &&\n                  onToolWindowStateChange(\n                    toolWindowsState.resizeUndock(\n                      anchor,\n                      size,\n                      containerRef.current.getBoundingClientRect()\n                    )\n                  );\n              }}\n            >\n              {renderToolWindow(state.key)}\n            </UndockSide>\n          )\n        );\n      }\n    );\n\n    return (\n      <>\n        <MovableToolWindowStripeProvider\n          onMove={({ to, from }) => {\n            onToolWindowStateChange(\n              toolWindowsState.move(\n                layoutState[from.anchor].stripes[\n                  from.isSplit ? \"split\" : \"main\"\n                ][from.index],\n                { anchor: to.anchor, isSplit: to.isSplit },\n                to.index\n              )\n            );\n          }}\n        >\n          {/**\n           * ToolWindow bars, aka Stripes. Order of stripes is irrelevant for layout but relevant for\n           * priority when stripe buttons are moved across stripes.\n           * layout is handled by `StyledToolWindowOuterLayout`.\n           */}\n          <StyledToolWindowOuterLayout.LeftStripe>\n            {renderStripe({\n              anchor: \"left\",\n              state: layoutState[\"left\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.LeftStripe>\n          <StyledToolWindowOuterLayout.TopStripe>\n            {renderStripe({\n              anchor: \"top\",\n              state: layoutState[\"top\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.TopStripe>\n          <StyledToolWindowOuterLayout.RightStripe>\n            {renderStripe({\n              anchor: \"right\",\n              state: layoutState[\"right\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.RightStripe>\n          <StyledToolWindowOuterLayout.BottomStripe>\n            {renderStripe({\n              anchor: \"bottom\",\n              state: layoutState[\"bottom\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.BottomStripe>\n        </MovableToolWindowStripeProvider>\n        {/**\n         * The inner layout of the ToolWindow, including four tool windows and\n         * a main content in the center.\n         */}\n        <StyledToolWindowOuterLayout.InnerView>\n          <ThreeViewSplitter\n            {...outerSplitterProps}\n            innerView={\n              <ThreeViewSplitter\n                innerViewMinSize={mainContentMinWidth}\n                innerView={\n                  <FocusScope ref={mainContentFocusScopeRef}>\n                    {children}\n                  </FocusScope>\n                }\n                {...innerSplitterProps}\n              />\n            }\n          />\n          {undockLayers}\n          {\n            <FloatToolWindows\n              floatWindows={layoutState?.floatWindows}\n              renderToolWindow={renderToolWindow}\n              onBoundsChange={(key, bounds) =>\n                onToolWindowStateChange(\n                  toolWindowsState.setFloatingBound(key, bounds)\n                )\n              }\n            />\n          }\n        </StyledToolWindowOuterLayout.InnerView>\n      </>\n    );\n  };\n\n  return (\n    <StyledToolWindowOuterLayout.Shell\n      {...containerProps}\n      ref={containerRef}\n      /**\n       * Potential refactoring: hideStripes can also be handled by conditionally\n       * rendering tool window bars, instead of considering it as a feature of\n       * StyledToolWindowOuterLayout\n       **/\n      hideStripes={hideToolWindowBars}\n      style={{ height, minHeight, ...containerProps?.style }}\n    >\n      {layoutState && renderInnerLayout(layoutState)}\n    </StyledToolWindowOuterLayout.Shell>\n  );\n});\n","import { RefObject, useEffect } from \"react\";\n\n/**\n * Executes a callback function when focus is lost from the container element. i.e. when the currently focused element\n * was within the container and:\n * - The focus is going to an element outside the container, or\n * - The focus is about to get lost (i.e. go to `document.body`).\n *\n * Note: react-aria's `useFocusWithin` (and it's `onBlurWithin` option) can't be used, since (at least currently) it\n * doesn't cover the scenario where the focus is about to get lost due to the focused element getting unmounted.\n */\nexport function useOnFocusLost(\n  onFocusLost: (args: {\n    focusLosingElement: HTMLElement | null;\n    focusReceivingElement: Element | null;\n  }) => void,\n  containerRef: RefObject<HTMLElement>\n): void {\n  useEffect(() => {\n    const handleBodyFocus = (e: FocusEvent) => {\n      if (\n        e.target instanceof HTMLElement &&\n        containerRef.current?.contains(e.target) &&\n        (!e.relatedTarget || e.relatedTarget instanceof HTMLElement) &&\n        !containerRef.current?.contains(e.relatedTarget)\n      ) {\n        onFocusLost({\n          focusLosingElement: e.target,\n          focusReceivingElement: e.relatedTarget,\n        });\n      }\n    };\n    containerRef.current?.addEventListener(\"focusout\", handleBodyFocus);\n    return () => {\n      containerRef.current?.removeEventListener(\"focusout\", handleBodyFocus);\n    };\n  }, []);\n}\n","import React, { Key, RefObject, useContext, useMemo } from \"react\";\nimport { ToolWindowsProps } from \"../ToolWindows\";\nimport { ToolWindowState, ViewMode, WindowBounds } from \"./ToolWindowsState\";\nimport { Anchor } from \"../utils\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\n\ntype ToolWindowStateContextValue = {\n  state: Readonly<ToolWindowState>;\n  hide: () => void;\n  remove: () => void;\n  blur: () => void;\n  focusMainContent: () => void;\n  moveToSide: (args: { anchor: Anchor; isSplit: boolean }) => void;\n  changeViewMode: (viewMode: ViewMode) => void;\n  stretchWidth: (value: number) => void;\n  stretchHeight: (value: number) => void;\n  setFloatingBounds: (bounds: WindowBounds) => void;\n};\nconst ToolWindowStateContext =\n  React.createContext<ToolWindowStateContextValue | null>(null);\n\n/**\n * Used in a tool window's UI tree, to get access to the tool window state and actions for changing it.\n */\nexport const useToolWindowState = () => {\n  const context = useContext(ToolWindowStateContext);\n  if (!context) {\n    throw new Error(\n      \"useToolWindowContext is meant to be used inside a tool window.\"\n    );\n  }\n  return context;\n};\n\n/**\n * Used in ToolWindows to provide tool window state and necessary actions as a context, which will be accessible\n * within the tool window content tree, via {@link useToolWindowState}\n */\nexport const ToolWindowStateProvider: React.FC<\n  {\n    id: Key;\n    containerRef: RefObject<HTMLElement>;\n    mainContentFocusableRef: RefObject<{ focus: () => void }>;\n  } & Pick<ToolWindowsProps, \"toolWindowsState\" | \"onToolWindowStateChange\">\n> = ({\n  toolWindowsState,\n  containerRef,\n  mainContentFocusableRef,\n  onToolWindowStateChange,\n  id,\n  children,\n}) => {\n  const blur = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.blur(id));\n  });\n  const hide = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.hide(id));\n  });\n  const remove = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.removeFromSidebar(id));\n  });\n  const focusMainContent = useEventCallback(() => {\n    mainContentFocusableRef.current?.focus();\n  });\n  const moveToSide = useEventCallback(\n    (side: { anchor: Anchor; isSplit: boolean }) => {\n      onToolWindowStateChange(toolWindowsState.move(id, side));\n    }\n  );\n  const changeViewMode = useEventCallback((viewMode: ViewMode) => {\n    onToolWindowStateChange(toolWindowsState.changeViewMode(id, viewMode));\n  });\n  const stretchWidth = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchWidth(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const stretchHeight = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchHeight(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const setFloatingBounds = useEventCallback((bounds: WindowBounds) => {\n    onToolWindowStateChange(toolWindowsState.setFloatingBound(id, bounds));\n  });\n  const contextValue = useMemo((): ToolWindowStateContextValue => {\n    const state = toolWindowsState.windows[id];\n    return {\n      state,\n      hide,\n      blur,\n      remove,\n      focusMainContent,\n      moveToSide,\n      changeViewMode,\n      stretchWidth,\n      stretchHeight,\n      setFloatingBounds,\n    };\n  }, [toolWindowsState, id]);\n  return (\n    <ToolWindowStateContext.Provider value={contextValue}>\n      {children}\n    </ToolWindowStateContext.Provider>\n  );\n};\n","import { clamp, curry, fromPairs, insert, mapObjIndexed, move } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\n\nexport type ViewMode =\n  | \"docked_pinned\"\n  | \"docked_unpinned\"\n  | \"undock\"\n  | \"float\"\n  /**\n   * @deprecated \"window\" ViewMode was initially added following the original impl. It doesn't seem reasonable to\n   * support it though. It's marked as deprecated to be removed in the future.\n   */\n  | \"window\";\n\nexport type WindowBounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * Data structure for keeping the state of a single tool window. very similar to WindowInfo in Intellij Platform\n *\n * A note about about the data structure:\n * Some fields like `isSplit`, `weight`, `floatingBound` are meaningful only\n * for a subset of viewModes. So it may be tempting to introduce a `viewMode`\n * type which minimally and more accurately describes the information\n * relevant for each viewMode. But it's not structured like that, and it's\n * orthogonal to viewMode, since we want to preserve the relevant information\n * for each viewMode, to be used when the viewMode is changed back.\n *\n * NOTE: consider renaming to `WindowState` to avoid confusion with `ToolWindowsState`\n */\nexport interface ToolWindowState {\n  /**\n   * The order of the tool window in its group. The group is specified by `anchor` and `isSplit`.\n   */\n  order: number;\n  /**\n   * Whether the tool window is visible (open) or not.\n   * NOTE: A maximum of 1 **docked** tool window within the same group (same `anchor` and `isSplit`) can be visible.\n   * You will get a render error in `ToolWindows` component otherwise.\n   */\n  isVisible: boolean;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the primary group, i.e. when\n   * `isSplit` is false\n   */\n  weight: number;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the secondary group. i.e.\n   * when `isSplit` is true.\n   */\n  sideWeight: number;\n  /**\n   * The side of the tool window, being \"left\", \"right\", \"top\" or \"bottom\"\n   */\n  anchor: Anchor;\n  /**\n   * Specifies whether the tool window should be shown in the split view, aka \"Secondary group\".\n   */\n  isSplit: boolean;\n  /**\n   * Tool windows view mode. See {@link ViewMode}\n   *\n   * NOTE: in Intellij Platform, there is a window `type` and also `docked` and\n   * `autoHide`.\n   * keeping one viewMode makes more sense and prevents invalid combinations\n   * like { type: \"window, \"docked\": true}, that would be unnecessarily allowed.\n   */\n  viewMode: ViewMode;\n  /**\n   * Boundaries of the tool window, when rendered in \"float\" view mode.\n   */\n  floatingBounds?: WindowBounds;\n}\n\nconst isDocked = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" ||\n  toolWindow.viewMode === \"docked_pinned\";\n\n/**\n * Determines whether the tool window should hide on focus. In the java implementation, it's a field on window\n * info instead of being a calculated field. We changed that to match viewMode with the 5 view modes that are possible\n * to choose from the UI, eliminating the combinations that are never allowed. If from UX perspective, having window\n * or float mode with autoHide feature is considered valid at some point, we may need to change the implementation\n * to something similar to the original implementation where isAutoHide and viewMode are separate.\n */\nconst isAutoHide = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" || toolWindow.viewMode === \"undock\";\n\nexport type SideInfo = Pick<ToolWindowState, \"anchor\" | \"isSplit\">;\nexport const areInSameSection = curry(\n  (window1: SideInfo, window2: SideInfo) =>\n    window1.anchor === window2.anchor && window1.isSplit === window2.isSplit\n);\n\nexport const getViewModeType = (viewMode: ViewMode) => {\n  if (viewMode === \"docked_pinned\" || viewMode === \"docked_unpinned\") {\n    return \"docked\";\n  }\n  if (viewMode === \"window\" || viewMode === \"float\") {\n    return \"float\";\n  }\n  return viewMode;\n};\ntype IdToWindowStateMap = Readonly<{\n  [key: string]: Readonly<ToolWindowState>;\n}>;\n\n/**\n * Represents UI state of a bunch of tool windows. What is rendered inside each window or toolbar button is irrelevant.\n *\n * TODO: document pros and cons of these two approaches\n * - Having a class for ToolWindowsState which keeps a readonly mapping of keys to window states.\n * - Having ToolWindowsState as an interface (a mapping from keys to window states), and a bunch of action functions\n *   which accept a window state and some arguments, and return a new window state.\n */\nexport class ToolWindowsState {\n  public readonly lastFocusedKey: Key | null;\n  public readonly removedFromSideBarIds: ReadonlySet<Key>;\n  private readonly layoutToRestore: IdToWindowStateMap;\n  constructor(\n    public readonly windows: IdToWindowStateMap,\n    {\n      lastFocusedKey = null,\n      layoutToRestore = {},\n      removedFromSideBarIds = [],\n    }: {\n      lastFocusedKey?: Key | null;\n      layoutToRestore?: IdToWindowStateMap;\n      removedFromSideBarIds?: Iterable<Key>;\n    } = {}\n  ) {\n    this.lastFocusedKey = lastFocusedKey;\n    this.layoutToRestore = layoutToRestore;\n    this.removedFromSideBarIds = new Set(removedFromSideBarIds);\n    // TODO: instead of keeping a set of removedFromSideBarIds showStripeButton can be a boolean on each window state.\n    //  if we want to avoid the invalid combination of `{ isVisible: true, showStripeButton: false }`, we can have a\n    //  a single property like : visibility: 'open' | 'closed' | 'removed'\n    const invalidWindows = Object.keys(this.windows).filter(\n      (key) =>\n        this.removedFromSideBarIds.has(key) && this.windows[key].isVisible\n    );\n    if (invalidWindows.length > 0) {\n      throw new Error(\n        `Invalid ToolWindowsState. The following windows are set as visible but are removed from the sidebar: ${invalidWindows}`\n      );\n    }\n  }\n\n  hide(targetKey: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow, key) =>\n      key === targetKey\n        ? {\n            ...toolWindow,\n            isVisible: false,\n          }\n        : toolWindow\n    );\n  }\n  hideAll(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) =>\n        getViewModeType(toolWindow.viewMode) === \"float\"\n          ? toolWindow\n          : {\n              ...toolWindow,\n              isVisible: false,\n            },\n      { layoutToRestore: this.windows }\n    );\n  }\n\n  /**\n   * Restores windows to the state before hideAll.\n   */\n  restoreWindows(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) => this.layoutToRestore[key] || toolWindow\n    );\n  }\n\n  lastFocused(key: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow) => toolWindow, {\n      lastFocusedKey: key,\n    });\n  }\n\n  show(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const closableViewModes: ViewMode[] = [];\n    if (target.viewMode === \"undock\") {\n      closableViewModes.push(\"undock\");\n    } else if (isDocked(target)) {\n      closableViewModes.push(\"docked_unpinned\", \"docked_pinned\", \"undock\");\n    }\n    return this.mapWindows(\n      (toolWindow, key) => {\n        if (key === targetKey) {\n          return {\n            ...toolWindow,\n            isVisible: true,\n          };\n        }\n        if (\n          toolWindow.isVisible &&\n          areInSameSection(target, toolWindow) &&\n          closableViewModes.includes(toolWindow.viewMode)\n        ) {\n          return { ...toolWindow, isVisible: false };\n        }\n        return toolWindow;\n      },\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds].filter(\n          (key) => key !== targetKey\n        ),\n      }\n    );\n  }\n\n  toggle(targetKey: Key): ToolWindowsState {\n    return this.windows[targetKey]?.isVisible\n      ? this.hide(targetKey)\n      : this.show(targetKey);\n  }\n\n  blur(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target || !isAutoHide(target)) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  // TODO: initiate floatingBound when changing viewMode to float or window and there is no previous floatingBound\n  changeViewMode(targetKey: Key, viewMode: ViewMode): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          viewMode,\n        };\n      }\n      const viewModeType = getViewModeType(toolWindow.viewMode);\n      if (\n        toolWindow.isVisible &&\n        viewModeType !== \"float\" &&\n        areInSameSection(toolWindow, target) &&\n        viewModeType === getViewModeType(viewMode)\n      ) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  move(targetKey: Key, index: number): ToolWindowsState;\n  move(targetKey: Key, side: SideInfo, index?: number): ToolWindowsState;\n  move(\n    targetKey: Key,\n    sideOrIndex: SideInfo | number,\n    index?: number\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const targetSide = typeof sideOrIndex === \"object\" ? sideOrIndex : target;\n    const targetIndex = typeof sideOrIndex === \"number\" ? sideOrIndex : index;\n    const targetSideWindows = Object.entries(this.windows).filter(([, value]) =>\n      areInSameSection(targetSide, value)\n    );\n    const indexInTargetSide = targetSideWindows.findIndex(\n      ([, window]) => window === target\n    );\n    const sortedTargetWindows: Array<[Key, ToolWindowState]> =\n      indexInTargetSide < 0\n        ? insert(\n            targetIndex ?? -1,\n            [targetKey, { ...target, ...targetSide }],\n            targetSideWindows\n          )\n        : move(\n            indexInTargetSide,\n            targetIndex ?? indexInTargetSide,\n            targetSideWindows\n          );\n    const newTargetSideWindows = fromPairs(\n      sortedTargetWindows.map(([key, value], index) => {\n        let newValue = value;\n        if (value.order !== index) {\n          newValue = { ...value, order: index };\n        }\n        const targetViewMode = getViewModeType(target.viewMode);\n        if (\n          key !== targetKey &&\n          target.isVisible &&\n          value.isVisible &&\n          targetViewMode !== \"float\" &&\n          getViewModeType(value.viewMode) === targetViewMode\n        ) {\n          newValue = { ...value, isVisible: false };\n        }\n        return [`${key}`, newValue];\n      })\n    );\n    return this.mapWindows((value, key) => newTargetSideWindows[key] || value);\n  }\n\n  stretchWidth(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"width\");\n  }\n\n  stretchHeight(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"height\");\n  }\n\n  setFloatingBound(\n    targetKey: Key,\n    floatingBounds: WindowBounds\n  ): ToolWindowsState {\n    return this.update(targetKey, \"floatingBounds\", floatingBounds);\n  }\n\n  removeFromSidebar(targetKey: Key): ToolWindowsState {\n    return this.mapWindows(\n      (state, key) =>\n        key === targetKey\n          ? {\n              ...state,\n              isVisible: false,\n            }\n          : state,\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds, targetKey],\n      }\n    );\n  }\n\n  mapWindows(\n    mapFn: (toolWindow: ToolWindowState, key: string) => ToolWindowState,\n    options: ConstructorParameters<typeof ToolWindowsState>[1] = {}\n  ) {\n    return new ToolWindowsState(mapObjIndexed(mapFn, this.windows), {\n      lastFocusedKey: this.lastFocusedKey,\n      layoutToRestore: this.layoutToRestore,\n      removedFromSideBarIds: this.removedFromSideBarIds,\n      ...options,\n    });\n  }\n\n  private update<K extends keyof ToolWindowState>(\n    targetKey: Key,\n    key: K,\n    value: ToolWindowState[K]\n  ) {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((window) => {\n      if (window === target) {\n        return {\n          ...window,\n          [key]: value,\n        };\n      }\n      return window;\n    });\n  }\n\n  private stretch(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number },\n    property: \"width\" | \"height\"\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const viewModeType = getViewModeType(target.viewMode);\n    if (viewModeType === \"float\") {\n      return this.mapWindows((window) => {\n        if (window === target) {\n          const currentFloatingBound = window.floatingBounds!;\n          return {\n            ...window,\n            floatingBounds: {\n              ...currentFloatingBound,\n              [property]: currentFloatingBound[property] + value,\n            },\n          };\n        }\n        return window;\n      });\n    }\n    const expectedProperty = isHorizontalToolWindow(target.anchor)\n      ? \"height\"\n      : \"width\";\n    if (expectedProperty !== property) {\n      return this;\n    }\n    const containerSize = containerBounds[property];\n    const newValue = containerSize * target.weight + value;\n    const isNewValueValid = clamp(0, containerSize, newValue) === newValue;\n    if (isNewValueValid) {\n      if (viewModeType === \"docked\") {\n        return this.resizeDock(target.anchor, newValue, containerBounds);\n      } else {\n        return this.resizeUndock(target.anchor, newValue, containerBounds);\n      }\n    }\n    return this;\n  }\n\n  resizeDock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(true, anchor, size, containerBounds);\n  }\n\n  resizeUndock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(false, anchor, size, containerBounds);\n  }\n\n  resizeDockSplitView(anchor: Anchor, weight: number): ToolWindowsState {\n    return this.mapWindows((window) => {\n      if (window.anchor === anchor && window.isVisible && isDocked(window)) {\n        return {\n          ...window,\n          sideWeight: window.isSplit ? weight : 1 - weight,\n        };\n      }\n      return window;\n    });\n  }\n\n  private resizeSide(\n    dock: boolean,\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.mapWindows((window) => {\n      const isInResizingView = dock\n        ? isDocked(window)\n        : window.viewMode === \"undock\";\n      if (window.anchor === anchor && isInResizingView && window.isVisible) {\n        const containerSize = !isHorizontalToolWindow(anchor)\n          ? containerBounds.width\n          : containerBounds.height;\n        return {\n          ...window,\n          weight: size / containerSize,\n        };\n      }\n      return window;\n    });\n  }\n}\n\nexport const toolWindowState = ({\n  viewMode = \"docked_pinned\",\n  ...inputs\n}: Partial<ToolWindowState> = {}): ToolWindowState => ({\n  anchor: \"left\",\n  isSplit: false,\n  viewMode: viewMode,\n  order: 1,\n  weight: 0.2,\n  sideWeight: 0.5,\n  isVisible: false,\n  floatingBounds:\n    getViewModeType(viewMode) === \"float\"\n      ? {\n          left: 300,\n          top: 300,\n          width: 600,\n          height: 300,\n        }\n      : undefined,\n  ...inputs,\n});\n","export type Anchor = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport const getAnchorOrientation = (\n  anchor: Anchor\n): \"horizontal\" | \"vertical\" =>\n  isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\";\n\nexport const isHorizontalToolWindow = (anchor: Anchor) =>\n  anchor === \"top\" || anchor === \"bottom\";\n\nexport const theOtherSide = (anchor: Anchor) =>\n  ({\n    left: \"right\" as const,\n    right: \"left\" as const,\n    top: \"bottom\" as const,\n    bottom: \"top\" as const,\n  }[anchor]);\n","import React, { RefObject, useEffect, useRef, useState } from \"react\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport { useOverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nexport function useToolWindow(\n  {\n    containerRef,\n    contentRef,\n    focusableContentRef,\n  }: {\n    containerRef: RefObject<HTMLElement>;\n    contentRef: RefObject<Element>;\n    focusableContentRef: RefObject<{ focus: () => void }>;\n  },\n  { onFocusChange }: { onFocusChange?: (focused: boolean) => void } = {}\n) {\n  const [contentHasFocus, setContentHasFocus] = useState(false);\n  /**\n   * NOTE: useFocusWithin form @react-aria/interactions (at least until 3.5.1) has a couple of problem, because of which\n   * we may need to implement our own version of it.\n   * - It doesn't play nice with FocusScope with `contain` set to true. When something is blurred, FocusScope prevents\n   *   that by restoring focus back immediately. but the blur event is already caught by useFocusWithin. One solution\n   *   would be to change useFocusWithin implementation to ignore these blur events that are immediately followed\n   *   by a focus event that keeps the focus in.\n   * - useFocusWithin has an inconsistent behaviour when it comes to Portals. Since it uses react props for handling\n   *   focus and blur, the [react tree determines event bubbling](https://reactjs.org/docs/portals.html#event-bubbling-through-portals),\n   *   which can be a very nice feature, when an overlay (rendered in a portal) grabs the focus, which should still\n   *   be seen as \"within\". But the problems is that the current implementation uses DOM `.contains(e.relatedTarget)`\n   *   method to determine if focus is no longer within. First of all, using react tree or dom tree to determine \"within\"\n   *   can be seen as an option perhaps. Secondly, it should be consistent on focus and blur.\n   *\n   *   Right now these problems are no big deal. but it may become an issue when portals are used within the content\n   *   of the tool window.\n   *\n   * NOTE: In the original implementation, when a heading toolbar button opens a menu, and focus goes to menu, the\n   * header loses the focus appearance, ant it relies only on content having the focus.\n   */\n  const { focusWithinProps: contentFocusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setContentHasFocus,\n  });\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: onFocusChange,\n  });\n\n  const { toolWindowProps: autoHideProps } = useAutoHide();\n\n  const { focusForwarderProps } = useFocusForwarder({\n    forwardFocus: focusableContentRef.current?.focus,\n    ignoreFocusedDescendant: true,\n  });\n\n  // If there is no focusable content rendered in the tool window, nothing will be autofocused. In that case\n  // we will focus the tool window container itself as a fallback.\n  useEffect(() => {\n    if (\n      !document.activeElement ||\n      !containerRef.current?.contains(document.activeElement)\n    ) {\n      containerRef.current?.focus();\n    }\n  }, []);\n\n  const { moveHandleProps } = useOverlayMoveHandle();\n\n  return {\n    contentHasFocus,\n    toolWindowProps: mergeProps(\n      focusForwarderProps,\n      focusWithinProps,\n      autoHideProps,\n      {\n        tabIndex: -1,\n      }\n    ),\n    toolWindowContentProps: contentFocusWithinProps,\n    toolWindowHeaderProps: moveHandleProps,\n  };\n}\n\n/**\n * Applies the auto hide behaviour of tool window based on view mode information and by handling focus and blur events,\n * on the root tool window element. Returns the necessary props that should be applied to the root tool window element.\n * The implementation is not perfect and may not 100% match the original Intellij Platform implementation.\n * If this focus based implementation for auto hide proves to be fragile and not good enough in future,\n * an alternative approach would be to move auto hide logic to the state management logic as much as possible,\n * and limit the focus based auto-hiding to only when the focus goes within the main content area. That should have\n * less focus-related edge cases.\n * TODO: auto hide behaviour should be moved to the core ToolWindows API. ToolWindows now renders a FocusScope and\n * handles focus events on any tool window, to track last focused tool window.\n */\nfunction useAutoHide() {\n  const { blur } = useToolWindowState();\n  const hideTimeoutId = useRef<number | null>(null);\n  const { focusWithinProps: windowFocusWithinProps } = useFocusWithin({\n    onBlurWithin: (e) => {\n      // setTimeout and windowHasFocusRef is to work around the problem with useFocusWithin, described above.\n      hideTimeoutId.current = window.setTimeout(() => {\n        // Sometimes when the element is blurred, the subsequent focus that is triggered by FocusScope to keep the focus\n        // is a little delayed and therefore after the timeout reaches. It seem to happen only when a non-focusable\n        // area is clicked. We mitigate it by ignoring blur events where nothing is focused. It's not a problem\n        // at least with `DefaultToolWindow` implementation that uses a FocusScope.\n        const isSomethingElseFocused = e.relatedTarget;\n        if (isSomethingElseFocused) {\n          blur();\n        }\n      });\n    },\n    onFocusWithin: () => {\n      if (hideTimeoutId.current !== null) {\n        clearTimeout(hideTimeoutId.current);\n        hideTimeoutId.current = null;\n      }\n    },\n  });\n  return {\n    toolWindowProps: windowFocusWithinProps,\n  };\n}\n","import React from \"react\";\nimport { DividerItem } from \"@intellij-platform/core/Collections\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport {\n  useAction,\n  useActionGroup,\n} from \"@intellij-platform/core/ActionSystem\";\nimport {\n  ActionItem,\n  ActionsMenu,\n} from \"@intellij-platform/core/ActionSystem/components\";\nimport {\n  MOVE_TO_ACTION_GROUP_ID,\n  TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n  VIEW_MODE_ACTION_GROUP_ID,\n  ViewModeToActionId,\n} from \"./useToolWindowActions\";\nimport {\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\n/**\n * Tool window gear icon menu, with a set of default actions and some extra ones.\n * TODO: add support for extra actions when action system is progressed a little.\n */\nexport function ToolWindowSettingsIconMenu({\n  menuProps,\n}: {\n  menuProps: React.HTMLAttributes<HTMLElement>;\n}) {\n  const { state } = useToolWindowState();\n\n  const viewModeActionGroup = useActionGroup(VIEW_MODE_ACTION_GROUP_ID);\n  const moveToActionGroup = useActionGroup(MOVE_TO_ACTION_GROUP_ID);\n  const resizeActions = useActionGroup(TOOL_WINDOW_RESIZE_ACTION_GROUP_ID);\n  const maximizeAction = useAction(MAXIMIZE_TOOL_WINDOW_ACTION_ID);\n  const removeFromSideBarAction = useAction(\n    REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID\n  );\n  if (\n    !viewModeActionGroup ||\n    !moveToActionGroup ||\n    !resizeActions ||\n    !maximizeAction ||\n    !removeFromSideBarAction\n  ) {\n    throw new Error(\n      \"[ToolWindowSettingsIconMenu]: can't find tool window actions.\"\n    );\n  }\n\n  const gearIconActions: Array<ActionItem> = [\n    viewModeActionGroup,\n    moveToActionGroup,\n    {\n      id: \"resize\",\n      title: \"Resize\",\n      presentation: \"popup\",\n      children: [...resizeActions.children, maximizeAction],\n    },\n    new DividerItem(),\n    removeFromSideBarAction,\n  ];\n  return (\n    <ActionsMenu\n      actions={gearIconActions}\n      menuProps={menuProps}\n      selectedKeys={[ViewModeToActionId[state.viewMode]]}\n    />\n  );\n}\n","import React, { HTMLProps } from \"react\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { Toolbar } from \"@intellij-platform/core/Toolbar/Toolbar\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { MenuTrigger } from \"@intellij-platform/core/Menu/MenuTrigger\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledHorizontalSeparator } from \"@intellij-platform/core/StyledSeparator\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme/Theme\";\nimport { ToolWindowSettingsIconMenu } from \"./ToolWindowSettingsIconMenu\";\nimport {\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { ActionButton } from \"@intellij-platform/core/ActionSystem/components\";\n\nexport interface ToolWindowHeaderProps\n  extends Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\"> {\n  contentHasFocus?: boolean;\n  additionalActions?: React.ReactNode;\n}\n\nconst StyledToolWindowHeader = styled.div<{ active: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: end; // to have the content overflow from right, as the toolwindow shrinks. That will keep the left-most buttons in the view\n  padding: 0 2px 0 4px;\n  overflow: hidden; // for the negative margin applied on StyledToolWindowHeaderActions\n  border-bottom: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"ToolWindow.Header.borderColor\" as UnknownThemeProp<\"ToolWindow.Header.borderColor\">\n      ) ||\n      theme.color(\"DefaultTabs.borderColor\") ||\n      theme.commonColors.contrastBorder};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\"ToolWindow.Header.background\") ||\n        theme.color(\n          \"ToolWindow.header.active.background\" as UnknownThemeProp<\"ToolWindow.header.active.background\">\n        ) ||\n        \"#E2E6EC\"\n      : theme.color(\"ToolWindow.Header.inactiveBackground\") ||\n        theme.color(\"ToolWindow.Header.background\") ||\n        \"#ECECEC\"};\n`;\n\nconst StyledToolWindowHeaderActions = styled.div`\n  margin-right: -4px;\n`;\n\nconst StyledToolWindowHeaderContent = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`;\n\nexport const DefaultToolWindowHeader: React.FC<ToolWindowHeaderProps> = ({\n  children,\n  additionalActions,\n  contentHasFocus = false,\n  ...otherProps\n}) => {\n  return (\n    <StyledToolWindowHeader active={contentHasFocus} {...otherProps}>\n      <StyledToolWindowHeaderContent>{children}</StyledToolWindowHeaderContent>\n      <StyledToolWindowHeaderActions>\n        <Toolbar>\n          {additionalActions && (\n            <>\n              {additionalActions}\n              <StyledHorizontalSeparator />\n            </>\n          )}\n          <ActionButton actionId={DOCK_TOOL_WINDOW_ACTION_ID} />\n          <MenuTrigger\n            renderMenu={({ menuProps }) => {\n              return <ToolWindowSettingsIconMenu menuProps={menuProps} />;\n            }}\n          >\n            {(props, ref) => (\n              <TooltipTrigger tooltip={<ActionTooltip actionName=\"Options\" />}>\n                <IconButton {...props} ref={ref}>\n                  <PlatformIcon icon=\"general/gearPlain\" />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </MenuTrigger>\n          <ActionButton actionId={HIDE_ACTIVE_WINDOW_ACTION_ID} />\n        </Toolbar>\n      </StyledToolWindowHeaderActions>\n    </StyledToolWindowHeader>\n  );\n};\n","import React, { useContext, useMemo, useRef } from \"react\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  FocusScope,\n  FocusScopeRef,\n} from \"@intellij-platform/core/utils/FocusScope\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { useToolWindow } from \"./useToolWindow\";\nimport { DefaultToolWindowHeader } from \"./DefaultToolWindowHeader\";\nimport { useToolWindowActions } from \"./useToolWindowActions\";\n\nexport interface DefaultToolWindowProps extends DOMProps {\n  /**\n   * title to be shown on the left side of the tool window header.\n   */\n  headerContent?: React.ReactNode;\n  /**\n   * additional action buttons to be rendered before the default gear and hide buttons.\n   */\n  additionalActions?: React.ReactNode;\n  /**\n   * Actions to be provided in the tool window, in addition to the default tool window actions.\n   */\n  actions?: ActionDefinition[];\n  /**\n   * The title of main part of the tool windows component. Used in tool window actions.\n   * @default \"Editor\"\n   */\n  mainContentTitle?: string;\n  onFocusChange?: (focused: boolean) => void;\n}\n\nconst StyledToolWindowContainer = styled.div`\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 1;\n`;\nconst StyledToolWindowContent = styled.div`\n  flex: 1;\n  overflow: auto;\n`;\n\ninterface DefaultToolWindowContextObj {\n  hasFocus?: boolean;\n}\n\nconst DefaultToolWindowContext =\n  React.createContext<DefaultToolWindowContextObj>({\n    hasFocus: false,\n  });\n\nexport const useDefaultToolWindowContext = () =>\n  useContext(DefaultToolWindowContext);\n/**\n * Default component for rendering the content of a tool window. It supports a header and a scrollable area.\n * The header supports showing a content, and some default+custom actions on the right.\n *\n * @see MultiContentToolWindow\n *\n * Remaining features:\n * - Additional gear menu actions.\n *\n */\nexport const DefaultToolWindow: React.FC<DefaultToolWindowProps> = ({\n  headerContent,\n  children,\n  additionalActions,\n  onFocusChange,\n  actions,\n  mainContentTitle = \"Editor\",\n  ...otherProps\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const focusableContentRef = useRef<FocusScopeRef>(null);\n  const {\n    // NOTE: we might as well use :focus-within and target StyledToolWindowHeader to set the background, but it's not\n    // a clear improvement.\n    contentHasFocus,\n    toolWindowProps,\n    toolWindowContentProps,\n    toolWindowHeaderProps,\n  } = useToolWindow(\n    { containerRef, contentRef, focusableContentRef },\n    {\n      onFocusChange,\n    }\n  );\n\n  const defaultToolWindowContext = useMemo(\n    () => ({\n      hasFocus: contentHasFocus,\n    }),\n    [contentHasFocus]\n  );\n  const activeToolWindowActionGroup = useToolWindowActions({\n    mainContentTitle,\n  });\n  const allActions = [activeToolWindowActionGroup, ...(actions || [])];\n\n  return (\n    <ActionsProvider actions={allActions}>\n      {({ shortcutHandlerProps }) => (\n        <StyledToolWindowContainer\n          {...mergeProps(\n            toolWindowProps,\n            shortcutHandlerProps,\n            filterDOMProps(otherProps)\n          )}\n          ref={containerRef}\n        >\n          <DefaultToolWindowContext.Provider value={defaultToolWindowContext}>\n            <DefaultToolWindowHeader\n              additionalActions={additionalActions}\n              contentHasFocus={contentHasFocus}\n              {...toolWindowHeaderProps}\n            >\n              {headerContent}\n            </DefaultToolWindowHeader>\n            <StyledToolWindowContent\n              ref={contentRef}\n              {...toolWindowContentProps}\n            >\n              {/**\n               * FIXME: adding `contain` prevents focus from moving to another focus scope both with mouse and keyboard.\n               * If we want to follow the Intellij Platform behaviour exactly, we need a kind of focus containment, where\n               * focus is trapped only for keyboard interaction, and user can still move focus by clicking another scope.\n               * Maybe a custom useFocusContainment hook and a separate option for activating it on our own FocusScope.\n               */}\n              <FocusScope ref={focusableContentRef} autoFocus>\n                {children}\n              </FocusScope>\n            </StyledToolWindowContent>\n          </DefaultToolWindowContext.Provider>\n        </StyledToolWindowContainer>\n      )}\n    </ActionsProvider>\n  );\n};\n","import React from \"react\";\nimport { Shortcut, useAction } from \"@intellij-platform/core/ActionSystem\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { getActivateToolWindowActionId } from \"./useToolWindowsActions\";\nimport styled from \"styled-components\";\n\nconst getToolWindowNumberFromShortcut = (shortcut: Shortcut): number | null => {\n  const num =\n    shortcut.type === \"keyboard\" &&\n    shortcut.firstKeyStroke.modifiers?.length === 1 &&\n    [\"Alt\", \"Meta\", \"Control\"].includes(shortcut.firstKeyStroke.modifiers[0]) &&\n    shortcut.firstKeyStroke.code.match(/^(Digit|Numpad)([0-9])$/)?.[2];\n  if (num) {\n    return parseInt(num);\n  }\n  return null;\n};\n\nconst StyledWrapper = styled.span`\n  display: flex;\n`;\n\n/**\n * Default UI for the toolbar button (aka. stripe button) of the tool window.\n * - Renders the title and icon for the tool window\n * - Optionally shows the number before the title, if a numeric shortcut is set for the corresponding ActivateToolWindow\n *   action, in the currently applied keymap.\n * - Adds an Action Tooltip\n */\nexport const DefaultToolWindowToolbarButton = ({\n  id,\n  title,\n  icon,\n  showNumber = true,\n}: {\n  id: React.Key;\n  title: string;\n  icon: React.ReactNode;\n  showNumber?: boolean;\n}) => {\n  const action = useAction(getActivateToolWindowActionId(`${id}`));\n\n  const number = action?.shortcuts\n    ?.map(getToolWindowNumberFromShortcut)\n    .find(Number.isInteger);\n  return (\n    <TooltipTrigger\n      tooltip={<ActionTooltip actionName={title} shortcut={action?.shortcut} />}\n    >\n      <StyledWrapper>\n        {icon}\n        &nbsp;\n        {number != null && showNumber ? (\n          <>\n            <u>{number}</u>:&nbsp;\n          </>\n        ) : null}\n        {title}\n      </StyledWrapper>\n    </TooltipTrigger>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { indexBy } from \"ramda\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  ToolWindowRefValue,\n  ToolWindows,\n  ToolWindowsProps,\n} from \"@intellij-platform/core/ToolWindows\";\nimport { useToolWindowsActions } from \"./useToolWindowsActions\";\nimport { DefaultToolWindowToolbarButton } from \"./DefaultToolWindowToolbarButton\";\nimport { ActionsProvider } from \"@intellij-platform/core/ActionSystem\";\n\ninterface DefaultToolWindow {\n  id: string;\n  title: string;\n  icon: React.ReactNode;\n  content: React.ReactNode;\n}\n\n/**\n * A wrapper around ToolWindows, which provides default actions. It also expects windows to have a `title` and an `icon`\n * instead of more generic `toolbarButton`. The `title` and `icon` are then used in toolbar button, and also in the\n * actions that are dynamically created for each window to toggle/focus the tool window.\n */\nexport const DefaultToolWindows = React.forwardRef(function DefaultToolWindows(\n  {\n    windows: toolWindows,\n    toolWindowsState,\n    showNumbers,\n    ...props\n  }: Omit<ToolWindowsProps, \"windows\"> & {\n    windows: DefaultToolWindow[];\n    showNumbers?: boolean;\n  },\n  forwardedRef: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const toolWindowsRef = useObjectRef(forwardedRef);\n  const windowById = indexBy(({ id }) => id, toolWindows);\n  const actions = useToolWindowsActions({\n    toolWindowsRef,\n    toolWindowsState,\n    getPresentation: (id) => windowById[id],\n  });\n  return (\n    <ActionsProvider actions={actions}>\n      {({ shortcutHandlerProps }) => (\n        <ToolWindows\n          {...props}\n          ref={toolWindowsRef}\n          toolWindowsState={toolWindowsState}\n          windows={toolWindows.map(({ id, icon, content, title }) => ({\n            id,\n            toolbarButton: (\n              <DefaultToolWindowToolbarButton\n                id={id}\n                icon={icon}\n                title={title}\n                showNumber={showNumbers}\n              />\n            ),\n            content,\n          }))}\n          containerProps={mergeProps(\n            props.containerProps || {},\n            shortcutHandlerProps\n          )}\n        />\n      )}\n    </ActionsProvider>\n  );\n});\n","import React, { Key, useEffect, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { DefaultToolWindow, DefaultToolWindowProps } from \"./DefaultToolWindow\";\nimport { TabItem } from \"../Tabs/TabItem\";\nimport { usePrevious } from \"../utils/usePrevious\";\nimport { ToolWindowTabs } from \"../Tabs/ToolWindowTabs/ToolWindowTabs\";\n\nexport interface MultiContentToolWindowProps\n  extends Pick<DefaultToolWindowProps, \"additionalActions\"> {\n  /**\n   * List of contents that will be accessible with a list of grouped or ungrouped tabs in the tool window header.\n   */\n  children:\n    | React.ReactElement<MultiContentToolWindowContentProps>[]\n    | React.ReactElement<MultiContentToolWindowContentProps>;\n  /**\n   * Key of currently active content\n   */\n  activeKey?: Key;\n  defaultActiveKey?: Key;\n  onActiveKeyChange?: (key: Key) => void;\n  /**\n   * If true, it groups tabs in a dropdown instead.\n   *\n   * @default false\n   */\n  groupTabs?: boolean;\n  /**\n   * The content shown as the title of the tool window, before content switcher (tabs or dropdown).\n   * For more control over header content, you can pass a function which accepts rendered content switcher,\n   * and then you can compose it with other content as you wish. Use case examples of function variant:\n   * - You want to render a title before the content switcher, and something after the tabs. Like a \"+\" button in\n   *   terminal.\n   * - You want to conditionally move inner-content header up to the tool window header, if there is only one tab. In\n   *   that case you don't need to render the content switcher at all. An example is the new design in the \"Run\"\n   *   tool window.\n   */\n  headerContent?:\n    | React.ReactNode\n    | ((props: { renderedViewSwitcher: React.ReactNode }) => React.ReactNode);\n}\n\n/**\n * Implemented on top of DefaultToolWindow, allows for multiple tabbed content within a tool window.\n * Remaining features:\n * - Although trivial, group tabs action in tool window header gear icon is intentionally left unimplemented for now,\n *   until an increment on action system is done.\n * - Grouped mode is not implemented currently, as we don't have a dropdown component. Though it seems it's just a\n *   MenuTrigger and some trigger with a arrow icon.\n */\nexport const MultiViewToolWindow = ({\n  groupTabs,\n  children,\n  headerContent,\n  ...props\n}: MultiContentToolWindowProps) => {\n  const [isToolWindowFocused, setToolWindowFocused] = useState(false);\n  const [activeKey, setActiveKey] = useControlledState(\n    props.activeKey!,\n    props.defaultActiveKey!,\n    props.onActiveKeyChange!\n  );\n  const contents = React.Children.toArray(children)\n    .filter(\n      (\n        child\n      ): child is React.ReactElement<MultiContentToolWindowContentProps> => {\n        const validChild =\n          React.isValidElement(child) &&\n          child.type === MultiContentToolWindowContent;\n        if (!validChild) {\n          // FIXME: only warn in dev mode\n          console.warn(\n            \"You are not supposed to render anything but MultiContentToolWindowContent inside MultiViewToolWindow. Rendered: \",\n            child\n          );\n        }\n        return validChild;\n      }\n    )\n    // The following map is because of what React.Children.toArray does to keys: https://stackoverflow.com/q/33791401/1493081\n    // It doesn't look like a good idea since and there might be better ways to fix this, or at least make sure it would\n    // work in all cases. FIXME\n    .map((content) => ({ ...content, key: `${content.key}`.slice(2) as Key }));\n  const renderContentSwitcher = () => {\n    if (groupTabs) {\n      console.error(\n        \"groupTab is not supported yet in MultiViewToolWindow. Will fallback to ungrouped tabs\"\n      );\n    }\n    return (\n      <ToolWindowTabs\n        noBorders\n        items={contents}\n        active={isToolWindowFocused}\n        selectedKey={activeKey}\n        onSelectionChange={setActiveKey}\n      >\n        {(item) => <TabItem key={item.key}>{item.props.tabContent}</TabItem>}\n      </ToolWindowTabs>\n    );\n  };\n  const renderedViewSwitcher = renderContentSwitcher();\n\n  // We set the active key if it's not set or is invalid. A common scenario is when tabs are closable, and when the\n  // active tab is closed. You would always want to previous tab to get activated in such cases, instead of the first\n  // one. By having the logic here, there is no need to repeat the same logic in each use case. Although, it can also\n  // be moved into a state management utility for tabs, maybe in the future.\n\n  const keys = contents.map(({ key }) => key);\n  const previousKeys = usePrevious(keys);\n  useEffect(() => {\n    if (!keys.includes(activeKey)) {\n      const newActiveKey = keys[previousKeys.indexOf(activeKey) - 1] ?? keys[0];\n      if (newActiveKey != undefined) {\n        setActiveKey(newActiveKey);\n      }\n    }\n  });\n\n  const activeContent = contents.find(\n    (content) => activeKey == undefined || activeKey === content.key\n  );\n  return (\n    <DefaultToolWindow\n      onFocusChange={setToolWindowFocused}\n      headerContent={\n        typeof headerContent === \"function\" ? (\n          headerContent({ renderedViewSwitcher })\n        ) : (\n          <>\n            {headerContent}\n            {renderedViewSwitcher}\n          </>\n        )\n      }\n      additionalActions={props.additionalActions}\n    >\n      {activeContent?.props.children}\n    </DefaultToolWindow>\n  );\n};\n\nexport interface MultiContentToolWindowContentProps {\n  key: Key;\n  /**\n   * Used in the corresponding tab.\n   */\n  tabContent: React.ReactNode;\n\n  children: React.ReactNode;\n}\n\nconst MultiContentToolWindowContent =\n  ({}: MultiContentToolWindowContentProps) => {\n    throw new Error(\n      \"MultiContentToolWindowContent is not meant to be rendered directly. You should only use it in MultiViewToolWindow\"\n    );\n  };\n\nMultiViewToolWindow.View = MultiContentToolWindowContent;\n","export const HIDE_ALL_WINDOWS_ACTION_ID = \"HideAllWindows\";\nexport const JUMP_TO_LAST_WINDOW_ACTION_ID = \"JumpToLastWindow\";\nexport const HIDE_ACTIVE_WINDOW_ACTION_ID = \"HideActiveWindow\";\nexport const MAXIMIZE_TOOL_WINDOW_ACTION_ID = \"MaximizeToolWindow\";\nexport const DOCK_TOOL_WINDOW_ACTION_ID = \"DockToolWindow\";\nexport const RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID = \"ResizeToolWindowRight\";\nexport const RESIZE_TOOL_WINDOW_LEFT_ACTION_ID = \"ResizeToolWindowLeft\";\nexport const RESIZE_TOOL_WINDOW_TOP_ACTION_ID = \"ResizeToolWindowTop\";\nexport const RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID = \"ResizeToolWindowBottom\";\nexport const DOCK_PINNED_MODE_ACTION_ID = \"DockPinnedMode\";\nexport const DOCK_UNPINNED_MODE_ACTION_ID = \"DockUnpinnedMode\";\nexport const UNDOCK_MODE_ACTION_ID = \"UndockMode\";\nexport const FLOAT_MODE_ACTION_ID = \"FloatMode\";\nexport const WINDOW_MODE_ACTION_ID = \"WindowMode\";\nexport const FOCUS_EDITOR_ACTION_ID = \"FocusEditor\";\nexport const REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID =\n  \"RemoveToolWindowFromSidebar\"; // doesn't show up in keymap. Not sure what the id is in the original impl.\n","import React from \"react\";\nimport {\n  Anchor,\n  isHorizontalToolWindow,\n  useToolWindowState,\n  ViewMode,\n} from \"@intellij-platform/core/ToolWindows\";\nimport {\n  ActionDefinition,\n  ActionGroupDefinition,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport {\n  DOCK_PINNED_MODE_ACTION_ID,\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  DOCK_UNPINNED_MODE_ACTION_ID,\n  FLOAT_MODE_ACTION_ID,\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  UNDOCK_MODE_ACTION_ID,\n  WINDOW_MODE_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { useCreateDefaultActionGroup } from \"@intellij-platform/core/ActionSystem/components\";\n\n// Resize steps in Intellij Platform is calculated based on the size of a \"W\" character and some\n// configuration (ide.windowSystem.hScrollChars). Although it's technically feasible, it seems not necessary\nconst HEIGHT_RESIZE_STEP = 16 * 5;\nconst WIDTH_RESIZE_STEP = 13 * 5;\n\nexport const anchors: Array<{\n  anchor: Anchor;\n  isSplit: boolean;\n  id: string;\n}> = [\n  { id: \"moveToLeftTop\", anchor: \"left\", isSplit: false },\n  { id: \"moveToLeftBottom\", anchor: \"left\", isSplit: true },\n  { id: \"moveToBottomLeft\", anchor: \"bottom\", isSplit: false },\n  { id: \"moveToBottomRight\", anchor: \"bottom\", isSplit: true },\n  { id: \"moveToRightTop\", anchor: \"right\", isSplit: true },\n  { id: \"moveToRightBottom\", anchor: \"right\", isSplit: false },\n  { id: \"moveToTopRight\", anchor: \"top\", isSplit: true },\n  { id: \"moveToTopLeft\", anchor: \"top\", isSplit: false },\n];\n\nconst getAnchorName = ({\n  anchor,\n  isSplit,\n}: {\n  anchor: Anchor;\n  isSplit: boolean;\n}) =>\n  `${anchor[0].toUpperCase()}${anchor.slice(1)} ${\n    isHorizontalToolWindow(anchor)\n      ? isSplit\n        ? \"Right\"\n        : \"Left\"\n      : isSplit\n      ? \"Bottom\"\n      : \"Top\"\n  }`;\n\nexport const ViewModeToActionId: Record<ViewMode, string> = {\n  docked_pinned: DOCK_PINNED_MODE_ACTION_ID,\n  docked_unpinned: DOCK_UNPINNED_MODE_ACTION_ID,\n  undock: UNDOCK_MODE_ACTION_ID,\n  float: FLOAT_MODE_ACTION_ID,\n  window: WINDOW_MODE_ACTION_ID,\n};\n\nexport const VIEW_MODE_ACTION_GROUP_ID = \"TW.ViewModeGroup\";\nexport const MOVE_TO_ACTION_GROUP_ID = \"TW.MoveToGroup\";\nexport const TOOL_WINDOW_RESIZE_ACTION_GROUP_ID = \"ResizeToolWindowGroup\";\n\nexport function useToolWindowActions({\n  mainContentTitle,\n}: {\n  mainContentTitle: string;\n}): ActionGroupDefinition {\n  const {\n    stretchWidth,\n    stretchHeight,\n    changeViewMode,\n    moveToSide,\n    focusMainContent,\n    hide,\n    remove,\n    state,\n  } = useToolWindowState();\n  const createDefaultActionGroup = useCreateDefaultActionGroup();\n\n  const actions: ActionDefinition[] = [];\n  if (!state) {\n    // FIXME: when window is removed, a last render happens with the new ToolWindowsState, which doesn't have state\n    //  for the removed tool window. Need to understand why that happens.\n    return createDefaultActionGroup({\n      id: \"ActiveToolwindowGroup\",\n      title: \"Active Tool Window\",\n      children: [],\n    });\n  }\n  const viewModeActionGroup = createDefaultActionGroup({\n    id: VIEW_MODE_ACTION_GROUP_ID,\n    title: \"View Mode\",\n    children: [\n      {\n        id: DOCK_PINNED_MODE_ACTION_ID,\n        title: \"Dock Pinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_pinned\");\n        },\n      },\n      {\n        id: DOCK_UNPINNED_MODE_ACTION_ID,\n        title: \"Dock Unpinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_unpinned\");\n        },\n      },\n      {\n        id: UNDOCK_MODE_ACTION_ID,\n        title: \"Undock\",\n        actionPerformed: () => {\n          changeViewMode(\"undock\");\n        },\n      },\n      {\n        id: FLOAT_MODE_ACTION_ID,\n        title: \"Float\",\n        actionPerformed: () => {\n          changeViewMode(\"float\");\n        },\n      },\n      {\n        id: WINDOW_MODE_ACTION_ID,\n        title: \"Window\",\n        actionPerformed: () => {\n          changeViewMode(\"window\");\n        },\n      },\n    ],\n  });\n  const moveToActionGroup = createDefaultActionGroup({\n    id: MOVE_TO_ACTION_GROUP_ID,\n    title: \"Move to\",\n    children: anchors.map(\n      (anchor): ActionDefinition => ({\n        id: `TW.MoveTo.${anchor.id}`,\n        title: getAnchorName(anchor),\n        icon: <PlatformIcon icon={`actions/${anchor.id}`} />,\n        isDisabled:\n          state.anchor === anchor.anchor && state.isSplit === anchor.isSplit,\n        actionPerformed: () => {\n          moveToSide(anchor);\n        },\n      })\n    ),\n  });\n  actions.push(\n    {\n      id: FOCUS_EDITOR_ACTION_ID,\n      title: `Focus ${mainContentTitle}`, // in intellij it says \"Focus Editor\" but it's not generic enough.\n      actionPerformed: () => {\n        focusMainContent();\n      },\n    },\n    {\n      id: HIDE_ACTIVE_WINDOW_ACTION_ID,\n      title: \"Hide\",\n      icon: <PlatformIcon icon=\"general/hideToolWindow\" />,\n      actionPerformed: () => {\n        hide();\n      },\n    },\n    {\n      id: MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n      title: \"Maximize Tool Window\", // Should be \"Restore Tool Window Size if the window is currently maximized\n      actionPerformed: () => {\n        // TODO(release): either remove the action or implement it\n        alert(\"Not implemented\");\n      },\n    },\n    {\n      id: REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n      title: \"Remove from Sidebar\",\n      actionPerformed: () => {\n        remove();\n      },\n    },\n    viewModeActionGroup,\n    moveToActionGroup\n  );\n  if (state.viewMode === \"float\") {\n    actions.push({\n      id: DOCK_TOOL_WINDOW_ACTION_ID,\n      title: \"Dock\",\n      icon: (\n        <PlatformIcon\n          icon={`actions/${\n            anchors.find(\n              ({ anchor, isSplit }) =>\n                anchor === state.anchor && isSplit === state.isSplit\n            )?.id\n          }`}\n        />\n      ),\n      actionPerformed: () => {\n        changeViewMode(\"docked_pinned\");\n      },\n    });\n  }\n  if (state.viewMode !== \"float\" && state.viewMode !== \"window\") {\n    const resizeGroup = createDefaultActionGroup({\n      id: TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n      title: \"Resize\",\n      children: [],\n    });\n    if (isHorizontalToolWindow(state.anchor)) {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n        title: \"Stretch to bottom\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"bottom\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n        title: \"Stretch to top\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"top\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n    } else {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n        title: \"Stretch to left\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"left\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n        title: \"Stretch to right\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"right\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n    }\n    actions.push(resizeGroup);\n  }\n  return createDefaultActionGroup({\n    id: \"ActiveToolwindowGroup\",\n    title: \"Active Tool Window\",\n    children: actions,\n  });\n}\n","import React from \"react\";\nimport { ActionDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport {\n  getViewModeType,\n  ToolWindowRefValue,\n  ToolWindowsState,\n} from \"@intellij-platform/core/ToolWindows\";\nimport {\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\ninterface DefaultToolWindowActionsProps {\n  toolWindowsState: Readonly<ToolWindowsState>;\n  toolWindowsRef: React.RefObject<ToolWindowRefValue>;\n  /**\n   * Used when creating ActivateToolWindow action for each tool window.\n   */\n  getPresentation?: (key: React.Key) =>\n    | {\n        title: string;\n        icon: React.ReactNode;\n      }\n    | undefined;\n}\n\nexport const getActivateToolWindowActionId = (id: string) =>\n  `Activate${id.replace(\" \", \"\")}Window`;\n\n/**\n * Provides default tool windows actions:\n * - Hide all tool windows\n * - Activate{id}Window action for each window\n * - Jump to last tool window\n *\n * @see also {@link DefaultToolWindows}\n */\nexport function useToolWindowsActions({\n  toolWindowsState,\n  toolWindowsRef,\n  getPresentation,\n}: DefaultToolWindowActionsProps) {\n  const isAnySideWindowWindowOpen = (state: Readonly<ToolWindowsState>) =>\n    Object.values(state.windows).some(\n      ({ isVisible, viewMode }) =>\n        isVisible && getViewModeType(viewMode) !== \"float\"\n    );\n  const windowIds = Object.keys(toolWindowsState.windows).map(\n    (key) => `${key}`\n  );\n  const activateToolWindowActions = windowIds.map(\n    (id: string, index): ActionDefinition => {\n      const { title, icon } = getPresentation?.(id) || {};\n      return {\n        id: getActivateToolWindowActionId(id),\n        title: title || `${getOrdinal(index)} window`,\n        icon,\n        description: `Activate ${title || getOrdinal(index)} window`,\n        actionPerformed: () => {\n          if (\n            toolWindowsState.windows[id]?.isVisible &&\n            !toolWindowsRef.current?.hasFocus(id)\n          ) {\n            toolWindowsRef.current?.focus(id);\n          } else {\n            toolWindowsRef.current?.changeState((state) => state.toggle(id));\n          }\n        },\n      };\n    }\n  );\n  const actions: ActionDefinition[] = [\n    ...activateToolWindowActions,\n    {\n      id: HIDE_ALL_WINDOWS_ACTION_ID,\n      title: isAnySideWindowWindowOpen(toolWindowsState)\n        ? \"Hide All Windows\"\n        : \"Restore windows\",\n      actionPerformed: () => {\n        toolWindowsRef.current?.changeState((state) => {\n          if (isAnySideWindowWindowOpen(state)) {\n            return state.hideAll();\n          } else {\n            return state.restoreWindows();\n          }\n        });\n        // Because windows have autofocus behaviour, a timeout is set. Not sure how reliable it is.\n        // TODO: replace effect-based auto focus behaviour with something better, maybe controlled by ToolWindows\n        //  component, and when a tool window is opened.\n        setTimeout(() => {\n          toolWindowsRef.current?.focusMainContent();\n        });\n      },\n    },\n    {\n      id: JUMP_TO_LAST_WINDOW_ACTION_ID,\n      title: \"Jump to Last Tool Window\",\n      isDisabled: toolWindowsState.lastFocusedKey == null,\n      actionPerformed: () => {\n        toolWindowsRef.current?.focusLastActiveWindow();\n      },\n    },\n  ];\n  return actions;\n}\n\nfunction getOrdinal(n: number) {\n  let ord = [\"st\", \"nd\", \"rd\"];\n  let exceptions = [11, 12, 13];\n  let nth =\n    ord[(n % 10) - 1] == undefined || exceptions.includes(n % 100)\n      ? \"th\"\n      : ord[(n % 10) - 1];\n  return n + nth;\n}\n","import React, {\n  CSSProperties,\n  MouseEvent,\n  useContext,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { styled, css } from \"../styled\";\nimport {\n  StyledHorizontalSeparator,\n  StyledSeparator,\n  StyledVerticalSeparator,\n} from \"../StyledSeparator\";\nimport { useOverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/useOverflowObserver\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { Overlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { StyledPopupContainer } from \"@intellij-platform/core/Popup/Popup\";\nimport { mergeProps } from \"@react-aria/utils\";\n\ntype ToolbarBorderProp =\n  | true\n  | \"horizontal\"\n  | \"vertical\"\n  | \"bottom\"\n  | \"top\"\n  | \"left\"\n  | \"right\";\n\nexport type ToolbarProps = {\n  children: React.ReactNode;\n  orientation?: \"vertical\" | \"horizontal\";\n  border?: ToolbarBorderProp;\n  style?: CSSProperties;\n  className?: string;\n} & (\n  | {\n      orientation: \"vertical\";\n    }\n  | {\n      orientation?: \"horizontal\";\n      /**\n       * Defines how the toolbar should handle its children when there is not enough room\n       * to fit all:\n       * - popup: the overflowed children will be hidden behind a show more arrow icon that\n       *   shows the rest of the items in a popup.\n       * - wrap: children will be wrapped so that they fit the available width/height\n       **/\n      overflowBehavior?: \"popup\" | \"wrap\";\n    }\n);\n\nconst borderStyle = ({ border }: { border?: ToolbarBorderProp }) =>\n  border &&\n  css`\n    border-style: solid;\n    border-color: ${({ theme }) => theme.commonColors.borderColor};\n    border-width: ${border === true ? \"1px\" : borderPropToCssProp[border]};\n  `;\n\nconst StyledToolbar = styled.div<{\n  border?: ToolbarBorderProp;\n}>`\n  display: inline-flex;\n  box-sizing: border-box;\n  overflow: hidden;\n  // NOTE: in the original implementation, there is no empty space between buttons, but buttons have kind of an\n  // invisible left padding, which is mouse-intractable, but doesn't visually seem a part of the button.\n  // Although implementable, it didn't seem necessary to follow the exact same thing. Margin should be fine.\n  gap: 4px;\n  ${borderStyle}\n  ${StyledSeparator}:first-child {\n    display: none;\n  }\n  ${StyledSeparator}:last-child {\n    display: none;\n  }\n`;\n\nconst borderPropToCssProp: Record<\n  Exclude<ToolbarBorderProp, boolean>,\n  CSSProperties[\"borderWidth\"]\n> = {\n  top: \"1px 0 0 0\",\n  bottom: \"0 0 1px 0\",\n  right: \"0 1px 0 0\",\n  left: \"0 0 0 1px\",\n  horizontal: \"0 1px\",\n  vertical: \"1px 0\",\n};\n\nconst SIDE_PADDING = 3;\nconst END_PADDING = 4;\n\nconst StyledShowMoreButton = styled.button`\n  all: unset;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${borderStyle};\n`;\n\nconst StyledHorizontalToolbar = styled(StyledToolbar)`\n  padding: ${SIDE_PADDING}px ${END_PADDING}px;\n  max-width: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-width: -webkit-fill-available;\n  ${StyledHorizontalSeparator} {\n    margin: 1px 0;\n  }\n  ${StyledShowMoreButton} {\n    margin-right: -${END_PADDING}px;\n  }\n`;\n\nconst StyledVerticalToolbar = styled(StyledToolbar)`\n  flex-direction: column;\n  max-height: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-height: -webkit-fill-available;\n  padding: ${END_PADDING}px ${SIDE_PADDING}px;\n  ${StyledVerticalSeparator} {\n    margin: 0 1px;\n  }\n  ${StyledShowMoreButton} {\n    margin-bottom: -${END_PADDING}px;\n  }\n`;\n\nconst StyledToolbarContent = styled.div<{\n  shouldWrap?: boolean;\n  firstOverflowedIndex: number;\n}>`\n  box-sizing: inherit;\n  display: inherit;\n  flex-direction: inherit;\n  flex-wrap: ${({ shouldWrap }) => (shouldWrap ? \"wrap\" : \"nowrap\")};\n  gap: inherit;\n  max-height: inherit;\n  max-width: inherit;\n  min-height: 0;\n  min-width: 0;\n\n  ${({ firstOverflowedIndex }) =>\n    /**\n     * The hidden styles should be in a way that the hidden element:\n     * - occupies its space in the document layout.\n     * - doesn't capture mouse events. (e.g. a half-overflowing hidden element shouldn't show tooltip)\n     * - remains accessible to screen readers.\n     */\n    css`\n      > ${firstOverflowedIndex === 0\n          ? \"*\"\n          : `:nth-child(${firstOverflowedIndex}) ~ *`} {\n        opacity: 0 !important;\n        pointer-events: none !important;\n      }\n    `}\n`;\n// This can be used in other places if use-cases are raised for keeping orientation in the context.\nconst OrientationContext = React.createContext<\"horizontal\" | \"vertical\">(\n  \"horizontal\"\n);\n\n/**\n * ## Toolbar API/Implementation notes\n *\n * ### Handling Overflow\n *\n * Handling the overflow popup on DOM-level, allows for a simple and flexible implementation that doesn't\n * require any coupling between Toolbar and components like IconButton. Other components can also similarly be\n * rendered inside toolbar without adopting any specific API. It's worth noting that any generic approach based\n * on children react nodes instead of children DOM nodes will have many edge cases and will involve assumptions\n * that will limit the API of toolbar. Also, any approach based on moving dom nodes to the overflow popup will\n * conflict with React owning the DOM.\n *\n * #### Assumption\n *\n * Since the overflow popup renders the same `children`, and items in the toolbar and popup overflow are made\n * visible/hidden based on the index of DOM nodes, it's important than children deterministically results in the\n * same dom structure. i.e. if a component in children randomly renders different number of root dom nodes in\n * each render, it can cause issues in hiding/showing elements.\n *\n * ### Orientation\n * A few reasons for not having separate `HorizontalToolbar` and `VerticalToolbar` components instead of `Toolbar` with\n * `orientation` prop:\n * - From usage side, a single `Toolbar` component is considered a more discoverable API.\n * - Separate components would require abstracting common parts which unnecessarily adds to complexity.\n *   The amount of branching to handle the differences is considered ok, at the current state of the component.\n */\n\n/**\n * @description\n * A toolbar is a container for {@link IconButton} and similar UI components.\n *\n * ## Features:\n * - A toolbar can be horizontal or vertical\n * - When there is not enough space for all children, toolbar shows an arrow icon, which shows the overflowing\n *   items in a popup, upon mouseover.\n *   Optionally, overflow can be wrapped into multiple lines, in horizontal toolbars.\n *\n * @example\n * <Toolbar>\n *   <IconButton aria-label=\"Show Diff\">\n *     <PlatformIcon icon=\"actions/diff\" />\n *   </IconButton>\n *   </Toolbar>\n */\nexport const Toolbar: React.FC<ToolbarProps> = ({\n  border,\n  orientation = \"horizontal\",\n  ...props\n}): React.ReactElement => {\n  const overflowBehavior =\n    orientation === \"horizontal\" && \"overflowBehavior\" in props\n      ? props.overflowBehavior\n      : null;\n  const rootProps = { style: props.style, className: props.className };\n  const ref = useRef<HTMLDivElement>(null);\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const showMoreButtonRef = useRef<HTMLButtonElement>(null);\n  const StyledToolbar =\n    orientation === \"horizontal\"\n      ? StyledHorizontalToolbar\n      : StyledVerticalToolbar;\n  const { overflowedElements } = useOverflowObserver(ref, { threshold: 0.8 });\n  const [isOverflowPopupVisible, setOverflowPopupVisible] = useState(false);\n  const [popupHeight, setPopupHeight] = useState(30);\n  const [firstOverflowedChildIndex, setFirstOverflowedChildIndex] =\n    useState<number>(-1);\n  const firstOverflowedChildRef = useRef<HTMLElement | undefined>();\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      const childElements = [...ref.current.children].filter(\n        (node): node is HTMLElement => node instanceof HTMLElement\n      );\n      const firstOverflowedChild = childElements.findIndex((child) =>\n        overflowedElements.includes(child)\n      );\n      setFirstOverflowedChildIndex(firstOverflowedChild);\n      firstOverflowedChildRef.current = childElements[firstOverflowedChild];\n    }\n  }, [overflowedElements]);\n\n  useLayoutEffect(() => {\n    if (overlayRef.current && popupHeight !== overlayRef.current.offsetHeight) {\n      setPopupHeight(overlayRef.current.offsetHeight);\n    }\n  });\n\n  const { overlayProps } = useOverlayPosition({\n    isOpen: isOverflowPopupVisible,\n    placement: \"bottom left\",\n    offset:\n      // in lack of positioning options for aligning bottom and left of of the overflow popup with the bottom and left\n      // of the toolbar itself, we have to measure the popup height, and use offset to achieve the same\n      orientation === \"horizontal\"\n        ? -popupHeight + SIDE_PADDING + 1\n        : -popupHeight + 1,\n    crossOffset:\n      orientation === \"horizontal\" ? -(SIDE_PADDING + 2) : -(SIDE_PADDING + 1),\n    containerPadding: 0,\n    shouldFlip: false,\n    targetRef: orientation === \"horizontal\" ? ref : showMoreButtonRef,\n    overlayRef: overlayRef,\n    onClose: () => {\n      setOverflowPopupVisible(false);\n    },\n  });\n\n  const showOverflowPopup = () => {\n    setOverflowPopupVisible(true);\n  };\n\n  const toolbarProps = {\n    onMouseMove: (event: MouseEvent) => {\n      const firstOverflowedElement = firstOverflowedChildRef.current;\n      if (!firstOverflowedElement) {\n        return;\n      }\n      const shouldShow =\n        orientation === \"vertical\"\n          ? event.clientY > firstOverflowedElement.getBoundingClientRect().top\n          : event.clientX > firstOverflowedElement.getBoundingClientRect().left;\n      if (shouldShow !== isOverflowPopupVisible) {\n        setOverflowPopupVisible(shouldShow);\n      }\n    },\n    onMouseLeave: () => {\n      if (isOverflowPopupVisible) {\n        setOverflowPopupVisible(false);\n      }\n    },\n  };\n  const toolbarOverflowPopupProps = {\n    onMouseEnter: () => setOverflowPopupVisible(true),\n    onMouseLeave: () => setOverflowPopupVisible(false),\n  };\n  return (\n    <OrientationContext.Provider value={orientation}>\n      <StyledToolbar\n        border={border}\n        {...mergeProps(rootProps, toolbarProps)}\n        role=\"toolbar\"\n      >\n        <StyledToolbarContent\n          ref={ref}\n          role=\"presentation\"\n          firstOverflowedIndex={firstOverflowedChildIndex}\n          shouldWrap={overflowBehavior === \"wrap\"}\n        >\n          {props.children}\n        </StyledToolbarContent>\n        {overflowedElements.length > 0 && (\n          <StyledShowMoreButton\n            ref={showMoreButtonRef}\n            tabIndex={-1}\n            onMouseEnter={showOverflowPopup}\n          >\n            <PlatformIcon icon=\"ide/link\" />\n          </StyledShowMoreButton>\n        )}\n      </StyledToolbar>\n      {isOverflowPopupVisible && overflowedElements.length > 0 && (\n        // Maybe more accessible to reuse the entire Popup here? it would require more flexible API to handle mouseleave though\n        // Note: we could also render the whole toolbar with the same props and only orientation being overwritten,\n        // but it has the risk of infinite overlay opening in some edge cases, and that level of generality doesn't\n        // seem to be necessary, at least at the moment.\n        <OrientationContext.Provider value=\"horizontal\">\n          <Overlay>\n            <StyledPopupContainer\n              ref={overlayRef}\n              {...mergeProps(overlayProps, toolbarOverflowPopupProps)}\n            >\n              <ToolbarInOverlay\n                border\n                firstVisibleIndex={\n                  orientation === \"vertical\"\n                    ? firstOverflowedChildIndex\n                    : undefined\n                }\n              >\n                {props.children}\n              </ToolbarInOverlay>\n            </StyledPopupContainer>\n          </Overlay>\n        </OrientationContext.Provider>\n      )}\n    </OrientationContext.Provider>\n  );\n};\n\nconst ToolbarInOverlay = styled(StyledHorizontalToolbar)<{\n  firstVisibleIndex?: number;\n}>`\n  ${({ firstVisibleIndex }) =>\n    firstVisibleIndex &&\n    css`\n      ${StyledSeparator}:nth-child(${firstVisibleIndex + 1}) {\n        display: none;\n      }\n      > :not(:nth-child(${firstVisibleIndex}) ~ *) {\n        display: none;\n      }\n    `};\n`;\n\n/**\n * Separator to be used between items in a toolbar.\n */\nexport const ToolbarSeparator = (): React.ReactElement => {\n  const orientation = useContext(OrientationContext);\n  return orientation === \"horizontal\" ? (\n    <StyledHorizontalSeparator />\n  ) : (\n    <StyledVerticalSeparator />\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionHelpTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  actionName: React.ReactNode;\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action Help\"\n * @see {@link ActionTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionHelpTooltip = ({\n  actionName,\n  helpText,\n  shortcut,\n  link,\n  ...tooltipProps\n}: ActionHelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline {...tooltipProps}>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n      <Tooltip.Description>{helpText}</Tooltip.Description>\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  actionName: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action\"\n * @see {@link ActionHelpTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionTooltip = ({\n  actionName,\n  shortcut,\n  ...tooltipProps\n}: ActionTooltipProps): JSX.Element => {\n  return (\n    <Tooltip {...tooltipProps}>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface HelpTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Help\"\n * @see {@link ActionTooltip} {@link ActionHelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const HelpTooltip = ({\n  helpText,\n  shortcut,\n  link,\n  ...tooltipProps\n}: HelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline {...tooltipProps}>\n      <Tooltip.Header>{helpText}</Tooltip.Header>\n      {shortcut && (\n        <div>\n          <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>\n        </div>\n      )}\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { AriaPositionProps, useOverlayPosition } from \"@react-aria/overlays\";\nimport { TooltipTriggerAndOverlay } from \"./TooltipTriggerAndOverlay\";\n\nexport interface PositionedTooltipTriggerProps\n  extends Omit<AriaTooltipTriggerProps, \"trigger\">,\n    Pick<\n      AriaPositionProps,\n      \"placement\" | \"offset\" | \"crossOffset\" | \"shouldFlip\"\n    > {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  /**\n   * Whether to show the tooltip on trigger's focus. By default, tooltip is shown only when the trigger\n   * is hovered, but it can improve accessibility to show the tooltip on focus as well.\n   */\n  showOnFocus?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. Tooltip will be positioned based relative to the trigger.\n * The default tooltip positioning is based on cursor, which is implemented by {@link TooltipTrigger}\n */\nexport const PositionedTooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset = 8,\n  showOnFocus,\n  ...props\n}: PositionedTooltipTriggerProps): JSX.Element => {\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const triggerRef = useRef<HTMLElement>(null);\n\n  const positionAria = useOverlayPosition({\n    ...props,\n    overlayRef,\n    targetRef: triggerRef,\n    offset,\n    isOpen: state.isOpen,\n    onClose: state.close,\n  });\n\n  // A workaround for a mysterious issue that happens only in docusaurus build.\n  // The ref value is not up-to-date, when the effect runs.\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(positionAria.updatePosition);\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      positionAria={positionAria}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      showOnFocus={showOnFocus}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, { ForwardedRef, MutableRefObject, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { PositionAria } from \"@react-aria/overlays\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\nimport { TooltipPointer, TooltipPointerPosition } from \"./TooltipPointer\";\nimport {\n  tooltipBackground,\n  tooltipBorderColor,\n  WITH_POINTER_BORDER_RADIUS,\n} from \"./tooltip-styles\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n  className?: string;\n  /**\n   * Whether (and in what position) the arrow pointer should be shown.\n   * When using {@link TooltipTrigger} or {@link PositionedTooltipTrigger}, the position of the pointer is calculated\n   * based on the target element, and a boolean value to define whether the arrow should be shown or not would suffice.\n   *\n   * Tooltips with pointer have slight style difference.\n   * {@see https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?type=design&node-id=15-51&mode=design&t=7PplrxG8ZfXB4hIK-0}\n   *\n   * @example\n   * <Tooltip withPointer />\n   * // shows the pointer in the position controlled by {@link TooltipTrigger} or {@link PositionedTooltipTrigger}\n   * // If there is not `TooltipTrigger` or `PositionedTooltipTrigger`, the arrow is shown on top center by default.\n   *\n   * @example\n   * <Tooltip withPointer={{side: 'top', offset: 30}} />\n   * // shows the pointer on the top side, with horizontal offset of 30px from the left of tooltip, regardless\n   * // of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n   *\n   * @example\n   * <Tooltip withPointer={{side: 'left', offset: -30}} />\n   * // shows the pointer on the left side, with vertidcal offset of 30px from the bottom of the tooltip, regardless\n   * // of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n   */\n  withPointer?: boolean | TooltipPointerPosition;\n}\n\n// Providing default value for paddings, based on intellijlaf theme. In Intellij Platform, themes extend either\n// intellijlaf or darcula. Which means some properties can be omitted in the custom theme, relying on the values\n// in the base theme. This is not how theming works here, at the moment, and there are other similar issues, but\n// this is just a mitigation for one case, spacing in tooltip.\nexport const DEFAULT_TEXT_BORDER_INSETS = \"0.5rem 0.8125rem 0.625rem 0.625rem\";\nexport const DEFAULT_SMALL_TEXT_BORDER_INSETS =\n  \"0.375rem 0.75rem 0.4375rem 0.625rem\";\nconst StyledTooltip = styled.div<{ multiline?: boolean; hasPointer?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${tooltipBackground};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\") ||\n        DEFAULT_TEXT_BORDER_INSETS\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\") ||\n        DEFAULT_SMALL_TEXT_BORDER_INSETS};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme, hasPointer }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") || hasPointer ? \"1px\" : \"0px\"};\n  border-color: ${tooltipBorderColor};\n  ${WINDOW_SHADOW};\n  ${({ hasPointer }) =>\n    hasPointer &&\n    css`\n      position: relative; // needed for absolute positioning of the pointer\n      border-radius: ${WITH_POINTER_BORDER_RADIUS}px;\n    `}\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\nexport const placementToPointerSide: Record<\n  PositionAria[\"placement\"],\n  TooltipPointerPosition[\"side\"]\n> = {\n  bottom: \"top\",\n  top: \"bottom\",\n  left: \"right\",\n  right: \"left\",\n  center: \"top\", // doesn't make sense :-?\n};\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, withPointer, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref: MutableRefObject<HTMLDivElement | null> =\n    useObjectRef(forwardedRef);\n  const {\n    state,\n    isInteractive,\n    pointerPositionStyle,\n    placement = \"bottom\",\n  } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  const { side, offset } =\n    typeof withPointer === \"object\"\n      ? withPointer\n      : { side: placementToPointerSide[placement], offset: undefined };\n\n  return (\n    <StyledTooltip\n      hasPointer={Boolean(withPointer)}\n      multiline={multiline}\n      {...tooltipProps}\n      className={props.className}\n      ref={ref}\n    >\n      {withPointer && (\n        <TooltipPointer\n          tooltipRef={ref}\n          side={side}\n          offset={\n            offset || !pointerPositionStyle\n              ? { type: \"specific\", value: offset }\n              : { type: \"calculated\", value: pointerPositionStyle }\n          }\n        />\n      )}\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React, { CSSProperties } from \"react\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { PositionAria } from \"@react-aria/overlays\";\n\ninterface TooltipContextObject {\n  state: TooltipTriggerState;\n  isInteractive: boolean;\n  placement: PositionAria[\"placement\"];\n  pointerPositionStyle?: CSSProperties;\n}\n\nexport const TooltipContext = React.createContext<TooltipContextObject | null>(\n  null\n);\n","import { compose, identity } from \"ramda\";\nimport React, { CSSProperties, RefObject, useEffect, useState } from \"react\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nimport {\n  tooltipBackground,\n  WITH_POINTER_BORDER_RADIUS,\n} from \"./tooltip-styles\";\n\ntype OffsetValue = number | `${number}%`;\nexport type TooltipPointerPosition = {\n  /**\n   * The side of the tooltip the pointer is shown\n   */\n  side: \"top\" | \"bottom\" | \"left\" | \"right\";\n  /**\n   * - When side is \"top\" or \"bottom\":\n   *   Horizontal offset (in px) with respect to the left (or right, if negative) of the tooltip.\n   * - When side is \"left\" or \"right\":\n   *   Vertical offset (in px) with respect to the top (or bottom, if negative) of the tooltip.\n   *\n   * @default: '50%'\n   */\n  offset?: OffsetValue | { value: OffsetValue; invert?: boolean };\n};\n\nconst POINTER_WIDTH = 6;\nconst POINTER_HEIGHT = 9;\nconst POINTER_THICKNESS = 1.5;\nconst TRANSLATE = `translate(-${POINTER_WIDTH}px, -${POINTER_HEIGHT}px)`;\nconst sideStyles = {\n  top: css`\n    top: 0;\n    transform: ${TRANSLATE};\n  `,\n  bottom: css`\n    bottom: 0;\n    transform: rotateX(180deg) ${TRANSLATE};\n  `,\n  left: css`\n    left: 0;\n    transform: rotate(-90deg) ${TRANSLATE};\n  `,\n  right: css`\n    right: 0;\n    transform: rotate(90deg) ${TRANSLATE};\n  `,\n};\nconst StyledTooltipPointer = styled.span<{\n  side: TooltipPointerPosition[\"side\"];\n}>`\n  position: absolute;\n  width: 0;\n  height: 0;\n  ${({ side }) => sideStyles[side]};\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    border-left: ${POINTER_WIDTH + POINTER_THICKNESS}px solid transparent;\n    border-right: ${POINTER_WIDTH + POINTER_THICKNESS}px solid transparent;\n    border-bottom: ${POINTER_HEIGHT + POINTER_THICKNESS}px solid #636569;\n    left: -${POINTER_THICKNESS}px;\n    top: -${POINTER_THICKNESS}px;\n  }\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    border-left: ${POINTER_WIDTH}px solid transparent;\n    border-right: ${POINTER_WIDTH}px solid transparent;\n    border-bottom: ${POINTER_HEIGHT}px solid ${tooltipBackground};\n  }\n`;\n\nfunction normalizeCssValue(value: string | number) {\n  return typeof value === \"number\" ? `${value}px` : value;\n}\n\nconst withMin = (min: number) => (value: string | number | undefined) =>\n  value != undefined ? `max(${min}px, ${normalizeCssValue(value)})` : value;\nconst withMax = (max: number) => (value: string | number | undefined) =>\n  value != undefined ? `min(${max}px, ${normalizeCssValue(value)})` : value;\nconst HEIGHT_OFFSET = POINTER_HEIGHT + WITH_POINTER_BORDER_RADIUS;\nconst WIDTH_OFFSET = POINTER_WIDTH + WITH_POINTER_BORDER_RADIUS;\n\n/**\n * Ensures pointer is not offset too much or too little that would make the arrow appear\n * outside the tooltip boundary.\n */\nfunction limitPointerPositionStyles(\n  { width, height }: { width: number | undefined; height: number | undefined },\n  { top, left, right, bottom }: CSSProperties\n) {\n  const applyVerticalMinMax = compose(\n    height ? withMax(height - HEIGHT_OFFSET) : identity,\n    withMin(HEIGHT_OFFSET)\n  );\n  const applyHorizontalMinMax = compose(\n    width ? withMax(width - WIDTH_OFFSET) : identity,\n    withMin(WIDTH_OFFSET)\n  );\n  return {\n    top: applyVerticalMinMax(top),\n    bottom: applyVerticalMinMax(bottom),\n    left: applyHorizontalMinMax(left),\n    right: applyHorizontalMinMax(right),\n  };\n}\n\nconst getOffsetCssProp = (\n  side: TooltipPointerPosition[\"side\"],\n  invert?: boolean\n): \"top\" | \"bottom\" | \"left\" | \"right\" => {\n  if (side === \"top\" || side === \"bottom\") {\n    return invert ? \"right\" : \"left\";\n  }\n  return invert ? \"bottom\" : \"top\";\n};\n\nfunction pointerPositionToOffsetStyle({\n  side,\n  offset = \"50%\",\n}: TooltipPointerPosition): CSSProperties {\n  const { invert = false, value: offsetValue } =\n    typeof offset === \"object\" ? offset : { invert: false, value: offset };\n  return {\n    [getOffsetCssProp(side, invert)]: offsetValue,\n  };\n}\n\nexport function TooltipPointer({\n  side,\n  offset,\n  tooltipRef,\n}: {\n  side: TooltipPointerPosition[\"side\"];\n  offset:\n    | { type: \"calculated\"; value: CSSProperties }\n    | { type: \"specific\"; value: TooltipPointerPosition[\"offset\"] };\n  tooltipRef: RefObject<HTMLElement>;\n}) {\n  const [size, setSize] = useState<{\n    height: number | undefined;\n    width: number | undefined;\n  }>({ height: undefined, width: undefined });\n  useEffect(() => {\n    const { offsetHeight, offsetWidth } = tooltipRef.current || {};\n    if (offsetHeight != size?.height || offsetWidth != size?.width) {\n      setSize({ height: offsetHeight, width: offsetWidth });\n    }\n  });\n\n  return (\n    <StyledTooltipPointer\n      side={side}\n      style={limitPointerPositionStyles(\n        size,\n        offset.type === \"specific\"\n          ? pointerPositionToOffsetStyle({ side, offset: offset.value })\n          : offset.value\n      )}\n    />\n  );\n}\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { AriaPositionProps } from \"@react-aria/overlays\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { TooltipTriggerAndOverlay } from \"@intellij-platform/core/Tooltip/TooltipTriggerAndOverlay\";\n\nexport interface TooltipTriggerProps\n  // controlling isOpen state is not supported since positioning is based on cursor.\n  // PositionedTooltipTrigger can be used for controlled isOpen state\n  extends Omit<AriaTooltipTriggerProps, \"isOpen\" | \"defaultOpen\" | \"trigger\"> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Placement of the tooltip with respect to the cursor\n   * @default \"bottom left\"\n   */\n  placement?: AriaPositionProps[\"placement\"];\n  /**\n   * The additional offset applied along the main axis between the element and its\n   * anchor element.\n   * @default theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20\n   */\n  offset?: number;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}.\n * Showing tooltip on focus and controlled open state are not supported at the moment, based on how tooltip works in the\n * reference impl, and since tooltip is positioned based on cursor position. Positioning the tooltip based on cursor\n * position requires tooltip to be opened on hover. That's why neither controlling opened state nor showing the tooltip\n * on focus are supported here. {@link PositionedTooltipTrigger} allows for positioning the tooltip with respect to the\n * trigger element, and offers more options.\n */\nexport const TooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset,\n  placement = \"bottom left\",\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const triggerRef = useRef<HTMLElement>(null);\n  const theme = useTheme();\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  const positionAria = useMouseEventOverlayPosition({\n    overlayRef,\n    isOpen: state.isOpen,\n    placement,\n    shouldFlip: true,\n    offset:\n      offset ?? theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20,\n  });\n\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(() => {\n        positionAria.updatePosition();\n      });\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      positionAria={positionAria}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      /**\n       * If we want to support showing tooltip on focus, or if we want to allow controlled open state, we should let it\n       * be positioned by the trigger element in that case, rather than mouse position.\n       * One solution would be to use useOverlayPosition as well, and conditionally use the right `overlayProps`, based on\n       * whether the position determined by mouse is within `triggerRef.current?.getBoundingClientRect()`. Another way\n       * (maybe better) would be to have `useMouseEventOverlayPosition` accept `bounds` or `containerBounds`, which if\n       * passed, makes sure the position is kept within that boundary. Outside positions would be mapped to the closest\n       * point on the border of the boundary.\n       */\n      showOnFocus={false}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useState,\n} from \"react\";\nimport { useTooltipTrigger as useAriaTooltipTrigger } from \"@react-aria/tooltip\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { Overlay, PositionAria } from \"@react-aria/overlays\";\nimport { mergeProps, useLayoutEffect } from \"@react-aria/utils\";\n\nimport { TooltipContext } from \"./TooltipContext\";\n\ninterface TooltipTriggerBaseProps {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  trigger:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  state: TooltipTriggerState;\n\n  showOnFocus?: boolean;\n  positionAria: PositionAria;\n  overlayRef: RefObject<HTMLDivElement>;\n  triggerRef: RefObject<HTMLElement>;\n  isDisabled?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. It doesn't handle tooltip positioning, and so shouldn't be used\n * directly. {@param tooltipOverlayProps} should be used to apply the intended positioning.\n *\n * TODO: Implement timeout-based auto-hide (https://jetbrains.github.io/ui/controls/tooltip/#19)\n * TODO: shadow\n */\nexport const TooltipTriggerAndOverlay = ({\n  tooltip,\n  trigger,\n  state,\n  overlayRef,\n  triggerRef,\n  showOnFocus,\n  positionAria,\n  ...props\n}: TooltipTriggerBaseProps): JSX.Element => {\n  const [isInteractive, setInteractive] = useState(false);\n  const { triggerProps, tooltipProps } = useTooltipTrigger(\n    props,\n    // In Intellij Platform. The tooltip hides right away. We follow the same, unless the tooltip is interactive.\n    // Maybe something to rethink if it's worth following the reference impl for.\n    { ...state, close: isInteractive ? state.close : () => state.close(true) },\n    triggerRef\n  );\n\n  if (!showOnFocus) {\n    delete triggerProps.onFocus;\n  }\n\n  useLayoutEffect(() => {\n    setInteractive(\n      overlayRef.current?.querySelector(\n        'a, button, [role=\"button\"], [role=link]'\n      ) !== null\n    );\n  });\n  return (\n    <>\n      {normalizeChildren(trigger, { ...triggerProps, ref: triggerRef })}\n      {state.isOpen && !props.isDisabled && (\n        <Overlay>\n          <TooltipContext.Provider\n            value={{\n              state,\n              isInteractive,\n              placement: positionAria.placement,\n              pointerPositionStyle: positionAria.arrowProps.style,\n            }}\n          >\n            <div\n              {...mergeProps(\n                positionAria.overlayProps,\n                // Is it ok to apply tooltip props on this wrapper?\n                tooltipProps\n              )}\n              ref={overlayRef}\n            >\n              {tooltip}\n            </div>\n          </TooltipContext.Provider>\n        </Overlay>\n      )}\n    </>\n  );\n};\n\nfunction normalizeChildren(\n  children: TooltipTriggerBaseProps[\"trigger\"],\n  triggerProps: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n) {\n  if (typeof children === \"function\") {\n    return children(triggerProps);\n  }\n  if (React.isValidElement(children) && typeof children.type === \"string\") {\n    return React.cloneElement(children, triggerProps);\n  }\n  return <FocusableProvider {...triggerProps}>{children}</FocusableProvider>;\n}\n\n/**\n * A wrapper around react-aria's useTooltipTrigger, adjusting it for Intellij Platform.\n */\nconst useTooltipTrigger: typeof useAriaTooltipTrigger = (props, state, ref) => {\n  const { triggerProps, tooltipProps } = useAriaTooltipTrigger(\n    props,\n    state,\n    ref\n  );\n  // onPointerDown returned from the underlying usePress stops propagation which messes with some usages of tooltip\n  // like in tab or tool window stripe button. We replace onPointerDown handler with a similar handler that closes\n  // the tooltip.\n  triggerProps.onPointerDown = () => {\n    if (!(ref.current instanceof HTMLInputElement)) {\n      state.close(true);\n    }\n  };\n  /**\n   * onMouseDown is preventDefault-ed which interferes with functionality of the tooltip trigger, in use cases like\n   * tool window stripe button. Note that since pointerDown is handled for calling the tooltip trigger's onPressStart\n   * handler (which hides the tooltip), there is no issue in excluding onMouseDown, because it's only used to preventDefault\n   * the event, because of some edge cases focus handling which is not our concern.\n   */\n  delete triggerProps.onMouseDown;\n\n  return {\n    triggerProps,\n    tooltipProps,\n  };\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ValidationTooltipProps {\n  children: React.ReactNode;\n  /**\n   * @default error\n   */\n  type?: \"error\" | \"warning\";\n}\n\nconst StyledValidationTooltip = styled(Tooltip)`\n  box-shadow: none;\n  padding: 0.25rem 0.5rem; // from ComponentValidator class in the reference impl\n  max-width: ${({ theme }) =>\n    `${theme.value<number>(\"ValidationTooltip.maxWidth\")}px`};\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.errorBackground\")};\n  border: 1px solid\n    ${({ theme }) => theme.color(\"ValidationTooltip.errorBorderColor\")};\n`;\n\nconst StyledWarningValidationTooltip = styled(StyledValidationTooltip)`\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBackground\")};\n  border-color: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBorderColor\")};\n`;\n\n/**\n * Tooltip to be used for validation error messages\n * @see https://jetbrains.github.io/ui/principles/validation_errors/\n */\nexport const ValidationTooltip = ({\n  type = \"error\",\n  children,\n}: ValidationTooltipProps): JSX.Element => {\n  const Component =\n    type === \"error\" ? StyledValidationTooltip : StyledWarningValidationTooltip;\n  return <Component multiline>{children}</Component>;\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\n\nexport const WITH_POINTER_BORDER_RADIUS = 4;\nexport const tooltipBackground = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\");\nexport const tooltipBorderColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\");\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n}: {\n  item: Node<T>;\n}) => {\n  return (\n    <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n      <TreeNode key={item.key} item={item} />\n    </SpeedSearchItemHighlightsProvider>\n  );\n};\n","import React, { CSSProperties, ForwardedRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchStateProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport { useCollectionRef } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { StyledTree } from \"../StyledTree\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { SpeedSearchTreeNode } from \"./SpeedSearchTreeNode\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps &\n  SpeedSearchStateProps & {\n    /**\n     * Whether speed search popup should not be shown. Useful when speed search state is controlled, and\n     * a search input is rendered outside the tree.\n     */\n    hideSpeedSearchPopup?: boolean;\n  };\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      treeRef,\n      hideSpeedSearchPopup,\n      style,\n      className,\n      ...props\n    }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(\n      { ...props, disallowEmptySelection: !props.allowEmptySelection },\n      treeRef\n    );\n    useCollectionRef(props, state);\n    const ref = useForwardedRef(forwardedRef);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          {!hideSpeedSearchPopup && <SpeedSearchPopup {...searchPopupProps} />}\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n            style={style}\n            className={className}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchStateProps,\n} from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SpeedSearchStateProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    ref,\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (\n        [\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key) &&\n        !hasAnyModifier(e)\n      ) {\n        speedSearch.clear();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList).attrs({ role: \"tree\" as string })`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import React, { Key, MutableRefObject } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport type TreeContextType<T> = {\n  state: TreeState<T>;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { TREE_ICON_SIZE } from \"./TreeNodeIcon\";\n\ntype StyledListItemProps = {\n  level: number;\n};\nexport const StyledTreeNode = styled(StyledListItem).attrs<StyledListItemProps>(\n  { role: \"treeitem\" }\n)<StyledListItemProps>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n  padding-right: 0.25rem;\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"Tree.foreground\" as UnknownThemeProp<\"Tree.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"Tree.selectionForeground\" as UnknownThemeProp<\"Tree.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"Tree.selectionBackground\" as UnknownThemeProp<\"Tree.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"Tree.selectionInactiveForeground\" as UnknownThemeProp<\"Tree.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"Tree.selectionBackgroundInactive\" as UnknownThemeProp<\"Tree.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n    };\n  }}\n`;\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\nimport { StyledTreeNode } from \"@intellij-platform/core/Tree/StyledTreeNode\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n  showAsFocused?: boolean;\n};\n\nexport function TreeNode<T>({ item }: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isContainerFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n  const ariaProps = {\n    role: \"treeitem\",\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }, ariaProps),\n  };\n}\n","import { Key, RefObject, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { FocusEvents } from \"@react-types/shared/src/events\";\nimport { FocusStrategy } from \"@react-types/shared/src/selection\";\nimport { groupBy } from \"ramda\";\n\nexport interface SelectableTreeProps<T>\n  extends DOMProps,\n    Omit<FocusEvents, \"onFocusChange\"> {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n\n  allowEmptySelection?: boolean;\n\n  autoFocus?: boolean | FocusStrategy;\n\n  showAsFocused?: boolean;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  {\n    onAction,\n    onFocus,\n    onBlur,\n    autoFocus,\n    showAsFocused,\n    ...props\n  }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    selectOnFocus: true,\n    autoFocus,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    const focusedItem = focusedKey\n      ? state.collection.getItem(focusedKey)\n      : null;\n    if (focusedItem) {\n      const isExpandable = Boolean(focusedItem?.hasChildNodes);\n      const expanded = state.expandedKeys.has(focusedKey);\n      const isDisabled = state.disabledKeys.has(focusedKey);\n      if (isDisabled) {\n        event.continuePropagation();\n        return;\n      }\n      props?.onNodeKeyDown?.(event, focusedItem);\n      const shouldToggle =\n        !hasAnyModifier(event) &&\n        (event.key === \"Enter\" ||\n          (event.key === \"ArrowLeft\" && expanded) ||\n          (event.key === \"ArrowRight\" && !expanded));\n      if (isExpandable && shouldToggle) {\n        event.preventDefault();\n        state.toggleKey(focusedKey);\n        return;\n      } else if (event.key === \"Enter\") {\n        onAction?.(focusedKey);\n        return;\n      }\n    }\n    // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n    // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n    // inputs when the propagation is not prevented.\n    // Also, selectionKeyDown is not accurate in handling actions like \"select all\". e.g. it takes 'cmd+shift+a' too,\n    // as select all which can conflict with action system. So we don't call it if there are multiple modifiers.\n    const hasAtMostOneModifier =\n      [event.metaKey, event.ctrlKey, event.shiftKey, event.altKey].filter(\n        (i) => i\n      ).length < 2;\n    if (hasAtMostOneModifier) {\n      selectionKeyDown?.(event);\n    }\n    event.continuePropagation();\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused: Boolean(focused || showAsFocused),\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      showAsFocused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n  useSelectParentOfRemovedSelectedNode(state);\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps,\n      { onFocus, onBlur, role: \"tree\" }\n    ),\n    treeContext,\n    focused,\n  };\n}\n\n/**\n * When a selected node is removed from the tree, selects the parent of the removed node\n * if no other node is selected.\n *\n * Note: this behavior is observed in a couple of tree views, including project files tree.\n * There could be an option for disabling/enabling it, if use cases comes up in future\n * where this behavior causes issues.\n */\nconst useSelectParentOfRemovedSelectedNode = (state: TreeState<unknown>) => {\n  const previousCollectionRef = useRef(state.collection);\n  useEffect(() => {\n    if (state.selectionManager.rawSelection !== \"all\") {\n      const keys = [...state.collection.getKeys()];\n\n      const { invalid = [], valid = [] } = groupBy(\n        (selectedKey) => (keys.includes(selectedKey) ? \"valid\" : \"invalid\"),\n        [...state.selectionManager.selectedKeys]\n      );\n      if (valid.length === 0 && invalid.length > 0) {\n        for (let invalidKey of invalid) {\n          let key: Key | undefined = invalidKey;\n          while (key != undefined) {\n            if (keys.includes(key)) {\n              state.selectionManager.setSelectedKeys(valid.concat(key));\n              state.selectionManager.setFocusedKey(key);\n              return;\n            }\n            key = previousCollectionRef.current.getItem(key)?.parentKey;\n          }\n        }\n      }\n    }\n    previousCollectionRef.current = state.collection;\n  }, [state.collection]);\n};\n","//@ts-nocheck\n/**\n * Not exported from @react-stately/tree, but needed in the custom implementation of useTreeState\n */\n\nimport { Key } from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","import { Node } from \"@react-types/shared\";\nimport { Key } from \"react\";\n\n/**\n * given a node, returns keys of all consecutive single children\n */\nexport function getSingleChildrenKeys<T>(\n  node: Node<T> | null | undefined\n): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive<T>(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n): Key[] {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nconst isExpandable = <T>(node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager,\n  SelectionManagerOptions,\n} from \"@react-stately/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key } from \"react\";\n\nexport class TreeSelectionManager extends SelectionManager {\n  private readonly collection: Collection<Node<unknown>>;\n\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState,\n    options?: SelectionManagerOptions\n  ) {\n    super(collection, state, options);\n    this.collection = collection;\n  }\n\n  expandSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { expandKeys } = this.getExpandAndShrinkKeys(node);\n      if (expandKeys.length > 0) {\n        this.setSelectedKeys([...this.selectedKeys, ...expandKeys]);\n      }\n    }\n  }\n  shrinkSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { shrinkKeys } = this.getExpandAndShrinkKeys(node);\n      if (shrinkKeys.length > 0) {\n        this.setSelectedKeys(\n          [...this.selectedKeys].filter((key) => !shrinkKeys.includes(key))\n        );\n      }\n    }\n  }\n\n  private getExpandAndShrinkKeys(node: Node<unknown>) {\n    return this.recursivelyGetExpandAndShrinkKeys(\n      node,\n      [...this.collection.getKeys()],\n      null\n    );\n  }\n  /**\n   * Starting from a node, traverses the tree up, until it reaches the root of the fully selected subtree that includes\n   * the starting node. The root itself may or may not be selected. Returns:\n   * - keys to be added to selection, when expanding selection\n   * - keys to be removed from selection, when shrinking selection\n   */\n  private recursivelyGetExpandAndShrinkKeys(\n    node: Node<unknown>,\n    keys: Array<Key>,\n    previousChild: Key | null\n  ): { expandKeys: Key[]; shrinkKeys: Key[] } {\n    const parent =\n      node && node.parentKey ? this.collection.getItem(node.parentKey) : null;\n    const newKeys = keys.filter((key) => key !== previousChild);\n    const parentDescendants = parent\n      ? getAllDescendants(parent, newKeys).map(({ key }) => key)\n      : this.getAllRoots().flatMap((key) =>\n          key !== node.key\n            ? getAllDescendants(this.collection.getItem(key), newKeys)\n                .map(({ key }) => key)\n                .concat(key)\n            : []\n        );\n    if (parent && parentDescendants.every((key) => this.isSelected(key))) {\n      return this.recursivelyGetExpandAndShrinkKeys(parent, keys, node.key);\n    }\n    const descendants = getAllDescendants(\n      node,\n      keys.filter((key) => key !== previousChild)\n    ).map(({ key }) => key);\n\n    return {\n      expandKeys: descendants.some((key) => !this.isSelected(key))\n        ? descendants\n        : !this.isSelected(node.key)\n        ? [node.key]\n        : parentDescendants,\n      shrinkKeys:\n        parentDescendants.length > 0 &&\n        parentDescendants.every((key) => this.isSelected(key))\n          ? parentDescendants\n          : this.isSelected(node.key) && previousChild\n          ? [node.key]\n          : descendants.filter((key) => this.isSelected(key)),\n    };\n  }\n\n  private getAllRoots() {\n    return [...this.collection.getKeys()].filter(\n      (key) => this.collection.getItem(key).parentKey == null\n    );\n  }\n}\n\nfunction getAllDescendants<T>(\n  node: Node<T>,\n  stopKeys: Array<React.Key>\n): Node<T>[] {\n  const childNodes = (node.hasChildNodes ? [...node.childNodes] : []).filter(\n    (node) => stopKeys.includes(node.key)\n  );\n  return node.hasChildNodes\n    ? childNodes.concat(\n        childNodes.map((node) => getAllDescendants(node, stopKeys)).flat()\n      )\n    : [];\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeProps as _TreeProps, TreeState } from \"@react-stately/tree\";\nimport {\n  TreeRefValue,\n  useTreeRef,\n} from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport { useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport { TreeCollection as _TreeCollection } from \"./__copied__TreeCollection\";\nimport { getSingleChildrenKeys } from \"./getSingleChildrenKeys\";\nimport { TreeSelectionManager } from \"@intellij-platform/core/Tree/TreeSelectionManager\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport class TreeCollection<T> extends _TreeCollection<T> {\n  public readonly rootKeys: Key[];\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys: Set<Key> }\n  ) {\n    super(nodes, { expandedKeys });\n    this.rootKeys = Array.from(nodes).map(({ key }) => key);\n  }\n\n  getAllExpandableKeys(): Set<Key> {\n    const rootNodes = this.rootKeys\n      .map((key) => this.getItem(key))\n      .filter(notNull);\n    return this.recursivelyAddExpandableKeys(rootNodes, new Set<Key>());\n  }\n\n  private recursivelyAddExpandableKeys(\n    nodes: Iterable<Node<T>>,\n    result: Set<Key>\n  ) {\n    for (const node of nodes) {\n      if (node?.hasChildNodes) {\n        result.add(node.key);\n        this.recursivelyAddExpandableKeys(node.childNodes, result);\n      }\n    }\n    return result;\n  }\n}\nexport interface TreeProps<T>\n  extends _TreeProps<T>,\n    CollectionCacheInvalidationProps {\n  childExpansionBehaviour?: \"multi\" | \"single\";\n}\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n *\n * Similar to (and initially copied from) useTreeState from @react-stately/tree, but with the following changes:\n * - Supports exposing some imperative API via ref.\n *   Could be done via a wrapper too.\n * - Different onToggle implementation with two adjustments to match Intellij Platform:\n *   - Collapsing a key collapses all descendants as well.\n *   - Expanding a single-child node will recursively expand all single-child descendants.\n *   Couldn't be done with a wrapper in a clean and optimal way. Access to setExpandedKey is not provided. We would need\n *   to either maintain a new state for expanded keys and ignore the one returned from the wrapped hook, or\n *   inefficiently call the returned `toggleKey` function many times.\n * - Supports collection invalidation via CollectionCacheInvalidationProps\n *   Perhaps not the most important addition, but not possible to be done via a wrapper.\n * - Uses TreeSelectionManager instead of the default SelectionManager, which implements expand/shrink selection.\n *   Could be done in a wrapper, with a little hack. Would need to replace selection manager.\n * - returned `collection` is of type `TreeCollection` (which is an improved version of react-stately `TreeCollection`),\n *   instead of the more generic `Collection`.\n */\nexport function useTreeState<T extends object>(\n  { childExpansionBehaviour = \"multi\", ...props }: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRefValue>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined!,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange!\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  // @ts-expect-error imprecise typing in @react-stately/selection\n  let tree = useCollection<T, TreeCollection<T>>(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  const selectionManager = new TreeSelectionManager(\n    tree as Collection<Node<T>>,\n    selectionState\n  );\n\n  useTreeRef({ selectionManager, setExpandedKeys, tree }, treeRef);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      // @ts-expect-error imprecise typing in @react-stately/selection\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const toggleKey = (key: Key) => {\n    let newExpandedKeys = toggleTreeNode(\n      tree as Collection<Node<T>>,\n      expandedKeys,\n      key\n    );\n    if (childExpansionBehaviour === \"single\") {\n      const expandedSiblings = getSiblings(tree, key).filter(\n        (aKey) => aKey !== key && expandedKeys.has(aKey)\n      );\n      newExpandedKeys = expandedSiblings.reduce((expandedKeys, expandedKey) => {\n        return toggleTreeNode(\n          tree as Collection<Node<T>>,\n          expandedKeys,\n          expandedKey\n        );\n      }, newExpandedKeys);\n    }\n    setExpandedKeys(newExpandedKeys);\n  };\n\n  return {\n    collection: tree as Collection<Node<T>>,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n    selectionManager,\n  };\n}\n\nfunction getChildItems<T>(node: Node<T>): Node<T>[] {\n  const childNodes = [...(node.childNodes || [])];\n  const childItems = childNodes.filter(({ type }) => type === \"item\");\n  const sectionItems = childNodes.filter(({ type }) => type === \"section\");\n\n  return childItems.concat(sectionItems.flatMap(getChildItems));\n}\n\nfunction getRootItemKeys(tree: TreeCollection<unknown>) {\n  return tree.rootKeys\n    .map((key) => tree.getItem(key))\n    .filter(notNull)\n    .flatMap(getChildItems)\n    .map(({ key }) => key);\n}\n/**\n * Returns the siblings of an item in tree, ignoring sections.\n * Disclaimer: The code is done quick and dirty and in a rush. Unpleasant code, good candidate for refactoring :D\n */\nfunction getSiblings(tree: TreeCollection<unknown>, key: Key): Key[] {\n  const parentKey = tree.getItem(key)?.parentKey;\n  if (!parentKey) {\n    return [...tree.rootKeys].concat(getRootItemKeys(tree));\n  }\n  let parent = parentKey ? tree.getItem(parentKey) : null;\n  if (parent?.type === \"item\") {\n    return getChildItems(parent).map(({ key }) => key);\n  }\n  const siblings: Key[] = [];\n  while (parent) {\n    siblings.push(...getChildItems(parent).map(({ key }) => key));\n    if (parent.type === \"section\") {\n      if (parent.parentKey) {\n        parent = tree.getItem(parent.parentKey);\n      } else {\n        siblings.push(...getRootItemKeys(tree));\n        parent = null;\n      }\n    } else {\n      parent = null;\n    }\n  }\n  return Array.from(new Set(siblings));\n}\nfunction toggleTreeNode(\n  tree: Collection<Node<unknown>>,\n  expandedKeys: Set<Key>,\n  key: Key\n): Set<Key> {\n  // toggling a non-expandable node should be no-op\n  if (!expandedKeys.has(key) && !tree.getItem(key).hasChildNodes) {\n    return expandedKeys;\n  }\n  const newKeys = toggleKey(expandedKeys, key);\n  // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n  // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n  for (const aKey of newKeys) {\n    if (tree.getItem(aKey) == null) {\n      newKeys.delete(aKey);\n    }\n  }\n\n  // If we are toggling it open, expand all expandable single-child items\n  if (newKeys.has(key)) {\n    for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n      newKeys.add(aKey);\n    }\n  }\n  return newKeys;\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeSelectionManager } from \"./TreeSelectionManager\";\nimport { TreeCollection } from \"./useTreeState\";\n\nexport interface TreeRefValue {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n\n  /**\n   * Extends selection to all siblings of the currently focused node.\n   */\n  expandSelection(): void;\n  /**\n   * Shrinks selection towards currently focused node.\n   */\n  shrinkSelection(): void;\n\n  expandAll(): void;\n  collapseAll(): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef<T extends {}>(\n  props: {\n    tree: TreeCollection<T>;\n    selectionManager: TreeSelectionManager;\n    setExpandedKeys: (keys: Set<Key>) => void;\n  },\n  forwardedRef?: ForwardedRef<TreeRefValue>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n        expandSelection() {\n          latestState.current.selectionManager.expandSelection();\n        },\n        shrinkSelection() {\n          latestState.current.selectionManager.shrinkSelection();\n        },\n        expandAll() {\n          latestState.current.setExpandedKeys(\n            latestState.current.tree.getAllExpandableKeys()\n          );\n        },\n        collapseAll() {\n          const { tree, setExpandedKeys, selectionManager } =\n            latestState.current;\n          const focusedKey = selectionManager.focusedKey;\n          setExpandedKeys(new Set());\n\n          // Find the root node that is a grandparent of focused node, and focus/select it.\n          // NOTE: this behaviour of updating selection when nodes are collapsed is something to be fixed in general,\n          // and then this custom logic here would be not necessary.\n          if (focusedKey && !tree.rootKeys.includes(focusedKey)) {\n            let item = tree.getItem(focusedKey);\n            while (item?.parentKey != null) {\n              item = tree.getItem(item.parentKey);\n            }\n            if (item) {\n              selectionManager.setFocusedKey(item.key);\n              if (selectionManager.isSelected(focusedKey)) {\n                selectionManager.select(item.key);\n              }\n            }\n          }\n        },\n      };\n    },\n    []\n  );\n}\n","import { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect, Size } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  doBuildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    /**\n     * The only difference here is that in tree, we need to use getKeys() to get the keys for a flattened list of items\n     * that are currently visible. With this difference only, things seem to work as expected, but sections are not\n     * tested, and not even sure if they would be applicable for Tree view.\n     * Diff compared to ListView#BuildCollection:\n     * -        for (let node of this.collection) {\n     * +        const visibleNodes = [...this.collection.getKeys()].map(key => this.collection.getItem(key));\n     * +        for (let node of visibleNodes) {\n     * This needs to be maintained with version upgrades, until TreeLayout is supported:\n     * https://github.com/adobe/react-spectrum/issues/2396\n     */\n    const visibleNodes = [...this.collection.getKeys()].map((key) =>\n      this.collection.getItem(key)\n    );\n    for (let node of visibleNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(\n        0,\n        y,\n        this.virtualizer.visibleRect.width,\n        this.loaderHeight ?? this.virtualizer.visibleRect.height\n      );\n      let loader = new LayoutInfo(\"loader\", \"loader\", rect);\n      this.layoutInfos.set(\"loader\", loader);\n      nodes.push({ layoutInfo: loader });\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      let rect = new Rect(\n        0,\n        y,\n        this.virtualizer.visibleRect.width,\n        this.placeholderHeight ?? this.virtualizer.visibleRect.height\n      );\n      let placeholder = new LayoutInfo(\"placeholder\", \"placeholder\", rect);\n      this.layoutInfos.set(\"placeholder\", placeholder);\n      nodes.push({ layoutInfo: placeholder });\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new Size(\n      this.virtualizer.visibleRect.width,\n      y + this.padding\n    );\n    return nodes;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { RefObject } from \"react\";\nimport {\n  ActionDefinition,\n  CommonActionId,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TreeRefValue } from \"@intellij-platform/core/Tree\";\n\n/**\n * Returns action definitions object for common tree actions\n * TODO: add example in docs\n */\nexport function useTreeActions({\n  treeRef,\n}: {\n  treeRef: RefObject<TreeRefValue>;\n}): Array<ActionDefinition> {\n  return [\n    {\n      id: CommonActionId.EXPAND_ALL,\n      title: \"Expand All\",\n      icon: <PlatformIcon icon=\"actions/expandall\" />,\n      actionPerformed: () => {\n        treeRef.current?.expandAll();\n      },\n    },\n    {\n      id: CommonActionId.COLLAPSE_ALL,\n      title: \"Collapse All\",\n      icon: <PlatformIcon icon=\"actions/collapseall\" />,\n      actionPerformed: () => {\n        treeRef.current?.collapseAll();\n      },\n    },\n    {\n      id: CommonActionId.EXPAND_SELECTION,\n      title: \"Expand Selection\",\n      actionPerformed: () => {\n        treeRef.current?.expandSelection();\n      },\n    },\n    {\n      id: CommonActionId.SHRINK_SELECTION,\n      title: \"Shrink Selection\",\n      // TODO: disable if selection is only one item. Would need more data from treeRef. Maybe after treeRef is refactored\n      //  to implement/extend CollectionRef\n      actionPerformed: () => {\n        treeRef.current?.shrinkSelection();\n      },\n    },\n  ];\n}\n","import { Key } from \"react\";\n\ninterface SetState<T> {\n  items: Iterable<T>;\n\n  toggle(key: T): void;\n\n  add(...key: T[]): void;\n\n  delete(...key: T[]): void;\n}\n\nexport type SelectionState = \"NotSelected\" | \"Selected\" | \"PartiallySelected\";\n\nexport interface TreeModel<T, K = Key> {\n  rootNodes: ReadonlyArray<T>;\n  getChildren: (root: T) => ReadonlyArray<T> | /*for convenience*/ T | null;\n  getKey: (item: T) => K;\n}\n\nexport interface NestedSelectionState<T> {\n  getSelectionState: (item: T) => SelectionState;\n  toggle: (item: T) => void;\n}\n\nconst collectSelectableItems = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>\n) => {\n  const collectedItems: T[] = [];\n  collectSelectableItemsRecursive(item, getChildren, collectedItems);\n  return collectedItems;\n};\nconst collectSelectableItemsRecursive = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>,\n  collectedItems: T[] = []\n) => {\n  const children = getChildren(item);\n  if (children == null) {\n    collectedItems.push(item);\n  } else {\n    children.forEach((child) =>\n      collectSelectableItemsRecursive(child, getChildren, collectedItems)\n    );\n  }\n};\n\n// TODO: maybe change the interface to work with keys instead of items?\nexport class NestedSelection<T extends object, K = Key>\n  implements NestedSelectionState<T>\n{\n  cache = new WeakMap<T, SelectionState>();\n  constructor(private state: SetState<K>, private tree: TreeModel<T, K>) {\n    this.tree = tree;\n    this.state = state;\n  }\n\n  toggle(item: T) {\n    const children = this.tree.getChildren(item);\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    if (isSelectableNode) {\n      this.state.toggle(key);\n    } else {\n      const state = this.getSelectionState(item);\n      const itemsInSubtree = collectSelectableItems(item, (item) =>\n        normalizeChildren(this.tree.getChildren(item))\n      ).map(this.tree.getKey);\n      if (state === \"Selected\") {\n        this.state.delete(...itemsInSubtree);\n      } else {\n        this.state.add(...itemsInSubtree);\n      }\n    }\n  }\n\n  getSelectionState(item: T): SelectionState {\n    // caching can be refactored into a nice little decorator like WeakMapCached which would be applicable on a method\n    // with a single object argument.\n    const cachedState = this.cache.get(item);\n    if (cachedState) {\n      return cachedState;\n    }\n    const children = normalizeChildren(this.tree.getChildren(item));\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    let state: SelectionState;\n    if (isSelectableNode) {\n      state = [...this.state.items].includes(key) ? \"Selected\" : \"NotSelected\";\n    } else {\n      const allDescendantsStates = children.map((child) =>\n        this.getSelectionState(child)\n      );\n      if (allDescendantsStates.every((state) => state === \"NotSelected\")) {\n        state = \"NotSelected\";\n      } else {\n        state = allDescendantsStates.every((state) => state === \"Selected\")\n          ? \"Selected\"\n          : \"PartiallySelected\";\n      }\n    }\n    this.cache.set(item, state);\n    return state;\n  }\n}\n\nfunction normalizeChildren<T>(children: T | ReadonlyArray<T> | null) {\n  if (children) {\n    return ([] as ReadonlyArray<T>).concat(children);\n  }\n  return null;\n}\n","import React, { ForwardedRef } from \"react\";\nimport {\n  SpeedSearchTree,\n  SpeedSearchTreeProps,\n  TreeRefValue,\n} from \"@intellij-platform/core/Tree\";\nimport { NestedSelectionState } from \"./NestedSelection\";\n\n/**\n * Experimental wrapper component around SpeedSearchTree, which allows rendering {@link TreeNodeCheckbox} in nodes.\n *\n * See [design-decisions.md](../Tree/design-decisions.md) for more thoughts about how should different features\n * like this be supported.\n *\n * @alpha\n */\nexport const SpeedSearchTreeWithCheckboxes = React.forwardRef(\n  <T extends object>(\n    {\n      nestedSelection,\n      cacheInvalidation,\n      onNodeKeyDown,\n      ...props\n    }: SpeedSearchTreeProps<T> & {\n      nestedSelection: NestedSelectionState<T>;\n    },\n    ref: ForwardedRef<HTMLDivElement>\n  ): React.ReactElement => {\n    const otherInvalidators =\n      typeof cacheInvalidation === \"object\"\n        ? cacheInvalidation.invalidators\n        : [];\n    return (\n      <SpeedSearchTree\n        ref={ref}\n        {...props}\n        // instead of passing cacheInvalidation, a better approach could be to provide nestedSelection as context.\n        cacheInvalidation={{\n          invalidators: [nestedSelection, ...otherInvalidators],\n        }}\n        onNodeKeyDown={(event, item) => {\n          if (event.key === \" \") {\n            nestedSelection.toggle(item.value);\n          }\n          onNodeKeyDown?.(event, item);\n        }}\n      />\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { Checkbox } from \"@intellij-platform/core/Checkbox\";\nimport { TreeContext } from \"@intellij-platform/core/Tree/TreeContext\";\nimport { SelectionState } from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport styled from \"styled-components\";\n\nexport type TreeNodeCheckboxProps<T extends unknown> = {\n  selectionState?: SelectionState;\n  selectItemOnPress?: boolean;\n  onToggle: () => void;\n  // maybe a isDisabled prop to be merged with isDisabled from the item?\n};\n\nconst StyledCheckboxWrapper = styled.span`\n  margin-right: 0.125rem;\n  display: inline-flex;\n`;\n\n/**\n * Checkbox to be used with {@link SpeedSearchTreeWithCheckboxes}. `SpeedSearchTreeWithCheckboxes` doesn't add the\n * checkboxes by default to the nodes, which makes it more flexible in terms of which nodes should have checkbox, or\n * it's exact placement within the tree rows.\n *\n * TreeNodeCheckbox renders a Checkbox with a few extras:\n * - `aria-label` set based on the encompassing item's textValue\n * - `isSelected` and `isIndeterminate` set based on `selectionState`\n * - `isDisabled` is set based in disabled state of the item.\n * - The encompassing item will be selected upon press, if `selectItemOnPress` is `true` (default is `true`).\n * - Small styling adjustment achieved by a wrapper StyledListIconWrapper.\n *\n * @see SpeedSearchTreeWithCheckboxes\n * @see useNestedSelectionState\n *\n * NOTE: this component currently uses TreeContext, to get a hold of selectionManager. If a more abstract component\n * like CollectionCheckbox is needed in the future, we can refactor TreeContext also to something more abstract like\n * CollectionContext which is provided by all such components like List, Tree or Table.\n */\nexport const TreeNodeCheckbox = <T extends unknown>({\n  selectionState,\n  onToggle,\n  selectItemOnPress = true,\n}: TreeNodeCheckboxProps<T>) => {\n  const treeContext = useContext(TreeContext);\n  const itemContext = useContext(ItemStateContext);\n  if (!itemContext) {\n    throw new Error(\"TreeNodeCheckbox is rendered outside tree nodes.\");\n  }\n\n  return (\n    <StyledCheckboxWrapper>\n      <Checkbox\n        preventFocus\n        aria-label={`Select ${itemContext.node.textValue}`}\n        isSelected={selectionState === \"Selected\"}\n        isIndeterminate={selectionState === \"PartiallySelected\"}\n        isDisabled={itemContext.isDisabled}\n        onChange={() => {\n          onToggle();\n          // this if and the whole need for treeContext could be avoided if event.stopPropagation() was not hard coded\n          // in useToggle: https://github.com/adobe/react-spectrum/blob/0d007bca9417c4b7b86fafd5842871bf997bd4c0/packages/@react-aria/toggle/src/useToggle.ts#L46\n          // An improvement could be to replace Checkbox with CheckboxIcon, and simply handle press on it (potential TODO)\n          if (treeContext && itemContext && selectItemOnPress) {\n            treeContext.state.selectionManager.setFocusedKey(\n              itemContext.node.key\n            );\n            treeContext.state.selectionManager.setFocused(true);\n            treeContext.state.selectionManager.setSelectedKeys([\n              itemContext.node.key,\n            ]);\n          }\n        }}\n      />\n    </StyledCheckboxWrapper>\n  );\n};\n","import { Key, useMemo } from \"react\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { useControllableSet } from \"@intellij-platform/core/utils/useSet\";\nimport {\n  NestedSelection,\n  NestedSelectionState,\n  TreeModel,\n} from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\n\n/**\n * A state management util for a selectable list of items with an arbitrary nested grouping. In other words,\n * it manages selection of leaves in a tree.\n *\n * tree is represented as a `getChildren` function that returns children for a given root. if null is passed it\n * returns the top level nodes.\n * Important Note: the tree structure that can be generated by calling `getChildren` function is supposed to be\n * **immutable**. in other words, any change in the tree, should result in a new array of top level items.\n */\n\nexport const useNestedSelectionState = <T extends object, K = Key>(\n  tree: TreeModel<T, K>,\n  {\n    selectedKeys: selectedKeysProp,\n    defaultSelectedKeys,\n    onSelectedKeysChange,\n  }: ControlledStateProps<{\n    selectedKeys: Set<K>;\n  }>\n): NestedSelectionState<T> => {\n  const [selectedKeys, selectedKeysSetter] = useControllableSet(\n    selectedKeysProp!, // bad typing in useControlledState\n    defaultSelectedKeys || new Set(),\n    onSelectedKeysChange! // bad typing in useControlledState\n  );\n  const treeRef = useLatest(tree);\n\n  return useMemo(\n    () =>\n      new NestedSelection<T, K>(\n        { items: selectedKeys, ...selectedKeysSetter },\n        treeRef.current\n      ),\n    [selectedKeys, tree.rootNodes]\n  );\n};\n","import {\n  LayoutNode,\n  ListLayout,\n  ListLayoutOptions,\n} from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport {\n  InvalidationContext,\n  LayoutInfo,\n  Rect,\n  Size,\n} from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n  private dividerHeight: number = 2;\n\n  constructor(options: ListLayoutOptions<T> & { dividerHeight?: number }) {\n    super(options);\n    if (options.dividerHeight != undefined) {\n      this.dividerHeight = options.dividerHeight;\n    }\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    if (node.type === \"divider\") {\n      return this.buildDivider(node, x, y);\n    }\n    return super.buildNode(node, x, y);\n  }\n\n  buildDivider(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.dividerHeight;\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = false;\n    return {\n      layoutInfo,\n      // validRect: layoutInfo.rect,\n    };\n  }\n\n  /**\n   * Allows for overriding buildCollection in a sub-class\n   */\n  protected doBuildCollection() {\n    return super.buildCollection();\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = this.doBuildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n\n      ///////////////////////////////////////////////////// MODIFICATION ///////////////////////////////////////////////\n      // Fixing https://github.com/adobe/react-spectrum/issues/4391\n      if (\n        options.selectOnFocus &&\n        (autoFocus === \"first\" || autoFocus === \"last\")\n      ) {\n        manager.replaceSelection(focusedKey);\n      }\n      /////////////////////////////////////////////////// END OF MODIFICATION //////////////////////////////////////////\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import { useSelectableItem as useOriginalSelectableItem } from \"@react-aria/selection\";\nimport { MouseEventHandler } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\n/**\n * A wrapper around useSelectableItem, which adjusts for intellij platform nuances:\n * - Selects item with right clicks as well, which allows ContextMenuContainer to be used with any collection component\n *   without the need for built-in context-menu support in such components. We won't need this if we move to a built-in\n *   context-menu support for List,Tree, etc.\n * @private\n */\nexport const useSelectableItem: typeof useOriginalSelectableItem = (\n  options\n) => {\n  const onContextMenu: MouseEventHandler<HTMLElement> = (e) => {\n    if (!options.selectionManager.isSelected(options.key)) {\n      options.selectionManager.select(options.key, {\n        type: \"press\",\n        pointerType: \"mouse\",\n        target: e.currentTarget,\n        shiftKey: e.shiftKey,\n        metaKey: e.metaKey,\n        ctrlKey: e.ctrlKey,\n        altKey: e.altKey,\n      });\n    }\n  };\n  const result = useOriginalSelectableItem(options);\n  return {\n    ...result,\n    itemProps: mergeProps(result.itemProps, { onContextMenu }),\n  };\n};\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\nexport type FocusScopeRef = { focus: (forceFocusFirst?: boolean) => void };\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<FocusScopeRef>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (forceFocusFirst?: boolean) => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        if (forceFocusFirst) {\n          return focusManager.focusFirst();\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","/**\n * Properly typed filter function for filtering out null/undefined items in array.\n */\nexport const notNull = <T>(\n  item: T | undefined | null\n): item is NonNullable<T> => item != null;\n","/**\n * IMPORTANT: this is a copy of a non-exported file from @react-aria/interactions\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { runAfterTransition } from \"@react-aria/utils\";\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\ntype State = \"default\" | \"disabled\" | \"restoring\";\n\nlet state: State = \"default\";\nlet savedUserSelect = \"\";\n\nexport function disableTextSelection() {\n  if (state === \"default\") {\n    savedUserSelect = document.documentElement.style.webkitUserSelect;\n    document.documentElement.style.webkitUserSelect = \"none\";\n  }\n\n  state = \"disabled\";\n}\n\nexport function restoreTextSelection() {\n  // If the state is already default, there's nothing to do.\n  // If it is restoring, then there's no need to queue a second restore.\n  if (state !== \"disabled\") {\n    return;\n  }\n\n  state = \"restoring\";\n\n  // There appears to be a delay on iOS where selection still might occur\n  // after pointer up, so wait a bit before removing user-select.\n  setTimeout(() => {\n    // Wait for any CSS transitions to complete so we don't recompute style\n    // for the whole page in the middle of the animation and cause jank.\n    runAfterTransition(() => {\n      // Avoid race conditions\n      if (state === \"restoring\") {\n        if (document.documentElement.style.webkitUserSelect === \"none\") {\n          document.documentElement.style.webkitUserSelect =\n            savedUserSelect || \"\";\n        }\n\n        savedUserSelect = \"\";\n        state = \"default\";\n      }\n    });\n  }, 300);\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { disableTextSelection, restoreTextSelection } from \"./textSelection\";\nimport { useLatest } from \"../useLatest\";\n\n/**\n * To be used with {@link UseMoveOptions#canMoveStart} to allow\n * the move to start only on whitespaces. Does that by checking if the\n * element is an HTMLElement with all children being Elements.\n * This logic almost always detects the whitespaces properly, because if mouse\n * was pressed on a piece of text, the event target would have been that element.\n */\nexport function isEventOnEmptySpaces({\n  target,\n  currentTarget,\n}: React.MouseEvent) {\n  return (\n    currentTarget === target ||\n    (target instanceof HTMLElement &&\n      [...target.childNodes].every((child) => child instanceof HTMLElement))\n  );\n}\n\nexport type XY = { x: number; y: number };\nexport type UseMoveOptions<S> = {\n  /**\n   * the amount of movement (in pixels) after which the move should start. It prevents interference\n   * with simple click (or more generally, press) events, and provides better UX.\n   * @default 0\n   */\n  dragThreshold?: number;\n  disabled?: boolean;\n  /**\n   * Whether the move should be initiated from a mouse down event.\n   * Note: regardless of the value of this option, the move won't start when interactive elements like buttons\n   * are being pressed.\n   * @see isEventOnEmptySpaces\n   * @example\n   * ```ts\n   * // Don't move when children are being dragged.\n   * useMove({ canMoveStart: e => e.target === e.currentTarget });\n   * ```\n   *\n   * @example\n   * ```ts\n   * // move when empty spaces are being dragged.\n   * useMove({ canMoveStart: isEventOnEmptySpaces });\n   * ```\n   */\n  canMoveStart?: (eventTarget: React.MouseEvent) => boolean;\n  onMoveStart: (args: { from: XY }) => S;\n  onMove: (args: { from: XY; to: XY; movement: XY; startState: S }) => void;\n  onMoveEnd?: (args: { startState: S }) => void;\n};\n\n// TODO: cleanup if unmount happens during drag.\n// TODO: Better even handling for touch devices?\n//  wrapping `useMove` from react-aria to just add support for movement threshold should be the\n//  way to go, but there are a few problems:\n//    - it seemed a little buggy in the example here: https://react-spectrum.adobe.com/react-aria/useMove.html\n//    - the API is not great in a sense that it only gives the diff in last movement.\n//      Also onMoveStart doesn't give the initial position, so it's not possible to even calculate\n//\n// TODO: move should be finished by pressing Escape. onMoveCancel maybe?\n/**\n * Similar to https://react-spectrum.adobe.com/react-aria/useMove.html, with slightly different\n * features and API.\n * NOTE: initially the API was designed in a way that onMove and onMove end callbacks were\n * returned from onMoveStart, instead of being directly passed in the options.\n * This would enable capturing the initial state of each move transaction, by defining whatever\n * variable in onMoveStart and closing over them by onMove and onMoveEnd.\n * The problem with this approach was that although you could capture the initial state of the\n * movement, by closure, any other variable in the outer scopes was also closed over, and you were\n * stuck with the values from the particular render in which the movement was started.\n * Of course, you could work around it by using refs, but it would be unintuitive.\n * So because of that issue, it's redesigned to have onMoveStart, onMove, and onMoveEnd all\n * directly passed as options, but you can return anything from `onMoveStart` which will be passed\n * to onMove and onMoveEnd as `startState`.\n */\nexport function useMove<S>({\n  dragThreshold = 0,\n  disabled,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  canMoveStart = () => true,\n}: UseMoveOptions<S>): { onMouseDown?: MouseEventHandler } {\n  const handlersRef = useLatest({ onMove, onMoveEnd });\n\n  const onMouseDown = (event: React.MouseEvent) => {\n    if (event.button !== 0 || !canMoveStart(event)) {\n      return;\n    }\n    disableTextSelection();\n    const from = { x: event.pageX, y: event.pageY };\n    let dragStarted = false;\n    let startState: S;\n\n    const onMouseMove = (event: MouseEvent) => {\n      const { pageX: x, pageY: y } = event;\n      const movement = { x: x - from.x, y: y - from.y };\n      const isDraggedEnough =\n        Math.abs(movement.x) >= dragThreshold ||\n        Math.abs(movement.y) >= dragThreshold;\n      if (isDraggedEnough && !dragStarted) {\n        dragStarted = true;\n        startState = onMoveStart({ from });\n      }\n      if (dragStarted) {\n        handlersRef.current.onMove({\n          from,\n          to: { x: from.x + movement.x, y: from.y + movement.y },\n          movement,\n          startState,\n        });\n      }\n    };\n    document.addEventListener(\"mousemove\", onMouseMove);\n\n    document.addEventListener(\n      \"mouseup\",\n      () => {\n        restoreTextSelection();\n        if (dragStarted) {\n          handlersRef.current.onMoveEnd?.({ startState });\n        }\n        document.removeEventListener(\"mousemove\", onMouseMove);\n      },\n      { once: true }\n    );\n  };\n  return disabled ? {} : { onMouseDown };\n}\n","import React from \"react\";\nimport { isMac } from \"@react-aria/utils\";\n\n/**\n * TODO: The current name is not accurate, and can be confusing. Rename to something better.\n */\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n\nexport function hasAnyModifier(e: KeyboardEvent | React.KeyboardEvent) {\n  return e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n}\n","import { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport interface OverflowObserverRecord {\n  target: Element;\n  overflowedElements: Element[];\n  previouslyOverflowedElements: Element[];\n}\n\nexport type OverflowObserverCallback = (\n  change: OverflowObserverRecord,\n  observer: OverflowObserver\n) => void;\n\n/**\n * Allows observing the list of overflowing children of a given target element.\n * An `IntersectionObserver` is created for each target to observe the intersection between the target and each child\n * element. The child elements are observed/unobserved by the intersection observer as they are added/removed to the\n * DOM, which is observed using a `MutationObserver`.\n * `IntersectionObserver` options such as `rootMargin` are supported, to fine tune what should be considered as\n * overflowed.\n *\n * TODO: add a takeRecords method to allow processing pending mutations before disconnect\n * TODO: maybe add direction option?\n *\n */\nexport class OverflowObserver {\n  private mutationObserver: MutationObserver;\n  private data: Map<\n    Element,\n    {\n      intersectionObserver: IntersectionObserver;\n      currentOverflowElements: Element[];\n    }\n  > = new Map();\n\n  constructor(private callback: OverflowObserverCallback) {\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n        if (!(target instanceof Element)) {\n          return;\n        }\n        mutation.removedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.unobserve(node);\n          }\n        });\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.observe(node);\n          }\n        });\n      });\n    });\n  }\n\n  observe(target: Element, options: Omit<IntersectionObserverInit, \"root\">) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n\n    const intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        const data = this.data.get(target);\n        const newHiddenElements = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : undefined\n          )\n          .filter(notNull);\n        const newVisibleElements = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : null\n          )\n          .filter(notNull);\n\n        //  Also cover this in Toolbar with a test case\n        const previouslyOverflowedElements =\n          data?.currentOverflowElements || [];\n        const overflowedElements = previouslyOverflowedElements\n          .filter((element) => !newVisibleElements.includes(element))\n          .concat(newHiddenElements)\n          .filter((element) => {\n            // In some cases some elements may be hidden by some styles (e.g. the first/last separator in a toolbar).\n            // It doesn't make sense to report them as overflowed.\n            const isHidden =\n              element instanceof HTMLElement &&\n              element.offsetWidth === 0 &&\n              element.offsetHeight === 0;\n            return !isHidden;\n          });\n        this.callback(\n          {\n            previouslyOverflowedElements,\n            overflowedElements: overflowedElements,\n            target,\n          },\n          this\n        );\n        if (data) {\n          data.currentOverflowElements = overflowedElements;\n        }\n      },\n      {\n        ...options,\n        root: target,\n      }\n    );\n    [...(target?.children || [])].forEach((childElement) => {\n      intersectionObserver.observe(childElement);\n    });\n    this.data.set(target, {\n      intersectionObserver,\n      currentOverflowElements: [],\n    });\n    this.mutationObserver.observe(target, {\n      childList: true,\n    });\n  }\n\n  unobserve(target: Element) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n  }\n\n  disconnect() {\n    [...this.data.values()].forEach(({ intersectionObserver }) =>\n      intersectionObserver.disconnect()\n    );\n    this.data = new Map();\n    this.mutationObserver.disconnect();\n  }\n}\n","import { RefObject, useEffect, useState } from \"react\";\nimport { OverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/OverflowObserver\";\n\n/**\n * Given a ref to a scrollable container, returns the child elements that are not completely visible and\n * are off view because of scroll.\n * @param scrollableContainerRef\n * @param threshold\n */\nexport function useOverflowObserver(\n  scrollableContainerRef: RefObject<HTMLElement>,\n  {\n    threshold = 0.9,\n    rootMargin = \"0px\",\n  }: Omit<IntersectionObserverInit, \"root\"> = {}\n) {\n  const [overflowedElements, setOverflowedElements] = useState<Element[]>([]);\n\n  useEffect(() => {\n    const overflowObserver = new OverflowObserver((change) => {\n      setOverflowedElements(change.overflowedElements);\n    });\n    overflowObserver.observe(scrollableContainerRef.current!, {\n      rootMargin,\n      threshold,\n    });\n    return () => {\n      overflowObserver.disconnect();\n    };\n  }, [\n    /**\n     * It's ok and needed to have the ref value as a dependency here. We don't know if ref is attached to different\n     * elements in each render, and it's ok that it's not a state, since we don't change it, and it's not supposed to\n     * change without a rerender\n     **/\n    scrollableContainerRef.current,\n  ]);\n\n  return {\n    overflowedElements,\n  };\n}\n","import { Key } from \"react\";\nimport { Ord } from \"ramda\";\n\ntype TreeNodeFn<T> = (root: T) => null | readonly T[];\ntype MutableTreeNodeFn<T> = (root: T) => null | T[];\n\ntype Tree<T> = {\n  getChildren: TreeNodeFn<T>;\n  roots: ReadonlyArray<T>;\n};\n\ntype MutableTree<T> = {\n  getChildren: MutableTreeNodeFn<T>;\n  roots: Array<T>;\n};\n\nexport const getExpandAllKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: ReadonlyArray<T>\n) => {\n  const keys: Key[] = roots.map(getKey);\n  const processItem = (node: T | null) => {\n    const children = node ? getChildren(node) : null;\n    if (node == null || !children) {\n      return;\n    }\n    keys.push(getKey(node));\n    children.forEach(processItem);\n  };\n  roots.map(getChildren).flat().forEach(processItem);\n  return keys;\n};\n\nexport const getExpandedToNodesKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: ReadonlyArray<T>,\n  targetNodeKeys: Iterable<Key>\n) => {\n  const targetNodeKeySet = new Set(targetNodeKeys);\n  const expandedKeys: Key[] = [];\n  dfsVisit<T, boolean>(\n    getChildren,\n    (node, childValues) => {\n      const key = getKey(node);\n      const isExpanded: boolean =\n        childValues?.some((childValue) => childValue) ||\n        targetNodeKeySet.has(key);\n      if (isExpanded) {\n        expandedKeys.push(key);\n      }\n      return isExpanded;\n    },\n    roots\n  );\n  return expandedKeys;\n};\n\nexport const dfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, childrenValues: null | R[]) => R,\n  roots: ReadonlyArray<T>\n) => {\n  const dfs = (node: T): R => {\n    const children = getChildren(node);\n    const values = children?.map(dfs) ?? null;\n    return visit(node, values);\n  };\n  roots.forEach(dfs);\n};\n\nexport const bfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, parentValue: R | null) => R,\n  roots: ReadonlyArray<T>\n) => {\n  const bfs: typeof visit = (node, parentValue) => {\n    const result = visit(node, parentValue);\n    const children = getChildren(node);\n    children?.map((childNode) => bfs(childNode, result));\n    return result;\n  };\n  return roots.map((root) => bfs(root, null));\n};\n\nexport const sortTreeNodesInPlace = <T>(\n  by: (t: T) => Ord,\n  tree: MutableTree<T>\n) => {\n  const compareFn = (a: T, b: T) => {\n    const aa = by(a);\n    const bb = by(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  };\n  tree.roots.sort(compareFn);\n  bfsVisit(\n    tree.getChildren,\n    (node) => {\n      const children = tree.getChildren(node);\n      if (children) {\n        children.sort(compareFn);\n      }\n    },\n    tree.roots\n  );\n};\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import { useCallback, useLayoutEffect, useRef } from \"react\";\n\n/**\n * Interim solution for non-reactive callbacks, until\n * [useEvent](https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md) (or whatever it will end up being\n * called), becomes available.\n */\nexport function useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  let ref = useRef<typeof fn>();\n  useLayoutEffect(() => {\n    ref.current = fn;\n  });\n  const callback = ((...args: Parameters<T>) =>\n    ref.current?.apply(null, args)) as T;\n  return useCallback<T>(callback, []);\n}\n","import { FocusEventHandler } from \"react\";\nimport { getFocusableTreeWalker } from \"@react-aria/focus\";\n\n/**\n * Provides a focus management mechanism for a container that doesn't retain focus but forwards it to its focusable\n * descendants. More specifically:\n * - When the container gets focused, it automatically focuses the first focusable child element.\n *   The {@param forwardFocus} parameter can be used to customize which element should receive focus.\n * - By default, focus is prevented from returning to the container itself when focus is being moved from a descendant\n *   to the container. {@param ignoreFocusedDescendant} can be set to `true`, to disable this behaviour.\n *   If {@param ignoreFocusedDescendant} is true, focus will be forcibly moved to the first element (or the element\n *   specified by {@param forwardFocus}) when the container gets focused.\n *\n * NOTE: This hook does not make the container element focusable. It only returns the focus event handler that should be\n * passed to the container.\n */\nexport function useFocusForwarder({\n  forwardFocus,\n  ignoreFocusedDescendant = false,\n}: {\n  /**\n   * Called when the container gets focused, to forward focus to the appropriate focusable child element.\n   * If not passed, focus is forwarded to the first focusable element, by default.\n   */\n  forwardFocus?: () => void;\n  ignoreFocusedDescendant?: boolean;\n} = {}) {\n  const onFocus: FocusEventHandler = (event) => {\n    if (event.target !== event.currentTarget) {\n      // only when this container is focused. not when anything inside is focused.\n      return;\n    }\n    const possiblyBlurredElement = event.relatedTarget;\n    if (\n      possiblyBlurredElement instanceof Element &&\n      event.currentTarget?.contains(possiblyBlurredElement) &&\n      !ignoreFocusedDescendant\n    ) {\n      // If anything inside the content is being blurred while the container is getting focused, we don't let focus\n      // go from that element, to the container.\n      if (possiblyBlurredElement instanceof HTMLElement) {\n        possiblyBlurredElement.focus();\n      }\n      return;\n    }\n    if (forwardFocus) {\n      forwardFocus();\n    } else {\n      (\n        getFocusableTreeWalker(event.currentTarget).firstChild() as HTMLElement\n      )?.focus();\n    }\n  };\n  return { focusForwarderProps: { onFocus } };\n}\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useLayoutEffect, useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos = { clientX: 0, clientY: 0 };\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = ({ clientX, clientY }) => {\n        lastMouseClientPos = { clientX, clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (options.isOpen && targetRef.current) {\n      targetRef.current.style.left = `${lastMouseClientPos.clientX}px`;\n      targetRef.current.style.top = `${lastMouseClientPos.clientY}px`;\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e?: React.MouseEvent) => {\n      if (targetRef.current && e) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export class ImmutableSet<T> implements ReadonlySet<T> {\n  readonly size: number;\n  private readonly set: ReadonlySet<T>;\n\n  constructor(values: Iterable<T>) {\n    this.set = new Set(values);\n    this.size = this.set.size;\n  }\n\n  add(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.add(item);\n      });\n    });\n  }\n\n  delete(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.delete(item);\n      });\n    });\n  }\n\n  toggle(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        if (!newValue.delete(item)) {\n          newValue.add(item);\n        }\n      });\n    });\n  }\n\n  clear(): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      newValue.clear();\n    });\n  }\n\n  private setValueWithMutation(\n    mutate: (newValue: Set<T>) => void\n  ): ImmutableSet<T> {\n    const newValue = new Set(this.set);\n    mutate(newValue);\n    return new ImmutableSet(newValue);\n  }\n\n  ////////////////////////////////////////////////// delegated methods /////////////////////////////////////////////////\n  forEach(...args: Parameters<ReadonlySet<T>[\"forEach\"]>): void {\n    return this.set.forEach(...args);\n  }\n\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { useControlledState } from \"@react-stately/utils\";\nimport { useMemo } from \"react\";\nimport { ImmutableSet } from \"./immutableSet\";\n\n/**\n * Creates map interface out of a setter of form (currentValue: Map) => Map\n * Use {@link useControllableSet} instead if you need a Set state in a React component.\n * This is useful for use outside React components, such as state management libraries.\n */\nexport const createSetInterface = <T>(\n  set: (value: (prevState: Set<T>) => Set<T>) => void\n) => ({\n  add: (...values: T[]) =>\n    set(\n      (currentValue) => new Set(new ImmutableSet(currentValue).add(...values))\n    ),\n  delete: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).delete(...values))\n    ),\n  clear: () =>\n    set((currentValue) => new Set(new ImmutableSet(currentValue).clear())),\n  toggle: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).toggle(...values))\n    ),\n});\n\nfunction useStateSetterForSet<T>(\n  setValue: (value: (prevState: Set<T>) => Set<T>, ...args: any[]) => void\n) {\n  return useMemo(() => createSetInterface(setValue), [setValue]);\n}\n\n/**\n * controllable state management for a Set. returns a tuple containing the value and an object with Set functions on it,\n * which would update the state.\n */\nexport const useControllableSet = <T>(\n  valueProp: Set<T> | undefined,\n  defaultValue: Set<T> = new Set(),\n  onChange: ((newValue: Set<T>) => void) | undefined\n) => {\n  const [value, setValue] = useControlledState(\n    valueProp!, // bad typing in useControlledState\n    defaultValue,\n    onChange! // bad typing in useControlledState\n  );\n\n  // @ts-expect-error FIXME https://github.com/adobe/react-spectrum/issues/2320\n  return [value, useStateSetterForSet(setValue)] as const;\n};\n","import React from \"react\";\nimport Markdown from \"markdown-to-jsx\";\n// @ts-expect-error ¯\\_(ツ)_/¯\nimport { DocgenInfo } from \"@storybook/addon-docs/dist/ts3.9/lib/docgen/types\";\nimport MDXComponents from \"@theme/MDXComponents\";\nimport { parse } from \"jsdoc-parse-plus\";\n// import { ApiModel, ApiPackage } from \"@microsoft/api-extractor-model\";\n\n// const apiModel: ApiModel = new ApiModel();\n// language=file-reference\n// const apiPackage: ApiPackage = apiModel.loadPackage(\n//   \"../../../jui/temp/core.api.json\"\n// );\n// console.log(\"apiPackage\", ApiPackage);\n\ntype WithDocGenInfo<T = any> = T & {\n  __docgenInfo?: DocgenInfo;\n};\n/**\n * Renders description (aka Summary) of an exported symbol, from it's jsdoc (tsdoc) comment block.\n * The plan is to use the ApiModel created by @microsoft/api-extractor, but there are issues preventing that at the\n * moment. So we are using a fallback implementation which relies on `react-docgen` babel plugin which adds\n * `__docgetInfo` property to all exports.\n */\nexport const ApiDescription = ({\n  of,\n}: {\n  of:\n    | WithDocGenInfo\n    | {\n        render?: WithDocGenInfo /*for ref forwarding components */;\n      };\n}) => {\n  const docgenInfo = of.render?.__docgenInfo || of.__docgenInfo;\n  if (!docgenInfo?.description) {\n    console.log(\"ApiDescription not found for:\", of);\n    // eslint-disable-next-line no-undef\n    if (process.env.NODE_ENV === \"development\")\n      return (\n        <div style={{ background: \"#ffd7d7\" }}>\n          Could not find API description for:\n          <pre style={{ background: \"none\" }}>\n            {JSON.stringify(of, null, 2)}\n          </pre>\n          See the console.\n        </div>\n      );\n    throw new Error(\"API documentation not found.\");\n  }\n  return (\n    <Markdown options={{ overrides: MDXComponents }}>\n      {deLinkify(docgenInfo.description)}\n    </Markdown>\n  );\n};\n\n/**\n * replaces jsdoc @link tags with inline code. Temporary hack until @microsoft/api-extractor-model is used.\n * Example: {@link something} will be converted to `something`\n */\nconst deLinkify = (description: string) => {\n  const comment = toCommentBlock(description);\n  return (parse(comment, [], (link) => `\\`${link.text}\\``).description as any)\n    ?.value;\n};\n\nconst toCommentBlock = (str: string) =>\n  [\"/**\", ...str.split(\"\\n\").map((line) => `* ${line}`), \"*/\"].join(\"\\n\");\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSvg = styled.svg`\n  position: absolute;\n  width: 24px;\n  left: 50%;\n  bottom: 1rem;\n  transform: translate(-50%, 0) rotate(180deg);\n`;\n\nconst StyledExpandButton = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  bottom: 0;\n  background: linear-gradient(0deg, rgba(255, 255, 255, 1), transparent);\n  cursor: pointer;\n  ${StyledSvg} {\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n  &:hover ${StyledSvg} {\n    opacity: 1;\n  }\n`;\nconst StyledContainer = styled.div<{ expanded: boolean }>`\n  position: relative;\n  max-height: ${({ expanded }) => (expanded ? undefined : \"200px\")};\n`;\n\nexport function Expandable({\n  children,\n  expanded,\n  onExpand,\n  isExpandable,\n  setIsExpandable,\n}: {\n  children: React.ReactNode;\n  expanded: boolean;\n  onExpand: () => void;\n  isExpandable: boolean;\n  setIsExpandable: (isExpandable: boolean) => void;\n}) {\n  const ref = useRef<HTMLDivElement>();\n  useEffect(() => {\n    const expandable = ref.current?.scrollHeight > ref.current?.offsetHeight;\n    if (expandable !== isExpandable) {\n      setIsExpandable(expandable);\n    }\n  });\n  return (\n    <StyledContainer ref={ref} expanded={expanded}>\n      {children}\n      {!expanded && isExpandable && (\n        <StyledExpandButton onClick={onExpand}>\n          <StyledSvg viewBox=\"0 0 50 50\">\n            <path\n              fill=\"none\"\n              stroke=\"#000\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M-20 10 0-10l20 20\"\n              transform=\"translate(25 25)\"\n            />\n          </StyledSvg>\n        </StyledExpandButton>\n      )}\n    </StyledContainer>\n  );\n}\n","/**\n * NOTE: this file is copied from Docusaurus repo, to customize the live code blocks UI, since the exported\n * functionality doesn't allow for the needed customizations.\n * Original file: https://github.com/facebook/docusaurus/blob/main/packages/docusaurus-theme-live-codeblock/src/theme/Playground/index.tsx\n */\n\nimport React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport useIsBrowser from \"@docusaurus/useIsBrowser\";\nimport { LiveEditor, LiveError, LivePreview, LiveProvider } from \"react-live\";\nimport Translate from \"@docusaurus/Translate\";\nimport BrowserOnly from \"@docusaurus/BrowserOnly\";\nimport {\n  ErrorBoundaryTryAgainButton,\n  usePrismTheme,\n} from \"@docusaurus/theme-common\";\nimport ErrorBoundary from \"@docusaurus/ErrorBoundary\";\n\nimport type { Props } from \"@theme/Playground\";\nimport type { Props as ErrorProps } from \"@theme/Error\";\n\nimport styles from \"@docusaurus/theme-live-codeblock/lib/theme/Playground/styles.module.css\";\nimport { Expandable } from \"./Expandable\";\nimport {\n  PlatformIcon,\n  IconButton,\n  ThemeProvider,\n  Theme,\n  ActionTooltip,\n  TooltipTrigger,\n} from \"@intellij-platform/core\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\n\nfunction Header({\n  children,\n  icons,\n}: {\n  children: React.ReactNode;\n  icons?: React.ReactNode;\n}) {\n  return (\n    <div className={clsx(styles.playgroundHeader)} style={{ display: \"flex\" }}>\n      <span style={{ flex: 1 }}>{children}</span>\n      {icons}\n    </div>\n  );\n}\n\nfunction LivePreviewLoader() {\n  // Is it worth improving/translating?\n  return <div>Loading...</div>;\n}\n\nfunction ErrorFallback({ error, tryAgain }: ErrorProps): JSX.Element {\n  return (\n    <div className={styles.errorFallback}>\n      <p>{error.message}</p>\n      <ErrorBoundaryTryAgainButton onClick={tryAgain} />\n    </div>\n  );\n}\n\nfunction Preview() {\n  // No SSR for the live preview\n  // See https://github.com/facebook/docusaurus/issues/5747\n  return (\n    <BrowserOnly fallback={<LivePreviewLoader />}>\n      {() => (\n        <>\n          <ErrorBoundary fallback={(params) => <ErrorFallback {...params} />}>\n            <LivePreview />\n          </ErrorBoundary>\n          <LiveError />\n        </>\n      )}\n    </BrowserOnly>\n  );\n}\n\nfunction ResultWithHeader() {\n  return (\n    <>\n      <Header>\n        <Translate\n          id=\"theme.Playground.result\"\n          description=\"The result label of the live codeblocks\"\n        >\n          Result\n        </Translate>\n      </Header>\n      {/* https://github.com/facebook/docusaurus/issues/5747 */}\n      <div className={styles.playgroundPreview}>\n        <Preview />\n      </div>\n    </>\n  );\n}\n\nfunction ThemedLiveEditor({\n  expanded,\n  isExpandable,\n  onExpand,\n  setIsExpandable,\n}: {\n  expanded: boolean;\n  isExpandable: boolean;\n  onExpand: () => void;\n  setIsExpandable: (expandable: boolean) => void;\n}) {\n  const isBrowser = useIsBrowser();\n  return (\n    <Expandable\n      expanded={expanded}\n      isExpandable={isExpandable}\n      onExpand={onExpand}\n      setIsExpandable={setIsExpandable}\n    >\n      <LiveEditor\n        // We force remount the editor on hydration,\n        // otherwise dark prism theme is not applied\n        key={String(isBrowser)}\n        className={styles.playgroundEditor}\n      />\n    </Expandable>\n  );\n}\n\nfunction EditorWithHeader() {\n  const [expanded, setExpanded] = useState(false);\n  const [expandable, setExpandable] = useState(false);\n  return (\n    <>\n      <Header\n        icons={\n          <ThemeProvider theme={new Theme(lightThemeJson as any)}>\n            {(expanded || expandable) && (\n              <TooltipTrigger\n                tooltip={\n                  <ActionTooltip\n                    actionName={expanded ? \"Collapse code\" : \"Expand code\"}\n                  />\n                }\n              >\n                <IconButton\n                  onPress={() => setExpanded((expanded) => !expanded)}\n                >\n                  <PlatformIcon\n                    icon={\n                      expanded ? \"actions/collapseall\" : \"actions/expandall\"\n                    }\n                  />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </ThemeProvider>\n        }\n      >\n        <Translate\n          id=\"theme.Playground.liveEditor\"\n          description=\"The live editor label of the live codeblocks\"\n        >\n          Live Editor\n        </Translate>\n      </Header>\n      <ThemedLiveEditor\n        expanded={expanded}\n        onExpand={() => setExpanded(true)}\n        isExpandable={expandable}\n        setIsExpandable={setExpandable}\n      />\n    </>\n  );\n}\n\nexport default function Playground({\n  children,\n  transformCode,\n  ...props\n}: Props): JSX.Element {\n  const prismTheme = usePrismTheme();\n\n  const noInline = props.metastring?.includes(\"noInline\") ?? false;\n\n  return (\n    <>\n      <div className={styles.playgroundContainer}>\n        <LiveProvider\n          code={children.replace(/\\n$/, \"\")}\n          noInline={noInline}\n          transformCode={transformCode ?? ((code) => `${code};`)}\n          theme={prismTheme}\n          {...props}\n        >\n          <ResultWithHeader />\n          <EditorWithHeader />\n        </LiveProvider>\n      </div>\n    </>\n  );\n}\n","import { styled } from \"../styled\";\n\nexport const SpeedSearchContainer = styled.div`\n  position: relative;\n  overflow: visible;\n  max-height: 100%;\n`;\n","import styled from \"styled-components\";\nimport { SpeedSearchContainer } from \"../SpeedSearch/SpeedSearchContainer\";\n\nexport const CollectionSpeedSearchContainer = styled(SpeedSearchContainer)<{\n  fillAvailableSpace?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ fillAvailableSpace }) => (fillAvailableSpace ? 1 : undefined)};\n`;\n","import { ListState } from \"@react-stately/list\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { HTMLProps, Key, RefObject } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  CollectionSpeedSearchContextValue,\n  useCollectionSpeedSearch,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\nimport { SpeedSearchPopupProps } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { TextRange } from \"../../TextRange\";\nimport { ListProps, useList } from \"../useList\";\n\ninterface UseListProps\n  extends Omit<ListProps, \"keyboardDelegate\" | \"disallowTypeAhead\">,\n    Pick<SpeedSearchProps, \"keepSearchActiveOnBlur\"> {}\n\nexport function useSpeedSearchList<T>(\n  props: UseListProps,\n  listState: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ReturnType<typeof useList<T>> & {\n  searchPopupProps: SpeedSearchPopupProps;\n  focused: boolean;\n  selectionManager: SelectionManager;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n  matches: Map<Key, TextRange[]>;\n} {\n  const { keepSearchActiveOnBlur } = props;\n\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n    speedSearchContextValue,\n  } = useCollectionSpeedSearch({\n    collection: listState.collection,\n    selectionManager: listState.selectionManager,\n    keyboardDelegate: new ListKeyboardDelegate(\n      listState.collection,\n      listState.disabledKeys,\n      ref\n    ),\n    keepSearchActiveOnBlur,\n    ref,\n  });\n  const { listProps, ...otherOutputs } = useList(\n    {\n      ...props,\n      disallowTypeAhead: true,\n      keyboardDelegate,\n    },\n    { ...listState, selectionManager },\n    ref\n  );\n\n  return {\n    ...otherOutputs,\n    listProps: mergeProps(listProps, speedSearchContainerProps),\n    matches: speedSearch.matches,\n    selectionManager,\n    speedSearchContextValue,\n    searchPopupProps,\n  };\n}\n","import React, { ForwardedRef } from \"react\";\nimport { AriaListBoxProps } from \"@react-types/listbox\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\nimport {\n  CollectionSpeedSearchContainer,\n  CollectionSpeedSearchContext,\n  SpeedSearchItemHighlightsProvider,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearch,\n  SpeedSearchPopup,\n  SpeedSearchProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nimport { StyledList } from \"../StyledList\";\nimport { ListProps } from \"../List\";\nimport { useListState } from \"../useListState\";\nimport { ListItem } from \"../ListItem\";\nimport { ListContext } from \"../ListContext\";\nimport { useListVirtualizer } from \"../useListVirtualizer\";\nimport { useSpeedSearchList } from \"./useSpeedSearchList\";\n\nexport interface SpeedSearchListProps<T extends object>\n  extends ListProps<T>,\n    SpeedSearchProps {}\n\n/**\n * List component with {@link SpeedSearch}, which is a more advanced version of typeahead.\n */\nexport const SpeedSearchList = React.forwardRef(function SpeedSearchList<\n  T extends object\n>(\n  {\n    allowEmptySelection = false,\n    fillAvailableSpace = false,\n    estimatedItemHeight,\n    ...inputProps\n  }: SpeedSearchListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n\n  const { listProps, listContext, searchPopupProps, speedSearchContextValue } =\n    useSpeedSearchList({ ...props, isVirtualized: true }, state, ref);\n\n  const {\n    virtualizerProps: { children: renderNode, ...virtualizerProps },\n  } = useListVirtualizer({\n    state,\n    estimatedItemHeight,\n    renderItem: (item) => (\n      <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n        <ListItem key={item.key} item={item} />\n      </SpeedSearchItemHighlightsProvider>\n    ),\n  });\n\n  return (\n    <ListContext.Provider value={listContext}>\n      <CollectionSpeedSearchContainer fillAvailableSpace={fillAvailableSpace}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledList\n            as={Virtualizer<Node<any>, any>}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...listProps}\n          >\n            {renderNode}\n          </StyledList>\n        </CollectionSpeedSearchContext.Provider>\n      </CollectionSpeedSearchContainer>\n    </ListContext.Provider>\n  );\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Green circle indicator used with icons.\n * Reference: platform/execution/src/com/intellij/execution/runners/IndicatorIcon.kt\n */\nexport const StyledIconLiveIndicator = styled.span`\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  border-radius: 1000px;\n  background: #00ff00;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0, 0, 0, 0.4);\n  bottom: 1px;\n  right: 1px;\n`;\n","import { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { SpeedSearchContainer } from \"./SpeedSearchContainer\";\nimport { SpeedSearchPopup } from \"./SpeedSearchPopup\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"./useSpeedSearch\";\n\ninterface Props extends SpeedSearchStateProps {\n  children: React.ReactNode;\n  keepSearchActiveOnBlur?: boolean;\n  match?: boolean;\n  className?: string;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\" | \"ref\">;\n}\n\n// Maybe no need for this component, now that almost everything is moved to hooks, and a couple of\n// styled components. Then useSpeedSearchState can also be moved to useSpeedSearch\nexport const SpeedSearch = React.forwardRef(function SpeedSearch(\n  {\n    children,\n    keepSearchActiveOnBlur = false,\n    className,\n    containerProps = {},\n    match,\n    ...otherProps\n  }: Props,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const speedSearchState = useSpeedSearchState(otherProps);\n  const { containerProps: speedSearchContainerProps } = useSpeedSearch(\n    { keepSearchActiveOnBlur: keepSearchActiveOnBlur },\n    speedSearchState,\n    ref\n  );\n\n  return (\n    <SpeedSearchContainer\n      /* We might as well use useFocusable. The return type was troublesome in the first try. */\n      tabIndex={-1}\n      ref={ref}\n      {...mergeProps(containerProps, speedSearchContainerProps, { className })}\n    >\n      <SpeedSearchPopup active={speedSearchState.active} match={match}>\n        {speedSearchState.searchTerm}\n      </SpeedSearchPopup>\n      {children}\n    </SpeedSearchContainer>\n  );\n});\n","import React, { CSSProperties, ForwardedRef, RefObject, useRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { TreeProps as StatelyTreeProps } from \"@react-stately/tree\";\nimport { StyledTree } from \"./StyledTree\";\nimport { TreeRefValue } from \"./useTreeRef\";\nimport { TreeNode } from \"./TreeNode\";\nimport { TreeContext } from \"./TreeContext\";\nimport { useTreeState } from \"./useTreeState\";\nimport { SelectableTreeProps, useSelectableTree } from \"./useSelectableTree\";\nimport { useTreeVirtualizer } from \"./useTreeVirtualizer\";\nimport { CollectionCacheInvalidationProps } from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport interface TreeProps<T extends object>\n  extends Omit<StatelyTreeProps<T>, \"disallowEmptySelection\">,\n    CollectionCacheInvalidationProps,\n    CollectionRefProps,\n    Omit<SelectableTreeProps<T>, \"keyboardDelegate\" | \"isVirtualized\"> {\n  fillAvailableSpace?: boolean;\n  /**\n   * When true, shows the tree in focused style, even when it's not focused. A common use case is when the tree\n   * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n   * keyboard events as if the tree was focused.\n   */\n  showAsFocused?: boolean;\n  treeRef?: RefObject<TreeRefValue>;\n\n  className?: string;\n  style?: CSSProperties;\n}\n\n/**\n * TODO:\n *  - Match select all behaviour. Currently, `getSelectAllKeys` in `SelectionManager` returns\n *   all nested keys too. But it's not aligned with Tree implementation in Intellij Platform. And\n *   beside from that, it seems to be a little inconsistent in some edge cases where you select all,\n *   and then deselect a node. Then all of a sudden, all collapsed nested keys are no longer selected.\n */\nexport const Tree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      treeRef,\n      style,\n      className,\n      ...props\n    }: TreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(props, treeRef);\n    useCollectionRef(props, state);\n    const ref = useObjectRef(forwardedRef);\n\n    const { treeProps, treeContext } = useSelectableTree(\n      {\n        ...props,\n        isVirtualized: true,\n      },\n      state,\n      ref\n    );\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <StyledTree\n          as={Virtualizer<Node<any>, unknown>}\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...virtualizerProps}\n          {...treeProps}\n          style={style}\n          className={className}\n        >\n          {(itemType: string, item: Node<any>) => (\n            <TreeNode key={item.key} item={item as Node<T>} />\n          )}\n        </StyledTree>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarPauseIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarPauseButtonProps {\n  /**\n   * Whether progress is paused.\n   */\n  paused: boolean;\n  /**\n   * Called when progress is paused or resumed.\n   * @param paused `true` when progress is being paused. `false` when resumed.\n   */\n  onPausedChange: (paused: boolean) => void | Promise<unknown>;\n\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n}\n\n/**\n * Pause/Resume icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarPauseButton = ({\n  paused,\n  onPausedChange,\n  small,\n}: ProgressBarPauseButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarPauseIconButton(\n    {\n      onPress: () => onPausedChange(!paused),\n      hoverTooltip: paused ? \"Resume\" : \"Pause\",\n      paused,\n    },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      {...buttonProps}\n      icon={\n        paused\n          ? `process/progressResume${small ? \"Small\" : \"\"}.svg`\n          : `process/progressPause${small ? \"Small\" : \"\"}.svg`\n      }\n    />\n  );\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as juiComponents from \"@intellij-platform/core\";\nimport darculaThemeJson from \"@intellij-platform/core/themes/darcula.theme.json\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\nimport highContrastThemeJson from \"@intellij-platform/core/themes/HighContrast.theme.json\";\n\nconst LazyExampleApp = React.lazy(() => import(\"jui-example-app/src/App\"));\nconst ExampleApp = () => (\n  // Because ReactLive doesn't render a Suspense around what it renders.\n  <React.Suspense fallback=\"loading\">\n    <LazyExampleApp />\n  </React.Suspense>\n);\nimport React from \"react\";\n\n// Add react-live imports you need here\nconst ReactLiveScope = {\n  React,\n  ...React,\n  ...juiComponents,\n  ExampleApp,\n  darculaThemeJson,\n  lightThemeJson,\n  highContrastThemeJson,\n};\n\nexport default ReactLiveScope;\n","// extracted by mini-css-extract-plugin\nexport default {\"playground\":\"playground_whuD\",\"noPadding\":\"noPadding_tWI2\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Playground from \"./Playground\";\nimport ReactLiveScope from \"@theme/ReactLiveScope\";\nimport CodeBlock from \"@theme-init/CodeBlock\";\nimport clsx from \"clsx\";\nimport styles from \"../Playground/style-overrides.module.css\";\n\nconst withLiveEditor = (Component) => {\n  function WithLiveEditor(props) {\n    if (props.live) {\n      // idea: We can support playground with alternative sources, where each of them will show up as a button\n      // below the default playground. Clicking on buttons will switch to that example. There can be a simple syntax\n      // for embedding multiple sources in one code block which then will be converted into examples here.\n      return <Playground scope={ReactLiveScope} {...props} />;\n    }\n\n    return <Component {...props} />;\n  }\n\n  return WithLiveEditor;\n};\n\nconst withThemeBackground = (Component) => {\n  function WithThemeBackground(props) {\n    const theme = useTheme();\n    const content = <Component {...props} />;\n    const style = {\n      \"--ifm-list-item-margin\": 0,\n    };\n\n    if (props.themed) {\n      style.color = theme.color(\"*.foreground\");\n      style[\"--ifm-pre-background\"] = theme.color(\"*.background\");\n      style[\"--ifm-code-background\"] = \"none\";\n    }\n    return (\n      <div\n        style={style}\n        className={clsx(styles.playground, {\n          [styles.noPadding]: props.noPadding,\n        })}\n      >\n        {content}\n      </div>\n    );\n  }\n\n  return WithThemeBackground;\n};\n\nexport default withThemeBackground(withLiveEditor(CodeBlock));\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Toolbar';\nexport const metadata = {\n  \"unversionedId\": \"components/Toolbar\",\n  \"id\": \"components/Toolbar\",\n  \"title\": \"Toolbar\",\n  \"description\": \"Orientation\",\n  \"source\": \"@site/docs/components/Toolbar.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Toolbar\",\n  \"permalink\": \"/jui/docs/components/Toolbar\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Toolbar.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"ToolWindows\",\n    \"permalink\": \"/jui/docs/components/ToolWindows\"\n  },\n  \"next\": {\n    \"title\": \"Tooltip\",\n    \"permalink\": \"/jui/docs/components/Tooltip\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { ApiDescription } from \"@site/src/components/ApiDescription\";\nimport { Toolbar } from \"@intellij-platform/core\";\nexport const toc = [{\n  value: 'Orientation',\n  id: 'orientation',\n  level: 2\n}, {\n  value: 'Overflow',\n  id: 'overflow',\n  level: 2\n}, {\n  value: 'Wrapping overflowing children',\n  id: 'wrapping-overflowing-children',\n  level: 3\n}, {\n  value: 'Other children',\n  id: 'other-children',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"toolbar\"\n    }}>{`Toolbar`}</h1>\n    <ApiDescription of={Toolbar} mdxType=\"ApiDescription\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Toolbar>\n  <IconButton aria-label=\"Hide\">\n    <PlatformIcon icon=\"actions/arrowCollapse\" />\n  </IconButton>\n  <ToolbarSeparator />\n  <IconButton aria-label=\"Add\">\n    <PlatformIcon icon=\"general/add\" />\n  </IconButton>\n  <IconButton aria-label=\"Checkout\">\n    <PlatformIcon icon=\"actions/checkOut\" />\n  </IconButton>\n  <IconButton aria-label=\"Delete\">\n    <PlatformIcon icon=\"actions/gc\" />\n  </IconButton>\n  <IconButton aria-label=\"Show Diff\">\n    <PlatformIcon icon=\"actions/diff\" />\n  </IconButton>\n  <IconButton aria-label=\"Find\">\n    <PlatformIcon icon=\"actions/find\" />\n  </IconButton>\n  <ToolbarSeparator />\n  <IconButton aria-label=\"Expand All\">\n    <PlatformIcon icon=\"actions/expandall\" />\n  </IconButton>\n  <IconButton aria-label=\"Collapse All\">\n    <PlatformIcon icon=\"actions/collapseall\" />\n  </IconButton>\n</Toolbar>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"orientation\"\n    }}>{`Orientation`}</h2>\n    <p>{`By default, toolbar is horizontal. To make it vertical, set `}<inlineCode parentName=\"p\">{`orientation`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`\"vertical\"`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Toolbar orientation=\"vertical\">\n  <IconButton aria-label=\"Hide\">\n    <PlatformIcon icon=\"actions/arrowCollapse\" />\n  </IconButton>\n  <ToolbarSeparator />\n  <IconButton aria-label=\"Add\">\n    <PlatformIcon icon=\"general/add\" />\n  </IconButton>\n  <IconButton aria-label=\"Checkout\">\n    <PlatformIcon icon=\"actions/checkOut\" />\n  </IconButton>\n  <IconButton aria-label=\"Delete\">\n    <PlatformIcon icon=\"actions/gc\" />\n  </IconButton>\n</Toolbar>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"overflow\"\n    }}>{`Overflow`}</h2>\n    <p>{`When there is not enough room to show all its items, an arrow icon will appear at the end.\nHovering over this arrow will display the rest of the items in a popup.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`function OverflowExample() {\n  const [orientation, setOrientation] = useState(\"horizontal\");\n  const [size, setSize] = useState(140);\n  return (\n    <>\n      <div style={{ display: \"flex\", gap: \"1rem\", marginBottom: \"1rem\" }}>\n        <div>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"horizontal\"\n              checked={orientation === \"horizontal\"}\n              onChange={(event) => setOrientation(event.target.value)}\n            />\n            Horizontal\n          </label>\n          <label>\n            <input\n              type=\"radio\"\n              value=\"vertical\"\n              checked={orientation === \"vertical\"}\n              onChange={(event) => setOrientation(event.target.value)}\n            />\n            Vertical\n          </label>\n        </div>\n        <label style={{ display: \"inline-flex\", gap: \"0.25rem\" }}>\n          Size\n          <input\n            type=\"range\"\n            value={size}\n            step=\"10\"\n            min=\"20\"\n            max=\"500\"\n            onChange={(event) => setSize(event.target.valueAsNumber)}\n          />\n        </label>\n      </div>\n      <div style={{ [orientation === \"vertical\" ? \"height\" : \"width\"]: size }}>\n        <Toolbar orientation={orientation}>\n          <IconButton aria-label=\"Hide\">\n            <PlatformIcon icon=\"actions/arrowCollapse\" />\n          </IconButton>\n          <ToolbarSeparator />\n          <IconButton aria-label=\"Add\">\n            <PlatformIcon icon=\"general/add\" />\n          </IconButton>\n          <IconButton aria-label=\"Checkout\">\n            <PlatformIcon icon=\"actions/checkOut\" />\n          </IconButton>\n          <IconButton aria-label=\"Delete\">\n            <PlatformIcon icon=\"actions/gc\" />\n          </IconButton>\n          <IconButton aria-label=\"Show Diff\">\n            <PlatformIcon icon=\"actions/diff\" />\n          </IconButton>\n          <IconButton aria-label=\"Find\">\n            <PlatformIcon icon=\"actions/find\" />\n          </IconButton>\n          <ToolbarSeparator />\n          <IconButton aria-label=\"Expand All\">\n            <PlatformIcon icon=\"actions/expandall\" />\n          </IconButton>\n          <IconButton aria-label=\"Collapse All\">\n            <PlatformIcon icon=\"actions/collapseall\" />\n          </IconButton>\n        </Toolbar>\n      </div>\n    </>\n  );\n}\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"wrapping-overflowing-children\"\n    }}>{`Wrapping overflowing children`}</h3>\n    <p>{`In horizontal toolbars, `}<inlineCode parentName=\"p\">{`overflowBehavior`}</inlineCode>{` prop can be set to `}<inlineCode parentName=\"p\">{`wrap`}</inlineCode>{` which allows overflowing items to wrap into\nmultiple lines, instead of the default way of handling overflow in a popup.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<div style={{ width: 100 }}>\n  <Toolbar overflowBehavior=\"wrap\">\n    <IconButton aria-label=\"Hide\">\n      <PlatformIcon icon=\"actions/arrowCollapse\" />\n    </IconButton>\n    <ToolbarSeparator />\n    <IconButton aria-label=\"Add\">\n      <PlatformIcon icon=\"general/add\" />\n    </IconButton>\n    <IconButton aria-label=\"Checkout\">\n      <PlatformIcon icon=\"actions/checkOut\" />\n    </IconButton>\n    <IconButton aria-label=\"Delete\">\n      <PlatformIcon icon=\"actions/gc\" />\n    </IconButton>\n    <IconButton aria-label=\"Show Diff\">\n      <PlatformIcon icon=\"actions/diff\" />\n    </IconButton>\n  </Toolbar>\n</div>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"other-children\"\n    }}>{`Other children`}</h2>\n    <p>{`While toolbar is primarily used to render a list of action buttons,\n`}<a parentName=\"p\" {...{\n        \"href\": \"https://jetbrains.github.io/ui/controls/toolbar/#02\"\n      }}>{`other components`}</a>{` can also be rendered\ninside a toolbar, and the overflow behavior works regardless.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed noInline\",\n        \"live\": true,\n        \"themed\": true,\n        \"noInline\": true\n      }}>{`const StyledToolbarDropdownButton = styled.button\\`\n  all: unset;\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem;\n  padding-left: 0.25rem;\n  background: \\${({ theme }) => theme.color(\"ComboBoxButton.background\")};\n  color: \\${({ theme }) => theme.color(\"ComboBox.disabledForeground\")};\n  &:hover {\n    color: \\${({ theme }) => theme.color(\"*.foreground\")};\n  }\n\\`;\nfunction ToolbarChildrenExample() {\n  return (\n    <div style={{ width: 140 }}>\n      <Toolbar>\n        <MenuTrigger\n          renderMenu={({ menuProps }) => (\n            <Menu {...menuProps}>\n              <Item>Select...</Item>\n              <Item>Last 24 hours</Item>\n              <Item>Last 7 days</Item>\n            </Menu>\n          )}\n        >\n          {(props, ref) => (\n            <StyledToolbarDropdownButton {...props} ref={ref}>\n              Date <PlatformIcon icon=\"general/arrowDownSmall.svg\" />\n            </StyledToolbarDropdownButton>\n          )}\n        </MenuTrigger>\n        <MenuTrigger\n          renderMenu={({ menuProps }) => (\n            <Menu {...menuProps}>\n              <Item>Select...</Item>\n              <Item>me</Item>\n            </Menu>\n          )}\n        >\n          {(props, ref) => (\n            <StyledToolbarDropdownButton {...props} ref={ref}>\n              User <PlatformIcon icon=\"general/arrowDownSmall.svg\" />\n            </StyledToolbarDropdownButton>\n          )}\n        </MenuTrigger>\n        <MenuTrigger\n          renderMenu={({ menuProps }) => (\n            <Menu {...menuProps}>\n              <Item>Select in...</Item>\n              <Item>Select in Tree...</Item>\n            </Menu>\n          )}\n        >\n          {(props, ref) => (\n            <StyledToolbarDropdownButton {...props} ref={ref}>\n              Paths <PlatformIcon icon=\"general/arrowDownSmall.svg\" />\n            </StyledToolbarDropdownButton>\n          )}\n        </MenuTrigger>\n        <ToolbarSeparator />\n        <TooltipTrigger\n          tooltip={<ActionTooltip actionName={\"Open New Git Log Tab\"} />}\n        >\n          <IconButton aria-label=\"Checkout\">\n            <PlatformIcon icon=\"actions/openNewTab.svg\" />\n          </IconButton>\n        </TooltipTrigger>\n      </Toolbar>\n    </div>\n  );\n}\nrender(<ToolbarChildrenExample />);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["isInResolvedActionGroup","action","isActionGroup","isResolvedActionGroup","isActionGroupDefinition","ActionShortcut","actionId","children","shortcutString","useGetActionShortcut","getShortcut","keymap","useKeymap","keyboardShortcut","find","type","shortcutToString","isKeyMatch","keyStroke","e","loose","code","modifiers","supportedModifiers","every","modifier","getModifierState","Boolean","includes","ActionsContext","React","generateId","Math","floor","random","ACTION_PROVIDER_ID_DATA_PREFIX","actionProvidersMap","Map","ActionsProvider","props","parentContext","useContext","actions","dfsVisit","push","recursivelyCreateActions","shortcuts","Object","fromEntries","map","id","actionProviderId","useState","shortcutHandlerProps","onAction","useCapture","firstKeyActivatedShortcutsRef","useRef","secondStrokeResetTimerIdRef","onKeyDown","useEventCallback","event","nativeEvent","location","repeat","current","window","clearTimeout","length","some","shortcut","secondKeyStroke","triggerAction","firstKeyMatches","entries","flatMap","filter","input","isKeyboardShortcut","firstKeyStroke","setTimeout","document","addEventListener","once","capture","stopPropagation","preventDefault","useShortcuts","perform","element","target","Element","allActions","ACTION_PROVIDER_ID_ATTRIBUTE","useEffect","set","delete","Provider","value","actionDefinitions","parent","actionDefinition","useShortcutsOf","undefined","firstShortcut","context","isDisabled","actionPerformed","isMutableActionGroup","getAvailableActionsFor","closestActionProvider","closest","HTMLElement","actionSets","keys","dataset","dataKey","startsWith","replace","get","values","isSearchable","concat","sortBy","actionSet","useActions","useAction","usePerformAction","console","error","CommonActionId","EXPAND_ALL","COLLAPSE_ALL","EXPAND_SELECTION","SHRINK_SELECTION","GO_TO_ACTION","GO_TO_FILE","SHOW_INTENTION_ACTIONS","EDIT_SOURCE","SHOW_SEARCH_HISTORY","COPY_REFERENCE","REFRESH","Delete","KeymapContext","defaultKeymap","KeymapProvider","keymapProp","parentKeyMap","assign","create","ActionButton","otherProps","actionButton","onPress","icon","title","tooltip","actionName","ActionGroupMenu","actionGroup","isAction","item","ActionsMenu","selectedKeys","menuProps","menuComponent","MenuComponent","Menu","items","flatten","disabledKeys","key","autoFocus","DividerItem","renderActionAsMenuItem","isGroup","presentation","hasDivider","textValue","childItems","content","useCreateDefaultActionGroup","show","usePopupManager","getActionShortcut","openActionsInPopup","close","onClose","header","groupDefinition","RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID","RESIZE_TOOL_WINDOW_LEFT_ACTION_ID","RESIZE_TOOL_WINDOW_TOP_ACTION_ID","RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID","MAXIMIZE_TOOL_WINDOW_ACTION_ID","FOCUS_EDITOR_ACTION_ID","HIDE_ACTIVE_WINDOW_ACTION_ID","HIDE_ALL_WINDOWS_ACTION_ID","JUMP_TO_LAST_WINDOW_ACTION_ID","defaultKeyToStr","Control","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Enter","Quote","Minus","Equal","Backspace","fromPairs","Array","from","i","charCodeAt","x","String","fromCharCode","a","toUpperCase","KeystrokeToString","isMac","separator","codeToStr","Alt","Shift","Meta","Escape","modifiersOrder","keystrokeToString","keystroke","sort","b","indexOf","join","Error","useActionGroup","actionGroupId","StyledModalWindow","styled","ModalWindow","StyledWindowContainer","StyledContainer","StyledHeading","StyledBody","StyledContent","StyledCheckbox","StyledButtons","StyledIcon","StyledHelpIcon","AlertDialog","heading","body","checkbox","helpButton","buttons","minWidth","role","interactions","defaultBounds","top","innerHeight","observeContentResize","dragThreshold","canMoveStart","isEventOnEmptySpaces","moveHandleProps","size","useAlertDialog","open","useWindowManager","confirm","message","okText","cancelText","Promise","resolve","variant","bgColor","theme","color","dark","StyledHeaderActions","StyledBalloonContainer","StyledIconContainer","StyledBalloonHeader","StyledBalloonBody","lineClamp","StyledBalloonFooter","StyledToggleIconContainer","StyledToggleExpandButtonContainer","StyledToggleExpandButtonFooterContainer","BalloonContext","BalloonActionLink","ref","args","Balloon","iconProp","expanded","expandedProp","defaultExpanded","onExpandedChange","headerActions","containerProps","bodyRef","expandable","setExpandable","setExpanded","useControlledState","maxLinesWhenNotExpanded","bodyElem","clientHeight","parseFloat","getComputedStyle","lineHeight","getNumLines","scrollHeight","iconType","index","arr","toggle","effectiveExpanded","onClick","style","marginLeft","ToggleWrapper","enabled","onToggle","Component","iconName","toggleIcon","hoverContainerSelector","className","NotImplementedFn","BalloonsContext","showSticky","useBalloonManager","BalloonManager","disablePortal","BalloonsContainer","StyledBalloonsStack","balloons","setBalloons","timeoutIdsRef","lastIdRef","api","useMemo","timeout","aBalloon","balloon","timeoutId","aTimeoutId","forEach","notificationsStack","position","ReactDOM","BareButton","elementType","buttonProps","useButton","useObjectRef","domProps","filterDOMProps","mergeProps","StyledButton","disabled","variants","default","Button","forwardedRef","form","StyledWrapperLabel","StyledCheckboxLabelText","StyledInput","Checkbox","preventFocus","disableFocusAlwaysVisible","state","useToggleState","inputProps","useCheckbox","isFocusVisible","isFocused","focusProps","useFocusRing","focusDisabledProps","onFocusCapture","relatedTarget","focus","blur","tabIndex","isIndeterminate","isSelected","pointerEvents","CheckboxIcon","name","Disabled","Selected","Focused","CollectionSpeedSearchContext","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","itemKey","collection","getItem","text","warn","highlightedRanges","matches","HighlightedTextValue","speedSearchContext","highlights","useCollectionSpeedSearchResult","selectionManager","inputSelectionManager","speedSearch","focusBestMatch","searchTerm","active","getKeys","matchedRanges","minusculeMatch","wrappedSelectionManager","selectAll","setSelectedKeys","Set","has","createSpeedSearchSelectionManager","latestValues","useLatest","matchedKeys","noneOfTheMatchesAreSelected","matchedKey","keyToFocus","firstRange","rangeA","rangeB","to","getLongestCommonPrefixMatch","passedFirstSelection","firstSelectedKey","getMatchToSelect","setFocusedKey","replaceSelection","useCollectionSpeedSearch","keepSearchActiveOnBlur","keyboardDelegate","speedSearchStateProps","useSpeedSearchState","speedSearchSelectionManager","useSpeedSearch","speedSearchKeyboardDelegate","wrappedKeyboardDelegate","findFirstMatch","fromKey","direction","currentKey","getKeyAbove","getKeyBelow","getFirstKey","global","firstKey","next","getLastKey","lastKey","pop","createSpeedSearchKeyboardDelegate","speedSearchContextValue","searchPopupProps","match","seq","this","Divider","_Divider","getCollectionNode","rendered","hasChildNodes","Item","_Item","result","StatelyItem","originalShouldInvalidate","shouldInvalidate","invalidated","GAP","StyledItemLayout","StyledHint","currentForegroundAware","commonColors","inactiveTextColor","small","StyledGroup","ItemLayout","Hint","Group","ItemStateContext","useCollectionAutoScroll","isVirtualized","focusedKey","querySelector","scrollIntoView","useCollectionRef","selectionManagerRef","useImperativeHandle","useCollectionSearchInput","collectionRef","relayEventsToCollection","dispatchEvent","KeyboardEvent","collectionSearchInputProps","onKeyUp","onKeyPress","StyledHoverContainer","StyledIconHoverContainer","AutoHoverPlatformIcon","hoverIcon","amendName","LafIcon","themePath","resolvedIconPath","iconDescriptor","useTheme","resolvedValue","isUnderDarcula","reduce","soFar","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","slice","PlatformIcon","darkIcon","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","itemState","selected","isContainerFocused","unmounted","async","loadingIcon","svg","getSvgIcon","catch","remove","svgElement","createElement","appendChild","outerHTML","randomPostfix","toFixed","matchAll","modifiedSvg","_","newId","replaceAll","makeIdsUnique","fetchIcon","theOld","theNew","str","replaced","replacedAgain","DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","StyledIconButton","minSize","IconButton","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","focusableProps","useFocusable","pressProps","usePress","ArrowIcon","IconButtonWithMenu","renderMenu","noArrow","previouslyFocusedElementRef","onOpenChange","onFocus","Img","darkSrc","src","StyledInputBox","focused","validationState","border","invalid","focusRing","appearance","css","StyledAddons","StyledRightAddons","StyledLeftAddons","Input","autoSelect","addonBefore","addonAfter","inputRef","inputRefProp","onBlur","setIsFocused","focusWithinProps","useFocusWithin","onFocusWithinChange","select","spellCheck","onMouseDown","StyledLabel","label","StyledInputContainer","labelPlacement","Label","StyledContextHelp","contextHelpForeground","StyledBoxAndContextHelpWrapper","InputField","contextHelp","fieldProps","errorMessageProps","labelProps","descriptionProps","useField","PositionedTooltipTrigger","placement","crossOffset","showOnFocus","errorMessage","ValidationTooltip","delay","I","placeholder","defaultValue","onChange","StyledLink","focusBorderColor","linkForegroundEnabled","Link","labelable","interactionHandlers","focusRingClass","as","List","allowEmptySelection","fillAvailableSpace","estimatedItemHeight","disallowEmptySelection","useListState","listProps","listContext","useList","virtualizerProps","renderNode","useListVirtualizer","renderItem","Virtualizer","ListContext","ListDivider","useSeparator","orientation","separatorProps","ListItem","listFocused","itemProps","useSelectableItem","containerFocused","node","StyledList","withConfig","shouldForwardProp","prop","StyledListItem","backgroundColor","labelForeground","asCurrentForeground","labelSelectedForeground","asCurrentBackground","showAsFocused","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","isEmpty","onActionCallback","originalUseListState","selectionBehavior","StyledListSectionHeader","paddingLeft","fontWeight","outline","cursor","ListSection","reusableView","headerRef","useVirtualizerItem","layoutInfoToStyle","layoutInfo","renderWrapper","renderChildren","viewType","c","layout","VariableWidthListLayout","estimatedRowHeight","estimatedHeadingHeight","dividerHeight","sizeToFit","scrollToItem","virtualizer","shouldScrollX","duration","scrollDirection","ContextMenuContainer","useMenuTriggerState","overlayProps","overlayRef","positionProps","updatePosition","useMouseEventOverlayPosition","shouldFlip","offset","isOpen","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","areInNestedOverlays","onContextMenu","useContextMenu","allProps","MenuOverlay","restoreFocus","patchCollectionItem","nodes","partialNode","result2","childNodes","partialChildNode","partialChildNodeWithoutType","PatchedItem","PatchedSection","Section","convertChildren","isArray","Item2","MenuOverlayContext","MenuContext","useMenu","onActionProp","submenuBehavior","menuContextValue","useMenuAria","useMenuState","patchCollectionProps","useTreeState","childExpansionBehaviour","expandedKeys","expandedKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","StyledMenu","renderMenuNodes","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItemContext","keyboardShortcutProps","useMenuItemLayout","MenuItem","nestedMenuRef","isExpanded","renderSubmenu","itemWrapper","menuItemProps","hasSubmenu","ariaMenuItemProps","useMenuItemAria","onMouseEnter","onPointerEnter","onPointerDown","hoverProps","useHover","onHoverStart","isAnySubmenuOpen","parentKey","toggleKey","keyboardProps","togglePressProps","useMenuItem","useOverlayPosition","targetRef","MENU_VERTICAL_PADDING","MENU_BORDER_WIDTH","arrowProps","onPointerUp","isActive","OverlayComponent","SimpleOverlay","parentState","rootKey","portalContainer","StyledMenuItemLayout","Content","Shortcut","MenuItemLayout","useContextOrThrow","allowedIcon","forceRestoreFocus","MenuTrigger","align","positioningTargetRef","menuTriggerProps","triggerRef","triggerProps","useMenuTrigger","ariaButtonProps","getPlacement","containerPadding","StyledItemsContainer","StyledSearchFieldWrapper","StyledSpeedSearchMenu","StyledVerticalSeparator","StyledPlaceholder","useSpeedSearchMenu","containerRef","speedSearchContainerProps","ListCollection","MenuKeyboardDelegate","contains","activeElement","focusSafely","lastSize","setSize","measureSize","offsetWidth","offsetHeight","width","height","isSearchActive","useResizeObserver","onResize","useLayoutEffect","sizeStyleProps","minHeight","maxHeight","SpeedSearchMenu","emptyText","clear","SpeedSearchSubmenu","SpeedSearchMenuContent","menuRef","useSubmenuState","rootItem","submenuProps","useSubmenu","WINDOW_SHADOW","StyledMenuItem","StyledMenuItemIcon","StyledNestedArrow","highlightedStyle","defaultStyle","disabledStyle","useSubmenuAria","submenuBehaviorProps","Submenu","constructor","super","keyBelow","keyAbove","useKeyboard","continuePropagation","root","isFocusedRef","focusedKeyRef","defineProperties","SelectionManager","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","headingProps","groupProps","useMenuSection","UNSAFE_React17SuspenseFix","measureContentSize","fallback","NullSuspenseFallback","afterUnsuspended","afterSuspended","afterSuspendedProp","afterUnsuspendedProp","StyledWindowUnderlay","StyledWindowInnerContainer","DEFAULT_WINDOW_MIN_WIDTH","DEFAULT_WINDOW_MIN_HEIGHT","WindowControllerContext","propsContext","underlayProps","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","bounds","overlayInteractionHandlerProps","UNSAFE_measureContentSize","useResizableMovableOverlay","focusContainmentFixProps","lastFocusedElementRef","probablyFocusedElement","currentTarget","elementToFocus","useFocusContainmentFix","OverlayInteractionHandler","contain","WindowContext","movable","OverlayResizeHandles","StyledFooter","hasBorder","contrastBorder","StyledFooterSide","WindowFooter","left","right","StyledWindowTitle","WindowHeader","renderTitle","OverlayMoveHandle","StyledWindowFooter","StyledWindowContentWrapper","WindowLayout","footer","Footer","Header","WindowsContext","WindowManager","windows","setWindows","newKeyRef","currentWindows","aWindow","ParentOverlayContext","Overlay","AriaOverlay","element1","element2","overlayRoot1","overlayRoot2","OverlayInteractionHandlerContext","useOverlayInteractionHandler","useOverlayMoveHandle","options","interactionHandler","finishInteraction","startInteraction","updateBounds","useMove","onMoveStart","onMove","startState","movement","y","onMoveEnd","overlayResizer","initialBoundsRef","max","bottom","newWidth","initialBounds","newHeight","getResizerProps","side","onResizeStarted","onResizeEnd","useOverlayResizer","withMinSize","getCenteredBounds","innerWidth","targetElement","targetBounds","getBoundingClientRect","ensureInViewport","gap","viewportWidth","viewportHeight","clamp","getContentSize","fn","ceil","clone","cloneNode","returnValue","removeChild","useContentSize","observe","measuredSizes","setMeasuredSizes","lastMeasuredSize","at","Size","isEqual","requestAnimationFrame","newSize","cancelAnimationFrame","measure","currentSize","aSize","debouncedMeasure","fnRef","currentTimeoutId","useCallback","useDebouncedCallback","mutationObserver","MutationObserver","subtree","childList","disconnect","width2","height2","inputBounds","onBoundsChange","onBoundsChanging","setBounds","contentSize","currentInteraction","setCurrentInteraction","effectiveMinWidth","effectiveMinHeight","applyMinSize","getBounds","updatedBounds","partialBounds","centeredContentBounds","positioned","sized","StyledPopupContainer","StyledInnerContainer","DEFAULT_POPUP_MIN_WIDTH","DEFAULT_POPUP_MIN_HEIGHT","_Popup","nonDismissable","allowScroll","positioning","positioningProp","onCloseProp","PopupControllerContext","useInteractOutside","onInteractOutsideStart","onInteractOutside","positionedBounds","pipe","setActive","focusForwarderProps","useFocusForwarder","titleId","useSlotId","useOverlayFocusContain","zIndex","propsArray","mergeNonNullProps","PopupContext","Popup","PopupHeader","Layout","PopupLayout","StyledPopupHint","createContext","StyledPopupHeader","hasControls","labelDisabledForeground","renderHeader","StyledPopupLayout","StyledPopupLayoutHeader","StyledPopupLayoutContent","StyledPopupLayoutFooter","PopupsContext","PopupManager","popups","setPopups","popup","currentPopups","aPopup","wrappedPopup","PopupTrigger","useOverlayTriggerState","useOverlayTrigger","ProgressBar","maxValue","minValue","namePosition","details","secondaryDetails","button","dense","progressBarProps","useProgressBar","percentage","forcedDetails","setForcedDetails","setTooltip","contextValue","StyledProgressBarLabel","effectiveDetails","StyledProgressBarContainer","StyledProgressBarLineContainer","hasTopMargin","hasBottomMargin","StyledProgressBarTrack","indeterminate","StyledProgressBarProgress","showValueLabel","valueLabel","ProgressBarContext","StyledProgressBarDetails","getIndeterminateStartColor","getIndeterminateEndColor","indeterminateBackgroundAnimation","keyframes","useProgressBarIconButton","hoverTooltip","isHovered","useProgressBarPauseIconButton","paused","Container","LineContainer","Track","Progress","Details","ProgressBarStopButton","ResizableView","resizerPlacement","firstView","firstSize","onFirstResize","lastView","onLastResize","BottomResizer","resizerProps","useBottomResizer","StyledHorizontalResizer","StyledHorizontalResizerArea","handleSize","HorizontalResizer","outerPadding","background","LeftResizer","useLeftResizer","RightResizer","useRightResizer","TopResizer","useTopResizer","StyledVerticalResizer","StyledVerticalResizerArea","VerticalResizer","useResizer","invert","SearchInput","searchHistory","onClear","onSubmit","onHistoryItemSelected","historyButtonTitle","valueProp","setValue","inputContainerRef","isSearchHistoryOpen","setSearchHistoryOpen","showSearchHistoryAction","searchIcon","historyItemText","parseInt","historyItem","tooltipTriggerProps","StyledSearchIcon","StyledSpeedSearchInput","noMatch","getOutlineColor","StyledSearchText","SpeedSearchInput","clearButtonRef","SpeedSearchPopup","StyledSpeedSearchPopup","red","tooltipForeground","useGhostInput","valueRef","ctrlKey","altKey","metaKey","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","defaultIsSearchActive","onIsSearchActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","ghostInputKeydown","trimmedValue","trimStart","hasAnyModifier","onBlurWithin","StatusBar","StyledStatusBar","StyledStatusBarLeft","StyledStatusBarRight","StyledStatusBarSection","StatusBarWidget","StyledWrapper","StyledStatusBarWidget","StyledStatusBarIconWidget","inset","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundClip","boxSizing","margin","flexShrink","StyledHorizontalSeparator","DebuggerTabContent","closeButton","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","editorTabTheme","borderColor","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","TabCloseButton","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabContentLayout","TabItem","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","forwardRef","shouldSelectOnPressUp","tabProps","useTab","selectedKey","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","hasOverflow","threshold","setHasOverflow","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetTop","scrollTop","offsetBottom","newHasOverflow","onScroll","useHasOverflow","overflowedElements","useOverflowObserver","overflowedKeys","notNull","scrollableContainer","selectedTabElement","TabsOverflowMenu","onSelect","setSelectedKey","menuItem","inOverflowMenu","ToolWindowTabContent","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","getAllRanges","ranges","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","TextWithHighlights","parts","highlighted","numberPattern","parseComponent","componentStr","round","min","parseHexRgba","parseShorthandHex","parseRgb","RegExp","parseRgba","Color","rgba","g","r","NaN","parse","Number","isInteger","parseColorString","isValid","withTransparency","alpha","brighter","int","FACTOR","darker","toString","blend","colorOrColorString","getBlendedValue","component","isNaN","padStart","StyledSplitterContainer","StyledView","StyledSplitterInnerView","ThreeViewSplitter","resizerPropsOverrides","innerView","firstViewMinSize","lastViewMinSize","innerViewMinSize","firstViewRef","lastViewRef","firstSizeState","setFirstSizeState","lastSizeState","setLastSizeState","horizontalValue","verticalValue","FirstResizer","SecondResizer","sizeStyleProp","minSizeStyleProp","isFractionSize","normalizeSize","getSize","getNewSize","newFractionSize","getActualSize","viewElem","actualSize","currentLastSize","currentFirstSize","StyledFloatView","FloatView","boundsStyle","FloatToolWindows","floatWindows","renderToolWindow","stackedFloatWindows","getKey","sortedKeys","setSortedKeys","sorted","bringToFront","move","useStackedLayersState","layersProps","toolWindow","MovableToolWindowStripeContext","MovableToolWindowStripeProvider","stripes","draggingRect","setDraggingRect","draggingKey","setDraggingKey","dropPosition","setDropPosition","getDropPositionRef","moveStartLocationRef","addStripe","propsRef","startMove","stripe","stripeElRef","stripeElement","getItemRect","toJSON","indexInMain","mainItems","findIndex","indexInSplit","splitItems","anchor","isSplit","dropPositionGetters","createGetDropPosition","getDropPosition","draggedRect","endMove","TopStripe","BottomStripe","LeftStripe","RightStripe","InnerView","StyledToolWindowOuterLayout","Shell","hideStripes","getSizeInAnchor","containerSize","isHorizontalToolWindow","mapToKey","sortAndMapToKey","compose","order","filterMains","getMains","filterSplits","filterVisible","expectedViewMode","viewMode","isVisible","getSplits","filterVisibleDocked","filterVisibleUnDocked","getDocked","toolWindows","docks","mains","splits","weight","mainKey","sizeFraction","sideWeight","getUnDocked","getSideState","main","activeKeys","undocked","docked","DEFAULT_HEIGHT","DEFAULT_WIDTH","getFloatWindowsState","floatingBounds","getFloatWindowState","getStripeRect","start","rect","end","getDropPositions","getRef","score","abs","relative","keyToOffsets","boundingRect","getKeyToOffsets","dropPositions","lastDropPosition","stripeRect","getCanDrop","bestMatch","candidate","STRIPE_BUTTON_LINE_HEIGHT","StyledToolWindowStripeButton","StyledToolWindowStripe","theOtherSide","preventCollapse","StyledSpacer","useElementMove","ghost","ghostOption","otherOptions","updateGhostPosition","defaultGhost","colors","computedBackground","unshift","parentElement","resultColor","nextColor","findEffectiveBackgroundColor","createDefaultGhost","append","ToolWindowStripe","render","onItemPress","getProps","latestPropsRef","moveDisabled","useMovableStripeButtons","isNotCurrentItem","anItem","ToolWindowStripeButton","getStripeButtonStyles","styles","marginValue","display","StyledUndockSide","UndockSide","ToolWindows","hideToolWindowBars","useWidescreenLayout","toolWindowsState","onToolWindowStateChange","mainContentMinWidth","windowsById","indexBy","mainContentFocusScopeRef","layoutState","setLayoutState","windowFocusableRefs","latestRef","container","_setLayoutState","windowIds","removedFromSideBarIds","groupBy","getToolWindowsLayoutState","observer","ResizeObserver","resize","contentRect","unobserve","hasFocus","focusLastActiveWindow","lastFocusedKey","focusMainContent","changeState","updater","interactionOutsideRef","onFocusLost","handleBodyFocus","focusLosingElement","focusReceivingElement","removeEventListener","useOnFocusLost","renderStripe","toolbarButton","all","lastFocused","FocusScope","ToolWindowStateProvider","mainContentFocusableRef","renderSideDockedView","resizeDockSplitView","onDockResize","containerBounds","resizeDock","getSplitViewProps","firstAnchor","secondAnchor","horizontalSplitterProps","verticalSplitterProps","outerSplitterProps","innerSplitterProps","undockLayers","resizeUndock","setFloatingBound","renderInnerLayout","ToolWindowStateContext","useToolWindowState","hide","removeFromSidebar","moveToSide","changeViewMode","stretchWidth","stretchHeight","setFloatingBounds","isDocked","areInSameSection","curry","window1","window2","getViewModeType","ToolWindowsState","layoutToRestore","invalidWindows","targetKey","mapWindows","hideAll","restoreWindows","closableViewModes","viewModeType","sideOrIndex","targetSide","targetIndex","targetSideWindows","indexInTargetSide","sortedTargetWindows","insert","newTargetSideWindows","newValue","targetViewMode","stretch","mapFn","mapObjIndexed","property","currentFloatingBound","resizeSide","dock","isInResizingView","toolWindowState","inputs","getAnchorOrientation","useToolWindow","contentRef","focusableContentRef","onFocusChange","contentHasFocus","setContentHasFocus","contentFocusWithinProps","toolWindowProps","autoHideProps","hideTimeoutId","windowFocusWithinProps","onFocusWithin","useAutoHide","forwardFocus","ignoreFocusedDescendant","toolWindowContentProps","toolWindowHeaderProps","ToolWindowSettingsIconMenu","viewModeActionGroup","VIEW_MODE_ACTION_GROUP_ID","moveToActionGroup","MOVE_TO_ACTION_GROUP_ID","resizeActions","TOOL_WINDOW_RESIZE_ACTION_GROUP_ID","maximizeAction","removeFromSideBarAction","REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID","gearIconActions","ViewModeToActionId","StyledToolWindowHeader","StyledToolWindowHeaderActions","StyledToolWindowHeaderContent","DefaultToolWindowHeader","additionalActions","Toolbar","DOCK_TOOL_WINDOW_ACTION_ID","TooltipTrigger","ActionTooltip","StyledToolWindowContainer","StyledToolWindowContent","DefaultToolWindowContext","useDefaultToolWindowContext","DefaultToolWindow","headerContent","mainContentTitle","defaultToolWindowContext","useToolWindowActions","getToolWindowNumberFromShortcut","num","DefaultToolWindowToolbarButton","showNumber","getActivateToolWindowActionId","number","DefaultToolWindows","showNumbers","toolWindowsRef","windowById","useToolWindowsActions","getPresentation","MultiViewToolWindow","groupTabs","isToolWindowFocused","setToolWindowFocused","activeKey","setActiveKey","defaultActiveKey","onActiveKeyChange","contents","child","validChild","MultiContentToolWindowContent","renderedViewSwitcher","onSelectionChange","tabContent","previousKeys","usePrevious","newActiveKey","activeContent","View","DOCK_PINNED_MODE_ACTION_ID","DOCK_UNPINNED_MODE_ACTION_ID","UNDOCK_MODE_ACTION_ID","FLOAT_MODE_ACTION_ID","WINDOW_MODE_ACTION_ID","anchors","getAnchorName","docked_pinned","docked_unpinned","undock","float","createDefaultActionGroup","alert","resizeGroup","isAnySideWindowWindowOpen","getOrdinal","description","n","ord","borderStyle","borderPropToCssProp","StyledToolbar","horizontal","vertical","StyledShowMoreButton","StyledHorizontalToolbar","StyledVerticalToolbar","StyledToolbarContent","shouldWrap","firstOverflowedIndex","OrientationContext","overflowBehavior","rootProps","showMoreButtonRef","isOverflowPopupVisible","setOverflowPopupVisible","popupHeight","setPopupHeight","firstOverflowedChildIndex","setFirstOverflowedChildIndex","firstOverflowedChildRef","childElements","firstOverflowedChild","toolbarProps","onMouseMove","firstOverflowedElement","shouldShow","clientY","clientX","onMouseLeave","toolbarOverflowPopupProps","ToolbarInOverlay","firstVisibleIndex","ToolbarSeparator","ActionHelpTooltip","helpText","link","tooltipProps","multiline","HelpTooltip","useTooltipTriggerState","positionAria","trigger","StyledTooltip","tooltipBackground","hasPointer","tooltipBorderColor","WITH_POINTER_BORDER_RADIUS","StyledShortcut","StyledHeader","fontSizeDelta","StyledDescription","placementToPointerSide","center","Tooltip","withPointer","isInteractive","pointerPositionStyle","TooltipContext","useTooltip","tooltipRef","_Tooltip","Description","POINTER_THICKNESS","TRANSLATE","sideStyles","StyledTooltipPointer","POINTER_WIDTH","POINTER_HEIGHT","normalizeCssValue","withMin","withMax","HEIGHT_OFFSET","WIDTH_OFFSET","limitPointerPositionStyles","applyVerticalMinMax","identity","applyHorizontalMinMax","getOffsetCssProp","pointerPositionToOffsetStyle","offsetValue","TooltipPointer","TooltipTriggerAndOverlay","setInteractive","useTooltipTrigger","normalizeChildren","useAriaTooltipTrigger","StyledValidationTooltip","StyledWarningValidationTooltip","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","treeRef","hideSpeedSearchPopup","treeProps","treeContext","useSpeedSearchTree","useTreeVirtualizer","TreeContext","StyledTree","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","selectableTree","useSelectableTree","attrs","getKeyLeftOf","getKeyRightOf","StyledTreeNodeIcon","TreeNodeIcon","iconPath","getIcon","useTreeNodeToggleButton","treeNodeToggleButtonProps","selectedDescendantKeys","toggleSelection","StyledTreeNode","level","onActionRef","treeNodeProps","onDoubleClick","useTreeNode","selectionKeyDown","focusedItem","isExpandable","onNodeKeyDown","shouldToggle","shiftKey","useSelectParentOfRemovedSelectedNode","previousCollectionRef","rawSelection","valid","invalidKey","Symbol","iterator","TreeCollection","keyMap","iterable","last","visit","nextKey","prevKey","getKeyBefore","getKeyAfter","idx","getSingleChildrenKeys","getSingleChildrenKeysRecursive","childNodesIterator","firstChild","done","noMoreChildren","isEmptyIterable","TreeSelectionManager","expandSelection","expandKeys","getExpandAndShrinkKeys","shrinkSelection","shrinkKeys","recursivelyGetExpandAndShrinkKeys","previousChild","newKeys","parentDescendants","getAllDescendants","getAllRoots","descendants","stopKeys","flat","_TreeCollection","rootKeys","getAllExpandableKeys","rootNodes","recursivelyAddExpandableKeys","add","setExpandedKeys","selectionState","useMultipleSelectionState","cacheInvalidation","invalidators","lastInvalidators","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","latestState","expandAll","collapseAll","useTreeRef","newExpandedKeys","toggleTreeNode","expandedSiblings","getRootItemKeys","getChildItems","siblings","getSiblings","aKey","sectionItems","res","FlattenedTreeLayout","buildChild","layoutNode","doBuildCollection","padding","visibleNodes","maxY","isLoading","Rect","visibleRect","loaderHeight","loader","LayoutInfo","layoutInfos","placeholderHeight","getVisibleLayoutInfos","useTreeActions","collectSelectableItemsRecursive","getChildren","collectedItems","NestedSelection","cache","WeakMap","getSelectionState","itemsInSubtree","collectSelectableItems","cachedState","allDescendantsStates","SpeedSearchTreeWithCheckboxes","nestedSelection","otherInvalidators","StyledCheckboxWrapper","TreeNodeCheckbox","selectItemOnPress","itemContext","useNestedSelectionState","selectedKeysProp","defaultSelectedKeys","onSelectedKeysChange","selectedKeysSetter","useControllableSet","ListLayout","keyToWidth","visibleContentWidth","buildItem","buildNode","buildDivider","rectHeight","estimatedSize","buildCollection","getVisibleContentWidth","invalidateEverything","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","visibleViews","view","itemContentWidth","intersects","getVisibleRect","isWordSeparator","isWhitespace","char","test","isUpperCase","toLowerCase","isMeaningfulChar","ch","rawPattern","isStarts","isStart","pattern","continuous","inputIndex","patternIndex","lastMatch","chars","previousChar","manager","disallowSelectAll","useLocale","handlers","navigateToKey","childFocus","selectionMode","extendSelection","isCtrlKeyPressed","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","useOriginalSelectableItem","pointerType","styledComponents","ThemeConsumer","directChildRef","focusManagerRef","nodeToRestore","forceFocusFirst","focusManager","containerElement","focusFirst","focusNext","GetFocusManager","hidden","useFocusManager","savedUserSelect","handlersRef","documentElement","webkitUserSelect","pageX","pageY","dragStarted","runAfterTransition","OverflowObserver","callback","data","mutations","mutation","removedNodes","intersectionObserver","addedNodes","IntersectionObserver","newHiddenElements","entry","isIntersecting","newVisibleElements","previouslyOverflowedElements","currentOverflowElements","childElement","scrollableContainerRef","rootMargin","setOverflowedElements","overflowObserver","change","getExpandAllKeys","roots","processItem","getExpandedToNodesKeys","targetNodeKeys","targetNodeKeySet","childValues","childValue","dfs","bfsVisit","bfs","parentValue","childNode","sortTreeNodesInPlace","by","compareFn","aa","bb","Context","nullErrorMessage","apply","possiblyBlurredElement","innerRef","globalMoveHandler","lastMouseClientPos","fakeTarget","visibility","ImmutableSet","setValueWithMutation","mutate","createSetInterface","currentValue","useStateSetterForSet","ApiDescription","of","docgenInfo","__docgenInfo","log","overrides","MDXComponents","deLinkify","comment","toCommentBlock","line","StyledSvg","StyledExpandButton","Expandable","onExpand","setIsExpandable","viewBox","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","transform","icons","clsx","flex","LivePreviewLoader","ErrorFallback","tryAgain","Preview","BrowserOnly","ErrorBoundary","params","ResultWithHeader","Translate","ThemedLiveEditor","isBrowser","useIsBrowser","EditorWithHeader","ThemeProvider","Theme","lightThemeJson","Playground","transformCode","prismTheme","usePrismTheme","noInline","metastring","SpeedSearchContainer","CollectionSpeedSearchContainer","useSpeedSearchList","listState","otherOutputs","SpeedSearchList","StyledIconLiveIndicator","SpeedSearch","speedSearchState","Tree","itemType","ProgressBarPauseButton","onPausedChange","LazyExampleApp","juiComponents","ExampleApp","darculaThemeJson","highContrastThemeJson","themed","noPadding","CodeBlock","live","scope","ReactLiveScope","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}