{"version":3,"file":"assets/js/a671def7.1d79dea3.js","mappings":"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","sources":["webpack://website/./src/components/ExampleContext.tsx","webpack://website/./src/components/RefToIntellijPlatform.tsx","webpack://website/./docs/components/Button.mdx"],"sourcesContent":["import React, { useEffect, useMemo } from \"react\";\nimport { SSRProvider } from \"@react-aria/ssr\";\nimport darculaTheme from \"../../../jui/themes/darcula.theme.json\";\nimport highContrastTheme from \"../../../jui/themes/HighContrast.theme.json\";\nimport lightTheme from \"../../../jui/themes/intellijlaf.theme.json\";\nimport { Theme, ThemeProvider } from \"../../../jui/src\";\n\nexport type ExampleContextThemeName = \"light\" | \"darcula\" | \"highContrast\";\n\nexport const ExampleContext: React.FC<{\n  themeName?: ExampleContextThemeName;\n}> = ({ children, themeName = \"darcula\" }) => {\n  const themeJson = (\n    {\n      light: lightTheme,\n      highContrast: highContrastTheme,\n      darcula: darculaTheme,\n    } as const\n  )[themeName];\n\n  // IMPORTANT: passing a function that returns Theme is crucial in get it working. Otherwise, ThemeProvider will try\n  // to \"merge\" themes, and the end result is an POJO, with prototype link lost.\n  // @ts-expect-error ThemeJson type is not accurate ATM.\n  const theme = useMemo(() => new Theme(themeJson), [themeJson]);\n\n  useFixDocusaurusStyleBleeds();\n  return (\n    <SSRProvider>\n      <ThemeProvider theme={theme}>{children}</ThemeProvider>\n    </SSRProvider>\n  );\n};\n\n/**\n * TODO: add a surrounding UI for examples, with tools for theme selection for example.\n */\nexport const Example: React.FC = ({ children }) => (\n  <ExampleContext>\n    <div\n      // @ts-expect-error: css prop is not working for some reason\n      css={`\n        background: ${({ theme }) => theme.color(\"*.background\")};\n      `}\n    >\n      {children}\n    </div>\n  </ExampleContext>\n);\n\nexport const withExampleContext = <P extends {}>(\n  Component: React.ComponentType<P>\n) => {\n  function WithExampleContext(props: P) {\n    return (\n      <ExampleContext>\n        <Component {...props} />\n      </ExampleContext>\n    );\n  }\n\n  return WithExampleContext;\n};\n\nconst useFixDocusaurusStyleBleeds = () => {\n  useEffect(() => {\n    const FLAG_CLASSNAME = \"example-context-patch\";\n    if (!document.body.classList.contains(FLAG_CLASSNAME)) {\n      try {\n        undoUseKeyboardNavigation();\n        document.body.classList.add(FLAG_CLASSNAME);\n      } catch (e) {\n        console.error(\"Could not undo useKeyboardNavigation\");\n      }\n    }\n  }, []);\n};\n\n/**\n * Reverts the \"improvement\" [useKeyboardNavigation][1] does :|\n *\n * [1]: https://github.com/facebook/docusaurus/blob/f87a3ead4664b301901c12466cb2c82cd95d141b/packages/docusaurus-theme-common/src/hooks/useKeyboardNavigation.ts#L14\n */\nfunction undoUseKeyboardNavigation() {\n  document\n    .querySelectorAll<HTMLLinkElement>(\"link[rel=stylesheet]\")\n    .forEach((linkEl) => {\n      for (let i = 0; i < linkEl.sheet.cssRules.length; i++) {\n        const rule = linkEl.sheet.cssRules.item(i);\n        if (rule.cssText?.startsWith(\"body:not(.navigation-with-keyboard)\")) {\n          linkEl.sheet.deleteRule(i); // We can change the rule to only disable it within the boundary of example\n        }\n      }\n    });\n}\n","import React from \"react\";\n\n/**\n * To make relation between things in jui and original reference impl in Intellij Platform\n */\nexport const RefToIntellijPlatform = ({\n  path,\n  name,\n}: {\n  path: string;\n  name?: string;\n}) => {\n  return (\n    // TODO: make it some nice box with an icon and a hint text which says something like \"Intellij Platform\" or\n    //  \"Reference\" or something better :D\n    <a\n      href={`https://github.com/JetBrains/intellij-community/blob/master/${path}`}\n      target=\"_blank\"\n    >\n      {name || path.split(\"/\").pop()}\n    </a>\n  );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Button';\nexport const metadata = {\n  \"unversionedId\": \"components/Button\",\n  \"id\": \"components/Button\",\n  \"title\": \"Button\",\n  \"description\": \"Standalone Button with a textual label.\",\n  \"source\": \"@site/docs/components/Button.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Button\",\n  \"permalink\": \"/jui/docs/components/Button\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Button.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Balloon\",\n    \"permalink\": \"/jui/docs/components/Balloon\"\n  },\n  \"next\": {\n    \"title\": \"Checkbox\",\n    \"permalink\": \"/jui/docs/components/Checkbox\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"@site/src/components/RefToIntellijPlatform.tsx\";\nimport { Example } from \"@site/src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"button\"\n    }}>{`Button`}</h1>\n    <p>{`Standalone `}<a parentName=\"p\" {...{\n        \"href\": \"https://jetbrains.github.io/ui/controls/button/\"\n      }}>{`Button`}</a>{` with a textual label.`}</p>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Support for `}<inlineCode parentName=\"li\">{`default`}</inlineCode>{` button UI`}</li>\n      <li parentName=\"ul\">{`Focus management options (`}<inlineCode parentName=\"li\">{`preventFocusOnPress`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`excludeFromTabOrder`}</inlineCode>{`)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}<a parentName=\"li\" {...{\n          \"href\": \"https://jetbrains.github.io/ui/controls/button/#default\"\n        }}>{`Default button behaviour`}</a>{` is not implemented yet. It's\njust the appearance at the moment.`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Platform Specific UI. It's based on Mac UI at the moment.`}</li>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Support for mnemonics.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<>\n  <Button>Button</Button> <br />\n  <br />\n  <Button variant=\"default\">Default</Button> <br />\n  <br />\n  <Button variant=\"icon\">?</Button> <br />\n  <br />\n  <Button isDisabled>Disabled</Button> <br />\n  <br />\n  <Button excludeFromTabOrder>Exclude from tab order</Button> <br />\n  <br />\n  <Button preventFocusOnPress>Prevent focus on press</Button> <br />\n  <br />\n</>\n`}</code></pre>\n    <admonition {...{\n      \"title\": \"Accessibility Caveat\",\n      \"type\": \"caution\"\n    }}><p parentName=\"admonition\">{`Following the original implementation, there is currently no visual feedback for pressed (active) state. That's more of\nan issue when `}<inlineCode parentName=\"p\">{`preventFocusOnPress`}</inlineCode>{` is used.`}</p></admonition>\n    <admonition {...{\n      \"title\": \"focus visibility\",\n      \"type\": \"info\"\n    }}><p parentName=\"admonition\">{`Following the original implementation, the focus ring is visible even when the interaction is done by mouse.\nIt's more common to show focus ring only when interacted with keyboard, but focus being always visible\nmitigates accessibility issue above.`}</p></admonition>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["ExampleContext","children","themeName","themeJson","light","lightTheme","highContrast","highContrastTheme","darcula","darculaTheme","theme","useMemo","Theme","useFixDocusaurusStyleBleeds","Example","useEffect","FLAG_CLASSNAME","document","body","classList","contains","querySelectorAll","forEach","linkEl","i","sheet","cssRules","length","item","cssText","startsWith","deleteRule","add","e","console","error","color","RefToIntellijPlatform","path","name","href","target","split","pop","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}