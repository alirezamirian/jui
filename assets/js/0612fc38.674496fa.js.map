{"version":3,"file":"assets/js/0612fc38.674496fa.js","mappings":"kIAKO,MAAMA,EAAwB,IAM9B,IAN+B,KACpCC,EADoC,KAEpCC,GAII,EACJ,OAGE,qBACEC,KAAI,+DAAiEF,EACrEG,OAAO,UAENF,GAAQD,EAAKI,MAAM,KAAKC,QAdxB,iS,8KCKA,MAAMC,EAAc,GACdC,EAAe,OACfC,EAAW,CACtB,cAAiB,kBACjB,GAAM,kBACN,MAAS,OACT,YAAe,WACf,OAAU,iCACV,cAAiB,aACjB,KAAQ,mBACR,UAAa,4BACb,OAAS,EACT,QAAW,6FACX,KAAQ,GACR,QAAW,UACX,YAAe,GACf,QAAW,kBACX,SAAY,CACV,MAAS,OACT,UAAa,6BAEf,KAAQ,CACN,MAAS,cACT,UAAa,qCAGJC,EAAS,GAUTC,EAAM,CAAC,CAClBC,MAAO,WACPC,GAAI,WACJC,MAAO,GACN,CACDF,MAAO,YACPC,GAAI,YACJC,MAAO,GACN,CACDF,MAAO,oBACPC,GAAI,oBACJC,MAAO,GACN,CACDF,MAAO,OACPC,GAAI,SACJC,MAAO,GACN,CACDF,MAAO,aACPC,GAAI,aACJC,MAAO,GACN,CACDF,MAAO,cACPC,GAAI,cACJC,MAAO,GACN,CACDF,MAAO,iBACPC,GAAI,iBACJC,MAAO,GACN,CACDF,MAAO,YACPC,GAAI,YACJC,MAAO,GACN,CACDF,MAAO,iBACPC,GAAI,iBACJC,MAAO,GACN,CACDF,MAAO,eACPC,GAAI,eACJC,MAAO,GACN,CACDF,MAAO,cACPC,GAAI,cACJC,MAAO,GACN,CACDF,MAAO,sBACPC,GAAI,sBACJC,MAAO,GACN,CACDF,MAAO,8BACPC,GAAI,8BACJC,MAAO,GACN,CACDF,MAAO,oBACPC,GAAI,oBACJC,MAAO,GACN,CACDF,MAAO,cACPC,GAAI,cACJC,MAAO,IAGHC,EAAc,CAClBJ,IAAAA,GAGa,SAASK,EAAT,GAGX,IAH+B,WACjCC,KACGC,GACF,EACD,OAAO,QALS,WAKT,UAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,cACE,GAAM,QADR,SAGA,cACE,GAAM,YADR,aAGA,mBACE,cAAIC,WAAW,MAAf,sBACA,cAAIA,WAAW,MAAf,0BACA,cAAIA,WAAW,MAAf,8DACA,cAAIA,WAAW,MAAf,0BACA,cAAIA,WAAW,MAAf,2DAEF,cACE,GAAM,aADR,cAGA,cACE,UAAa,uBAEb,cAAIA,WAAW,KACb,UAAa,mBACZ,iBAAOA,WAAW,KACjB,KAAQ,WACR,SAAW,EACX,UAAY,IALhB,mHAQF,cACE,GAAM,qBADR,sBAGA,mBACE,cAAIA,WAAW,MAAf,yHAEA,cAAIA,WAAW,MAAf,+DACA,cAAIA,WAAW,MAAf,oMAGF,cACE,GAAM,UADR,SAGA,kBAAG,sBAAYA,WAAW,KAAvB,QAAH,2DAA8G,aAAGA,WAAW,IACxH,KAAQ,gBADkG,eAA9G,yFAIA,oCAAsB,aAAGA,WAAW,IAChC,KAAQ,yBADU,yBAAtB,yFAGyB,sBAAYA,WAAW,KAAvB,SAHzB,qBAIA,cACE,GAAM,cADR,eAGA,kBAAG,sBAAYA,WAAW,KAAvB,QAAH,kDAAqG,sBAAYA,WAAW,KAAvB,QAArG,wGACmC,sBAAYA,WAAW,KAAvB,OADnC,sEACwJ,sBAAYA,WAAW,KAAvB,YADxJ,UAEC,sBAAYA,WAAW,KAAvB,gBAFD,SAEkE,sBAAYA,WAAW,KAAvB,OAFlE,uFAGA,eACE,UAAa,mDACZ,eAAKA,WAAW,MACf,UAAa,uBACZ,cAAIA,WAAW,QAAM,gBAAMA,WAAW,KACnC,UAAa,oBACZ,eAAKA,WAAW,OACf,MAAS,6BACT,MAAS,KACT,OAAU,KACV,QAAW,cACV,gBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,ycATZ,SAU8C,eAAKA,WAAW,MAC/D,UAAa,uBACZ,aAAGA,WAAW,OAAd,yBAA6C,sBAAYA,WAAW,KAAvB,QAA7C,4BAAyH,sBAAYA,WAAW,KAAvB,aAAzH,0HAEL,eACE,UAAa,mDACZ,eAAKA,WAAW,MACf,UAAa,uBACZ,cAAIA,WAAW,QAAM,gBAAMA,WAAW,KACnC,UAAa,oBACZ,eAAKA,WAAW,OACf,MAAS,6BACT,MAAS,KACT,OAAU,KACV,QAAW,cACV,gBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,ycATZ,SAU8C,eAAKA,WAAW,MAC/D,UAAa,uBACZ,aAAGA,WAAW,OAAd,WAA+B,sBAAYA,WAAW,KAAvB,QAA/B,qBAAoG,sBAAYA,WAAW,KAAvB,QAApG,sEAA0N,sBAAYA,WAAW,KAAvB,SAA1N,4BAEL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,wRAkBL,cACE,GAAM,eADR,gBAGA,sFAAwE,sBAAYA,WAAW,KAAvB,QAAxE,OAA+H,sBAAYA,WAAW,KAAvB,SAA/H,uLAE0B,sBAAYA,WAAW,KAAvB,QAF1B,QAEkF,sBAAYA,WAAW,KAAvB,WAFlF,MAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,4WAwBL,cACE,GAAM,kBADR,mBAGA,kBAAG,sBAAYA,WAAW,KAAvB,kBAAH,4BAAyF,sBAAYA,WAAW,KAAvB,QAAzF,qDAA8L,sBAAYA,WAAW,KAAvB,kBAA9L,uBAEA,mBACE,cAAIA,WAAW,MAAf,+CACA,cAAIA,WAAW,MAAf,sCACA,cAAIA,WAAW,MAAf,0CAEF,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,gLAeL,cACE,GAAM,aADR,cAGA,8DAAgD,sBAAYA,WAAW,KAAvB,gBAAhD,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,uKAUL,iCAAmB,sBAAYA,WAAW,KAAvB,kBAAnB,qCAAkH,sBAAYA,WAAW,KAAvB,YAAlH,gBAAsL,sBAAYA,WAAW,KAAvB,gBAAtL,gBACA,eACE,UAAa,sDACZ,eAAKA,WAAW,MACf,UAAa,uBACZ,cAAIA,WAAW,QAAM,gBAAMA,WAAW,KACnC,UAAa,oBACZ,eAAKA,WAAW,OACf,MAAS,6BACT,MAAS,KACT,OAAU,KACV,QAAW,cACV,gBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,sgBATZ,UAU+C,eAAKA,WAAW,MAChE,UAAa,uBACZ,aAAGA,WAAW,OAAd,oCAAwD,sBAAYA,WAAW,KAAvB,kBAAxD,yEACL,cACE,GAAM,kBADR,mBAGA,wDAA0C,sBAAYA,WAAW,KAAvB,gBAA1C,iBAAmH,sBAAYA,WAAW,KAAvB,QAAnH,MACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,gJAWL,cACE,GAAM,gBADR,iBAGA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,u4CAwDL,cACE,GAAM,eADR,gBAGA,kBAAG,sBAAYA,WAAW,KAAvB,eAAH,uKACuD,sBAAYA,WAAW,KAAvB,YADvD,QACmH,sBAAYA,WAAW,KAAvB,eADnH,qIAGA,eACE,UAAa,iDACZ,eAAKA,WAAW,MACf,UAAa,uBACZ,cAAIA,WAAW,QAAM,gBAAMA,WAAW,KACnC,UAAa,oBACZ,eAAKA,WAAW,OACf,MAAS,6BACT,MAAS,KACT,OAAU,KACV,QAAW,cACV,gBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,yLATZ,UAU+C,eAAKA,WAAW,MAChE,UAAa,uBACZ,aAAGA,WAAW,OAAd,2PAGL,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,cACd,MAAQ,EACR,QAAU,GAJT,g7BA4CL,cACE,GAAM,uBADR,wBAGA,0BACA,cACE,GAAM,+BADR,gCAGA,0BACA,cACE,GAAM,qBADR,sBAGA,yBAAW,sBAAYA,WAAW,KAAvB,gBAAX,uIAC6B,sBAAYA,WAAW,KAAvB,gBAD7B,QAC6F,sBAAYA,WAAW,KAAvB,SAD7F,6GAGA,cACE,GAAM,eADR,gBAGA,kBAAG,sBAAYA,WAAW,KAAvB,wBAAH,wHACe,aAAGA,WAAW,IACzB,KAAQ,UADG,QADf,MAGuB,aAAGA,WAAW,IACjC,KAAQ,UADW,QAHvB,yDAMA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,iBACd,MAAQ,EACR,WAAa,GAJZ,w8BAuCL,eACE,UAAa,iDACZ,eAAKA,WAAW,MACf,UAAa,uBACZ,cAAIA,WAAW,QAAM,gBAAMA,WAAW,KACnC,UAAa,oBACZ,eAAKA,WAAW,OACf,MAAS,6BACT,MAAS,KACT,OAAU,KACV,QAAW,cACV,gBAAMA,WAAW,MAChB,SAAY,UACZ,EAAK,yLATZ,UAU+C,eAAKA,WAAW,MAChE,UAAa,uBACZ,aAAGA,WAAW,OAAd,qKACqC,sBAAYA,WAAW,KAAvB,wBADrC,yKAOTJ,EAAWK,gBAAiB","sources":["webpack://website/./src/components/RefToIntellijPlatform.tsx","webpack://website/./docs/components/Menu.mdx"],"sourcesContent":["import React from \"react\";\n\n/**\n * To make relation between things in jui and original reference impl in Intellij Platform\n */\nexport const RefToIntellijPlatform = ({\n  path,\n  name,\n}: {\n  path: string;\n  name?: string;\n}) => {\n  return (\n    // TODO: make it some nice box with an icon and a hint text which says something like \"Intellij Platform\" or\n    //  \"Reference\" or something better :D\n    <a\n      href={`https://github.com/JetBrains/intellij-community/blob/master/${path}`}\n      target=\"_blank\"\n    >\n      {name || path.split(\"/\").pop()}\n    </a>\n  );\n};\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag mdx.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Menu';\nexport const metadata = {\n  \"unversionedId\": \"components/Menu\",\n  \"id\": \"components/Menu\",\n  \"title\": \"Menu\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Menu.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Menu\",\n  \"permalink\": \"/jui/docs/components/Menu\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Menu.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"List\",\n    \"permalink\": \"/jui/docs/components/List\"\n  },\n  \"next\": {\n    \"title\": \"ModalWindow\",\n    \"permalink\": \"/jui/docs/components/ModalWindow\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { RefToIntellijPlatform } from \"@site/src/components/RefToIntellijPlatform.tsx\";\nimport {\n  Static,\n  MenuWithTrigger,\n} from \"@intellij-platform/core/Menu/Menu.stories\";\nimport { Example } from \"@site/src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Remaining',\n  id: 'remaining',\n  level: 4\n}, {\n  value: 'Known differences',\n  id: 'known-differences',\n  level: 4\n}, {\n  value: 'Menu',\n  id: 'menu-1',\n  level: 2\n}, {\n  value: 'Static API',\n  id: 'static-api',\n  level: 3\n}, {\n  value: 'Dynamic API',\n  id: 'dynamic-api',\n  level: 3\n}, {\n  value: 'MenuItemLayout',\n  id: 'menuitemlayout',\n  level: 3\n}, {\n  value: 'Selection',\n  id: 'selection',\n  level: 3\n}, {\n  value: 'Disabled items',\n  id: 'disabled-items',\n  level: 3\n}, {\n  value: 'Full Example',\n  id: 'full-example',\n  level: 3\n}, {\n  value: 'MenuTrigger',\n  id: 'menutrigger',\n  level: 2\n}, {\n  value: 'Positioning options',\n  id: 'positioning-options',\n  level: 3\n}, {\n  value: 'Controlled and uncontrolled',\n  id: 'controlled-and-uncontrolled',\n  level: 3\n}, {\n  value: 'Focus restoration',\n  id: 'focus-restoration',\n  level: 3\n}, {\n  value: 'ContextMenu',\n  id: 'contextmenu',\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"menu\"\n    }}>{`Menu`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Nested menu items`}</li>\n      <li parentName=\"ul\">{`Check-able menu items`}</li>\n      <li parentName=\"ul\">{`Default menu layout with icon, text and keyboard shortcut`}</li>\n      <li parentName=\"ul\">{`Full keyboard support`}</li>\n      <li parentName=\"ul\">{`Viewport-aware positioning with respect to a trigger.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Advanced hover behaviour, which detects attempt to go to submenu and doesn't close the menu on mouse out.`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"known-differences\"\n    }}>{`Known differences`}</h4>\n    <ul>\n      <li parentName=\"ul\">{`In the reference impl, hovering over disabled items removes previously highlighted menu item. Here it preserves\nit.`}</li>\n      <li parentName=\"ul\">{`In the reference impl, there is a delay in opening submenu`}</li>\n      <li parentName=\"ul\">{`Moving mouse out of the menu de-highlights currently highlighted menu, if it's not a menu item with a nested menu.\nHere menu items are not de-highlighted when mouse goes away from the menu.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"menu-1\"\n    }}>{`Menu`}</h2>\n    <p><inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` component implements the UI of the menu itself. While `}<a parentName=\"p\" {...{\n        \"href\": \"#menutrigger\"\n      }}>{`MenuTrigger`}</a>{` implements how the menu is opened via a\ntrigger and positioned with respect to it.`}</p>\n    <p>{`Similar to all `}<a parentName=\"p\" {...{\n        \"href\": \"../guides/Collections\"\n      }}>{`collection components`}</a>{`, there are two ways for defining menu items: as jsx, in\nchildren (static), and via `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` prop (dynamic).`}</p>\n    <h3 {...{\n      \"id\": \"static-api\"\n    }}>{`Static API`}</h3>\n    <p><inlineCode parentName=\"p\">{`Item`}</inlineCode>{` component can be rendered in the children of `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{` to define the menu items. It's best suited for the use cases\nwhere the menu items are static. Use `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` to give each item a unique identifier, which is used in props on `}<inlineCode parentName=\"p\">{`onAction`}</inlineCode>{`,\nor `}<inlineCode parentName=\"p\">{`disabledKeys`}</inlineCode>{`. If `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` is not provided, an index-based auto-generated key will be assigned to each item.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-tip alert alert--success\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"12\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 12 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"\n              }}></path></svg></span>{`tip`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`If the content of an `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` is not plain text, use `}<inlineCode parentName=\"p\">{`textValue`}</inlineCode>{` to specify the plain text value for the item. It's needed\nfor making the menu item accessible via type-to-select.`}</p></div></div>\n    <div {...{\n      \"className\": \"admonition admonition-tip alert alert--success\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"12\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 12 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z\"\n              }}></path></svg></span>{`tip`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Render `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`s inside another `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` to create nested menu. The parent item's content is provided via `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{` prop, in\nthis case.`}</p></div></div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Item, Menu } from \"@intellij-platform/core\";\n\n<Menu>\n  <Item key=\"copy\">Copy</Item>\n  <Item key=\"cut\" textValue=\"Cut\">\n    <span>Cut</span>\n  </Item>\n  <Item title=\"History\">\n    <Item>Show History</Item>\n    <Item>Put Label</Item>\n  </Item>\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dynamic-api\"\n    }}>{`Dynamic API`}</h3>\n    <p>{`While you can also dynamically map a list of objects to rendered `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`s, `}<inlineCode parentName=\"p\">{`items`}</inlineCode>{` prop is designed for dynamically\nrendering menu items based on an array of objects. Then you use a render function in children, to specify how each\nitem should be mapped to an `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`Section`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { Item, Menu } from \"@intellij-platform/core\";\n\n<Menu\n  items={[\n    { name: \"Copy\" },\n    { name: \"Cut\" },\n    {\n      name: \"History\",\n      children: [{ name: \"Show History\" }, { name: \"Put Label\" }],\n    },\n  ]}\n>\n  {(item) => (\n    <Item key={item.name} childItems={item.children}>\n      {item.name}\n    </Item>\n  )}\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"menuitemlayout\"\n    }}>{`MenuItemLayout`}</h3>\n    <p><inlineCode parentName=\"p\">{`MenuItemLayout`}</inlineCode>{` can be rendered inside `}<inlineCode parentName=\"p\">{`Item`}</inlineCode>{`, when plain text is not enough for a menu item. `}<inlineCode parentName=\"p\">{`MenuItemLayout`}</inlineCode>{` has\nthree parts:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`An icon rendered before the menu item text`}</li>\n      <li parentName=\"ul\">{`The text content of the menu item`}</li>\n      <li parentName=\"ul\">{`Shortcut rendered on the right side.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu>\n  <Item>\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/copy\"} />}\n      content=\"Copy\"\n      shortcut={\"⌘C\"}\n    />\n  </Item>\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"selection\"\n    }}>{`Selection`}</h3>\n    <p>{`Menu items can be marked as selected via `}<inlineCode parentName=\"p\">{`selectedKeys`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu selectedKeys={[\"enablePreviewTab\"]}>\n  <Item key=\"enablePreviewTab\">Enable Preview Tab</Item>\n  <Item key=\"fileNesting\">File Nesting...</Item>\n</Menu>\n`}</code></pre>\n    <p>{`There is no `}<inlineCode parentName=\"p\">{`onSelectedKeys`}</inlineCode>{` change callback. You should use `}<inlineCode parentName=\"p\">{`onAction`}</inlineCode>{` and adjust `}<inlineCode parentName=\"p\">{`selectedKeys`}</inlineCode>{` if needed.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-note alert alert--secondary\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z\"\n              }}></path></svg></span>{`note`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`If a selected menu item renders `}<inlineCode parentName=\"p\">{`MenuItemLayout`}</inlineCode>{` with an icon, the checkmark icon will replace the menu item icon.`}</p></div></div>\n    <h3 {...{\n      \"id\": \"disabled-items\"\n    }}>{`Disabled items`}</h3>\n    <p>{`Menu items can be disabled through `}<inlineCode parentName=\"p\">{`disabledKeys`}</inlineCode>{` prop on the `}<inlineCode parentName=\"p\">{`Menu`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu disabledKeys={[\"paste\"]}>\n  <Item key=\"copy\">Copy</Item>\n  <Item key=\"paste\">Paste</Item>\n  <Item key=\"cut\">Cut</Item>\n</Menu>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"full-example\"\n    }}>{`Full Example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<Menu\n  disabledKeys={[\"jumpToExternalEditor\"]}\n  onAction={(key) => alert(\\`Selected: \\${key}\\`)}\n>\n  <Item textValue=\"Cut\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n      content=\"Cut\"\n      shortcut={\"⌘X\"}\n    />\n  </Item>\n  <Item textValue=\"Copy\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/copy\"} />}\n      content=\"Copy\"\n      shortcut={\"⌘C\"}\n    />\n  </Item>\n  <Item textValue=\"Paste\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/menu-paste\"} />}\n      content=\"Paste\"\n      shortcut={\"⌘V\"}\n    />\n  </Item>\n  <Divider />\n  <Item>Reformat Code</Item>\n  <Item textValue=\"Optimize Imports\">\n    <MenuItemLayout content=\"Optimize Imports\" shortcut={\"⌃⌥O\"} />\n  </Item>\n  <Item textValue=\"Delete\">\n    <MenuItemLayout content=\"Delete\" shortcut={\"⌫\"} />\n  </Item>\n  <Divider />\n  <Item textValue=\"Compare with...\">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={\"actions/diff\"} />}\n      content=\"Compare with...\"\n    />\n  </Item>\n  <Divider />\n  <Item key=\"jumpToExternalEditor\" textValue=\"Jump to external editor\">\n    <MenuItemLayout content=\"Jump to external editor\" shortcut={\"⌥⌘F4\"} />\n  </Item>\n  <Divider />\n  <Item title={<MenuItemLayout content=\"History\" />}>\n    <Item>Show History</Item>\n    <Item>Put label</Item>\n  </Item>\n</Menu>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"menutrigger\"\n    }}>{`MenuTrigger`}</h2>\n    <p><inlineCode parentName=\"p\">{`MenuTrigger`}</inlineCode>{` links a menu to a trigger for the menu. It handles the opening/closing logic and renders the menu as an\noverlay, positioned with respect to the trigger element. `}<inlineCode parentName=\"p\">{`children`}</inlineCode>{` of `}<inlineCode parentName=\"p\">{`MenuTrigger`}</inlineCode>{` must be a render function which\nrenders the trigger. It's invoked with props and ref to be passed down to the trigger element.`}</p>\n    <div {...{\n      \"className\": \"admonition admonition-info alert alert--info\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"\n              }}></path></svg></span>{`info`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`Currently, menu is closed when a menu action is triggered. For some actions (e.g. toggleable view options), that's not\nthe best UX. In future releases, there will be a way to control if the menu should be kept open after the triggered\naction.`}</p></div></div>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`<MenuTrigger\n  renderMenu={({ menuProps }) => (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        console.log(key);\n      }}\n    >\n      <Item textValue=\"Cut\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/menu-cut\"} />}\n          content=\"Cut\"\n          shortcut={\"⌘X\"}\n        />\n      </Item>\n      <Item textValue=\"Copy\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/copy\"} />}\n          content=\"Copy\"\n          shortcut={\"⌘C\"}\n        />\n      </Item>\n      <Item textValue=\"Paste\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/menu-paste\"} />}\n          content=\"Paste\"\n          shortcut={\"⌘V\"}\n        />\n      </Item>\n    </Menu>\n  )}\n>\n  {(props, ref) => (\n    <ActionButton {...props} ref={ref}>\n      <PlatformIcon icon={\"general/gearPlain\"} />\n    </ActionButton>\n  )}\n</MenuTrigger>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"positioning-options\"\n    }}>{`Positioning options`}</h3>\n    <p>{`TODO`}</p>\n    <h3 {...{\n      \"id\": \"controlled-and-uncontrolled\"\n    }}>{`Controlled and uncontrolled`}</h3>\n    <p>{`TODO`}</p>\n    <h3 {...{\n      \"id\": \"focus-restoration\"\n    }}>{`Focus restoration`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`restoreFocus`}</inlineCode>{` to have focus restored to the trigger, after the menu is closed. While it's an accessibility best\npractice to restore the focus, `}<inlineCode parentName=\"p\">{`restoreFocus`}</inlineCode>{` is `}<inlineCode parentName=\"p\">{`false`}</inlineCode>{` by default. That is based on the observed majority of the use\ncases in Intellij Platform applications.`}</p>\n    <h2 {...{\n      \"id\": \"contextmenu\"\n    }}>{`ContextMenu`}</h2>\n    <p><inlineCode parentName=\"p\">{`ContextMenuContainer`}</inlineCode>{` provides a generic container component that is capable of opening a context menu. You can use it\nas a wrapper for `}<a parentName=\"p\" {...{\n        \"href\": \"./List\"\n      }}>{`List`}</a>{`, `}<a parentName=\"p\" {...{\n        \"href\": \"./Tree\"\n      }}>{`Tree`}</a>{`, or anything else, to let them have a context menu.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\",\n        \"metastring\": \"live noPadding\",\n        \"live\": true,\n        \"noPadding\": true\n      }}>{`<ContextMenuContainer\n  renderMenu={() => (\n    <Menu>\n      <Item textValue=\"Open in Right Split\">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={\"actions/splitVertically.svg\"} />}\n          content=\"Open in Right Split\"\n          shortcut={\"⇧⏎\"}\n        />\n      </Item>\n      <Item textValue=\"Open in Right Split\">\n        <MenuItemLayout\n          content=\"Open in Split with Chooser...\"\n          shortcut={\"⌥⇧⏎\"}\n        />\n      </Item>\n      <Item title=\"Open in\">\n        <Item>Finder</Item>\n        <Item>Terminal</Item>\n        <Item textValue=\"Github\">\n          <MenuItemLayout\n            icon={<PlatformIcon icon={\"vcs/vendors/github.svg\"} />}\n            content=\"Github\"\n          />\n        </Item>\n      </Item>\n    </Menu>\n  )}\n>\n  <div style={{ padding: \"5vw\", textAlign: \"center\" }}>\n    Right click somewhere to open the context menu.\n  </div>\n</ContextMenuContainer>\n`}</code></pre>\n    <div {...{\n      \"className\": \"admonition admonition-info alert alert--info\"\n    }}><div parentName=\"div\" {...{\n        \"className\": \"admonition-heading\"\n      }}><h5 parentName=\"div\"><span parentName=\"h5\" {...{\n            \"className\": \"admonition-icon\"\n          }}><svg parentName=\"span\" {...{\n              \"xmlns\": \"http://www.w3.org/2000/svg\",\n              \"width\": \"14\",\n              \"height\": \"16\",\n              \"viewBox\": \"0 0 14 16\"\n            }}><path parentName=\"svg\" {...{\n                \"fillRule\": \"evenodd\",\n                \"d\": \"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z\"\n              }}></path></svg></span>{`info`}</h5></div><div parentName=\"div\" {...{\n        \"className\": \"admonition-content\"\n      }}><p parentName=\"div\">{`In future versions, there might be an integrated support for context menu in List, Tree, etc. But for now it's done\njust by composition of those components and `}<inlineCode parentName=\"p\">{`ContextMenuContainer`}</inlineCode>{`. A caveat to have in mind is the extra wrapper\nelement that will be added if you want context menu, which may need some styling to have no effect on the layout.`}</p></div></div>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["RefToIntellijPlatform","path","name","href","target","split","pop","frontMatter","contentTitle","metadata","assets","toc","value","id","level","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}