{"version":3,"file":"assets/js/e41fee28.7dc75167.js","mappings":"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","sources":["webpack://website/../jui/src/ActionSystem/ActionGroup.tsx","webpack://website/../jui/src/ActionSystem/ActionShortcut.tsx","webpack://website/../jui/src/ActionSystem/useShortcut.ts","webpack://website/../jui/src/ActionSystem/ActionsProvider.tsx","webpack://website/../jui/src/ActionSystem/CommonActionIds.ts","webpack://website/../jui/src/ActionSystem/KeymapProvider.tsx","webpack://website/../jui/src/ActionSystem/Shortcut.ts","webpack://website/../jui/src/ActionSystem/components/ActionButton.tsx","webpack://website/../jui/src/ActionSystem/components/ActionsMenu.tsx","webpack://website/../jui/src/ActionSystem/components/useCreateDefaultActionGroup.tsx","webpack://website/../jui/src/ActionSystem/defaultKeymap.tsx","webpack://website/../jui/src/ActionSystem/shortcutToString.ts","webpack://website/../jui/src/ActionSystem/useActionGroup.tsx","webpack://website/../jui/src/Balloon/Balloon.styled.tsx","webpack://website/../jui/src/Balloon/Balloon.tsx","webpack://website/../jui/src/Balloon/BalloonManager.tsx","webpack://website/../jui/src/Balloon/StyledBalloonsStack.tsx","webpack://website/../jui/src/Button/BareButton.tsx","webpack://website/../jui/src/Button/StyledButton.tsx","webpack://website/../jui/src/Button/Button.tsx","webpack://website/../jui/src/Checkbox/Checkbox.tsx","webpack://website/../jui/src/Checkbox/CheckboxIcon.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemLayout.tsx","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Collections/useCollectionRef.ts","webpack://website/../jui/src/Collections/useCollectionSearchInput.ts","webpack://website/../jui/src/Icon/AutoHoverPlatformIcon.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/IconButton/IconButton.tsx","webpack://website/../jui/src/IconButtonWithMenu/IconButtonWithMenu.tsx","webpack://website/../jui/src/Img.tsx","webpack://website/../jui/src/InputField/Input.tsx","webpack://website/../jui/src/Label/StyledLabel.ts","webpack://website/../jui/src/InputField/InputField.tsx","webpack://website/../jui/src/Link/StyledLink.tsx","webpack://website/../jui/src/Link/Link.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/listItemRenderer.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/Menu/ContextMenuContainer.tsx","webpack://website/../jui/src/Menu/useContextMenu.tsx","webpack://website/../jui/src/Collections/patchCollectionProps.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/Menu/SpeedSearchMenu.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/Submenu.tsx","webpack://website/../jui/src/Menu/_useSubmenu.ts","webpack://website/../jui/src/Menu/_useSubmenuState.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/renderMenuNodes.tsx","webpack://website/../jui/src/Overlay/UNSAFE_React17SuspenseFix.tsx","webpack://website/../jui/src/ModalWindow/ModalWindow.tsx","webpack://website/../jui/src/ModalWindow/WindowContext.ts","webpack://website/../jui/src/ModalWindow/WindowFooter.tsx","webpack://website/../jui/src/ModalWindow/WindowHeader.tsx","webpack://website/../jui/src/ModalWindow/WindowLayout.tsx","webpack://website/../jui/src/ModalWindow/WindowManager.tsx","webpack://website/../jui/src/Overlay/Overlay.tsx","webpack://website/../jui/src/Overlay/OverlayInteractionHandler.tsx","webpack://website/../jui/src/Overlay/OverlayMoveHandle.tsx","webpack://website/../jui/src/Overlay/OverlayResizeHandles.tsx","webpack://website/../jui/src/Overlay/bounds-helpers.tsx","webpack://website/../jui/src/utils/useDebounce.ts","webpack://website/../jui/src/Overlay/useContentSize.tsx","webpack://website/../jui/src/Overlay/useResizableMovableOverlay.tsx","webpack://website/../jui/src/Popup/Popup.tsx","webpack://website/../jui/src/Popup/_useDialog.ts","webpack://website/../jui/src/utils/mergeNonNullProps.tsx","webpack://website/../jui/src/Popup/PopupContext.tsx","webpack://website/../jui/src/Popup/PopupHeader.tsx","webpack://website/../jui/src/Popup/PopupLayout.tsx","webpack://website/../jui/src/Popup/PopupManager.tsx","webpack://website/../jui/src/Popup/PopupTrigger.tsx","webpack://website/../jui/src/Popup/StyledPopupHint.tsx","webpack://website/../jui/src/ProgressBar/ProgressBar.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarStopButton.tsx","webpack://website/../jui/src/ResizableView.tsx","webpack://website/../jui/src/Resizer/BottomResizer.tsx","webpack://website/../jui/src/Resizer/HorizontalResizer.tsx","webpack://website/../jui/src/Resizer/LeftResizer.tsx","webpack://website/../jui/src/Resizer/RightResizer.tsx","webpack://website/../jui/src/Resizer/TopResizer.tsx","webpack://website/../jui/src/Resizer/VerticalResizer.tsx","webpack://website/../jui/src/Resizer/useResizer.ts","webpack://website/../jui/src/SearchInput/SearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StatusBar/StatusBar.tsx","webpack://website/../jui/src/StatusBar/StatusBarWidget.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabCloseButton.tsx","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useHasOverflow.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabContent.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Theme/parseColorString.ts","webpack://website/../jui/src/Theme/Color.ts","webpack://website/../jui/src/ThreeViewSplitter/ThreeViewSplitter.tsx","webpack://website/../jui/src/ToolWindows/FloatView.tsx","webpack://website/../jui/src/ToolWindows/FloatToolWindows.tsx","webpack://website/../jui/src/ToolWindows/MovableToolWindowStripeProvider.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowOuterLayout.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsLayoutState.ts","webpack://website/../jui/src/ToolWindows/createGetDropPosition.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripeButton.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/useElementMove.tsx","webpack://website/../jui/src/ToolWindows/findEffectiveBackgroundColor.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/UndockSide.tsx","webpack://website/../jui/src/ToolWindows/ToolWindows.tsx","webpack://website/../jui/src/ToolWindows/useOnFocusLost.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowStateProvider.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsState.ts","webpack://website/../jui/src/ToolWindows/utils.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowSettingsIconMenu.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowHeader.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowToolbarButton.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindows.tsx","webpack://website/../jui/src/ToolWindowsImpl/MultiViewToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowActionIds.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowActions.tsx","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowsActions.tsx","webpack://website/../jui/src/Toolbar/Toolbar.tsx","webpack://website/../jui/src/Tooltip/ActionHelpTooltip.tsx","webpack://website/../jui/src/Tooltip/ActionTooltip.tsx","webpack://website/../jui/src/Tooltip/PositionedTooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/Tooltip.tsx","webpack://website/../jui/src/Tooltip/TooltipContext.tsx","webpack://website/../jui/src/Tooltip/TooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/TooltipTriggerAndOverlay.tsx","webpack://website/../jui/src/Tooltip/ValidationTooltip.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/StyledTreeNode.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Tree/__copied__TreeCollection.ts","webpack://website/../jui/src/Tree/getSingleChildrenKeys.ts","webpack://website/../jui/src/Tree/TreeSelectionManager.ts","webpack://website/../jui/src/Tree/useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/TreeActions/useTreeActions.tsx","webpack://website/../jui/src/TreeCheckboxes/NestedSelection.ts","webpack://website/../jui/src/TreeCheckboxes/SpeedSearchTreeWithCheckboxes.tsx","webpack://website/../jui/src/TreeCheckboxes/TreeNodeCheckbox.tsx","webpack://website/../jui/src/TreeCheckboxes/useNestedSelectionState.ts","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/selection/useSelectableItem.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/array-utils.ts","webpack://website/../jui/src/utils/interaction-utils/textSelection.ts","webpack://website/../jui/src/utils/interaction-utils/useMove.tsx","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/overflow-utils/OverflowObserver.ts","webpack://website/../jui/src/utils/overflow-utils/useOverflowObserver.tsx","webpack://website/../jui/src/utils/tree-utils.ts","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useEventCallback.ts","webpack://website/../jui/src/utils/useFocusForwarder.ts","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/src/utils/immutableSet.ts","webpack://website/../jui/src/utils/useSet.ts","webpack://website/./src/components/ApiDescription.tsx","webpack://website/./src/components/EmbeddedStory.tsx","webpack://website/./src/theme/CodeBlock/Expandable.tsx","webpack://website/./src/theme/CodeBlock/Playground.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchContainer.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContainer.tsx","webpack://website/../jui/src/List/SpeedSearchList/useSpeedSearchList.ts","webpack://website/../jui/src/List/SpeedSearchList/SpeedSearchList.tsx","webpack://website/../jui/src/ActionSystem/components/ActionGroupMenu.tsx","webpack://website/../jui/src/Icon/StyledIconLiveIndicator.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearch.tsx","webpack://website/../jui/src/Tree/Tree.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarPauseButton.tsx","webpack://website/../jui/src/Tooltip/HelpTooltip.tsx","webpack://website/./src/theme/ReactLiveScope/index.js","webpack://website/./src/theme/Playground/style-overrides.module.css","webpack://website/./src/theme/CodeBlock/index.js","webpack://website/./docs/components/Popup.mdx"],"sourcesContent":["import {\n  Action,\n  ActionDefinition,\n} from \"@intellij-platform/core/ActionSystem/Action\";\n\nexport type ActionInResolvedGroup = Action & { parent: ResolvedActionGroup };\n\nexport interface MutableActionGroup extends Action {\n  children: Action[];\n  /**\n   * Whether the action group is searchable. See {@link getAvailableActionsFor}.\n   */\n  isSearchable?: boolean;\n  /**\n   * If the action group should be rendered as a popup (submenu), in menus.\n   */\n  isPopup?: boolean;\n}\nexport type ActionGroup = Readonly<MutableActionGroup>;\nexport interface ResolvedActionGroup extends ActionGroup {\n  parent: ResolvedActionGroup | null;\n  children: ActionInResolvedGroup[];\n}\nexport interface ActionGroupDefinition extends ActionDefinition {\n  children: ActionDefinition[]; // Should DividerItem be supported first-class here?\n  /**\n   * Whether the action group is searchable. See {@link getAvailableActionsFor}.\n   */\n  isSearchable?: boolean;\n  /**\n   * If the action group should be rendered as a popup (submenu), in menus.\n   */\n  isPopup?: boolean;\n}\n\nexport function isInResolvedActionGroup(\n  action: Action\n): action is ActionInResolvedGroup {\n  return \"parent\" in action;\n}\nexport function isActionGroup(action: Action): action is ActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isResolvedActionGroup<T extends Action>(\n  action: Action\n): action is ResolvedActionGroup {\n  return \"children\" in action && \"parent\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isActionGroupDefinition(\n  action: ActionDefinition\n): action is ActionGroupDefinition {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n","import React from \"react\";\nimport { useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\n\n/**\n * Renders the first keyboard shortcut for the action specified by {@param actionId}, based on the keymap context.\n * if {@param children} is provided, treats it as a render function that receives the shortcut string.\n */\nexport const ActionShortcut = ({\n  actionId,\n  children,\n}: {\n  actionId: string;\n  children?: (shortcut: string) => React.ReactNode;\n}) => {\n  const getShortcut = useGetActionShortcut();\n  const shortcutString = getShortcut(actionId);\n  return (\n    <>\n      {shortcutString && (children ? children(shortcutString) : shortcutString)}\n    </>\n  );\n};\n\n/**\n * Returns a function that gets first keyboard shortcut for the action specified by `actionId`, based on the\n * keymap context.\n */\nexport const useGetActionShortcut = (): ((actionId: string) => string) => {\n  const keymap = useKeymap();\n  return (actionId: string) => {\n    const keyboardShortcut = keymap?.[actionId]?.find(\n      ({ type }) => type === \"keyboard\"\n    );\n    return keyboardShortcut ? shortcutToString(keyboardShortcut) : \"\";\n  };\n};\n","import React, { KeyboardEventHandler, useRef } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  isKeyboardShortcut,\n  KeyboardShortcut,\n  KeyStroke,\n  Shortcut,\n  supportedModifiers,\n} from \"./Shortcut\";\n\nexport function useShortcuts(\n  shortcuts: { [actionId: string]: ReadonlyArray<Shortcut> },\n  onAction: (\n    actionId: string,\n    args: {\n      event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n    }\n  ) => void | boolean,\n  {\n    useCapture = false,\n  }: {\n    /**\n     * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n     * a descendant element handles events in capture phase, and that conflicts with an action.\n     */\n    useCapture?: boolean;\n  } = {}\n) {\n  const firstKeyActivatedShortcutsRef = useRef<\n    Array<{ actionId: string; shortcut: KeyboardShortcut }>\n  >([]);\n  const secondStrokeResetTimerIdRef = useRef<number | null>(null);\n  const onKeyDown: KeyboardEventHandler<HTMLElement> = useEventCallback((e) => {\n    // TODO: repeated key downs can trigger an action repeatedly, in the original impl. Example: expand/shrink selection\n    if (isModifierOnly(e.nativeEvent) || e.repeat) {\n      return;\n    }\n    // firstKeyActivatedShortcutsRef will be re-adjusted in any case. Cleaning whatever scheduled reset\n    if (secondStrokeResetTimerIdRef.current !== null) {\n      window.clearTimeout(secondStrokeResetTimerIdRef.current);\n    }\n\n    function triggerAction(actionId: string) {\n      const result = onAction(actionId, { event: e });\n      if (result !== false) {\n        // TODO: make sure about how propagation should be stopped and/or controlled\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n    // If there are keyboard shortcuts that are half way handled (first keystroke triggered already, and we are within\n    // the valid wait for the second keystroke), they should be prioritized over first keystroke matching.\n    if (firstKeyActivatedShortcutsRef.current.length > 0) {\n      firstKeyActivatedShortcutsRef.current.some(({ shortcut, actionId }) => {\n        if (isKeyMatch(shortcut.secondKeyStroke, e, true)) {\n          triggerAction(actionId);\n          return true;\n        }\n      });\n      firstKeyActivatedShortcutsRef.current = [];\n    } else {\n      const firstKeyMatches = Object.entries(shortcuts)\n        .flatMap(([actionId, shortcuts]) =>\n          shortcuts.map((shortcut) => ({ actionId, shortcut }))\n        )\n        .filter(\n          (\n            input\n          ): input is {\n            actionId: string;\n            shortcut: KeyboardShortcut;\n          } => isKeyboardShortcut(input.shortcut)\n        )\n        .filter(({ shortcut }) => isKeyMatch(shortcut.firstKeyStroke, e));\n\n      firstKeyActivatedShortcutsRef.current = firstKeyMatches.filter(\n        ({ shortcut, actionId }) => shortcut.secondKeyStroke\n      );\n\n      if (firstKeyActivatedShortcutsRef.current.length > 0) {\n        secondStrokeResetTimerIdRef.current = window.setTimeout(() => {\n          firstKeyActivatedShortcutsRef.current = [];\n        }, 2000);\n        document.addEventListener(\n          \"keydown\",\n          () => {\n            document.addEventListener(\n              \"keyup\",\n              () => {\n                firstKeyActivatedShortcutsRef.current = [];\n              },\n              { once: true }\n            );\n          },\n          //  by passing capture: true, we skip the current keydown event, since it's already passed capture phase\n          { once: true, capture: true }\n        );\n      } else if (firstKeyMatches.length > 0) {\n        triggerAction(firstKeyMatches[0].actionId);\n      }\n    }\n  });\n  const shortcutHandlerProps = {\n    /**\n     * by setting onKeyDownCapture is set instead of onKeyDown, we can prioritize action event handler over\n     * component-specific handlers. That might be useful for some components that aggressively stop propagation of\n     * events they handle, if the action is considered of higher priority compared to the conflicting component-internal\n     * functionality. So maybe an option would be in order to define whether the shortcut's event handling should be done\n     * in capture or bubbling phase.\n     * Another thing to get clarified as action system is more used, is to decide if action handler should stop\n     * propagation or not. Or should it be an option?\n     * UPDATE: Added an option to determine whether event handling should be done in capture phase. The use case is\n     * \"Find in files\" action with Cmd+Shift+O shortcut, which overlaps with some action in Monaco editor (only in .ts\n     * files). Monaco uses capture phase, and stops propagation, so unless we use capture phase, useShortcut's event\n     * handler is never called.\n     * An apposite use case is in SpeedSearchTree in tool windows, where we want Escape to be handled by speed search,\n     * and propagation stopped, if speed search is currently active. The second Escape keystroke should move focus to\n     * the editor. That wouldn't work if we unconditionally handle events in capture phase.\n     */\n    [useCapture ? \"onKeyDownCapture\" : \"onKeyDown\"]: onKeyDown,\n  };\n  return { shortcutHandlerProps };\n}\n\nconst isKeyMatch = (\n  keyStroke: KeyStroke | undefined,\n  e: React.KeyboardEvent,\n  loose?: boolean\n) =>\n  e.code === keyStroke?.code &&\n  (loose ? keyStroke.modifiers || [] : supportedModifiers).every(\n    (modifier) =>\n      e.getModifierState(modifier) ===\n      Boolean(keyStroke.modifiers?.includes(modifier))\n  );\n\nfunction isModifierOnly(event: KeyboardEvent) {\n  return event.location === 1 || event.location === 2;\n}\n","import { pick, sortBy } from \"ramda\";\nimport React, { HTMLAttributes, useContext, useEffect, useState } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { dfsVisit } from \"@intellij-platform/core/utils/tree-utils\";\n\nimport { Keymap, useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\nimport { useShortcuts } from \"./useShortcut\";\nimport {\n  ActionGroup,\n  ActionInResolvedGroup,\n  isActionGroup,\n  isActionGroupDefinition,\n  MutableActionGroup,\n} from \"./ActionGroup\";\nimport {\n  Action,\n  ActionContext,\n  ActionDefinition,\n  MutableAction,\n} from \"./Action\";\n\n/**\n * Represents the properties required for the ActionsProvider component.\n */\ninterface ActionsProviderProps {\n  /**\n   * A collection of action definitions.\n   */\n  actions: ActionDefinition[];\n  children: (args: {\n    shortcutHandlerProps: HTMLAttributes<HTMLElement>;\n  }) => React.ReactElement;\n\n  /**\n   * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n   * a descendant element handles events in capture phase, and that conflicts with an action.\n   */\n  useCapture?: boolean;\n}\n\nconst ActionsContext = React.createContext<Action[]>([]);\n\nfunction generateId() {\n  return `jui-${Math.floor(Math.random() * 10000000)}`;\n}\n\nconst ACTION_PROVIDER_ID_ATTRIBUTE = \"data-action-provider\";\nconst ACTION_PROVIDER_ID_DATA_PREFIX = \"action_provider_id_\";\nconst actionProvidersMap = new Map<string, Action[]>();\n\n/**\n * Provides a set of actions for the wrapped UI. Uses the currently provided keymap to find the shortcuts\n * for each action, and passes the necessary event handlers for the shortcuts, to the `children` render function.\n *\n * @param {Array<Action>} props.actions - The actions to be provided.\n * @param {boolean} [props.useCapture] - Specifies whether to use capture phase for event handling.\n * @param {Function} props.children - Render function that accepts shortcutHandlerProps as argument.\n */\nexport function ActionsProvider(props: ActionsProviderProps): JSX.Element {\n  const parentContext = useContext(ActionsContext);\n  const keymap = useKeymap();\n  const actions: Action[] = [];\n  dfsVisit(\n    (action: Action | null) =>\n      action && isActionGroup(action) ? action.children : null,\n    (action) => actions.push(action),\n    recursivelyCreateActions(keymap, props.actions)\n  );\n\n  const actionIds = actions.map((action) => action.id);\n  const shortcuts = pick(actionIds, keymap || {});\n  const [actionProviderId] = useState(generateId);\n\n  const { shortcutHandlerProps } = useShortcuts(\n    shortcuts,\n    (actionId, { event }) => {\n      actions\n        .find((action) => action.id === actionId)\n        ?.perform({\n          event,\n          // it's important to use target and not currentTarget\n          element: event.target instanceof Element ? event.target : null,\n        });\n    },\n    { useCapture: props.useCapture }\n  );\n\n  const allActions = [...parentContext, ...actions]; // Maybe warn overrides?\n\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[ACTION_PROVIDER_ID_ATTRIBUTE] = actionProviderId;\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[\n    `data-${ACTION_PROVIDER_ID_DATA_PREFIX}${actionProviderId}`\n  ] = \"\";\n\n  useEffect(() => {\n    actionProvidersMap.set(actionProviderId, allActions);\n  });\n  useEffect(() => {\n    return () => {\n      actionProvidersMap.delete(actionProviderId);\n    };\n  }, []);\n  return (\n    <ActionsContext.Provider value={allActions}>\n      {props.children({ shortcutHandlerProps })}\n    </ActionsContext.Provider>\n  );\n}\n\nfunction isMutableActionGroup(\n  action: MutableAction\n): action is MutableActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent: ActionGroup\n): Array<ActionInResolvedGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[]\n): Array<Action | ActionGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent?: ActionGroup\n): Array<Action | ActionInResolvedGroup | ActionGroup> {\n  return actionDefinitions.map((actionDefinition: ActionDefinition): Action => {\n    const shortcuts =\n      keymap?.[actionDefinition.id] ??\n      (actionDefinition.useShortcutsOf\n        ? keymap?.[actionDefinition.useShortcutsOf]\n        : undefined);\n    const firstShortcut = shortcuts?.[0];\n    const action: MutableAction | ActionInResolvedGroup = {\n      ...actionDefinition,\n      ...(parent ? { parent } : {}),\n      shortcuts,\n      shortcut: firstShortcut ? shortcutToString(firstShortcut) : undefined, // Maybe it should be all shortcuts?\n      perform: (context) => {\n        if (!action.isDisabled) {\n          actionDefinition.actionPerformed(\n            context || { event: null, element: null }\n          );\n        }\n      },\n    };\n    if (\n      isMutableActionGroup(action) &&\n      isActionGroupDefinition(actionDefinition)\n    ) {\n      action.children = recursivelyCreateActions(\n        keymap,\n        actionDefinition.children,\n        action\n      );\n    }\n    return action;\n  });\n}\n\n/**\n * Experimental function to get list of all actions available from a given html elements. Useful for implementing\n * action search UI.\n * @experimental\n */\nexport function getAvailableActionsFor(element: Element): Action[] {\n  const closestActionProvider = element.closest(\n    `[${ACTION_PROVIDER_ID_ATTRIBUTE}]`\n  );\n  if (closestActionProvider instanceof HTMLElement) {\n    /**\n     * NOTE: initially, only one data attribute was used to hold the action provider id. Although simpler, that approach\n     * is subject to bug in some edge cases, where multiple nested action providers are rendered, but `actionProviderProps`\n     * is merged on a single dom element. In such cases, it's important that the props from the innermost action provider\n     * is merged last, overwriting other values for data-action-provider-id.\n     * Because that's error-prone, we keep unique data attributes (`data-action_provider_id_...`} for each action\n     * provider id, and to simplify querying part, we also add a constant data attribute (data-action-provider).\n     * This way we can read all action providers applied on the same dom element. Since action providers inherit actions\n     * from parent action providers, we can reliably pick the actions from the one with the highest number of actions.\n     */\n    const actionSets = Object.keys(closestActionProvider.dataset)\n      .filter((dataKey) => dataKey.startsWith(ACTION_PROVIDER_ID_DATA_PREFIX))\n      .map((dataKey) => {\n        const id = dataKey?.replace(ACTION_PROVIDER_ID_DATA_PREFIX, \"\");\n        const actions = id && actionProvidersMap.get(id);\n        return actions ? Object.values(actions) : [];\n      })\n      .concat();\n    return sortBy((actionSet) => -actionSet.length, actionSets)[0] || [];\n  }\n  return [];\n}\n\nexport function useActions(): Action[] {\n  return useContext(ActionsContext);\n}\n\nexport const useAction = (actionId: string): Action | null => {\n  return useActions().find(({ id }) => id === actionId) ?? null;\n};\n\nexport const usePerformAction = (): ((\n  actionId: string,\n  context?: ActionContext\n) => void) => {\n  const actions = useActions();\n  return useEventCallback((actionId: string, context?: ActionContext) => {\n    const action = actions.find(({ id }) => id === actionId);\n    if (action) {\n      action.perform(context);\n    } else {\n      console.error(\n        `An attempt to perform action with id ${actionId} failed because action was not found`\n      );\n    }\n  });\n};\n","export const CommonActionId = {\n  EXPAND_ALL: \"ExpandAll\",\n  COLLAPSE_ALL: \"CollapseAll\",\n  EXPAND_SELECTION: \"EditorSelectWord\",\n  SHRINK_SELECTION: \"EditorUnSelectWord\",\n  GO_TO_ACTION: \"GotoAction\",\n  GO_TO_FILE: \"GotoFile\",\n  SHOW_INTENTION_ACTIONS: \"ShowIntentionActions\",\n  EDIT_SOURCE: \"Documentation.EditSource\",\n  SHOW_SEARCH_HISTORY: \"ShowSearchHistory\",\n};\n","import React, { useContext } from \"react\";\nimport { Shortcut } from \"./Shortcut\";\nimport { defaultKeymap } from \"./defaultKeymap\";\n\nexport interface Keymap {\n  [actionId: string]: ReadonlyArray<Shortcut>;\n}\n\nexport const KeymapContext = React.createContext<Keymap | null>(defaultKeymap);\n\nexport const KeymapProvider: React.FC<{ keymap: Keymap }> = ({\n  keymap: keymapProp,\n  children,\n}) => {\n  const parentKeyMap = useContext(KeymapContext);\n  const keymap = Object.assign(Object.create(parentKeyMap), keymapProp);\n  return (\n    <KeymapContext.Provider value={keymap}>{children}</KeymapContext.Provider>\n  );\n};\n\nexport const useKeymap = () => useContext(KeymapContext);\n","type ShortcutType = \"mouse\" | \"keyboard\";\nexport type KeyStrokeModifier = \"Alt\" | \"Shift\" | \"Meta\" | \"Control\";\n\nexport interface KeyStroke {\n  /**\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key}\n   */\n  code: string;\n  modifiers?: Array<KeyStrokeModifier>;\n}\n\ninterface ShortcutBase {\n  type: ShortcutType;\n}\n\ninterface MouseShortcut extends ShortcutBase {\n  type: \"mouse\";\n}\n\nexport interface KeyboardShortcut extends ShortcutBase {\n  type: \"keyboard\";\n  firstKeyStroke: KeyStroke;\n  secondKeyStroke?: KeyStroke;\n}\n\nexport type Shortcut = MouseShortcut | KeyboardShortcut;\n\nexport const isKeyboardShortcut = (\n  shortcut: Shortcut\n): shortcut is KeyboardShortcut => shortcut.type === \"keyboard\";\n\nexport const supportedModifiers: KeyStrokeModifier[] = [\n  \"Alt\",\n  \"Meta\",\n  \"Shift\",\n  \"Control\",\n];\n","import React from \"react\";\nimport { useAction } from \"@intellij-platform/core/ActionSystem/ActionsProvider\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport const ActionButton = ({\n  actionId,\n  children,\n  ...otherProps\n}: {\n  actionId: string;\n  /**\n   * Content to show instead of `action.icon`.\n   */\n  children?: React.ReactNode;\n} & IconButtonProps): JSX.Element => {\n  const action = useAction(actionId);\n  if (!action) {\n    return <></>;\n  }\n  const actionButton = (\n    <IconButton\n      isDisabled={action.isDisabled}\n      {...otherProps}\n      onPress={(e) => {\n        action?.perform();\n        otherProps.onPress?.(e);\n      }}\n    >\n      {children || action.icon}\n    </IconButton>\n  );\n  if (action.title) {\n    return (\n      <TooltipTrigger\n        tooltip={\n          <ActionTooltip actionName={action.title} shortcut={action.shortcut} />\n        }\n      >\n        {actionButton}\n      </TooltipTrigger>\n    );\n  }\n  return actionButton;\n};\n","import React from \"react\";\nimport { flatten } from \"ramda\";\nimport { Menu, MenuItemLayout } from \"@intellij-platform/core/Menu\";\nimport { Divider, Item, Section } from \"@intellij-platform/core/Collections\";\nimport { DividerItem } from \"@intellij-platform/core/Collections/Divider\"; // Importing from /Collections breaks the build for some reason\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type Action } from \"@intellij-platform/core/ActionSystem/Action\";\n\ntype ActionGroupAsMenuItem = Pick<\n  ActionGroup,\n  \"id\" | \"icon\" | \"title\" | \"isDisabled\" | \"children\" | \"isPopup\"\n>;\nexport type ActionItem = ActionGroupAsMenuItem | Action | DividerItem;\n\nfunction isAction(item: ActionItem): item is Action {\n  return \"perform\" in item;\n}\n\nexport type ActionMenuProps = {\n  selectedKeys?: string[];\n  menuProps?: React.HTMLAttributes<HTMLElement>;\n  actions: Array<ActionItem>;\n};\n\n/**\n * Given a nested list of resolved actions, renders a menu corresponding to them.\n */\nexport function ActionsMenu({\n  actions,\n  selectedKeys,\n  menuProps,\n}: ActionMenuProps) {\n  const allActions = getAllActions(actions);\n  const disabledKeys = allActions\n    .filter(({ isDisabled }) => isDisabled)\n    .map(({ id }) => id);\n\n  return (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        const action = allActions.find(({ id }) => id === key);\n        if (action && isAction(action)) {\n          action.perform(); // TODO: pass context, containing the menu item as `element`\n        }\n      }}\n      selectedKeys={selectedKeys} // FIXME: keep isSelected on actions (toggle action)?\n      disabledKeys={disabledKeys}\n      items={actions}\n      autoFocus\n    >\n      {(action) => {\n        if (action instanceof DividerItem) {\n          return <Divider />;\n        }\n        return renderActionAsMenuItem(action);\n      }}\n    </Menu>\n  );\n}\n\ntype ActionAsMenuItem = Omit<Action, \"perform\" | \"shortcuts\">;\n\nexport function renderActionAsMenuItem(\n  action: ActionAsMenuItem | ActionGroupAsMenuItem\n) {\n  const isGroup = \"children\" in action;\n  if (isGroup && !action.isPopup) {\n    return (\n      // `title` is intentionally not passed, as menu sections created from action groups usually don't have title.\n      // Maybe it should be an option?\n      // @ts-expect-error: hasDivider is not yet made a public API.\n      <Section key={action.id} hasDivider items={action.children}>\n        {renderActionAsMenuItem}\n      </Section>\n    );\n  }\n  return (\n    <Item\n      key={action.id}\n      textValue={action.title}\n      childItems={isGroup ? action.children : undefined}\n    >\n      <MenuItemLayout\n        content={action.title}\n        icon={action.icon}\n        shortcut={\"shortcut\" in action ? action.shortcut : undefined}\n      />\n    </Item>\n  );\n}\n\nfunction getAllActions(items: ActionItem[]): Action[] {\n  return flatten(\n    items.map((item) => (\"children\" in item ? item.children : item))\n  ).filter(isAction);\n}\n","import { flatten } from \"ramda\";\nimport React from \"react\";\nimport {\n  type ActionGroupDefinition,\n  isActionGroupDefinition,\n} from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { useGetActionShortcut } from \"@intellij-platform/core/ActionSystem/ActionShortcut\";\nimport { Popup, usePopupManager } from \"@intellij-platform/core/Popup\";\nimport { SpeedSearchMenu } from \"@intellij-platform/core/Menu\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { renderActionAsMenuItem } from \"./ActionsMenu\";\nimport { ActionContext } from \"@intellij-platform/core/ActionSystem/Action\";\n\nexport const useCreateDefaultActionGroup = () => {\n  const { show } = usePopupManager();\n  const getActionShortcut = useGetActionShortcut();\n  const openActionsInPopup = useEventCallback(\n    (\n      { children, title }: Pick<ActionGroupDefinition, \"children\" | \"title\">,\n      context: ActionContext\n    ) => {\n      show(({ close }) => (\n        <Popup>\n          <Popup.Layout\n            content={\n              /**\n               * NOTE: It would be much nicer to use {@link ActionGroupMenu} component here. But the action group is not\n               * yet provided when the group definition is being created. It seems like a sign of bad design that needs\n               * to get addressed.\n               */\n              <SpeedSearchMenu\n                aria-label={title}\n                items={children}\n                onAction={(key) => {\n                  // The need for calculating `allActions` is a consequence of the issue explained in the note above.\n                  const allActions = flatten(\n                    children.map((item) =>\n                      isActionGroupDefinition(item) ? item.children : item\n                    )\n                  );\n                  const action = allActions.find((action) => action.id === key);\n                  if (action && !action.isDisabled) {\n                    action.actionPerformed(context);\n                  }\n                }}\n                onClose={close}\n                autoFocus=\"first\"\n              >\n                {(item) =>\n                  renderActionAsMenuItem({\n                    ...item,\n                    // a consequence of the issue explained in the note above.\n                    shortcut: getActionShortcut(item.id),\n                  })\n                }\n              </SpeedSearchMenu>\n            }\n            header={title}\n          />\n        </Popup>\n      ));\n    }\n  );\n\n  return (\n    groupDefinition: Omit<ActionGroupDefinition, \"actionPerformed\">\n  ): ActionGroupDefinition => {\n    return {\n      isPopup: true,\n      ...groupDefinition,\n      actionPerformed: (context) =>\n        openActionsInPopup(groupDefinition, context),\n    };\n  };\n};\n","import {\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  // For some reason importing from shorter paths doesn't work as expected in cypress ¯\\_(ツ)_/¯\n  // Weirdly, `import *` works in that case.\n} from \"@intellij-platform/core/ToolWindowsImpl/ToolWindowActionIds\";\n\nimport { Keymap } from \"./KeymapProvider\";\nimport { CommonActionId } from \"./CommonActionIds\";\n\n// TODO: OS specific defaults\n// TODO: extract and export action ids\n// NOTE: defaultKeymap doesn't belong to ActionSystem semantically. Would be something to be moved to a separate module\n/**\n * Default Intellij Idea keymapping for common action ids, including tool window actions.\n * @see CommonActionId\n */\nexport const defaultKeymap: Keymap = {\n  [RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowRight\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_LEFT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowLeft\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_TOP_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowUp\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowDown\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [MAXIMIZE_TOOL_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Quote\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [FOCUS_EDITOR_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n      },\n    },\n  ],\n  [HIDE_ACTIVE_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n        modifiers: [\"Shift\"],\n      },\n    },\n  ],\n  [HIDE_ALL_WINDOWS_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [JUMP_TO_LAST_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowUp\",\n      },\n    },\n  ],\n  [CommonActionId.SHRINK_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Equal\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadAdd\",\n      },\n    },\n  ],\n  [CommonActionId.COLLAPSE_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Minus\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadSubtract\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_ACTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyA\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_INTENTION_ACTIONS]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"Enter\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_FILE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyO\",\n      },\n    },\n  ],\n  [CommonActionId.EDIT_SOURCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"ArrowDown\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F4\",\n      },\n    },\n  ],\n\n  [CommonActionId.SHOW_SEARCH_HISTORY]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n};\n","import { fromPairs } from \"ramda\";\nimport { isMac } from \"@react-aria/utils\";\nimport {\n  isKeyboardShortcut,\n  KeyStroke,\n  KeyStrokeModifier,\n  Shortcut,\n} from \"./Shortcut\";\nimport {\n  KeyboardEventKey,\n  LinuxDeadKeys,\n  NumericKeypadKeys,\n  UpperAlpha,\n} from \"./KeyboardEventKey\";\n\nconst defaultKeyToStr: {\n  [key in Exclude<\n    KeyStrokeModifier | KeyboardEventKey,\n    LinuxDeadKeys | UpperAlpha | NumericKeypadKeys\n  >]: string;\n} = {\n  Control: \"Ctrl\",\n  \" \": \"Space\",\n  ArrowDown: \"↓\",\n  ArrowUp: \"↑\",\n  ArrowLeft: \"←\",\n  ArrowRight: \"→\",\n  Enter: \"⏎\",\n  Quote: \"'\",\n  Minus: \"-\",\n  Equal: \"+\",\n  Backspace: \"⌫\",\n  // lowercase to uppercase map\n  ...fromPairs(\n    Array.from(Array(26))\n      .map((e, i) => i + \"a\".charCodeAt(0))\n      .map((x) => String.fromCharCode(x))\n      .map((a) => [a, a.toUpperCase()])\n  ),\n};\nconst KeystrokeToString: {\n  separator: string;\n  codeToStr: Record<KeyStrokeModifier | KeyboardEventKey, string>;\n} = isMac()\n  ? {\n      separator: \"\",\n      codeToStr: {\n        ...defaultKeyToStr,\n        Alt: \"⌥\",\n        Shift: \"⇧\",\n        Meta: \"⌘\",\n        Control: \"^\",\n        Escape: \"⎋\",\n      },\n    }\n  : {\n      separator: \"+\",\n      codeToStr: defaultKeyToStr,\n    };\n\nconst modifiersOrder: KeyStrokeModifier[] = [\"Control\", \"Alt\", \"Shift\", \"Meta\"];\nexport const keystrokeToString = (keystroke: KeyStroke) => {\n  return [\n    ...(keystroke.modifiers || []).sort(\n      (a, b) => modifiersOrder.indexOf(a) - modifiersOrder.indexOf(b)\n    ),\n    keystroke.code,\n  ]\n    .map((code) => KeystrokeToString.codeToStr[code] || code)\n    .map((code) => code.replace(/^(Key|Digit|Numpad)(.)$/, \"$2\"))\n    .join(KeystrokeToString.separator);\n};\nexport const shortcutToString = (shortcut: Shortcut) => {\n  if (isKeyboardShortcut(shortcut)) {\n    return [shortcut.firstKeyStroke, shortcut.secondKeyStroke]\n      .filter((i): i is KeyStroke => i != undefined)\n      .map(keystrokeToString)\n      .join(\", \");\n  }\n  throw new Error(\"Not implemented yet\");\n};\n","import { useAction } from \"./ActionsProvider\";\nimport { isResolvedActionGroup, ResolvedActionGroup } from \"./ActionGroup\";\n\nexport const useActionGroup = (\n  actionGroupId: string\n): ResolvedActionGroup | null => {\n  const action = useAction(actionGroupId);\n  if (action) {\n    if (isResolvedActionGroup(action)) {\n      return action;\n    }\n    throw new Error(`Action with id ${actionGroupId} is not a group`);\n  }\n  return null;\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nconst CORNER_RADIUS = 12; // it used to be 8. After introduction of Notifications tool window, it's 12\n\nconst bgColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Notification.background\",\n    !theme.dark ? \"rgb(242,242,242)\" : \"#4E5052\"\n  );\n\nexport const StyledHeaderActions = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  background: inherit;\n  padding: 0.375rem 0.5rem 0;\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: 100%;\n    background: linear-gradient(90deg, transparent, ${bgColor});\n    width: 20px;\n    height: 100%;\n    z-index: 1;\n    top: 0;\n  }\n`;\n\nexport const StyledBalloonContainer = styled.div`\n  line-height: 1.2;\n  box-sizing: border-box;\n  overflow: hidden; // header actions overflows a little at the top right rounded corner\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); // shadow doesn't seem to be themed\n  padding: 0.5rem 0;\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"Notification.borderColor\",\n        !theme.dark ? \"#B2B2B2CD\" : \"#565A5CCD\"\n      )};\n  border-radius: ${({ theme }) =>\n    `${\n      (theme.value<number>(\n        \"Notification.arc\" as UnknownThemeProp<\"Notification.arc\">\n      ) ?? CORNER_RADIUS) / 2\n    }px`};\n  //display: inline-flex;\n  width: 23.3125rem;\n  position: relative;\n  background-color: ${bgColor};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Notification.foreground\",\n      !theme.dark ? \"#000\" : \"rgb(191,191,191)\"\n    )};\n\n  ${StyledHeaderActions} {\n    display: none;\n  }\n  &:hover ${StyledHeaderActions} {\n    display: initial;\n  }\n`;\n\nexport const StyledIconContainer = styled.span`\n  position: absolute;\n  left: 0.75rem;\n  top: 0.5rem;\n`;\n\nexport const StyledBalloonHeader = styled.div`\n  line-height: 1rem;\n  font-weight: bold;\n  margin: 0 2.125rem 0.25rem;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; // this is not the case in original impl, but it's a clear improvement\n`;\n\nexport const StyledBalloonBody = styled.div<{\n  lineClamp: number | false;\n}>`\n  margin: 0 2.125rem 0 2.125rem;\n  line-height: 1rem;\n  display: inline;\n  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};\n  word-break: ${({ lineClamp }) => lineClamp === 1 && \"break-all\"};\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nexport const StyledBalloonFooter = styled.div`\n  margin: 0.375rem 1.875rem 0 2.125rem;\n  display: inline-flex;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 1rem;\n\n  // could be -webkit-fill-available too, if it has good support. Probably it doesn't tho\n  max-width: calc(100% - 3.5rem);\n`;\n\nexport const StyledToggleIconContainer = styled.span`\n  display: inline-flex;\n  position: absolute;\n  right: 0.5rem;\n  bottom: 0;\n  background-color: ${bgColor};\n  padding-left: 0.5rem;\n`;\n\nexport const StyledToggleExpandButtonContainer = styled.span`\n  display: block;\n  position: relative; // for icon absolute positioning\n  cursor: pointer;\n  flex: 1;\n`;\n\nexport const StyledToggleExpandButtonFooterContainer = styled(\n  StyledToggleExpandButtonContainer\n)`\n  min-height: 1.5rem;\n  margin: -0.5rem 0;\n  position: relative;\n  z-index: 1;\n  ${StyledToggleIconContainer} {\n    bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter} {\n    margin-top: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter}:hover + * .icon[data-hover] {\n    display: none;\n  }\n  ${StyledBalloonFooter}:hover + * .icon {\n    display: unset;\n  }\n`;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { IconProps } from \"@intellij-platform/core/Icon/IconProps\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  StyledBalloonBody,\n  StyledBalloonContainer,\n  StyledBalloonFooter,\n  StyledBalloonHeader,\n  StyledHeaderActions,\n  StyledIconContainer,\n  StyledToggleExpandButtonContainer,\n  StyledToggleExpandButtonFooterContainer,\n  StyledToggleIconContainer,\n} from \"@intellij-platform/core/Balloon/Balloon.styled\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { Link } from \"@intellij-platform/core/Link\";\n\nexport type BalloonProps = ControlledStateProps<{ expanded: boolean }> &\n  DOMProps & {\n    /**\n     * Icon rendered in the top left\n     */\n    icon?: \"Info\" | \"Warning\" | \"Error\" | React.ReactElement<IconProps>;\n    /**\n     * Rendered beside close button. Can be used for rendering a \"notification settings\" icon button.\n     */\n    headerActions?: React.ReactNode;\n    /**\n     * Called when the close button is clicked. If not passed, close button will not be rendered.\n     */\n    onClose?: () => void;\n    /**\n     * Actions rendered in the footer.\n     */\n    actions?: React.ReactNode;\n  } & (\n    | {\n        title?: React.ReactNode;\n        body: React.ReactNode;\n      }\n    | {\n        title: React.ReactNode;\n        body?: React.ReactNode;\n      }\n  );\n\ntype BalloonContextObj = {\n  onClose?: () => void;\n};\nconst BalloonContext = React.createContext<BalloonContextObj | null>(null);\n\n/**\n * A tiny wrapper around {@link Link} component, to be used for actions in Balloon.\n * It closes the balloon when pressed.\n */\nexport const BalloonActionLink: typeof Link = React.forwardRef(\n  ({ onPress, ...props }, ref) => {\n    const context = useContext(BalloonContext);\n    if (context === null) {\n      throw new Error(\n        \"BalloonActionLink should only be rendered inside Balloon notifications\"\n      );\n    }\n    return (\n      <Link\n        ref={ref}\n        {...props}\n        onPress={(...args) => {\n          context?.onClose?.();\n          return onPress?.(...args);\n        }}\n      />\n    );\n  }\n);\n/**\n * [Balloon notification](https://jetbrains.github.io/ui/controls/balloon/) UI.\n *\n * Notes and TODO:\n * - Add support for \"error\" variant: https://github.com/JetBrains/intellij-community/blob/48c024fcd38bd8d1eccdada05489a8952a494270/platform/platform-impl/src/com/intellij/diagnostic/IdeMessagePanel.java#L215\n * - Add support for timeout. Although if the auto close behaviour is only timeout-based, maybe there is not much value in adding a prop for it and calling onClose on timeout.\n * - BalloonActions component to be used for rendering a bunch of links in the actions. It should encapsulate the\n *   behaviour of moving actions into a menu when there is not enough room.\n */\nexport const Balloon = ({\n  icon: iconProp = \"Info\",\n  expanded: expandedProp,\n  defaultExpanded = false,\n  onExpandedChange,\n  title,\n  headerActions,\n  onClose,\n  body,\n  actions,\n  ...containerProps\n}: BalloonProps): React.ReactElement => {\n  const bodyRef = useRef<HTMLDivElement>(null);\n  const [expandable, setExpandable] = useState(false);\n  const [expanded, setExpanded] = useControlledState(\n    expandedProp!,\n    defaultExpanded,\n    onExpandedChange!\n  );\n  const maxLinesWhenNotExpanded = 1 + (title ? 0 : 1) + (actions ? 0 : 1);\n\n  useEffect(() => {\n    const bodyElem = bodyRef.current;\n    if (bodyElem) {\n      setExpandable(\n        expanded\n          ? getNumLines(bodyElem) > maxLinesWhenNotExpanded\n          : bodyElem.scrollHeight > bodyElem.clientHeight\n      );\n    } else {\n      setExpandable(false);\n    }\n  }, [expanded]);\n  const validIconTypes = [\"Error\", \"Warning\", \"Info\"] as const;\n  const icon =\n    typeof iconProp === \"string\" ? (\n      <PlatformIcon\n        icon={`general/notification${validIconTypes.find(\n          (iconType, index, arr) =>\n            iconType === iconProp || index === arr.length - 1\n        )}.svg`}\n      />\n    ) : (\n      iconProp\n    );\n  // @ts-expect-error support for callback updater is removed from useControlledState. https://github.com/adobe/react-spectrum/issues/2320\n  const toggle = () => setExpanded((expanded) => !expanded);\n\n  const effectiveExpanded = expanded && Boolean(body);\n\n  return (\n    <BalloonContext.Provider value={{ onClose }}>\n      <StyledBalloonContainer data-testid=\"balloon\" {...containerProps}>\n        <StyledIconContainer>{icon}</StyledIconContainer>\n        {title && <StyledBalloonHeader>{title}</StyledBalloonHeader>}\n        <StyledHeaderActions>\n          {headerActions}\n          {onClose && (\n            <AutoHoverPlatformIcon\n              icon=\"ide/notification/close.svg\"\n              onClick={onClose}\n              role=\"button\"\n              data-testid=\"close-btn\"\n              style={{ marginLeft: \"0.75rem\" }}\n            />\n          )}\n        </StyledHeaderActions>\n        {body && (\n          <ToggleWrapper\n            expanded={effectiveExpanded}\n            enabled={expandable && !effectiveExpanded}\n            onToggle={toggle}\n          >\n            <StyledBalloonBody\n              lineClamp={!effectiveExpanded && maxLinesWhenNotExpanded}\n              ref={bodyRef}\n            >\n              {body}\n            </StyledBalloonBody>\n          </ToggleWrapper>\n        )}\n        <ToggleWrapper\n          expanded={effectiveExpanded}\n          enabled={expandable && effectiveExpanded}\n          onToggle={toggle}\n          Component={StyledToggleExpandButtonFooterContainer}\n        >\n          {actions && (\n            <StyledBalloonFooter onClick={(e) => e.stopPropagation()}>\n              {actions}\n            </StyledBalloonFooter>\n          )}\n        </ToggleWrapper>\n      </StyledBalloonContainer>\n    </BalloonContext.Provider>\n  );\n};\n\n/**\n * If enabled wraps its children in a clickable area (with the expand/collapse arrow),f for toggling expanded state.\n */\nconst ToggleWrapper: React.FC<{\n  enabled: boolean;\n  expanded: boolean;\n  Component?: typeof StyledToggleExpandButtonContainer;\n  onToggle: () => void;\n}> = ({\n  children,\n  onToggle,\n  expanded,\n  enabled,\n  Component = StyledToggleExpandButtonContainer,\n}) => {\n  const iconName = expanded ? \"collapse\" : \"expand\";\n  const toggleIcon = (\n    <StyledToggleIconContainer>\n      <AutoHoverPlatformIcon\n        hoverContainerSelector={`${Component}`}\n        icon={`ide/notification/${iconName}.svg`}\n        className=\"icon\"\n      />\n    </StyledToggleIconContainer>\n  );\n\n  return enabled ? (\n    <Component\n      onClick={onToggle}\n      role=\"button\"\n      data-testid={`${expanded ? \"collapse\" : \"expand\"}-btn`}\n    >\n      {children}\n      {toggleIcon}\n    </Component>\n  ) : (\n    <>{children}</>\n  );\n};\n\n/**\n * Based on the computed line-height and clientHeight of the element, returns the number of lines of the content.\n */\nfunction getNumLines(bodyElem: Element) {\n  return (\n    bodyElem.clientHeight / parseFloat(getComputedStyle(bodyElem).lineHeight)\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Balloon, BalloonProps } from \"./Balloon\";\nimport { StyledBalloonsStack } from \"./StyledBalloonsStack\";\n\ntype ShowProps = Pick<\n  BalloonProps,\n  \"title\" | \"icon\" | \"body\" | \"actions\" | \"headerActions\"\n>;\n\nexport interface BalloonManagerAPI {\n  /**\n   * Shows a Balloon notification on the bottom left of the screen.\n   * @param props: Props to pass to the Balloon component\n   * @param [autoHideTimeout=10_000] timeout in ms for hiding the balloon notification.\n   * @returns hide function, in case the notification can expire for some reason.\n   */\n  show(props: ShowProps, autoHideTimeout?: number): () => void;\n  showSticky(props: ShowProps): () => void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\"You must render a BalloonManager...\");\n};\n\nconst BalloonsContext = React.createContext<BalloonManagerAPI>({\n  show: NotImplementedFn,\n  showSticky: NotImplementedFn,\n});\n\nexport const useBalloonManager = (): BalloonManagerAPI =>\n  useContext(BalloonsContext);\n\ntype BalloonElement = ReactElement<BalloonProps, typeof Balloon>;\n\nexport interface BalloonManagerProps {\n  disablePortal?: boolean;\n  BalloonsContainer?: React.ElementType;\n}\n\n/**\n * Enables imperative API (via {@link useBalloonManager}) for showing Balloon notifications on the bottom right of the screen.\n * It renders notifications in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n * @param disablePortal: if `true`, the container for notifications will not be rendered in a portal\n * @param BalloonsContainer: container component for the notifications. It's {@link StyledBalloonsStack} by default.\n *\n * TODO: fade in/out transition. Notes:\n *  - Doesn't seem fade-in is needed. Tho it's much easier than fade-out, as it can be achieved with a css animation.\n *  - Fade out should happen only when the balloon is being hidden by timeout.\n * TODO: Support for maximum number of notifications and showing \"x more notification(s)\" button if the limit exceeds\n */\n\nexport const BalloonManager: React.FC<BalloonManagerProps> = ({\n  children,\n  disablePortal,\n  BalloonsContainer = StyledBalloonsStack,\n}) => {\n  const [balloons, setBalloons] = useState<Array<BalloonElement>>([]);\n  const timeoutIdsRef = useRef<number[]>([]);\n  const lastIdRef = useRef<number>(0);\n\n  const api = useMemo<BalloonManagerAPI>(() => {\n    const show: BalloonManagerAPI[\"show\"] = (props, timeout = 10_000) => {\n      lastIdRef.current++;\n      const onClose = () => {\n        setBalloons((balloons) =>\n          balloons.filter((aBalloon) => aBalloon !== balloon)\n        );\n      };\n      const balloon = (\n        <Balloon\n          key={lastIdRef.current}\n          {...props}\n          title={props.title} // TS acts unreasonable without this\n          onClose={onClose}\n        />\n      );\n      setBalloons((balloons) => {\n        if (timeout > 0) {\n          const timeoutId = window.setTimeout(() => {\n            onClose();\n            timeoutIdsRef.current = timeoutIdsRef.current.filter(\n              (aTimeoutId) => aTimeoutId !== timeoutId\n            );\n          }, timeout);\n          timeoutIdsRef.current = [...timeoutIdsRef.current, timeoutId];\n        }\n        return balloons.concat(balloon);\n      });\n      return onClose;\n    };\n    return {\n      show,\n      showSticky: (props) => show(props, 0),\n    };\n  }, []);\n\n  // clear timeouts when unmounted\n  useEffect(() => {\n    return () => {\n      timeoutIdsRef.current.forEach((id) => {\n        window.clearTimeout(id);\n      });\n    };\n  }, []);\n\n  const notificationsStack = (\n    <BalloonsContainer\n      style={{ position: disablePortal ? \"absolute\" : undefined }}\n    >\n      {balloons}\n    </BalloonsContainer>\n  );\n\n  return (\n    <BalloonsContext.Provider value={api}>\n      {children}\n      {disablePortal\n        ? notificationsStack\n        : ReactDOM.createPortal(notificationsStack, document.body)}\n    </BalloonsContext.Provider>\n  );\n};\n","import styled from \"styled-components\";\nimport { StyledBalloonContainer } from \"@intellij-platform/core/Balloon/Balloon.styled\";\n\n/**\n * Container component for stacking a number of Balloons in an overlay placed on the bottom right of where it's rendered.\n */\nexport const StyledBalloonsStack = styled.div`\n  position: fixed;\n  z-index: 1;\n  bottom: 42px;\n  right: 26px;\n  ${StyledBalloonContainer} {\n    margin-bottom: 12px;\n  }\n`;\n","import React, { ForwardedRef, JSXElementConstructor } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { AriaBaseButtonProps, ButtonProps } from \"@react-types/button\";\n\nexport interface BareButtonProps extends AriaBaseButtonProps, ButtonProps {\n  children: React.ReactElement;\n\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n}\n\n/**\n * A component to make arbitrary content an accessible button which is also able to be a tooltip trigger.\n */\nexport const BareButton: React.FC<BareButtonProps> = React.forwardRef(\n  function BareButton(props: BareButtonProps, ref: ForwardedRef<HTMLElement>) {\n    const elementType = React.isValidElement(props.children)\n      ? (props.children.type as JSXElementConstructor<unknown>)\n      : undefined;\n    const { buttonProps } = useButton(\n      {\n        elementType,\n        ...props,\n      },\n      useObjectRef(ref)\n    );\n    const domProps = filterDOMProps(props);\n    const { autoFocus } = props;\n\n    return React.cloneElement(\n      props.children,\n      mergeProps(domProps, buttonProps, { autoFocus, ref })\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  height: 1.5rem;\n  font-family: inherit;\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, { ButtonHTMLAttributes, ForwardedRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  StyledButton,\n  StyledDefaultButton,\n  StyledIconButton,\n} from \"@intellij-platform/core/Button/StyledButton\";\n\ntype ButtonVariant = \"default\" | \"icon\";\nexport interface ButtonProps extends AriaButtonProps {\n  variant?: ButtonVariant; // can allow for custom (styled) component too if needed.\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  // Should this be become true by default? Maybe an context-based API to set defaults like this for a section?\n  preventFocusOnPress?: boolean;\n\n  form?: ButtonHTMLAttributes<HTMLButtonElement>[\"form\"];\n}\n\nconst variants: { [key in ButtonVariant]: typeof StyledButton } = {\n  default: StyledDefaultButton,\n  icon: StyledIconButton,\n};\n\n/**\n * https://jetbrains.github.io/ui/controls/button/\n *\n * TODO:\n * - Support for \"default\" button behaviour. it's kind of similar to a <button type=\"submit\" /> in html, but textarea\n * behaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\n * Cmd+Enter should always trigger onPress. Plus, maybe it should work independent of \"form\" being used? or maybe it's\n * not a big deal to expect an ancestor \"form\" element, when variant is \"default\"?\n * - Support for mnemonic\n * - \"Default\" style differences in Windows.\n * - Gradient colors (low hanging fruit, but negligible added value).\n *\n * Known issues:\n * - In the original impl, default button looks the same as normal button, when focus is not within the same area that\n * the button is. For example in the commit tool window, \"Commit\" button which is default, is not blue, unless the\n * \"Commit\" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n * \"default\" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\n * DefaultToolWindow is used. But we need to see if the same requirement exists in various places.\n * NOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\n * which enables \"default\" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n * - In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\n * behaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.\n *\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef(function Button(\n  { variant, ...props }: ButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const { buttonProps } = useButton(props, ref);\n  const domProps = filterDOMProps(props);\n  const { autoFocus, form } = props;\n\n  const Component = (variant && variants[variant]) || StyledButton;\n  return (\n    <Component\n      {...mergeProps(domProps, buttonProps, { autoFocus, form })}\n      ref={ref}\n    >\n      {props.children}\n    </Component>\n  );\n});\n","import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n}\n\nconst StyledWrapperLabel = styled.label`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  isDisabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, isDisabled }) =>\n    isDisabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\nconst StyledInput = styled.input`\n  opacity: 0.0001;\n  position: absolute;\n  z-index: 1;\n  inset: 0;\n  cursor: default;\n  &:disabled {\n    cursor: default;\n  }\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel className={className}>\n      <StyledInput\n        {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n        ref={ref}\n      />\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={disableFocusAlwaysVisible ? isFocusVisible : isFocused}\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText isDisabled={props.isDisabled}>\n          {props.children}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import React, { ComponentProps } from \"react\";\nimport { LafIcon } from \"@intellij-platform/core/Icon\";\n\n/**\n * Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\n * with the interactions\n */\nexport const CheckboxIcon = ({\n  isDisabled,\n  isFocused,\n  isIndeterminate,\n  isSelected,\n  ...otherProps\n}: Omit<ComponentProps<typeof LafIcon>, \"size\" | \"icon\"> & {\n  isIndeterminate: boolean | undefined;\n  isFocused: boolean;\n  isDisabled: boolean | undefined;\n  isSelected: boolean;\n}) => {\n  return (\n    <LafIcon\n      {...otherProps}\n      size={20}\n      icon={{\n        name: isIndeterminate ? \"checkBoxIndeterminate\" : \"checkBox\",\n        modifiers: {\n          Disabled: isDisabled,\n          Selected: isSelected || isIndeterminate,\n          Focused: isFocused,\n        },\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { CollectionSpeedSearchMatches } from \"./useCollectionSpeedSearchResult\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext =\n  React.createContext<CollectionSpeedSearchContextValue | null>(null);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext =\n  React.createContext<null | CollectionSpeedSearchItemContextValue>(null);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{ itemKey: Key }> = ({\n  children,\n  itemKey,\n}) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue;\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function ({\n  Component = \"span\",\n}: {\n  /**\n   * When rendering in a flex parent (which is the case for tree or list), rendering a container is necessary to have\n   * the right spacing around highlights, when the highlighter span is immediately followed or proceeded by a white\n   * space. By default, a \"span\" is rendered.\n   */\n  Component?: React.ElementType;\n}) {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return (\n    <Component>\n      {highlightedRanges ? (\n        <TextWithHighlights highlights={highlightedRanges}>\n          {text}\n        </TextWithHighlights>\n      ) : (\n        text\n      )}\n    </Component>\n  );\n};\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager: inputSelectionManager,\n  speedSearch,\n  focusBestMatch = false,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n  /**\n   * If true, focusing the best match (the longest \"start-with\" match) will be preferred.\n   * By default, the focus is moved to the first match that comes after the currently focused item, if currently\n   * focused item itself is not a match.\n   * A typical use case would be collections that filter out non-match items.\n   * @default false\n   */\n  focusBestMatch?: boolean;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const { matches } = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key))\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n    };\n  }, [searchTerm, collection, active]);\n\n  const selectionManager = createSpeedSearchSelectionManager(\n    inputSelectionManager,\n    active ? matches : null\n  );\n  const latestValues = useLatest({\n    matches,\n    selectionManager,\n    collection,\n    focusBestMatch,\n  });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n    let keyToFocus: Key | undefined;\n    if (latestValues.current.focusBestMatch) {\n      keyToFocus = getLongestCommonPrefixMatch(matches);\n    }\n    if (!keyToFocus && matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      keyToFocus = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n    }\n    if (keyToFocus) {\n      selectionManager.setFocusedKey(keyToFocus);\n      selectionManager.replaceSelection(keyToFocus);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return {\n    matches,\n    selectionManager,\n  };\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n\n/**\n * Returns the longest match from the beginning, if exists.\n */\nfunction getLongestCommonPrefixMatch(matches: CollectionSpeedSearchMatches) {\n  return [...matches.entries()]\n    .filter(([, [firstRange]]) => firstRange?.from === 0)\n    .sort(\n      ([, [rangeA]], [, [rangeB]]) =>\n        rangeB.to - rangeB.from - rangeA.to - rangeA.from\n    )?.[0]?.[0];\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { Key } from \"react\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { HTMLAttributes, RefObject, useMemo } from \"react\";\nimport { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { SpeedSearchPopupProps } from \"@intellij-platform/core/SpeedSearch\";\nimport {\n  SpeedSearchState,\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { CollectionSpeedSearchContextValue } from \"./CollectionSpeedSearchContext\";\nimport {\n  CollectionSpeedSearchMatches,\n  useCollectionSpeedSearchResult,\n} from \"./useCollectionSpeedSearchResult\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\nexport interface CollectionSpeedSearch {\n  containerProps: HTMLAttributes<HTMLElement>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n}\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  stickySearch,\n  keyboardDelegate,\n  focusBestMatch,\n  ref,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  ref: RefObject<HTMLElement>;\n  stickySearch?: boolean;\n  focusBestMatch?: boolean;\n} & SpeedSearchStateProps): CollectionSpeedSearch {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps);\n\n  const { matches, selectionManager: speedSearchSelectionManager } =\n    useCollectionSpeedSearchResult({\n      collection,\n      selectionManager,\n      speedSearch,\n      focusBestMatch,\n    });\n  const { containerProps } = useSpeedSearch({ stickySearch }, speedSearch, ref);\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  const findFirstMatch = <T extends React.Key | undefined, K>(\n    fromKey: React.Key | undefined | null,\n    direction: \"up\" | \"down\"\n  ) => {\n    let currentKey: React.Key | undefined | null = fromKey;\n    while (currentKey != null) {\n      if (!matches || matches.has(currentKey)) {\n        return currentKey;\n      }\n      currentKey =\n        direction === \"up\"\n          ? wrappedKeyboardDelegate.getKeyAbove?.(currentKey)\n          : wrappedKeyboardDelegate.getKeyBelow?.(currentKey);\n    }\n    return currentKey ?? undefined;\n  };\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyBelow?.(key), \"down\"),\n    },\n    getKeyAbove: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyAbove?.(key), \"up\"),\n    },\n    getFirstKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const firstKey = findFirstMatch(\n          wrappedKeyboardDelegate.getFirstKey?.(key, global),\n          \"down\"\n        );\n        return firstKey == null ? matches?.values().next().value : firstKey;\n      },\n    },\n    getLastKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const lastKey = findFirstMatch(\n          wrappedKeyboardDelegate.getLastKey?.(key, global),\n          \"down\"\n        );\n        return lastKey == null\n          ? [...(matches?.keys() || [])].pop() ?? null\n          : lastKey;\n      },\n    },\n  } as { [key in keyof KeyboardDelegate]: { value: KeyboardDelegate[key] } });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n  get id() {\n    return this.key;\n  }\n}\n\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return null as any as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<PartialNode<T>> = (\n    StatelyItem as any\n  ).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { styled } from \"../styled\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nconst GAP = \"0.1875rem\";\nconst StyledItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 0.25rem;\n  gap: ${GAP};\n`;\n\nconst StyledHint = styled.span<{ small?: boolean }>`\n  display: inline-flex;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(theme.commonColors.inactiveTextColor)};\n  padding-left: 0.1rem;\n  font-size: ${({ small }) => small && \"0.9em\"};\n`;\n\nconst StyledGroup = styled.span.attrs({\n  role: \"presentation\" as string,\n})`\n  display: inline-flex;\n  display: flex;\n  align-items: center;\n  gap: ${GAP};\n`;\n/**\n * Generic layout component capturing common use cases of tree or list items.\n * It handles the spacing between parts, and provides styled components for parts that need specific styling.\n * For more flexibility over the order of various pieces of content in list/tree items, there is no specific props\n * for parts. Different parts should just be rendered in children.\n *\n * @example\n * ```tsx\n * <ItemLayout>\n *   <PlatformIcon icon=\"nodes/folder\" />\n *   <HighlightedTextValue />\n *   <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n * </ItemLayout>\n * ```\n * @beta\n */\nexport const ItemLayout = (\n  props: { children: React.ReactNode } & DOMAttributes\n) => {\n  return <StyledItemLayout {...props} />;\n};\n\n/**\n * A more subtle text usually rendered next to the main text in the item.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Hint = StyledHint;\n\n/**\n * Useful when a number of items need to be grouped by a wrapper, e.g. to have a tooltip.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Group = StyledGroup;\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import { RefObject, useEffect } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { RefObject, useImperativeHandle } from \"react\";\n\nexport type CollectionRefProps = {\n  /**\n   * Gives imperative access to selection manager.\n   */\n  selectionManagerRef?: RefObject<SelectionManager>;\n};\n\n/**\n * Common imperative API for collections. Used in Lists at the moment. Tree components implement a different imperative\n * API that can be refactored later for more consistency.\n */\nexport function useCollectionRef(\n  { selectionManagerRef }: CollectionRefProps,\n  state: { selectionManager: SelectionManager }\n) {\n  useImperativeHandle(selectionManagerRef, () => state.selectionManager);\n}\n","import React, { RefObject } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\n/**\n * A solution for connecting a collection to a search input, so that collection can still be navigated by keyboard\n * while the input is focused. It works by replaying certain keyboard events on the collection container and focused\n * item. An alternative approach (which is used in react-aria's useCombobox) is to use useSelectableCollection\n * separately for the input, but the biggest issue with that approach is that it's limiting in the following ways:\n * - Rendering input should be a part of the same component that renders the collection. Having specific components\n *   for use cases that requires a search input is not flexible enough. For example one may want to use SpeedSearchList\n *   or List connected to an input. Also, the input and the collection may need to be in different layouts in different\n *   use cases. Decoupling the rendering of the input and collection is a more flexible solution.\n * - The same options used for collection should be passed to the input field for behavior consistency, and that can be\n *   prone to error. Some of these options, like `keyboardDelegate` can even have a default value in hooks like\n *   `useSelectableList`, which means for making sure the same value is passed to the useSelectableCollection for input,\n *   would require to not use the default value, since the same value can't be accessed.\n *\n * With this event forwarding approach, it's an arrow up or down event would behave exactly like it was triggered on\n * the collection itself, leaving no room for behavior discrepancies. But it has a few drawbacks:\n * - Although small, there is still some coupling between this code and implementation of the collection component.\n *   More specifically, the following things are assumed by this implementation:\n *   - \"Enter\" keys (selection or action) are handled on items, but arrow keys are handled on the collection element.\n *   - \"[data-key] attribute is set on items. That is used to find the element for the focused item (which of course is\n *     not actually focused while the input is).\n */\nexport const useCollectionSearchInput = ({\n  collectionRef,\n  selectionManager,\n}: {\n  /**\n   * ref to the html element of the collection component\n   */\n  collectionRef: RefObject<HTMLElement>;\n  /**\n   * SelectionManager instance, returned from the state management hook for the collection component.\n   * {@link CollectionRefProps.selectionManagerRef} can be used on collection components that implement\n   * `useCollectionRef`, to get a hold of selection manager, from outside.\n   */\n  selectionManager: SelectionManager | null | undefined;\n}): { collectionSearchInputProps: DOMAttributes<HTMLInputElement> } => {\n  const relayEventsToCollection = useEventCallback(\n    (event: React.KeyboardEvent) => {\n      // Relay ArrowUp and ArrowDown to the container\n      if (\n        event.type === \"keydown\" &&\n        (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        collectionRef.current?.dispatchEvent(\n          new KeyboardEvent(event.type, event.nativeEvent)\n        );\n      }\n      // Relay Enter to the focused item\n      else if (event.key === \"Enter\" && selectionManager?.focusedKey) {\n        collectionRef.current\n          ?.querySelector(`[data-key=\"${selectionManager?.focusedKey}\"]`)\n          ?.dispatchEvent(new KeyboardEvent(event.type, event.nativeEvent));\n        event.preventDefault();\n      }\n    }\n  );\n\n  return {\n    collectionSearchInputProps: {\n      onKeyDown: relayEventsToCollection,\n      onKeyUp: relayEventsToCollection,\n      onKeyPress: relayEventsToCollection,\n    },\n  };\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { ForwardedRef } from \"react\";\nimport { amendName, PlatformIcon, PlatformIconProps } from \"./PlatformIcon\";\n\nexport const StyledHoverContainer = styled.span<{\n  hoverContainerSelector?: string;\n}>`\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector\n      ? `${hoverContainerSelector} &`\n      : \"\"} .icon[data-hover] {\n    display: none;\n  }\n\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector ? `${hoverContainerSelector}:hover &` : \"&:hover\"} {\n    .icon {\n      display: none;\n    }\n\n    .icon[data-hover] {\n      display: inline-flex;\n    }\n  }\n`;\n\nconst StyledIconHoverContainer = styled(StyledHoverContainer)`\n  display: inline-flex;\n`;\n\n/**\n * A common use case for PlatformIcons is to have a default icon and a hover icon.\n * This component captures that simple use case, by rendering both icons, and hiding one based on a hover selector.\n *\n * ### Parent hover container\n *\n * If the hover-able element is a parent of the icon, and not the icon itself (i.e., the icon should change if the\n * that parent is hovered), you can use `StyledHoverContainer` to define that parent element:\n *\n * ```tsx\n * const SomeParent = styled(StyledHoverContainer)`...`;\n * <SomeParent><AutoHoverPlatformIcon icon=\"...\" /></SomeParent>\n * ```\n *\n * If the hover-able element is a parent of the icon, with a known selector, you can pass `hoverContainerSelector`,\n * instead of using `StyledHoverContainer`:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector=\"[role=menuitem]\" />\n * ```\n *\n * If the hover container is a styled component, you can have it converted to selector like this:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector={`${MyStyledHoverContainer}`} />\n * ```\n *\n * In all examples above, the hover icon is shown when the parent is hovered, instead of the icon itself.\n *\n */\nexport const AutoHoverPlatformIcon = React.forwardRef(\n  function AutoHoverPlatformIcon(\n    {\n      hoverIcon,\n      hoverContainerSelector,\n      ...props\n    }: PlatformIconProps & {\n      /**\n       * The icon to be used when hovered. If not provided, it will be the \"somethingHovered\" where \"something\" is the `icon`\n       */\n      hoverIcon?: string;\n      hoverContainerSelector?: string;\n    },\n    ref: ForwardedRef<HTMLSpanElement>\n  ) {\n    const className = `icon ${props.className || \"\"}`;\n    return (\n      <StyledIconHoverContainer\n        ref={ref}\n        hoverContainerSelector={hoverContainerSelector}\n      >\n        <PlatformIcon {...props} className={className} />\n        <PlatformIcon\n          {...props}\n          className={className}\n          icon={hoverIcon ?? amendName(props.icon, \"Hover\")}\n          data-hover\n        />\n      </StyledIconHoverContainer>\n    );\n  }\n);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = (\n    [\"Editable\", \"Selected\", \"Pressed\", \"Focused\", \"Disabled\"] as Array<\n      keyof typeof modifiers\n    >\n  )\n    .filter((modifier) =>\n      // Focused or Pressed can't coexist with Disabled\n      modifiers.Disabled ? ![\"Focused\", \"Pressed\"].includes(modifier) : true\n    )\n    .reduce(\n      (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n      \"\"\n    );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  /**\n   * Icon path in intellij platform repo.\n   * If starts with \"/\", the path will be from the repo root. Otherwise, it's relative to \"platform/icons/src\".\n   * \".svg\" extension is optional.\n   */\n  icon: string;\n  /**\n   * Similar to icon, but for dark themes.\n   */\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  relativePath.startsWith(\"/\")\n    ? relativePath.slice(1)\n    : `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n * @example <PlatformIcon icon=\"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme();\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = makeIdsUnique(svg); // UNSAFE! Would require sanitization, or icon sources must be trusted.\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n\n/**\n * If multiple instance of the same icon is rendered at the same time, and the SVG includes\n * url(#...) references to locally defined ids, in some cases the icon is not rendered properly.\n * because of ids colliding. We make sure the ids are unique in each rendered icon.\n */\nfunction makeIdsUnique(svg: string): string {\n  const randomPostfix = (Math.random() * 1000).toFixed(0);\n  const idMatches = svg.matchAll(/id=\"(.*?)\"/g);\n  return [...idMatches].reduce((modifiedSvg, [_, id]) => {\n    const newId = `${id}-${randomPostfix}`;\n    return replaceAll(\n      `id=\"${id}\"`,\n      `id=\"${newId}\"`,\n      replaceAll(`url(#${id})`, `url(#${newId})`, modifiedSvg)\n    );\n  }, svg);\n}\n\nfunction replaceAll(theOld: string, theNew: string, str: string): string {\n  const replaced = str.replace(theOld, theNew);\n  const replacedAgain = replaced.replace(theOld, theNew);\n  if (replaced === replacedAgain) {\n    return replaced;\n  }\n  return replaceAll(theOld, theNew, replacedAgain);\n}\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { MenuTrigger, MenuTriggerProps } from \"@intellij-platform/core/Menu\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst ArrowIcon = styled(PlatformIcon)`\n  position: absolute;\n  right: 1px;\n  bottom: 1px;\n`;\n\ntype IconButtonWithMenuProps = IconButtonProps &\n  Pick<MenuTriggerProps, \"renderMenu\"> & {\n    /**\n     * whether the default arrow should be removed or not. false by default.\n     */\n    noArrow?: boolean;\n  };\n/**\n * Renders an IconButton which opens a menu. by default a down arrow icon is shown as an overlay on the rendered\n * icon, but it can be disabled by passing `noArrow`. It also restores the focus to the previously focused element,\n * when the menu is closed.\n * @param renderMenu: render prop for rendering the menu\n * @param children: the content of the icon button\n * @param noArrow: whether the default arrow should be removed or not. false by default.\n * @param buttonProps: the rest of the props that will be passed down to IconButton\n *\n * TODO: Add story and write test for focus restoration, noArrow, and basic functionality.\n */\nexport const IconButtonWithMenu = ({\n  renderMenu,\n  children,\n  noArrow = false,\n  ...buttonProps\n}: IconButtonWithMenuProps) => {\n  const previouslyFocusedElementRef = useRef<HTMLElement>();\n  return (\n    <MenuTrigger\n      renderMenu={renderMenu}\n      onOpenChange={(open) => {\n        if (!open && previouslyFocusedElementRef.current) {\n          previouslyFocusedElementRef.current.focus();\n        }\n      }}\n    >\n      {(props, ref) => (\n        <IconButton\n          {...mergeProps(buttonProps, props, {\n            onFocus: (e: FocusEvent) => {\n              if (e.relatedTarget && e.relatedTarget instanceof HTMLElement) {\n                previouslyFocusedElementRef.current = e.relatedTarget;\n              }\n            },\n          })}\n          ref={ref}\n        >\n          {children}\n          {!noArrow && <ArrowIcon icon=\"general/dropdown.svg\" />}\n        </IconButton>\n      )}\n    </MenuTrigger>\n  );\n};\n","import React, { ComponentProps } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"./Theme/Theme\";\n\ninterface Props extends ComponentProps<\"img\"> {\n  /**\n   * src for when a dark theme is active. if `darkSrc` doesn't have a non-empty string value, src will be used both\n   * for dark and light themes.\n   */\n  darkSrc?: string;\n}\n/**\n * Same as default `img`, but theme aware. Meaning that you can specify different sources for normal and dark mode.\n */\nexport const Img: React.FC<Props> = ({ darkSrc, ...props }) => {\n  const theme = useTheme() as Theme;\n  if (theme.dark) {\n    return <img {...props} src={darkSrc || props.src} />;\n  }\n  return <img {...props} />;\n};\n","import React, {\n  ForwardedRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableOptions, useFocusable } from \"@react-aria/focus\";\nimport { ValidationState } from \"@react-types/shared\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst StyledInputBox = styled.div<{\n  disabled?: boolean;\n  focused?: boolean;\n  validationState: ValidationState | undefined;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  min-width: 4rem; // https://jetbrains.github.io/ui/controls/input_field/#28\n  background: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"TextField.disabledBackground\")\n      : theme.color(\"TextField.background\")};\n  border: 1px solid\n    ${({ theme, focused, disabled, validationState }) =>\n      theme.commonColors.border({\n        focused: focused,\n        disabled: disabled,\n        invalid: validationState === \"invalid\",\n      })};\n  box-shadow: 0 0 0 0.125rem\n    ${({ theme, focused = false, validationState, disabled }) =>\n      disabled\n        ? \"transparent\"\n        : theme.commonColors.focusRing({\n            invalid: validationState === \"invalid\",\n            focused: focused,\n          })};\n  border-radius: 1px;\n  cursor: text; // the whole box moves focus to the input\n  overflow: hidden;\n`;\n\nconst StyledInput = styled.input<{ disabled?: boolean }>`\n  all: unset;\n  padding: 0.1875rem 0.375rem;\n  flex: 1; // fill in the available space within the input box\n  min-width: 0;\n  line-height: 1rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )};\n  color: ${({ theme, disabled }) =>\n    disabled &&\n    theme.color(\n      \"TextField.inactiveForeground\" as UnknownThemeProp<\"TextField.inactiveForeground\">\n    )};\n\n  caret-color: ${({ theme }) =>\n    theme.color(\n      \"TextField.caretForeground\" as UnknownThemeProp<\"TextField.caretForeground\">\n    )};\n  &::selection {\n    background: ${({ theme }) =>\n      theme.color(\n        \"*.selectionBackground\"\n      )}; // Not checked with the reference impl\n    color: ${({ theme }) =>\n      theme.color(\n        \"*.selectionForeground\"\n      )}; // Not checked with the reference impl\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  }\n`;\n\nconst StyledAddons = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem; /* TODO: check */\n  padding: 1px 0;\n`;\nconst StyledRightAddons = styled(StyledAddons)`\n  margin-right: 0.125rem; /* TODO: check */\n`;\n\nconst StyledLeftAddons = styled(StyledAddons)`\n  margin-left: 0.375rem; /* TODO: check */\n`;\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  validationState?: ValidationState;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n\n  /**\n   * Rendered inside the input box and after the input element.\n   * Used to render [Built-in buttons](https://jetbrains.github.io/ui/controls/built_in_button/).\n   */\n  addonAfter?: React.ReactNode;\n  /**\n   * Rendered inside the input box and before the input element.\n   */\n  addonBefore?: React.ReactNode;\n\n  /**\n   * Ref to the underlying input element\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n}\n\n/**\n * Bare input, themed, and with a few extra features:\n * - Support for \"invalid\" state ({@param validationState}\n * - Support for autoSelect.\n * - Disables spell check by default. It can be overwritten.\n * Use {@link InputField} for more features like an associated label, error message and context help.\n */\nexport const Input = React.forwardRef(function Input(\n  {\n    validationState,\n    autoSelect,\n    addonBefore,\n    addonAfter,\n    style,\n    className,\n    inputRef: inputRefProp,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    autoFocus,\n    ...props\n  }: InputProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const { focusableProps } = useFocusable(\n    {\n      isDisabled: props.disabled,\n      autoFocus,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    } as FocusableOptions,\n    inputRef\n  );\n  const [isFocused, setIsFocused] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setIsFocused,\n  });\n\n  useEffect(() => {\n    if (autoSelect) {\n      inputRef.current.select();\n    }\n  }, [autoSelect]);\n\n  return (\n    <StyledInputBox\n      ref={ref}\n      spellCheck={false}\n      {...mergeProps(focusWithinProps, {\n        className,\n        style,\n        onMouseDown: (event: MouseEvent) => {\n          if (event.target !== inputRef.current) {\n            event.preventDefault();\n            inputRef.current.focus();\n          }\n        },\n      })}\n      focused={isFocused}\n      validationState={validationState}\n      disabled={props.disabled}\n    >\n      {addonBefore && <StyledLeftAddons>{addonBefore}</StyledLeftAddons>}\n      <StyledInput ref={inputRef} {...mergeProps(props, focusableProps)} />\n      {addonAfter && <StyledRightAddons>{addonAfter}</StyledRightAddons>}\n    </StyledInputBox>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledLabel = styled.label<{ disabled?: boolean }>`\n  color: ${({ theme, disabled }) => theme.commonColors.label({ disabled })};\n`;\n","import React, {\n  ChangeEvent,\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n} from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { AriaFieldProps, useField } from \"@react-aria/label\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableProps } from \"@react-types/shared\";\nimport { Label } from \"@intellij-platform/core/Label\";\nimport {\n  PositionedTooltipTrigger,\n  ValidationTooltip,\n} from \"@intellij-platform/core/Tooltip\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField/Input\";\n\ntype LabelPlacement = \"above\" | \"before\";\n\nexport interface InputFieldProps\n  extends Omit<AriaFieldProps, \"labelElementType\">,\n    FocusableProps,\n    Pick<InputProps, \"addonBefore\" | \"addonAfter\" | \"inputRef\"> {\n  /**\n   * className applied on the field's wrapper div.\n   */\n  className?: string;\n  /**\n   * style applied on the field's wrapper div.\n   */\n  style?: CSSProperties;\n  /**\n   * Label to be associated with the input.\n   */\n  label?: React.ReactNode;\n  /**\n   * Context help, shown below the input. A typical use case is\n   * [to provide example values](https://jetbrains.github.io/ui/principles/context_help/#07).\n   */\n  contextHelp?: React.ReactNode;\n  /**\n   * Placement of the label with respect to the input box.\n   */\n  labelPlacement?: LabelPlacement;\n\n  /**\n   * Whether the input is disabled. Use this prop\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Convenient prop to be used instead of inputProps.placeholder\n   **/\n  placeholder?: string;\n  /**\n   * Convenient prop to be used instead of inputProps.value\n   **/\n  value?: HTMLProps<HTMLInputElement>[\"value\"];\n  /**\n   * Convenient prop to be used instead of inputProps.defaultValue\n   **/\n  defaultValue?: HTMLProps<HTMLInputElement>[\"defaultValue\"];\n  /**\n   * Convenient prop to be used instead of inputProps.onChange. It also calls the passed callback with the\n   * change value instead of input.\n   **/\n  onChange?: (newValue: string) => void;\n  /**\n   * Props to be passed to the underlying input element.\n   **/\n  inputProps?: Omit<\n    HTMLProps<HTMLInputElement>,\n    \"as\" | \"ref\" | \"disabled\" //isDisabled should be used\n  >;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n}\n\nconst StyledInputContainer = styled.div<{ labelPlacement?: LabelPlacement }>`\n  display: inline-flex;\n  flex-direction: ${({ labelPlacement }) =>\n    labelPlacement === \"above\" ? \"column\" : \"row\"};\n  align-items: start;\n  gap: 0.375rem;\n`;\n\nconst StyledLabel = styled(Label)`\n  margin-top: 0.25rem;\n  line-height: 1.2;\n`;\nconst StyledContextHelp = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n`;\n\nconst StyledBoxAndContextHelpWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: 0.25rem; /* Not checked with the reference impl */\n`;\n\n/**\n * An input box with an associated label, error message, and context help.\n */\nexport const InputField = React.forwardRef(function InputField(\n  {\n    className,\n    style,\n    labelPlacement = \"before\",\n    contextHelp,\n    inputProps = {},\n    addonBefore,\n    addonAfter,\n    inputRef,\n    ...props\n  }: InputFieldProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { fieldProps, errorMessageProps, labelProps, descriptionProps } =\n    useField(props);\n\n  return (\n    <StyledInputContainer\n      ref={ref}\n      labelPlacement={labelPlacement}\n      className={className}\n      style={style}\n    >\n      <StyledLabel {...labelProps} disabled={props.isDisabled}>\n        {props.label}\n      </StyledLabel>\n      <StyledBoxAndContextHelpWrapper>\n        <PositionedTooltipTrigger\n          placement=\"top start\"\n          crossOffset={36}\n          showOnFocus\n          isDisabled={!props.errorMessage}\n          tooltip={\n            <ValidationTooltip>\n              <div {...errorMessageProps}>{props.errorMessage}</div>\n            </ValidationTooltip>\n          }\n          delay={0}\n        >\n          <Input\n            inputRef={inputRef}\n            placeholder={props.placeholder}\n            disabled={props.isDisabled}\n            validationState={props.validationState}\n            autoSelect={props.autoSelect}\n            autoFocus={props.autoFocus}\n            addonAfter={addonAfter}\n            addonBefore={addonBefore}\n            {...mergeProps(fieldProps, inputProps, {\n              value: props.value,\n              defaultValue: props.defaultValue,\n              onChange: (e: ChangeEvent<HTMLInputElement>) =>\n                props.onChange?.(e.target.value),\n            })}\n          />\n        </PositionedTooltipTrigger>\n        {contextHelp && (\n          <StyledContextHelp {...descriptionProps}>\n            {contextHelp}\n          </StyledContextHelp>\n        )}\n      </StyledBoxAndContextHelpWrapper>\n    </StyledInputContainer>\n  );\n});\n","import { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst getDefaultLinkColor = ({ theme }: { theme: Theme }) =>\n  theme.commonColors.linkForegroundEnabled;\n\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n  outline: none;\n  // &:focus-visible didn't work as expected, so FocusRing is used\n  &.focus-visible {\n    outline: 1px solid\n      ${({ theme }) =>\n        theme.color(\n          \"Link.focusedBorderColor\" as UnknownThemeProp<\"Link.focusedBorderColor\">,\n          theme.commonColors.focusBorderColor\n        )};\n    border-radius: 2px; // Registry.intValue(\"ide.link.button.focus.round.arc\", 4)\n  }\n  color: ${getDefaultLinkColor};\n\n  &:hover,\n  &.hover /* for testing purposes*/ {\n    text-decoration: underline;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.hoverForeground\",\n        theme.color(\n          \"link.hover.foreground\" as UnknownThemeProp<\"link.hover.foreground\">,\n          \"\" /*FIXME: check*/\n        )\n      )};\n  }\n  &:active,\n  &.active {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.pressedForeground\",\n        theme.color(\n          \"link.pressed.foreground\" as UnknownThemeProp<\"link.pressed.foreground\">,\n          !theme.dark ? \"#F00000\" : \"#BA6F25\"\n        )\n      )};\n  }\n  &:disabled,\n  &.disabled {\n    cursor: default;\n    text-decoration: none;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.disabledForeground\" as UnknownThemeProp<\"Link.disabledForeground\">,\n        theme.color(\n          \"Label.disabledForeground\",\n          theme.color(\"Label.disabledText\", \"#999\")\n        )\n      )};\n  }\n  // We may need to refine this to allow passing visited as a prop for links that don't have href, and not apply the\n  // styles in that case, since it seems no href is considered visited by default. Although, in all main themes\n  // Link.visitedForeground is set to the default link color.\n  &:visited,\n  &.visited {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.visitedForeground\",\n        theme.color(\n          \"link.visited.foreground\" as UnknownThemeProp<\"link.visited.foreground\">,\n          !theme.dark ? \"#800080\" : \"#9776A9\"\n        )\n      )};\n  }\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { AriaLinkProps } from \"@react-types/link\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { FocusRing, useFocusable } from \"@react-aria/focus\";\nimport { StyledLink } from \"@intellij-platform/core/Link/StyledLink\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\n\nexport type LinkProps = AriaLinkProps & {\n  isDisabled?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n  excludeFromTabOrder?: boolean;\n};\n\n/**\n * A focusable span in style of [Link](https://jetbrains.github.io/ui/controls/link/) and with accessibility role of link.\n *\n * TODO and known issues:\n * - in the reference impl, Space presses the link, Enter doesn't. It's vice versa here, because of how usePress is implemented.\n * - Support for External links\n * - Support for Anchor elements?\n *\n * Unknowns:\n * - What are ActionLink and DefaultLinkButtonUI?\n * - What is HyperLinkLabel compared to LabelLink (which was looked into in implementation of this component)?\n */\nexport const Link = React.forwardRef(\n  (\n    props: LinkProps,\n    forwardedRef: ForwardedRef<HTMLAnchorElement>\n  ): React.ReactElement => {\n    const ref = useForwardedRef(forwardedRef);\n\n    const { focusableProps } = useFocusable(props, ref);\n    const { pressProps, isPressed } = usePress({ ...props, ref });\n    const domProps = filterDOMProps(props, { labelable: true });\n    const interactionHandlers = mergeProps(focusableProps, pressProps);\n\n    return (\n      <FocusRing focusRingClass=\"focus-visible\">\n        <StyledLink\n          {...mergeProps(focusableProps, interactionHandlers, domProps)}\n          as=\"span\"\n          role=\"link\"\n          ref={ref}\n          // maybe use clsx\n          className={`${props.isDisabled ? \"disabled\" : \"\"} ${\n            isPressed ? \"active\" : \"\"\n          } ${props.className || \"\"}`}\n          aria-disabled={props.isDisabled || undefined}\n          tabIndex={\n            !props.isDisabled ? (props.excludeFromTabOrder ? -1 : 0) : undefined\n          }\n        >\n          {props.children}\n        </StyledLink>\n      </FocusRing>\n    );\n  }\n);\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable } from \"@react-types/shared\";\nimport React, { ForwardedRef, Key } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { listItemRenderer } from \"./listItemRenderer\";\nimport { useListState } from \"./useListState\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nexport type ListProps<T extends object> = Omit<\n  Omit<AriaListBoxProps<T>, \"disallowEmptySelection\">,\n  keyof AsyncLoadable\n> &\n  CollectionRefProps & {\n    /**\n     * fills the available horizontal or vertical space, when rendered in a flex container.\n     */\n    fillAvailableSpace?: boolean;\n    /**\n     * When true, shows the list in focused style, even when it's not focused. A common use case is when the list\n     * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n     * keyboard events as if the list was focused.\n     * Another (maybe questionable) use case is master detail views, where the master view is shown as focused, even\n     * when the details view has physical focus.\n     */\n    showAsFocused?: boolean;\n    allowEmptySelection?: boolean;\n    /**\n     * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n     * Enter not implemented yet :D\n     */\n    onAction?: (key: Key) => void;\n  };\n\n/**\n * List view with speedSearch instead of default typeahead.\n * TODO:\n *  - Support virtualization\n *  - Support custom rendering\n *  -\n */\nexport const List = React.forwardRef(function List<T extends object>(\n  {\n    allowEmptySelection = false,\n    showAsFocused = false,\n    fillAvailableSpace = false,\n    onAction,\n    ...inputProps\n  }: ListProps<T>,\n  forwardedRef: ForwardedRef<HTMLUListElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n  const { listProps, focused } = useList(props, state, ref);\n\n  return (\n    <StyledList\n      fillAvailableSpace={fillAvailableSpace}\n      {...listProps}\n      ref={ref}\n    >\n      {[...state.collection].map(\n        listItemRenderer({\n          item: (item) => (\n            <ListItem\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={() => onAction?.(item.key)}\n              listFocused={showAsFocused || focused}\n            />\n          ),\n        })\n      )}\n    </StyledList>\n  );\n});\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ elementType: \"li\", orientation: \"vertical\" })\n        .separatorProps}\n    />\n  );\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { ListState } from \"@react-stately/list\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport { StyledListItem } from \"./StyledListItem\";\n\nexport interface ListItemProps<T> {\n  listFocused: boolean;\n  item: Node<T>;\n  state: ListState<T>;\n  onAction: () => void;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({\n  listFocused,\n  item,\n  state,\n  onAction,\n  children,\n}: ListItemProps<T>) {\n  const ref = React.useRef(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isSelected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction,\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={isSelected}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      aria-selected={isSelected}\n      {...pressProps}\n      ref={ref}\n    >\n      <ItemStateContext.Provider\n        value={{\n          isDisabled,\n          isSelected,\n          isContainerFocused: listFocused,\n          node: item,\n        }}\n      >\n        {children || item.rendered}\n      </ItemStateContext.Provider>\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\nexport const StyledList = styled.ul.withConfig<{\n  fillAvailableSpace?: boolean;\n}>({\n  shouldForwardProp: (prop) => prop !== \"fillAvailableSpace\",\n})`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.li<StyledListItemProps>(\n  ({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"List.foreground\" as UnknownThemeProp<\"List.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"List.selectionForeground\" as UnknownThemeProp<\"List.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"List.selectionBackground\" as UnknownThemeProp<\"List.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"List.selectionInactiveForeground\" as UnknownThemeProp<\"List.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"List.selectionBackgroundInactive\" as UnknownThemeProp<\"List.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n      position: \"relative\",\n      display: \"flex\",\n      whiteSpace: \"nowrap\",\n      paddingLeft: \"0.5rem\", // themed?\n      paddingRight: \"0.5rem\", // themed?\n      lineHeight: \"20px\",\n      outline: \"none\",\n      cursor: \"default\",\n      minWidth: \"min-content\", // ?\n    };\n  }\n);\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.li(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { Node } from \"@react-types/shared\";\nimport React from \"react\";\nimport { StyledListSectionHeader } from \"./StyledListSectionHeader\";\nimport { ListDivider } from \"./ListDivider\";\n\ninterface SectionNode<T> extends Node<T> {\n  type: \"section\";\n}\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\n\ninterface DividerNode<T> extends Node<T> {\n  type: \"divider\";\n}\n\nconst isItemNode = <T extends any>(node: Node<T>): node is ItemNode<T> =>\n  node.type === \"item\";\nconst isSectionNode = <T extends any>(node: Node<T>): node is SectionNode<T> =>\n  node.type === \"section\";\nconst isDividerNode = <T extends any>(node: Node<T>): node is DividerNode<T> =>\n  node.type === \"divider\";\n\ntype listItemRendererArgs<T extends any> = {\n  item: (item: ItemNode<T>) => React.ReactNode;\n  sectionHeader?: (item: SectionNode<T>) => React.ReactNode;\n};\nexport const listItemRenderer = <T extends any>({\n  item: renderItem,\n  sectionHeader: renderSectionHeader = (item) => (\n    <StyledListSectionHeader>{item.rendered}</StyledListSectionHeader>\n  ),\n}: listItemRendererArgs<T>) => {\n  return render;\n\n  function render(item: Node<T>): React.ReactNode {\n    if (isItemNode(item)) {\n      return renderItem(item);\n    }\n    if (isSectionNode(item)) {\n      return (\n        <React.Fragment key={item.key}>\n          {renderSectionHeader(item)}\n          {[...(item.childNodes as ItemNode<T>[])].map(render)}\n        </React.Fragment>\n      );\n    }\n    if (isDividerNode(item)) {\n      return <ListDivider key={item.key} />;\n    }\n    return null;\n  }\n};\n","import { AriaSelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nexport interface ListProps\n  extends Omit<\n      AriaSelectableListOptions,\n      | \"disallowEmptySelection\"\n      | \"selectOnFocus\"\n      | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n      | \"collection\" // Grouped as state, the second argument, like in useListBox\n      | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n      | \"ref\" // Third argument\n    >,\n    CollectionRefProps {\n  allowEmptySelection?: boolean;\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  props: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is going to be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and allowEmptySelection is false.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      !props.allowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.setFocusedKey(firstKey);\n      state.selectionManager.select(firstKey);\n    }\n  }, [!props.allowEmptySelection]);\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  KeyboardDelegate,\n  Node,\n} from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  MultipleSelectionManager,\n  SelectionManager,\n} from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { useCollectionAutoScroll } from \"@intellij-platform/core/Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T> & CollectionRefProps\n): ListState<T> {\n  const state = originalUseListState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  useCollectionRef(props, state);\n  return state;\n}\n","import React, { HTMLAttributes, HTMLProps } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayTriggerProps } from \"@react-types/overlays\";\n\nimport { useContextMenu } from \"./useContextMenu\";\nimport { MenuOverlay } from \"./MenuOverlay\";\n\ninterface ContextMenuContainerProps extends HTMLProps<HTMLDivElement> {\n  /**\n   * Will be called to return the Menu when context menu is triggered. Use {@link Menu} component to render a menu.\n   */\n  renderMenu: () => React.ReactNode;\n  /**\n   * If children is a function, context menu props is passed to it, to be passed to the underlying element.\n   * Otherwise, a div container will be rendered.\n   */\n  children:\n    | React.ReactNode\n    | ((props: HTMLAttributes<HTMLElement>) => React.ReactNode);\n}\n\n/**\n * A generic container for context menu. It's the same as a normal div, only with an additional `renderMenu` prop,\n * to be used to render context menu, when it's triggered.\n * Closes the menu when a menu action is triggered.\n */\nexport const ContextMenuContainer = ({\n  children,\n  renderMenu,\n  ...props\n}: ContextMenuContainerProps) => {\n  const state = useMenuTriggerState({} as OverlayTriggerProps);\n\n  const { overlayProps, containerProps, overlayRef } = useContextMenu(\n    {},\n    state\n  );\n  const allProps = mergeProps(props, containerProps);\n  return (\n    <>\n      {typeof children === \"function\" ? (\n        children(allProps)\n      ) : (\n        <div {...allProps}>{children}</div>\n      )}\n      <MenuOverlay\n        state={state}\n        overlayRef={overlayRef}\n        overlayProps={overlayProps}\n        restoreFocus\n      >\n        {renderMenu()}\n      </MenuOverlay>\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { useOverlay } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { areInNestedOverlays } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Functionality and accessibility of context menu.\n */\nexport const useContextMenu = (\n  { isDisabled = false }: { isDisabled?: boolean },\n  state: MenuTriggerState\n) => {\n  /**\n   * NOTE: not using useMenuTrigger because:\n   * - There is no option to have a trigger like this: \"right click + long press only by touch\" which seems to be the\n   *   reasonable trigger for context menu. If we want to use it just for long press, we could disable it if it's not\n   *   a touch device, but that would be suboptimal, since both touch and mouse can be available, and it should depend\n   *   not on availability of touch, but on the triggered event type. Plus, isDisabled is broken in v<3.5.0\n   * - It's not quite clear at the moment, if the aria attributes that useMenuTrigger sets would be applicable in case\n   *   of this context menu component too. the trigger is not the container. For example, if there is a list rendered\n   *   inside, the selected item would be the trigger. Maybe even this component, as a container for context menu\n   *   is not the best way to allow for context menu, when comes to a11y concerns. For now, we skip a11y props of the\n   *   trigger. A11y props of the menu itself (e.g. aria-label) would also be up to the usage of this component.\n   *\n   *   TODO: add support for long touch\n   */\n  const onContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    // NOTE: we can't use offsetX/offsetY, because it would depend on the exact target that was clicked.\n    if (!state.isOpen) {\n      state.open(null);\n    }\n    updatePosition(e);\n  };\n\n  const overlayRef = useRef(null);\n\n  const { overlayProps: positionProps, updatePosition } =\n    useMouseEventOverlayPosition({\n      overlayRef,\n      placement: \"bottom start\",\n      // shouldFlip should be false, but it doesn't work as expected. Overlay container is rendered within the view port\n      // but the menu overflows from the overlay container\n      shouldFlip: true,\n      offset: -8,\n      isOpen: state.isOpen,\n    });\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        return !areInNestedOverlays(overlayRef.current, element);\n      },\n    },\n    overlayRef\n  );\n\n  const containerProps: React.HTMLAttributes<HTMLElement> = isDisabled\n    ? {}\n    : { onContextMenu };\n  return {\n    /**\n     * props to be applied on the container element which is supposed to have the context menu\n     */\n    containerProps,\n    /**\n     * The ref to be applied on the menu overlay wrapper. It's usually an input instead of an output in similar\n     * react-aria hooks, but it seemed unnecessary here.\n     */\n    overlayRef,\n    /**\n     * props to be applied on the menu overlay wrapper.\n     */\n    overlayProps: mergeProps(overlayProps, positionProps),\n  };\n};\n","import { Item, PartialNode, Section } from \"@react-stately/collections\";\nimport { Item as Item2 } from \"./Item\";\nimport {\n  CollectionBase,\n  CollectionElement,\n  ItemProps,\n  SectionProps,\n} from \"@react-types/shared\";\nimport React from \"react\";\n\nfunction* patchCollectionItem<T>(nodes: Generator<PartialNode<T>>) {\n  for (const partialNode of nodes)\n    yield {\n      ...partialNode,\n      *childNodes() {\n        const result2 = partialNode.childNodes?.();\n        if (result2) {\n          for (const partialChildNode of result2) {\n            const { type, ...partialChildNodeWithoutType } = partialChildNode;\n            yield partialChildNodeWithoutType;\n          }\n        }\n      },\n    };\n}\n\nconst PatchedItem = Item.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedItem.getCollectionNode = function getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Item.getCollectionNode(props, context));\n};\n\nconst PatchedSection = Section.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedSection.getCollectionNode = function getCollectionNode<T>(\n  props: SectionProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Section.getCollectionNode(props, context));\n};\nfunction convertCollectionElement<T>(\n  result: CollectionElement<T> | React.ReactNode\n): CollectionElement<T> {\n  if (\n    React.isValidElement(result) &&\n    (result.type === Item || result.type === Item2)\n  ) {\n    return React.createElement(\n      PatchedItem,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as ItemProps<T>),\n      },\n      convertChildren(result.props.children)\n    ) as CollectionElement<T>;\n  }\n  if (React.isValidElement(result) && result.type === Section) {\n    return React.createElement(\n      PatchedSection,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as SectionProps<T>),\n      } as any,\n      convertChildren((result.props as any).children)\n    ) as CollectionElement<T>;\n  }\n  return result as CollectionElement<T>;\n}\n\nfunction convertChildren<T>(children: React.ReactNode): React.ReactNode {\n  return Array.isArray(children)\n    ? // NOTE: We intentionally avoid using React.Children.map as it messes with keys.\n      children.map(convertChildren)\n    : convertCollectionElement(children);\n}\n\n/**\n * CollectionBuilder expects child type to be the same as parent type, which is weird in the first place:\n * https://github.com/adobe/react-spectrum/blob/cae83ff95f2f709b761c70d47ace96d6346ed873/packages/%40react-stately/collections/src/CollectionBuilder.ts#L148\n * On the other hand, the default Item components sets the `type` to item, for all child PartialNode objects:\n * https://github.com/adobe/react-spectrum/blob/c49d9819adc2cb63377f39557352440c72072caf/packages/%40react-stately/collections/src/Item.ts#L40-L54\n * Which is also a little unexpected, as in many nested collections, an item can have all types of children.\n * This function patches that, replacing Item elements with PatchedItem element which doesn't set type on children\n * PartialNodes.\n */\nexport function patchCollectionProps<T>({\n  children,\n  ...props\n}: CollectionBase<T>): CollectionBase<T> {\n  return {\n    ...props,\n    children:\n      typeof children === \"function\"\n        ? (node: T) => convertChildren(children(node)) as CollectionElement<T>\n        : (convertChildren(children) as CollectionElement<T>),\n  };\n}\n","import React, { CSSProperties, Key, RefObject, useContext } from \"react\";\nimport { AriaMenuOptions, useMenu as useMenuAria } from \"@react-aria/menu\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { patchCollectionProps } from \"@intellij-platform/core/Collections/patchCollectionProps\";\nimport { TreeProps, useTreeState } from \"../Tree/useTreeState\"; // shared dependency between tree and menu, that could be lifted up import {Submenu} from '@intellij-platform/core/Menu/Submenu'\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { SubmenuProps } from \"./Submenu\"; // internal export\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key; // FIXME: should be keys\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void; // FIXME: should be keys\n  defaultExpandedKey?: Key; // FIXME: should be keys\n  /**\n   * @deprecated\n   */\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n\n  /**\n   * Defines the press behaviour (either by mouse or by pressing Enter when focused) on menu items with submenu.\n   * By default (undefined), pressing or hovering over a menu item with submenu, opens the submenu.\n   * When set to \"toggle\", pressing a menu item with submenu will toggle the submenu. Hovering over such items will\n   * no longer open the submenu.\n   * When set to \"action\", pressing a menu item with submenu will call onAction for that item, and closes the menu.\n   * Hovering over such items will no longer open the submenu.\n   *\n   * In all cases, pressing the right arrow will always open the submenu.\n   */\n  submenuBehavior?: \"default\" | \"toggleOnPress\" | \"actionOnPress\";\n\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n\n  /**\n   * Minimum width of the menu\n   * @default: 120px\n   */\n  minWidth?: CSSProperties[\"minWidth\"];\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\nexport const MenuContext = React.createContext<\n  Pick<\n    MenuProps<unknown>,\n    \"onClose\" | \"onAction\" | \"submenuBehavior\" | \"autoFocus\"\n  > & {\n    itemWrapper?: (\n      renderedItem: React.ReactNode,\n      item: Node<unknown>\n    ) => React.ReactNode;\n    renderSubmenu?: (props: SubmenuProps<unknown>) => React.ReactNode;\n  }\n>({});\n\nexport function useMenu<T>(\n  {\n    onAction: onActionProp,\n    submenuBehavior = \"default\",\n    ...props\n  }: MenuProps<T> & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { close } = useContext(MenuOverlayContext);\n  const onClose = () => {\n    props.onClose?.();\n    close();\n  };\n  const onAction = (key: Key) => {\n    if (\n      // The following check should have been in useMenu, but it's not currently. Probably because they haven't yet\n      // covered nested menus.\n      !state.collection.getItem(key)?.hasChildNodes\n    ) {\n      return onActionProp?.(key);\n    } else if (submenuBehavior === \"actionOnPress\") {\n      onClose();\n      return onActionProp?.(key);\n    }\n  };\n  const menuContextValue: React.ContextType<typeof MenuContext> = {\n    submenuBehavior,\n    autoFocus: props.autoFocus,\n    onAction,\n    onClose,\n  };\n  const { menuProps } = useMenuAria(\n    { ...props, onAction, onClose },\n    state,\n    ref\n  );\n\n  return {\n    menuProps,\n    menuContextValue,\n  };\n}\n\nexport function useMenuState<T extends object>(\n  props: TreeProps<T> &\n    Pick<\n      MenuProps<T>,\n      \"expandedKey\" | \"defaultExpandedKey\" | \"onExpandedKeyChange\"\n    >\n) {\n  props = patchCollectionProps(props);\n  return useTreeState({\n    ...props,\n    childExpansionBehaviour: \"single\",\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n}\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also, there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n */\nexport function Menu<T extends object>({ minWidth, ...props }: MenuProps<T>) {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useMenuState(props);\n  const { menuContextValue, menuProps } = useMenu(props, state, ref);\n\n  return (\n    /**\n     * MenuContext is used to pass onAction and onClose to be passed to useMenu in submenus.\n     * That's needed because in useMenuItem onAction and onClose are read off a WeakMap which has the menu state\n     * (TreeState) as key. So we have to pass onAction and onClose everytime we call useMenu in submenus, to let the\n     * menu items in that submenu access the right value of onAction and onClose. To avoid drilling these props down,\n     * we keep it in a context.\n     */\n    <MenuContext.Provider value={menuContextValue}>\n      <StyledMenu\n        {...menuProps}\n        ref={ref}\n        style={{ minWidth }}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        {renderMenuNodes(state, [...state.collection])}\n      </StyledMenu>\n    </MenuContext.Provider>\n  );\n}\n","import React, { HTMLAttributes, ReactNode, RefObject, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const hasSubmenu = item.hasChildNodes;\n  const { menuItemProps: ariaMenuItemProps, ...result } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: hasSubmenu ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n\n  // useMenuItem in react aria utilizes useHover to focus item on hover. The logic there conflicts with nested menus\n  // requirements (at least based on how nested menu is implemented here currently). Also, submenuBehavior requires\n  // some more customization. So we delete the handlers set by useHover in useMenuItem, and add a custom useHover.\n  delete ariaMenuItemProps.onMouseEnter;\n  delete ariaMenuItemProps.onPointerEnter;\n\n  if (submenuBehavior === \"default\" && isExpanded) {\n    // When menu item has its submenu opened, clicking it should not move focus or do anything.\n    delete ariaMenuItemProps.onPointerDown;\n  }\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled,\n    onHoverStart: () => {\n      const isAnySubmenuOpen = [...state.expandedKeys].some(\n        (expandedKey) =>\n          state.collection.getItem(expandedKey)?.parentKey === item.parentKey\n      );\n\n      if (submenuBehavior === \"default\" && !isExpanded) {\n        state.toggleKey(item.key);\n      }\n\n      if (!isFocusVisible()) {\n        const shouldFocus =\n          submenuBehavior === \"default\" ? !isExpanded : !isAnySubmenuOpen;\n        if (shouldFocus) {\n          state.selectionManager.setFocused(true);\n        }\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  return {\n    ...result,\n    menuItemProps: mergeProps(\n      hasSubmenu\n        ? {\n            \"aria-expanded\": isExpanded,\n            \"aria-haspopup\": \"menu\",\n          }\n        : {},\n      ariaMenuItemProps,\n      hoverProps,\n      keyboardProps,\n      submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n    ),\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...menuItemProps}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using Overlay:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         *\n         */\n        <Overlay\n          OverlayComponent={\n            /**\n             *  The FocusScope included in the default Overlay, messes with a particular expected behavior. So we use\n             *  SimpleOverlay, which just renders its children as a portal. There may be a better solution for that\n             *  problem, which would eliminate the need for the funky `OverlayComponent` prop on our `Overlay`\n             *  component. Something to look into in the future.\n             */\n            SimpleOverlay\n          }\n        >\n          <div ref={nestedMenuRef} {...positionProps}>\n            {renderSubmenu({ parentState: state, rootKey: item.key })}\n          </div>\n        </Overlay>\n      )}\n    </>\n  );\n}\n\n/**\n * A replacement for react-aria Overlay, which doesn't render FocusScope\n */\nfunction SimpleOverlay({\n  children,\n  portalContainer = document.body,\n}: {\n  children: ReactNode;\n  portalContainer?: Element | undefined;\n}) {\n  return ReactDOM.createPortal(children, portalContainer);\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <Overlay>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </Overlay>\n  );\n}\n","import React, { HTMLAttributes, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\nimport { AriaButtonProps } from \"@react-types/button\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  // TODO: replace render function children with normal children, and utilize PressResponder. Add a story for the\n  //  edge case of custom trigger, using PressResponder\n  children: (\n    props: HTMLAttributes<HTMLButtonElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean;\n  /**\n   * By default, the menu is positioned relative to the trigger. `positioningTargetRef` can be used to have the menu\n   * positioned to another element. An example use case is when the menu trigger is a button inside some list item or\n   * text box, but the menu semantically belongs to the container list item or text box.\n   */\n  positioningTargetRef?: React.RefObject<HTMLElement>;\n  renderMenu: (props: {\n    menuProps: React.HTMLAttributes<HTMLElement>;\n  }) => React.ReactNode;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = true,\n  preventFocusOnPress = true,\n  positioningTargetRef,\n  ...otherProps\n}) => {\n  const menuTriggerProps: AriaMenuTriggerProps = {\n    ...otherProps,\n    direction,\n    align,\n    shouldFlip,\n  };\n  const state = useMenuTriggerState(menuTriggerProps);\n  const triggerRef = React.useRef(null);\n  const overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  const { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  const ariaButtonProps: AriaButtonProps<\"button\"> = {\n    ...triggerProps,\n    // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n    preventFocusOnPress,\n  };\n  const { buttonProps } = useButton(ariaButtonProps, triggerRef);\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: positioningTargetRef ?? triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<AriaMenuTriggerProps>[\"direction\"],\n  align: Required<AriaMenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import React, {\n  HTMLAttributes,\n  RefObject,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport {\n  mergeProps,\n  useLayoutEffect,\n  useResizeObserver,\n} from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { ListCollection } from \"@react-stately/list\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  useCollectionSpeedSearch,\n  CollectionSpeedSearchMatches,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchInput,\n  SpeedSearchPopupProps,\n  SpeedSearchState,\n} from \"@intellij-platform/core/SpeedSearch\";\n\nimport { StyledMenu } from \"./StyledMenu\";\nimport { MenuContext, MenuProps, useMenu, useMenuState } from \"./Menu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { SubmenuProps, useSubmenu } from \"./Submenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuKeyboardDelegate } from \"./_useSubmenu\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledVerticalSeparator } from \"@intellij-platform/core/StyledSeparator\";\n\nexport interface SpeedSearchMenuProps<T>\n  extends Omit<MenuProps<T>, \"submenuBehavior\"> {\n  submenuBehavior?: Exclude<MenuProps<T>[\"submenuBehavior\"], \"default\">;\n  /**\n   * Text to show when the filtering is active but no match is found for the current query.\n   * @default \"Nothing to show\"\n   */\n  emptyText?: React.ReactNode;\n}\n\nconst StyledItemsContainer = styled.ul`\n  all: unset;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst StyledSearchFieldWrapper = styled.div`\n  flex-shrink: 0;\n  padding: 0 0.2rem 0.3rem;\n`;\n\nconst StyledSpeedSearchMenu = styled(StyledMenu)`\n  --jui-menu-item-padding: 1.25rem;\n  ${StyledVerticalSeparator} {\n    margin: 0 3px; // FIXME: probably use theme\n  }\n`;\n\nconst StyledPlaceholder = styled.div`\n  color: ${({ theme }) =>\n    // Ref: StatusText => DEFAULT_ATTRIBUTES => SimpleTextAttributes.GRAYED_ATTRIBUTES\n    theme.color(\n      \"Component.infoForeground\",\n      theme.dark ? \"#787878\" : \"#999999\"\n    )};\n\n  // center positioning. Intentionally different from reference impl.\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  white-space: nowrap;\n`;\n\nfunction useSpeedSearchMenu<T>(\n  state: TreeState<T>,\n  rootKey: React.Key | null,\n  ref: React.RefObject<HTMLUListElement>,\n  containerRef: React.RefObject<HTMLDivElement>\n) {\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n  } = useCollectionSpeedSearch({\n    collection: useMemo(\n      () =>\n        new ListCollection(\n          rootKey\n            ? state.collection.getItem(rootKey).childNodes\n            : state.collection\n        ),\n      [rootKey, state.collection]\n    ),\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new MenuKeyboardDelegate(\n      rootKey,\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    stickySearch: true,\n    focusBestMatch: true,\n    ref,\n  });\n\n  // When a menu item which was focused is filtered out, the focus goes to body.\n  // We manually move focus back to the container.\n  useEffect(() => {\n    const element = ref.current;\n    if (\n      element &&\n      state.selectionManager.isFocused &&\n      !element?.contains(document.activeElement)\n    ) {\n      focusSafely(element);\n    }\n  });\n\n  const lastSize = useRef<{ width: number; height: number } | null>(null);\n  const [size, setSize] = useState<{ width: number; height: number } | null>(\n    null\n  );\n  const measureSize = () => {\n    const { offsetWidth = 0, offsetHeight = 0 } = containerRef.current || {};\n    if (offsetWidth > 0 && offsetHeight > 0) {\n      lastSize.current = {\n        width: offsetWidth,\n        height: offsetHeight,\n      };\n    }\n  };\n  const isSearchActive =\n    speedSearch.active && speedSearch.searchTerm.length > 0;\n  useResizeObserver({\n    ref: containerRef,\n    onResize: useEventCallback(() => {\n      if (!isSearchActive) {\n        measureSize();\n      }\n    }),\n  });\n  useLayoutEffect(() => {\n    if (isSearchActive) {\n      if (lastSize.current) {\n        setSize(lastSize.current);\n      }\n    } else {\n      if (!lastSize.current) {\n        measureSize();\n      }\n      setSize(null);\n    }\n  }, [isSearchActive]);\n\n  const sizeStyleProps: HTMLAttributes<HTMLElement> = size\n    ? {\n        style: {\n          ...size,\n          minHeight: size.height,\n          maxHeight: size.height,\n        },\n      }\n    : {};\n  return {\n    speedSearch,\n    keyboardDelegate,\n    selectionManager,\n    speedSearchContainerProps: mergeProps<HTMLAttributes<HTMLElement>[]>(\n      speedSearchContainerProps,\n      sizeStyleProps,\n      {\n        onMouseDown: (e: React.MouseEvent) => {\n          // Until SearchInput and connecting that to a selectable list is implemented, we should prevent menu from\n          // losing focus when the fake search input is clicked\n          e.preventDefault();\n        },\n      }\n    ),\n    searchPopupProps,\n  };\n}\n\n/**\n * Drop-in replacement for Menu, which implements SpeedSearch.\n *\n *\n */\nexport const SpeedSearchMenu = <T extends object>({\n  submenuBehavior = \"toggleOnPress\",\n  autoFocus = \"first\",\n  emptyText = \"Nothing to show\",\n  minWidth,\n  ...props\n}: SpeedSearchMenuProps<T>) => {\n  const onAction = (key: React.Key) => {\n    props.onAction?.(key);\n    speedSearch.clear();\n  };\n  const ref = React.useRef<HTMLUListElement>(null);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const state = useMenuState({ ...props });\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, null, ref, containerRef);\n  const { menuContextValue, menuProps } = useMenu(\n    {\n      ...props,\n      autoFocus,\n      onAction,\n      keyboardDelegate,\n      submenuBehavior,\n    },\n    state,\n    ref\n  );\n\n  return (\n    <MenuContext.Provider\n      value={{\n        ...menuContextValue,\n        renderSubmenu: (props) => (\n          <SpeedSearchSubmenu emptyText={emptyText} {...props} />\n        ),\n      }}\n    >\n      <StyledSpeedSearchMenu\n        as=\"div\"\n        ref={containerRef}\n        style={{ minWidth }}\n        {...speedSearchContainerProps}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        <SpeedSearchMenuContent\n          items={[...state.collection]}\n          emptyText={emptyText}\n          speedSearch={speedSearch}\n          searchPopupProps={searchPopupProps}\n          state={state}\n          menuProps={menuProps}\n          menuRef={ref}\n        />\n      </StyledSpeedSearchMenu>\n    </MenuContext.Provider>\n  );\n};\n\nfunction SpeedSearchMenuContent<T>({\n  items,\n  state,\n  speedSearch,\n  searchPopupProps,\n  menuProps,\n  menuRef,\n  emptyText,\n}: {\n  state: TreeState<T>;\n  items: Node<T>[];\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  menuProps: HTMLAttributes<HTMLElement>;\n  menuRef: RefObject<HTMLUListElement>;\n  emptyText: React.ReactNode;\n}) {\n  const filter = speedSearch.active\n    ? ({ key, type }: Node<T>) =>\n        type !== \"item\" || speedSearch.matches.has(key)\n    : undefined;\n  return (\n    <>\n      {searchPopupProps.children && (\n        <StyledSearchFieldWrapper\n          onClick={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <SpeedSearchInput {...searchPopupProps} clear={speedSearch.clear} />\n        </StyledSearchFieldWrapper>\n      )}\n      <StyledItemsContainer {...menuProps} ref={menuRef}>\n        {renderMenuNodes(state, items, filter)}\n        {speedSearch.active && speedSearch.matches.size === 0 && (\n          <StyledPlaceholder>{emptyText}</StyledPlaceholder>\n        )}\n      </StyledItemsContainer>\n    </>\n  );\n}\n\nfunction SpeedSearchSubmenu<T>({\n  parentState,\n  rootKey,\n  emptyText,\n}: SubmenuProps<T> & { emptyText: React.ReactNode }) {\n  const ref = useRef<HTMLUListElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, rootKey, ref, containerRef);\n  const { submenuProps } = useSubmenu(\n    { rootKey, parentState, keyboardDelegate },\n    state,\n    ref\n  );\n\n  return (\n    <StyledSpeedSearchMenu\n      {...speedSearchContainerProps}\n      as=\"div\"\n      ref={containerRef}\n    >\n      <SpeedSearchMenuContent\n        items={[...(rootItem?.childNodes || [])]}\n        speedSearch={speedSearch}\n        searchPopupProps={searchPopupProps}\n        state={state}\n        menuProps={submenuProps}\n        menuRef={ref}\n        emptyText={emptyText}\n      />\n    </StyledSpeedSearchMenu>\n  );\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ isActive }) => isActive && highlightedStyle};\n  ${({ isDisabled }) => isDisabled && disabledStyle};\n\n  padding-right: 1.25rem;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuOptions, useMenu } from \"@react-aria/menu\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport {\n  MenuKeyboardDelegate,\n  useSubmenu as useSubmenuAria,\n} from \"./_useSubmenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuContext } from \"./Menu\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport function useSubmenu<T>(\n  {\n    rootKey,\n    parentState,\n    keyboardDelegate,\n  }: { rootKey: React.Key; parentState: TreeState<T> } & Pick<\n    AriaMenuOptions<T>,\n    \"keyboardDelegate\"\n  >,\n  state: TreeState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const rootItem = state.collection.getItem(rootKey);\n  const {\n    submenuBehavior,\n    autoFocus = true,\n    onClose,\n    onAction,\n  } = useContext(MenuContext);\n  let { menuProps } = useMenu(\n    {\n      \"aria-label\": rootItem?.[\"aria-label\"] || rootItem?.textValue,\n      onAction,\n      onClose,\n      selectedKeys: state.selectionManager.selectedKeys,\n      keyboardDelegate:\n        keyboardDelegate ||\n        new MenuKeyboardDelegate(\n          rootKey,\n          state.collection,\n          state.disabledKeys,\n          ref\n        ),\n      autoFocus,\n    },\n    state,\n    ref\n  );\n  const { submenuProps } = useSubmenuAria({ rootKey }, parentState, ref);\n\n  const submenuBehaviorProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        // Close the menu and submenu root node.\n        state.toggleKey(rootKey);\n        state.selectionManager.setFocusedKey(rootKey);\n        parentState.selectionManager.setFocused(true);\n        if (submenuBehavior !== \"default\") {\n          e.stopPropagation();\n        }\n        return;\n      }\n    },\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n      // it sets the focus key, which will move focus to that item.\n      // noinspection PointlessBooleanExpressionJS seems to be false positive. autoFocus can be \"first\" or \"last\"\n      if (autoFocus === true) {\n        ref.current?.focus();\n      }\n    });\n  }, []);\n\n  return {\n    submenuProps: mergeProps(menuProps, submenuProps, submenuBehaviorProps),\n  };\n}\n\nexport interface SubmenuProps<T> {\n  parentState: TreeState<T>;\n  rootKey: React.Key;\n}\n\nexport function Submenu<T>({ parentState, rootKey }: SubmenuProps<T>) {\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const { submenuProps } = useSubmenu({ rootKey, parentState }, state, ref);\n\n  return (\n    <StyledMenu {...submenuProps} ref={ref}>\n      {renderMenuNodes(state, [...(rootItem?.childNodes || [])])}\n    </StyledMenu>\n  );\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport React, { Key, RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\n\nexport class MenuKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  private keys: React.Key[];\n  constructor(\n    rootKey: Key | null,\n    private collection: Collection<Node<T>>,\n    disabledKeys: Set<React.Key>,\n    ref: React.RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n    this.keys = [...collection.getKeys()]\n      .map((key) => collection.getItem(key))\n      .flatMap((item) => {\n        if (item.parentKey == rootKey) {\n          if (item.type === \"item\") {\n            return [item.key];\n          } else if (item.type === \"section\") {\n            return [...item.childNodes].map(({ key }) => key);\n          }\n        }\n        return [];\n      });\n  }\n\n  getFirstKey(): React.Key {\n    return this.keys[0];\n  }\n  getLastKey(): React.Key {\n    return this.keys.slice(-1)[0];\n  }\n\n  getKeyBelow(key: React.Key): React.Key {\n    const keyBelow = super.getKeyBelow(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyBelow) ? keyBelow : null;\n  }\n  getKeyAbove(key: React.Key): React.Key {\n    const keyAbove = super.getKeyAbove(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyAbove) ? keyAbove : null;\n  }\n}\n\n/**\n * Behavior accessibility of submenus:\n * - Closing submenu on ArrowLeft key press.\n *   Note that it can't be implemented in useMenuItem, because the focus might be on no the submenu itself and not any\n *   of its items\n * @param rootKey: Key of the root node, the submenu is created from its children\n * @param state\n * @param ref\n */\nexport function useSubmenu<T>(\n  { rootKey }: { rootKey: Key },\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { keyboardProps: submenuProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Keyboard events bubble through portals. Don't handle keyboard events\n      // for elements outside the collection (e.g. menus).\n      if (!ref.current?.contains(e.target as Element)) {\n        e.continuePropagation();\n        return;\n      }\n      const root = state.collection.getItem(rootKey);\n      if (e.key === \"ArrowLeft\" && state.expandedKeys.has(root.key)) {\n        state.toggleKey(root.key);\n        state.selectionManager.setFocused(true);\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return {\n    submenuProps,\n  };\n}\n","import { TreeState } from \"@react-stately/tree\";\nimport { Key, useRef, useState } from \"react\";\nimport {\n  MultipleSelectionState,\n  SelectionManager,\n} from \"@react-stately/selection\";\n\n/**\n * Creates a TreeState corresponding to the submenu, from the state of a parent (sub)menu.\n * The collection and everything is the same, and the only difference from the parent state is selection manager\n * having a separate focused state to keep the focused state of each menu container separately, as the submenus\n * are usually rendered in separate overlays.\n */\nexport function useSubmenuState<T>(parentState: TreeState<T>) {\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a re-render. So, we have both a ref (sync) and state (async).\n  const [, setFocused] = useState(false);\n  const [, setFocusedKey] = useState<Key | null>(null);\n  const isFocusedRef = useRef(false);\n  const focusedKeyRef = useRef<Key | null>(null);\n\n  const state: MultipleSelectionState = {\n    // @ts-expect-error state is private\n    ...parentState.selectionManager.state,\n    setFocused: (isFocused: boolean) => {\n      isFocusedRef.current = isFocused;\n      setFocused(isFocused);\n    },\n    setFocusedKey(key: Key) {\n      focusedKeyRef.current = key;\n      setFocusedKey(key);\n    },\n  };\n  Object.defineProperties(state, {\n    isFocused: {\n      get() {\n        return isFocusedRef.current;\n      },\n    },\n    focusedKey: {\n      get() {\n        return focusedKeyRef.current!;\n      },\n    },\n  });\n\n  return {\n    ...parentState,\n    selectionManager: new SelectionManager(parentState.collection, state),\n  };\n}\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.div`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\"; // private import\n\nimport { MenuItem } from \"./MenuItem\";\nimport { MenuSection } from \"./MenuSection\";\n\nexport function renderMenuNodes<T>(\n  state: TreeState<T>,\n  nodes: Node<T>[],\n  filter: (node: Node<T>) => boolean = () => true\n) {\n  return nodes.filter(filter).map((node) => {\n    switch (node.type) {\n      case \"item\":\n        return <MenuItem key={node.key} item={node} state={state} />;\n      case \"section\":\n        return (\n          <>\n            {node.props.hasDivider && (\n              <ListDivider key={node.key + \"-divider\"} />\n            )}\n            <MenuSection\n              key={node.key}\n              item={node}\n              state={state}\n              filter={filter}\n            />\n          </>\n        );\n      case \"divider\":\n        return <ListDivider key={node.key} />;\n    }\n  });\n}\n","import { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport React, { useEffect } from \"react\";\n\n/**\n * A workaround for an issue in measuring overlay size, caused by a limitation/bug in how React 17 runs effects when\n * children suspend rendering: https://github.com/facebook/react/issues/21510\n *\n * Here is a simplified demonstration of the issue:\n * Expected behavior (React 18): https://codesandbox.io/s/parent-effects-suspense-v18-38m8p7?file=/src/App.tsx\n * Broken behavior (React 17): https://codesandbox.io/s/parent-effects-suspense-v17-h39g4g\n *\n * The overlay content size measuring runs in an effect, and that effect won't run when the content is rendered after\n * suspense.\n */\nexport function UNSAFE_React17SuspenseFix({\n  measureContentSize,\n  children,\n}: {\n  measureContentSize: () => void;\n  children: React.ReactNode;\n}) {\n  if (React.version.startsWith(\"17\")) {\n    return (\n      <React.Suspense\n        fallback={\n          <NullSuspenseFallback afterUnsuspended={measureContentSize} />\n        }\n      >\n        {children}\n      </React.Suspense>\n    );\n  }\n  return <>{children}</>;\n}\n\nfunction NullSuspenseFallback({\n  afterSuspended: afterSuspendedProp = () => {},\n  afterUnsuspended: afterUnsuspendedProp = () => {},\n}: {\n  afterUnsuspended?: () => void;\n  afterSuspended?: () => void;\n}) {\n  const afterSuspended = useEventCallback(afterSuspendedProp);\n  const afterUnsuspended = useEventCallback(afterUnsuspendedProp);\n  useEffect(() => {\n    afterSuspended?.();\n    return () => {\n      afterUnsuspended?.();\n    };\n  }, []);\n  return null;\n}\n","import React, { FocusEventHandler, useContext, useRef } from \"react\";\nimport { useModal, useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { focusSafely, FocusScope } from \"@react-aria/focus\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { AriaDialogProps } from \"@react-types/dialog\"; // temporary phantom dependency\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { WindowContext } from \"@intellij-platform/core/ModalWindow/WindowContext\";\nimport { UNSAFE_React17SuspenseFix } from \"@intellij-platform/core/Overlay/UNSAFE_React17SuspenseFix\";\n\nexport interface ModalWindowProps\n  extends AriaDialogProps,\n    ResizableMovableOverlayOptions {\n  children: React.ReactNode;\n  onClose?: () => void;\n}\n\nconst StyledWindowUnderlay = styled.div`\n  position: fixed;\n  z-index: 1000; // FIXME: z-index should not be hard-coded like this\n  inset: 0;\n`;\nconst StyledWindowContainer = styled.div`\n  position: fixed;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  border-radius: 8px;\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n  outline: 1px solid #555; // FIXME\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledWindowInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DEFAULT_WINDOW_MIN_WIDTH = 50;\nexport const DEFAULT_WINDOW_MIN_HEIGHT = 24;\n\nexport const WindowControllerContext = React.createContext<\n  Partial<Pick<ModalWindowProps, \"onClose\">>\n>({});\n\n/**\n * A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\n * In the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\n * are not relevant here since they wouldn't be os-native windows. A close button is still relevant (and kind of\n * necessary) and will be added in next iterations.\n *\n * The content container doesn't come with any padding. Other related components should be used for common layouts in\n * modal windows.\n * Example use cases: Window for git operations such as push, update, revert, new branch, etc.\n *\n * ![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n *\n * NOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\n * overlay container could be extracted into a component which is then used to create custom resizable/movable overlay\n * dialogs, like \"Branches\", or \"Search Everywhere\".\n *\n * TODO: show close button (maybe os-aware styles?)\n *\n */\nexport const ModalWindow = ({\n  interactions = \"all\",\n  minWidth = DEFAULT_WINDOW_MIN_WIDTH,\n  minHeight = DEFAULT_WINDOW_MIN_HEIGHT,\n  ...props\n}: ModalWindowProps): React.ReactElement => {\n  const { children } = props;\n  const propsContext = useContext(WindowControllerContext);\n  const onClose = () => {\n    propsContext.onClose?.();\n    props.onClose?.();\n  };\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      isOpen: true, // maybe allow rendering closed window? :-?\n      onClose,\n      isDismissable: false,\n      isKeyboardDismissDisabled: false,\n      shouldCloseOnBlur: false,\n    },\n    ref\n  );\n  usePreventScroll();\n  const { modalProps } = useModal();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  const {\n    bounds: style,\n    overlayInteractionHandlerProps,\n    UNSAFE_measureContentSize,\n  } = useResizableMovableOverlay(ref, { ...props, minHeight, minWidth });\n\n  const { focusContainmentFixProps } = useFocusContainmentFix();\n\n  return (\n    <StyledWindowUnderlay {...underlayProps}>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        <FocusScope contain restoreFocus autoFocus>\n          <StyledWindowContainer\n            {...mergeProps(\n              overlayProps,\n              dialogProps,\n              modalProps,\n              focusContainmentFixProps,\n              { style }\n            )}\n            ref={ref}\n          >\n            <StyledWindowInnerContainer>\n              <WindowContext.Provider\n                value={{\n                  isActive: true, // because it's modal. WindowContext would be used for non-modal windows too, in future\n                  titleProps,\n                  movable: interactions !== \"none\",\n                }}\n              >\n                <UNSAFE_React17SuspenseFix\n                  measureContentSize={UNSAFE_measureContentSize}\n                >\n                  {children}\n                </UNSAFE_React17SuspenseFix>\n              </WindowContext.Provider>\n            </StyledWindowInnerContainer>\n            {interactions === \"all\" && <OverlayResizeHandles />}\n          </StyledWindowContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </StyledWindowUnderlay>\n  );\n};\n\n/**\n * The way FocusScope is implemented at the moment, it's possible for another focus scope to steal the focus,\n * right after the modal window is opened. The issue is not tracked down to the root cause. But with this hook,\n * we make sure there is no way for focus to go out of the modal window, when it's mounted.\n */\nfunction useFocusContainmentFix<T extends HTMLElement>() {\n  const lastFocusedElementRef = useRef<HTMLElement | null>(null);\n  const onFocus: FocusEventHandler<T> = (e) => {\n    lastFocusedElementRef.current = e.target;\n  };\n  const onBlur: FocusEventHandler = (e) => {\n    const probablyFocusedElement = e.relatedTarget;\n    if (\n      !probablyFocusedElement ||\n      (probablyFocusedElement instanceof Element &&\n        !e.currentTarget.contains(probablyFocusedElement))\n    ) {\n      const elementToFocus = lastFocusedElementRef.current;\n      if (elementToFocus) {\n        focusSafely(elementToFocus);\n      }\n    }\n  };\n  return {\n    focusContainmentFixProps: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n","import React from \"react\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nexport const WindowContext = React.createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nexport function WindowFooter({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer. {@link Button}s are usually used inside the right content\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>{right}</StyledFooterSide>\n    </StyledFooter>\n  );\n}\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { WindowContext } from \"./WindowContext\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 20px;\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\n/**\n * Implements appearance of Window header, and also acts as a handle for moving the window.\n * Expected to be used with {@link WindowLayout}:\n *\n * @example\n * ```tsx\n * <ModalWindow>\n *    <WindowLayout header={<WindowHeader>header</WindowHeader>} />\n * </ModalWindow>\n * ```\n */\nexport const WindowHeader = ({ children }: { children?: React.ReactNode }) => {\n  const { movable, titleProps } = useContext(WindowContext);\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {children || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderTitle()\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { WindowHeader } from \"./WindowHeader\";\nimport { WindowFooter } from \"@intellij-platform/core/ModalWindow/WindowFooter\";\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\n/**\n * Window content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function WindowLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the window at the top. Use {@link WindowLayout.Header} for the default window header,\n   * which also acts as a move handle for the window. If a string is passed, it will be wrapped by\n   * {@link WindowLayout.Header} automatically.\n   */\n  header: React.ReactNode;\n  /**\n   * Scrollable content of the window.\n   */\n  content: React.ReactNode;\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `content`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <>\n      {header &&\n        (typeof header === \"string\" ? (\n          <WindowHeader>{header}</WindowHeader>\n        ) : (\n          header\n        ))}\n      <StyledWindowContentWrapper>{content}</StyledWindowContentWrapper>\n      {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n    </>\n  );\n}\n\n// Just for improved discoverability. Might as well export WindowFooter and WindowHeader instead.\nWindowLayout.Footer = WindowFooter;\nWindowLayout.Header = WindowHeader;\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ModalWindow,\n  WindowControllerContext,\n  ModalWindowProps,\n} from \"./ModalWindow\";\n\ninterface WindowManagerAPI {\n  /**\n   * Shows a modal window within the stack of windows managed by {@link WindowManager}.\n   * The opened windows will be closed when `onClose` interactions happen.\n   */\n  open(\n    props:\n      | React.ReactElement<ModalWindowProps, typeof ModalWindow>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<ModalWindowProps, typeof ModalWindow>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"WindowManager not found. Wrap your application with WindowManager to be able to open windows imperatively\"\n  );\n};\n\nconst WindowsContext = React.createContext<WindowManagerAPI>({\n  open: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing windows.\n *\n */\nexport const useWindowManager = (): WindowManagerAPI =>\n  useContext(WindowsContext);\n\ntype WindowElement = ReactElement<ModalWindowProps, typeof ModalWindow>;\n\nexport interface WindowManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link useWindowManager}) for opening windows.\n * It renders windows in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n */\nexport const WindowManager: React.FC<WindowManagerProps> = ({ children }) => {\n  const [windows, setWindows] = useState<Array<WindowElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<WindowManagerAPI>(() => {\n    const openModalWindow: WindowManagerAPI[\"open\"] = (content) => {\n      newKeyRef.current++;\n      const close = () => {\n        setWindows((currentWindows) =>\n          currentWindows.filter((aWindow) => aWindow !== window)\n        );\n      };\n      const window = (\n        <WindowControllerContext.Provider\n          value={{ onClose: close }}\n          key={newKeyRef.current}\n        >\n          {typeof content === \"function\" ? content({ close }) : content}\n        </WindowControllerContext.Provider>\n      );\n      setWindows((currentWindows) => currentWindows.concat(window));\n    };\n    return {\n      open: openModalWindow,\n    };\n  }, []);\n\n  return (\n    <WindowsContext.Provider value={api}>\n      {children}\n      {windows}\n    </WindowsContext.Provider>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { Overlay as AriaOverlay, OverlayProps } from \"@react-aria/overlays\";\n\nconst ParentOverlayContext = React.createContext<HTMLElement | null>(null);\n\n/**\n * A (drop-in replacement) wrapper around Overlay, which makes sure overlays created in nested\n * react components will be ported to the same top level container. This is especially useful to detect\n * \"outside clicks\" when overlays are nested. The most common example would be nested menu in popup.\n *\n */\nexport function Overlay({\n  children,\n  OverlayComponent = AriaOverlay,\n}: {\n  children: React.ReactNode;\n  OverlayComponent?: React.ComponentType<OverlayProps>;\n}) {\n  const root = useContext(ParentOverlayContext);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  if (root) {\n    return (\n      <OverlayComponent portalContainer={root}>{children}</OverlayComponent>\n    );\n  }\n  return (\n    <ParentOverlayContext.Provider value={containerRef.current}>\n      <OverlayComponent>\n        <div ref={containerRef} data-overlay-root=\"\">\n          {children}\n        </div>\n      </OverlayComponent>\n    </ParentOverlayContext.Provider>\n  );\n}\n\n/**\n * Returns true, if element1 and element2 are in nested overlays. \"Nested\" being in terms of React component tree.\n * Useful for detecting \"outside click\" when overlay components are nested in each other.\n */\nexport function areInNestedOverlays(\n  element1: Element | null,\n  element2: Element | null\n) {\n  const overlayRoot1 = element1?.closest(\"[data-overlay-root]\");\n  const overlayRoot2 = element2?.closest(\"[data-overlay-root]\");\n  return Boolean(overlayRoot1) && overlayRoot1 === overlayRoot2;\n}\n","import React, { useContext } from \"react\";\n\nexport type Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * TODO(docs): add a few words about this abstraction and it's use.\n */\nexport type OverlayInteractionHandlerProps = {\n  /**\n   * Signals start of a UI interaction like resize or move, in which overlay bounds change.\n   */\n  startInteraction: (type: \"move\" | \"resize\") => Bounds;\n  /**\n   * Used to update bounds state during a UI interaction.\n   */\n  updateBounds: (bounds: Bounds) => void;\n  /**\n   * Signals end of a UI interaction.\n   */\n  finishInteraction: () => void;\n\n  minWidth?: number;\n  minHeight?: number;\n};\n\nconst OverlayInteractionHandlerContext =\n  React.createContext<OverlayInteractionHandlerProps | null>(null);\n\n/**\n * Provides the context used by components like {@link OverlayMoveHandle} and {@link OverlayResizeHandles} that provide\n * user interactions that change the boundary of the overlay they are rendered in.\n * Use {@link useResizableMovableOverlay} which implements an efficient state management for overlay bounds and returns\n * props to be passed to `OverlayInteractionHandler`:\n *\n * @example\n *\n * const {\n *    bounds, // Bounds to be applied to the overlay element.\n *    overlayInteractionHandlerProps,\n *  } = useResizableMovableOverlay(props);\n *\n * return (\n *   <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n *     <div style={bounds}>...</div>\n *   </OverlayInteractionHandler>\n * );\n *\n * @see useResizableMovableOverlay\n */\nexport const OverlayInteractionHandler = ({\n  children,\n  ...props\n}: OverlayInteractionHandlerProps & { children: React.ReactNode }) => {\n  return (\n    <OverlayInteractionHandlerContext.Provider value={props}>\n      {children}\n    </OverlayInteractionHandlerContext.Provider>\n  );\n};\n\nexport const useOverlayInteractionHandler = () =>\n  useContext(OverlayInteractionHandlerContext);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { useOverlayInteractionHandler } from \"./OverlayInteractionHandler\";\nimport React from \"react\";\n\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}, and returns props to be applied on a dom element to\n * make it a move handle for the overlay it's being rendered in.\n *\n * @see OverlayMoveHandle\n */\nexport function useOverlayMoveHandle() {\n  const interactionHandler = useOverlayInteractionHandler();\n  if (!interactionHandler) {\n    return { moveHandleProps: {} };\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const moveProps = useMove({\n    onMoveStart: () => {\n      return startInteraction(\"move\");\n    },\n    onMove: ({ startState, movement }) => {\n      updateBounds({\n        ...startState,\n        top: startState.top + movement.y,\n        left: startState.left + movement.x,\n      });\n    },\n    onMoveEnd: () => {\n      finishInteraction();\n    },\n  });\n  return { moveHandleProps: moveProps || {} };\n}\n\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}. A render function is expected as `children`. It's\n * passed the event handlers that need to be applied on a dom element to make it a move handle for the overlay it's\n * being rendered in.\n */\nexport const OverlayMoveHandle = ({\n  children,\n}: {\n  children: (\n    props: ReturnType<typeof useOverlayMoveHandle>\n  ) => React.ReactElement;\n}) => {\n  return children(useOverlayMoveHandle());\n};\n","import React, { useRef } from \"react\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport {\n  HorizontalResizerProps,\n  VerticalResizerProps,\n} from \"../Resizer/ResizerProps\";\nimport {\n  Bounds,\n  useOverlayInteractionHandler,\n} from \"./OverlayInteractionHandler\";\n\ntype OverlayResizeHandlesProps = {\n  minWidth?: number;\n  minHeight?: number;\n};\n\n/**\n * Renders invisible resize handles at the edges of the overlay it's rendered in. It uses the context provided by\n * {@link OverlayInteractionHandler} to resize the overlay when the handles are used.\n */\nexport function OverlayResizeHandles(props: OverlayResizeHandlesProps) {\n  const overlayResizer = useOverlayResizer(props);\n  return (\n    overlayResizer && (\n      <>\n        <RightResizer {...overlayResizer.getResizerProps(\"right\")} />\n        <LeftResizer {...overlayResizer.getResizerProps(\"left\")} />\n        <TopResizer {...overlayResizer.getResizerProps(\"top\")} />\n        <BottomResizer {...overlayResizer.getResizerProps(\"bottom\")} />\n      </>\n    )\n  );\n}\n\n/**\n * overlay resizing logic and state. When resizing is in progress, the source of truth is a local state, for performance\n * reasons. When the resize is done (e.g. by mouse being released), `onBoundsChange` is called with the new bounds.\n */\nfunction useOverlayResizer(props: OverlayResizeHandlesProps = {}) {\n  const initialBoundsRef = useRef<Bounds>({\n    top: 0,\n    height: 0,\n    width: 0,\n    left: 0,\n  });\n  const interactionHandler = useOverlayInteractionHandler();\n  const {\n    minWidth = interactionHandler?.minWidth ?? 1,\n    minHeight = interactionHandler?.minHeight ?? 1,\n  } = props;\n  if (!interactionHandler) {\n    return null;\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const onResize = {\n    right: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        width: Math.max(minWidth, initialBoundsRef.current.width + size),\n      }),\n    bottom: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        height: Math.max(minHeight, initialBoundsRef.current.height + size),\n      }),\n    left: (size: number) => {\n      const newWidth = Math.max(\n        minWidth,\n        initialBoundsRef.current.width + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        left: initialBounds.left + initialBounds.width - newWidth,\n        width: newWidth,\n      });\n    },\n    top: (size: number) => {\n      const newHeight = Math.max(\n        minHeight,\n        initialBoundsRef.current.height + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        top: initialBounds.top + initialBounds.height - newHeight,\n        height: newHeight,\n      });\n    },\n  };\n\n  function getResizerProps(side: \"left\" | \"right\"): HorizontalResizerProps;\n  function getResizerProps(side: \"top\" | \"bottom\"): VerticalResizerProps;\n  function getResizerProps(\n    side: \"left\" | \"right\" | \"top\" | \"bottom\"\n  ): HorizontalResizerProps | VerticalResizerProps {\n    const horizontal = side === \"left\" || side === \"right\";\n    return {\n      size: 1,\n      cursor: horizontal ? \"ew\" : \"ns\",\n      onResizeStarted: () => {\n        initialBoundsRef.current = startInteraction(\"resize\");\n      },\n      onResize: onResize[side],\n      onResizeEnd: finishInteraction,\n      style: { position: \"absolute\", [side]: 0 },\n    };\n  }\n\n  return {\n    getResizerProps,\n  };\n}\n","import { Bounds } from \"@intellij-platform/core/Overlay/OverlayInteractionHandler\";\nimport { clamp } from \"ramda\";\nimport { ResizableMovableOverlayOptions } from \"@intellij-platform/core/Overlay/useResizableMovableOverlay\";\n\nexport const withMinSize =\n  ({ width: minWidth, height: minHeight }: { width: number; height: number }) =>\n  (bounds: Bounds) => {\n    const width = Math.max(minWidth, bounds.width);\n    const height = Math.max(minHeight, bounds.height);\n    if (bounds.width != width || bounds.height != height) {\n      return { ...bounds, width, height };\n    }\n    return bounds;\n  };\n\nexport function getCenteredBounds(width: number, height: number): Bounds {\n  return {\n    left: (window.innerWidth - width) / 2,\n    top: (window.innerHeight - height) / 2,\n    width,\n    height,\n  };\n}\n\n/**\n * A helper function to create interaction interceptor which ensures bounds are contained within a container.\n *\n * @example\n * const ensureInViewPort = containedWithin({left: 0, top: 0, width: window.innerWidth, height: window.innerHeight})\n *\n * useResizableMovableOverlay({ onBoundsChanging: ensureInViewPort});\n */\nexport const containedWithin =\n  (\n    containerBounds: Bounds\n  ): ResizableMovableOverlayOptions[\"onBoundsChanging\"] =>\n  (bounds, interactionType) => {\n    if (interactionType === \"move\") {\n      const left = clamp(\n        containerBounds.left,\n        containerBounds.left + containerBounds.width - bounds.width,\n        bounds.left\n      );\n      const top = clamp(\n        containerBounds.top,\n        containerBounds.top + containerBounds.height - bounds.height,\n        bounds.top\n      );\n      return {\n        ...bounds,\n        left,\n        top,\n      };\n    } else if (interactionType === \"resize\") {\n      const left = Math.max(containerBounds.left, bounds.left);\n      const top = Math.max(containerBounds.top, bounds.top);\n      // the logic here seems unnecessarily complicated\n      return {\n        left,\n        top,\n        width:\n          bounds.width -\n          Math.max(\n            0,\n            bounds.left +\n              bounds.width -\n              (containerBounds.left + containerBounds.width)\n          ) -\n          (left - bounds.left),\n        height:\n          bounds.height -\n          Math.max(\n            0,\n            bounds.top +\n              bounds.height -\n              (containerBounds.top + containerBounds.height)\n          ) -\n          (top - bounds.top),\n      };\n    }\n    return bounds;\n  };\nexport const position =\n  ({\n    targetElement,\n    placement = \"bottom\",\n  }: {\n    placement?: \"bottom\" | \"top\";\n    targetElement: HTMLElement;\n  }) =>\n  ({ height, width }: Bounds): Bounds => {\n    const targetBounds = targetElement.getBoundingClientRect();\n    return {\n      left: targetBounds.left,\n      top:\n        placement === \"bottom\"\n          ? targetBounds.top + targetBounds.height\n          : targetBounds.top - height,\n      width,\n      height,\n    };\n  };\n\nexport function ensureInViewport(\n  bounds: Bounds,\n  { gap = 0 }: { gap?: number } = {}\n): Bounds {\n  const viewportWidth = window.innerWidth - gap;\n  const viewportHeight = window.innerHeight - gap;\n  const left = clamp(gap, viewportWidth - bounds.width, bounds.left);\n  const top = clamp(gap, viewportHeight - bounds.height, bounds.top);\n  if (left !== bounds.left || top !== bounds.top) {\n    return {\n      left,\n      top,\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n  return bounds;\n}\n","import { useCallback, useEffect, useLayoutEffect, useRef } from \"react\";\n\nexport const useDebouncedCallback = (\n  fn: () => void,\n  { timeout = 100 } = {}\n) => {\n  const fnRef = useRef(fn);\n  const currentTimeoutId = useRef<number | null>(null);\n  useLayoutEffect(() => {\n    fnRef.current = fn;\n  });\n  useEffect(() => {\n    return () => {\n      if (currentTimeoutId.current !== null) {\n        clearTimeout(currentTimeoutId.current);\n      }\n    };\n  }, []);\n  return useCallback(() => {\n    if (currentTimeoutId.current !== null) {\n      clearTimeout(currentTimeoutId.current);\n    }\n    currentTimeoutId.current = window.setTimeout(fnRef.current, timeout);\n  }, []);\n};\n","import { RefObject, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useDebouncedCallback } from \"@intellij-platform/core/utils/useDebounce\";\n\n/**\n * Clones the element, applies the temporary styles, and calls {@param fn} on the clone.\n * Previously, we applied the temporary styles on the element itself, run fn, and then revert to previous styles,\n * but that can mess with the scroll bar in the content. If there is a scrollable part in some nested element,\n * applying temporary style (in our case width: fit-content, height: fit-content) can cause scroll to jump which is not\n * restored after the style reversion. Now the approach is changed to apply the temporary styles on a temporary clone\n * of the element. It's certainly not as efficient and some optimization may be needed.\n * @param style: temporary styles to apply before fn is invoked, and revert after.\n * @param fn the function to compute something on the element with temporary styles\n */\nconst withTemporaryStyle =\n  <T extends any>(\n    style: Partial<CSSStyleDeclaration>,\n    fn: (element: HTMLElement) => T\n  ) =>\n  (element: HTMLElement): T => {\n    const clone = element.cloneNode(true) as HTMLElement;\n    clone.style.position = \"absolute\";\n    clone.style.left = \"-9999px\";\n    document.body.appendChild(clone);\n\n    Object.assign(clone.style, style);\n    const returnValue = fn(clone);\n\n    document.body.removeChild(clone);\n    return returnValue;\n  };\n\n/**\n * FIXME: withTemporaryStyle is not side-effect free and can cause scroll jumps. It creates awfully hard-to-debug\n *  issues.\n */\nexport const getContentSize = withTemporaryStyle(\n  {\n    width: \"\",\n    minWidth: \"fit-content\", // Shouldn't it be min-content? :-?\n    height: \"\",\n    minHeight: \"fit-content\",\n  },\n  (element) => ({\n    width: Math.ceil(parseFloat(getComputedStyle(element).width)),\n    height: Math.ceil(parseFloat(getComputedStyle(element).height)),\n  })\n);\n\nexport const useContentSize = (\n  ref: RefObject<HTMLElement>,\n  {\n    observe = false,\n  }: {\n    /**\n     * if false, the content size is measured only initially. If true, the dom changes are observed, and content size\n     * is updated accordingly.\n     * @default false\n     */\n    observe?: boolean;\n  } = {}\n) => {\n  const [measuredSizes, setMeasuredSizes] = useState<Size[]>([]);\n  useLayoutEffect(() => {\n    const element = ref.current;\n    if (!element || measuredSizes.length > 5) {\n      return;\n    }\n    const size = getContentSize(element);\n\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (!lastMeasuredSize || !Size.isEqual(lastMeasuredSize, size)) {\n      setMeasuredSizes([size]);\n    }\n    const id = window.requestAnimationFrame(() => {\n      const newSize = getContentSize(element);\n      if (!Size.isEqual(newSize, size)) {\n        setMeasuredSizes([...measuredSizes, newSize]);\n      }\n    });\n    return () => {\n      window.cancelAnimationFrame(id);\n    };\n  }, [\n    measuredSizes,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  const measure = () => {\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (ref.current && lastMeasuredSize) {\n      const currentSize = getContentSize(ref.current);\n      if (\n        currentSize.height !== lastMeasuredSize.height ||\n        currentSize.width !== lastMeasuredSize.width\n      ) {\n        setMeasuredSizes(\n          measuredSizes.map((aSize) =>\n            aSize === lastMeasuredSize ? currentSize : aSize\n          )\n        );\n      }\n    }\n  };\n  const debouncedMeasure = useDebouncedCallback(measure);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (observe && element) {\n      const mutationObserver = new MutationObserver(() => {\n        debouncedMeasure();\n      });\n      mutationObserver.observe(element, {\n        subtree: true,\n        childList: true,\n      });\n      return () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [\n    observe,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  return [measuredSizes.at(-1) || { width: 0, height: 0 }, measure] as const;\n};\n\ninterface Size {\n  width: number;\n  height: number;\n}\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const Size = {\n  isEqual: (\n    { width, height }: Size,\n    { width: width2, height: height2 }: { width: number; height: number }\n  ) => width === width2 && height === height2,\n};\n","import React, { RefObject, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  Bounds,\n  OverlayInteractionHandler,\n  OverlayInteractionHandlerProps,\n} from \"./OverlayInteractionHandler\";\nimport { clamp, filter } from \"ramda\";\nimport { useContentSize } from \"@intellij-platform/core/Overlay/useContentSize\";\nimport {\n  getCenteredBounds,\n  withMinSize,\n} from \"@intellij-platform/core/Overlay/bounds-helpers\";\n\n/**\n * Common props for resizable and movable overlays such as Windows or Popups.\n * There is currently no corresponding component/hook, and this is just a type helper.\n */\nexport interface ResizableMovableOverlayOptions {\n  onBoundsChange?: (bounds: Bounds, interactionType: \"move\" | \"resize\") => void;\n  /**\n   * For performance reason, overlay bounds is kept in a local state during a resize or move interaction, and\n   * `onBoundsChange` is called once at the end of interaction. `onBoundsChanging` gives a chance of rectifying\n   * bounds changes during an interaction to for example apply custom size/placement constraints.\n   */\n  onBoundsChanging?: (\n    newBounds: Bounds,\n    /**\n     * Whether the interaction is a \"move\" or \"resize\" considering the initial bounds when interaction was started.\n     */\n    interactionType: \"move\" | \"resize\"\n  ) => Bounds;\n  /**\n   * Controlled bounds. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `bounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  bounds?: Partial<Bounds>;\n  /**\n   * Default bounds in uncontrolled mode. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `defaultBounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  defaultBounds?: Partial<Bounds>;\n  minWidth?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n  minHeight?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n\n  /**\n   * Allowed interactions:\n   * - \"all\": both resizable and movable\n   * - \"move\": movable, but not resizable\n   * - \"none\": fixed size and position\n   * The reason there are no `resizable` and `movable` boolean props is that resizable=true,movable=false doesn't make\n   * sense from UX perspective.\n   * @default \"all\"\n   */\n  interactions?: \"all\" | \"move\" | \"none\"; // FIXME: it's not used in useResizableMovableOverlay, maybe separate props?\n\n  /**\n   * When the size is not specified by `bounds` or `defaultBounds` props, the content size is measured and used in the\n   * returned bounds. By default, the content size is measured initially. If `observeContentSize` is true, the DOM\n   * mutations will be observed and the content is re-measured as changes are observed.\n   */\n  observeContentResize?: boolean;\n}\n/**\n *\n * TODO: rename to something better? :D\n * TODO: maybe an option like ensureInViewport that would move the final bound into the viewport (if necessary), when\n *  calling onBoundsChange at the end of an interaction. That's important because if move handle(s) (usually rendered\n *  at the top of the overlay) are out of reach, there would be no way back.\n * TODO: description\n * Assumptions:\n * - The overlay is rendered in a portal, and with position \"fixed\".\n * - The returned bounds should be used to style the overlay.\n *   - There shouldn't be other style affecting the positioning, such as margin, or transform.\n *   - If the overlay has border, box-sizing should be \"border-box\"\n */\nexport function useResizableMovableOverlay(\n  overlayRef: RefObject<HTMLElement>,\n  {\n    bounds: inputBounds,\n    defaultBounds,\n    onBoundsChange,\n    onBoundsChanging = (i) => i,\n    minWidth,\n    minHeight,\n    observeContentResize,\n  }: ResizableMovableOverlayOptions\n): {\n  /**\n   * The bounds to be applied as `style` on the overlay, to position it. Even if the input `bounds` or `defaultBounds`\n   * is not defined, returned `bounds` is always a full bounds object. This eliminates any other need for styling,\n   * if the input bounds doesn't define size or position.\n   * NOTE: even when the size is not specified as input, and is to be based on content, the returned `bounds` include\n   * explicit, size, measured **after the first render**. This is because overlays such as windows are not expected to\n   * be resized without user interaction, and just based on the content size change. So we make sure even when the\n   * sizing is based on content, it's stable. If imperative re-measure of the size is needed, or even dynamic resizing\n   * based on content is needed in some cases, it is feasible to add it as an option.\n   */\n  bounds: Bounds;\n  /**\n   * `true` if the returned bounds has explicit position. `false` if it's centered as a fallback.\n   */\n  positioned: boolean;\n  /**\n   * `true` if the returned bounds has explicit size. `false` if it's measured based on content.\n   */\n  sized: boolean;\n  /**\n   * Props to be passed to {@link OverlayInteractionHandler}\n   */\n  overlayInteractionHandlerProps: OverlayInteractionHandlerProps;\n\n  /**\n   * Allow for remeasuring content size imperatively, when needed. Currently only used to work around\n   * an issue related to Suspense in React 17.\n   */\n  UNSAFE_measureContentSize: () => void;\n} {\n  const [bounds, setBounds] = useControlledState<Partial<Bounds> | undefined>(\n    inputBounds!,\n    defaultBounds!,\n    // onBoundsChange is called with Bounds object. Not Partial<Bounds>, and not undefined.\n    onBoundsChange as (\n      value: Partial<Bounds> | undefined,\n      reason: \"resize\" | \"move\"\n    ) => void\n  );\n  const [contentSize, measureContentSize] = useContentSize(overlayRef, {\n    observe: observeContentResize,\n  });\n  // local state of bounds for when the overlay is in a UI interaction, like movement or resize with mouse.\n  // We don't want to update the state in the higher levels repeatedly in such transactions, and we just want to\n  // trigger on update when the UI interaction is done.\n  // It's maintained during a UI interaction and then reset to null.\n  const [currentInteraction, setCurrentInteraction] = useState<null | {\n    type: \"move\" | \"resize\";\n    bounds: Bounds;\n  }>(null);\n\n  const effectiveMinWidth =\n    minWidth === \"content\" ? contentSize.width : minWidth || 0;\n  const effectiveMinHeight =\n    minHeight === \"content\" ? contentSize.height : minHeight || 0;\n  const applyMinSize = withMinSize({\n    width: effectiveMinWidth,\n    height: effectiveMinHeight,\n  });\n  const overlayInteractionHandlerProps: OverlayInteractionHandlerProps = {\n    startInteraction: (type: \"move\" | \"resize\") => {\n      if (!overlayRef.current) {\n        throw new Error(\n          \"overlayRef value is not set. Make sure to have the ref passed to the resizable/movable overlay\"\n        );\n      }\n      const bounds = getBounds(overlayRef.current);\n      setCurrentInteraction({ bounds, type });\n      return bounds;\n    },\n    updateBounds: (updatedBounds) => {\n      setCurrentInteraction((currentInteraction) => {\n        if (currentInteraction) {\n          const { type } = currentInteraction;\n          return {\n            type,\n            bounds: onBoundsChanging(updatedBounds, type) || updatedBounds,\n          };\n        }\n        return currentInteraction;\n      });\n    },\n    finishInteraction: () => {\n      if (currentInteraction && overlayRef.current) {\n        setBounds(getBounds(overlayRef.current), currentInteraction.type);\n      }\n      setCurrentInteraction(null);\n    },\n    minWidth: effectiveMinWidth,\n    minHeight: effectiveMinHeight,\n  };\n\n  const partialBounds = currentInteraction?.bounds ?? bounds;\n  const centeredContentBounds = getCenteredBounds(\n    clamp(\n      effectiveMinWidth,\n      window.innerWidth,\n      bounds?.width ?? contentSize.width\n    ),\n    clamp(\n      effectiveMinHeight,\n      window.innerHeight,\n      bounds?.height ?? contentSize.height\n    )\n  );\n  return {\n    positioned:\n      partialBounds?.left != undefined && partialBounds?.top != undefined,\n    sized:\n      partialBounds?.width != undefined && partialBounds?.height != undefined,\n    bounds: applyMinSize({\n      /**\n       * Since input bounds may be partial (e.g. only specifying size), we create a full bounds object as a fallback,\n       * based on the measured size, positioned in center. We can introduce a \"loose\" mode, where the returned bound\n       * is not \"filled\" with default properties.\n       */\n      ...centeredContentBounds,\n      ...(partialBounds && filter((value) => value != null, partialBounds)),\n    }),\n    UNSAFE_measureContentSize: measureContentSize,\n    overlayInteractionHandlerProps,\n  };\n}\n\nfunction getBounds(element: HTMLElement) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  return { left, top, width, height };\n}\n","import React, { ForwardedRef, RefObject, useContext, useState } from \"react\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { useFocusWithin, useInteractOutside } from \"@react-aria/interactions\";\nimport { FocusScope, useFocusable } from \"@react-aria/focus\";\nimport { useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\nimport { pipe } from \"ramda\";\n\nimport {\n  ensureInViewport,\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  position,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { areInNestedOverlays, Overlay } from \"@intellij-platform/core/Overlay\";\nimport { mergeNonNullProps } from \"@intellij-platform/core/utils/mergeNonNullProps\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nimport { useDialog } from \"./_useDialog\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { PopupContext, PopupControllerContext } from \"./PopupContext\";\nimport { PopupLayout } from \"./PopupLayout\";\nimport { StyledPopupHint } from \"./StyledPopupHint\";\n\nexport const StyledPopupContainer = styled.div`\n  position: fixed;\n  box-sizing: border-box;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  outline: none; // Focus will be reflected in header. No need for outline or any other focus style on the container\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n`;\nexport interface PopupProps extends ResizableMovableOverlayOptions, DOMProps {\n  children: React.ReactNode;\n  onClose?: () => void;\n\n  nonDismissable?: boolean;\n\n  /**\n   * By default, Popup prevents scrolling on the scrollable ancestor, if popup is positioned relative to a target\n   * element. Allowing or disallowing scroll can be forced by passing boolean value.\n   */\n  allowScroll?: \"auto\" | boolean;\n\n  /**\n   * Used to position the popup relative to a target element, if there is no positioning information in the input\n   * `bounds`/`defaultBounds`.\n   */\n  positioning?: {\n    targetRef: RefObject<HTMLElement>;\n    placement?: \"bottom\" | \"top\";\n  };\n}\n\nexport const DEFAULT_POPUP_MIN_WIDTH = 50;\nexport const DEFAULT_POPUP_MIN_HEIGHT = 50;\n\n/**\n * [Popup](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75426%3A16881&t=vzpRGV2y2cDw5a6Z-0)\n * component, rendered as a draggable overlay which is positioned either in the center of the viewport or relative to a trigger element.\n * If there is a trigger element, use {@link PopupTrigger} instead.\n */\nexport const _Popup = (\n  // NOTE: export is only for __docgenInfo to be emitted for this.\n  {\n    interactions = \"move\",\n    nonDismissable = false,\n    allowScroll = \"auto\",\n    minWidth = DEFAULT_POPUP_MIN_WIDTH,\n    minHeight = DEFAULT_POPUP_MIN_HEIGHT,\n    positioning: positioningProp,\n    onClose: onCloseProp,\n    ...props\n  }: PopupProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element => {\n  const propsContext = useContext(PopupControllerContext);\n  const positioning = positioningProp || propsContext.positioning;\n  const onClose = () => {\n    onCloseProp?.();\n    propsContext.onClose?.();\n  };\n  const ref = useObjectRef<HTMLDivElement>(forwardedRef);\n  const shouldCloseOnInteractOutside = (element: Element) => {\n    return (\n      !positioning?.targetRef.current?.contains(element) &&\n      !areInNestedOverlays(ref.current, element)\n    );\n  };\n  const { overlayProps } = useOverlay(\n    {\n      isOpen: true, // FIXME?\n      onClose,\n      shouldCloseOnBlur: !nonDismissable,\n      shouldCloseOnInteractOutside,\n    },\n    ref\n  );\n  // Passing isDismissable to useOverlay also utilizes useInteractOutside and closes the overlay, but it calls\n  // preventDefault() and stopPropagation() on the event, which prevents focus from going to elements outside the popup.\n  // Not sure why they do this in react-aria, but it seems we are better off not using that option and using\n  // useInteractOutside directly here like this:\n  useInteractOutside({\n    ref,\n    onInteractOutsideStart: (e) => {\n      if (\n        !ref.current?.contains(document.activeElement) && // If we are focused, shouldCloseOnBlur will call onClose.\n        !nonDismissable &&\n        shouldCloseOnInteractOutside(e.target as Element)\n      ) {\n        onClose();\n      }\n    },\n    // onInteractOutsideStart will not be called if onInteractOutside is not passed!\n    onInteractOutside: () => {},\n  });\n\n  usePreventScroll({\n    isDisabled: allowScroll === \"auto\" ? !positioning : allowScroll,\n  });\n\n  const { bounds, positioned, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      ...props,\n      minWidth,\n      minHeight,\n      observeContentResize: true,\n    });\n  const positionedBounds =\n    positioning?.targetRef.current && !positioned\n      ? pipe(\n          position({\n            targetElement: positioning.targetRef.current,\n            placement: positioning.placement,\n          }),\n          ensureInViewport\n        )(bounds)\n      : bounds;\n\n  const [isActive, setActive] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setActive,\n  });\n  const { focusableProps } = useFocusable(\n    {\n      excludeFromTabOrder: true,\n    },\n    ref\n  );\n  const { focusForwarderProps } = useFocusForwarder();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  /**\n   * A hook like useOverlayStack or useOverlayZIndex can be introduced which would handle focus/blur, and return/set\n   * the right z-index so that only the overlay holding the focus would have a higher z-index than others.\n   */\n  const zIndex = isActive ? 1 : 0;\n\n  return (\n    <Overlay>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        {/* TODO: FocusScope is redundant. Test focus restoration without it (in status bar progress), and remove it if unnecessary */}\n        <FocusScope restoreFocus>\n          <StyledPopupContainer\n            ref={ref}\n            style={{\n              ...positionedBounds,\n              zIndex,\n            }}\n            tabIndex={-1}\n            {...mergeNonNullProps(\n              focusWithinProps,\n              focusableProps,\n              focusForwarderProps,\n              overlayProps,\n              propsContext.overlayProps || {},\n              dialogProps,\n              filterDOMProps(props)\n            )}\n          >\n            <PopupContext.Provider\n              value={{\n                isActive,\n                movable: interactions !== \"none\",\n                titleProps,\n              }}\n            >\n              <StyledInnerContainer>{props.children}</StyledInnerContainer>\n              {interactions === \"all\" && <OverlayResizeHandles />}\n            </PopupContext.Provider>\n          </StyledPopupContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </Overlay>\n  );\n};\n\nexport const Popup = Object.assign(React.forwardRef(_Popup), {\n  Header: PopupHeader,\n  Layout: PopupLayout,\n  Hint: StyledPopupHint,\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaDialogProps } from \"@react-types/dialog\";\nimport { FocusableElement } from \"@react-types/shared\";\nimport { filterDOMProps, useSlotId } from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { RefObject, useEffect } from \"react\";\nimport { useOverlayFocusContain } from \"@react-aria/overlays\";\nimport { DialogAria } from \"@react-aria/dialog\";\n\n////////////////// NOTE //////////////////////////\n// This is a copy of useDialog from react-aria, with a little part removed from the useEffect call.\n// In the original code, inside the effect, there is a hack to fix an issue in Safari, which involves\n// blurring and refocusing the element. Even though there is a comment about an attempt to make it work\n// nice when used with `shouldCloseOnBlur` option of `useOverlay`, it didn't work and the refocusing causes\n// the popup to close. Probably because in our case useOverlay and useDialog are used in the same level, but\n// in what they've tested on in react-aria, useDialog is used in something nested in the component that uses\n// useDialog.\n// TODO: replace with original useDialog, if the issue explained above got fixed in some version of react-aria.\n//////////////////////////////////////////////////\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(\n  props: AriaDialogProps,\n  ref: RefObject<FocusableElement>\n): DialogAria {\n  let { role = \"dialog\" } = props;\n  let titleId: string | undefined = useSlotId();\n  titleId = props[\"aria-label\"] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, { labelable: true }),\n      role,\n      tabIndex: -1,\n      \"aria-labelledby\": props[\"aria-labelledby\"] || titleId,\n    },\n    titleProps: {\n      id: titleId,\n    },\n  };\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport { filter } from \"ramda\";\n\n/**\n * Like mergeProps, but doesn't merge props where value is null or undefined. That's needed because useFocusable (and\n * maybe some other react-aria hooks as well) return props like onFocus, with value set to null or undefined, which\n * overrides the same prop from other sources.\n */\n// @ts-expect-error not sure why!\nexport const mergeNonNullProps: typeof mergeProps = (...propsArray) => {\n  return mergeProps(\n    ...propsArray.map((props): typeof props =>\n      filter((value) => value != undefined, props)\n    )\n  );\n};\n","import { DOMAttributes } from \"@react-types/shared\";\nimport { createContext } from \"react\";\nimport { PopupProps } from \"./Popup\";\n\nexport const PopupContext = createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n\n/**\n * A context to provide some props that are necessary for PopupTrigger or PopupManager.\n * Passing those props via context helps with providing a nice API in those components.\n */\nexport const PopupControllerContext = createContext<\n  {\n    overlayProps?: DOMAttributes;\n  } & Partial<Pick<PopupProps, \"positioning\" | \"onClose\">>\n>({});\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { PopupContext } from \"./PopupContext\";\n\nconst StyledPopupHeader = styled.div<{\n  active?: boolean;\n  hasControls?: boolean;\n}>`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 1.5rem;\n  min-height: ${({ hasControls }) => hasControls && \"1.75rem\"};\n  cursor: default;\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"Popup.Header.activeForeground\" as UnknownThemeProp<\"Popup.Header.activeForeground\">,\n          theme.commonColors.labelForeground\n        )\n      : theme.color(\n          \"Popup.Header.inactiveForeground\" as UnknownThemeProp<\"Popup.Header.inactiveForeground\">,\n          theme.commonColors.labelDisabledForeground\n        )};\n  background-color: ${({ theme, active }) =>\n    active\n      ? theme.color(\"Popup.Header.activeBackground\", \"#e6e6e6\")\n      : theme.color(\"Popup.Header.inactiveBackground\", `#ededed`)};\n`;\n/**\n * Implements appearance of\n * [Popup Header](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75455%3A26566&t=Hzwse5j5R6iCEzVW-4),\n * and also acts as a handle for moving the panel.\n * Expected to be used with {@link Popup.Layout}:\n *\n * @example\n * ```tsx\n * <Popup>\n *    <Popup.Layout header={<Popup.Header>header</Popup.Header>} />\n * </Popup>\n * ```\n */\nexport const PopupHeader = ({\n  children,\n  hasControls,\n}: {\n  children?: React.ReactNode;\n  hasControls?: boolean;\n}) => {\n  const { isActive, movable, titleProps } = useContext(PopupContext);\n  const renderHeader = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledPopupHeader\n      active={isActive}\n      hasControls={hasControls}\n      {...mergeProps(titleProps, otherProps)}\n    >\n      {children}\n    </StyledPopupHeader>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderHeader(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderHeader()\n  );\n};\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { Popup } from \"./Popup\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { StyledPopupHint } from \"@intellij-platform/core/Popup/StyledPopupHint\";\n\nconst StyledPopupLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: inherit;\n`;\nconst StyledPopupLayoutHeader = styled.div`\n  flex-shrink: 0;\n`;\nconst StyledPopupLayoutContent = styled.div`\n  flex: 1;\n  overflow: auto;\n  // Not sure about making the content area a vertical flex container, but it seemed it makes sense as default.\n  // The use case at hand where this was added was \"Branches\" popup, which would of course be implementable without this\n  // too, with an extra flex container around the menu.\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledPopupLayoutFooter = styled.div`\n  flex-shrink: 0;\n`;\n\n/**\n * Popup content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function PopupLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the popup at the top. {@link Popup.Header} can be used for the content.\n   */\n  header?: React.ReactNode;\n  /**\n   * Scrollable content of the popup.\n   */\n  content: React.ReactNode;\n  /**\n   * Fixed position footer of the popup at the bottom. {@link Popup.Hint} can be used for the content.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <StyledPopupLayout>\n      {header && (\n        <StyledPopupLayoutHeader>\n          {typeof header === \"string\" ? (\n            <PopupHeader>{header}</PopupHeader>\n          ) : (\n            header\n          )}\n        </StyledPopupLayoutHeader>\n      )}\n      <StyledPopupLayoutContent>{content}</StyledPopupLayoutContent>\n      {footer && (\n        <StyledPopupLayoutFooter>\n          {typeof footer === \"string\" ? (\n            <StyledPopupHint>{footer}</StyledPopupHint>\n          ) : (\n            footer\n          )}\n        </StyledPopupLayoutFooter>\n      )}\n    </StyledPopupLayout>\n  );\n}\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Popup, PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"@intellij-platform/core/Popup/PopupContext\";\n\ninterface PopupManagerAPI {\n  /**\n   * Shows a popup within the stack of popups managed by {@link PopupManager}.\n   * The opened popup will be closed when `onClose` interactions happen.\n   */\n  show(\n    popup:\n      | React.ReactElement<PopupProps, typeof Popup>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<PopupProps, typeof Popup>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"PopupManager not found. Wrap your application with PopupManager to be able to open popups imperatively\"\n  );\n};\n\nconst PopupsContext = React.createContext<PopupManagerAPI>({\n  show: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing popups.\n */\nexport const usePopupManager = (): PopupManagerAPI => useContext(PopupsContext);\n\ntype PopupElement = ReactElement<PopupProps, typeof Popup>;\n\nexport interface PopupManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link usePopupManager}) for showing Popups.\n * It renders popups in a portal appended to `body`, unless `disablePortal` is `true`.\n */\nexport const PopupManager: React.FC<PopupManagerProps> = ({ children }) => {\n  const [popups, setPopups] = useState<Array<PopupElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<PopupManagerAPI>(() => {\n    const show: PopupManagerAPI[\"show\"] = (popup) => {\n      newKeyRef.current++;\n      const close = () => {\n        setPopups((currentPopups) =>\n          currentPopups.filter((aPopup) => aPopup !== wrappedPopup)\n        );\n      };\n      const wrappedPopup = (\n        <PopupControllerContext.Provider\n          key={newKeyRef.current}\n          value={{ onClose: close }}\n        >\n          {typeof popup === \"function\" ? popup({ close }) : popup}\n        </PopupControllerContext.Provider>\n      );\n      setPopups((currentPopups) => currentPopups.concat(wrappedPopup));\n    };\n    return {\n      show,\n    };\n  }, []);\n\n  return (\n    <PopupsContext.Provider value={api}>\n      {children}\n      {popups}\n    </PopupsContext.Provider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { OverlayTriggerProps, useOverlayTrigger } from \"@react-aria/overlays\";\nimport { PressResponder } from \"@react-aria/interactions\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport {\n  OverlayTriggerProps as OverlayTriggerStateProps,\n  useOverlayTriggerState,\n} from \"@react-stately/overlays\";\n\nimport { PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"./PopupContext\";\n\nexport interface PopupTriggerProps\n  extends Partial<OverlayTriggerProps>,\n    OverlayTriggerStateProps {\n  placement?: Required<PopupProps>[\"positioning\"][\"placement\"];\n  popup:\n    | React.ReactElement\n    | (({ close }: { close: () => void }) => React.ReactNode);\n  children: React.ReactElement;\n}\n\n/**\n * Popup opened by a trigger. `trigger` can be an element of any pressable component (such as {@link Button} or\n * {@link IconButton}), and is rendered in place. Similar to {@link Popup component}, `children` defines the content\n * of Popup.\n */\nexport const PopupTrigger = React.forwardRef(function PopupTrigger(\n  { placement, children, popup, ...props }: PopupTriggerProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const state = useOverlayTriggerState(props);\n  const triggerRef = useObjectRef(forwardedRef);\n  const { overlayProps, triggerProps } = useOverlayTrigger(\n    { type: props.type || \"menu\" },\n    state,\n    triggerRef\n  );\n  return (\n    <>\n      <PressResponder ref={triggerRef} {...triggerProps}>\n        {children}\n      </PressResponder>\n      {state.isOpen && (\n        <PopupControllerContext.Provider\n          value={{\n            overlayProps,\n            positioning: {\n              targetRef: triggerRef,\n              placement,\n            },\n            onClose: state.close,\n          }}\n        >\n          {typeof popup === \"function\" ? popup({ close: state.close }) : popup}\n        </PopupControllerContext.Provider>\n      )}\n    </>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\n/**\n * Hint component (aka Advertiser) used in Popup's footer.\n * {@see Popup.Layout}\n */\nexport const StyledPopupHint = styled.div`\n  // NOTE: Following the reference implementation, would require to set fallback colors non-prior to\n  // *.(background|foreground) colors (by not passing the fallback color as the second argument to theme.color).\n  // It's only in BigPopup that the fallback colors are prioritized over *-fallback. But in Figma designs, this is\n  // simplified, and hint always has the muted color (like in BigPopup), instead of the default foreground.\n  // So we are intentionally deviating from the reference implementation here.\n  background: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.background\",\n      theme.color(\"SearchEverywhere.Advertiser.background\")\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.foreground\",\n      theme.color(\"SearchEverywhere.Advertiser.foreground\")\n    )};\n  padding: 0.3125rem 0.9375rem 0.3125rem 0.625rem;\n  font-size: 0.875em;\n  line-height: normal;\n  user-select: none;\n  cursor: default;\n  // NOTE: white-space is intentionally not set as nowrap.\n`;\n","import React, {\n  CSSProperties,\n  HTMLAttributes,\n  Ref,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { keyframes } from \"styled-components\";\nimport { useProgressBar } from \"@react-aria/progress\";\nimport { AriaProgressBarProps } from \"@react-types/progress\";\nimport { PressProps, useHover } from \"@react-aria/interactions\";\nimport { useButton } from \"@react-aria/button\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, \"label\"> {\n  /**\n   * Process name, shown above or to the left of the progress bar. Placement is controlled by {@link namePosition}.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-name\n   */\n  name?: React.ReactNode;\n\n  /**\n   * Process name position with respect to the progress bar.\n   * If `namePosition` is \"side\", {@link name} is **not** automatically appended with a colon.\n   * @default \"top\"\n   */\n  namePosition?: \"side\" | \"top\";\n\n  /**\n   * Process details, placed bellow the progress bar, with a de-emphasized color.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-details\n   */\n  details?: React.ReactNode;\n\n  /**\n   * A second line of details. Not an officially documented feature, but it's supported in the reference impl.\n   */\n  secondaryDetails?: React.ReactNode;\n\n  /**\n   * Placed next to and aligned with the progress bar, used for\n   * [process control](https://jetbrains.github.io/ui/controls/progress_bar/#process-control) buttons.\n   */\n  button?: React.ReactNode;\n\n  /**\n   * Progress bar track width.\n   */\n  width?: CSSProperties[\"width\"];\n\n  /**\n   * Not supported in [the official specs](https://jetbrains.github.io/ui/controls/progress_bar/#25), but the progress\n   * bar in status bar has a denser spacing. It still won't be a pixel perfect match with the progress bar in the\n   * status bar.\n   */\n  dense?: boolean;\n\n  style?: HTMLAttributes<unknown>[\"style\"];\n  className?: HTMLAttributes<unknown>[\"className\"];\n}\n\ninterface ProgressBarContextObj {\n  setForcedDetails: (details: string | null) => void;\n  setTooltip: (tooltip: string | null) => void;\n}\n\n/**\n * @see https://jetbrains.github.io/ui/controls/progress_bar/\n * @see https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/platform-api/src/com/intellij/openapi/ui/panel/ProgressPanelBuilder.java\n *\n * Known issues:\n * There are a couple of UI issues because of the current layout (which can be improved probably):\n * - max-width of the label and details, it's not necessarily aligned with the the progressbar track, because they don't\n *   share the same container\n * - when label is on the side, details is aligned with the label, instead of the progressbar track.\n */\nexport const ProgressBar = ({\n  value = 0,\n  maxValue = 100,\n  minValue = 0,\n  name,\n  namePosition = \"top\",\n  details,\n  secondaryDetails,\n  button,\n  width,\n  dense,\n  className,\n  style,\n  ...props\n}: ProgressBarProps): React.ReactElement => {\n  const { progressBarProps, labelProps } = useProgressBar({\n    ...props,\n    label: name,\n    value,\n    maxValue,\n    minValue,\n  });\n  const percentage = (100 * (value / maxValue)).toFixed(0);\n  const [forcedDetails, setForcedDetails] = useState<null | string>(\"\");\n  const [tooltip, setTooltip] = useState<null | string>(\"\");\n\n  const contextValue: ProgressBarContextObj = useMemo(\n    () => ({\n      setForcedDetails,\n      setTooltip,\n    }),\n    []\n  );\n  const label = (\n    <StyledProgressBarLabel {...labelProps}>{name}</StyledProgressBarLabel>\n  );\n  const effectiveDetails = details ? tooltip || forcedDetails || details : null;\n  return (\n    <StyledProgressBarContainer style={style} className={className}>\n      {namePosition === \"top\" && label}\n      <StyledProgressBarLineContainer\n        dense={dense}\n        hasTopMargin={Boolean(name) && namePosition === \"top\"}\n        hasBottomMargin={Boolean(effectiveDetails)}\n      >\n        {namePosition === \"side\" && label}\n        <StyledProgressBarTrack\n          style={{ width }}\n          {...progressBarProps}\n          indeterminate={props.isIndeterminate}\n        >\n          {!props.isIndeterminate && (\n            <StyledProgressBarProgress style={{ width: `${percentage}%` }} />\n          )}\n        </StyledProgressBarTrack>\n        {props.showValueLabel && (\n          <span>{props.valueLabel ?? `${percentage}%`}</span>\n        )}\n        <ProgressBarContext.Provider value={contextValue}>\n          {button}\n        </ProgressBarContext.Provider>\n      </StyledProgressBarLineContainer>\n      <StyledProgressBarDetails>{effectiveDetails}</StyledProgressBarDetails>\n      <StyledProgressBarDetails>{secondaryDetails}</StyledProgressBarDetails>\n    </StyledProgressBarContainer>\n  );\n};\n\nconst ProgressBarContext = React.createContext<null | ProgressBarContextObj>(\n  null\n);\n\nconst StyledProgressBarContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground /* TODO: check*/};\n  cursor: default; // prevent cursor on text\n`;\n\nconst StyledProgressBarLineContainer = styled.div<{\n  dense?: boolean;\n  hasTopMargin?: boolean;\n  hasBottomMargin?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: ${({ dense }) => (dense ? \"0.5rem\" : \"0.625rem\")};\n  height: 4px;\n  // spacing is based on the reference impl and figma designs. top and bottom spacing is inverted in the spec document\n  // figma: https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?node-id=75426%3A16650\n  // spec document: https://jetbrains.github.io/ui/controls/progress_bar/#25\n  margin-top: ${({ hasTopMargin }) => hasTopMargin && \"0.375rem\"};\n  margin-bottom: ${({ hasBottomMargin }) => hasBottomMargin && \"0.25rem\"};\n`;\n\nconst StyledProgressBarLabel = styled.div`\n  white-space: nowrap;\n  max-width: calc(100% - 2rem);\n  overflow: hidden;\n`;\n\nconst StyledProgressBarDetails = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n  font-size: 0.82em;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 2rem); // not the best way\n`;\n\nconst StyledProgressBarTrack = styled.div<{ indeterminate?: boolean }>`\n  height: inherit;\n  border-radius: 2px;\n  overflow: hidden;\n  display: flex;\n\n  // In case used in flex layout\n  min-width: 0;\n  flex: 1;\n\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.trackColor\",\n      theme.dark ? \"rgb(85,85,85)\" : \"rgb(196,196,196)\"\n    )};\n  ${({ indeterminate }) =>\n    indeterminate &&\n    css`\n      background: linear-gradient(\n        90deg,\n        ${getIndeterminateStartColor} 0%,\n        ${getIndeterminateEndColor} 50%,\n        ${getIndeterminateStartColor} 100%\n      );\n      background-size: 96px auto;\n      animation: 800ms ${indeterminateBackgroundAnimation} linear infinite;\n    `}\n`;\n\nconst getIndeterminateStartColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateStartColor\");\nconst getIndeterminateEndColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateEndColor\");\n\nconst indeterminateBackgroundAnimation = keyframes`\n  0% {\n    background-position: 0;\n  }\n  100% {\n    background-position: 96px;\n  }\n`;\n\nconst StyledProgressBarProgress = styled.div`\n  height: 100%;\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.progressColor\",\n      theme.dark ? \"rgb(160,160,160)\" : \"rgb(128,128,128)\"\n    )};\n`;\n\ntype ProgressBarIconButtonProps = Pick<PressProps, \"onPress\"> & {\n  hoverTooltip: string;\n};\n\n/**\n * Accessibility and functionality of progress bar icon buttons\n * @private maybe?\n */\nexport function useProgressBarIconButton(\n  { onPress, hoverTooltip }: ProgressBarIconButtonProps,\n  ref: Ref<HTMLElement>\n) {\n  const { buttonProps } = useButton(\n    {\n      onPress,\n      elementType: \"span\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: it works, but it's intentionally excluded from the type.\n      preventFocusOnPress: true,\n    },\n    ref\n  );\n  const context = useContext(ProgressBarContext);\n  const { hoverProps, isHovered } = useHover({});\n  useEffect(() => {\n    context?.setTooltip(isHovered ? hoverTooltip : null);\n  }, [hoverTooltip, isHovered]);\n  return {\n    buttonProps: mergeProps(buttonProps, hoverProps),\n  };\n}\n\n/**\n * @private maybe?\n * */\nexport function useProgressBarPauseIconButton(\n  { paused, ...props }: ProgressBarIconButtonProps & { paused: boolean },\n  ref: Ref<HTMLElement>\n) {\n  const context = useContext(ProgressBarContext);\n  useEffect(() => {\n    context?.setForcedDetails(paused ? \"Paused\" : null);\n  }, [paused]);\n  return useProgressBarIconButton(props, ref);\n}\n\n/**\n * Experimenting with an idea of exposing parts on each component, to maximize styling customizability, similar to\n * [classes](https://mui.com/joy-ui/api/button/#classes) API in MUI components. But instead of passing classes prop,\n * one would be able to create custom versions of a component by doing something like this:\n * const CustomComponent = styled(Component)`\n *   ${Component.part1} {\n *     // custom style here\n *   }\n * `;\n * The question is if this type of customizability is actually a good thing in the balance between flexibility for\n * catering for different use cases and not stepping out of the design system boundaries.\n * Another potential downside is that the public API expands to the anatomy of the component.\n */\nProgressBar.Container = StyledProgressBarContainer;\nProgressBar.Label = StyledProgressBarLabel;\nProgressBar.LineContainer = StyledProgressBarLineContainer;\nProgressBar.Track = StyledProgressBarTrack;\nProgressBar.Progress = StyledProgressBarProgress;\nProgressBar.Details = StyledProgressBarDetails;\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarCancelButtonProps {\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n  onPress: () => void;\n}\n\n/**\n * Stop (cancel) icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarStopButton = ({\n  small,\n  onPress,\n}: ProgressBarCancelButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarIconButton(\n    { onPress, hoverTooltip: \"Cancel\" },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      ref={ref}\n      {...buttonProps}\n      icon={`process/stop${small ? \"Small\" : \"\"}.svg`}\n      hoverIcon={`process/stop${small ? \"Small\" : \"\"}Hovered.svg`}\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  ThreeViewSplitter,\n  ThreeViewSplitterProps,\n} from \"./ThreeViewSplitter/ThreeViewSplitter\";\n\ntype ResizableViewProps = Omit<\n  ThreeViewSplitterProps,\n  | \"innerView\"\n  | \"firstView\"\n  | \"firstSize\"\n  | \"onFirstResize\"\n  | \"lastView\"\n  | \"lastSize\"\n  | \"onLastResize\"\n> & {\n  children: React.ReactNode;\n  onResize: ThreeViewSplitterProps[\"onFirstResize\"];\n  size: ThreeViewSplitterProps[\"firstSize\"];\n  /**\n   * Whether the resizer should be placed at before or after the resizable view.\n   */\n  resizerPlacement?: \"before\" | \"after\";\n};\n/**\n * A single resizable view, built on top of {@link ThreeViewSplitter}, just to provide better prop interface.\n * Like `ThreeViewSplitter` it supports \"horizontal\" or \"vertical orientations. There is an extra `resizerPlacement`\n * prop which determines where the resizer should be placed in relation with the view. When set to \"before\" the view\n * will be resizable from the start (\"left\" or \"top\"). When set to \"after\" the view will be resizable from end (\"right\"\n * or \"bottom\"). Default is \"after\"\n */\nexport const ResizableView = ({\n  children,\n  size,\n  onResize,\n  resizerPlacement = \"after\",\n  ...props\n}: ResizableViewProps) => (\n  <ThreeViewSplitter\n    {...(resizerPlacement === \"after\"\n      ? { firstView: children, firstSize: size, onFirstResize: onResize }\n      : { lastView: children, lastSize: size, onLastResize: onResize })}\n    {...props}\n  />\n);\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useBottomResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will increase/decrease the height\n */\nexport const BottomResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useBottomResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype HorizontalResizerViewProps = ResizerViewProps<\"horizontal\">;\n\nconst StyledHorizontalResizer = styled.div`\n  top: 0;\n  height: 100%;\n  width: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledHorizontalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: HorizontalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  width: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  height: 100%;\n  left: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a horizontal layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const HorizontalResizer: React.FC<HorizontalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"col\",\n  children,\n  style = {},\n  resizerProps,\n}) => {\n  return (\n    <StyledHorizontalResizer\n      {...resizerProps}\n      style={{ ...style, background, width: size }}\n    >\n      {children}\n      <StyledHorizontalResizerArea handleSize={outerPadding} cursor={cursor} />\n    </StyledHorizontalResizer>\n  );\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useLeftResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the left side of the resizable view. i.e.\n * moving mouse to right/left will decrease/increase the width\n */\nexport const LeftResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useLeftResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useRightResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the right side of the resizable view. i.e.\n * moving mouse to right/left will increase/decrease the width\n */\nexport const RightResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useRightResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useTopResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will decrease/increase the height\n */\nexport const TopResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useTopResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype VerticalResizerViewProps = ResizerViewProps<\"vertical\">;\n\nconst StyledVerticalResizer = styled.div`\n  width: 100%;\n  height: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledVerticalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: VerticalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  height: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  width: 100%;\n  top: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a vertical layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const VerticalResizer: React.FC<VerticalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"row\",\n  resizerProps,\n  children,\n  style = {},\n}) => (\n  <StyledVerticalResizer\n    {...resizerProps}\n    style={{ ...style, background, height: size }}\n  >\n    {children}\n    <StyledVerticalResizerArea handleSize={outerPadding} cursor={cursor} />\n  </StyledVerticalResizer>\n);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { ResizerProps } from \"./ResizerProps\";\n\ntype UseResizerProps = Pick<\n  ResizerProps,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n>;\n\nexport type ResizerViewProps<O = \"horizontal\" | \"vertical\"> = Omit<\n  ResizerProps<O>,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n> &\n  ReturnType<typeof useResizer>;\n\nconst useResizer = (\n  orientation: \"horizontal\" | \"vertical\",\n  invert: boolean,\n  { onResizeStarted, onResize, onResizeEnd }: UseResizerProps\n) => {\n  const props = useMove({\n    dragThreshold: 0,\n    onMoveStart: () => onResizeStarted() || 0,\n    onMoveEnd: () => onResizeEnd?.(),\n    onMove: ({ movement, startState }) =>\n      onResize(\n        startState +\n          (invert ? -1 : +1) *\n            movement[orientation === \"horizontal\" ? \"x\" : \"y\"]\n      ),\n  });\n  return {\n    resizerProps: props,\n  };\n};\n\nexport const useLeftResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", true, props);\n};\n\nexport const useRightResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", false, props);\n};\n\nexport const useTopResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", true, props);\n};\n\nexport const useBottomResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", false, props);\n};\n","import React, { ComponentProps, useState } from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n  CommonActionId,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { Item } from \"@intellij-platform/core/Collections\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport interface SearchInputProps\n  extends Omit<InputProps, \"onSubmit\" | \"onChange\"> {\n  /**\n   * Search history to be shown as a menu when the search icon is pressed.\n   */\n  searchHistory?: Array<string>;\n  /**\n   * The content of \"show history\" button tooltip, and the corresponding action title.\n   * @default \"Recent Search\"\n   */\n  historyButtonTitle?: string;\n  /**\n   * Called when the search input is cleared by either clear button or `Escape` key.\n   * `onChange` is also called with an empty string, whenever the input is cleared,\n   * so there is no need for updating the state using `onClear`, when the value is controlled.\n   *\n   * @param clearedValue the value before clearing.\n   */\n  onClear?: (clearedValue: string) => void;\n  /**\n   * Called when the search is submitted by pressing `Enter`\n   * @param value submitted text\n   */\n  onSubmit?: (value: string) => void;\n  /**\n   * Controlled value of the search input\n   */\n  value?: string;\n  /**\n   * Default value of the search input, used for initialization when value is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * Called when the value is changed.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Called when a history item is selected. `onChange` is called with the selected text, so\n   * there is no need for updating the state using `onHistoryItemSelected`, when the value is controlled.\n   *\n   * @param value text selected from history.\n   * @param previousValue the value of the input before the history item was selected.\n   */\n  onHistoryItemSelected?: (value: string, previousValue: string) => void;\n}\n\nconst StyledInput = styled(Input)`\n  input[type=\"search\"] {\n    -webkit-appearance: none;\n    &::-webkit-search-cancel-button {\n      -webkit-appearance: none;\n    }\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n  }\n`;\n\n/**\n * A wrapper around {@link Input} with a few additions:\n * - A Search icon, added as an {@link InputProps#addonBefore addonBefore}.\n * - A clear button, added as an {@link InputProps#addonAfter addonAfter}, when the input has value.\n *   {@link SearchInputProps#onClear onClear} is called when the clear button is clicked.\n * - A list of search queries shown as a menu, when the search icon is clicked,\n *   if {@link SearchInputProps#searchHistory searchHistory} is provided.\n * - An action provided on the input element, to open the search history via\n *   {@link CommonActionId.SHOW_SEARCH_HISTORY} shortcut.\n * - Search submission callback ({@link SearchInputProps#onSubmit onSubmit}) called when search is submitted by pressing Enter\n *\n * {@link InputProps#onChange onChange} and {@link InputProps#onSubmit onSubmit} props are also different in SearchInput, compared to\n * the corresponding props of the native input.\n *\n * Caveat: If the width is not set (either explicitly or via the entailing layout), the width of the input will change when clear button shows/hides.\n *\n */\nexport const SearchInput = React.forwardRef(function SearchInput(\n  {\n    addonBefore,\n    addonAfter,\n    searchHistory,\n    onClear,\n    onSubmit,\n    onHistoryItemSelected,\n    historyButtonTitle = \"Recent Search\",\n    value: valueProp,\n    defaultValue = \"\",\n    onChange,\n    type = \"search\",\n    inputRef: inputRefProp,\n    ...props\n  }: SearchInputProps,\n  forwardedRef: React.Ref<HTMLDivElement>\n) {\n  const [value, setValue] = useControlledState(\n    valueProp!,\n    defaultValue,\n    onChange!\n  );\n  const inputContainerRef = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const [isSearchHistoryOpen, setSearchHistoryOpen] = useState(false);\n  const showSearchHistoryAction: ActionDefinition = {\n    id: CommonActionId.SHOW_SEARCH_HISTORY,\n    title: historyButtonTitle,\n    actionPerformed: () => {\n      setSearchHistoryOpen(true);\n    },\n  };\n  // TODO: rename HelpTooltip, ActionTooltip, etc. to Tooltip.Action Tooltip.Help, then add ActionTooltip in action\n  //  components, and use that instead of the more low-level API used here.\n  const getShortcut = useGetActionShortcut();\n  const searchIcon = searchHistory ? (\n    <MenuTrigger\n      isOpen={isSearchHistoryOpen}\n      onOpenChange={setSearchHistoryOpen}\n      positioningTargetRef={inputContainerRef}\n      renderMenu={({ menuProps }) => (\n        <Menu\n          {...menuProps}\n          autoFocus=\"first\"\n          onAction={(key) => {\n            const historyItemText =\n              searchHistory[parseInt(`${key}`.split(\"_\")[0])];\n            if (historyItemText !== undefined) {\n              setValue(historyItemText);\n              onHistoryItemSelected?.(historyItemText, value);\n              inputRef.current?.focus();\n            }\n          }}\n        >\n          {searchHistory.map((historyItem, index) => (\n            <Item key={`${index}_${historyItem}`}>{historyItem}</Item>\n          ))}\n        </Menu>\n      )}\n    >\n      {(menuTriggerProps, ref) => (\n        <TooltipTrigger\n          tooltip={\n            <ActionTooltip\n              actionName={historyButtonTitle}\n              shortcut={getShortcut(CommonActionId.SHOW_SEARCH_HISTORY)}\n            />\n          }\n        >\n          {(tooltipTriggerProps) => (\n            <PlatformIcon\n              {...mergeProps(tooltipTriggerProps, menuTriggerProps)}\n              ref={ref}\n              icon=\"actions/searchWithHistory.svg\"\n              role=\"button\"\n              aria-label={historyButtonTitle}\n            />\n          )}\n        </TooltipTrigger>\n      )}\n    </MenuTrigger>\n  ) : (\n    <PlatformIcon icon=\"actions/search.svg\" />\n  );\n  const clear = () => {\n    setValue(\"\");\n    onClear?.(value);\n  };\n  const inputProps = mergeProps<ComponentProps<typeof Input>[]>(props, {\n    ref: inputContainerRef,\n    inputRef,\n    value,\n    type,\n    onChange: (event) => {\n      setValue(event.target.value);\n    },\n    addonBefore: (\n      <>\n        {searchIcon}\n        {addonBefore}\n      </>\n    ),\n    addonAfter: (\n      <>\n        {value && (\n          <AutoHoverPlatformIcon\n            onClick={clear}\n            role=\"button\"\n            aria-label=\"Clear search\"\n            icon=\"actions/close\"\n            hoverIcon=\"actions/closeHovered\"\n          />\n        )}\n        {addonAfter}\n      </>\n    ),\n    onKeyDown: (event) => {\n      if (event.repeat) {\n        return;\n      }\n      if (event.key === \"Enter\") {\n        onSubmit?.(event.currentTarget.value);\n      } else if (event.key === \"Escape\") {\n        clear();\n      }\n    },\n  });\n  if (searchHistory) {\n    return (\n      <ActionsProvider actions={[showSearchHistoryAction]}>\n        {({ shortcutHandlerProps }) => (\n          <StyledInput {...mergeProps(inputProps, shortcutHandlerProps)} />\n        )}\n      </ActionsProvider>\n    );\n  }\n  return <StyledInput {...inputProps} />;\n});\n","import React, { useRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface SpeedSearchInputProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n  clear: () => void;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 0.25rem;\n`;\n\nconst StyledSpeedSearchInput = styled.span<{ noMatch?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  background: ${({ theme, noMatch }) =>\n    noMatch\n      ? theme.color(\n          \"SearchField.errorBackground\",\n          theme.dark ? \"#743A3A\" : \"#ffcccc\"\n        )\n      : theme.color(\n          \"TextField.background\"\n        )}; // fallback logic not checked with the ref impl\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )}; // fallback logic not checked with the ref impl\n  height: 1.5rem; // 24px, JBTextField COMPACT_HEIGHT\n  padding: 0.125rem 0.375rem;\n  border: 1px solid ${({ theme }) => theme.getOutlineColor(true, false)};\n  border-radius: ${({ theme }) =>\n    ((theme.value(\"Component.arc\") as number) ?? 5) / 2}px;\n`;\nconst StyledSearchText = styled.span`\n  flex: 1;\n  font-size: 0.91em; // RelativeFont.SMALL\n`;\n\n/**\n * An input field to be rendered to show the filter value in speed search in menus and similar speedSearch-enabled\n * components.\n * @see SpeedSearchPopup\n */\nexport const SpeedSearchInput = React.forwardRef<\n  HTMLElement,\n  SpeedSearchInputProps\n>(({ active, match, children, clear }, ref) => {\n  const clearButtonRef = useRef<HTMLElement>(null);\n  const { buttonProps } = useButton(\n    {\n      elementType: \"span\",\n      \"aria-label\": \"Clear search\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n      preventFocusOnPress: true,\n      onPress: clear,\n    },\n    clearButtonRef\n  );\n\n  // Temporary styled components until SearchInput is implemented\n  return active ? (\n    <StyledSpeedSearchInput ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      <StyledSearchText>\n        {(children || \"\").replace(/ /g, \"\\u00A0\")}\n      </StyledSearchText>\n      {children && (\n        <AutoHoverPlatformIcon\n          {...buttonProps}\n          ref={clearButtonRef}\n          icon=\"actions/close\"\n          hoverIcon=\"actions/closeHovered\"\n        />\n      )}\n    </StyledSpeedSearchInput>\n  ) : null;\n});\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown in the top left corner of list, tree, etc., which shows the search\n * query.\n * @see SpeedSearchInput\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ noMatch?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ noMatch, theme }) =>\n    noMatch\n      ? theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)\n      : theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        // Seems reasonable to prevent default here generally, but the specific case this is added for is the space key,\n        // scrolling the page.\n        event.preventDefault();\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { RefObject } from \"react\";\n\nexport interface SpeedSearchState {\n  /**\n   * Whether speed search is active. Speed search becomes active when the user starts to type and becomes inactive\n   * when Escape is pressed, or when the speed search container is blurred and `stickySearch` is false.\n   * Whenever speed search becomes inactive, search text is also cleared.\n   * Note that speed search can be active while search term is empty.\n   */\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  /**\n   * clears search term and sets active to false\n   */\n  clear: () => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    active: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.active!,\n    props.active || false,\n    props.onActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n    clear: () => {\n      setSearchTerm(\"\");\n      setActive(false);\n    },\n  };\n}\n\nexport interface SpeedSearchProps {\n  stickySearch?: boolean;\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { stickySearch }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState,\n  ref: RefObject<HTMLElement>\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!ref.current?.contains(e.target as HTMLElement)) {\n        // In case events are propagated through portals\n        return;\n      }\n      if ((e.key === \"a\" && e.metaKey) || e.ctrlKey) {\n        e.preventDefault();\n      }\n      if (e.key === \"Escape\") {\n        if (searchTerm) {\n          clear();\n          return;\n        }\n      } else {\n        ghostInputKeydown(e);\n      }\n      e.continuePropagation();\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onFocusWithinChange: (focused) => {\n      if (!focused && !stickySearch) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarProps {\n  left: React.ReactNode;\n  right: React.ReactNode;\n}\n\n/**\n * Status bar rendered at the bottom of the main window. In the reference implementation, there are three slots for\n * content: left, right and center. It doesn't seem center is really necessary, so only left and right are supported\n * for now.\n * @param left content on the left side of the status bar.\n * @param right content on the right side of the status bar. Typically, a bunch of {@link StatusBarWidget}s\n */\nexport const StatusBar = ({\n  left,\n  right,\n}: StatusBarProps): React.ReactElement => {\n  return (\n    <StyledStatusBar\n      onMouseDown={(e) => {\n        // stop focus from going out of the currently focused element, when status bar is clicked\n        // might be too intrusive to prevent default unconditionally :-? Also, it may make sense for it to be an option\n        e.preventDefault();\n      }}\n    >\n      <StyledStatusBarLeft>{left}</StyledStatusBarLeft>\n      <StyledStatusBarRight>{right}</StyledStatusBarRight>\n    </StyledStatusBar>\n  );\n};\n\nconst StyledStatusBar = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.25rem;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between; // because there is left and right sides\n  background-color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.background\" as UnknownThemeProp<\"StatusBar.background\">,\n      theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)\n    ) || \"#fff\"};\n  color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.Widget.foreground\" as UnknownThemeProp<\"StatusBar.Widget.foreground\">,\n      theme.commonColors.labelForeground\n    )};\n  border-top: 1px solid\n    ${({ theme }) => theme.color(\"StatusBar.borderColor\", \"rgb(145, 145, 145)\")};\n  height: calc(1.25rem + 1px /* border*/);\n  line-height: 1.25rem;\n  font-size: 0.656rem; // not verified\n  cursor: default;\n`;\n\nconst StyledStatusBarSection = styled.div`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst StyledStatusBarRight = styled(StyledStatusBarSection)`\n  flex-shrink: 0;\n`;\nconst StyledStatusBarLeft = styled(StyledStatusBarSection)`\n  flex-shrink: 1;\n  min-width: 0;\n  overflow: hidden;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { PressProps, usePress } from \"@react-aria/interactions\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface StatusBarWidgetProps extends PressProps {\n  label?: React.ReactNode;\n  icon?: React.ReactNode;\n}\n\n/**\n * Status bar button (aka widget), with the right hover and pressed appearance.\n * It doesn't get focused when pressed, and is excluded from tab order.\n * Disabled style is not couldn't be found, so it's skipped at the moment.\n */\nexport const StatusBarWidget = React.forwardRef(function StatusBarWidget(\n  props: StatusBarWidgetProps,\n  forwardedRef: ForwardedRef<HTMLSpanElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  // Maybe it's better for a11y to use useButton, or at least use button element?\n  const { pressProps, isPressed } = usePress({\n    ref,\n    ...props,\n    preventFocusOnPress: true,\n  });\n  const { focusableProps } = useFocusable({ excludeFromTabOrder: true }, ref);\n\n  const StyledWrapper = props.label\n    ? StyledStatusBarWidget\n    : StyledStatusBarIconWidget;\n  return (\n    <StyledWrapper\n      {...mergeProps(pressProps, focusableProps)}\n      className={isPressed ? \"pressed\" : \"\"}\n      ref={ref}\n    >\n      {props.icon}\n      {props.icon && props.label && (\n        <>&nbsp;</> //not the nicest way to handle spacing!\n      )}\n      {props.label}\n    </StyledWrapper>\n  );\n});\n\nconst StyledStatusBarWidget = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.375rem\"};\n  height: 1.125rem;\n  white-space: nowrap;\n  &:hover {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverBackground\" as UnknownThemeProp<\"StatusBar.Widget.hoverBackground\">,\n        theme.color(\"ActionButton.hoverBackground\", \"#dfdfdf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverForeground\" as UnknownThemeProp<\"StatusBar.Widget.hoverForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n  &.pressed {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedBackground\" as UnknownThemeProp<\"StatusBar.Widget.pressedBackground\">,\n        theme.color(\"ActionButton.pressedBackground\", \"#cfcfcf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedForeground\" as UnknownThemeProp<\"StatusBar.Widget.pressedForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n`;\n\nconst StyledStatusBarIconWidget = styled(StyledStatusBarWidget)`\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.25rem\"};\n`;\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  closeButton,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <DebuggerTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n}) => {\n  return (\n    <TabContentLayout startIcon={icon} title={title} endIcon={closeButton} />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\n\ninterface EditorTabContentProps {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button, shown in place of \"pin\" button if not pinned. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <EditorTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  closeButton,\n  onUnpin,\n  pinned,\n  containerProps,\n}: EditorTabContentProps) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <TooltipTrigger tooltip={<ActionTooltip actionName=\"Unpin Tab\" />}>\n            <BareButton\n              onPress={onUnpin}\n              excludeFromTabOrder\n              preventFocusOnPress\n            >\n              <PlatformIcon icon=\"actions/pinTab\" />\n            </BareButton>\n          </TooltipTrigger>\n        ) : (\n          closeButton\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import React from \"react\";\nimport { BareButton, BareButtonProps } from \"@intellij-platform/core/Button\";\nimport { PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\n\nconst StyledIconWrapper = styled.span`\n  display: inherit;\n  .icon.hover {\n    display: none;\n  }\n  &:hover {\n    .icon {\n      display: none;\n    }\n    .icon.hover {\n      display: unset;\n    }\n  }\n`;\n/**\n * Close button for Tab\n */\nexport const TabCloseButton = (props: Omit<BareButtonProps, \"children\">) => {\n  // using useHover proved to be unstable.\n  return (\n    <BareButton {...props} excludeFromTabOrder preventFocusOnPress>\n      <StyledIconWrapper>\n        <PlatformIcon icon={\"actions/closeHovered\"} className=\"icon hover\" />\n        <PlatformIcon icon={\"actions/close\"} className=\"icon\" />\n      </StyledIconWrapper>\n    </BareButton>\n  );\n};\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps = {} }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    // To allow tooltip be used easily. TooltipTrigger passes props via FocusableContext.\n    const { focusableProps } = useFocusable({}, useObjectRef(ref));\n    return (\n      <StyledTabItemLayout\n        {...mergeProps(focusableProps, containerProps)}\n        ref={ref}\n      >\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { ForwardedRef, forwardRef, RefObject, useEffect } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  shouldSelectOnPressUp?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = forwardRef(function Tab<T extends object>(\n  {\n    state,\n    item,\n    focusable,\n    active,\n    shouldSelectOnPressUp,\n    Component = StyledDefaultTab,\n  }: TabProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): React.ReactElement {\n  const { key, rendered } = item;\n  const ref = useForwardedRef(forwardedRef);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab(\n    {\n      key,\n      // @ts-expect-error  TODO(@react-aria/tabs): update to ^3.6.0 to support this\n      shouldSelectOnPressUp,\n    },\n    state,\n    ref\n  );\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n});\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useOverflowObserver } from \"../utils/overflow-utils/useOverflowObserver\";\nimport { useHasOverflow } from \"./useHasOverflow\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Whether selected tab should change on press up instead of press down.\n   * @default false.\n   */\n  shouldSelectOnPressUp?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n *  - FIX: When a tab that was not selected is removed, selection should not change. It now changes to the tab before the removed one.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  shouldSelectOnPressUp,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, hasOverflow } = useHasOverflow({ ref });\n  const { overflowedElements } = useOverflowObserver(ref);\n  const overflowedKeys = new Set(\n    overflowedElements\n      .map((element) =>\n        element instanceof HTMLElement ? element.dataset[\"key\"] : null\n      )\n      .filter(notNull)\n  );\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={hasOverflow.left}\n        hasOverflowAtEnd={hasOverflow.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              shouldSelectOnPressUp={shouldSelectOnPressUp}\n              active={active}\n              Component={TabComponent}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useHasOverflow<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [hasOverflow, setHasOverflow] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newHasOverflow = {\n        top: offsetTop > threshold,\n        bottom: offsetBottom > threshold,\n        left: offsetLeft > threshold,\n        right: offsetRight > threshold,\n      };\n      if (\n        hasOverflow.top !== newHasOverflow.top ||\n        hasOverflow.bottom !== newHasOverflow.bottom ||\n        hasOverflow.left !== newHasOverflow.left ||\n        hasOverflow.right !== newHasOverflow.right\n      ) {\n        setHasOverflow(newHasOverflow);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    hasOverflow,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [...collection].filter(\n            (menuItem) => overflowedKeys.has(menuItem.key)\n          );\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <IconButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </IconButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\n\ntype ToolWindowTabContentProps = {\n  icon?: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <ToolWindowTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactNode;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n};\n\nexport const ToolWindowTabContent = React.forwardRef(\n  (\n    { icon, title, closeButton, containerProps }: ToolWindowTabContentProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    return (\n      <TabContentLayout\n        containerProps={containerProps}\n        ref={ref}\n        startIcon={icon}\n        title={title}\n        endIcon={closeButton}\n      />\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n    shouldSelectOnPressUp\n  />\n);\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","// language=JSRegexp\nconst numberPattern = \"[0-9]{0,3}.?[0-9]*\";\n\nconst parseComponent = (componentStr: string, index: number) =>\n  componentStr\n    ? index < 3\n      ? parseInt(componentStr)\n      : Math.round(Math.min(parseFloat(componentStr), 1) * 255)\n    : undefined;\n\nconst parseHexRgba = (str: string) =>\n  str\n    .match(/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?$/i)\n    ?.slice(1, 5)\n    .map((i) => (i ? parseInt(i, 16) : undefined));\nconst parseShorthandHex = (str: string) =>\n  str\n    .match(/^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i)\n    ?.slice(1, 4)\n    .map((i) => (i ? parseInt(i + i, 16) : undefined));\nconst parseRgb = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgb\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\nconst parseRgba = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgba\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\n\n/**\n * parses a color string into rgba components.\n * @param str\n */\nexport const parseColorString = (\n  str: string\n): [number, number, number, number?] | null => {\n  const result = [parseHexRgba, parseShorthandHex, parseRgb, parseRgba].reduce<\n    (number | undefined)[] | undefined\n  >((result, parse) => result || parse(str), undefined);\n  return Array.isArray(result) &&\n    result.slice(0, 3).every((c) => Number.isInteger(c))\n    ? (result as [number, number, number, number?])\n    : null;\n};\n","import { parseColorString } from \"./parseColorString\";\n\n/**\n * A Color class resembling AWT Color\n */\nexport class Color {\n  public readonly r: number;\n  public readonly g: number;\n  public readonly b: number;\n  public readonly a: number;\n\n  private static readonly FACTOR = 0.7;\n\n  constructor(r: number, g: number, b: number, a?: number);\n  constructor(rgba: string);\n  constructor(rgba: Color);\n  constructor(\n    rgba: string | number | Color,\n    g?: number,\n    b?: number,\n    a: number = 255\n  ) {\n    let r: number;\n    if (typeof rgba === \"string\") {\n      [r = NaN, g = NaN, b = NaN, a = 255] = parseColorString(rgba) || [];\n    } else if (rgba instanceof Color) {\n      [r, g, b, a] = [rgba.r, rgba.g, rgba.b, rgba.a];\n    } else {\n      r = rgba;\n    }\n    this.r = r;\n    this.g = g!;\n    this.b = b!;\n    this.a = a < 1 ? Math.round(a * 255) : a;\n  }\n\n  isValid() {\n    return (\n      Number.isInteger(this.r) &&\n      Number.isInteger(this.g) &&\n      Number.isInteger(this.b) &&\n      Number.isInteger(this.a)\n    );\n  }\n\n  /**\n   * Extra method for changing transparency\n   */\n  withTransparency(alpha: number) {\n    return new Color(this.r, this.g, this.b, alpha);\n  }\n\n  brighter() {\n    let { r, g, b, a: alpha } = this;\n    const int = Math.floor,\n      FACTOR = Color.FACTOR;\n    // The rest is copy paste of java.awt.Color (only `int i` is changed to `let i` :D)\n    let i = int(1.0 / (1.0 - FACTOR));\n    if (r == 0 && g == 0 && b == 0) {\n      return new Color(i, i, i, alpha);\n    }\n    if (r > 0 && r < i) r = i;\n    if (g > 0 && g < i) g = i;\n    if (b > 0 && b < i) b = i;\n\n    return new Color(\n      Math.min(int(r / FACTOR), 255),\n      Math.min(int(g / FACTOR), 255),\n      Math.min(int(b / FACTOR), 255),\n      alpha\n    );\n  }\n\n  darker() {\n    const FACTOR = Color.FACTOR;\n    const int = Math.floor;\n\n    return new Color(\n      Math.max(int(this.r * FACTOR), 0),\n      Math.max(int(this.g * FACTOR), 0),\n      Math.max(int(this.b * FACTOR), 0),\n      this.a\n    );\n  }\n\n  static brighter(color: string): string {\n    // note: we can't type args simply with ConstructorParameters<typeof Color>.\n    // see more: https://github.com/microsoft/TypeScript/issues/37079\n    return new Color(color).brighter().toString();\n  }\n\n  blend(colorOrColorString: Color | string) {\n    const color =\n      typeof colorOrColorString === \"string\"\n        ? new Color(colorOrColorString)\n        : colorOrColorString;\n    const getBlendedValue = (component: \"r\" | \"g\" | \"b\") =>\n      Math.round(\n        (color.a / 255) * color[component] +\n          (this.a / 255) * (1 - color.a / 255) * this[component]\n      );\n    return new Color(\n      getBlendedValue(\"r\"),\n      getBlendedValue(\"g\"),\n      getBlendedValue(\"b\")\n    );\n  }\n\n  toString() {\n    const toString = (component: number) =>\n      Number.isNaN(component) ? \"\" : component.toString(16).padStart(2, \"0\");\n    const r = toString(this.r);\n    const g = toString(this.g);\n    const b = toString(this.b);\n    const a = this.a === 255 ? \"\" : toString(this.a);\n    return `#${r}${g}${b}${a}`;\n  }\n}\n","import React, { CSSProperties, useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport { ResizerProps } from \"../Resizer/ResizerProps\";\nimport { Theme } from \"../Theme/Theme\";\n\n/**\n * Props are named mostly based on ThreeComponentsSplitter in Intellij Platform.\n */\nexport interface ThreeViewSplitterProps {\n  orientation?: \"horizontal\" | \"vertical\";\n  resizerProps?: Partial<\n    Omit<ResizerProps, \"onResize\" | \"onResizeStarted\" | \"onResizeEnd\">\n  >;\n  innerView?: React.ReactNode;\n  innerViewMinSize?: number;\n  firstView?: React.ReactNode;\n  firstSize?: number | null;\n  firstViewMinSize?: number;\n  lastView?: React.ReactNode;\n  lastSize?: number | null;\n  lastViewMinSize?: number;\n  onFirstResize?: (size: number) => void;\n  onLastResize?: (size: number) => void;\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst StyledSplitterContainer = styled.div<{\n  orientation: \"horizontal\" | \"vertical\";\n}>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  flex-direction: ${({ orientation }) =>\n    orientation === \"vertical\" ? \"column\" : \"row\"};\n`;\n\nconst StyledSplitterInnerView = styled.div`\n  // The default overflow visible should be changed obviously. Not sure if there is any layout implication\n  // in using 'auto' instead of hidden, to provide scroll behaviour by default, but even if we realize later\n  // that we need to set overflow to hidden here, we can have scrollable content inside the inner view via an\n  // intermediate element inside the inner view, with overflow set to auto and width set to 100%.\n  overflow: auto;\n  flex: 1;\n`;\n/**\n * Corresponding to\n * [ThreeComponentsSplitter](https://github.com/JetBrains/intellij-community/blob/58dbd93e9ea527987466072fa0bfbf70864cd35f/platform/platform-api/src/com/intellij/openapi/ui/ThreeComponentsSplitter.java#L40-L40)\n * `firstView` and `lastView` are optional, and if not provided, the corresponding resizer is not rendered.\n * innerView is supposed to fill the remaining space, while firstView and lastView have specific sizes.\n * size changes in a resize interaction is not reported and is handled by local state in the component. That's\n * to prevent frequent state updates in a higher level which can be expensive. It's also based on this assumption\n * that in the usage side there is no need for any control over resizing or even knowing the intermediate state.\n * Maybe a minSize and maxSize would be the extent of the required control over resizing. But anyway, this model\n * of keeping the size as a local state during a resize session is something that can be changed if needed.\n *\n * Features:\n * - Relative sizing (fraction of the container)\n * - Default size by content\n * - Change handling only when resize is done.\n *\n * TODO: max and min size not implemented\n * TODO: add support for uncontrolled version\n */\nexport const ThreeViewSplitter: React.FC<ThreeViewSplitterProps> = ({\n  orientation = \"horizontal\",\n  firstView,\n  firstSize,\n  lastView,\n  lastSize,\n  onFirstResize,\n  onLastResize,\n  resizerProps: resizerPropsOverrides = {},\n  innerView,\n  firstViewMinSize,\n  lastViewMinSize,\n  innerViewMinSize,\n  ...containerProps\n}: ThreeViewSplitterProps): React.ReactElement => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const firstViewRef = useRef<HTMLDivElement>(null);\n  const lastViewRef = useRef<HTMLDivElement>(null);\n  const [firstSizeState, setFirstSizeState] = useState<number | null>(null);\n  const [lastSizeState, setLastSizeState] = useState<number | null>(null);\n  const theme = useTheme() as Theme;\n\n  const value = <T1, T2>(horizontalValue: T1, verticalValue: T2) =>\n    orientation === \"horizontal\" ? horizontalValue : verticalValue;\n\n  const FirstResizer: React.ComponentType<ResizerProps> = value(\n    RightResizer,\n    BottomResizer\n  );\n  const SecondResizer: React.ComponentType<ResizerProps> = value(\n    LeftResizer,\n    TopResizer\n  );\n  const sizeStyleProp = value(\"width\", \"height\");\n  const minSizeStyleProp = value(\"minWidth\", \"minHeight\");\n\n  const resizerProps: ThreeViewSplitterProps[\"resizerProps\"] = {\n    background: theme.commonColors.contrastBorder,\n    size: 1,\n    ...resizerPropsOverrides,\n  };\n\n  const isFractionSize = (size: number) => size < 1;\n\n  const normalizeSize = (\n    size: number | undefined | null\n  ): CSSProperties[\"width\" | \"height\"] =>\n    size != null\n      ? isFractionSize(size)\n        ? `${size * 100}%`\n        : Math.round(size)\n      : undefined;\n\n  const getSize = (elem: HTMLElement): number =>\n    value(elem.offsetWidth, elem.offsetHeight);\n\n  const getNewSize = (currentSize: number, newSize: number) => {\n    if (currentSize != null && isFractionSize(currentSize)) {\n      if (!containerRef.current) {\n        throw new Error(\n          \"ThreeViewSplitter: Could not locate container to calculate fraction size\"\n        );\n      }\n      const containerSize = value(\n        containerRef.current.offsetWidth,\n        containerRef.current.offsetHeight\n      );\n      const newFractionSize = newSize / containerSize;\n      return newFractionSize < 1 ? newFractionSize : currentSize;\n    } else {\n      return Math.max(newSize, 1);\n    }\n  };\n\n  const getActualSize = (viewElem: HTMLElement | null): number | null => {\n    if (!containerRef.current || !viewElem) {\n      return null;\n    }\n    const actualSize = getSize(viewElem);\n    if (viewElem.style[sizeStyleProp]?.includes(\"%\")) {\n      return actualSize / getSize(containerRef.current);\n    }\n    return actualSize;\n  };\n\n  const currentLastSize = normalizeSize(lastSizeState ?? lastSize);\n  const currentFirstSize = normalizeSize(firstSizeState ?? firstSize);\n  return (\n    <StyledSplitterContainer\n      ref={containerRef}\n      orientation={orientation}\n      {...containerProps}\n    >\n      {firstView && (\n        <>\n          <div\n            ref={firstViewRef}\n            style={{\n              [sizeStyleProp]: currentFirstSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (lastSizeState !== null ? currentFirstSize : undefined) ??\n                firstViewMinSize,\n            }}\n          >\n            {firstView}\n          </div>\n          <FirstResizer\n            onResizeStarted={() => {\n              const size = firstViewRef.current\n                ? getSize(firstViewRef.current)\n                : 0;\n              setFirstSizeState(firstSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (firstSizeState != null) {\n                setFirstSizeState(getNewSize(firstSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(firstViewRef.current);\n              if (actualSize !== null) {\n                onFirstResize?.(actualSize);\n              }\n              setFirstSizeState(null);\n            }}\n            {...resizerProps}\n          />\n        </>\n      )}\n      {innerView && (\n        <StyledSplitterInnerView\n          style={{\n            [minSizeStyleProp]: innerViewMinSize,\n          }}\n        >\n          {innerView}\n        </StyledSplitterInnerView>\n      )}\n      {lastView && (\n        <>\n          <SecondResizer\n            onResizeStarted={() => {\n              const size = getSize(lastViewRef.current!);\n              setLastSizeState(lastSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (lastSizeState != null) {\n                setLastSizeState(getNewSize(lastSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(lastViewRef.current);\n              if (actualSize !== null) {\n                onLastResize?.(actualSize);\n              }\n              setLastSizeState(null);\n            }}\n            {...resizerProps}\n          />\n          <div\n            ref={lastViewRef}\n            style={{\n              [sizeStyleProp]: currentLastSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (firstSizeState !== null ? currentLastSize : undefined) ??\n                lastViewMinSize,\n            }}\n          >\n            {lastView}\n          </div>\n        </>\n      )}\n    </StyledSplitterContainer>\n  );\n};\n","import { isMac } from \"@react-aria/utils\";\nimport React, { HTMLProps, useRef } from \"react\";\nimport { css } from \"styled-components\";\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { Theme } from \"../Theme/Theme\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { Overlay } from \"@react-aria/overlays\";\n\nconst FLOAT_WINDOW_MIN_WIDTH = 100;\nconst FLOAT_WINDOW_MIN_HEIGHT = 40; // in Intellij Platform it's zero but there is window frame which doesn't exist here\n\nconst StyledFloatView = styled.div`\n  box-sizing: border-box;\n  position: fixed;\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  // border color doesn't seem to be correct and needs more investigation. might be even os-specific and outside\n  // theme colors.\n  border: ${({ theme }) => `1px solid ${theme.color(\"Component.borderColor\")}`};\n  ${WINDOW_SHADOW};\n  ${isMac() &&\n  css<{ theme: Theme }>`\n    border-radius: 8px;\n  `}\n  z-index: 2;\n`;\n\n/**\n * Container for tool windows in float view mode. It handles some visual aspects like the border and shadow, as well as\n * UI interactions for changing the floatingBound of the tool window.\n */\nexport const FloatView: React.FC<\n  {\n    state: FloatWindowState;\n    onBoundsChange: (bounds: WindowBounds) => void;\n  } & Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">\n> = ({ children, state: { bounds }, onBoundsChange, ...otherProps }) => {\n  const ref = useRef(null);\n  const { bounds: boundsStyle, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      bounds,\n      onBoundsChange,\n    });\n\n  return (\n    <Overlay>\n      <StyledFloatView\n        {...otherProps}\n        ref={ref}\n        style={{ ...otherProps.style, ...boundsStyle }}\n      >\n        <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n          <OverlayResizeHandles\n            minWidth={FLOAT_WINDOW_MIN_WIDTH}\n            minHeight={FLOAT_WINDOW_MIN_HEIGHT}\n          />\n          {children}\n        </OverlayInteractionHandler>\n      </StyledFloatView>\n    </Overlay>\n  );\n};\n","import { move } from \"ramda\";\nimport React, { HTMLProps, Key, useState } from \"react\";\nimport { FloatView } from \"./FloatView\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\n\n// NOTE: useStackedLayersState and useStackedLayers are generic but kept here since there is no other use case at the\n// moment. They should be moved to their own file(s) when/if other use case came up.\n\ninterface StackedLayersState<T> {\n  /**\n   * Sorted list of items representing layers.\n   */\n  sorted: T[];\n  /**\n   * A function to be used when the layer should be brought to front, typically based on some UI interaction.\n   */\n  bringToFront: (index: number) => void;\n}\n\n/**\n * State management for a stacked list of layers with **bring to front** functionality.\n */\nfunction useStackedLayersState<T, K = React.Key>(\n  /**\n   * A list of arbitrary items representing stacked layers.\n   */\n  items: T[],\n  /**\n   * A function for converting each item into a key which consistently identifies each item, in subsequent renders.\n   * It's used to maintain current sorting state. Although it can be of any type, it's usually a string or number.\n   */\n  getKey: (item: T) => K\n): StackedLayersState<T> {\n  // Local state for now, but can easily change to controllable if needed.\n  const [sortedKeys, setSortedKeys] = useState<K[]>([]);\n  const sorted = items.sort(\n    (a, b) => sortedKeys.indexOf(getKey(a)) - sortedKeys.indexOf(getKey(b))\n  );\n  return {\n    sorted,\n    bringToFront: (index: number) => {\n      setSortedKeys(move(index, -1, sorted).map(getKey));\n    },\n  };\n}\n\n/**\n * Given the state of a stacked list of layers, returns DOM props to be applied to each layer for interaction-based\n * \"bring to front\" behaviour.\n */\nfunction useStackedLayers<T>(state: StackedLayersState<T>): {\n  layersProps: Array<HTMLProps<HTMLElement>>;\n} {\n  return {\n    layersProps: state.sorted.map((_, index) => ({\n      onFocus: () => {\n        state.bringToFront(index);\n      },\n    })),\n  };\n}\n\n/**\n * Renders float tool windows.\n * - handles resize and move actions for float windows.\n * - handles layering of float tool windows.\n */\nexport function FloatToolWindows({\n  floatWindows = [],\n  onBoundsChange,\n  renderToolWindow,\n}: {\n  floatWindows: FloatWindowState[] | undefined;\n  onBoundsChange: (key: Key, bounds: WindowBounds) => void;\n  renderToolWindow: (key: Key) => React.ReactNode;\n}) {\n  const stackedFloatWindows = useStackedLayersState(\n    floatWindows,\n    ({ key }) => key\n  );\n  const { layersProps } = useStackedLayers(stackedFloatWindows);\n  // sorted list is used to render layers. We could as well use z-index and always render with the same order, but\n  // it doesn't really matter as long as key is set.\n  return (\n    <>\n      {stackedFloatWindows.sorted.map((toolWindow, index) => (\n        <FloatView\n          key={toolWindow.key}\n          state={toolWindow}\n          {...layersProps[index]}\n          onBoundsChange={(bounds) => onBoundsChange(toolWindow.key, bounds)}\n        >\n          {renderToolWindow(toolWindow.key)}\n        </FloatView>\n      ))}\n    </>\n  );\n}\n","import React, {\n  Key,\n  MutableRefObject,\n  RefObject,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"../utils/useLatest\";\nimport { DropPosition } from \"./createGetDropPosition\";\nimport { UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor } from \"./utils\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\ntype StripeLocation<T extends unknown> = {\n  index: number;\n  anchor: Anchor;\n  isSplit: boolean;\n};\ntype MovableStripeProps<T> = {\n  stripeElRef: React.RefObject<HTMLElement>;\n  getKey: (item: T) => Key;\n  anchor: Anchor;\n  mainItems: T[];\n  splitItems: T[];\n  createGetDropPosition: (\n    key: Key\n  ) => (draggedRect: Rect) => DropPosition | null;\n};\n\ntype MovableToolWindowStripeContextType<T> = {\n  addStripe: <T>(\n    id: string,\n    propsRef: MutableRefObject<MovableStripeProps<T>>\n  ) => () => void;\n  startMove: (id: string, args: { from: Rect; key: Key }) => void;\n  move: (args: { to: Rect }) => void;\n  endMove: () => void;\n  dropPosition: null | { id: string; dropPosition: DropPosition };\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n};\n\nexport type MovableToolWindowStripeProviderProps<T = unknown> = {\n  children: React.ReactNode;\n  onMove: (args: { from: StripeLocation<T>; to: StripeLocation<T> }) => void;\n};\n\nconst MovableToolWindowStripeContext =\n  React.createContext<MovableToolWindowStripeContextType<any> | null>(null);\n\n/**\n * A wrapper component to render around `ToolWindowStripe`s to make their button movable. Stripe buttons then become\n * draggable and can be moved either within the same `ToolWindowStripe` or across different ones.\n * @param onMove: called when a stripe button is moved from one anchor to another.\n * @param children: child element tree, containing one or more ToolWindowStripe elements. No need to be direct children.\n */\nexport const MovableToolWindowStripeProvider = <T extends unknown>({\n  onMove,\n  children,\n}: MovableToolWindowStripeProviderProps<T>) => {\n  const stripes = useRef<{\n    [id: string]: RefObject<MovableStripeProps<T>>;\n  }>({});\n  const [draggingRect, setDraggingRect] = useState<Rect | null>(null);\n  const [draggingKey, setDraggingKey] = useState<Key | null>(null);\n  const [dropPosition, setDropPosition] = useState<{\n    id: string;\n    dropPosition: DropPosition;\n  } | null>(null);\n  const getDropPositionRef = useRef<\n    (to: Rect) => {\n      id: string;\n      dropPosition: DropPosition;\n    } | null\n  >(() => null);\n  const moveStartLocationRef = useRef<null | {\n    id: string;\n    index: number;\n    anchor: Anchor;\n    isSplit: boolean;\n  }>(null);\n\n  const contextValue = useMemo(\n    (): MovableToolWindowStripeContextType<T> => ({\n      addStripe: (id, propsRef) => {\n        if (stripes.current[id]) {\n          console.error(`multiple stripes with the same id \"${id}`);\n        }\n        // @ts-expect-error\n        stripes.current[id] = propsRef;\n        return () => {\n          delete stripes.current[id];\n        };\n      },\n      startMove: (id, { from, key }) => {\n        const stripe = stripes.current[id]?.current;\n        if (!stripe) {\n          return;\n        }\n        const { stripeElRef } = stripe;\n        const stripeElement = stripeElRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n\n        // Running the following two state setters immediately affect the layout\n        // in a way that is necessary for drop position calculation, so the order\n        // is important\n        setDraggingRect(getItemRect(key).toJSON());\n        setDraggingKey(key);\n\n        const indexInMain = stripe.mainItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        const indexInSplit = stripe.splitItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        moveStartLocationRef.current = {\n          id,\n          anchor: stripe.anchor,\n          index: indexInMain > -1 ? indexInMain : indexInSplit,\n          isSplit: indexInSplit > -1,\n        };\n\n        const dropPositionGetters = Object.entries(stripes.current).map(\n          ([id, stripe]) =>\n            [id, stripe.current!.createGetDropPosition(key)] as const\n        );\n        const getDropPosition = (draggedRect: Rect) => {\n          for (const [id, getDropPosition] of dropPositionGetters) {\n            const dropPosition = getDropPosition(draggedRect);\n            if (dropPosition) {\n              return {\n                id,\n                dropPosition,\n              };\n            }\n          }\n          return null;\n        };\n\n        setDropPosition(getDropPosition(from));\n\n        getDropPositionRef.current = getDropPosition;\n      },\n      move: ({ to }) => {\n        setDropPosition(getDropPositionRef.current(to));\n      },\n      endMove: () => {\n        if (dropPosition && draggingKey) {\n          onMove({\n            from: moveStartLocationRef.current!,\n            to: {\n              anchor: dropPosition.id as Anchor /*FIXME*/,\n              index: dropPosition.dropPosition.index,\n              isSplit: dropPosition.dropPosition.split,\n            },\n          });\n        }\n        setDraggingKey(null);\n        setDropPosition(null);\n        setDraggingRect(null);\n      },\n      dropPosition,\n      draggingRect,\n      draggingKey,\n    }),\n    [dropPosition, draggingKey, draggingRect]\n  );\n\n  return (\n    <MovableToolWindowStripeContext.Provider value={contextValue}>\n      {children}\n    </MovableToolWindowStripeContext.Provider>\n  );\n};\n\nexport function useMovableStripeButtons<T>(props: MovableStripeProps<T>) {\n  // Seems reasonable to assume anchor is unique. Also current onMove signature is coupled with anchor, not a more generic id.\n  const id = props.anchor;\n  const context = useContext(MovableToolWindowStripeContext);\n  const latestPropsRef = useLatest(props);\n  useEffect(() => {\n    if (context) {\n      return context.addStripe(id, latestPropsRef);\n    }\n  }, [context, id]);\n\n  const getProps = (\n    key: Key\n  ): Pick<\n    Required<UseElementMoveOptions<unknown>>,\n    \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n  > & { moveDisabled: boolean } => ({\n    moveDisabled: !context,\n    onMoveStart: ({ from }) => {\n      context?.startMove?.(id, { from, key });\n    },\n    onMove: ({ to }) => {\n      context?.move({ to });\n    },\n    onMoveEnd: () => {\n      context?.endMove();\n    },\n  });\n  return {\n    getProps,\n    draggingRect: context?.draggingRect ?? null,\n    dropPosition:\n      context?.dropPosition?.id === id\n        ? context?.dropPosition.dropPosition\n        : null,\n    draggingKey: context?.draggingKey ?? null,\n  };\n}\n","import { styled } from \"../styled\";\nimport { css } from \"styled-components\";\n\nconst TopStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: ts;\n`;\nconst BottomStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: bs;\n`;\nconst LeftStripe = styled.div`\n  grid-area: ls;\n`;\nconst RightStripe = styled.div`\n  grid-area: rs;\n`;\nconst InnerView = styled.div`\n  grid-area: main;\n  min-height: 0; // necessary to prevent overflow;\n  position: relative; // necessary for undock views which are absolute positioned\n  background: inherit;\n  min-width: 0; // very important for layout. If not set, resizing tool windows can cause weird scrollbar inside tool windows pane.\n`;\n\n/**\n * The container which renders top,bottom,left and right stripes with a centered content.\n * responsible only for the layout of the stripes and the centered content. layout doesn't\n * include the opened tool windows on different sides and is just about the stripes around\n * the center area.\n * It also supports toggling stripes visibility.\n */\nconst Shell = styled.div<{ hideStripes: boolean }>`\n  display: grid;\n  grid-template-columns: min-content auto min-content;\n  grid-template-rows: min-content auto min-content;\n  grid-template-areas:\n    \".   ts   .\"\n    \"ls main rs\"\n    \".   bs   .\";\n\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  ${({ hideStripes }) =>\n    hideStripes &&\n    css`\n      ${TopStripe},\n      ${BottomStripe}, \n      ${LeftStripe}, \n      ${RightStripe} {\n        display: none;\n      }\n    `}\n`;\n\nexport const StyledToolWindowOuterLayout = {\n  Shell,\n  TopStripe,\n  BottomStripe,\n  LeftStripe,\n  RightStripe,\n  InnerView,\n};\n","import { compose, filter, groupBy, map, pipe, prop, sortBy } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\nimport {\n  ToolWindowsState,\n  ToolWindowState,\n  ViewMode,\n} from \"./ToolWindowsState\";\n\ntype ToolWindowStateWithKey = { key: Key } & ToolWindowState;\n\nexport interface StripesState {\n  main: Key[];\n  split: Key[];\n  activeKeys: Key[];\n}\n\n/**\n * Represents UI state of the split view (aka secondary or side view) within a docked view at one of the four sides.\n */\ntype SideDockedSplitState = {\n  key: Key;\n  /**\n   * relative size of the split view inside a docked view. Note that this is intentionally a fraction size (0≤size<1),\n   * based on the expected behaviour. split views inside a docked view are not fixed sized and resizing the window\n   * affect their size. This is not the case for the docked views themselves inside the main layout, which have fixed\n   * size which is not affected by window resizing.\n   */\n  sizeFraction: number;\n};\n\n// A potential improvement for this and similar nullable types like SideDockedState.split might be to avoid null type\n// and have it like { open: false} | {open: true, ...relevantProps}\n// Not sure if it's really preferred in terms of usage in the react component.\nexport type SideDockedState = null | {\n  size: number;\n  mainKey: Key;\n  split: SideDockedSplitState | null;\n};\n\nexport type SideUnDockedState = null | {\n  size: number;\n  key: Key;\n};\n\nexport interface SideState {\n  docked: SideDockedState;\n  undocked: SideUnDockedState;\n  stripes: StripesState;\n}\n\nexport interface FloatWindowState {\n  key: Key;\n  bounds: Exclude<ToolWindowState[\"floatingBounds\"], undefined>;\n}\n\n/**\n * Derived from ToolWindowsState, it represents the same information in a away that is suitable for ToolWindows\n * component to render the layout.\n */\nexport interface ToolWindowsLayoutState {\n  left: SideState;\n  top: SideState;\n  right: SideState;\n  bottom: SideState;\n  floatWindows: Array<FloatWindowState>;\n  windows: Array<FloatWindowState>;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nconst getSizeInAnchor = (containerSize: ContainerSize, anchor: Anchor) =>\n  containerSize[isHorizontalToolWindow(anchor) ? \"height\" : \"width\"];\n\nconst mapToKey = map<ToolWindowStateWithKey, Key>(prop(\"key\"));\nconst sortAndMapToKey = compose(\n  mapToKey,\n  sortBy(({ order }: ToolWindowStateWithKey) => order)\n);\nconst filterMains = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => !isSplit\n);\nconst getMains = compose(sortAndMapToKey, filterMains);\nconst filterSplits = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => isSplit\n);\nconst filterVisible = (expectedViewMode: ViewMode | ViewMode[] = []) =>\n  filter<ToolWindowStateWithKey, \"array\">(\n    ({ viewMode, isVisible }: ToolWindowStateWithKey) =>\n      isVisible &&\n      ([] as ViewMode[]).concat(expectedViewMode).includes(viewMode)\n  );\nconst getSplits = compose(sortAndMapToKey, filterSplits);\n\nconst filterVisibleDocked = filterVisible([\"docked_unpinned\", \"docked_pinned\"]);\nconst filterVisibleUnDocked = filterVisible(\"undock\");\n\nconst getDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideDockedState => {\n  const docks = filterVisibleDocked(toolWindows);\n  const mains = filterMains(docks);\n  const splits = filterSplits(docks);\n  if (mains.length > 1 || splits.length > 1) {\n    throw new Error(\n      \"More than one visible docked window in a side is not possible\"\n    );\n  }\n  if (mains[0] || splits[0]) {\n    const weight = mains[0]?.weight || splits[0]?.weight;\n    return {\n      mainKey: mains[0]?.key || splits[0]?.key,\n      split:\n        mains[0]?.key && splits[0]?.key\n          ? {\n              key: splits[0].key,\n              sizeFraction: mains[0].weight\n                ? 1 - mains[0].sideWeight\n                : splits[0].sideWeight,\n            }\n          : null,\n      size: weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  return null;\n};\n\nconst getUnDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideUnDockedState => {\n  const windows = filterVisibleUnDocked(toolWindows);\n  if (windows.length === 1) {\n    return {\n      key: windows[0].key,\n      size: windows[0].weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  if (windows.length === 0) {\n    return null;\n  }\n  throw new Error(\n    \"More than one visible undocked window in a side is not possible\"\n  );\n};\n\nconst getSideState = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideState => ({\n  stripes: {\n    main: getMains(toolWindows),\n    split: getSplits(toolWindows),\n    activeKeys: mapToKey(toolWindows.filter(({ isVisible }) => isVisible)),\n  },\n  undocked: getUnDocked(anchor, containerSize, toolWindows),\n  docked: getDocked(anchor, containerSize, toolWindows),\n});\n\nconst DEFAULT_HEIGHT = 300;\nconst DEFAULT_WIDTH = 400;\nconst getFloatWindowState =\n  (containerSize: ContainerSize) =>\n  ({\n    floatingBounds: bounds = {\n      top: containerSize.height / 2 - DEFAULT_HEIGHT / 2,\n      left: containerSize.width / 2 - DEFAULT_WIDTH / 2,\n      height: DEFAULT_HEIGHT,\n      width: DEFAULT_WIDTH,\n    },\n    key,\n  }: ToolWindowStateWithKey): FloatWindowState => ({ bounds, key });\n\nconst getFloatWindowsState = (\n  viewMode: \"float\" | \"window\",\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n) =>\n  pipe(\n    filterVisible(viewMode),\n    map<ToolWindowStateWithKey, FloatWindowState>(\n      getFloatWindowState(containerSize)\n    )\n  )(toolWindows);\n\nexport function getToolWindowsLayoutState(\n  state: Readonly<ToolWindowsState>,\n  containerSize: ContainerSize,\n  /**\n   * list of valid window ids. If state contains window ids that are not included here, they will be excluded in\n   * the returned state object.\n   */\n  windowIds: string[] = Object.keys(state.windows)\n): ToolWindowsLayoutState {\n  const toolWindows = Object.keys(state.windows)\n    .filter(\n      (key) => windowIds.includes(key) && !state.removedFromSideBarIds.has(key)\n    )\n    .map((key) => ({\n      ...state.windows[key],\n      key,\n    }));\n  const {\n    top = [],\n    bottom = [],\n    left = [],\n    right = [],\n  } = groupBy(({ anchor }) => anchor, toolWindows);\n  return {\n    left: getSideState(\"left\", containerSize, left),\n    top: getSideState(\"top\", containerSize, top),\n    right: getSideState(\"right\", containerSize, right),\n    bottom: getSideState(\"bottom\", containerSize, bottom),\n    windows: getFloatWindowsState(\"window\", containerSize, toolWindows),\n    floatWindows: getFloatWindowsState(\"float\", containerSize, toolWindows),\n  };\n}\n","import { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { Key } from \"react\";\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface DropPosition {\n  index: number;\n  split: boolean;\n\n  relative?: {\n    placement: \"before\" | \"after\";\n    key: Key;\n  };\n}\n\n/**\n * TODO: Add a few words about what this function do.\n */\nexport const createGetDropPosition = <T extends any>({\n  anchor,\n  stripeElement,\n  splitItems,\n  mainItems,\n  getItemRect,\n  getKey,\n}: {\n  stripeElement: HTMLElement;\n  anchor: Anchor;\n  getItemRect: (key: Key) => Rect;\n  getKey: (key: T) => Key;\n  mainItems: T[];\n  splitItems: T[];\n}): ((draggedRect: Rect) => DropPosition | null) => {\n  // Note: It may be tempting to calculate stripe element boundaries just once\n  // here, since it's not supposed to change during a drag session, but it\n  // can change due to getting empty when the only button is being dragged out.\n  const getStripeRect = () => stripeElement.getBoundingClientRect();\n\n  const getCanDrop = (draggingRect: Rect) => {\n    const stripeRect = getStripeRect();\n    return (\n      draggingRect.right > stripeRect.left - stripeRect.width &&\n      draggingRect.left < stripeRect.right &&\n      draggingRect.bottom > stripeRect.top - stripeRect.height &&\n      draggingRect.top < stripeRect.bottom\n    );\n  };\n\n  const start = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.left : rect.top;\n  const end = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.right : rect.bottom;\n\n  const getKeyToOffsets = (items: T[]) => {\n    const keyToOffsets: Record<Key, { start: number; end: number }> = {};\n    items.forEach((item) => {\n      const key = getKey(item);\n      const boundingRect = getItemRect(key);\n      keyToOffsets[key] = {\n        start: start(boundingRect),\n        end: end(boundingRect),\n      };\n    });\n    return keyToOffsets;\n  };\n\n  const getDropPositions = (\n    items: T[],\n    split = false\n    // FIXME: score is a bad name. it's quite the opposite! the less means the higher score.\n  ): Array<DropPosition & { score: (rect: Rect) => number }> => {\n    const getRef = split ? end : start;\n    if (items.length === 0) {\n      // if the section is empty, we should still allow adding to it.\n      return [\n        {\n          index: 0,\n          split,\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - getRef(getStripeRect())),\n        },\n      ];\n    }\n    return items.flatMap((item, index) => {\n      const key = getKey(item);\n      return [\n        {\n          index,\n          split,\n          relative: { key, placement: \"before\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].start),\n        },\n        {\n          index: index + 1,\n          split,\n          relative: { key, placement: \"after\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].end),\n        },\n      ];\n    });\n  };\n\n  const keyToOffsets = getKeyToOffsets([...mainItems, ...splitItems]);\n\n  const dropPositions = [\n    ...getDropPositions(mainItems),\n    ...getDropPositions(splitItems, true),\n  ];\n\n  let lastDropPosition: DropPosition | null = null;\n  return (draggingRect: Rect) => {\n    if (!getCanDrop(draggingRect)) {\n      return null;\n    }\n    const result = dropPositions.reduce(\n      (bestMatch, candidate) => {\n        const score = candidate.score(draggingRect);\n        if (!bestMatch || score < bestMatch.score) {\n          return {\n            ...candidate,\n            score,\n          };\n        }\n        return bestMatch;\n      },\n      null as\n        | null\n        | (DropPosition & {\n            score: number;\n          })\n    );\n\n    if (!result) {\n      return null;\n    }\n    if (\n      result.split !== lastDropPosition?.split ||\n      result.index !== lastDropPosition?.index\n    ) {\n      lastDropPosition = result;\n    }\n    return lastDropPosition;\n  };\n};\n","import { StyledIconWrapper } from \"../Icon/StyledIconWrapper\";\nimport { styled } from \"../styled\";\nimport React from \"react\";\nimport { css } from \"styled-components\";\nimport { Anchor } from \"./utils\";\n\nexport interface StyledToolWindowStripeButtonProps {\n  anchor: Anchor;\n  active?: boolean;\n}\n\nexport const STRIPE_BUTTON_CROSS_PADDING = 2.5;\nexport const STRIPE_BUTTON_LINE_HEIGHT = \"1rem\";\n\nconst anchorStyles = ({ anchor }: { anchor: Anchor }) => {\n  const orientation =\n    anchor === \"left\" || anchor === \"right\" ? \"vertical\" : \"horizontal\";\n\n  return orientation === \"horizontal\"\n    ? css`\n        padding: ${STRIPE_BUTTON_CROSS_PADDING}px 10px;\n      `\n    : css`\n        padding: 10px ${STRIPE_BUTTON_CROSS_PADDING}px;\n        writing-mode: vertical-lr;\n        // writing-mode: sideways-lr is not supported anywhere other than FF, so, we need to rotate\n        transform: ${anchor === \"left\" ? \"rotateZ(180deg)\" : undefined};\n\n        // icons are not rotated like text in Intellij Platform implementation. It kind of makes sense.\n        ${StyledIconWrapper} {\n          transform: rotate(180deg);\n        }\n      `;\n};\n\nexport const StyledToolWindowStripeButton = styled.span<StyledToolWindowStripeButtonProps>`\n  box-sizing: border-box;\n  display: flex; // to allow icon and text alignment by default;\n  align-items: center;\n  cursor: default;\n  user-select: none;\n  overflow: hidden;\n  direction: ltr;\n  flex-shrink: 0;\n  font-size: 0.7rem;\n  line-height: ${STRIPE_BUTTON_LINE_HEIGHT}; // absolute value seems to be problematic when the base font size is changed\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedForeground\",\n          theme.dark ? \"rgb(255,255,255)\" : \"rgb(0,0,0)\"\n        )\n      : theme.color(\"*.foreground\")};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedBackground\",\n          theme.dark ? \"rgba(15,15,15,.332)\" : \"rgba(85,85,85,.332)\"\n        )\n      : undefined};\n\n  ${anchorStyles}\n  ${({ active }) =>\n    !active &&\n    css`\n      &:hover {\n        background: ${({ theme }) =>\n          theme.color(\n            \"ToolWindow.Button.hoverBackground\",\n            theme.dark ? \"rgba(15,15,15,.156)\" : \"rgba(85,85,85,.156)\"\n          )};\n      }\n    `};\n`;\n","import {\n  STRIPE_BUTTON_CROSS_PADDING,\n  STRIPE_BUTTON_LINE_HEIGHT,\n  StyledToolWindowStripeButton,\n} from \"./StyledToolWindowStripeButton\";\nimport { Anchor, isHorizontalToolWindow, theOtherSide } from \"./utils\";\nimport { css } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { styled } from \"../styled\";\nimport { Color } from \"../Theme/Color\";\n\nconst minHeight = `calc(${STRIPE_BUTTON_LINE_HEIGHT} + ${\n  2 * STRIPE_BUTTON_CROSS_PADDING + 1 /*border*/\n}px)`;\n\nconst anchorStyles = ({\n  anchor,\n  preventCollapse,\n}: StyledToolWindowStripeProps) =>\n  isHorizontalToolWindow(anchor)\n    ? css`\n        flex-direction: row;\n        width: 100%;\n        min-height: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          height: 1.25rem;\n        }\n      `\n    : css`\n        flex-direction: column;\n        height: 100%;\n        min-width: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          width: 1.25rem;\n        }\n      `;\nconst borderStyle = ({ anchor, theme }: { anchor: Anchor; theme: Theme }) =>\n  css`border-${theOtherSide(anchor)}: 1px solid ${\n    theme.commonColors.contrastBorder\n  }`;\n\nexport interface StyledToolWindowStripeProps {\n  anchor: Anchor;\n  highlighted?: boolean;\n  preventCollapse?: boolean;\n}\n\nexport const StyledToolWindowStripe = styled.div<StyledToolWindowStripeProps>`\n  box-sizing: border-box;\n  background: ${({ theme, highlighted }) =>\n    highlighted\n      ? Color.brighter(theme.commonColors.panelBackground)\n      : theme.commonColors.panelBackground};\n  display: inline-flex;\n  overflow: hidden;\n  ${borderStyle};\n  ${anchorStyles}\n`;\n\nexport const StyledSpacer = styled.div`\n  flex: 1;\n`;\n","import { RefObject } from \"react\";\nimport {\n  useMove,\n  UseMoveOptions,\n  XY,\n} from \"../utils/interaction-utils/useMove\";\nimport { findEffectiveBackgroundColor } from \"./findEffectiveBackgroundColor\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface UseElementMoveOptions<S>\n  extends Omit<UseMoveOptions<S>, \"onMoveStart\" | \"onMove\"> {\n  ref: RefObject<HTMLElement>;\n  /**\n   * if true a clone of the element is created and used as ghost.\n   * A function can be passed to customize the default ghost element or return a completely\n   * different one.\n   */\n  ghost?: boolean | ((defaultGhost: HTMLElement) => HTMLElement);\n\n  onMoveStart: (args: { from: Rect }) => S;\n  onMove: (args: { from: Rect; to: Rect; movement: XY; startState: S }) => void;\n}\n\n/**\n * Provides necessary event handling props to be applied on an element to make it movable.\n * It's implemented on top of {@link useMove}. The differences are:\n * - The signature of `onMoveStart`, `onMove` and `onMoveEnd` are changed to pass\n *   {@link Rect} instead of {@link XY}.\n * - rendering a ghost element.\n *\n * ## A note about ghost:\n * There is no easy way to create a snapshot image of an html element. Native drag and drop API\n * supports [setting drag\n * image](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage) but we are\n * not using drag events mainly because of not being able to customize the offset after which drag\n * should start. See {@link UseMoveOptions#dragThreshold dragThreshold} for more details. There are\n * some libraries like html2canvas for creating an image from an html element, but they are very\n * big and using them doesn't make sense at all from a value/cost ratio perspective. There might be\n * some ways of implementing custom move threshold on top of native drag events. For example by\n * delaying the call to setDragImage, but it needs more investigation. Also, not sure if opacity of\n * the ghost is something you can control when using setDragImage.\n **/\nexport function useElementMove<S>({\n  ref,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  ghost: ghostOption,\n  ...otherOptions\n}: UseElementMoveOptions<S>) {\n  return useMove({\n    ...otherOptions,\n    onMoveStart: () => {\n      const element = ref.current;\n      let ghost: HTMLElement | null = null;\n      if (!element) {\n        throw new Error(\n          \"Movement started but ref value is null. Make sure the passed ref is applied on the same element that other props are.\"\n        );\n      }\n      const updateGhostPosition = (rect: Rect) => {\n        if (ghost) {\n          ghost.style.left = `${rect.left}px`;\n          ghost.style.top = `${rect.top}px`;\n        }\n      };\n      const from: Rect = element.getBoundingClientRect();\n      if (ghostOption) {\n        const defaultGhost = createDefaultGhost(element);\n        ghost =\n          typeof ghostOption === \"function\"\n            ? ghostOption(defaultGhost) || defaultGhost\n            : defaultGhost;\n        ghost.style.position = \"fixed\";\n        document.body.append(ghost);\n        updateGhostPosition(from);\n      }\n      return {\n        ghost,\n        from,\n        updateGhostPosition,\n        startState: onMoveStart({ from }),\n      };\n    },\n    onMove: ({\n      movement,\n      startState: { from, updateGhostPosition, startState },\n    }) => {\n      const to: Rect = {\n        left: from.left + movement.x,\n        right: from.right + movement.x,\n        top: from.top + movement.y,\n        bottom: from.bottom + movement.y,\n        height: from.height,\n        width: from.width,\n      };\n      updateGhostPosition(to);\n      onMove({ from, to, movement, startState });\n    },\n    onMoveEnd: ({ startState: { ghost, startState } }) => {\n      ghost?.remove();\n      onMoveEnd?.({ startState });\n    },\n  });\n}\n\nfunction createDefaultGhost(element: HTMLElement) {\n  const ghost = element.cloneNode(true) as HTMLElement;\n  ghost.style.backgroundColor = findEffectiveBackgroundColor(element);\n  return ghost;\n}\n","import { Color } from \"../Theme/Color\";\n\n/**\n * Computes the effective background color of the element by blending translucent backgrounds of\n * the elements ancestors. It traverses up the parents, until reaches a solid background color.\n * all translucent backgrounds in between are blended with that solid color, with respect to their\n * transparency. It's meant to be used only for the simple cases where an element doesn't overflow\n * the parents. Obviously, in other cases there won't be one single effective background color\n * for the element.\n */\nexport function findEffectiveBackgroundColor(element: HTMLElement): string {\n  let elem: HTMLElement | null = element;\n  let colors: Color[] = [];\n  while (elem != null) {\n    const computedBackground = getComputedStyle(elem).backgroundColor;\n    if (computedBackground) {\n      const color = new Color(computedBackground);\n      colors.unshift(color);\n      if (color.a === 255) {\n        // if we've reached a solid color, we don't need to continue traversing ancestors\n        break;\n      }\n    }\n    elem = elem.parentElement;\n  }\n  return (\n    colors\n      .reduce<Color | null>((resultColor, nextColor) => {\n        return resultColor ? resultColor.blend(nextColor) : nextColor;\n      }, null)\n      ?.toString() || \"\"\n  );\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport React, { CSSProperties, HTMLAttributes, Key, useRef } from \"react\";\nimport { createGetDropPosition, DropPosition } from \"./createGetDropPosition\";\nimport { useMovableStripeButtons } from \"./MovableToolWindowStripeProvider\";\nimport { StyledSpacer, StyledToolWindowStripe } from \"./StyledToolWindowStripe\";\nimport { StyledToolWindowStripeButton } from \"./StyledToolWindowStripeButton\";\nimport { useElementMove, UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\ninterface ToolWindowStripeProps<T> {\n  anchor: Anchor;\n  items: T[];\n  splitItems?: T[];\n  getKey: (item: T) => Key;\n  renderItem: (item: T) => React.ReactNode;\n  selectedKeys?: Key[];\n  onItemPress?: (key: Key) => void;\n}\n\n/**\n * TODO: refactor to remove the key based interface.\n */\nexport function ToolWindowStripe<T>({\n  anchor,\n  items: mainItems,\n  renderItem: render,\n  splitItems = [],\n  selectedKeys = [],\n  onItemPress,\n  getKey,\n}: ToolWindowStripeProps<T>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { getProps, draggingRect, draggingKey, dropPosition } =\n    useMovableStripeButtons({\n      stripeElRef: containerRef,\n      getKey,\n      anchor,\n      mainItems,\n      splitItems,\n      createGetDropPosition: (key: Key) => {\n        const isNotCurrentItem = (anItem: T) => getKey(anItem) !== key;\n        const stripeElement = containerRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n        return createGetDropPosition({\n          stripeElement: stripeElement,\n          mainItems: mainItems.filter(isNotCurrentItem),\n          splitItems: splitItems.filter(isNotCurrentItem),\n          getKey,\n          anchor,\n          getItemRect,\n        });\n      },\n    });\n\n  const highlighted =\n    dropPosition != null &&\n    draggingKey != null &&\n    [...mainItems, ...splitItems].every((item) => getKey(item) !== draggingKey);\n\n  const renderItem = (item: T) => {\n    const key = getKey(item);\n\n    return (\n      <ToolWindowStripeButton\n        anchor={anchor}\n        key={key}\n        data-key={key}\n        style={{\n          ...getStripeButtonStyles({\n            key,\n            dropPosition,\n            anchor,\n            draggingRect,\n            draggingKey,\n          }),\n        }}\n        {...getProps(key)}\n        active={selectedKeys.includes(key)}\n        onPress={() => onItemPress?.(key)}\n      >\n        {render(item)}\n      </ToolWindowStripeButton>\n    );\n  };\n  return (\n    <>\n      <StyledToolWindowStripe\n        anchor={anchor}\n        preventCollapse={Boolean(dropPosition)}\n        highlighted={highlighted}\n        ref={containerRef}\n      >\n        {mainItems.map(renderItem)}\n        <StyledSpacer />\n        {splitItems.map(renderItem)}\n      </StyledToolWindowStripe>\n    </>\n  );\n}\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nfunction getStripeButtonStyles({\n  anchor,\n  key,\n  dropPosition,\n  draggingRect,\n  draggingKey,\n}: {\n  anchor: Anchor;\n  key: Key;\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n  dropPosition: DropPosition | null;\n}) {\n  const styles: CSSProperties = {\n    // transition: \"margin 100ms\", // maybe only when drag is in progress, if unwanted transition at drop\n  };\n  if (dropPosition?.relative?.key === key && draggingRect) {\n    const marginValue = isHorizontalToolWindow(anchor)\n      ? draggingRect.width\n      : draggingRect.height;\n\n    if (isHorizontalToolWindow(anchor)) {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginLeft\"\n          : \"marginRight\"\n      ] = marginValue;\n    } else {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginTop\"\n          : \"marginBottom\"\n      ] = marginValue;\n    }\n  }\n  if (key === draggingKey) {\n    styles.display = \"none\";\n  }\n  return styles;\n}\n\nfunction ToolWindowStripeButton<T, S>({\n  children,\n  anchor,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  onPress,\n  moveDisabled,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  anchor: Anchor;\n  style: CSSProperties;\n  active: boolean;\n  onPress: () => void;\n  moveDisabled?: boolean;\n  onMoveStart: UseElementMoveOptions<S>[\"onMoveStart\"];\n  onMove: UseElementMoveOptions<S>[\"onMove\"];\n  onMoveEnd: UseElementMoveOptions<S>[\"onMoveEnd\"];\n}) {\n  const ref = useRef<HTMLElement>(null);\n\n  // for some reason, usePress and useMove (used in useElementMove) are not compatible.\n  // it seems onMouseDown in useMove is not called, even when handlers are merged by mergeProps.\n  // FIXME: fix compatibility of useMove and usePress, and switch to usePress({ onPress })\n  const { pressProps } = {\n    pressProps: {\n      onPointerUp: onPress,\n      onMouseDown: (e) => {\n        e.preventDefault();\n      },\n    } as HTMLAttributes<HTMLElement>,\n  }; //usePress({ onPress });\n  const props = useElementMove({\n    ref,\n    disabled: moveDisabled,\n    dragThreshold: 7,\n    ghost: true,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n  });\n\n  return (\n    <StyledToolWindowStripeButton\n      anchor={anchor}\n      {...mergeProps(otherProps, pressProps, props)}\n      ref={ref}\n    >\n      {children}\n    </StyledToolWindowStripeButton>\n  );\n}\n","import React from \"react\";\nimport { css } from \"styled-components\";\nimport { ResizableView } from \"../ResizableView\";\nimport { styled } from \"../styled\";\nimport { SideUnDockedState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nexport const StyledUndockSide = styled.div<{ anchor: Anchor }>`\n  position: absolute;\n  background: inherit;\n  z-index: 1;\n  ${({ anchor }) =>\n    isHorizontalToolWindow(anchor)\n      ? css`\n          left: 0;\n          right: 0;\n        `\n      : css`\n          top: 0;\n          bottom: 0;\n        `};\n  ${({ anchor }) =>\n    css`\n      ${anchor}: 0;\n    `};\n`;\n\nexport function UndockSide({\n  state,\n  anchor,\n  children,\n  onResize,\n}: {\n  state: Exclude<SideUnDockedState, null>;\n  anchor: Anchor;\n  children: React.ReactNode;\n  onResize: (size: number) => void;\n}) {\n  return (\n    state && (\n      <StyledUndockSide anchor={anchor}>\n        <ResizableView\n          orientation={\n            isHorizontalToolWindow(anchor) ? \"vertical\" : \"horizontal\"\n          }\n          resizerPlacement={\n            anchor === \"left\" || anchor === \"top\" ? \"after\" : \"before\"\n          }\n          size={state.size}\n          onResize={onResize}\n        >\n          {children}\n        </ResizableView>\n      </StyledUndockSide>\n    )\n  );\n}\n","import { indexBy } from \"ramda\";\nimport React, {\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n  Key,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nimport { ThreeViewSplitter } from \"../ThreeViewSplitter/ThreeViewSplitter\";\nimport { FocusScope } from \"../utils/FocusScope\";\nimport { FloatToolWindows } from \"./FloatToolWindows\";\nimport { MovableToolWindowStripeProvider } from \"./MovableToolWindowStripeProvider\";\nimport { StyledToolWindowOuterLayout } from \"./StyledToolWindowOuterLayout\";\nimport {\n  getToolWindowsLayoutState,\n  SideDockedState,\n  StripesState,\n  ToolWindowsLayoutState,\n} from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { ToolWindowsState } from \"./ToolWindowsState/ToolWindowsState\";\nimport { ToolWindowStateProvider } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { ToolWindowStripe } from \"./ToolWindowStripe\";\nimport { UndockSide } from \"./UndockSide\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { useOnFocusLost } from \"./useOnFocusLost\";\nimport { useInteractOutside } from \"@react-aria/interactions\";\n\ninterface ToolWindow {\n  id: string;\n  toolbarButton: React.ReactNode;\n  content: React.ReactNode;\n}\n\nexport interface ToolWindowsProps {\n  children: React.ReactNode;\n  windows: ToolWindow[];\n  toolWindowsState: Readonly<ToolWindowsState>;\n  onToolWindowStateChange: (newState: ToolWindowsState) => void;\n\n  /**\n   * Whether stripe buttons should be hidden or not.\n   * `hideToolStripes` UISettings in Intellij Platform\n   */\n  hideToolWindowBars?: boolean;\n\n  /**\n   *\n   * `wideScreenSupport` in UISettings in Intellij Platform\n   */\n  useWidescreenLayout?: boolean;\n\n  /**\n   * min width applied to the main content (children).\n   * @default 50\n   */\n  mainContentMinWidth?: number;\n\n  height?: CSSProperties[\"height\"];\n  minHeight?: CSSProperties[\"minHeight\"];\n  margin?: CSSProperties[\"margin\"];\n\n  /**\n   * props to be passed to the container element.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\">;\n}\n\nexport interface ToolWindowRefValue {\n  focus(key: Key): void;\n  hasFocus(key: Key): void;\n  focusLastActiveWindow(): void;\n  focusMainContent(): void;\n  changeState(\n    updater: (currentState: Readonly<ToolWindowsState>) => ToolWindowsState\n  ): void;\n}\n\n/**\n * @constructor\n *\n * Corresponding to ToolWindowPane in Intellij Platform\n *\n * Known issues:\n * - in Firefox and Safari, left and right toolbars are not properly shown. Seems like a nasty bug, since adding and\n * then removing some min-width: fit-content style fixes it.\n * - in the dock view of a side, open only a window from the split ones. then open a window from main ones.\n *   focus is not moved to the just opened window. The reason is we rely on autofocusing and because the React tree\n *   changes for both windows, even the split one which was open will be unmounted and mounted again, and since it's\n *   placed after the main one, and hence mounted later, it will get the focus again. This becomes a bigger issue\n *   if the main one is unpinned, because it immediately gets closed after opening.\n *   Possible solutions:\n *   - make sure the split one won't unmount and mount again in such scenario.\n *   - decouple focusing logic from mounting logic, and only focus windows somehow, when the `isVisible` is changed\n *     from false to true, not when mounted.\n * - related to previous issue: open a tool window in split section of a side. set view mode for a tool window in main\n *   section of the same side to docked_unpinned. try to open the unpinned one while the split one is open. it doesn't\n *   work.\n */\nexport const ToolWindows = React.forwardRef(function ToolWindows(\n  {\n    hideToolWindowBars = false,\n    useWidescreenLayout = false,\n    height = \"100%\",\n    minHeight = \"0\",\n    toolWindowsState,\n    onToolWindowStateChange,\n    windows,\n    children,\n    mainContentMinWidth = 50,\n    containerProps = {},\n  }: ToolWindowsProps,\n  ref: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const windowsById = indexBy(({ id }) => id, windows);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mainContentFocusScopeRef =\n    useRef<React.ComponentRef<typeof FocusScope>>(null);\n  const [layoutState, setLayoutState] = useState<ToolWindowsLayoutState>();\n  const windowFocusableRefs = useRef<{\n    [key: string]: React.RefObject<React.ComponentRef<typeof FocusScope>>;\n  }>({});\n\n  const latestRef = useLatest({ toolWindowsState, onToolWindowStateChange });\n\n  useLayoutEffect(() => {\n    const container = containerRef.current;\n    const _setLayoutState = () =>\n      setLayoutState(\n        getToolWindowsLayoutState(\n          toolWindowsState,\n          container!.getBoundingClientRect(),\n          windows.map(({ id }) => id)\n        )\n      );\n\n    // If container is rendered but has zero dimensions for any reason, we start observing size changes, until\n    // it's no longer collapsed. Note that we don't want to unconditionally observe resizes and update the layout state.\n    // because tool windows are not supposed to keep the fraction width as the window resizes. They are supposed to have\n    // a fixed width which is determined fraction-based, but only when the tool window is opened. In fact, updating the\n    // layout state, on each and every change to toolWindowsState is also not quite correct, as some state changes\n    // are unrelated and shouldn't cause a re-calculation of the size. FIXME: don't re-calculate fraction base sizes on\n    //  every state change.\n    if (container?.offsetWidth === 0 || container?.offsetHeight === 0) {\n      const observer = new ResizeObserver(([resize]) => {\n        if (resize.contentRect.width > 0 && resize.contentRect.height > 0) {\n          _setLayoutState();\n          observer.unobserve(container);\n        }\n      });\n      observer.observe(container);\n    }\n    _setLayoutState();\n  }, [toolWindowsState]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (key: Key) => {\n        windowFocusableRefs.current[key]?.current?.focus();\n      },\n      hasFocus: (key: Key) =>\n        document.activeElement?.closest(`[data-tool-window-id=\"${key}\"]`) !==\n        null,\n      focusLastActiveWindow: () => {\n        const { lastFocusedKey } = latestRef.current.toolWindowsState;\n        if (lastFocusedKey != null) {\n          if (\n            !latestRef.current.toolWindowsState.windows[lastFocusedKey]\n              .isVisible\n          ) {\n            latestRef.current.onToolWindowStateChange(\n              toolWindowsState.show(lastFocusedKey)\n            );\n          }\n          windowFocusableRefs.current[lastFocusedKey].current?.focus(true);\n        }\n      },\n      focusMainContent: () => {\n        mainContentFocusScopeRef.current?.focus();\n      },\n      changeState: (updater) => {\n        onToolWindowStateChange(updater(latestRef.current.toolWindowsState));\n      },\n    }),\n    []\n  );\n\n  const interactionOutsideRef = useRef(false);\n  useInteractOutside({\n    ref: containerRef,\n    onInteractOutsideStart: () => {\n      interactionOutsideRef.current = true;\n    },\n    onInteractOutside: () => {\n      interactionOutsideRef.current = false;\n    },\n  });\n\n  useOnFocusLost(({ focusReceivingElement }) => {\n    if (!focusReceivingElement && !interactionOutsideRef.current) {\n      mainContentFocusScopeRef.current?.focus();\n    }\n  }, containerRef);\n\n  // TODO: extract component candidate\n  const renderStripe = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: StripesState;\n  }) => (\n    <ToolWindowStripe\n      anchor={anchor}\n      items={state.main}\n      splitItems={state.split}\n      getKey={(item) => item}\n      renderItem={(item) => windowsById[item]?.toolbarButton}\n      onItemPress={(key) =>\n        onToolWindowStateChange(toolWindowsState.toggle(key))\n      }\n      selectedKeys={state.activeKeys}\n    />\n  );\n\n  const renderToolWindow = (key: Key) => {\n    if (!windowFocusableRefs.current[key]) {\n      windowFocusableRefs.current[key] = React.createRef();\n    }\n    return (\n      <div\n        style={{ all: \"unset\" }}\n        data-tool-window-id={key}\n        onFocus={() => {\n          onToolWindowStateChange(toolWindowsState.lastFocused(key));\n        }}\n      >\n        <FocusScope ref={windowFocusableRefs.current[key]}>\n          <ToolWindowStateProvider\n            id={key}\n            containerRef={containerRef}\n            mainContentFocusableRef={mainContentFocusScopeRef}\n            toolWindowsState={toolWindowsState}\n            onToolWindowStateChange={onToolWindowStateChange}\n          >\n            {windowsById[key]?.content}\n          </ToolWindowStateProvider>\n        </FocusScope>\n      </div>\n    );\n  };\n  // TODO: candidate for component extraction\n  const renderSideDockedView = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: SideDockedState;\n  }) => {\n    if (!state) {\n      return null;\n    }\n    return (\n      <ThreeViewSplitter\n        innerView={renderToolWindow(state.mainKey)}\n        innerViewMinSize={50}\n        lastView={state.split && renderToolWindow(state.split.key)}\n        lastSize={state.split?.sizeFraction}\n        onLastResize={(newSize) => {\n          onToolWindowStateChange(\n            toolWindowsState.resizeDockSplitView(anchor, newSize)\n          );\n        }}\n        orientation={isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\"}\n      />\n    );\n  };\n  const onDockResize = (anchor: Anchor) => (size: number) => {\n    const containerBounds = containerRef.current?.getBoundingClientRect();\n    // containerBounds should have value in normal course of events\n    if (containerBounds) {\n      onToolWindowStateChange(\n        toolWindowsState.resizeDock(anchor, size, containerBounds)\n      );\n    }\n  };\n  const getSplitViewProps = (\n    layoutState: ToolWindowsLayoutState,\n    orientation: \"horizontal\" | \"vertical\"\n  ) => {\n    const firstAnchor = orientation === \"horizontal\" ? \"left\" : \"top\";\n    const secondAnchor = orientation === \"horizontal\" ? \"right\" : \"bottom\";\n    return {\n      orientation,\n      firstView: renderSideDockedView({\n        anchor: firstAnchor,\n        state: layoutState[firstAnchor].docked,\n      }),\n      firstSize: layoutState[firstAnchor].docked?.size,\n      onFirstResize: onDockResize(firstAnchor),\n      lastView: renderSideDockedView({\n        anchor: secondAnchor,\n        state: layoutState[secondAnchor].docked,\n      }),\n      lastSize: layoutState[secondAnchor].docked?.size,\n      onLastResize: onDockResize(secondAnchor),\n    };\n  };\n  const renderInnerLayout = (layoutState: ToolWindowsLayoutState) => {\n    const horizontalSplitterProps = getSplitViewProps(\n      layoutState,\n      \"horizontal\"\n    );\n    const verticalSplitterProps = getSplitViewProps(layoutState, \"vertical\");\n\n    const [outerSplitterProps, innerSplitterProps] = useWidescreenLayout\n      ? [horizontalSplitterProps, verticalSplitterProps]\n      : [verticalSplitterProps, horizontalSplitterProps];\n\n    const undockLayers = ([\"left\", \"top\", \"right\", \"bottom\"] as const).map(\n      (anchor) => {\n        const state = layoutState[anchor].undocked;\n        return (\n          state && (\n            <UndockSide\n              key={anchor}\n              anchor={anchor}\n              state={state}\n              onResize={(size) => {\n                containerRef.current &&\n                  onToolWindowStateChange(\n                    toolWindowsState.resizeUndock(\n                      anchor,\n                      size,\n                      containerRef.current.getBoundingClientRect()\n                    )\n                  );\n              }}\n            >\n              {renderToolWindow(state.key)}\n            </UndockSide>\n          )\n        );\n      }\n    );\n\n    return (\n      <>\n        <MovableToolWindowStripeProvider\n          onMove={({ to, from }) => {\n            onToolWindowStateChange(\n              toolWindowsState.move(\n                layoutState[from.anchor].stripes[\n                  from.isSplit ? \"split\" : \"main\"\n                ][from.index],\n                { anchor: to.anchor, isSplit: to.isSplit },\n                to.index\n              )\n            );\n          }}\n        >\n          {/**\n           * ToolWindow bars, aka Stripes. Order of stripes is irrelevant for layout but relevant for\n           * priority when stripe buttons are moved across stripes.\n           * layout is handled by `StyledToolWindowOuterLayout`.\n           */}\n          <StyledToolWindowOuterLayout.LeftStripe>\n            {renderStripe({\n              anchor: \"left\",\n              state: layoutState[\"left\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.LeftStripe>\n          <StyledToolWindowOuterLayout.TopStripe>\n            {renderStripe({\n              anchor: \"top\",\n              state: layoutState[\"top\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.TopStripe>\n          <StyledToolWindowOuterLayout.RightStripe>\n            {renderStripe({\n              anchor: \"right\",\n              state: layoutState[\"right\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.RightStripe>\n          <StyledToolWindowOuterLayout.BottomStripe>\n            {renderStripe({\n              anchor: \"bottom\",\n              state: layoutState[\"bottom\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.BottomStripe>\n        </MovableToolWindowStripeProvider>\n        {/**\n         * The inner layout of the ToolWindow, including four tool windows and\n         * a main content in the center.\n         */}\n        <StyledToolWindowOuterLayout.InnerView>\n          <ThreeViewSplitter\n            {...outerSplitterProps}\n            innerView={\n              <ThreeViewSplitter\n                innerViewMinSize={mainContentMinWidth}\n                innerView={\n                  <FocusScope ref={mainContentFocusScopeRef}>\n                    {children}\n                  </FocusScope>\n                }\n                {...innerSplitterProps}\n              />\n            }\n          />\n          {undockLayers}\n          {\n            <FloatToolWindows\n              floatWindows={layoutState?.floatWindows}\n              renderToolWindow={renderToolWindow}\n              onBoundsChange={(key, bounds) =>\n                onToolWindowStateChange(\n                  toolWindowsState.setFloatingBound(key, bounds)\n                )\n              }\n            />\n          }\n        </StyledToolWindowOuterLayout.InnerView>\n      </>\n    );\n  };\n\n  return (\n    <StyledToolWindowOuterLayout.Shell\n      {...containerProps}\n      ref={containerRef}\n      /**\n       * Potential refactoring: hideStripes can also be handled by conditionally\n       * rendering tool window bars, instead of considering it as a feature of\n       * StyledToolWindowOuterLayout\n       **/\n      hideStripes={hideToolWindowBars}\n      style={{ height, minHeight, ...containerProps?.style }}\n    >\n      {layoutState && renderInnerLayout(layoutState)}\n    </StyledToolWindowOuterLayout.Shell>\n  );\n});\n","import { RefObject, useEffect } from \"react\";\n\n/**\n * Executes a callback function when focus is lost from the container element. i.e. when the currently focused element\n * was within the container and:\n * - The focus is going to an element outside the container, or\n * - The focus is about to get lost (i.e. go to `document.body`).\n *\n * Note: react-aria's `useFocusWithin` (and it's `onBlurWithin` option) can't be used, since (at least currently) it\n * doesn't cover the scenario where the focus is about to get lost due to the focused element getting unmounted.\n */\nexport function useOnFocusLost(\n  onFocusLost: (args: {\n    focusLosingElement: HTMLElement | null;\n    focusReceivingElement: Element | null;\n  }) => void,\n  containerRef: RefObject<HTMLElement>\n): void {\n  useEffect(() => {\n    const handleBodyFocus = (e: FocusEvent) => {\n      if (\n        e.target instanceof HTMLElement &&\n        containerRef.current?.contains(e.target) &&\n        (!e.relatedTarget || e.relatedTarget instanceof HTMLElement) &&\n        !containerRef.current?.contains(e.relatedTarget)\n      ) {\n        onFocusLost({\n          focusLosingElement: e.target,\n          focusReceivingElement: e.relatedTarget,\n        });\n      }\n    };\n    containerRef.current?.addEventListener(\"focusout\", handleBodyFocus);\n    return () => {\n      containerRef.current?.removeEventListener(\"focusout\", handleBodyFocus);\n    };\n  }, []);\n}\n","import React, { Key, RefObject, useContext, useMemo } from \"react\";\nimport { ToolWindowsProps } from \"../ToolWindows\";\nimport { ToolWindowState, ViewMode, WindowBounds } from \"./ToolWindowsState\";\nimport { Anchor } from \"../utils\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\n\ntype ToolWindowStateContextValue = {\n  state: Readonly<ToolWindowState>;\n  hide: () => void;\n  remove: () => void;\n  blur: () => void;\n  focusMainContent: () => void;\n  moveToSide: (args: { anchor: Anchor; isSplit: boolean }) => void;\n  changeViewMode: (viewMode: ViewMode) => void;\n  stretchWidth: (value: number) => void;\n  stretchHeight: (value: number) => void;\n  setFloatingBounds: (bounds: WindowBounds) => void;\n};\nconst ToolWindowStateContext =\n  React.createContext<ToolWindowStateContextValue | null>(null);\n\n/**\n * Used in a tool window's UI tree, to get access to the tool window state and actions for changing it.\n */\nexport const useToolWindowState = () => {\n  const context = useContext(ToolWindowStateContext);\n  if (!context) {\n    throw new Error(\n      \"useToolWindowContext is meant to be used inside a tool window.\"\n    );\n  }\n  return context;\n};\n\n/**\n * Used in ToolWindows to provide tool window state and necessary actions as a context, which will be accessible\n * within the tool window content tree, via {@link useToolWindowState}\n */\nexport const ToolWindowStateProvider: React.FC<\n  {\n    id: Key;\n    containerRef: RefObject<HTMLElement>;\n    mainContentFocusableRef: RefObject<{ focus: () => void }>;\n  } & Pick<ToolWindowsProps, \"toolWindowsState\" | \"onToolWindowStateChange\">\n> = ({\n  toolWindowsState,\n  containerRef,\n  mainContentFocusableRef,\n  onToolWindowStateChange,\n  id,\n  children,\n}) => {\n  const blur = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.blur(id));\n  });\n  const hide = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.hide(id));\n  });\n  const remove = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.removeFromSidebar(id));\n  });\n  const focusMainContent = useEventCallback(() => {\n    mainContentFocusableRef.current?.focus();\n  });\n  const moveToSide = useEventCallback(\n    (side: { anchor: Anchor; isSplit: boolean }) => {\n      onToolWindowStateChange(toolWindowsState.move(id, side));\n    }\n  );\n  const changeViewMode = useEventCallback((viewMode: ViewMode) => {\n    onToolWindowStateChange(toolWindowsState.changeViewMode(id, viewMode));\n  });\n  const stretchWidth = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchWidth(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const stretchHeight = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchHeight(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const setFloatingBounds = useEventCallback((bounds: WindowBounds) => {\n    onToolWindowStateChange(toolWindowsState.setFloatingBound(id, bounds));\n  });\n  const contextValue = useMemo((): ToolWindowStateContextValue => {\n    const state = toolWindowsState.windows[id];\n    return {\n      state,\n      hide,\n      blur,\n      remove,\n      focusMainContent,\n      moveToSide,\n      changeViewMode,\n      stretchWidth,\n      stretchHeight,\n      setFloatingBounds,\n    };\n  }, [toolWindowsState, id]);\n  return (\n    <ToolWindowStateContext.Provider value={contextValue}>\n      {children}\n    </ToolWindowStateContext.Provider>\n  );\n};\n","import { clamp, curry, fromPairs, insert, mapObjIndexed, move } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\n\nexport type ViewMode =\n  | \"docked_pinned\"\n  | \"docked_unpinned\"\n  | \"undock\"\n  | \"float\"\n  /**\n   * @deprecated \"window\" ViewMode was initially added following the original impl. It doesn't seem reasonable to\n   * support it though. It's marked as deprecated to be removed in the future.\n   */\n  | \"window\";\n\nexport type WindowBounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * Data structure for keeping the state of a single tool window. very similar to WindowInfo in Intellij Platform\n *\n * A note about about the data structure:\n * Some fields like `isSplit`, `weight`, `floatingBound` are meaningful only\n * for a subset of viewModes. So it may be tempting to introduce a `viewMode`\n * type which minimally and more accurately describes the information\n * relevant for each viewMode. But it's not structured like that, and it's\n * orthogonal to viewMode, since we want to preserve the relevant information\n * for each viewMode, to be used when the viewMode is changed back.\n *\n * NOTE: consider renaming to `WindowState` to avoid confusion with `ToolWindowsState`\n */\nexport interface ToolWindowState {\n  /**\n   * The order of the tool window in its group. The group is specified by `anchor` and `isSplit`.\n   */\n  order: number;\n  /**\n   * Whether the tool window is visible (open) or not.\n   * NOTE: A maximum of 1 **docked** tool window within the same group (same `anchor` and `isSplit`) can be visible.\n   * You will get a render error in `ToolWindows` component otherwise.\n   */\n  isVisible: boolean;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the primary group, i.e. when\n   * `isSplit` is false\n   */\n  weight: number;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the secondary group. i.e.\n   * when `isSplit` is true.\n   */\n  sideWeight: number;\n  /**\n   * The side of the tool window, being \"left\", \"right\", \"top\" or \"bottom\"\n   */\n  anchor: Anchor;\n  /**\n   * Specifies whether the tool window should be shown in the split view, aka \"Secondary group\".\n   */\n  isSplit: boolean;\n  /**\n   * Tool windows view mode. See {@link ViewMode}\n   *\n   * NOTE: in Intellij Platform, there is a window `type` and also `docked` and\n   * `autoHide`.\n   * keeping one viewMode makes more sense and prevents invalid combinations\n   * like { type: \"window, \"docked\": true}, that would be unnecessarily allowed.\n   */\n  viewMode: ViewMode;\n  /**\n   * Boundaries of the tool window, when rendered in \"float\" view mode.\n   */\n  floatingBounds?: WindowBounds;\n}\n\nconst isDocked = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" ||\n  toolWindow.viewMode === \"docked_pinned\";\n\n/**\n * Determines whether the tool window should hide on focus. In the java implementation, it's a field on window\n * info instead of being a calculated field. We changed that to match viewMode with the 5 view modes that are possible\n * to choose from the UI, eliminating the combinations that are never allowed. If from UX perspective, having window\n * or float mode with autoHide feature is considered valid at some point, we may need to change the implementation\n * to something similar to the original implementation where isAutoHide and viewMode are separate.\n */\nconst isAutoHide = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" || toolWindow.viewMode === \"undock\";\n\nexport type SideInfo = Pick<ToolWindowState, \"anchor\" | \"isSplit\">;\nexport const areInSameSection = curry(\n  (window1: SideInfo, window2: SideInfo) =>\n    window1.anchor === window2.anchor && window1.isSplit === window2.isSplit\n);\n\nexport const getViewModeType = (viewMode: ViewMode) => {\n  if (viewMode === \"docked_pinned\" || viewMode === \"docked_unpinned\") {\n    return \"docked\";\n  }\n  if (viewMode === \"window\" || viewMode === \"float\") {\n    return \"float\";\n  }\n  return viewMode;\n};\ntype IdToWindowStateMap = Readonly<{\n  [key: string]: Readonly<ToolWindowState>;\n}>;\n\n/**\n * Represents UI state of a bunch of tool windows. What is rendered inside each window or toolbar button is irrelevant.\n *\n * TODO: document pros and cons of these two approaches\n * - Having a class for ToolWindowsState which keeps a readonly mapping of keys to window states.\n * - Having ToolWindowsState as an interface (a mapping from keys to window states), and a bunch of action functions\n *   which accept a window state and some arguments, and return a new window state.\n */\nexport class ToolWindowsState {\n  public readonly lastFocusedKey: Key | null;\n  public readonly removedFromSideBarIds: ReadonlySet<Key>;\n  private readonly layoutToRestore: IdToWindowStateMap;\n  constructor(\n    public readonly windows: IdToWindowStateMap,\n    {\n      lastFocusedKey = null,\n      layoutToRestore = {},\n      removedFromSideBarIds = [],\n    }: {\n      lastFocusedKey?: Key | null;\n      layoutToRestore?: IdToWindowStateMap;\n      removedFromSideBarIds?: Iterable<Key>;\n    } = {}\n  ) {\n    this.lastFocusedKey = lastFocusedKey;\n    this.layoutToRestore = layoutToRestore;\n    this.removedFromSideBarIds = new Set(removedFromSideBarIds);\n    // TODO: instead of keeping a set of removedFromSideBarIds showStripeButton can be a boolean on each window state.\n    //  if we want to avoid the invalid combination of `{ isVisible: true, showStripeButton: false }`, we can have a\n    //  a single property like : visibility: 'open' | 'closed' | 'removed'\n    const invalidWindows = Object.keys(this.windows).filter(\n      (key) =>\n        this.removedFromSideBarIds.has(key) && this.windows[key].isVisible\n    );\n    if (invalidWindows.length > 0) {\n      throw new Error(\n        `Invalid ToolWindowsState. The following windows are set as visible but are removed from the sidebar: ${invalidWindows}`\n      );\n    }\n  }\n\n  hide(targetKey: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow, key) =>\n      key === targetKey\n        ? {\n            ...toolWindow,\n            isVisible: false,\n          }\n        : toolWindow\n    );\n  }\n  hideAll(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) =>\n        getViewModeType(toolWindow.viewMode) === \"float\"\n          ? toolWindow\n          : {\n              ...toolWindow,\n              isVisible: false,\n            },\n      { layoutToRestore: this.windows }\n    );\n  }\n\n  /**\n   * Restores windows to the state before hideAll.\n   */\n  restoreWindows(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) => this.layoutToRestore[key] || toolWindow\n    );\n  }\n\n  lastFocused(key: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow) => toolWindow, {\n      lastFocusedKey: key,\n    });\n  }\n\n  show(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const closableViewModes: ViewMode[] = [];\n    if (target.viewMode === \"undock\") {\n      closableViewModes.push(\"undock\");\n    } else if (isDocked(target)) {\n      closableViewModes.push(\"docked_unpinned\", \"docked_pinned\", \"undock\");\n    }\n    return this.mapWindows(\n      (toolWindow, key) => {\n        if (key === targetKey) {\n          return {\n            ...toolWindow,\n            isVisible: true,\n          };\n        }\n        if (\n          toolWindow.isVisible &&\n          areInSameSection(target, toolWindow) &&\n          closableViewModes.includes(toolWindow.viewMode)\n        ) {\n          return { ...toolWindow, isVisible: false };\n        }\n        return toolWindow;\n      },\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds].filter(\n          (key) => key !== targetKey\n        ),\n      }\n    );\n  }\n\n  toggle(targetKey: Key): ToolWindowsState {\n    return this.windows[targetKey]?.isVisible\n      ? this.hide(targetKey)\n      : this.show(targetKey);\n  }\n\n  blur(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target || !isAutoHide(target)) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  // TODO: initiate floatingBound when changing viewMode to float or window and there is no previous floatingBound\n  changeViewMode(targetKey: Key, viewMode: ViewMode): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          viewMode,\n        };\n      }\n      const viewModeType = getViewModeType(toolWindow.viewMode);\n      if (\n        toolWindow.isVisible &&\n        viewModeType !== \"float\" &&\n        areInSameSection(toolWindow, target) &&\n        viewModeType === getViewModeType(viewMode)\n      ) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  move(targetKey: Key, index: number): ToolWindowsState;\n  move(targetKey: Key, side: SideInfo, index?: number): ToolWindowsState;\n  move(\n    targetKey: Key,\n    sideOrIndex: SideInfo | number,\n    index?: number\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const targetSide = typeof sideOrIndex === \"object\" ? sideOrIndex : target;\n    const targetIndex = typeof sideOrIndex === \"number\" ? sideOrIndex : index;\n    const targetSideWindows = Object.entries(this.windows).filter(([, value]) =>\n      areInSameSection(targetSide, value)\n    );\n    const indexInTargetSide = targetSideWindows.findIndex(\n      ([, window]) => window === target\n    );\n    const sortedTargetWindows: Array<[Key, ToolWindowState]> =\n      indexInTargetSide < 0\n        ? insert(\n            targetIndex ?? -1,\n            [targetKey, { ...target, ...targetSide }],\n            targetSideWindows\n          )\n        : move(\n            indexInTargetSide,\n            targetIndex ?? indexInTargetSide,\n            targetSideWindows\n          );\n    const newTargetSideWindows = fromPairs(\n      sortedTargetWindows.map(([key, value], index) => {\n        let newValue = value;\n        if (value.order !== index) {\n          newValue = { ...value, order: index };\n        }\n        const targetViewMode = getViewModeType(target.viewMode);\n        if (\n          key !== targetKey &&\n          target.isVisible &&\n          value.isVisible &&\n          targetViewMode !== \"float\" &&\n          getViewModeType(value.viewMode) === targetViewMode\n        ) {\n          newValue = { ...value, isVisible: false };\n        }\n        return [`${key}`, newValue];\n      })\n    );\n    return this.mapWindows((value, key) => newTargetSideWindows[key] || value);\n  }\n\n  stretchWidth(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"width\");\n  }\n\n  stretchHeight(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"height\");\n  }\n\n  setFloatingBound(\n    targetKey: Key,\n    floatingBounds: WindowBounds\n  ): ToolWindowsState {\n    return this.update(targetKey, \"floatingBounds\", floatingBounds);\n  }\n\n  removeFromSidebar(targetKey: Key): ToolWindowsState {\n    return this.mapWindows(\n      (state, key) =>\n        key === targetKey\n          ? {\n              ...state,\n              isVisible: false,\n            }\n          : state,\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds, targetKey],\n      }\n    );\n  }\n\n  mapWindows(\n    mapFn: (toolWindow: ToolWindowState, key: string) => ToolWindowState,\n    options: ConstructorParameters<typeof ToolWindowsState>[1] = {}\n  ) {\n    return new ToolWindowsState(mapObjIndexed(mapFn, this.windows), {\n      lastFocusedKey: this.lastFocusedKey,\n      layoutToRestore: this.layoutToRestore,\n      removedFromSideBarIds: this.removedFromSideBarIds,\n      ...options,\n    });\n  }\n\n  private update<K extends keyof ToolWindowState>(\n    targetKey: Key,\n    key: K,\n    value: ToolWindowState[K]\n  ) {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((window) => {\n      if (window === target) {\n        return {\n          ...window,\n          [key]: value,\n        };\n      }\n      return window;\n    });\n  }\n\n  private stretch(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number },\n    property: \"width\" | \"height\"\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const viewModeType = getViewModeType(target.viewMode);\n    if (viewModeType === \"float\") {\n      return this.mapWindows((window) => {\n        if (window === target) {\n          const currentFloatingBound = window.floatingBounds!;\n          return {\n            ...window,\n            floatingBounds: {\n              ...currentFloatingBound,\n              [property]: currentFloatingBound[property] + value,\n            },\n          };\n        }\n        return window;\n      });\n    }\n    const expectedProperty = isHorizontalToolWindow(target.anchor)\n      ? \"height\"\n      : \"width\";\n    if (expectedProperty !== property) {\n      return this;\n    }\n    const containerSize = containerBounds[property];\n    const newValue = containerSize * target.weight + value;\n    const isNewValueValid = clamp(0, containerSize, newValue) === newValue;\n    if (isNewValueValid) {\n      if (viewModeType === \"docked\") {\n        return this.resizeDock(target.anchor, newValue, containerBounds);\n      } else {\n        return this.resizeUndock(target.anchor, newValue, containerBounds);\n      }\n    }\n    return this;\n  }\n\n  resizeDock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(true, anchor, size, containerBounds);\n  }\n\n  resizeUndock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(false, anchor, size, containerBounds);\n  }\n\n  resizeDockSplitView(anchor: Anchor, weight: number): ToolWindowsState {\n    return this.mapWindows((window) => {\n      if (window.anchor === anchor && window.isVisible && isDocked(window)) {\n        return {\n          ...window,\n          sideWeight: window.isSplit ? weight : 1 - weight,\n        };\n      }\n      return window;\n    });\n  }\n\n  private resizeSide(\n    dock: boolean,\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.mapWindows((window) => {\n      const isInResizingView = dock\n        ? isDocked(window)\n        : window.viewMode === \"undock\";\n      if (window.anchor === anchor && isInResizingView && window.isVisible) {\n        const containerSize = !isHorizontalToolWindow(anchor)\n          ? containerBounds.width\n          : containerBounds.height;\n        return {\n          ...window,\n          weight: size / containerSize,\n        };\n      }\n      return window;\n    });\n  }\n}\n\nexport const toolWindowState = ({\n  viewMode = \"docked_pinned\",\n  ...inputs\n}: Partial<ToolWindowState> = {}): ToolWindowState => ({\n  anchor: \"left\",\n  isSplit: false,\n  viewMode: viewMode,\n  order: 1,\n  weight: 0.2,\n  sideWeight: 0.5,\n  isVisible: false,\n  floatingBounds:\n    getViewModeType(viewMode) === \"float\"\n      ? {\n          left: 300,\n          top: 300,\n          width: 600,\n          height: 300,\n        }\n      : undefined,\n  ...inputs,\n});\n","export type Anchor = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport const getAnchorOrientation = (\n  anchor: Anchor\n): \"horizontal\" | \"vertical\" =>\n  isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\";\n\nexport const isHorizontalToolWindow = (anchor: Anchor) =>\n  anchor === \"top\" || anchor === \"bottom\";\n\nexport const theOtherSide = (anchor: Anchor) =>\n  ({\n    left: \"right\" as const,\n    right: \"left\" as const,\n    top: \"bottom\" as const,\n    bottom: \"top\" as const,\n  }[anchor]);\n","import React, { RefObject, useEffect, useRef, useState } from \"react\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport { useOverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nexport function useToolWindow(\n  {\n    containerRef,\n    contentRef,\n    focusableContentRef,\n  }: {\n    containerRef: RefObject<HTMLElement>;\n    contentRef: RefObject<Element>;\n    focusableContentRef: RefObject<{ focus: () => void }>;\n  },\n  { onFocusChange }: { onFocusChange?: (focused: boolean) => void } = {}\n) {\n  const [contentHasFocus, setContentHasFocus] = useState(false);\n  /**\n   * NOTE: useFocusWithin form @react-aria/interactions (at least until 3.5.1) has a couple of problem, because of which\n   * we may need to implement our own version of it.\n   * - It doesn't play nice with FocusScope with `contain` set to true. When something is blurred, FocusScope prevents\n   *   that by restoring focus back immediately. but the blur event is already caught by useFocusWithin. One solution\n   *   would be to change useFocusWithin implementation to ignore these blur events that are immediately followed\n   *   by a focus event that keeps the focus in.\n   * - useFocusWithin has an inconsistent behaviour when it comes to Portals. Since it uses react props for handling\n   *   focus and blur, the [react tree determines event bubbling](https://reactjs.org/docs/portals.html#event-bubbling-through-portals),\n   *   which can be a very nice feature, when an overlay (rendered in a portal) grabs the focus, which should still\n   *   be seen as \"within\". But the problems is that the current implementation uses DOM `.contains(e.relatedTarget)`\n   *   method to determine if focus is no longer within. First of all, using react tree or dom tree to determine \"within\"\n   *   can be seen as an option perhaps. Secondly, it should be consistent on focus and blur.\n   *\n   *   Right now these problems are no big deal. but it may become an issue when portals are used within the content\n   *   of the tool window.\n   *\n   * NOTE: In the original implementation, when a heading toolbar button opens a menu, and focus goes to menu, the\n   * header loses the focus appearance, ant it relies only on content having the focus.\n   */\n  const { focusWithinProps: contentFocusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setContentHasFocus,\n  });\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: onFocusChange,\n  });\n\n  const { toolWindowProps: autoHideProps } = useAutoHide();\n\n  const { focusForwarderProps } = useFocusForwarder({\n    forwardFocus: focusableContentRef.current?.focus,\n    ignoreFocusedDescendant: true,\n  });\n\n  // If there is no focusable content rendered in the tool window, nothing will be autofocused. In that case\n  // we will focus the tool window container itself as a fallback.\n  useEffect(() => {\n    if (\n      !document.activeElement ||\n      !containerRef.current?.contains(document.activeElement)\n    ) {\n      containerRef.current?.focus();\n    }\n  }, []);\n\n  const { moveHandleProps } = useOverlayMoveHandle();\n\n  return {\n    contentHasFocus,\n    toolWindowProps: mergeProps(\n      focusForwarderProps,\n      focusWithinProps,\n      autoHideProps,\n      {\n        tabIndex: -1,\n      }\n    ),\n    toolWindowContentProps: contentFocusWithinProps,\n    toolWindowHeaderProps: moveHandleProps,\n  };\n}\n\n/**\n * Applies the auto hide behaviour of tool window based on view mode information and by handling focus and blur events,\n * on the root tool window element. Returns the necessary props that should be applied to the root tool window element.\n * The implementation is not perfect and may not 100% match the original Intellij Platform implementation.\n * If this focus based implementation for auto hide proves to be fragile and not good enough in future,\n * an alternative approach would be to move auto hide logic to the state management logic as much as possible,\n * and limit the focus based auto-hiding to only when the focus goes within the main content area. That should have\n * less focus-related edge cases.\n * TODO: auto hide behaviour should be moved to the core ToolWindows API. ToolWindows now renders a FocusScope and\n * handles focus events on any tool window, to track last focused tool window.\n */\nfunction useAutoHide() {\n  const { blur } = useToolWindowState();\n  const hideTimeoutId = useRef<number | null>(null);\n  const { focusWithinProps: windowFocusWithinProps } = useFocusWithin({\n    onBlurWithin: (e) => {\n      // setTimeout and windowHasFocusRef is to work around the problem with useFocusWithin, described above.\n      hideTimeoutId.current = window.setTimeout(() => {\n        // Sometimes when the element is blurred, the subsequent focus that is triggered by FocusScope to keep the focus\n        // is a little delayed and therefore after the timeout reaches. It seem to happen only when a non-focusable\n        // area is clicked. We mitigate it by ignoring blur events where nothing is focused. It's not a problem\n        // at least with `DefaultToolWindow` implementation that uses a FocusScope.\n        const isSomethingElseFocused = e.relatedTarget;\n        if (isSomethingElseFocused) {\n          blur();\n        }\n      });\n    },\n    onFocusWithin: () => {\n      if (hideTimeoutId.current !== null) {\n        clearTimeout(hideTimeoutId.current);\n        hideTimeoutId.current = null;\n      }\n    },\n  });\n  return {\n    toolWindowProps: windowFocusWithinProps,\n  };\n}\n","import React from \"react\";\nimport { DividerItem } from \"@intellij-platform/core/Collections\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport {\n  useAction,\n  useActionGroup,\n} from \"@intellij-platform/core/ActionSystem\";\nimport {\n  ActionItem,\n  ActionsMenu,\n} from \"@intellij-platform/core/ActionSystem/components\";\nimport {\n  MOVE_TO_ACTION_GROUP_ID,\n  TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n  VIEW_MODE_ACTION_GROUP_ID,\n  ViewModeToActionId,\n} from \"./useToolWindowActions\";\nimport {\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\n/**\n * Tool window gear icon menu, with a set of default actions and some extra ones.\n * TODO: add support for extra actions when action system is progressed a little.\n */\nexport function ToolWindowSettingsIconMenu({\n  menuProps,\n}: {\n  menuProps: React.HTMLAttributes<HTMLElement>;\n}) {\n  const { state } = useToolWindowState();\n\n  const viewModeActionGroup = useActionGroup(VIEW_MODE_ACTION_GROUP_ID);\n  const moveToActionGroup = useActionGroup(MOVE_TO_ACTION_GROUP_ID);\n  const resizeActions = useActionGroup(TOOL_WINDOW_RESIZE_ACTION_GROUP_ID);\n  const maximizeAction = useAction(MAXIMIZE_TOOL_WINDOW_ACTION_ID);\n  const removeFromSideBarAction = useAction(\n    REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID\n  );\n  if (\n    !viewModeActionGroup ||\n    !moveToActionGroup ||\n    !resizeActions ||\n    !maximizeAction ||\n    !removeFromSideBarAction\n  ) {\n    throw new Error(\n      \"[ToolWindowSettingsIconMenu]: can't find tool window actions.\"\n    );\n  }\n\n  const gearIconActions: Array<ActionItem> = [\n    viewModeActionGroup,\n    moveToActionGroup,\n    {\n      id: \"resize\",\n      title: \"Resize\",\n      isPopup: true,\n      children: [...resizeActions.children, maximizeAction],\n    },\n    new DividerItem(),\n    removeFromSideBarAction,\n  ];\n  return (\n    <ActionsMenu\n      actions={gearIconActions}\n      menuProps={menuProps}\n      selectedKeys={[ViewModeToActionId[state.viewMode]]}\n    />\n  );\n}\n","import React, { HTMLProps } from \"react\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { Toolbar } from \"@intellij-platform/core/Toolbar/Toolbar\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { MenuTrigger } from \"@intellij-platform/core/Menu/MenuTrigger\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledHorizontalSeparator } from \"@intellij-platform/core/StyledSeparator\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme/Theme\";\nimport { ToolWindowSettingsIconMenu } from \"./ToolWindowSettingsIconMenu\";\nimport {\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { ActionButton } from \"@intellij-platform/core/ActionSystem/components\";\n\nexport interface ToolWindowHeaderProps\n  extends Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\"> {\n  contentHasFocus?: boolean;\n  additionalActions?: React.ReactNode;\n}\n\nconst StyledToolWindowHeader = styled.div<{ active: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: end; // to have the content overflow from right, as the toolwindow shrinks. That will keep the left-most buttons in the view\n  padding: 0 2px 0 4px;\n  overflow: hidden; // for the negative margin applied on StyledToolWindowHeaderActions\n  border-bottom: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"ToolWindow.Header.borderColor\" as UnknownThemeProp<\"ToolWindow.Header.borderColor\">\n      ) ||\n      theme.color(\"DefaultTabs.borderColor\") ||\n      theme.commonColors.contrastBorder};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\"ToolWindow.Header.background\") ||\n        theme.color(\n          \"ToolWindow.header.active.background\" as UnknownThemeProp<\"ToolWindow.header.active.background\">\n        ) ||\n        \"#E2E6EC\"\n      : theme.color(\"ToolWindow.Header.inactiveBackground\") ||\n        theme.color(\"ToolWindow.Header.background\") ||\n        \"#ECECEC\"};\n`;\n\nconst StyledToolWindowHeaderActions = styled.div`\n  margin-right: -4px;\n`;\n\nconst StyledToolWindowHeaderContent = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`;\n\nexport const DefaultToolWindowHeader: React.FC<ToolWindowHeaderProps> = ({\n  children,\n  additionalActions,\n  contentHasFocus = false,\n  ...otherProps\n}) => {\n  return (\n    <StyledToolWindowHeader active={contentHasFocus} {...otherProps}>\n      <StyledToolWindowHeaderContent>{children}</StyledToolWindowHeaderContent>\n      <StyledToolWindowHeaderActions>\n        <Toolbar>\n          {additionalActions && (\n            <>\n              {additionalActions}\n              <StyledHorizontalSeparator />\n            </>\n          )}\n          <ActionButton actionId={DOCK_TOOL_WINDOW_ACTION_ID} />\n          <MenuTrigger\n            renderMenu={({ menuProps }) => {\n              return <ToolWindowSettingsIconMenu menuProps={menuProps} />;\n            }}\n          >\n            {(props, ref) => (\n              <TooltipTrigger tooltip={<ActionTooltip actionName=\"Options\" />}>\n                <IconButton {...props} ref={ref}>\n                  <PlatformIcon icon=\"general/gearPlain\" />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </MenuTrigger>\n          <ActionButton actionId={HIDE_ACTIVE_WINDOW_ACTION_ID} />\n        </Toolbar>\n      </StyledToolWindowHeaderActions>\n    </StyledToolWindowHeader>\n  );\n};\n","import React, { useContext, useMemo, useRef } from \"react\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  FocusScope,\n  FocusScopeRef,\n} from \"@intellij-platform/core/utils/FocusScope\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { useToolWindow } from \"./useToolWindow\";\nimport { DefaultToolWindowHeader } from \"./DefaultToolWindowHeader\";\nimport { useToolWindowActions } from \"./useToolWindowActions\";\n\nexport interface DefaultToolWindowProps extends DOMProps {\n  /**\n   * title to be shown on the left side of the tool window header.\n   */\n  headerContent?: React.ReactNode;\n  /**\n   * additional action buttons to be rendered before the default gear and hide buttons.\n   */\n  additionalActions?: React.ReactNode;\n  /**\n   * Actions to be provided in the tool window, in addition to the default tool window actions.\n   */\n  actions?: ActionDefinition[];\n  /**\n   * The title of main part of the tool windows component. Used in tool window actions.\n   * @default \"Editor\"\n   */\n  mainContentTitle?: string;\n  onFocusChange?: (focused: boolean) => void;\n}\n\nconst StyledToolWindowContainer = styled.div`\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 1;\n`;\nconst StyledToolWindowContent = styled.div`\n  flex: 1;\n  overflow: auto;\n`;\n\ninterface DefaultToolWindowContextObj {\n  hasFocus?: boolean;\n}\n\nconst DefaultToolWindowContext =\n  React.createContext<DefaultToolWindowContextObj>({\n    hasFocus: false,\n  });\n\nexport const useDefaultToolWindowContext = () =>\n  useContext(DefaultToolWindowContext);\n/**\n * Default component for rendering the content of a tool window. It supports a header and a scrollable area.\n * The header supports showing a content, and some default+custom actions on the right.\n *\n * @see MultiContentToolWindow\n *\n * Remaining features:\n * - Additional gear menu actions.\n *\n */\nexport const DefaultToolWindow: React.FC<DefaultToolWindowProps> = ({\n  headerContent,\n  children,\n  additionalActions,\n  onFocusChange,\n  actions,\n  mainContentTitle = \"Editor\",\n  ...otherProps\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const focusableContentRef = useRef<FocusScopeRef>(null);\n  const {\n    // NOTE: we might as well use :focus-within and target StyledToolWindowHeader to set the background, but it's not\n    // a clear improvement.\n    contentHasFocus,\n    toolWindowProps,\n    toolWindowContentProps,\n    toolWindowHeaderProps,\n  } = useToolWindow(\n    { containerRef, contentRef, focusableContentRef },\n    {\n      onFocusChange,\n    }\n  );\n\n  const defaultToolWindowContext = useMemo(\n    () => ({\n      hasFocus: contentHasFocus,\n    }),\n    [contentHasFocus]\n  );\n  const activeToolWindowActionGroup = useToolWindowActions({\n    mainContentTitle,\n  });\n  const allActions = [activeToolWindowActionGroup, ...(actions || [])];\n\n  return (\n    <ActionsProvider actions={allActions}>\n      {({ shortcutHandlerProps }) => (\n        <StyledToolWindowContainer\n          {...mergeProps(\n            toolWindowProps,\n            shortcutHandlerProps,\n            filterDOMProps(otherProps)\n          )}\n          ref={containerRef}\n        >\n          <DefaultToolWindowContext.Provider value={defaultToolWindowContext}>\n            <DefaultToolWindowHeader\n              additionalActions={additionalActions}\n              contentHasFocus={contentHasFocus}\n              {...toolWindowHeaderProps}\n            >\n              {headerContent}\n            </DefaultToolWindowHeader>\n            <StyledToolWindowContent\n              ref={contentRef}\n              {...toolWindowContentProps}\n            >\n              {/**\n               * FIXME: adding `contain` prevents focus from moving to another focus scope both with mouse and keyboard.\n               * If we want to follow the Intellij Platform behaviour exactly, we need a kind of focus containment, where\n               * focus is trapped only for keyboard interaction, and user can still move focus by clicking another scope.\n               * Maybe a custom useFocusContainment hook and a separate option for activating it on our own FocusScope.\n               */}\n              <FocusScope ref={focusableContentRef} autoFocus>\n                {children}\n              </FocusScope>\n            </StyledToolWindowContent>\n          </DefaultToolWindowContext.Provider>\n        </StyledToolWindowContainer>\n      )}\n    </ActionsProvider>\n  );\n};\n","import React from \"react\";\nimport { Shortcut, useAction } from \"@intellij-platform/core/ActionSystem\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { getActivateToolWindowActionId } from \"./useToolWindowsActions\";\nimport styled from \"styled-components\";\n\nconst getToolWindowNumberFromShortcut = (shortcut: Shortcut): number | null => {\n  const num =\n    shortcut.type === \"keyboard\" &&\n    shortcut.firstKeyStroke.modifiers?.length === 1 &&\n    [\"Alt\", \"Meta\", \"Control\"].includes(shortcut.firstKeyStroke.modifiers[0]) &&\n    shortcut.firstKeyStroke.code.match(/^(Digit|Numpad)([0-9])$/)?.[2];\n  if (num) {\n    return parseInt(num);\n  }\n  return null;\n};\n\nconst StyledWrapper = styled.span`\n  display: flex;\n`;\n\n/**\n * Default UI for the toolbar button (aka. stripe button) of the tool window.\n * - Renders the title and icon for the tool window\n * - Optionally shows the number before the title, if a numeric shortcut is set for the corresponding ActivateToolWindow\n *   action, in the currently applied keymap.\n * - Adds an Action Tooltip\n */\nexport const DefaultToolWindowToolbarButton = ({\n  id,\n  title,\n  icon,\n  showNumber = true,\n}: {\n  id: React.Key;\n  title: string;\n  icon: React.ReactNode;\n  showNumber?: boolean;\n}) => {\n  const action = useAction(getActivateToolWindowActionId(`${id}`));\n\n  const number = action?.shortcuts\n    ?.map(getToolWindowNumberFromShortcut)\n    .find(Number.isInteger);\n  return (\n    <TooltipTrigger\n      tooltip={<ActionTooltip actionName={title} shortcut={action?.shortcut} />}\n    >\n      <StyledWrapper>\n        {icon}\n        &nbsp;\n        {number != null && showNumber ? (\n          <>\n            <u>{number}</u>:&nbsp;\n          </>\n        ) : null}\n        {title}\n      </StyledWrapper>\n    </TooltipTrigger>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { indexBy } from \"ramda\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  ToolWindowRefValue,\n  ToolWindows,\n  ToolWindowsProps,\n} from \"@intellij-platform/core/ToolWindows\";\nimport { useToolWindowsActions } from \"./useToolWindowsActions\";\nimport { DefaultToolWindowToolbarButton } from \"./DefaultToolWindowToolbarButton\";\nimport { ActionsProvider } from \"@intellij-platform/core/ActionSystem\";\n\ninterface DefaultToolWindow {\n  id: string;\n  title: string;\n  icon: React.ReactNode;\n  content: React.ReactNode;\n}\n\n/**\n * A wrapper around ToolWindows, which provides default actions. It also expects windows to have a `title` and an `icon`\n * instead of more generic `toolbarButton`. The `title` and `icon` are then used in toolbar button, and also in the\n * actions that are dynamically created for each window to toggle/focus the tool window.\n */\nexport const DefaultToolWindows = React.forwardRef(function DefaultToolWindows(\n  {\n    windows: toolWindows,\n    toolWindowsState,\n    showNumbers,\n    ...props\n  }: Omit<ToolWindowsProps, \"windows\"> & {\n    windows: DefaultToolWindow[];\n    showNumbers?: boolean;\n  },\n  forwardedRef: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const toolWindowsRef = useObjectRef(forwardedRef);\n  const windowById = indexBy(({ id }) => id, toolWindows);\n  const actions = useToolWindowsActions({\n    toolWindowsRef,\n    toolWindowsState,\n    getPresentation: (id) => windowById[id],\n  });\n  return (\n    <ActionsProvider actions={actions}>\n      {({ shortcutHandlerProps }) => (\n        <ToolWindows\n          {...props}\n          ref={toolWindowsRef}\n          toolWindowsState={toolWindowsState}\n          windows={toolWindows.map(({ id, icon, content, title }) => ({\n            id,\n            toolbarButton: (\n              <DefaultToolWindowToolbarButton\n                id={id}\n                icon={icon}\n                title={title}\n                showNumber={showNumbers}\n              />\n            ),\n            content,\n          }))}\n          containerProps={mergeProps(\n            props.containerProps || {},\n            shortcutHandlerProps\n          )}\n        />\n      )}\n    </ActionsProvider>\n  );\n});\n","import React, { Key, useEffect, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { DefaultToolWindow, DefaultToolWindowProps } from \"./DefaultToolWindow\";\nimport { TabItem } from \"../Tabs/TabItem\";\nimport { usePrevious } from \"../utils/usePrevious\";\nimport { ToolWindowTabs } from \"../Tabs/ToolWindowTabs/ToolWindowTabs\";\n\nexport interface MultiContentToolWindowProps\n  extends Pick<DefaultToolWindowProps, \"additionalActions\"> {\n  /**\n   * List of contents that will be accessible with a list of grouped or ungrouped tabs in the tool window header.\n   */\n  children:\n    | React.ReactElement<MultiContentToolWindowContentProps>[]\n    | React.ReactElement<MultiContentToolWindowContentProps>;\n  /**\n   * Key of currently active content\n   */\n  activeKey?: Key;\n  defaultActiveKey?: Key;\n  onActiveKeyChange?: (key: Key) => void;\n  /**\n   * If true, it groups tabs in a dropdown instead.\n   *\n   * @default false\n   */\n  groupTabs?: boolean;\n  /**\n   * The content shown as the title of the tool window, before content switcher (tabs or dropdown).\n   * For more control over header content, you can pass a function which accepts rendered content switcher,\n   * and then you can compose it with other content as you wish. Use case examples of function variant:\n   * - You want to render a title before the content switcher, and something after the tabs. Like a \"+\" button in\n   *   terminal.\n   * - You want to conditionally move inner-content header up to the tool window header, if there is only one tab. In\n   *   that case you don't need to render the content switcher at all. An example is the new design in the \"Run\"\n   *   tool window.\n   */\n  headerContent?:\n    | React.ReactNode\n    | ((props: { renderedViewSwitcher: React.ReactNode }) => React.ReactNode);\n}\n\n/**\n * Implemented on top of DefaultToolWindow, allows for multiple tabbed content within a tool window.\n * Remaining features:\n * - Although trivial, group tabs action in tool window header gear icon is intentionally left unimplemented for now,\n *   until an increment on action system is done.\n * - Grouped mode is not implemented currently, as we don't have a dropdown component. Though it seems it's just a\n *   MenuTrigger and some trigger with a arrow icon.\n */\nexport const MultiViewToolWindow = ({\n  groupTabs,\n  children,\n  headerContent,\n  ...props\n}: MultiContentToolWindowProps) => {\n  const [isToolWindowFocused, setToolWindowFocused] = useState(false);\n  const [activeKey, setActiveKey] = useControlledState(\n    props.activeKey!,\n    props.defaultActiveKey!,\n    props.onActiveKeyChange!\n  );\n  const contents = React.Children.toArray(children)\n    .filter(\n      (\n        child\n      ): child is React.ReactElement<MultiContentToolWindowContentProps> => {\n        const validChild =\n          React.isValidElement(child) &&\n          child.type === MultiContentToolWindowContent;\n        if (!validChild) {\n          // FIXME: only warn in dev mode\n          console.warn(\n            \"You are not supposed to render anything but MultiContentToolWindowContent inside MultiViewToolWindow. Rendered: \",\n            child\n          );\n        }\n        return validChild;\n      }\n    )\n    // The following map is because of what React.Children.toArray does to keys: https://stackoverflow.com/q/33791401/1493081\n    // It doesn't look like a good idea since and there might be better ways to fix this, or at least make sure it would\n    // work in all cases. FIXME\n    .map((content) => ({ ...content, key: `${content.key}`.slice(2) as Key }));\n  const renderContentSwitcher = () => {\n    if (groupTabs) {\n      console.error(\n        \"groupTab is not supported yet in MultiViewToolWindow. Will fallback to ungrouped tabs\"\n      );\n    }\n    return (\n      <ToolWindowTabs\n        noBorders\n        items={contents}\n        active={isToolWindowFocused}\n        selectedKey={activeKey}\n        onSelectionChange={setActiveKey}\n      >\n        {(item) => <TabItem key={item.key}>{item.props.tabContent}</TabItem>}\n      </ToolWindowTabs>\n    );\n  };\n  const renderedViewSwitcher = renderContentSwitcher();\n\n  // We set the active key if it's not set or is invalid. A common scenario is when tabs are closable, and when the\n  // active tab is closed. You would always want to previous tab to get activated in such cases, instead of the first\n  // one. By having the logic here, there is no need to repeat the same logic in each use case. Although, it can also\n  // be moved into a state management utility for tabs, maybe in the future.\n\n  const keys = contents.map(({ key }) => key);\n  const previousKeys = usePrevious(keys);\n  useEffect(() => {\n    if (!keys.includes(activeKey)) {\n      const newActiveKey = keys[previousKeys.indexOf(activeKey) - 1] ?? keys[0];\n      if (newActiveKey != undefined) {\n        setActiveKey(newActiveKey);\n      }\n    }\n  });\n\n  const activeContent = contents.find(\n    (content) => activeKey == undefined || activeKey === content.key\n  );\n  return (\n    <DefaultToolWindow\n      onFocusChange={setToolWindowFocused}\n      headerContent={\n        typeof headerContent === \"function\" ? (\n          headerContent({ renderedViewSwitcher })\n        ) : (\n          <>\n            {headerContent}\n            {renderedViewSwitcher}\n          </>\n        )\n      }\n      additionalActions={props.additionalActions}\n    >\n      {activeContent?.props.children}\n    </DefaultToolWindow>\n  );\n};\n\nexport interface MultiContentToolWindowContentProps {\n  key: Key;\n  /**\n   * Used in the corresponding tab.\n   */\n  tabContent: React.ReactNode;\n\n  children: React.ReactNode;\n}\n\nconst MultiContentToolWindowContent =\n  ({}: MultiContentToolWindowContentProps) => {\n    throw new Error(\n      \"MultiContentToolWindowContent is not meant to be rendered directly. You should only use it in MultiViewToolWindow\"\n    );\n  };\n\nMultiViewToolWindow.View = MultiContentToolWindowContent;\n","export const HIDE_ALL_WINDOWS_ACTION_ID = \"HideAllWindows\";\nexport const JUMP_TO_LAST_WINDOW_ACTION_ID = \"JumpToLastWindow\";\nexport const HIDE_ACTIVE_WINDOW_ACTION_ID = \"HideActiveWindow\";\nexport const MAXIMIZE_TOOL_WINDOW_ACTION_ID = \"MaximizeToolWindow\";\nexport const DOCK_TOOL_WINDOW_ACTION_ID = \"DockToolWindow\";\nexport const RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID = \"ResizeToolWindowRight\";\nexport const RESIZE_TOOL_WINDOW_LEFT_ACTION_ID = \"ResizeToolWindowLeft\";\nexport const RESIZE_TOOL_WINDOW_TOP_ACTION_ID = \"ResizeToolWindowTop\";\nexport const RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID = \"ResizeToolWindowBottom\";\nexport const DOCK_PINNED_MODE_ACTION_ID = \"DockPinnedMode\";\nexport const DOCK_UNPINNED_MODE_ACTION_ID = \"DockUnpinnedMode\";\nexport const UNDOCK_MODE_ACTION_ID = \"UndockMode\";\nexport const FLOAT_MODE_ACTION_ID = \"FloatMode\";\nexport const WINDOW_MODE_ACTION_ID = \"WindowMode\";\nexport const FOCUS_EDITOR_ACTION_ID = \"FocusEditor\";\nexport const REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID =\n  \"RemoveToolWindowFromSidebar\"; // doesn't show up in keymap. Not sure what the id is in the original impl.\n","import React from \"react\";\nimport {\n  Anchor,\n  isHorizontalToolWindow,\n  useToolWindowState,\n  ViewMode,\n} from \"@intellij-platform/core/ToolWindows\";\nimport { ActionDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport {\n  DOCK_PINNED_MODE_ACTION_ID,\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  DOCK_UNPINNED_MODE_ACTION_ID,\n  FLOAT_MODE_ACTION_ID,\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  UNDOCK_MODE_ACTION_ID,\n  WINDOW_MODE_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { ActionGroupDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport { useCreateDefaultActionGroup } from \"@intellij-platform/core/ActionSystem/components\";\n\n// Resize steps in Intellij Platform is calculated based on the size of a \"W\" character and some\n// configuration (ide.windowSystem.hScrollChars). Although it's technically feasible, it seems not necessary\nconst HEIGHT_RESIZE_STEP = 16 * 5;\nconst WIDTH_RESIZE_STEP = 13 * 5;\n\nexport const anchors: Array<{\n  anchor: Anchor;\n  isSplit: boolean;\n  id: string;\n}> = [\n  { id: \"moveToLeftTop\", anchor: \"left\", isSplit: false },\n  { id: \"moveToLeftBottom\", anchor: \"left\", isSplit: true },\n  { id: \"moveToBottomLeft\", anchor: \"bottom\", isSplit: false },\n  { id: \"moveToBottomRight\", anchor: \"bottom\", isSplit: true },\n  { id: \"moveToRightTop\", anchor: \"right\", isSplit: true },\n  { id: \"moveToRightBottom\", anchor: \"right\", isSplit: false },\n  { id: \"moveToTopRight\", anchor: \"top\", isSplit: true },\n  { id: \"moveToTopLeft\", anchor: \"top\", isSplit: false },\n];\n\nconst getAnchorName = ({\n  anchor,\n  isSplit,\n}: {\n  anchor: Anchor;\n  isSplit: boolean;\n}) =>\n  `${anchor[0].toUpperCase()}${anchor.slice(1)} ${\n    isHorizontalToolWindow(anchor)\n      ? isSplit\n        ? \"Right\"\n        : \"Left\"\n      : isSplit\n      ? \"Bottom\"\n      : \"Top\"\n  }`;\n\nexport const ViewModeToActionId: Record<ViewMode, string> = {\n  docked_pinned: DOCK_PINNED_MODE_ACTION_ID,\n  docked_unpinned: DOCK_UNPINNED_MODE_ACTION_ID,\n  undock: UNDOCK_MODE_ACTION_ID,\n  float: FLOAT_MODE_ACTION_ID,\n  window: WINDOW_MODE_ACTION_ID,\n};\n\nexport const VIEW_MODE_ACTION_GROUP_ID = \"TW.ViewModeGroup\";\nexport const MOVE_TO_ACTION_GROUP_ID = \"TW.MoveToGroup\";\nexport const TOOL_WINDOW_RESIZE_ACTION_GROUP_ID = \"ResizeToolWindowGroup\";\n\nexport function useToolWindowActions({\n  mainContentTitle,\n}: {\n  mainContentTitle: string;\n}): ActionGroupDefinition {\n  const {\n    stretchWidth,\n    stretchHeight,\n    changeViewMode,\n    moveToSide,\n    focusMainContent,\n    hide,\n    remove,\n    state,\n  } = useToolWindowState();\n  const createDefaultActionGroup = useCreateDefaultActionGroup();\n\n  const actions: ActionDefinition[] = [];\n  const activeToolWindowActionGroup = createDefaultActionGroup({\n    id: \"ActiveToolwindowGroup\",\n    title: \"Active Tool Window\",\n    children: actions,\n  });\n  if (!state) {\n    // FIXME: when window is removed, a last render happens with the new ToolWindowsState, which doesn't have state\n    //  for the removed tool window. Need to understand why that happens.\n    return activeToolWindowActionGroup;\n  }\n  const viewModeActionGroup = createDefaultActionGroup({\n    id: VIEW_MODE_ACTION_GROUP_ID,\n    title: \"View Mode\",\n    children: [\n      {\n        id: DOCK_PINNED_MODE_ACTION_ID,\n        title: \"Dock Pinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_pinned\");\n        },\n      },\n      {\n        id: DOCK_UNPINNED_MODE_ACTION_ID,\n        title: \"Dock Unpinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_unpinned\");\n        },\n      },\n      {\n        id: UNDOCK_MODE_ACTION_ID,\n        title: \"Undock\",\n        actionPerformed: () => {\n          changeViewMode(\"undock\");\n        },\n      },\n      {\n        id: FLOAT_MODE_ACTION_ID,\n        title: \"Float\",\n        actionPerformed: () => {\n          changeViewMode(\"float\");\n        },\n      },\n      {\n        id: WINDOW_MODE_ACTION_ID,\n        title: \"Window\",\n        actionPerformed: () => {\n          changeViewMode(\"window\");\n        },\n      },\n    ],\n  });\n  const moveToActionGroup = createDefaultActionGroup({\n    id: MOVE_TO_ACTION_GROUP_ID,\n    title: \"Move to\",\n    children: anchors.map(\n      (anchor): ActionDefinition => ({\n        id: `TW.MoveTo.${anchor.id}`,\n        title: getAnchorName(anchor),\n        icon: <PlatformIcon icon={`actions/${anchor.id}`} />,\n        isDisabled:\n          state.anchor === anchor.anchor && state.isSplit === anchor.isSplit,\n        actionPerformed: () => {\n          moveToSide(anchor);\n        },\n      })\n    ),\n  });\n  actions.push(\n    {\n      id: FOCUS_EDITOR_ACTION_ID,\n      title: `Focus ${mainContentTitle}`, // in intellij it says \"Focus Editor\" but it's not generic enough.\n      actionPerformed: () => {\n        focusMainContent();\n      },\n    },\n    {\n      id: HIDE_ACTIVE_WINDOW_ACTION_ID,\n      title: \"Hide\",\n      icon: <PlatformIcon icon=\"general/hideToolWindow\" />,\n      actionPerformed: () => {\n        hide();\n      },\n    },\n    {\n      id: MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n      title: \"Maximize Tool Window\", // Should be \"Restore Tool Window Size if the window is currently maximized\n      actionPerformed: () => {\n        // TODO(release): either remove the action or implement it\n        alert(\"Not implemented\");\n      },\n    },\n    {\n      id: REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n      title: \"Remove from Sidebar\",\n      actionPerformed: () => {\n        remove();\n      },\n    },\n    viewModeActionGroup,\n    moveToActionGroup\n  );\n  if (state.viewMode === \"float\") {\n    actions.push({\n      id: DOCK_TOOL_WINDOW_ACTION_ID,\n      title: \"Dock\",\n      icon: (\n        <PlatformIcon\n          icon={`actions/${\n            anchors.find(\n              ({ anchor, isSplit }) =>\n                anchor === state.anchor && isSplit === state.isSplit\n            )?.id\n          }`}\n        />\n      ),\n      actionPerformed: () => {\n        changeViewMode(\"docked_pinned\");\n      },\n    });\n  }\n  if (state.viewMode !== \"float\" && state.viewMode !== \"window\") {\n    const resizeGroup = createDefaultActionGroup({\n      id: TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n      title: \"Resize\",\n      children: [],\n    });\n    if (isHorizontalToolWindow(state.anchor)) {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n        title: \"Stretch to bottom\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"bottom\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n        title: \"Stretch to top\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"top\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n    } else {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n        title: \"Stretch to left\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"left\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n        title: \"Stretch to right\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"right\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n    }\n    actions.push(resizeGroup);\n  }\n  return activeToolWindowActionGroup;\n}\n","import React from \"react\";\nimport { ActionDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport {\n  getViewModeType,\n  ToolWindowRefValue,\n  ToolWindowsState,\n} from \"@intellij-platform/core/ToolWindows\";\nimport {\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\ninterface DefaultToolWindowActionsProps {\n  toolWindowsState: Readonly<ToolWindowsState>;\n  toolWindowsRef: React.RefObject<ToolWindowRefValue>;\n  /**\n   * Used when creating ActivateToolWindow action for each tool window.\n   */\n  getPresentation?: (key: React.Key) =>\n    | {\n        title: string;\n        icon: React.ReactNode;\n      }\n    | undefined;\n}\n\nexport const getActivateToolWindowActionId = (id: string) =>\n  `Activate${id.replace(\" \", \"\")}Window`;\n\n/**\n * Provides default tool windows actions:\n * - Hide all tool windows\n * - Activate{id}Window action for each window\n * - Jump to last tool window\n *\n * @see also {@link DefaultToolWindows}\n */\nexport function useToolWindowsActions({\n  toolWindowsState,\n  toolWindowsRef,\n  getPresentation,\n}: DefaultToolWindowActionsProps) {\n  const isAnySideWindowWindowOpen = (state: Readonly<ToolWindowsState>) =>\n    Object.values(state.windows).some(\n      ({ isVisible, viewMode }) =>\n        isVisible && getViewModeType(viewMode) !== \"float\"\n    );\n  const windowIds = Object.keys(toolWindowsState.windows).map(\n    (key) => `${key}`\n  );\n  const activateToolWindowActions = windowIds.map(\n    (id: string, index): ActionDefinition => {\n      const { title, icon } = getPresentation?.(id) || {};\n      return {\n        id: getActivateToolWindowActionId(id),\n        title: title || `${getOrdinal(index)} window`,\n        icon,\n        description: `Activate ${title || getOrdinal(index)} window`,\n        actionPerformed: () => {\n          if (\n            toolWindowsState.windows[id]?.isVisible &&\n            !toolWindowsRef.current?.hasFocus(id)\n          ) {\n            toolWindowsRef.current?.focus(id);\n          } else {\n            toolWindowsRef.current?.changeState((state) => state.toggle(id));\n          }\n        },\n      };\n    }\n  );\n  const actions: ActionDefinition[] = [\n    ...activateToolWindowActions,\n    {\n      id: HIDE_ALL_WINDOWS_ACTION_ID,\n      title: isAnySideWindowWindowOpen(toolWindowsState)\n        ? \"Hide All Windows\"\n        : \"Restore windows\",\n      actionPerformed: () => {\n        toolWindowsRef.current?.changeState((state) => {\n          if (isAnySideWindowWindowOpen(state)) {\n            return state.hideAll();\n          } else {\n            return state.restoreWindows();\n          }\n        });\n        // Because windows have autofocus behaviour, a timeout is set. Not sure how reliable it is.\n        // TODO: replace effect-based auto focus behaviour with something better, maybe controlled by ToolWindows\n        //  component, and when a tool window is opened.\n        setTimeout(() => {\n          toolWindowsRef.current?.focusMainContent();\n        });\n      },\n    },\n    {\n      id: JUMP_TO_LAST_WINDOW_ACTION_ID,\n      title: \"Jump to Last Tool Window\",\n      isDisabled: toolWindowsState.lastFocusedKey == null,\n      actionPerformed: () => {\n        toolWindowsRef.current?.focusLastActiveWindow();\n      },\n    },\n  ];\n  return actions;\n}\n\nfunction getOrdinal(n: number) {\n  let ord = [\"st\", \"nd\", \"rd\"];\n  let exceptions = [11, 12, 13];\n  let nth =\n    ord[(n % 10) - 1] == undefined || exceptions.includes(n % 100)\n      ? \"th\"\n      : ord[(n % 10) - 1];\n  return n + nth;\n}\n","import React, {\n  CSSProperties,\n  MouseEvent,\n  useContext,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { styled, css } from \"../styled\";\nimport {\n  StyledHorizontalSeparator,\n  StyledSeparator,\n  StyledVerticalSeparator,\n} from \"../StyledSeparator\";\nimport { useOverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/useOverflowObserver\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { Overlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { StyledPopupContainer } from \"@intellij-platform/core/Popup/Popup\";\nimport { mergeProps } from \"@react-aria/utils\";\n\ntype ToolbarBorderProp =\n  | true\n  | \"horizontal\"\n  | \"vertical\"\n  | \"bottom\"\n  | \"top\"\n  | \"left\"\n  | \"right\";\n\nexport type ToolbarProps = {\n  children: React.ReactNode;\n  orientation?: \"vertical\" | \"horizontal\";\n  border?: ToolbarBorderProp;\n  style?: CSSProperties;\n  className?: string;\n} & (\n  | {\n      orientation: \"vertical\";\n    }\n  | {\n      orientation?: \"horizontal\";\n      /**\n       * Defines how the toolbar should handle its children when there is not enough room\n       * to fit all:\n       * - popup: the overflowed children will be hidden behind a show more arrow icon that\n       *   shows the rest of the items in a popup.\n       * - wrap: children will be wrapped so that they fit the available width/height\n       **/\n      overflowBehavior?: \"popup\" | \"wrap\";\n    }\n);\n\nconst borderStyle = ({ border }: { border?: ToolbarBorderProp }) =>\n  border &&\n  css`\n    border-style: solid;\n    border-color: ${({ theme }) => theme.commonColors.borderColor};\n    border-width: ${border === true ? \"1px\" : borderPropToCssProp[border]};\n  `;\n\nconst StyledToolbar = styled.div<{\n  border?: ToolbarBorderProp;\n}>`\n  display: inline-flex;\n  box-sizing: border-box;\n  overflow: hidden;\n  // NOTE: in the original implementation, there is no empty space between buttons, but buttons have kind of an\n  // invisible left padding, which is mouse-intractable, but doesn't visually seem a part of the button.\n  // Although implementable, it didn't seem necessary to follow the exact same thing. Margin should be fine.\n  gap: 4px;\n  ${borderStyle}\n  ${StyledSeparator}:first-child {\n    display: none;\n  }\n  ${StyledSeparator}:last-child {\n    display: none;\n  }\n`;\n\nconst borderPropToCssProp: Record<\n  Exclude<ToolbarBorderProp, boolean>,\n  CSSProperties[\"borderWidth\"]\n> = {\n  top: \"1px 0 0 0\",\n  bottom: \"0 0 1px 0\",\n  right: \"0 1px 0 0\",\n  left: \"0 0 0 1px\",\n  horizontal: \"0 1px\",\n  vertical: \"1px 0\",\n};\n\nconst SIDE_PADDING = 3;\nconst END_PADDING = 4;\n\nconst StyledShowMoreButton = styled.button`\n  all: unset;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${borderStyle};\n`;\n\nconst StyledHorizontalToolbar = styled(StyledToolbar)`\n  padding: ${SIDE_PADDING}px ${END_PADDING}px;\n  max-width: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-width: -webkit-fill-available;\n  ${StyledHorizontalSeparator} {\n    margin: 1px 0;\n  }\n  ${StyledShowMoreButton} {\n    margin-right: -${END_PADDING}px;\n  }\n`;\n\nconst StyledVerticalToolbar = styled(StyledToolbar)`\n  flex-direction: column;\n  max-height: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-height: -webkit-fill-available;\n  padding: ${END_PADDING}px ${SIDE_PADDING}px;\n  ${StyledVerticalSeparator} {\n    margin: 0 1px;\n  }\n  ${StyledShowMoreButton} {\n    margin-bottom: -${END_PADDING}px;\n  }\n`;\n\nconst StyledToolbarContent = styled.div<{\n  wrap?: boolean;\n  firstOverflowedIndex: number;\n}>`\n  box-sizing: inherit;\n  display: inherit;\n  flex-direction: inherit;\n  flex-wrap: ${({ wrap }) => (wrap ? \"wrap\" : \"nowrap\")};\n  gap: inherit;\n  max-height: inherit;\n  max-width: inherit;\n  min-height: 0;\n  min-width: 0;\n\n  ${({ firstOverflowedIndex }) =>\n    /**\n     * The hidden styles should be in a way that the hidden element:\n     * - occupies its space in the document layout.\n     * - doesn't capture mouse events. (e.g. a half-overflowing hidden element shouldn't show tooltip)\n     * - remains accessible to screen readers.\n     */\n    css`\n      > ${firstOverflowedIndex === 0\n          ? \"*\"\n          : `:nth-child(${firstOverflowedIndex}) ~ *`} {\n        opacity: 0 !important;\n        pointer-events: none !important;\n      }\n    `}\n`;\n// This can be used in other places if use-cases are raised for keeping orientation in the context.\nconst OrientationContext = React.createContext<\"horizontal\" | \"vertical\">(\n  \"horizontal\"\n);\n\n/**\n * ## Toolbar API/Implementation notes\n *\n * ### Handling Overflow\n *\n * Handling the overflow popup on DOM-level, allows for a simple and flexible implementation that doesn't\n * require any coupling between Toolbar and components like IconButton. Other components can also similarly be\n * rendered inside toolbar without adopting any specific API. It's worth noting that any generic approach based\n * on children react nodes instead of children DOM nodes will have many edge cases and will involve assumptions\n * that will limit the API of toolbar. Also, any approach based on moving dom nodes to the overflow popup will\n * conflict with React owning the DOM.\n *\n * #### Assumption\n *\n * Since the overflow popup renders the same `children`, and items in the toolbar and popup overflow are made\n * visible/hidden based on the index of DOM nodes, it's important than children deterministically results in the\n * same dom structure. i.e. if a component in children randomly renders different number of root dom nodes in\n * each render, it can cause issues in hiding/showing elements.\n *\n * ### Orientation\n * A few reasons for not having separate `HorizontalToolbar` and `VerticalToolbar` components instead of `Toolbar` with\n * `orientation` prop:\n * - From usage side, a single `Toolbar` component is considered a more discoverable API.\n * - Separate components would require abstracting common parts which unnecessarily adds to complexity.\n *   The amount of branching to handle the differences is considered ok, at the current state of the component.\n */\n\n/**\n * @description\n * A toolbar is a container for {@link IconButton} and similar UI components.\n *\n * ## Features:\n * - A toolbar can be horizontal or vertical\n * - When there is not enough space for all children, toolbar shows an arrow icon, which shows the overflowing\n *   items in a popup, upon mouseover.\n *   Optionally, overflow can be wrapped into multiple lines, in horizontal toolbars.\n *\n * @example\n * <Toolbar>\n *   <IconButton aria-label=\"Show Diff\">\n *     <PlatformIcon icon=\"actions/diff\" />\n *   </IconButton>\n *   </Toolbar>\n */\nexport const Toolbar: React.FC<ToolbarProps> = ({\n  border,\n  orientation = \"horizontal\",\n  ...props\n}): React.ReactElement => {\n  const overflowBehavior =\n    orientation === \"horizontal\" && \"overflowBehavior\" in props\n      ? props.overflowBehavior\n      : null;\n  const rootProps = { style: props.style, className: props.className };\n  const ref = useRef<HTMLDivElement>(null);\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const showMoreButtonRef = useRef<HTMLButtonElement>(null);\n  const StyledToolbar =\n    orientation === \"horizontal\"\n      ? StyledHorizontalToolbar\n      : StyledVerticalToolbar;\n  const { overflowedElements } = useOverflowObserver(ref, { threshold: 0.8 });\n  const [isOverflowPopupVisible, setOverflowPopupVisible] = useState(false);\n  const [popupHeight, setPopupHeight] = useState(30);\n  const [firstOverflowedChildIndex, setFirstOverflowedChildIndex] =\n    useState<number>(-1);\n  const firstOverflowedChildRef = useRef<HTMLElement | undefined>();\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      const childElements = [...ref.current.children].filter(\n        (node): node is HTMLElement => node instanceof HTMLElement\n      );\n      const firstOverflowedChild = childElements.findIndex((child) =>\n        overflowedElements.includes(child)\n      );\n      setFirstOverflowedChildIndex(firstOverflowedChild);\n      firstOverflowedChildRef.current = childElements[firstOverflowedChild];\n    }\n  }, [overflowedElements]);\n\n  useLayoutEffect(() => {\n    if (overlayRef.current && popupHeight !== overlayRef.current.offsetHeight) {\n      setPopupHeight(overlayRef.current.offsetHeight);\n    }\n  });\n\n  const { overlayProps } = useOverlayPosition({\n    isOpen: isOverflowPopupVisible,\n    placement: \"bottom left\",\n    offset:\n      // in lack of positioning options for aligning bottom and left of of the overflow popup with the bottom and left\n      // of the toolbar itself, we have to measure the popup height, and use offset to achieve the same\n      orientation === \"horizontal\"\n        ? -popupHeight + SIDE_PADDING + 1\n        : -popupHeight + 1,\n    crossOffset:\n      orientation === \"horizontal\" ? -(SIDE_PADDING + 2) : -(SIDE_PADDING + 1),\n    containerPadding: 0,\n    shouldFlip: false,\n    targetRef: orientation === \"horizontal\" ? ref : showMoreButtonRef,\n    overlayRef: overlayRef,\n    onClose: () => {\n      setOverflowPopupVisible(false);\n    },\n  });\n\n  const showOverflowPopup = () => {\n    setOverflowPopupVisible(true);\n  };\n\n  const toolbarProps = {\n    onMouseMove: (event: MouseEvent) => {\n      const firstOverflowedElement = firstOverflowedChildRef.current;\n      if (!firstOverflowedElement) {\n        return;\n      }\n      const shouldShow =\n        orientation === \"vertical\"\n          ? event.clientY > firstOverflowedElement.getBoundingClientRect().top\n          : event.clientX > firstOverflowedElement.getBoundingClientRect().left;\n      if (shouldShow !== isOverflowPopupVisible) {\n        setOverflowPopupVisible(shouldShow);\n      }\n    },\n    onMouseLeave: () => {\n      if (isOverflowPopupVisible) {\n        setOverflowPopupVisible(false);\n      }\n    },\n  };\n  const toolbarOverflowPopupProps = {\n    onMouseEnter: () => setOverflowPopupVisible(true),\n    onMouseLeave: () => setOverflowPopupVisible(false),\n  };\n  return (\n    <OrientationContext.Provider value={orientation}>\n      <StyledToolbar\n        border={border}\n        {...mergeProps(rootProps, toolbarProps)}\n        role=\"toolbar\"\n      >\n        <StyledToolbarContent\n          ref={ref}\n          role=\"presentation\"\n          firstOverflowedIndex={firstOverflowedChildIndex}\n          wrap={overflowBehavior === \"wrap\"}\n        >\n          {props.children}\n        </StyledToolbarContent>\n        {overflowedElements.length > 0 && (\n          <StyledShowMoreButton\n            ref={showMoreButtonRef}\n            tabIndex={-1}\n            onMouseEnter={showOverflowPopup}\n          >\n            <PlatformIcon icon=\"ide/link\" />\n          </StyledShowMoreButton>\n        )}\n      </StyledToolbar>\n      {isOverflowPopupVisible && overflowedElements.length > 0 && (\n        // Maybe more accessible to reuse the entire Popup here? it would require more flexible API to handle mouseleave though\n        // Note: we could also render the whole toolbar with the same props and only orientation being overwritten,\n        // but it has the risk of infinite overlay opening in some edge cases, and that level of generality doesn't\n        // seem to be necessary, at least at the moment.\n        <OrientationContext.Provider value=\"horizontal\">\n          <Overlay>\n            <StyledPopupContainer\n              ref={overlayRef}\n              {...mergeProps(overlayProps, toolbarOverflowPopupProps)}\n            >\n              <ToolbarInOverlay\n                border\n                firstVisibleIndex={\n                  orientation === \"vertical\"\n                    ? firstOverflowedChildIndex\n                    : undefined\n                }\n              >\n                {props.children}\n              </ToolbarInOverlay>\n            </StyledPopupContainer>\n          </Overlay>\n        </OrientationContext.Provider>\n      )}\n    </OrientationContext.Provider>\n  );\n};\n\nconst ToolbarInOverlay = styled(StyledHorizontalToolbar)<{\n  firstVisibleIndex?: number;\n}>`\n  ${({ firstVisibleIndex }) =>\n    firstVisibleIndex &&\n    css`\n      ${StyledSeparator}:nth-child(${firstVisibleIndex + 1}) {\n        display: none;\n      }\n      > :not(:nth-child(${firstVisibleIndex}) ~ *) {\n        display: none;\n      }\n    `};\n`;\n\n/**\n * Separator to be used between items in a toolbar.\n */\nexport const ToolbarSeparator = (): React.ReactElement => {\n  const orientation = useContext(OrientationContext);\n  return orientation === \"horizontal\" ? (\n    <StyledHorizontalSeparator />\n  ) : (\n    <StyledVerticalSeparator />\n  );\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionHelpTooltipProps {\n  actionName: React.ReactNode;\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action Help\"\n * @see {@link ActionTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionHelpTooltip = ({\n  actionName,\n  helpText,\n  shortcut,\n  link,\n}: ActionHelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n      <Tooltip.Description>{helpText}</Tooltip.Description>\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionTooltipProps {\n  actionName: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action\"\n * @see {@link ActionHelpTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionTooltip = ({\n  actionName,\n  shortcut,\n}: ActionTooltipProps): JSX.Element => {\n  return (\n    <Tooltip>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n    </Tooltip>\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { TooltipTriggerAndOverlay } from \"@intellij-platform/core/Tooltip/TooltipTriggerAndOverlay\";\nimport { AriaPositionProps, useOverlayPosition } from \"@react-aria/overlays\";\n\ninterface TooltipTriggerProps\n  extends Omit<AriaTooltipTriggerProps, \"trigger\">,\n    Pick<\n      AriaPositionProps,\n      \"placement\" | \"offset\" | \"crossOffset\" | \"shouldFlip\"\n    > {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  /**\n   * Whether to show the tooltip on trigger's focus. By default, tooltip is shown only when the trigger\n   * is hovered, but it can improve accessibility to show the tooltip on focus as well.\n   */\n  showOnFocus?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. Tooltip will be positioned based relative to the trigger.\n * The default tooltip positioning is based on cursor, which is implemented by {@link TooltipTrigger}\n */\nexport const PositionedTooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset = 8,\n  showOnFocus,\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const triggerRef = useRef<HTMLElement>(null);\n\n  const { overlayProps, updatePosition } = useOverlayPosition({\n    ...props,\n    overlayRef,\n    targetRef: triggerRef,\n    offset,\n    isOpen: state.isOpen,\n    onClose: state.close,\n  });\n\n  // A workaround for a mysterious issue that happens only in docusaurus build.\n  // The ref value is not up-to-date, when the effect runs.\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(updatePosition);\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      tooltipOverlayProps={overlayProps}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      showOnFocus={showOnFocus}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, { ForwardedRef, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n  className?: string;\n}\n\n// Providing default value for paddings, based on intellijlaf theme. In Intellij Platform, themes extend either\n// intellijlaf or darcula. Which means some properties can be omitted in the custom theme, relying on the values\n// in the base theme. This is not how theming works here, at the moment, and there are other similar issues, but\n// this is just a mitigation for one case, spacing in tooltip.\nconst DEFAULT_TEXT_BORDER_INSETS = \"0.5rem 0.8125rem 0.625rem 0.625rem\";\nconst DEFAULT_SMALL_TEXT_BORDER_INSETS = \"0.375rem 0.75rem 0.4375rem 0.625rem\";\n\nconst StyledTooltip = styled.div<{ multiline?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${({ theme }) =>\n    theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\")};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\") ||\n        DEFAULT_TEXT_BORDER_INSETS\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\") ||\n        DEFAULT_SMALL_TEXT_BORDER_INSETS};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") ? \"1px\" : \"0px\"};\n  border-color: ${({ theme }) =>\n    theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\")};\n  ${WINDOW_SHADOW};\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { state, isInteractive } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  return (\n    <StyledTooltip\n      multiline={multiline}\n      {...tooltipProps}\n      className={props.className}\n      ref={ref}\n    >\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React from \"react\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\n\ninterface TooltipContextObject {\n  state: TooltipTriggerState;\n  isInteractive: boolean;\n}\n\nexport const TooltipContext = React.createContext<TooltipContextObject | null>(\n  null\n);\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { TooltipTriggerAndOverlay } from \"@intellij-platform/core/Tooltip/TooltipTriggerAndOverlay\";\n\nexport interface TooltipTriggerProps\n  extends Omit<AriaTooltipTriggerProps, \"isOpen\" | \"defaultOpen\" | \"trigger\"> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}.\n * Showing tooltip on focus and controlled open state are not supported at the moment, based on how tooltip works in the\n * reference impl, and since tooltip is positioned based on cursor position. Positioning the tooltip based on cursor\n * position requires tooltip to be opened on hover. That's why neither controlling opened state nor showing the tooltip\n * on focus are supported here. {@link PositionedTooltipTrigger} allows for positioning the tooltip with respect to the\n * trigger element, and offers more options.\n */\nexport const TooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const triggerRef = useRef<HTMLElement>(null);\n  const theme = useTheme();\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  const { overlayProps, updatePosition } = useMouseEventOverlayPosition({\n    overlayRef,\n    isOpen: state.isOpen,\n    placement: \"bottom left\",\n    shouldFlip: true,\n    offset: theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20,\n  });\n\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(() => {\n        updatePosition();\n      });\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      tooltipOverlayProps={overlayProps}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      /**\n       * If we want to support showing tooltip on focus, or if we want to allow controlled open state, we should let it\n       * be positioned by the trigger element in that case, rather than mouse position.\n       * One solution would be to use useOverlayPosition as well, and conditionally use the right `overlayProps`, based on\n       * whether the position determined by mouse is within `triggerRef.current?.getBoundingClientRect()`. Another way\n       * (maybe better) would be to have `useMouseEventOverlayPosition` accept `bounds` or `containerBounds`, which if\n       * passed, makes sure the position is kept within that boundary. Outside positions would be mapped to the closest\n       * point on the border of the boundary.\n       */\n      showOnFocus={false}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, {\n  HTMLAttributes,\n  HTMLProps,\n  ReactElement,\n  RefObject,\n  useState,\n} from \"react\";\nimport { useTooltipTrigger as useAriaTooltipTrigger } from \"@react-aria/tooltip\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { Overlay } from \"@react-aria/overlays\";\nimport { mergeProps, useLayoutEffect } from \"@react-aria/utils\";\nimport { TooltipContext } from \"@intellij-platform/core/Tooltip/TooltipContext\";\n\ninterface TooltipTriggerBaseProps {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * props to be applied on the tooltip overlay, for positioning.\n   */\n  tooltipOverlayProps: HTMLProps<HTMLDivElement>;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  trigger:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  state: TooltipTriggerState;\n\n  showOnFocus?: boolean;\n\n  overlayRef: RefObject<HTMLDivElement>;\n  triggerRef: RefObject<HTMLElement>;\n  isDisabled?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. It doesn't handle tooltip positioning, and so shouldn't be used\n * directly. {@param tooltipOverlayProps} should be used to apply the intended positioning.\n *\n * TODO: Implement timeout-based auto-hide (https://jetbrains.github.io/ui/controls/tooltip/#19)\n * TODO: shadow\n */\nexport const TooltipTriggerAndOverlay = ({\n  tooltip,\n  trigger,\n  state,\n  tooltipOverlayProps,\n  overlayRef,\n  triggerRef,\n  showOnFocus,\n  ...props\n}: TooltipTriggerBaseProps): JSX.Element => {\n  const [isInteractive, setInteractive] = useState(false);\n  const { triggerProps, tooltipProps } = useTooltipTrigger(\n    props,\n    // In Intellij Platform. The tooltip hides right away. We follow the same, unless the tooltip is interactive.\n    // Maybe something to rethink if it's worth following the reference impl for.\n    { ...state, close: isInteractive ? state.close : () => state.close(true) },\n    triggerRef\n  );\n\n  if (!showOnFocus) {\n    delete triggerProps.onFocus;\n  }\n\n  useLayoutEffect(() => {\n    setInteractive(\n      overlayRef.current?.querySelector(\n        'a, button, [role=\"button\"], [role=link]'\n      ) !== null\n    );\n  });\n  return (\n    <>\n      {normalizeChildren(trigger, { ...triggerProps, ref: triggerRef })}\n      {state.isOpen && !props.isDisabled && (\n        <Overlay>\n          <TooltipContext.Provider value={{ state, isInteractive }}>\n            <div\n              {...mergeProps(\n                tooltipOverlayProps,\n                // Is it ok to apply tooltip props on this wrapper?\n                tooltipProps\n              )}\n              ref={overlayRef}\n            >\n              {tooltip}\n            </div>\n          </TooltipContext.Provider>\n        </Overlay>\n      )}\n    </>\n  );\n};\n\nfunction normalizeChildren(\n  children: TooltipTriggerBaseProps[\"trigger\"],\n  triggerProps: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n) {\n  if (typeof children === \"function\") {\n    return children(triggerProps);\n  }\n  if (React.isValidElement(children) && typeof children.type === \"string\") {\n    return React.cloneElement(children, triggerProps);\n  }\n  return <FocusableProvider {...triggerProps}>{children}</FocusableProvider>;\n}\n\n/**\n * A wrapper around react-aria's useTooltipTrigger, adjusting it for Intellij Platform.\n */\nconst useTooltipTrigger: typeof useAriaTooltipTrigger = (props, state, ref) => {\n  const { triggerProps, tooltipProps } = useAriaTooltipTrigger(\n    props,\n    state,\n    ref\n  );\n  // onPointerDown returned from the underlying usePress stops propagation which messes with some usages of tooltip\n  // like in tab or tool window stripe button. We replace onPointerDown handler with a similar handler that closes\n  // the tooltip.\n  triggerProps.onPointerDown = () => {\n    if (!(ref.current instanceof HTMLInputElement)) {\n      state.close(true);\n    }\n  };\n  /**\n   * onMouseDown is preventDefault-ed which interferes with functionality of the tooltip trigger, in use cases like\n   * tool window stripe button. Note that since pointerDown is handled for calling the tooltip trigger's onPressStart\n   * handler (which hides the tooltip), there is no issue in excluding onMouseDown, because it's only used to preventDefault\n   * the event, because of some edge cases focus handling which is not our concern.\n   */\n  delete triggerProps.onMouseDown;\n\n  return {\n    triggerProps,\n    tooltipProps,\n  };\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ValidationTooltipProps {\n  children: React.ReactNode;\n  /**\n   * @default error\n   */\n  type?: \"error\" | \"warning\";\n}\n\nconst StyledValidationTooltip = styled(Tooltip)`\n  box-shadow: none;\n  padding: 0.25rem 0.5rem; // from ComponentValidator class in the reference impl\n  max-width: ${({ theme }) =>\n    `${theme.value<number>(\"ValidationTooltip.maxWidth\")}px`};\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.errorBackground\")};\n  border: 1px solid\n    ${({ theme }) => theme.color(\"ValidationTooltip.errorBorderColor\")};\n`;\n\nconst StyledWarningValidationTooltip = styled(StyledValidationTooltip)`\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBackground\")};\n  border-color: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBorderColor\")};\n`;\n\n/**\n * Tooltip to be used for validation error messages\n * @see https://jetbrains.github.io/ui/principles/validation_errors/\n */\nexport const ValidationTooltip = ({\n  type = \"error\",\n  children,\n}: ValidationTooltipProps): JSX.Element => {\n  const Component =\n    type === \"error\" ? StyledValidationTooltip : StyledWarningValidationTooltip;\n  return <Component multiline>{children}</Component>;\n};\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n}: {\n  item: Node<T>;\n}) => {\n  return (\n    <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n      <TreeNode key={item.key} item={item} />\n    </SpeedSearchItemHighlightsProvider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\nimport { useCollectionRef } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { StyledTree } from \"../StyledTree\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { SpeedSearchTreeNode } from \"./SpeedSearchTreeNode\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps;\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    { fillAvailableSpace = false, treeRef, ...props }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(\n      { ...props, disallowEmptySelection: !props.allowEmptySelection },\n      treeRef\n    );\n    useCollectionRef(props, state);\n    const ref = useForwardedRef(forwardedRef);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    stickySearch: props.stickySearch,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    ref,\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (\n        [\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key) &&\n        !hasAnyModifier(e)\n      ) {\n        speedSearch.clear();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList)`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import React, { Key, MutableRefObject } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport type TreeContextType<T> = {\n  state: TreeState<T>;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { TREE_ICON_SIZE } from \"./TreeNodeIcon\";\n\nexport const StyledTreeNode = styled(StyledListItem).attrs({ as: \"div\" })<{\n  level: number;\n}>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n  padding-right: 0.25rem;\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"Tree.foreground\" as UnknownThemeProp<\"Tree.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"Tree.selectionForeground\" as UnknownThemeProp<\"Tree.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"Tree.selectionBackground\" as UnknownThemeProp<\"Tree.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"Tree.selectionInactiveForeground\" as UnknownThemeProp<\"Tree.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"Tree.selectionBackgroundInactive\" as UnknownThemeProp<\"Tree.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n    };\n  }}\n`;\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\nimport { StyledTreeNode } from \"@intellij-platform/core/Tree/StyledTreeNode\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n  showAsFocused?: boolean;\n};\n\nexport function TreeNode<T>({ item }: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isContainerFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n  const ariaProps = {\n    role: \"treeitem\",\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }, ariaProps),\n  };\n}\n","import React, { Key, RefObject, useMemo, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { FocusEvents } from \"@react-types/shared/src/events\";\nimport { FocusStrategy } from \"@react-types/shared/src/selection\";\n\nexport interface SelectableTreeProps<T>\n  extends DOMProps,\n    Omit<FocusEvents, \"onFocusChange\"> {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n\n  allowEmptySelection?: boolean;\n\n  autoFocus?: boolean | FocusStrategy;\n\n  showAsFocused?: boolean;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  {\n    onAction,\n    onFocus,\n    onBlur,\n    autoFocus,\n    showAsFocused,\n    ...props\n  }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    selectOnFocus: true,\n    autoFocus,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    if (focusedKey == null) {\n      event.continuePropagation();\n      return;\n    }\n    const item = state.collection.getItem(focusedKey);\n    const isExpandable = item.hasChildNodes;\n    const expanded = state.expandedKeys.has(focusedKey);\n    const isDisabled = state.disabledKeys.has(focusedKey);\n    if (isDisabled) {\n      event.continuePropagation();\n      return;\n    }\n\n    props?.onNodeKeyDown?.(event, item);\n\n    const shouldToggle =\n      !hasAnyModifier(event) &&\n      (event.key === \"Enter\" ||\n        (event.key === \"ArrowLeft\" && expanded) ||\n        (event.key === \"ArrowRight\" && !expanded));\n\n    if (isExpandable && shouldToggle) {\n      event.preventDefault();\n      state.toggleKey(focusedKey);\n    } else if (event.key === \"Enter\") {\n      onAction?.(focusedKey);\n    } else {\n      // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n      // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n      // inputs when the propagation is not prevented.\n      // Also, selectionKeyDown is not accurate in handling actions like \"select all\". e.g. it takes 'cmd+shift+a' too,\n      // as select all which can conflict with action system. So we don't call it if there are multiple modifiers.\n      const hasAtMostOneModifier =\n        [event.metaKey, event.ctrlKey, event.shiftKey, event.altKey].filter(\n          (i) => i\n        ).length < 2;\n      if (hasAtMostOneModifier) {\n        selectionKeyDown?.(event);\n      }\n      event.continuePropagation();\n    }\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused: Boolean(focused || showAsFocused),\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      showAsFocused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps,\n      { onFocus, onBlur, role: \"tree\" }\n    ),\n    treeContext,\n    focused,\n  };\n}\n","//@ts-nocheck\n/**\n * Not exported from @react-stately/tree, but needed in the custom implementation of useTreeState\n */\n\nimport { Key } from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","import { Node } from \"@react-types/shared\";\nimport { Key } from \"react\";\n\n/**\n * given a node, returns keys of all consecutive single children\n */\nexport function getSingleChildrenKeys<T>(\n  node: Node<T> | null | undefined\n): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive<T>(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n): Key[] {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nconst isExpandable = <T>(node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager,\n  SelectionManagerOptions,\n} from \"@react-stately/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key } from \"react\";\n\nexport class TreeSelectionManager extends SelectionManager {\n  private readonly collection: Collection<Node<unknown>>;\n\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState,\n    options?: SelectionManagerOptions\n  ) {\n    super(collection, state, options);\n    this.collection = collection;\n  }\n\n  expandSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { expandKeys } = this.getExpandAndShrinkKeys(node);\n      if (expandKeys.length > 0) {\n        this.setSelectedKeys([...this.selectedKeys, ...expandKeys]);\n      }\n    }\n  }\n  shrinkSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { shrinkKeys } = this.getExpandAndShrinkKeys(node);\n      if (shrinkKeys.length > 0) {\n        this.setSelectedKeys(\n          [...this.selectedKeys].filter((key) => !shrinkKeys.includes(key))\n        );\n      }\n    }\n  }\n\n  private getExpandAndShrinkKeys(node: Node<unknown>) {\n    return this.recursivelyGetExpandAndShrinkKeys(\n      node,\n      [...this.collection.getKeys()],\n      null\n    );\n  }\n  /**\n   * Starting from a node, traverses the tree up, until it reaches the root of the fully selected subtree that includes\n   * the starting node. The root itself may or may not be selected. Returns:\n   * - keys to be added to selection, when expanding selection\n   * - keys to be removed from selection, when shrinking selection\n   */\n  private recursivelyGetExpandAndShrinkKeys(\n    node: Node<unknown>,\n    keys: Array<Key>,\n    previousChild: Key | null\n  ): { expandKeys: Key[]; shrinkKeys: Key[] } {\n    const parent =\n      node && node.parentKey ? this.collection.getItem(node.parentKey) : null;\n    const newKeys = keys.filter((key) => key !== previousChild);\n    const parentDescendants = parent\n      ? getAllDescendants(parent, newKeys).map(({ key }) => key)\n      : this.getAllRoots().flatMap((key) =>\n          key !== node.key\n            ? getAllDescendants(this.collection.getItem(key), newKeys)\n                .map(({ key }) => key)\n                .concat(key)\n            : []\n        );\n    if (parent && parentDescendants.every((key) => this.isSelected(key))) {\n      return this.recursivelyGetExpandAndShrinkKeys(parent, keys, node.key);\n    }\n    const descendants = getAllDescendants(\n      node,\n      keys.filter((key) => key !== previousChild)\n    ).map(({ key }) => key);\n\n    return {\n      expandKeys: descendants.some((key) => !this.isSelected(key))\n        ? descendants\n        : !this.isSelected(node.key)\n        ? [node.key]\n        : parentDescendants,\n      shrinkKeys:\n        parentDescendants.length > 0 &&\n        parentDescendants.every((key) => this.isSelected(key))\n          ? parentDescendants\n          : this.isSelected(node.key) && previousChild\n          ? [node.key]\n          : descendants.filter((key) => this.isSelected(key)),\n    };\n  }\n\n  private getAllRoots() {\n    return [...this.collection.getKeys()].filter(\n      (key) => this.collection.getItem(key).parentKey == null\n    );\n  }\n}\n\nfunction getAllDescendants<T>(\n  node: Node<T>,\n  stopKeys: Array<React.Key>\n): Node<T>[] {\n  const childNodes = (node.hasChildNodes ? [...node.childNodes] : []).filter(\n    (node) => stopKeys.includes(node.key)\n  );\n  return node.hasChildNodes\n    ? childNodes.concat(\n        childNodes.map((node) => getAllDescendants(node, stopKeys)).flat()\n      )\n    : [];\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeProps as _TreeProps, TreeState } from \"@react-stately/tree\";\nimport {\n  TreeRefValue,\n  useTreeRef,\n} from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport { useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport { TreeCollection as _TreeCollection } from \"./__copied__TreeCollection\";\nimport { getSingleChildrenKeys } from \"./getSingleChildrenKeys\";\nimport { TreeSelectionManager } from \"@intellij-platform/core/Tree/TreeSelectionManager\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport class TreeCollection<T> extends _TreeCollection<T> {\n  public readonly rootKeys: Key[];\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys: Set<Key> }\n  ) {\n    super(nodes, { expandedKeys });\n    this.rootKeys = Array.from(nodes).map(({ key }) => key);\n  }\n\n  getAllExpandableKeys(): Set<Key> {\n    const rootNodes = this.rootKeys\n      .map((key) => this.getItem(key))\n      .filter(notNull);\n    return this.recursivelyAddExpandableKeys(rootNodes, new Set<Key>());\n  }\n\n  private recursivelyAddExpandableKeys(\n    nodes: Iterable<Node<T>>,\n    result: Set<Key>\n  ) {\n    for (const node of nodes) {\n      if (node?.hasChildNodes) {\n        result.add(node.key);\n        this.recursivelyAddExpandableKeys(node.childNodes, result);\n      }\n    }\n    return result;\n  }\n}\nexport interface TreeProps<T>\n  extends _TreeProps<T>,\n    CollectionCacheInvalidationProps {\n  childExpansionBehaviour?: \"multi\" | \"single\";\n}\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n *\n * Similar to (and initially copied from) useTreeState from @react-stately/tree, but with the following changes:\n * - Supports exposing some imperative API via ref.\n *   Could be done via a wrapper too.\n * - Different onToggle implementation with two adjustments to match Intellij Platform:\n *   - Collapsing a key collapses all descendants as well.\n *   - Expanding a single-child node will recursively expand all single-child descendants.\n *   Couldn't be done with a wrapper in a clean and optimal way. Access to setExpandedKey is not provided. We would need\n *   to either maintain a new state for expanded keys and ignore the one returned from the wrapped hook, or\n *   inefficiently call the returned `toggleKey` function many times.\n * - Supports collection invalidation via CollectionCacheInvalidationProps\n *   Perhaps not the most important addition, but not possible to be done via a wrapper.\n * - Uses TreeSelectionManager instead of the default SelectionManager, which implements expand/shrink selection.\n *   Could be done in a wrapper, with a little hack. Would need to replace selection manager.\n * - returned `collection` is of type `TreeCollection` (which is an improved version of react-stately `TreeCollection`),\n *   instead of the more generic `Collection`.\n */\nexport function useTreeState<T extends object>(\n  { childExpansionBehaviour = \"multi\", ...props }: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRefValue>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined!,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange!\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  // @ts-expect-error imprecise typing in @react-stately/selection\n  let tree = useCollection<T, TreeCollection<T>>(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  const selectionManager = new TreeSelectionManager(\n    tree as Collection<Node<T>>,\n    selectionState\n  );\n\n  useTreeRef({ selectionManager, setExpandedKeys, tree }, treeRef);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      // @ts-expect-error imprecise typing in @react-stately/selection\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const toggleKey = (key: Key) => {\n    let newExpandedKeys = toggleTreeNode(\n      tree as Collection<Node<T>>,\n      expandedKeys,\n      key\n    );\n    if (childExpansionBehaviour === \"single\") {\n      const expandedSiblings = getSiblings(tree, key).filter(\n        (aKey) => aKey !== key && expandedKeys.has(aKey)\n      );\n      newExpandedKeys = expandedSiblings.reduce((expandedKeys, expandedKey) => {\n        return toggleTreeNode(\n          tree as Collection<Node<T>>,\n          expandedKeys,\n          expandedKey\n        );\n      }, newExpandedKeys);\n    }\n    setExpandedKeys(newExpandedKeys);\n  };\n\n  return {\n    collection: tree as Collection<Node<T>>,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n    selectionManager,\n  };\n}\n\nfunction getChildItems<T>(node: Node<T>): Node<T>[] {\n  const childNodes = [...(node.childNodes || [])];\n  const childItems = childNodes.filter(({ type }) => type === \"item\");\n  const sectionItems = childNodes.filter(({ type }) => type === \"section\");\n\n  return childItems.concat(sectionItems.flatMap(getChildItems));\n}\n\nfunction getRootItemKeys(tree: TreeCollection<unknown>) {\n  return tree.rootKeys\n    .map((key) => tree.getItem(key))\n    .filter(notNull)\n    .flatMap(getChildItems)\n    .map(({ key }) => key);\n}\n/**\n * Returns the siblings of an item in tree, ignoring sections.\n * Disclaimer: The code is done quick and dirty and in a rush. Unpleasant code, good candidate for refactoring :D\n */\nfunction getSiblings(tree: TreeCollection<unknown>, key: Key): Key[] {\n  const parentKey = tree.getItem(key)?.parentKey;\n  if (!parentKey) {\n    return [...tree.rootKeys].concat(getRootItemKeys(tree));\n  }\n  let parent = parentKey ? tree.getItem(parentKey) : null;\n  if (parent?.type === \"item\") {\n    return getChildItems(parent).map(({ key }) => key);\n  }\n  const siblings: Key[] = [];\n  while (parent) {\n    siblings.push(...getChildItems(parent).map(({ key }) => key));\n    if (parent.type === \"section\") {\n      if (parent.parentKey) {\n        parent = tree.getItem(parent.parentKey);\n      } else {\n        siblings.push(...getRootItemKeys(tree));\n        parent = null;\n      }\n    } else {\n      parent = null;\n    }\n  }\n  return Array.from(new Set(siblings));\n}\nfunction toggleTreeNode(\n  tree: Collection<Node<unknown>>,\n  expandedKeys: Set<Key>,\n  key: Key\n): Set<Key> {\n  // toggling a non-expandable node should be no-op\n  if (!expandedKeys.has(key) && !tree.getItem(key).hasChildNodes) {\n    return expandedKeys;\n  }\n  const newKeys = toggleKey(expandedKeys, key);\n  // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n  // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n  for (const aKey of newKeys) {\n    if (tree.getItem(aKey) == null) {\n      newKeys.delete(aKey);\n    }\n  }\n\n  // If we are toggling it open, expand all expandable single-child items\n  if (newKeys.has(key)) {\n    for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n      newKeys.add(aKey);\n    }\n  }\n  return newKeys;\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeSelectionManager } from \"./TreeSelectionManager\";\nimport { TreeCollection } from \"./useTreeState\";\n\nexport interface TreeRefValue {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n\n  /**\n   * Extends selection to all siblings of the currently focused node.\n   */\n  expandSelection(): void;\n  /**\n   * Shrinks selection towards currently focused node.\n   */\n  shrinkSelection(): void;\n\n  expandAll(): void;\n  collapseAll(): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef<T extends {}>(\n  props: {\n    tree: TreeCollection<T>;\n    selectionManager: TreeSelectionManager;\n    setExpandedKeys: (keys: Set<Key>) => void;\n  },\n  forwardedRef?: ForwardedRef<TreeRefValue>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n        expandSelection() {\n          latestState.current.selectionManager.expandSelection();\n        },\n        shrinkSelection() {\n          latestState.current.selectionManager.shrinkSelection();\n        },\n        expandAll() {\n          latestState.current.setExpandedKeys(\n            latestState.current.tree.getAllExpandableKeys()\n          );\n        },\n        collapseAll() {\n          const { tree, setExpandedKeys, selectionManager } =\n            latestState.current;\n          const focusedKey = selectionManager.focusedKey;\n          setExpandedKeys(new Set());\n\n          // Find the root node that is a grandparent of focused node, and focus/select it.\n          // NOTE: this behaviour of updating selection when nodes are collapsed is something to be fixed in general,\n          // and then this custom logic here would be not necessary.\n          if (focusedKey && !tree.rootKeys.includes(focusedKey)) {\n            let item = tree.getItem(focusedKey);\n            while (item?.parentKey != null) {\n              item = tree.getItem(item.parentKey);\n            }\n            if (item) {\n              selectionManager.setFocusedKey(item.key);\n              if (selectionManager.isSelected(focusedKey)) {\n                selectionManager.select(item.key);\n              }\n            }\n          }\n        },\n      };\n    },\n    []\n  );\n}\n","import { LayoutNode, ListLayout } from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport { InvalidationContext, Rect, Size } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = super.buildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","import React, { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { RefObject } from \"react\";\nimport {\n  ActionDefinition,\n  CommonActionId,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TreeRefValue } from \"@intellij-platform/core/Tree\";\n\n/**\n * Returns action definitions object for common tree actions\n * TODO: add example in docs\n */\nexport function useTreeActions({\n  treeRef,\n}: {\n  treeRef: RefObject<TreeRefValue>;\n}): Array<ActionDefinition> {\n  return [\n    {\n      id: CommonActionId.EXPAND_ALL,\n      title: \"Expand All\",\n      icon: <PlatformIcon icon=\"actions/expandall\" />,\n      actionPerformed: () => {\n        treeRef.current?.expandAll();\n      },\n    },\n    {\n      id: CommonActionId.COLLAPSE_ALL,\n      title: \"Collapse All\",\n      icon: <PlatformIcon icon=\"actions/collapseall\" />,\n      actionPerformed: () => {\n        treeRef.current?.collapseAll();\n      },\n    },\n    {\n      id: CommonActionId.EXPAND_SELECTION,\n      title: \"Expand Selection\",\n      actionPerformed: () => {\n        treeRef.current?.expandSelection();\n      },\n    },\n    {\n      id: CommonActionId.SHRINK_SELECTION,\n      title: \"Shrink Selection\",\n      // TODO: disable if selection is only one item. Would need more data from treeRef. Maybe after treeRef is refactored\n      //  to implement/extend CollectionRef\n      actionPerformed: () => {\n        treeRef.current?.shrinkSelection();\n      },\n    },\n  ];\n}\n","import { Key } from \"react\";\n\ninterface SetState<T> {\n  items: Iterable<T>;\n\n  toggle(key: T): void;\n\n  add(...key: T[]): void;\n\n  delete(...key: T[]): void;\n}\n\nexport type SelectionState = \"NotSelected\" | \"Selected\" | \"PartiallySelected\";\n\nexport interface TreeModel<T, K = Key> {\n  rootNodes: ReadonlyArray<T>;\n  getChildren: (root: T) => ReadonlyArray<T> | /*for convenience*/ T | null;\n  getKey: (item: T) => K;\n}\n\nexport interface NestedSelectionState<T> {\n  getSelectionState: (item: T) => SelectionState;\n  toggle: (item: T) => void;\n}\n\nconst collectSelectableItems = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>\n) => {\n  const collectedItems: T[] = [];\n  collectSelectableItemsRecursive(item, getChildren, collectedItems);\n  return collectedItems;\n};\nconst collectSelectableItemsRecursive = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>,\n  collectedItems: T[] = []\n) => {\n  const children = getChildren(item);\n  if (children == null) {\n    collectedItems.push(item);\n  } else {\n    children.forEach((child) =>\n      collectSelectableItemsRecursive(child, getChildren, collectedItems)\n    );\n  }\n};\n\n// TODO: maybe change the interface to work with keys instead of items?\nexport class NestedSelection<T extends object, K = Key>\n  implements NestedSelectionState<T>\n{\n  cache = new WeakMap<T, SelectionState>();\n  constructor(private state: SetState<K>, private tree: TreeModel<T, K>) {\n    this.tree = tree;\n    this.state = state;\n  }\n\n  toggle(item: T) {\n    const children = this.tree.getChildren(item);\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    if (isSelectableNode) {\n      this.state.toggle(key);\n    } else {\n      const state = this.getSelectionState(item);\n      const itemsInSubtree = collectSelectableItems(item, (item) =>\n        normalizeChildren(this.tree.getChildren(item))\n      ).map(this.tree.getKey);\n      if (state === \"Selected\") {\n        this.state.delete(...itemsInSubtree);\n      } else {\n        this.state.add(...itemsInSubtree);\n      }\n    }\n  }\n\n  getSelectionState(item: T): SelectionState {\n    // caching can be refactored into a nice little decorator like WeakMapCached which would be applicable on a method\n    // with a single object argument.\n    const cachedState = this.cache.get(item);\n    if (cachedState) {\n      return cachedState;\n    }\n    const children = normalizeChildren(this.tree.getChildren(item));\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    let state: SelectionState;\n    if (isSelectableNode) {\n      state = [...this.state.items].includes(key) ? \"Selected\" : \"NotSelected\";\n    } else {\n      const allDescendantsStates = children.map((child) =>\n        this.getSelectionState(child)\n      );\n      if (allDescendantsStates.every((state) => state === \"NotSelected\")) {\n        state = \"NotSelected\";\n      } else {\n        state = allDescendantsStates.every((state) => state === \"Selected\")\n          ? \"Selected\"\n          : \"PartiallySelected\";\n      }\n    }\n    this.cache.set(item, state);\n    return state;\n  }\n}\n\nfunction normalizeChildren<T>(children: T | ReadonlyArray<T> | null) {\n  if (children) {\n    return ([] as ReadonlyArray<T>).concat(children);\n  }\n  return null;\n}\n","import React, { ForwardedRef } from \"react\";\nimport {\n  SpeedSearchTree,\n  SpeedSearchTreeProps,\n  TreeRefValue,\n} from \"@intellij-platform/core/Tree\";\nimport { NestedSelectionState } from \"./NestedSelection\";\n\n/**\n * Experimental wrapper component around SpeedSearchTree, which allows rendering {@link TreeNodeCheckbox} in nodes.\n *\n * See [design-decisions.md](../Tree/design-decisions.md) for more thoughts about how should different features\n * like this be supported.\n *\n * @alpha\n */\nexport const SpeedSearchTreeWithCheckboxes = React.forwardRef(\n  <T extends object>(\n    {\n      nestedSelection,\n      cacheInvalidation,\n      onNodeKeyDown,\n      ...props\n    }: SpeedSearchTreeProps<T> & {\n      nestedSelection: NestedSelectionState<T>;\n    },\n    ref: ForwardedRef<HTMLDivElement>\n  ): React.ReactElement => {\n    const otherInvalidators =\n      typeof cacheInvalidation === \"object\"\n        ? cacheInvalidation.invalidators\n        : [];\n    return (\n      <SpeedSearchTree\n        ref={ref}\n        {...props}\n        // instead of passing cacheInvalidation, a better approach could be to provide nestedSelection as context.\n        cacheInvalidation={{\n          invalidators: [nestedSelection, ...otherInvalidators],\n        }}\n        onNodeKeyDown={(event, item) => {\n          if (event.key === \" \") {\n            nestedSelection.toggle(item.value);\n          }\n          onNodeKeyDown?.(event, item);\n        }}\n      />\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { Checkbox } from \"@intellij-platform/core/Checkbox\";\nimport { TreeContext } from \"@intellij-platform/core/Tree/TreeContext\";\nimport { SelectionState } from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport styled from \"styled-components\";\n\nexport type TreeNodeCheckboxProps<T extends unknown> = {\n  selectionState?: SelectionState;\n  selectItemOnPress?: boolean;\n  onToggle: () => void;\n  // maybe a isDisabled prop to be merged with isDisabled from the item?\n};\n\nconst StyledCheckboxWrapper = styled.span`\n  margin-right: 0.125rem;\n  display: inline-flex;\n`;\n\n/**\n * Checkbox to be used with {@link SpeedSearchTreeWithCheckboxes}. `SpeedSearchTreeWithCheckboxes` doesn't add the\n * checkboxes by default to the nodes, which makes it more flexible in terms of which nodes should have checkbox, or\n * it's exact placement within the tree rows.\n *\n * TreeNodeCheckbox renders a Checkbox with a few extras:\n * - `aria-label` set based on the encompassing item's textValue\n * - `isSelected` and `isIndeterminate` set based on `selectionState`\n * - `isDisabled` is set based in disabled state of the item.\n * - The encompassing item will be selected upon press, if `selectItemOnPress` is `true` (default is `true`).\n * - Small styling adjustment achieved by a wrapper StyledListIconWrapper.\n *\n * @see SpeedSearchTreeWithCheckboxes\n * @see useNestedSelectionState\n *\n * NOTE: this component currently uses TreeContext, to get a hold of selectionManager. If a more abstract component\n * like CollectionCheckbox is needed in the future, we can refactor TreeContext also to something more abstract like\n * CollectionContext which is provided by all such components like List, Tree or Table.\n */\nexport const TreeNodeCheckbox = <T extends unknown>({\n  selectionState,\n  onToggle,\n  selectItemOnPress = true,\n}: TreeNodeCheckboxProps<T>) => {\n  const treeContext = useContext(TreeContext);\n  const itemContext = useContext(ItemStateContext);\n  if (!itemContext) {\n    throw new Error(\"TreeNodeCheckbox is rendered outside tree nodes.\");\n  }\n\n  return (\n    <StyledCheckboxWrapper>\n      <Checkbox\n        preventFocus\n        aria-label={`Select ${itemContext.node.textValue}`}\n        isSelected={selectionState === \"Selected\"}\n        isIndeterminate={selectionState === \"PartiallySelected\"}\n        isDisabled={itemContext.isDisabled}\n        onChange={() => {\n          onToggle();\n          // this if and the whole need for treeContext could be avoided if event.stopPropagation() was not hard coded\n          // in useToggle: https://github.com/adobe/react-spectrum/blob/0d007bca9417c4b7b86fafd5842871bf997bd4c0/packages/@react-aria/toggle/src/useToggle.ts#L46\n          // An improvement could be to replace Checkbox with CheckboxIcon, and simply handle press on it (potential TODO)\n          if (treeContext && itemContext && selectItemOnPress) {\n            treeContext.state.selectionManager.setFocusedKey(\n              itemContext.node.key\n            );\n            treeContext.state.selectionManager.setFocused(true);\n            treeContext.state.selectionManager.setSelectedKeys([\n              itemContext.node.key,\n            ]);\n          }\n        }}\n      />\n    </StyledCheckboxWrapper>\n  );\n};\n","import { Key, useMemo } from \"react\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { useControllableSet } from \"@intellij-platform/core/utils/useSet\";\nimport {\n  NestedSelection,\n  NestedSelectionState,\n  TreeModel,\n} from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\n\n/**\n * A state management util for a selectable list of items with an arbitrary nested grouping. In other words,\n * it manages selection of leaves in a tree.\n *\n * tree is represented as a `getChildren` function that returns children for a given root. if null is passed it\n * returns the top level nodes.\n * Important Note: the tree structure that can be generated by calling `getChildren` function is supposed to be\n * **immutable**. in other words, any change in the tree, should result in a new array of top level items.\n */\n\nexport const useNestedSelectionState = <T extends object, K = Key>(\n  tree: TreeModel<T, K>,\n  {\n    selectedKeys: selectedKeysProp,\n    defaultSelectedKeys,\n    onSelectedKeysChange,\n  }: ControlledStateProps<{\n    selectedKeys: Set<K>;\n  }>\n): NestedSelectionState<T> => {\n  const [selectedKeys, selectedKeysSetter] = useControllableSet(\n    selectedKeysProp!, // bad typing in useControlledState\n    defaultSelectedKeys || new Set(),\n    onSelectedKeysChange! // bad typing in useControlledState\n  );\n  const treeRef = useLatest(tree);\n\n  return useMemo(\n    () =>\n      new NestedSelection<T, K>(\n        { items: selectedKeys, ...selectedKeysSetter },\n        treeRef.current\n      ),\n    [selectedKeys, tree.rootNodes]\n  );\n};\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n\n      ///////////////////////////////////////////////////// MODIFICATION ///////////////////////////////////////////////\n      // Fixing https://github.com/adobe/react-spectrum/issues/4391\n      if (\n        options.selectOnFocus &&\n        (autoFocus === \"first\" || autoFocus === \"last\")\n      ) {\n        manager.replaceSelection(focusedKey);\n      }\n      /////////////////////////////////////////////////// END OF MODIFICATION //////////////////////////////////////////\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import { useSelectableItem as useOriginalSelectableItem } from \"@react-aria/selection\";\nimport { MouseEventHandler } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\n/**\n * A wrapper around useSelectableItem, which adjusts for intellij platform nuances:\n * - Selects item with right clicks as well, which allows ContextMenuContainer to be used with any collection component\n *   without the need for built-in context-menu support in such components. We won't need this if we move to a built-in\n *   context-menu support for List,Tree, etc.\n * @private\n */\nexport const useSelectableItem: typeof useOriginalSelectableItem = (\n  options\n) => {\n  const onContextMenu: MouseEventHandler<HTMLElement> = (e) => {\n    if (!options.selectionManager.isSelected(options.key)) {\n      options.selectionManager.select(options.key, {\n        type: \"press\",\n        pointerType: \"mouse\",\n        target: e.currentTarget,\n        shiftKey: e.shiftKey,\n        metaKey: e.metaKey,\n        ctrlKey: e.ctrlKey,\n        altKey: e.altKey,\n      });\n    }\n  };\n  const result = useOriginalSelectableItem(options);\n  return {\n    ...result,\n    itemProps: mergeProps(result.itemProps, { onContextMenu }),\n  };\n};\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\nexport type FocusScopeRef = { focus: (forceFocusFirst?: boolean) => void };\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<FocusScopeRef>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (forceFocusFirst?: boolean) => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        if (forceFocusFirst) {\n          return focusManager.focusFirst();\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","/**\n * Properly typed filter function for filtering out null/undefined items in array.\n */\nexport const notNull = <T>(\n  item: T | undefined | null\n): item is NonNullable<T> => item != null;\n","/**\n * IMPORTANT: this is a copy of a non-exported file from @react-aria/interactions\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { runAfterTransition } from \"@react-aria/utils\";\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\ntype State = \"default\" | \"disabled\" | \"restoring\";\n\nlet state: State = \"default\";\nlet savedUserSelect = \"\";\n\nexport function disableTextSelection() {\n  if (state === \"default\") {\n    savedUserSelect = document.documentElement.style.webkitUserSelect;\n    document.documentElement.style.webkitUserSelect = \"none\";\n  }\n\n  state = \"disabled\";\n}\n\nexport function restoreTextSelection() {\n  // If the state is already default, there's nothing to do.\n  // If it is restoring, then there's no need to queue a second restore.\n  if (state !== \"disabled\") {\n    return;\n  }\n\n  state = \"restoring\";\n\n  // There appears to be a delay on iOS where selection still might occur\n  // after pointer up, so wait a bit before removing user-select.\n  setTimeout(() => {\n    // Wait for any CSS transitions to complete so we don't recompute style\n    // for the whole page in the middle of the animation and cause jank.\n    runAfterTransition(() => {\n      // Avoid race conditions\n      if (state === \"restoring\") {\n        if (document.documentElement.style.webkitUserSelect === \"none\") {\n          document.documentElement.style.webkitUserSelect =\n            savedUserSelect || \"\";\n        }\n\n        savedUserSelect = \"\";\n        state = \"default\";\n      }\n    });\n  }, 300);\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { disableTextSelection, restoreTextSelection } from \"./textSelection\";\nimport { useLatest } from \"../useLatest\";\n\nexport type XY = { x: number; y: number };\nexport type UseMoveOptions<S> = {\n  /**\n   * the amount of movement (in pixels) after which the move should start. It prevents interference\n   * with simple click (or more generally, press) events, and provides better UX.\n   * @default 0\n   */\n  dragThreshold?: number;\n  disabled?: boolean;\n  onMoveStart: (args: { from: XY }) => S;\n  onMove: (args: { from: XY; to: XY; movement: XY; startState: S }) => void;\n  onMoveEnd?: (args: { startState: S }) => void;\n};\n\n// TODO: cleanup if unmount happens during drag.\n// TODO: Better even handling for touch devices?\n//  wrapping `useMove` from react-aria to just add support for movement threshold should be the\n//  way to go, but there are a few problems:\n//    - it seemed a little buggy in the example here: https://react-spectrum.adobe.com/react-aria/useMove.html\n//    - the API is not great in a sense that it only gives the diff in last movement.\n//      Also onMoveStart doesn't give the initial position, so it's not possible to even calculate\n//\n// TODO: move should be finished by pressing Escape. onMoveCancel maybe?\n/**\n * Similar to https://react-spectrum.adobe.com/react-aria/useMove.html, with slightly different\n * features and API.\n * NOTE: initially the API was designed in a way that onMove and onMove end callbacks were\n * returned from onMoveStart, instead of being directly passed in the options.\n * This would enable capturing the initial state of each move transaction, by defining whatever\n * variable in onMoveStart and closing over them by onMove and onMoveEnd.\n * The problem with this approach was that although you could capture the initial state of the\n * movement, by closure, any other variable in the outer scopes was also closed over, and you were\n * stuck with the values from the particular render in which the movement was started.\n * Of course, you could work around it by using refs, but it would be unintuitive.\n * So because of that issue, it's redesigned to have onMoveStart, onMove, and onMoveEnd all\n * directly passed as options, but you can return anything from `onMoveStart` which will be passed\n * to onMove and onMoveEnd as `startState`.\n */\nexport function useMove<S>({\n  dragThreshold = 0,\n  disabled,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n}: UseMoveOptions<S>): { onMouseDown?: MouseEventHandler } {\n  const handlersRef = useLatest({ onMove, onMoveEnd });\n\n  const onMouseDown = (event: React.MouseEvent) => {\n    disableTextSelection();\n    if (event.button !== 0) {\n      restoreTextSelection();\n      return;\n    }\n    const from = { x: event.pageX, y: event.pageY };\n    let dragStarted = false;\n    let startState: S;\n\n    const onMouseMove = (event: MouseEvent) => {\n      const { pageX: x, pageY: y } = event;\n      const movement = { x: x - from.x, y: y - from.y };\n      const isDraggedEnough =\n        Math.abs(movement.x) >= dragThreshold ||\n        Math.abs(movement.y) >= dragThreshold;\n      if (isDraggedEnough && !dragStarted) {\n        dragStarted = true;\n        startState = onMoveStart({ from });\n      }\n      if (dragStarted) {\n        handlersRef.current.onMove({\n          from,\n          to: { x: from.x + movement.x, y: from.y + movement.y },\n          movement,\n          startState,\n        });\n      }\n    };\n    document.addEventListener(\"mousemove\", onMouseMove);\n\n    document.addEventListener(\n      \"mouseup\",\n      () => {\n        restoreTextSelection();\n        if (dragStarted) {\n          handlersRef.current.onMoveEnd?.({ startState });\n        }\n        document.removeEventListener(\"mousemove\", onMouseMove);\n      },\n      { once: true }\n    );\n  };\n  return disabled ? {} : { onMouseDown };\n}\n","import React from \"react\";\nimport { isMac } from \"@react-aria/utils\";\n\n/**\n * TODO: The current name is not accurate, and can be confusing. Rename to something better.\n */\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n\nexport function hasAnyModifier(e: KeyboardEvent | React.KeyboardEvent) {\n  return e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n}\n","import { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport interface OverflowObserverRecord {\n  target: Element;\n  overflowedElements: Element[];\n  previouslyOverflowedElements: Element[];\n}\n\nexport type OverflowObserverCallback = (\n  change: OverflowObserverRecord,\n  observer: OverflowObserver\n) => void;\n\n/**\n * Allows observing the list of overflowing children of a given target element.\n * An `IntersectionObserver` is created for each target to observe the intersection between the target and each child\n * element. The child elements are observed/unobserved by the intersection observer as they are added/removed to the\n * DOM, which is observed using a `MutationObserver`.\n * `IntersectionObserver` options such as `rootMargin` are supported, to fine tune what should be considered as\n * overflowed.\n *\n * TODO: add a takeRecords method to allow processing pending mutations before disconnect\n * TODO: maybe add direction option?\n *\n */\nexport class OverflowObserver {\n  private mutationObserver: MutationObserver;\n  private data: Map<\n    Element,\n    {\n      intersectionObserver: IntersectionObserver;\n      currentOverflowElements: Element[];\n    }\n  > = new Map();\n\n  constructor(private callback: OverflowObserverCallback) {\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n        if (!(target instanceof Element)) {\n          return;\n        }\n        mutation.removedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.unobserve(node);\n          }\n        });\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.observe(node);\n          }\n        });\n      });\n    });\n  }\n\n  observe(target: Element, options: Omit<IntersectionObserverInit, \"root\">) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n\n    const intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        const data = this.data.get(target);\n        const newHiddenElements = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : undefined\n          )\n          .filter(notNull);\n        const newVisibleElements = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : null\n          )\n          .filter(notNull);\n\n        //  Also cover this in Toolbar with a test case\n        const previouslyOverflowedElements =\n          data?.currentOverflowElements || [];\n        const overflowedElements = previouslyOverflowedElements\n          .filter((element) => !newVisibleElements.includes(element))\n          .concat(newHiddenElements)\n          .filter((element) => {\n            // In some cases some elements may be hidden by some styles (e.g. the first/last separator in a toolbar).\n            // It doesn't make sense to report them as overflowed.\n            const isHidden =\n              element instanceof HTMLElement &&\n              element.offsetWidth === 0 &&\n              element.offsetHeight === 0;\n            return !isHidden;\n          });\n        this.callback(\n          {\n            previouslyOverflowedElements,\n            overflowedElements: overflowedElements,\n            target,\n          },\n          this\n        );\n        if (data) {\n          data.currentOverflowElements = overflowedElements;\n        }\n      },\n      {\n        ...options,\n        root: target,\n      }\n    );\n    [...(target?.children || [])].forEach((childElement) => {\n      intersectionObserver.observe(childElement);\n    });\n    this.data.set(target, {\n      intersectionObserver,\n      currentOverflowElements: [],\n    });\n    this.mutationObserver.observe(target, {\n      childList: true,\n    });\n  }\n\n  unobserve(target: Element) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n  }\n\n  disconnect() {\n    [...this.data.values()].forEach(({ intersectionObserver }) =>\n      intersectionObserver.disconnect()\n    );\n    this.data = new Map();\n    this.mutationObserver.disconnect();\n  }\n}\n","import { RefObject, useEffect, useState } from \"react\";\nimport { OverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/OverflowObserver\";\n\n/**\n * Given a ref to a scrollable container, returns the child elements that are not completely visible and\n * are off view because of scroll.\n * @param scrollableContainerRef\n * @param threshold\n */\nexport function useOverflowObserver(\n  scrollableContainerRef: RefObject<HTMLElement>,\n  {\n    threshold = 0.9,\n    rootMargin = \"0px\",\n  }: Omit<IntersectionObserverInit, \"root\"> = {}\n) {\n  const [overflowedElements, setOverflowedElements] = useState<Element[]>([]);\n\n  useEffect(() => {\n    const overflowObserver = new OverflowObserver((change) => {\n      setOverflowedElements(change.overflowedElements);\n    });\n    overflowObserver.observe(scrollableContainerRef.current!, {\n      rootMargin,\n      threshold,\n    });\n    return () => {\n      overflowObserver.disconnect();\n    };\n  }, [\n    /**\n     * It's ok and needed to have the ref value as a dependency here. We don't know if ref is attached to different\n     * elements in each render, and it's ok that it's not a state, since we don't change it, and it's not supposed to\n     * change without a rerender\n     **/\n    scrollableContainerRef.current,\n  ]);\n\n  return {\n    overflowedElements,\n  };\n}\n","import { Key } from \"react\";\n\ntype TreeNodeFn<T> = (root: T) => null | readonly T[];\n\nexport const getExpandAllKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: T[]\n) => {\n  const keys: Key[] = roots.map(getKey);\n  const processItem = (node: T | null) => {\n    const children = node ? getChildren(node) : null;\n    if (node == null || !children) {\n      return;\n    }\n    keys.push(getKey(node));\n    children.forEach(processItem);\n  };\n  roots.map(getChildren).flat().forEach(processItem);\n  return keys;\n};\n\nexport const getExpandedToNodesKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: T[],\n  targetNodeKeys: Iterable<Key>\n) => {\n  const targetNodeKeySet = new Set(targetNodeKeys);\n  const expandedKeys: Key[] = [];\n  dfsVisit<T, boolean>(\n    getChildren,\n    (node, childValues) => {\n      const key = getKey(node);\n      const isExpanded: boolean =\n        childValues?.some((childValue) => childValue) ||\n        targetNodeKeySet.has(key);\n      if (isExpanded) {\n        expandedKeys.push(key);\n      }\n      return isExpanded;\n    },\n    roots\n  );\n  return expandedKeys;\n};\n\nexport const dfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, childrenValues: null | R[]) => R,\n  roots: T[]\n) => {\n  const dfs = (node: T): R => {\n    const children = getChildren(node);\n    const values = children?.map(dfs) ?? null;\n    return visit(node, values);\n  };\n  roots.forEach(dfs);\n};\n\nexport const bfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, parentValue: R | null) => R,\n  roots: T[]\n) => {\n  const bfs: typeof visit = (node, parentValue) => {\n    const result = visit(node, parentValue);\n    const children = getChildren(node);\n    children?.map((childNode) => bfs(childNode, result));\n    return result;\n  };\n  return roots.map((root) => bfs(root, null));\n};\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import { useCallback, useLayoutEffect, useRef } from \"react\";\n\n/**\n * Interim solution for non-reactive callbacks, until\n * [useEvent](https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md) (or whatever it will end up being\n * called), becomes available.\n */\nexport function useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  let ref = useRef<typeof fn>();\n  useLayoutEffect(() => {\n    ref.current = fn;\n  });\n  const callback = ((...args: Parameters<T>) =>\n    ref.current?.apply(null, args)) as T;\n  return useCallback<T>(callback, []);\n}\n","import { FocusEventHandler } from \"react\";\nimport { getFocusableTreeWalker } from \"@react-aria/focus\";\n\n/**\n * Provides a focus management mechanism for a container that doesn't retain focus but forwards it to its focusable\n * descendants. More specifically:\n * - When the container gets focused, it automatically focuses the first focusable child element.\n *   The {@param forwardFocus} parameter can be used to customize which element should receive focus.\n * - By default, focus is prevented from returning to the container itself when focus is being moved from a descendant\n *   to the container. {@param ignoreFocusedDescendant} can be set to `true`, to disable this behaviour.\n *   If {@param ignoreFocusedDescendant} is true, focus will be forcibly moved to the first element (or the element\n *   specified by {@param forwardFocus}) when the container gets focused.\n *\n * NOTE: This hook does not make the container element focusable. It only returns the focus event handler that should be\n * passed to the container.\n */\nexport function useFocusForwarder({\n  forwardFocus,\n  ignoreFocusedDescendant = false,\n}: {\n  /**\n   * Called when the container gets focused, to forward focus to the appropriate focusable child element.\n   * If not passed, focus is forwarded to the first focusable element, by default.\n   */\n  forwardFocus?: () => void;\n  ignoreFocusedDescendant?: boolean;\n} = {}) {\n  const onFocus: FocusEventHandler = (event) => {\n    if (event.target !== event.currentTarget) {\n      // only when this container is focused. not when anything inside is focused.\n      return;\n    }\n    const possiblyBlurredElement = event.relatedTarget;\n    if (\n      possiblyBlurredElement instanceof Element &&\n      event.currentTarget?.contains(possiblyBlurredElement) &&\n      !ignoreFocusedDescendant\n    ) {\n      // If anything inside the content is being blurred while the container is getting focused, we don't let focus\n      // go from that element, to the container.\n      if (possiblyBlurredElement instanceof HTMLElement) {\n        possiblyBlurredElement.focus();\n      }\n      return;\n    }\n    if (forwardFocus) {\n      forwardFocus();\n    } else {\n      (\n        getFocusableTreeWalker(event.currentTarget).firstChild() as HTMLElement\n      )?.focus();\n    }\n  };\n  return { focusForwarderProps: { onFocus } };\n}\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useLayoutEffect, useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos = { x: 0, y: 0 };\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = (e) => {\n        lastMouseClientPos = { x: e.clientX, y: e.clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (options.isOpen && targetRef.current) {\n      targetRef.current.style.left = `${lastMouseClientPos.x}px`;\n      targetRef.current.style.top = `${lastMouseClientPos.y}px`;\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e?: React.MouseEvent) => {\n      if (targetRef.current && e) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export class ImmutableSet<T> implements ReadonlySet<T> {\n  readonly size: number;\n  private readonly set: ReadonlySet<T>;\n\n  constructor(values: Iterable<T>) {\n    this.set = new Set(values);\n    this.size = this.set.size;\n  }\n\n  add(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.add(item);\n      });\n    });\n  }\n\n  delete(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.delete(item);\n      });\n    });\n  }\n\n  toggle(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        if (!newValue.delete(item)) {\n          newValue.add(item);\n        }\n      });\n    });\n  }\n\n  clear(): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      newValue.clear();\n    });\n  }\n\n  private setValueWithMutation(\n    mutate: (newValue: Set<T>) => void\n  ): ImmutableSet<T> {\n    const newValue = new Set(this.set);\n    mutate(newValue);\n    return new ImmutableSet(newValue);\n  }\n\n  ////////////////////////////////////////////////// delegated methods /////////////////////////////////////////////////\n  forEach(...args: Parameters<ReadonlySet<T>[\"forEach\"]>): void {\n    return this.set.forEach(...args);\n  }\n\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { useControlledState } from \"@react-stately/utils\";\nimport { useMemo } from \"react\";\nimport { ImmutableSet } from \"./immutableSet\";\n\n/**\n * Creates map interface out of a setter of form (currentValue: Map) => Map\n * Use {@link useControllableSet} instead if you need a Set state in a React component.\n * This is useful for use outside React components, such as state management libraries.\n */\nexport const createSetInterface = <T>(\n  set: (value: (prevState: Set<T>) => Set<T>) => void\n) => ({\n  add: (...values: T[]) =>\n    set(\n      (currentValue) => new Set(new ImmutableSet(currentValue).add(...values))\n    ),\n  delete: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).delete(...values))\n    ),\n  clear: () =>\n    set((currentValue) => new Set(new ImmutableSet(currentValue).clear())),\n  toggle: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).toggle(...values))\n    ),\n});\n\nfunction useStateSetterForSet<T>(\n  setValue: (value: (prevState: Set<T>) => Set<T>, ...args: any[]) => void\n) {\n  return useMemo(() => createSetInterface(setValue), [setValue]);\n}\n\n/**\n * controllable state management for a Set. returns a tuple containing the value and an object with Set functions on it,\n * which would update the state.\n */\nexport const useControllableSet = <T>(\n  valueProp: Set<T> | undefined,\n  defaultValue: Set<T> = new Set(),\n  onChange: ((newValue: Set<T>) => void) | undefined\n) => {\n  const [value, setValue] = useControlledState(\n    valueProp!, // bad typing in useControlledState\n    defaultValue,\n    onChange! // bad typing in useControlledState\n  );\n\n  // @ts-expect-error FIXME https://github.com/adobe/react-spectrum/issues/2320\n  return [value, useStateSetterForSet(setValue)] as const;\n};\n","import React from \"react\";\nimport Markdown from \"markdown-to-jsx\";\n// @ts-expect-error ¯\\_(ツ)_/¯\nimport { DocgenInfo } from \"@storybook/addon-docs/dist/ts3.9/lib/docgen/types\";\nimport MDXComponents from \"@theme/MDXComponents\";\nimport { parse } from \"jsdoc-parse-plus\";\n// import { ApiModel, ApiPackage } from \"@microsoft/api-extractor-model\";\n\n// const apiModel: ApiModel = new ApiModel();\n// language=file-reference\n// const apiPackage: ApiPackage = apiModel.loadPackage(\n//   \"../../../jui/temp/core.api.json\"\n// );\n// console.log(\"apiPackage\", ApiPackage);\n\ntype WithDocGenInfo<T = any> = T & {\n  __docgenInfo?: DocgenInfo;\n};\n/**\n * Renders description (aka Summary) of an exported symbol, from it's jsdoc (tsdoc) comment block.\n * The plan is to use the ApiModel created by @microsoft/api-extractor, but there are issues preventing that at the\n * moment. So we are using a fallback implementation which relies on `react-docgen` babel plugin which adds\n * `__docgetInfo` property to all exports.\n */\nexport const ApiDescription = ({\n  of,\n}: {\n  of:\n    | WithDocGenInfo\n    | {\n        render?: WithDocGenInfo /*for ref forwarding components */;\n      };\n}) => {\n  const docgenInfo = of.render?.__docgenInfo || of.__docgenInfo;\n  if (!docgenInfo?.description) {\n    console.log(\"ApiDescription not found for:\", of);\n    // eslint-disable-next-line no-undef\n    if (process.env.NODE_ENV === \"development\")\n      return (\n        <div style={{ background: \"#ffd7d7\" }}>\n          Could not find API description for:\n          <pre style={{ background: \"none\" }}>\n            {JSON.stringify(of, null, 2)}\n          </pre>\n          See the console.\n        </div>\n      );\n    throw new Error(\"API documentation not found.\");\n  }\n  return (\n    <Markdown options={{ overrides: MDXComponents }}>\n      {deLinkify(docgenInfo.description)}\n    </Markdown>\n  );\n};\n\n/**\n * replaces jsdoc @link tags with inline code. Temporary hack until @microsoft/api-extractor-model is used.\n * Example: {@link something} will be converted to `something`\n */\nconst deLinkify = (description: string) => {\n  const comment = toCommentBlock(description);\n  return (parse(comment, [], (link) => `\\`${link.text}\\``).description as any)\n    ?.value;\n};\n\nconst toCommentBlock = (str: string) =>\n  [\"/**\", ...str.split(\"\\n\").map((line) => `* ${line}`), \"*/\"].join(\"\\n\");\n","import Link from \"@docusaurus/Link\";\nimport { useBaseUrlUtils } from \"@docusaurus/useBaseUrl\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledIframe = styled.iframe`\n  width: 100%;\n  border: none;\n`;\n\nconst externalLinkIcon = (\n  <svg\n    width=\"13.5\"\n    height=\"13.5\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 24 24\"\n    className=\"iconExternalLink__-_-node_modules-@docusaurus-theme-classic-lib-next-theme-IconExternalLink-styles-module\"\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"\n    ></path>\n  </svg>\n);\nconst storybookBaseUrl =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:6008\"\n    : \"/storybook\";\n\n/**\n * A component for embedding a story based on storyId.\n *\n * TODO: pass theme based on docusaurus theme.\n */\nexport const EmbeddedStory = ({\n  height = 450,\n  storyId,\n}: {\n  storyId: string;\n  height?: number;\n}) => {\n  const { withBaseUrl } = useBaseUrlUtils();\n  return (\n    <>\n      <Link\n        href={`${storybookBaseUrl}/?path=/story/${storyId}`}\n        target=\"_blank\"\n      >\n        Open in storybook\n        {externalLinkIcon}\n      </Link>\n      <StyledIframe\n        style={{ height }}\n        src={withBaseUrl(\n          `${storybookBaseUrl}/iframe.html?id=${storyId}&args=&viewMode=story`\n        )}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSvg = styled.svg`\n  position: absolute;\n  width: 24px;\n  left: 50%;\n  bottom: 1rem;\n  transform: translate(-50%, 0) rotate(180deg);\n`;\n\nconst StyledExpandButton = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  bottom: 0;\n  background: linear-gradient(0deg, rgba(255, 255, 255, 1), transparent);\n  cursor: pointer;\n  ${StyledSvg} {\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n  &:hover ${StyledSvg} {\n    opacity: 1;\n  }\n`;\nconst StyledContainer = styled.div<{ expanded: boolean }>`\n  position: relative;\n  max-height: ${({ expanded }) => (expanded ? undefined : \"200px\")};\n`;\n\nexport function Expandable({\n  children,\n  expanded,\n  onExpand,\n  isExpandable,\n  setIsExpandable,\n}: {\n  children: React.ReactNode;\n  expanded: boolean;\n  onExpand: () => void;\n  isExpandable: boolean;\n  setIsExpandable: (isExpandable: boolean) => void;\n}) {\n  const ref = useRef<HTMLDivElement>();\n  useEffect(() => {\n    const expandable = ref.current?.scrollHeight > ref.current?.offsetHeight;\n    if (expandable !== isExpandable) {\n      setIsExpandable(expandable);\n    }\n  });\n  return (\n    <StyledContainer ref={ref} expanded={expanded}>\n      {children}\n      {!expanded && isExpandable && (\n        <StyledExpandButton onClick={onExpand}>\n          <StyledSvg viewBox=\"0 0 50 50\">\n            <path\n              fill=\"none\"\n              stroke=\"#000\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M-20 10 0-10l20 20\"\n              transform=\"translate(25 25)\"\n            />\n          </StyledSvg>\n        </StyledExpandButton>\n      )}\n    </StyledContainer>\n  );\n}\n","/**\n * NOTE: this file is copied from Docusaurus repo, to customize the live code blocks UI, since the exported\n * functionality doesn't allow for the needed customizations.\n * Original file: https://github.com/facebook/docusaurus/blob/main/packages/docusaurus-theme-live-codeblock/src/theme/Playground/index.tsx\n */\n\nimport React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport useIsBrowser from \"@docusaurus/useIsBrowser\";\nimport { LiveEditor, LiveError, LivePreview, LiveProvider } from \"react-live\";\nimport Translate from \"@docusaurus/Translate\";\nimport BrowserOnly from \"@docusaurus/BrowserOnly\";\nimport {\n  ErrorBoundaryTryAgainButton,\n  usePrismTheme,\n} from \"@docusaurus/theme-common\";\nimport ErrorBoundary from \"@docusaurus/ErrorBoundary\";\n\nimport type { Props } from \"@theme/Playground\";\nimport type { Props as ErrorProps } from \"@theme/Error\";\n\nimport styles from \"@docusaurus/theme-live-codeblock/lib/theme/Playground/styles.module.css\";\nimport { Expandable } from \"./Expandable\";\nimport {\n  PlatformIcon,\n  IconButton,\n  ThemeProvider,\n  Theme,\n  ActionTooltip,\n  TooltipTrigger,\n} from \"@intellij-platform/core\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\n\nfunction Header({\n  children,\n  icons,\n}: {\n  children: React.ReactNode;\n  icons?: React.ReactNode;\n}) {\n  return (\n    <div className={clsx(styles.playgroundHeader)} style={{ display: \"flex\" }}>\n      <span style={{ flex: 1 }}>{children}</span>\n      {icons}\n    </div>\n  );\n}\n\nfunction LivePreviewLoader() {\n  // Is it worth improving/translating?\n  return <div>Loading...</div>;\n}\n\nfunction ErrorFallback({ error, tryAgain }: ErrorProps): JSX.Element {\n  return (\n    <div className={styles.errorFallback}>\n      <p>{error.message}</p>\n      <ErrorBoundaryTryAgainButton onClick={tryAgain} />\n    </div>\n  );\n}\n\nfunction Preview() {\n  // No SSR for the live preview\n  // See https://github.com/facebook/docusaurus/issues/5747\n  return (\n    <BrowserOnly fallback={<LivePreviewLoader />}>\n      {() => (\n        <>\n          <ErrorBoundary fallback={(params) => <ErrorFallback {...params} />}>\n            <LivePreview />\n          </ErrorBoundary>\n          <LiveError />\n        </>\n      )}\n    </BrowserOnly>\n  );\n}\n\nfunction ResultWithHeader() {\n  return (\n    <>\n      <Header>\n        <Translate\n          id=\"theme.Playground.result\"\n          description=\"The result label of the live codeblocks\"\n        >\n          Result\n        </Translate>\n      </Header>\n      {/* https://github.com/facebook/docusaurus/issues/5747 */}\n      <div className={styles.playgroundPreview}>\n        <Preview />\n      </div>\n    </>\n  );\n}\n\nfunction ThemedLiveEditor({\n  expanded,\n  isExpandable,\n  onExpand,\n  setIsExpandable,\n}: {\n  expanded: boolean;\n  isExpandable: boolean;\n  onExpand: () => void;\n  setIsExpandable: (expandable: boolean) => void;\n}) {\n  const isBrowser = useIsBrowser();\n  return (\n    <Expandable\n      expanded={expanded}\n      isExpandable={isExpandable}\n      onExpand={onExpand}\n      setIsExpandable={setIsExpandable}\n    >\n      <LiveEditor\n        // We force remount the editor on hydration,\n        // otherwise dark prism theme is not applied\n        key={String(isBrowser)}\n        className={styles.playgroundEditor}\n      />\n    </Expandable>\n  );\n}\n\nfunction EditorWithHeader() {\n  const [expanded, setExpanded] = useState(false);\n  const [expandable, setExpandable] = useState(false);\n  return (\n    <>\n      <Header\n        icons={\n          <ThemeProvider theme={new Theme(lightThemeJson as any)}>\n            {(expanded || expandable) && (\n              <TooltipTrigger\n                tooltip={\n                  <ActionTooltip\n                    actionName={expanded ? \"Collapse code\" : \"Expand code\"}\n                  />\n                }\n              >\n                <IconButton\n                  onPress={() => setExpanded((expanded) => !expanded)}\n                >\n                  <PlatformIcon\n                    icon={\n                      expanded ? \"actions/collapseall\" : \"actions/expandall\"\n                    }\n                  />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </ThemeProvider>\n        }\n      >\n        <Translate\n          id=\"theme.Playground.liveEditor\"\n          description=\"The live editor label of the live codeblocks\"\n        >\n          Live Editor\n        </Translate>\n      </Header>\n      <ThemedLiveEditor\n        expanded={expanded}\n        onExpand={() => setExpanded(true)}\n        isExpandable={expandable}\n        setIsExpandable={setExpandable}\n      />\n    </>\n  );\n}\n\nexport default function Playground({\n  children,\n  transformCode,\n  ...props\n}: Props): JSX.Element {\n  const prismTheme = usePrismTheme();\n\n  const noInline = props.metastring?.includes(\"noInline\") ?? false;\n\n  return (\n    <>\n      <div className={styles.playgroundContainer}>\n        <LiveProvider\n          code={children.replace(/\\n$/, \"\")}\n          noInline={noInline}\n          transformCode={transformCode ?? ((code) => `${code};`)}\n          theme={prismTheme}\n          {...props}\n        >\n          <ResultWithHeader />\n          <EditorWithHeader />\n        </LiveProvider>\n      </div>\n    </>\n  );\n}\n","import { styled } from \"../styled\";\n\nexport const SpeedSearchContainer = styled.div`\n  position: relative;\n  overflow: visible;\n  max-height: 100%;\n`;\n","import styled from \"styled-components\";\nimport { SpeedSearchContainer } from \"../SpeedSearch/SpeedSearchContainer\";\n\nexport const CollectionSpeedSearchContainer = styled(SpeedSearchContainer)<{\n  fillAvailableSpace?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ fillAvailableSpace }) => (fillAvailableSpace ? 1 : undefined)};\n`;\n","import { ListState } from \"@react-stately/list\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { HTMLProps, Key, RefObject } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { SpeedSearchPopupProps } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { TextRange } from \"../../TextRange\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport { ListProps, useList } from \"../useList\";\nimport { CollectionSpeedSearchContextValue } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\ninterface UseListProps\n  extends Omit<ListProps, \"keyboardDelegate\" | \"disallowTypeAhead\"> {\n  stickySearch?: boolean;\n}\n\nexport function useSpeedSearchList<T>(\n  props: UseListProps,\n  listState: ListState<T>,\n  ref: RefObject<HTMLElement>\n): {\n  listProps: Omit<HTMLProps<HTMLUListElement>, \"as\" | \"ref\">;\n  searchPopupProps: SpeedSearchPopupProps;\n  focused: boolean;\n  selectionManager: SelectionManager;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n  matches: Map<Key, TextRange[]>;\n} {\n  const { stickySearch } = props;\n\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n    speedSearchContextValue,\n  } = useCollectionSpeedSearch({\n    collection: listState.collection,\n    selectionManager: listState.selectionManager,\n    keyboardDelegate: new ListKeyboardDelegate(\n      listState.collection,\n      listState.disabledKeys,\n      ref\n    ),\n    stickySearch,\n    ref,\n  });\n  const { listProps, focused } = useList(\n    {\n      ...props,\n      disallowTypeAhead: true,\n      keyboardDelegate,\n    },\n    { ...listState, selectionManager },\n    ref\n  );\n\n  return {\n    listProps: mergeProps(listProps, speedSearchContainerProps),\n    matches: speedSearch.matches,\n    focused,\n    selectionManager,\n    speedSearchContextValue,\n    searchPopupProps,\n  };\n}\n","import React, { ForwardedRef } from \"react\";\nimport { AriaListBoxProps } from \"@react-types/listbox\";\nimport {\n  CollectionSpeedSearchContainer,\n  CollectionSpeedSearchContext,\n  SpeedSearchItemHighlightsProvider,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchPopup,\n  SpeedSearch,\n} from \"@intellij-platform/core/SpeedSearch\";\n\nimport { StyledList } from \"../StyledList\";\nimport { ListProps } from \"../List\";\nimport { useSpeedSearchList } from \"./useSpeedSearchList\";\nimport { listItemRenderer } from \"../listItemRenderer\";\nimport { useListState } from \"../useListState\";\nimport { ListItem } from \"../ListItem\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport interface SpeedSearchListProps<T extends object>\n  extends ListProps<T>,\n    SpeedSearchProps {}\n\n/**\n * List component with {@link SpeedSearch}, which is a more advanced version of typeahead.\n */\nexport const SpeedSearchList = React.forwardRef(function SpeedSearchList<\n  T extends object\n>(\n  {\n    allowEmptySelection = false,\n    showAsFocused = false,\n    fillAvailableSpace = false,\n    onAction,\n    ...inputProps\n  }: SpeedSearchListProps<T>,\n  forwardedRef: ForwardedRef<HTMLUListElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n\n  const { listProps, searchPopupProps, focused, speedSearchContextValue } =\n    useSpeedSearchList(props, state, ref);\n\n  return (\n    <CollectionSpeedSearchContainer fillAvailableSpace={fillAvailableSpace}>\n      <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n        <SpeedSearchPopup {...searchPopupProps} />\n        <StyledList\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...listProps}\n        >\n          {[...state.collection].map(\n            listItemRenderer({\n              item: (item) => (\n                <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n                  <ListItem\n                    key={item.key}\n                    item={item}\n                    state={state}\n                    listFocused={showAsFocused || focused}\n                    onAction={() => onAction?.(item.key)}\n                  />\n                </SpeedSearchItemHighlightsProvider>\n              ),\n            })\n          )}\n        </StyledList>\n      </CollectionSpeedSearchContext.Provider>\n    </CollectionSpeedSearchContainer>\n  );\n});\n","import React from \"react\";\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type ActionMenuProps, ActionsMenu } from \"./ActionsMenu\";\n\nexport type ActionGroupMenuProps = Omit<ActionMenuProps, \"actions\"> & {\n  actionGroup: ActionGroup;\n};\n/**\n * Renders children of an action group as a menu.\n */\nexport const ActionGroupMenu = ({\n  actionGroup,\n  ...props\n}: ActionGroupMenuProps) => {\n  return (\n    <ActionsMenu\n      aria-label={actionGroup.title}\n      actions={actionGroup.children}\n      {...props}\n    />\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Green circle indicator used with icons.\n * Reference: platform/execution/src/com/intellij/execution/runners/IndicatorIcon.kt\n */\nexport const StyledIconLiveIndicator = styled.span`\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  border-radius: 1000px;\n  background: #00ff00;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0, 0, 0, 0.4);\n  bottom: 1px;\n  right: 1px;\n`;\n","import { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { SpeedSearchContainer } from \"./SpeedSearchContainer\";\nimport { SpeedSearchPopup } from \"./SpeedSearchPopup\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"./useSpeedSearch\";\n\ninterface Props extends SpeedSearchStateProps {\n  children: React.ReactNode;\n  stickySearch?: boolean;\n  match?: boolean;\n  className?: string;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\" | \"ref\">;\n}\n\n// Maybe no need for this component, now that almost everything is moved to hooks, and a couple of\n// styled components. Then useSpeedSearchState can also be moved to useSpeedSearch\nexport const SpeedSearch = React.forwardRef(function SpeedSearch(\n  {\n    children,\n    stickySearch = false,\n    className,\n    containerProps = {},\n    match,\n    ...otherProps\n  }: Props,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const speedSearchState = useSpeedSearchState(otherProps);\n  const { containerProps: speedSearchContainerProps } = useSpeedSearch(\n    { stickySearch },\n    speedSearchState,\n    ref\n  );\n\n  return (\n    <SpeedSearchContainer\n      /* We might as well use useFocusable. The return type was troublesome in the first try. */\n      tabIndex={-1}\n      ref={ref}\n      {...mergeProps(containerProps, speedSearchContainerProps, { className })}\n    >\n      <SpeedSearchPopup active={speedSearchState.active} match={match}>\n        {speedSearchState.searchTerm}\n      </SpeedSearchPopup>\n      {children}\n    </SpeedSearchContainer>\n  );\n});\n","import React, { ForwardedRef, RefObject, useRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { TreeProps as StatelyTreeProps } from \"@react-stately/tree\";\nimport { StyledTree } from \"./StyledTree\";\nimport { TreeRefValue } from \"./useTreeRef\";\nimport { TreeNode } from \"./TreeNode\";\nimport { TreeContext } from \"./TreeContext\";\nimport { useTreeState } from \"./useTreeState\";\nimport { SelectableTreeProps, useSelectableTree } from \"./useSelectableTree\";\nimport { useTreeVirtualizer } from \"./useTreeVirtualizer\";\nimport { CollectionCacheInvalidationProps } from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport interface TreeProps<T extends object>\n  extends Omit<StatelyTreeProps<T>, \"disallowEmptySelection\">,\n    CollectionCacheInvalidationProps,\n    CollectionRefProps,\n    Omit<SelectableTreeProps<T>, \"keyboardDelegate\" | \"isVirtualized\"> {\n  fillAvailableSpace?: boolean;\n  /**\n   * When true, shows the tree in focused style, even when it's not focused. A common use case is when the tree\n   * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n   * keyboard events as if the tree was focused.\n   */\n  showAsFocused?: boolean;\n  treeRef?: RefObject<TreeRefValue>;\n}\n\n/**\n * TODO:\n *  - Match select all behaviour. Currently, `getSelectAllKeys` in `SelectionManager` returns\n *   all nested keys too. But it's not aligned with Tree implementation in Intellij Platform. And\n *   beside from that, it seems to be a little inconsistent in some edge cases where you select all,\n *   and then deselect a node. Then all of a sudden, all collapsed nested keys are no longer selected.\n */\nexport const Tree = React.forwardRef(\n  <T extends object>(\n    { fillAvailableSpace = false, treeRef, ...props }: TreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(props, treeRef);\n    useCollectionRef(props, state);\n    const ref = useObjectRef(forwardedRef);\n\n    const { treeProps, treeContext } = useSelectableTree(\n      {\n        ...props,\n        isVirtualized: true,\n      },\n      state,\n      ref\n    );\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <StyledTree\n          as={Virtualizer}\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...virtualizerProps}\n          {...treeProps}\n        >\n          {(itemType: string, item: object) => (\n            <TreeNode key={(item as Node<T>).key} item={item as Node<T>} />\n          )}\n        </StyledTree>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarPauseIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarPauseButtonProps {\n  /**\n   * Whether progress is paused.\n   */\n  paused: boolean;\n  /**\n   * Called when progress is paused or resumed.\n   * @param paused `true` when progress is being paused. `false` when resumed.\n   */\n  onPausedChange: (paused: boolean) => void | Promise<unknown>;\n\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n}\n\n/**\n * Pause/Resume icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarPauseButton = ({\n  paused,\n  onPausedChange,\n  small,\n}: ProgressBarPauseButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarPauseIconButton(\n    {\n      onPress: () => onPausedChange(!paused),\n      hoverTooltip: paused ? \"Resume\" : \"Pause\",\n      paused,\n    },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      {...buttonProps}\n      icon={\n        paused\n          ? `process/progressResume${small ? \"Small\" : \"\"}.svg`\n          : `process/progressPause${small ? \"Small\" : \"\"}.svg`\n      }\n    />\n  );\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface HelpTooltipProps {\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Help\"\n * @see {@link ActionTooltip} {@link ActionHelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const HelpTooltip = ({\n  helpText,\n  shortcut,\n  link,\n}: HelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline>\n      <Tooltip.Header>{helpText}</Tooltip.Header>\n      <div>\n        <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>\n      </div>\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as juiComponents from \"@intellij-platform/core\";\nimport darculaThemeJson from \"@intellij-platform/core/themes/darcula.theme.json\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\nimport highContrastThemeJson from \"@intellij-platform/core/themes/HighContrast.theme.json\";\n\nconst LazyExampleApp = React.lazy(() => import(\"jui-example-app/src/App\"));\nconst ExampleApp = () => (\n  // Because ReactLive doesn't render a Suspense around what it renders.\n  <React.Suspense fallback=\"loading\">\n    <LazyExampleApp />\n  </React.Suspense>\n);\nimport React from \"react\";\n\n// Add react-live imports you need here\nconst ReactLiveScope = {\n  React,\n  ...React,\n  ...juiComponents,\n  ExampleApp,\n  darculaThemeJson,\n  lightThemeJson,\n  highContrastThemeJson,\n};\n\nexport default ReactLiveScope;\n","// extracted by mini-css-extract-plugin\nexport default {\"playground\":\"playground_whuD\",\"noPadding\":\"noPadding_tWI2\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Playground from \"./Playground\";\nimport ReactLiveScope from \"@theme/ReactLiveScope\";\nimport CodeBlock from \"@theme-init/CodeBlock\";\nimport clsx from \"clsx\";\nimport styles from \"../Playground/style-overrides.module.css\";\n\nconst withLiveEditor = (Component) => {\n  function WithLiveEditor(props) {\n    if (props.live) {\n      // idea: We can support playground with alternative sources, where each of them will show up as a button\n      // below the default playground. Clicking on buttons will switch to that example. There can be a simple syntax\n      // for embedding multiple sources in one code block which then will be converted into examples here.\n      return <Playground scope={ReactLiveScope} {...props} />;\n    }\n\n    return <Component {...props} />;\n  }\n\n  return WithLiveEditor;\n};\n\nconst withThemeBackground = (Component) => {\n  function WithThemeBackground(props) {\n    const theme = useTheme();\n    const content = <Component {...props} />;\n    const style = {\n      \"--ifm-list-item-margin\": 0,\n    };\n\n    if (props.themed) {\n      style.color = theme.color(\"*.foreground\");\n      style[\"--ifm-pre-background\"] = theme.color(\"*.background\");\n      style[\"--ifm-code-background\"] = \"none\";\n    }\n    return (\n      <div\n        style={style}\n        className={clsx(styles.playground, {\n          [styles.noPadding]: props.noPadding,\n        })}\n      >\n        {content}\n      </div>\n    );\n  }\n\n  return WithThemeBackground;\n};\n\nexport default withThemeBackground(withLiveEditor(CodeBlock));\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Popup';\nexport const metadata = {\n  \"unversionedId\": \"components/Popup\",\n  \"id\": \"components/Popup\",\n  \"title\": \"Popup\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Popup.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Popup\",\n  \"permalink\": \"/jui/docs/components/Popup\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Popup.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"ModalWindow\",\n    \"permalink\": \"/jui/docs/components/ModalWindow\"\n  },\n  \"next\": {\n    \"title\": \"ProgressBar\",\n    \"permalink\": \"/jui/docs/components/ProgressBar\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { ApiDescription } from \"@site/src/components/ApiDescription\";\nimport { EmbeddedStory } from \"@site/src/components/EmbeddedStory\";\nimport { Popup, PopupTrigger } from \"@intellij-platform/core\";\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Live example',\n  id: 'live-example',\n  level: 3\n}, {\n  value: 'Popup',\n  id: 'popup-1',\n  level: 2\n}, {\n  value: 'PopupTrigger',\n  id: 'popuptrigger',\n  level: 2\n}, {\n  value: 'Popup Content',\n  id: 'popup-content',\n  level: 2\n}, {\n  value: 'Popup.Layout',\n  id: 'popuplayout',\n  level: 3\n}, {\n  value: 'Popup.Header',\n  id: 'popupheader',\n  level: 3\n}, {\n  value: 'Custom header',\n  id: 'custom-header',\n  level: 4\n}, {\n  value: 'Hint',\n  id: 'hint',\n  level: 3\n}, {\n  value: 'Sizing and positioning',\n  id: 'sizing-and-positioning',\n  level: 2\n}, {\n  value: 'Imperative API',\n  id: 'imperative-api',\n  level: 2\n}, {\n  value: 'PopupManager',\n  id: 'popupmanager',\n  level: 3\n}, {\n  value: 'usePopupManager',\n  id: 'usepopupmanager',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"popup\"\n    }}>{`Popup`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Sizing based on content`}</li>\n      <li parentName=\"ul\">{`Resizable and movable (by dragging header)`}</li>\n      <li parentName=\"ul\">{`Connected to, and positioned by a trigger, or positioned in center otherwise.`}</li>\n      <li parentName=\"ul\">{`Layout with Header, Content and Hint`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"live-example\"\n    }}>{`Live example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { PopupTrigger, Popup, Button } from \"@intellij-platform/core\";\n\n<PopupTrigger\n  interactions=\"move\" // Other values: \"all\", \"none\"\n  placement=\"bottom\" // Other values: \"top\"\n  nonDismissable={false} // Other values: true\n  allowScroll=\"auto\" // Other values: false, true\n  popup={\n    <Popup>\n      <Popup.Layout\n        header={<Popup.Header>Header</Popup.Header>}\n        content={\n          <div style={{ padding: \"0.5rem\" }}>\n            Popup Content. Popup Content. Popup Content. <br />\n            Popup Content. Popup Content. Popup Content. <br />\n            Popup Content. Popup Content. Popup Content. <br />\n          </div>\n        }\n        footer={<Popup.Hint>Hint text</Popup.Hint>}\n      />\n    </Popup>\n  }\n>\n  <Button>Open popup</Button>\n</PopupTrigger>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"popup-1\"\n    }}>{`Popup`}</h2>\n    <ApiDescription of={Popup} mdxType=\"ApiDescription\" />\n    <h2 {...{\n      \"id\": \"popuptrigger\"\n    }}>{`PopupTrigger`}</h2>\n    <ApiDescription of={PopupTrigger} mdxType=\"ApiDescription\" />\n    <h2 {...{\n      \"id\": \"popup-content\"\n    }}>{`Popup Content`}</h2>\n    <h3 {...{\n      \"id\": \"popuplayout\"\n    }}>{`Popup.Layout`}</h3>\n    <ApiDescription of={Popup.Layout} mdxType=\"ApiDescription\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Popup>\n  <Popup.Layout\n    header={<Popup.Header>Header</Popup.Header>}\n    content={<>...</>}\n    footer={<Popup.Hint>Hint text</Popup.Hint>}\n  />\n</Popup>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"popupheader\"\n    }}>{`Popup.Header`}</h3>\n    <ApiDescription of={Popup.Header} mdxType=\"ApiDescription\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Popup>\n  <Popup.Layout header={<Popup.Header>Header</Popup.Header>} />\n</Popup>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"custom-header\"\n    }}>{`Custom header`}</h4>\n    <p>{`By default, Popup header is a simple centered title. But more complex cases can be handled by just rendering a custom\nUI inside the header, without any specific support for those variations, from `}<inlineCode parentName=\"p\">{`Popup.Header`}</inlineCode>{`:`}</p>\n    <EmbeddedStory storyId=\"components-popup--custom-header\" height={350} mdxType=\"EmbeddedStory\" />\n    <p>{`Note how anywhere on the header, except for the action button, can still be used to move the Popup.`}</p>\n    <h3 {...{\n      \"id\": \"hint\"\n    }}>{`Hint`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`Popup.Hint`}</inlineCode>{` to render a hint (aka Advertiser) in Popup's footer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Popup>\n  <Popup.Layout footer={<Popup.Hint>Hint text</Popup.Hint>} />\n</Popup>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sizing-and-positioning\"\n    }}>{`Sizing and positioning`}</h2>\n    <p>{`TODO`}</p>\n    <h2 {...{\n      \"id\": \"imperative-api\"\n    }}>{`Imperative API`}</h2>\n    <h3 {...{\n      \"id\": \"popupmanager\"\n    }}>{`PopupManager`}</h3>\n    <p><inlineCode parentName=\"p\">{`PopupManager`}</inlineCode>{` allows for imperatively showing popups, via `}<a parentName=\"p\" {...{\n        \"href\": \"#usepopupmanager\"\n      }}>{`usePopupManager`}</a>{`. It holds the state of\nthe stack of opened popups, and renders those popups. Although it's technically not required, only a single\n`}<inlineCode parentName=\"p\">{`PopupManager`}</inlineCode>{` is usually rendered as a wrapper, in an application.`}</p>\n    <h3 {...{\n      \"id\": \"usepopupmanager\"\n    }}>{`usePopupManager`}</h3>\n    <p>{`Returns `}<inlineCode parentName=\"p\">{`PopupManagerAPI`}</inlineCode>{`, which has a `}<inlineCode parentName=\"p\">{`show`}</inlineCode>{` method to imperatively open a popup. Requires\n`}<a parentName=\"p\" {...{\n        \"href\": \"#popupmanager\"\n      }}>{`PopupManager`}</a>{` to be rendered above in the component hierarchy.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { Popup, usePopupManager } from \"@intellij-platform/core\";\nconst { show } = usePopupManager();\n\nshow(\n  <Popup>\n    <Popup.Layout>...</Popup.Layout>\n  </Popup>, // The content of the popup. Typically a PopupLayout element,\n  { interactions: \"all\" } // Other popup props\n);\n\n// More flexible interface which gets access to a \\`close\\` function to be called when needed.\nshow(({ close }) => <Popup.Layout>...</Popup.Layout>, { interactions: \"all\" });\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live noInline themed\",\n        \"live\": true,\n        \"noInline\": true,\n        \"themed\": true\n      }}>{`const App = () => (\n  <PopupManager>\n    <SomeComponent />\n  </PopupManager>\n);\nconst SomeComponent = () => {\n  const { show } = usePopupManager();\n  const showPopup = () => {\n    show(\n      ({ close }) => (\n        <Popup>\n          <Popup.Layout\n            header={<Popup.Header>Title</Popup.Header>}\n            content={\n              <SpeedSearchMenu\n                onClose={close}\n                autoFocus=\"first\"\n                fillAvailableSpace\n              >\n                <Item textValue=\"File\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/text\"} />}\n                    content=\"File\"\n                  />\n                </Item>\n                <Item textValue=\"Directory\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"nodes/folder\"} />}\n                    content=\"Directory\"\n                  />\n                </Item>\n                <Divider />\n                <Item textValue=\"HTML File\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/html\"} />}\n                    content=\"HTML File\"\n                  />\n                </Item>\n                <Item textValue=\"Stylesheet\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/css\"} />}\n                    content=\"Stylesheet\"\n                  />\n                </Item>\n                <Item textValue=\"Javascript\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/javaScript\"} />}\n                    content=\"Javascript\"\n                  />\n                </Item>\n                <Item\n                  title={\n                    <MenuItemLayout\n                      content=\".ignore File\"\n                      icon={<PlatformIcon icon={\"fileTypes/text\"} />}\n                    />\n                  }\n                >\n                  <Item>.gitignore File (Git)</Item>\n                  <Item>.bzrignore File (Bazaar)</Item>\n                  <Item>.npmignore File (Npm)</Item>\n                </Item>\n              </SpeedSearchMenu>\n            }\n          />\n        </Popup>\n      ),\n      { interactions: \"all\", allowScroll: false }\n    );\n  };\n  return <Button onPress={showPopup}>Show popup</Button>;\n};\n\nrender(<App />);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["isInResolvedActionGroup","action","isActionGroup","isResolvedActionGroup","isActionGroupDefinition","ActionShortcut","actionId","children","shortcutString","useGetActionShortcut","getShortcut","keymap","useKeymap","keyboardShortcut","find","type","shortcutToString","isKeyMatch","keyStroke","e","loose","code","modifiers","supportedModifiers","every","modifier","getModifierState","Boolean","includes","ActionsContext","React","generateId","Math","floor","random","ACTION_PROVIDER_ID_DATA_PREFIX","actionProvidersMap","Map","ActionsProvider","props","parentContext","useContext","actions","dfsVisit","push","recursivelyCreateActions","actionIds","map","id","shortcuts","pick","actionProviderId","useState","shortcutHandlerProps","onAction","useCapture","firstKeyActivatedShortcutsRef","useRef","secondStrokeResetTimerIdRef","onKeyDown","useEventCallback","event","nativeEvent","location","repeat","current","window","clearTimeout","length","some","shortcut","secondKeyStroke","triggerAction","firstKeyMatches","Object","entries","flatMap","filter","input","isKeyboardShortcut","firstKeyStroke","setTimeout","document","addEventListener","once","capture","stopPropagation","preventDefault","useShortcuts","perform","element","target","Element","allActions","ACTION_PROVIDER_ID_ATTRIBUTE","useEffect","set","delete","Provider","value","actionDefinitions","parent","actionDefinition","useShortcutsOf","undefined","firstShortcut","context","isDisabled","actionPerformed","isMutableActionGroup","getAvailableActionsFor","closestActionProvider","closest","HTMLElement","actionSets","keys","dataset","dataKey","startsWith","replace","get","values","concat","sortBy","actionSet","useActions","useAction","usePerformAction","console","error","CommonActionId","EXPAND_ALL","COLLAPSE_ALL","EXPAND_SELECTION","SHRINK_SELECTION","GO_TO_ACTION","GO_TO_FILE","SHOW_INTENTION_ACTIONS","EDIT_SOURCE","SHOW_SEARCH_HISTORY","KeymapContext","defaultKeymap","KeymapProvider","keymapProp","parentKeyMap","assign","create","ActionButton","otherProps","actionButton","onPress","icon","title","tooltip","actionName","isAction","item","ActionsMenu","selectedKeys","menuProps","items","flatten","disabledKeys","key","autoFocus","DividerItem","renderActionAsMenuItem","isGroup","isPopup","hasDivider","textValue","childItems","content","useCreateDefaultActionGroup","show","usePopupManager","getActionShortcut","openActionsInPopup","close","onClose","header","groupDefinition","RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID","RESIZE_TOOL_WINDOW_LEFT_ACTION_ID","RESIZE_TOOL_WINDOW_TOP_ACTION_ID","RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID","MAXIMIZE_TOOL_WINDOW_ACTION_ID","FOCUS_EDITOR_ACTION_ID","HIDE_ACTIVE_WINDOW_ACTION_ID","HIDE_ALL_WINDOWS_ACTION_ID","JUMP_TO_LAST_WINDOW_ACTION_ID","defaultKeyToStr","Control","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Enter","Quote","Minus","Equal","Backspace","fromPairs","Array","from","i","charCodeAt","x","String","fromCharCode","a","toUpperCase","KeystrokeToString","isMac","separator","codeToStr","Alt","Shift","Meta","Escape","modifiersOrder","keystrokeToString","keystroke","sort","b","indexOf","join","Error","useActionGroup","actionGroupId","bgColor","theme","color","dark","StyledHeaderActions","styled","StyledBalloonContainer","StyledIconContainer","StyledBalloonHeader","StyledBalloonBody","lineClamp","StyledBalloonFooter","StyledToggleIconContainer","StyledToggleExpandButtonContainer","StyledToggleExpandButtonFooterContainer","BalloonContext","BalloonActionLink","ref","args","Balloon","iconProp","expanded","expandedProp","defaultExpanded","onExpandedChange","headerActions","body","containerProps","bodyRef","expandable","setExpandable","setExpanded","useControlledState","maxLinesWhenNotExpanded","bodyElem","clientHeight","parseFloat","getComputedStyle","lineHeight","getNumLines","scrollHeight","iconType","index","arr","toggle","effectiveExpanded","onClick","role","style","marginLeft","ToggleWrapper","enabled","onToggle","Component","iconName","toggleIcon","hoverContainerSelector","className","NotImplementedFn","BalloonsContext","showSticky","useBalloonManager","BalloonManager","disablePortal","BalloonsContainer","StyledBalloonsStack","balloons","setBalloons","timeoutIdsRef","lastIdRef","api","useMemo","timeout","aBalloon","balloon","timeoutId","aTimeoutId","forEach","notificationsStack","position","ReactDOM","BareButton","elementType","buttonProps","useButton","useObjectRef","domProps","filterDOMProps","mergeProps","StyledButton","disabled","variants","default","Button","forwardedRef","variant","form","StyledWrapperLabel","StyledCheckboxLabelText","StyledInput","Checkbox","preventFocus","disableFocusAlwaysVisible","state","useToggleState","inputProps","useCheckbox","isFocusVisible","isFocused","focusProps","useFocusRing","focusDisabledProps","onFocusCapture","relatedTarget","focus","blur","tabIndex","isIndeterminate","isSelected","pointerEvents","CheckboxIcon","size","name","Disabled","Selected","Focused","CollectionSpeedSearchContext","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","itemKey","collection","getItem","text","warn","highlightedRanges","matches","HighlightedTextValue","speedSearchContext","highlights","useCollectionSpeedSearchResult","selectionManager","inputSelectionManager","speedSearch","focusBestMatch","searchTerm","active","getKeys","matchedRanges","minusculeMatch","wrappedSelectionManager","selectAll","setSelectedKeys","Set","has","createSpeedSearchSelectionManager","latestValues","useLatest","matchedKeys","noneOfTheMatchesAreSelected","matchedKey","keyToFocus","firstRange","rangeA","rangeB","to","getLongestCommonPrefixMatch","passedFirstSelection","firstSelectedKey","getMatchToSelect","setFocusedKey","replaceSelection","useCollectionSpeedSearch","stickySearch","keyboardDelegate","speedSearchStateProps","useSpeedSearchState","speedSearchSelectionManager","useSpeedSearch","speedSearchKeyboardDelegate","wrappedKeyboardDelegate","findFirstMatch","fromKey","direction","currentKey","getKeyAbove","getKeyBelow","getFirstKey","global","firstKey","next","getLastKey","lastKey","pop","createSpeedSearchKeyboardDelegate","speedSearchContextValue","searchPopupProps","match","seq","this","Divider","_Divider","getCollectionNode","rendered","hasChildNodes","Item","_Item","result","StatelyItem","originalShouldInvalidate","shouldInvalidate","invalidated","GAP","StyledItemLayout","StyledHint","currentForegroundAware","commonColors","inactiveTextColor","small","StyledGroup","ItemLayout","Hint","Group","ItemStateContext","useCollectionAutoScroll","isVirtualized","focusedKey","querySelector","scrollIntoView","useCollectionRef","selectionManagerRef","useImperativeHandle","useCollectionSearchInput","collectionRef","relayEventsToCollection","dispatchEvent","KeyboardEvent","collectionSearchInputProps","onKeyUp","onKeyPress","StyledHoverContainer","StyledIconHoverContainer","AutoHoverPlatformIcon","hoverIcon","amendName","LafIcon","themePath","resolvedIconPath","iconDescriptor","useTheme","resolvedValue","isUnderDarcula","reduce","soFar","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","slice","PlatformIcon","darkIcon","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","itemState","selected","isContainerFocused","unmounted","async","loadingIcon","svg","getSvgIcon","catch","remove","svgElement","createElement","appendChild","outerHTML","randomPostfix","toFixed","matchAll","modifiedSvg","_","newId","replaceAll","makeIdsUnique","fetchIcon","theOld","theNew","str","replaced","replacedAgain","DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","StyledIconButton","minSize","IconButton","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","focusableProps","useFocusable","pressProps","usePress","ArrowIcon","IconButtonWithMenu","renderMenu","noArrow","previouslyFocusedElementRef","onOpenChange","open","onFocus","Img","darkSrc","src","StyledInputBox","focused","validationState","border","invalid","focusRing","StyledAddons","StyledRightAddons","StyledLeftAddons","Input","autoSelect","addonBefore","addonAfter","inputRef","inputRefProp","onBlur","setIsFocused","focusWithinProps","useFocusWithin","onFocusWithinChange","select","spellCheck","onMouseDown","StyledLabel","label","StyledInputContainer","labelPlacement","Label","StyledContextHelp","contextHelpForeground","StyledBoxAndContextHelpWrapper","InputField","contextHelp","fieldProps","errorMessageProps","labelProps","descriptionProps","useField","PositionedTooltipTrigger","placement","crossOffset","showOnFocus","errorMessage","ValidationTooltip","delay","I","placeholder","defaultValue","onChange","StyledLink","focusBorderColor","linkForegroundEnabled","Link","labelable","interactionHandlers","focusRingClass","as","List","allowEmptySelection","showAsFocused","fillAvailableSpace","disallowEmptySelection","useListState","listProps","useList","listItemRenderer","listFocused","ListDivider","useSeparator","orientation","separatorProps","ListItem","itemProps","useSelectableItem","containerFocused","node","StyledList","shouldForwardProp","prop","css","StyledListItem","backgroundColor","labelForeground","asCurrentForeground","labelSelectedForeground","display","whiteSpace","paddingLeft","paddingRight","outline","cursor","minWidth","StyledListSectionHeader","fontWeight","renderItem","sectionHeader","renderSectionHeader","render","isSectionNode","childNodes","isDividerNode","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","isEmpty","originalUseListState","selectionBehavior","ContextMenuContainer","useMenuTriggerState","overlayProps","overlayRef","positionProps","updatePosition","useMouseEventOverlayPosition","shouldFlip","offset","isOpen","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","areInNestedOverlays","onContextMenu","useContextMenu","allProps","MenuOverlay","restoreFocus","patchCollectionItem","nodes","partialNode","result2","partialChildNode","partialChildNodeWithoutType","PatchedItem","PatchedSection","Section","convertChildren","isArray","Item2","MenuOverlayContext","MenuContext","useMenu","onActionProp","submenuBehavior","menuContextValue","useMenuAria","useMenuState","patchCollectionProps","useTreeState","childExpansionBehaviour","expandedKeys","expandedKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","Menu","StyledMenu","renderMenuNodes","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItemContext","keyboardShortcutProps","useMenuItemLayout","MenuItem","nestedMenuRef","isExpanded","renderSubmenu","itemWrapper","menuItemProps","hasSubmenu","ariaMenuItemProps","useMenuItemAria","onMouseEnter","onPointerEnter","onPointerDown","hoverProps","useHover","onHoverStart","isAnySubmenuOpen","parentKey","toggleKey","keyboardProps","togglePressProps","useMenuItem","useOverlayPosition","targetRef","MENU_VERTICAL_PADDING","MENU_BORDER_WIDTH","arrowProps","onPointerUp","isActive","OverlayComponent","SimpleOverlay","parentState","rootKey","portalContainer","StyledMenuItemLayout","Content","Shortcut","MenuItemLayout","useContextOrThrow","allowedIcon","forceRestoreFocus","MenuTrigger","align","positioningTargetRef","menuTriggerProps","triggerRef","triggerProps","useMenuTrigger","ariaButtonProps","getPlacement","containerPadding","StyledItemsContainer","StyledSearchFieldWrapper","StyledSpeedSearchMenu","StyledVerticalSeparator","StyledPlaceholder","useSpeedSearchMenu","containerRef","speedSearchContainerProps","ListCollection","MenuKeyboardDelegate","contains","activeElement","focusSafely","lastSize","setSize","measureSize","offsetWidth","offsetHeight","width","height","isSearchActive","useResizeObserver","onResize","useLayoutEffect","sizeStyleProps","minHeight","maxHeight","SpeedSearchMenu","emptyText","clear","SpeedSearchSubmenu","SpeedSearchMenuContent","menuRef","useSubmenuState","rootItem","submenuProps","useSubmenu","WINDOW_SHADOW","StyledMenuItem","StyledMenuItemIcon","StyledNestedArrow","highlightedStyle","defaultStyle","disabledStyle","useSubmenuAria","submenuBehaviorProps","Submenu","constructor","super","keyBelow","keyAbove","useKeyboard","continuePropagation","root","isFocusedRef","focusedKeyRef","defineProperties","SelectionManager","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","headingProps","groupProps","useMenuSection","heading","UNSAFE_React17SuspenseFix","measureContentSize","fallback","NullSuspenseFallback","afterUnsuspended","afterSuspended","afterSuspendedProp","afterUnsuspendedProp","StyledWindowUnderlay","StyledWindowContainer","StyledWindowInnerContainer","DEFAULT_WINDOW_MIN_WIDTH","DEFAULT_WINDOW_MIN_HEIGHT","WindowControllerContext","ModalWindow","interactions","propsContext","underlayProps","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","bounds","overlayInteractionHandlerProps","UNSAFE_measureContentSize","useResizableMovableOverlay","focusContainmentFixProps","lastFocusedElementRef","probablyFocusedElement","currentTarget","elementToFocus","useFocusContainmentFix","OverlayInteractionHandler","contain","WindowContext","movable","OverlayResizeHandles","StyledFooter","hasBorder","contrastBorder","StyledFooterSide","WindowFooter","left","right","StyledWindowTitle","WindowHeader","renderTitle","OverlayMoveHandle","moveHandleProps","StyledWindowFooter","StyledWindowContentWrapper","WindowLayout","footer","Footer","Header","WindowsContext","useWindowManager","WindowManager","windows","setWindows","newKeyRef","currentWindows","aWindow","ParentOverlayContext","Overlay","AriaOverlay","element1","element2","overlayRoot1","overlayRoot2","OverlayInteractionHandlerContext","useOverlayInteractionHandler","useOverlayMoveHandle","interactionHandler","finishInteraction","startInteraction","updateBounds","useMove","onMoveStart","onMove","startState","movement","top","y","onMoveEnd","overlayResizer","initialBoundsRef","max","bottom","newWidth","initialBounds","newHeight","getResizerProps","side","onResizeStarted","onResizeEnd","useOverlayResizer","withMinSize","getCenteredBounds","innerWidth","innerHeight","targetElement","targetBounds","getBoundingClientRect","ensureInViewport","gap","viewportWidth","viewportHeight","clamp","getContentSize","fn","ceil","clone","cloneNode","returnValue","removeChild","useContentSize","observe","measuredSizes","setMeasuredSizes","lastMeasuredSize","at","Size","isEqual","requestAnimationFrame","newSize","cancelAnimationFrame","measure","currentSize","aSize","debouncedMeasure","fnRef","currentTimeoutId","useCallback","useDebouncedCallback","mutationObserver","MutationObserver","subtree","childList","disconnect","width2","height2","inputBounds","defaultBounds","onBoundsChange","onBoundsChanging","observeContentResize","setBounds","contentSize","currentInteraction","setCurrentInteraction","effectiveMinWidth","effectiveMinHeight","applyMinSize","getBounds","updatedBounds","partialBounds","centeredContentBounds","positioned","sized","StyledPopupContainer","StyledInnerContainer","DEFAULT_POPUP_MIN_WIDTH","DEFAULT_POPUP_MIN_HEIGHT","_Popup","nonDismissable","allowScroll","positioning","positioningProp","onCloseProp","PopupControllerContext","useInteractOutside","onInteractOutsideStart","onInteractOutside","positionedBounds","pipe","setActive","focusForwarderProps","useFocusForwarder","titleId","useSlotId","useOverlayFocusContain","zIndex","propsArray","mergeNonNullProps","PopupContext","Popup","PopupHeader","Layout","PopupLayout","StyledPopupHint","createContext","StyledPopupHeader","hasControls","labelDisabledForeground","renderHeader","StyledPopupLayout","StyledPopupLayoutHeader","StyledPopupLayoutContent","StyledPopupLayoutFooter","PopupsContext","PopupManager","popups","setPopups","popup","currentPopups","aPopup","wrappedPopup","PopupTrigger","useOverlayTriggerState","useOverlayTrigger","ProgressBar","maxValue","minValue","namePosition","details","secondaryDetails","button","dense","progressBarProps","useProgressBar","percentage","forcedDetails","setForcedDetails","setTooltip","contextValue","StyledProgressBarLabel","effectiveDetails","StyledProgressBarContainer","StyledProgressBarLineContainer","hasTopMargin","hasBottomMargin","StyledProgressBarTrack","indeterminate","StyledProgressBarProgress","showValueLabel","valueLabel","ProgressBarContext","StyledProgressBarDetails","getIndeterminateStartColor","getIndeterminateEndColor","indeterminateBackgroundAnimation","keyframes","useProgressBarIconButton","hoverTooltip","isHovered","useProgressBarPauseIconButton","paused","Container","LineContainer","Track","Progress","Details","ProgressBarStopButton","ResizableView","resizerPlacement","firstView","firstSize","onFirstResize","lastView","onLastResize","BottomResizer","resizerProps","useBottomResizer","StyledHorizontalResizer","StyledHorizontalResizerArea","handleSize","HorizontalResizer","outerPadding","background","LeftResizer","useLeftResizer","RightResizer","useRightResizer","TopResizer","useTopResizer","StyledVerticalResizer","StyledVerticalResizerArea","VerticalResizer","useResizer","invert","dragThreshold","SearchInput","searchHistory","onClear","onSubmit","onHistoryItemSelected","historyButtonTitle","valueProp","setValue","inputContainerRef","isSearchHistoryOpen","setSearchHistoryOpen","showSearchHistoryAction","searchIcon","historyItemText","parseInt","historyItem","tooltipTriggerProps","StyledSearchIcon","StyledSpeedSearchInput","noMatch","getOutlineColor","StyledSearchText","SpeedSearchInput","clearButtonRef","SpeedSearchPopup","StyledSpeedSearchPopup","red","tooltipForeground","useGhostInput","valueRef","ctrlKey","altKey","metaKey","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","onActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","ghostInputKeydown","trimmedValue","trimStart","StatusBar","StyledStatusBar","StyledStatusBarLeft","StyledStatusBarRight","StyledStatusBarSection","StatusBarWidget","StyledWrapper","StyledStatusBarWidget","StyledStatusBarIconWidget","inset","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundClip","boxSizing","margin","flexShrink","StyledHorizontalSeparator","DebuggerTabContent","closeButton","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","editorTabTheme","borderColor","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","TabCloseButton","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabContentLayout","TabItem","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","forwardRef","shouldSelectOnPressUp","tabProps","useTab","selectedKey","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","hasOverflow","threshold","setHasOverflow","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetTop","scrollTop","offsetBottom","newHasOverflow","onScroll","useHasOverflow","overflowedElements","useOverflowObserver","overflowedKeys","notNull","scrollableContainer","selectedTabElement","TabsOverflowMenu","onSelect","setSelectedKey","menuItem","inOverflowMenu","ToolWindowTabContent","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","getAllRanges","ranges","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","TextWithHighlights","parts","highlighted","numberPattern","parseComponent","componentStr","round","min","parseHexRgba","parseShorthandHex","parseRgb","RegExp","parseRgba","Color","rgba","g","r","NaN","parse","c","Number","isInteger","parseColorString","isValid","withTransparency","alpha","brighter","int","FACTOR","darker","toString","blend","colorOrColorString","getBlendedValue","component","isNaN","padStart","StyledSplitterContainer","StyledSplitterInnerView","ThreeViewSplitter","resizerPropsOverrides","innerView","firstViewMinSize","lastViewMinSize","innerViewMinSize","firstViewRef","lastViewRef","firstSizeState","setFirstSizeState","lastSizeState","setLastSizeState","horizontalValue","verticalValue","FirstResizer","SecondResizer","sizeStyleProp","minSizeStyleProp","isFractionSize","normalizeSize","getSize","getNewSize","newFractionSize","getActualSize","viewElem","actualSize","currentLastSize","currentFirstSize","StyledFloatView","FloatView","boundsStyle","FloatToolWindows","floatWindows","renderToolWindow","stackedFloatWindows","getKey","sortedKeys","setSortedKeys","sorted","bringToFront","move","useStackedLayersState","layersProps","toolWindow","MovableToolWindowStripeContext","MovableToolWindowStripeProvider","stripes","draggingRect","setDraggingRect","draggingKey","setDraggingKey","dropPosition","setDropPosition","getDropPositionRef","moveStartLocationRef","addStripe","propsRef","startMove","stripe","stripeElRef","stripeElement","getItemRect","toJSON","indexInMain","mainItems","findIndex","indexInSplit","splitItems","anchor","isSplit","dropPositionGetters","createGetDropPosition","getDropPosition","draggedRect","endMove","TopStripe","BottomStripe","LeftStripe","RightStripe","InnerView","StyledToolWindowOuterLayout","Shell","hideStripes","getSizeInAnchor","containerSize","isHorizontalToolWindow","mapToKey","sortAndMapToKey","compose","order","filterMains","getMains","filterSplits","filterVisible","expectedViewMode","viewMode","isVisible","getSplits","filterVisibleDocked","filterVisibleUnDocked","getDocked","toolWindows","docks","mains","splits","weight","mainKey","sizeFraction","sideWeight","getUnDocked","getSideState","main","activeKeys","undocked","docked","DEFAULT_HEIGHT","DEFAULT_WIDTH","getFloatWindowsState","floatingBounds","getFloatWindowState","getStripeRect","start","rect","end","getDropPositions","getRef","score","abs","relative","keyToOffsets","boundingRect","getKeyToOffsets","dropPositions","lastDropPosition","stripeRect","getCanDrop","bestMatch","candidate","STRIPE_BUTTON_LINE_HEIGHT","StyledToolWindowStripeButton","StyledToolWindowStripe","theOtherSide","preventCollapse","StyledSpacer","useElementMove","ghost","ghostOption","otherOptions","updateGhostPosition","defaultGhost","colors","computedBackground","unshift","parentElement","resultColor","nextColor","findEffectiveBackgroundColor","createDefaultGhost","append","ToolWindowStripe","onItemPress","getProps","latestPropsRef","moveDisabled","useMovableStripeButtons","isNotCurrentItem","anItem","ToolWindowStripeButton","getStripeButtonStyles","styles","marginValue","StyledUndockSide","UndockSide","ToolWindows","hideToolWindowBars","useWidescreenLayout","toolWindowsState","onToolWindowStateChange","mainContentMinWidth","windowsById","indexBy","mainContentFocusScopeRef","layoutState","setLayoutState","windowFocusableRefs","latestRef","container","_setLayoutState","windowIds","removedFromSideBarIds","groupBy","getToolWindowsLayoutState","observer","ResizeObserver","resize","contentRect","unobserve","hasFocus","focusLastActiveWindow","lastFocusedKey","focusMainContent","changeState","updater","interactionOutsideRef","onFocusLost","handleBodyFocus","focusLosingElement","focusReceivingElement","removeEventListener","useOnFocusLost","renderStripe","toolbarButton","all","lastFocused","FocusScope","ToolWindowStateProvider","mainContentFocusableRef","renderSideDockedView","resizeDockSplitView","onDockResize","containerBounds","resizeDock","getSplitViewProps","firstAnchor","secondAnchor","horizontalSplitterProps","verticalSplitterProps","outerSplitterProps","innerSplitterProps","undockLayers","resizeUndock","setFloatingBound","renderInnerLayout","ToolWindowStateContext","useToolWindowState","hide","removeFromSidebar","moveToSide","changeViewMode","stretchWidth","stretchHeight","setFloatingBounds","isDocked","areInSameSection","curry","window1","window2","getViewModeType","ToolWindowsState","layoutToRestore","invalidWindows","targetKey","mapWindows","hideAll","restoreWindows","closableViewModes","viewModeType","sideOrIndex","targetSide","targetIndex","targetSideWindows","indexInTargetSide","sortedTargetWindows","insert","newTargetSideWindows","newValue","targetViewMode","stretch","mapFn","options","mapObjIndexed","property","currentFloatingBound","resizeSide","dock","isInResizingView","toolWindowState","inputs","getAnchorOrientation","useToolWindow","contentRef","focusableContentRef","onFocusChange","contentHasFocus","setContentHasFocus","contentFocusWithinProps","toolWindowProps","autoHideProps","hideTimeoutId","windowFocusWithinProps","onBlurWithin","onFocusWithin","useAutoHide","forwardFocus","ignoreFocusedDescendant","toolWindowContentProps","toolWindowHeaderProps","ToolWindowSettingsIconMenu","viewModeActionGroup","VIEW_MODE_ACTION_GROUP_ID","moveToActionGroup","MOVE_TO_ACTION_GROUP_ID","resizeActions","TOOL_WINDOW_RESIZE_ACTION_GROUP_ID","maximizeAction","removeFromSideBarAction","REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID","gearIconActions","ViewModeToActionId","StyledToolWindowHeader","StyledToolWindowHeaderActions","StyledToolWindowHeaderContent","DefaultToolWindowHeader","additionalActions","Toolbar","DOCK_TOOL_WINDOW_ACTION_ID","TooltipTrigger","ActionTooltip","StyledToolWindowContainer","StyledToolWindowContent","DefaultToolWindowContext","useDefaultToolWindowContext","DefaultToolWindow","headerContent","mainContentTitle","defaultToolWindowContext","useToolWindowActions","getToolWindowNumberFromShortcut","num","DefaultToolWindowToolbarButton","showNumber","getActivateToolWindowActionId","number","DefaultToolWindows","showNumbers","toolWindowsRef","windowById","useToolWindowsActions","getPresentation","MultiViewToolWindow","groupTabs","isToolWindowFocused","setToolWindowFocused","activeKey","setActiveKey","defaultActiveKey","onActiveKeyChange","contents","child","validChild","MultiContentToolWindowContent","renderedViewSwitcher","onSelectionChange","tabContent","previousKeys","usePrevious","newActiveKey","activeContent","View","DOCK_PINNED_MODE_ACTION_ID","DOCK_UNPINNED_MODE_ACTION_ID","UNDOCK_MODE_ACTION_ID","FLOAT_MODE_ACTION_ID","WINDOW_MODE_ACTION_ID","anchors","getAnchorName","docked_pinned","docked_unpinned","undock","float","createDefaultActionGroup","activeToolWindowActionGroup","alert","resizeGroup","isAnySideWindowWindowOpen","getOrdinal","description","n","ord","borderStyle","borderPropToCssProp","StyledToolbar","horizontal","vertical","StyledShowMoreButton","StyledHorizontalToolbar","StyledVerticalToolbar","StyledToolbarContent","wrap","firstOverflowedIndex","OrientationContext","overflowBehavior","rootProps","showMoreButtonRef","isOverflowPopupVisible","setOverflowPopupVisible","popupHeight","setPopupHeight","firstOverflowedChildIndex","setFirstOverflowedChildIndex","firstOverflowedChildRef","childElements","firstOverflowedChild","toolbarProps","onMouseMove","firstOverflowedElement","shouldShow","clientY","clientX","onMouseLeave","toolbarOverflowPopupProps","ToolbarInOverlay","firstVisibleIndex","ToolbarSeparator","ActionHelpTooltip","helpText","link","multiline","useTooltipTriggerState","tooltipOverlayProps","trigger","StyledTooltip","StyledShortcut","StyledHeader","fontSizeDelta","StyledDescription","Tooltip","isInteractive","TooltipContext","tooltipProps","useTooltip","_Tooltip","Description","TooltipTriggerAndOverlay","setInteractive","useTooltipTrigger","normalizeChildren","useAriaTooltipTrigger","StyledValidationTooltip","StyledWarningValidationTooltip","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","treeRef","treeProps","treeContext","useSpeedSearchTree","virtualizerProps","useTreeVirtualizer","TreeContext","StyledTree","Virtualizer","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","hasAnyModifier","selectableTree","useSelectableTree","getKeyLeftOf","getKeyRightOf","StyledTreeNodeIcon","TreeNodeIcon","iconPath","getIcon","useTreeNodeToggleButton","treeNodeToggleButtonProps","selectedDescendantKeys","toggleSelection","StyledTreeNode","attrs","level","onActionRef","treeNodeProps","onDoubleClick","useTreeNode","selectionKeyDown","isExpandable","onNodeKeyDown","shouldToggle","shiftKey","Symbol","iterator","TreeCollection","keyMap","iterable","last","visit","nextKey","prevKey","getKeyBefore","getKeyAfter","idx","getSingleChildrenKeys","getSingleChildrenKeysRecursive","childNodesIterator","firstChild","done","noMoreChildren","isEmptyIterable","TreeSelectionManager","expandSelection","expandKeys","getExpandAndShrinkKeys","shrinkSelection","shrinkKeys","recursivelyGetExpandAndShrinkKeys","previousChild","newKeys","parentDescendants","getAllDescendants","getAllRoots","descendants","stopKeys","flat","_TreeCollection","rootKeys","getAllExpandableKeys","rootNodes","recursivelyAddExpandableKeys","add","setExpandedKeys","selectionState","useMultipleSelectionState","cacheInvalidation","invalidators","lastInvalidators","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","latestState","expandAll","collapseAll","useTreeRef","newExpandedKeys","toggleTreeNode","expandedSiblings","getRootItemKeys","getChildItems","siblings","getSiblings","aKey","sectionItems","res","VariableWidthListLayout","ListLayout","keyToWidth","visibleContentWidth","buildItem","layoutNode","layoutInfo","buildCollection","getVisibleContentWidth","invalidateEverything","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","layoutInfos","virtualizer","visibleRect","visibleViews","view","itemContentWidth","intersects","getVisibleRect","FlattenedTreeLayout","buildChild","getVisibleLayoutInfos","layout","estimatedRowHeight","sizeToFit","scrollToItem","shouldScrollX","duration","scrollDirection","useTreeActions","collectSelectableItemsRecursive","getChildren","collectedItems","NestedSelection","cache","WeakMap","getSelectionState","itemsInSubtree","collectSelectableItems","cachedState","allDescendantsStates","SpeedSearchTreeWithCheckboxes","nestedSelection","otherInvalidators","StyledCheckboxWrapper","TreeNodeCheckbox","selectItemOnPress","itemContext","useNestedSelectionState","selectedKeysProp","defaultSelectedKeys","onSelectedKeysChange","selectedKeysSetter","useControllableSet","isWordSeparator","isWhitespace","char","test","isUpperCase","toLowerCase","isMeaningfulChar","ch","rawPattern","isStarts","isStart","pattern","continuous","inputIndex","patternIndex","lastMatch","chars","previousChar","manager","disallowSelectAll","useLocale","handlers","navigateToKey","childFocus","selectionMode","extendSelection","isCtrlKeyPressed","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","useOriginalSelectableItem","pointerType","styledComponents","ThemeConsumer","directChildRef","focusManagerRef","nodeToRestore","forceFocusFirst","focusManager","containerElement","focusFirst","focusNext","GetFocusManager","hidden","useFocusManager","savedUserSelect","restoreTextSelection","runAfterTransition","documentElement","webkitUserSelect","handlersRef","pageX","pageY","dragStarted","OverflowObserver","callback","data","mutations","mutation","removedNodes","intersectionObserver","addedNodes","IntersectionObserver","newHiddenElements","entry","isIntersecting","newVisibleElements","previouslyOverflowedElements","currentOverflowElements","childElement","scrollableContainerRef","rootMargin","setOverflowedElements","overflowObserver","change","getExpandAllKeys","roots","processItem","getExpandedToNodesKeys","targetNodeKeys","targetNodeKeySet","childValues","childValue","dfs","bfsVisit","bfs","parentValue","childNode","Context","nullErrorMessage","apply","possiblyBlurredElement","innerRef","globalMoveHandler","lastMouseClientPos","fakeTarget","visibility","ImmutableSet","setValueWithMutation","mutate","createSetInterface","currentValue","useStateSetterForSet","ApiDescription","of","docgenInfo","__docgenInfo","log","overrides","MDXComponents","deLinkify","comment","toCommentBlock","line","StyledIframe","externalLinkIcon","viewBox","fill","d","EmbeddedStory","storyId","withBaseUrl","useBaseUrlUtils","href","StyledSvg","StyledExpandButton","StyledContainer","Expandable","onExpand","setIsExpandable","stroke","strokeLinecap","strokeLinejoin","strokeWidth","transform","icons","clsx","flex","LivePreviewLoader","ErrorFallback","tryAgain","message","Preview","BrowserOnly","ErrorBoundary","params","ResultWithHeader","Translate","ThemedLiveEditor","isBrowser","useIsBrowser","EditorWithHeader","ThemeProvider","Theme","lightThemeJson","Playground","transformCode","prismTheme","usePrismTheme","noInline","metastring","SpeedSearchContainer","CollectionSpeedSearchContainer","useSpeedSearchList","listState","SpeedSearchList","ActionGroupMenu","actionGroup","StyledIconLiveIndicator","SpeedSearch","speedSearchState","Tree","itemType","ProgressBarPauseButton","onPausedChange","HelpTooltip","LazyExampleApp","juiComponents","ExampleApp","darculaThemeJson","highContrastThemeJson","themed","noPadding","CodeBlock","live","scope","ReactLiveScope","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}