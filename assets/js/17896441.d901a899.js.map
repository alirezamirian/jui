{"version":3,"file":"assets/js/17896441.d901a899.js","mappings":"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","sources":["webpack://website/../jui/src/ActionSystem/ActionGroup.tsx","webpack://website/../jui/src/ActionSystem/ActionShortcut.tsx","webpack://website/../jui/src/ActionSystem/useShortcut.ts","webpack://website/../jui/src/ActionSystem/ActionsProvider.tsx","webpack://website/../jui/src/ActionSystem/CommonActionIds.ts","webpack://website/../jui/src/ActionSystem/KeymapProvider.tsx","webpack://website/../jui/src/ActionSystem/Shortcut.ts","webpack://website/../jui/src/ActionSystem/components/ActionButton.tsx","webpack://website/../jui/src/ActionSystem/components/ActionGroupMenu.tsx","webpack://website/../jui/src/ActionSystem/components/ActionsMenu.tsx","webpack://website/../jui/src/ActionSystem/components/useCreateDefaultActionGroup.tsx","webpack://website/../jui/src/ActionSystem/defaultKeymap.tsx","webpack://website/../jui/src/ActionSystem/shortcutToString.ts","webpack://website/../jui/src/ActionSystem/useActionGroup.tsx","webpack://website/../jui/src/AlertDialog/AlertDialog.tsx","webpack://website/../jui/src/AlertDialog/useAlertDialog.tsx","webpack://website/../jui/src/Balloon/Balloon.styled.tsx","webpack://website/../jui/src/Balloon/Balloon.tsx","webpack://website/../jui/src/Balloon/BalloonManager.tsx","webpack://website/../jui/src/Balloon/StyledBalloonsStack.tsx","webpack://website/../jui/src/Button/BareButton.tsx","webpack://website/../jui/src/Button/StyledButton.tsx","webpack://website/../jui/src/Button/Button.tsx","webpack://website/../jui/src/ButtonGroup/ButtonGroup.tsx","webpack://website/../jui/src/Checkbox/Checkbox.tsx","webpack://website/../jui/src/Checkbox/CheckboxIcon.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemLayout.tsx","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Collections/useCollectionRef.ts","webpack://website/../jui/src/Collections/useCollectionSearchInput.ts","webpack://website/../jui/src/Dropdown/ComboBox.tsx","webpack://website/../jui/src/Dropdown/StatelessListBox.tsx","webpack://website/../jui/src/Dropdown/StyledContainer.tsx","webpack://website/../jui/src/Dropdown/StyledDropdownArrowIcon.tsx","webpack://website/../jui/src/Field/ContextHelp.tsx","webpack://website/../jui/src/Field/Label.tsx","webpack://website/../jui/src/Icon/AutoHoverPlatformIcon.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/IconButton/IconButton.tsx","webpack://website/../jui/src/IconButtonWithMenu/IconButtonWithMenu.tsx","webpack://website/../jui/src/Img.tsx","webpack://website/../jui/src/InputField/Input.tsx","webpack://website/../jui/src/InputField/InputField.tsx","webpack://website/../jui/src/Link/StyledLink.tsx","webpack://website/../jui/src/Link/Link.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListContext.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/renderWrapper.tsx","webpack://website/../jui/src/List/useListVirtualizer.tsx","webpack://website/../jui/src/Menu/ContextMenuContainer.tsx","webpack://website/../jui/src/Menu/useContextMenu.tsx","webpack://website/../jui/src/Collections/patchCollectionProps.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/Menu/SpeedSearchMenu.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/Submenu.tsx","webpack://website/../jui/src/Menu/_useSubmenu.ts","webpack://website/../jui/src/Menu/_useSubmenuState.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/renderMenuNodes.tsx","webpack://website/../jui/src/Mnemonic/MnemonicTrigger.tsx","webpack://website/../jui/src/Overlay/UNSAFE_React17SuspenseFix.tsx","webpack://website/../jui/src/ModalWindow/ModalWindow.tsx","webpack://website/../jui/src/ModalWindow/WindowContext.ts","webpack://website/../jui/src/ModalWindow/WindowFooter.tsx","webpack://website/../jui/src/ModalWindow/WindowHeader.tsx","webpack://website/../jui/src/ModalWindow/WindowLayout.tsx","webpack://website/../jui/src/ModalWindow/WindowManager.tsx","webpack://website/../jui/src/Overlay/Overlay.tsx","webpack://website/../jui/src/Overlay/OverlayInteractionHandler.tsx","webpack://website/../jui/src/Overlay/OverlayMoveHandle.tsx","webpack://website/../jui/src/Overlay/OverlayResizeHandles.tsx","webpack://website/../jui/src/Overlay/Popover.tsx","webpack://website/../jui/src/Overlay/bounds-helpers.tsx","webpack://website/../jui/src/utils/useDebounce.ts","webpack://website/../jui/src/Overlay/useContentSize.tsx","webpack://website/../jui/src/Overlay/useResizableMovableOverlay.tsx","webpack://website/../jui/src/Popup/Popup.tsx","webpack://website/../jui/src/Popup/_useDialog.ts","webpack://website/../jui/src/utils/mergeNonNullProps.tsx","webpack://website/../jui/src/Popup/PopupContext.tsx","webpack://website/../jui/src/Popup/PopupHeader.tsx","webpack://website/../jui/src/Popup/PopupLayout.tsx","webpack://website/../jui/src/Popup/PopupManager.tsx","webpack://website/../jui/src/Popup/PopupTrigger.tsx","webpack://website/../jui/src/Popup/StyledPopupContainer.tsx","webpack://website/../jui/src/Popup/StyledPopupHint.tsx","webpack://website/../jui/src/ProgressBar/ProgressBar.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarStopButton.tsx","webpack://website/../jui/src/ResizableView.tsx","webpack://website/../jui/src/Resizer/BottomResizer.tsx","webpack://website/../jui/src/Resizer/HorizontalResizer.tsx","webpack://website/../jui/src/Resizer/LeftResizer.tsx","webpack://website/../jui/src/Resizer/RightResizer.tsx","webpack://website/../jui/src/Resizer/TopResizer.tsx","webpack://website/../jui/src/Resizer/VerticalResizer.tsx","webpack://website/../jui/src/Resizer/useResizer.ts","webpack://website/../jui/src/SearchInput/SearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StatusBar/StatusBar.tsx","webpack://website/../jui/src/StatusBar/StatusBarWidget.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabCloseButton.tsx","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useHasOverflow.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabContent.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Theme/parseColorString.ts","webpack://website/../jui/src/Theme/Color.ts","webpack://website/../jui/src/ThreeViewSplitter/ThreeViewSplitter.tsx","webpack://website/../jui/src/ToolWindows/FloatView.tsx","webpack://website/../jui/src/ToolWindows/FloatToolWindows.tsx","webpack://website/../jui/src/ToolWindows/MovableToolWindowStripeProvider.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowOuterLayout.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsLayoutState.ts","webpack://website/../jui/src/ToolWindows/createGetDropPosition.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripeButton.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/useElementMove.tsx","webpack://website/../jui/src/ToolWindows/findEffectiveBackgroundColor.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/UndockSide.tsx","webpack://website/../jui/src/ToolWindows/ToolWindows.tsx","webpack://website/../jui/src/ToolWindows/useOnFocusLost.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowStateProvider.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsState.ts","webpack://website/../jui/src/ToolWindows/utils.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowSettingsIconMenu.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowHeader.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowToolbarButton.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindows.tsx","webpack://website/../jui/src/ToolWindowsImpl/MultiViewToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowActionIds.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowActions.tsx","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowsActions.tsx","webpack://website/../jui/src/Toolbar/Toolbar.tsx","webpack://website/../jui/src/Tooltip/ActionHelpTooltip.tsx","webpack://website/../jui/src/Tooltip/ActionTooltip.tsx","webpack://website/../jui/src/Tooltip/HelpTooltip.tsx","webpack://website/../jui/src/Tooltip/PositionedTooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/Tooltip.tsx","webpack://website/../jui/src/Tooltip/TooltipContext.tsx","webpack://website/../jui/src/Tooltip/TooltipPointer.tsx","webpack://website/../jui/src/Tooltip/TooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/TooltipTriggerAndOverlay.tsx","webpack://website/../jui/src/Tooltip/ValidationTooltip.tsx","webpack://website/../jui/src/Tooltip/tooltip-styles.ts","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/StyledTreeNode.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/__copied__TreeCollection.ts","webpack://website/../jui/src/Tree/getSingleChildrenKeys.ts","webpack://website/../jui/src/Tree/TreeSelectionManager.ts","webpack://website/../jui/src/Tree/useTreeState.ts","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/TreeActions/useTreeActions.tsx","webpack://website/../jui/src/TreeCheckboxes/NestedSelection.ts","webpack://website/../jui/src/TreeCheckboxes/SpeedSearchTreeWithCheckboxes.tsx","webpack://website/../jui/src/TreeCheckboxes/TreeNodeCheckbox.tsx","webpack://website/../jui/src/TreeCheckboxes/useNestedSelectionState.ts","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/selection/useSelectableItem.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/array-utils.ts","webpack://website/../jui/src/utils/interaction-utils/textSelection.ts","webpack://website/../jui/src/utils/interaction-utils/useMove.tsx","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/overflow-utils/OverflowObserver.ts","webpack://website/../jui/src/utils/overflow-utils/useOverflowObserver.tsx","webpack://website/../jui/src/utils/tree-utils.ts","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useEventCallback.ts","webpack://website/../jui/src/utils/useFocusForwarder.ts","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/src/utils/immutableSet.ts","webpack://website/../jui/src/utils/useSet.ts","webpack://website/./src/components/component-linking.tsx","webpack://website/./src/theme/CodeBlock/Expandable.tsx","webpack://website/./src/theme/CodeBlock/Playground.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchContainer.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContainer.tsx","webpack://website/../jui/src/List/SpeedSearchList/useSpeedSearchList.ts","webpack://website/../jui/src/List/SpeedSearchList/SpeedSearchList.tsx","webpack://website/../jui/src/Icon/StyledIconLiveIndicator.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearch.tsx","webpack://website/../jui/src/Tree/Tree.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarPauseButton.tsx","webpack://website/../jui/src/Dropdown/Dropdown.tsx","webpack://website/./src/theme/ReactLiveScope/index.js","webpack://website/./src/theme/Playground/style-overrides.module.css","webpack://website/./src/theme/CodeBlock/index.js","webpack://website/./src/theme/MDXComponents/Code.tsx","webpack://website/./src/theme/MDXComponents/index.ts"],"sourcesContent":["import {\n  Action,\n  ActionDefinition,\n} from \"@intellij-platform/core/ActionSystem/Action\";\n\nexport type ActionInResolvedGroup = Action & { parent: ResolvedActionGroup };\n\n/**\n * Different ways to show a group of actions in a menu.\n * - `submenu`: renders children as submenu (corresponding, in the reference impl, to `isPopup` property of ActionGroup\n *   being set to `true` and 'SUPPRESS_SUBMENU' clientProperty not being set)\n * - `none`: renders the action group as a simple menu item, not rendering its children at all.\n *   The action group will be performed, which typically opens a popup (see {@link useCreateDefaultActionGroup}),\n *   showing the children.\n *   (corresponding, in the reference impl, to `isPopup` property and 'SUPPRESS_SUBMENU' clientProperty being set\n *   to true on the ActionGroup)\n * - `section`: renders children in a section with divider, but without section title\n * - `titledSection`: renders children in a section with divider and title.\n */\ntype ActionGroupMenuPresentation =\n  | \"section\"\n  | \"titledSection\"\n  | \"none\"\n  | \"submenu\";\n\nexport interface MutableActionGroup extends Action {\n  children: Action[];\n  /**\n   * Whether the action group is searchable. See {@link getAvailableActionsFor}.\n   */\n  isSearchable?: boolean;\n  /**\n   * How the action group should be rendered, in menus.\n   */\n  menuPresentation?: ActionGroupMenuPresentation;\n}\nexport type ActionGroup = Readonly<MutableActionGroup>;\n\nexport interface ResolvedActionGroup extends ActionGroup {\n  parent: ResolvedActionGroup | null;\n  children: ActionInResolvedGroup[];\n}\nexport interface ActionGroupDefinition extends ActionDefinition {\n  children: ActionDefinition[]; // Should DividerItem be supported first-class here?\n  /**\n   * Defines how the action group should be represented in menus.\n   * @default 'submenu'\n   * @see ActionGroupMenuPresentation\n   */\n  menuPresentation?: ActionGroupMenuPresentation;\n}\n\nexport function isInResolvedActionGroup(\n  action: Action\n): action is ActionInResolvedGroup {\n  return \"parent\" in action;\n}\nexport function isActionGroup(action: Action): action is ActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isResolvedActionGroup<T extends Action>(\n  action: Action\n): action is ResolvedActionGroup {\n  return \"children\" in action && \"parent\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isActionGroupDefinition(\n  action: ActionDefinition\n): action is ActionGroupDefinition {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n","import React from \"react\";\nimport { useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\n\n/**\n * Renders the first keyboard shortcut for the action specified by {@param actionId}, based on the keymap context.\n * if {@param children} is provided, treats it as a render function that receives the shortcut string.\n */\nexport const ActionShortcut = ({\n  actionId,\n  children,\n}: {\n  actionId: string;\n  children?: (shortcut: string) => React.ReactNode;\n}) => {\n  const getShortcut = useGetActionShortcut();\n  const shortcutString = getShortcut(actionId);\n  return (\n    <>\n      {shortcutString && (children ? children(shortcutString) : shortcutString)}\n    </>\n  );\n};\n\n/**\n * Returns a function that gets first keyboard shortcut for the action specified by `actionId`, based on the\n * keymap context.\n */\nexport const useGetActionShortcut = (): ((actionId: string) => string) => {\n  const keymap = useKeymap();\n  return (actionId: string) => {\n    const keyboardShortcut = keymap?.[actionId]?.find(\n      ({ type }) => type === \"keyboard\"\n    );\n    return keyboardShortcut ? shortcutToString(keyboardShortcut) : \"\";\n  };\n};\n","import React, { KeyboardEventHandler, useRef } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  isKeyboardShortcut,\n  KeyboardShortcut,\n  KeyStroke,\n  Shortcut,\n  supportedModifiers,\n} from \"./Shortcut\";\n\nexport function useShortcuts(\n  shortcuts: { [actionId: string]: ReadonlyArray<Shortcut> },\n  onAction: (\n    actionId: string,\n    args: {\n      event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n    }\n  ) => void | boolean,\n  {\n    useCapture = false,\n  }: {\n    /**\n     * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n     * a descendant element handles events in capture phase, and that conflicts with an action.\n     */\n    useCapture?: boolean;\n  } = {}\n) {\n  const firstKeyActivatedShortcutsRef = useRef<\n    Array<{ actionId: string; shortcut: KeyboardShortcut }>\n  >([]);\n  const secondStrokeResetTimerIdRef = useRef<number | null>(null);\n  const onKeyDown: KeyboardEventHandler<HTMLElement> = useEventCallback((e) => {\n    // TODO: repeated key downs can trigger an action repeatedly, in the original impl. Example: expand/shrink selection\n    if (isModifierOnly(e.nativeEvent) || e.repeat) {\n      return;\n    }\n    // firstKeyActivatedShortcutsRef will be re-adjusted in any case. Cleaning whatever scheduled reset\n    if (secondStrokeResetTimerIdRef.current !== null) {\n      window.clearTimeout(secondStrokeResetTimerIdRef.current);\n    }\n\n    function triggerAction(actionId: string) {\n      const result = onAction(actionId, { event: e });\n      if (result !== false) {\n        // TODO: make sure about how propagation should be stopped and/or controlled\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n    // If there are keyboard shortcuts that are half way handled (first keystroke triggered already, and we are within\n    // the valid wait for the second keystroke), they should be prioritized over first keystroke matching.\n    if (firstKeyActivatedShortcutsRef.current.length > 0) {\n      firstKeyActivatedShortcutsRef.current.some(({ shortcut, actionId }) => {\n        if (isKeyMatch(shortcut.secondKeyStroke, e, true)) {\n          triggerAction(actionId);\n          return true;\n        }\n      });\n      firstKeyActivatedShortcutsRef.current = [];\n    } else {\n      const firstKeyMatches = Object.entries(shortcuts)\n        .flatMap(([actionId, shortcuts]) =>\n          shortcuts.map((shortcut) => ({ actionId, shortcut }))\n        )\n        .filter(\n          (\n            input\n          ): input is {\n            actionId: string;\n            shortcut: KeyboardShortcut;\n          } => isKeyboardShortcut(input.shortcut)\n        )\n        .filter(({ shortcut }) => isKeyMatch(shortcut.firstKeyStroke, e));\n\n      firstKeyActivatedShortcutsRef.current = firstKeyMatches.filter(\n        ({ shortcut, actionId }) => shortcut.secondKeyStroke\n      );\n\n      if (firstKeyActivatedShortcutsRef.current.length > 0) {\n        secondStrokeResetTimerIdRef.current = window.setTimeout(() => {\n          firstKeyActivatedShortcutsRef.current = [];\n        }, 2000);\n        document.addEventListener(\n          \"keydown\",\n          () => {\n            document.addEventListener(\n              \"keyup\",\n              () => {\n                firstKeyActivatedShortcutsRef.current = [];\n              },\n              { once: true }\n            );\n          },\n          //  by passing capture: true, we skip the current keydown event, since it's already passed capture phase\n          { once: true, capture: true }\n        );\n      } else if (firstKeyMatches.length > 0) {\n        triggerAction(firstKeyMatches[0].actionId);\n      }\n    }\n  });\n  const shortcutHandlerProps = {\n    /**\n     * by setting onKeyDownCapture is set instead of onKeyDown, we can prioritize action event handler over\n     * component-specific handlers. That might be useful for some components that aggressively stop propagation of\n     * events they handle, if the action is considered of higher priority compared to the conflicting component-internal\n     * functionality. So maybe an option would be in order to define whether the shortcut's event handling should be done\n     * in capture or bubbling phase.\n     * Another thing to get clarified as action system is more used, is to decide if action handler should stop\n     * propagation or not. Or should it be an option?\n     * UPDATE: Added an option to determine whether event handling should be done in capture phase. The use case is\n     * \"Find in files\" action with Cmd+Shift+O shortcut, which overlaps with some action in Monaco editor (only in .ts\n     * files). Monaco uses capture phase, and stops propagation, so unless we use capture phase, useShortcut's event\n     * handler is never called.\n     * An apposite use case is in SpeedSearchTree in tool windows, where we want Escape to be handled by speed search,\n     * and propagation stopped, if speed search is currently active. The second Escape keystroke should move focus to\n     * the editor. That wouldn't work if we unconditionally handle events in capture phase.\n     */\n    [useCapture ? \"onKeyDownCapture\" : \"onKeyDown\"]: onKeyDown,\n  };\n  return { shortcutHandlerProps };\n}\n\nconst isKeyMatch = (\n  keyStroke: KeyStroke | undefined,\n  e: React.KeyboardEvent,\n  loose?: boolean\n) =>\n  e.code === keyStroke?.code &&\n  (loose ? keyStroke.modifiers || [] : supportedModifiers).every(\n    (modifier) =>\n      e.getModifierState(modifier) ===\n      Boolean(keyStroke.modifiers?.includes(modifier))\n  );\n\nfunction isModifierOnly(event: KeyboardEvent) {\n  return event.location === 1 || event.location === 2;\n}\n","import { sortBy } from \"ramda\";\nimport React, { HTMLAttributes, useContext, useEffect, useState } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { dfsVisit } from \"@intellij-platform/core/utils/tree-utils\";\n\nimport { Keymap, useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\nimport { useShortcuts } from \"./useShortcut\";\nimport {\n  ActionGroup,\n  ActionInResolvedGroup,\n  isActionGroup,\n  isActionGroupDefinition,\n  MutableActionGroup,\n} from \"./ActionGroup\";\nimport {\n  Action,\n  ActionContext,\n  ActionDefinition,\n  MutableAction,\n} from \"./Action\";\n\n/**\n * Represents the properties required for the ActionsProvider component.\n */\nexport interface ActionsProviderProps {\n  /**\n   * A collection of action definitions.\n   */\n  actions: ActionDefinition[];\n  children: (args: {\n    shortcutHandlerProps: HTMLAttributes<HTMLElement>;\n  }) => React.ReactElement;\n\n  /**\n   * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n   * a descendant element handles events in capture phase, and that conflicts with an action.\n   */\n  useCapture?: boolean;\n}\n\nconst ActionsContext = React.createContext<Action[]>([]);\n\nfunction generateId() {\n  return `jui-${Math.floor(Math.random() * 10000000)}`;\n}\n\nconst ACTION_PROVIDER_ID_ATTRIBUTE = \"data-action-provider\";\nconst ACTION_PROVIDER_ID_DATA_PREFIX = \"action_provider_id_\";\nconst actionProvidersMap = new Map<string, Action[]>();\n\n/**\n * Provides a set of actions for the wrapped UI. Uses the currently provided keymap to find the shortcuts\n * for each action, and passes the necessary event handlers for the shortcuts, to the `children` render function.\n *\n * @param {Array<Action>} props.actions - The actions to be provided.\n * @param {boolean} [props.useCapture] - Specifies whether to use capture phase for event handling.\n * @param {Function} props.children - Render function that accepts shortcutHandlerProps as argument.\n */\nexport function ActionsProvider(props: ActionsProviderProps): JSX.Element {\n  const parentContext = useContext(ActionsContext);\n  const keymap = useKeymap();\n  const actions: Action[] = [];\n  dfsVisit(\n    (action: Action | null) =>\n      action && isActionGroup(action) ? action.children : null,\n    (action) => actions.push(action),\n    recursivelyCreateActions(keymap, props.actions)\n  );\n\n  const shortcuts = Object.fromEntries(\n    actions.map((action) => [action.id, action.shortcuts || []])\n  );\n  const [actionProviderId] = useState(generateId);\n\n  const { shortcutHandlerProps } = useShortcuts(\n    shortcuts,\n    (actionId, { event }) => {\n      actions\n        .find((action) => action.id === actionId)\n        ?.perform({\n          event,\n          // it's important to use target and not currentTarget\n          element: event.target instanceof Element ? event.target : null,\n        });\n    },\n    { useCapture: props.useCapture }\n  );\n\n  const allActions = [...parentContext, ...actions]; // Maybe warn overrides?\n\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[ACTION_PROVIDER_ID_ATTRIBUTE] = actionProviderId;\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[\n    `data-${ACTION_PROVIDER_ID_DATA_PREFIX}${actionProviderId}`\n  ] = \"\";\n\n  useEffect(() => {\n    actionProvidersMap.set(actionProviderId, allActions);\n  });\n  useEffect(() => {\n    return () => {\n      actionProvidersMap.delete(actionProviderId);\n    };\n  }, []);\n  return (\n    <ActionsContext.Provider value={allActions}>\n      {props.children({ shortcutHandlerProps })}\n    </ActionsContext.Provider>\n  );\n}\n\nfunction isMutableActionGroup(\n  action: MutableAction\n): action is MutableActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent: ActionGroup\n): Array<ActionInResolvedGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[]\n): Array<Action | ActionGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent?: ActionGroup\n): Array<Action | ActionInResolvedGroup | ActionGroup> {\n  return actionDefinitions.map((actionDefinition: ActionDefinition): Action => {\n    const shortcuts =\n      keymap?.[actionDefinition.id] ??\n      (actionDefinition.useShortcutsOf\n        ? keymap?.[actionDefinition.useShortcutsOf]\n        : undefined);\n    const firstShortcut = shortcuts?.[0];\n    const action: MutableAction | ActionInResolvedGroup = {\n      ...actionDefinition,\n      ...(isActionGroupDefinition(actionDefinition)\n        ? { parent: parent ?? null }\n        : {}),\n      shortcuts,\n      shortcut: firstShortcut ? shortcutToString(firstShortcut) : undefined, // Maybe it should be all shortcuts?\n      perform: (context) => {\n        if (!action.isDisabled) {\n          actionDefinition.actionPerformed(\n            context || { event: null, element: null }\n          );\n        }\n      },\n    };\n    if (\n      isMutableActionGroup(action) &&\n      isActionGroupDefinition(actionDefinition)\n    ) {\n      action.children = recursivelyCreateActions(\n        keymap,\n        actionDefinition.children,\n        action\n      );\n    }\n    return action;\n  });\n}\n\n/**\n * Experimental function to get list of all actions available from a given html elements. Useful for implementing\n * action search UI.\n * @experimental\n */\nexport function getAvailableActionsFor(element: Element): Action[] {\n  const closestActionProvider = element.closest(\n    `[${ACTION_PROVIDER_ID_ATTRIBUTE}]`\n  );\n  if (closestActionProvider instanceof HTMLElement) {\n    /**\n     * NOTE: initially, only one data attribute was used to hold the action provider id. Although simpler, that approach\n     * is subject to bug in some edge cases, where multiple nested action providers are rendered, but `actionProviderProps`\n     * is merged on a single dom element. In such cases, it's important that the props from the innermost action provider\n     * is merged last, overwriting other values for data-action-provider-id.\n     * Because that's error-prone, we keep unique data attributes (`data-action_provider_id_...`} for each action\n     * provider id, and to simplify querying part, we also add a constant data attribute (data-action-provider).\n     * This way we can read all action providers applied on the same dom element. Since action providers inherit actions\n     * from parent action providers, we can reliably pick the actions from the one with the highest number of actions.\n     */\n    const actionSets = Object.keys(closestActionProvider.dataset)\n      .filter((dataKey) => dataKey.startsWith(ACTION_PROVIDER_ID_DATA_PREFIX))\n      .map((dataKey) => {\n        const id = dataKey?.replace(ACTION_PROVIDER_ID_DATA_PREFIX, \"\");\n        const actions = id && actionProvidersMap.get(id);\n        // noinspection PointlessBooleanExpressionJS\n        return actions\n          ? Object.values(actions).filter(\n              ({ isSearchable }) => isSearchable !== false\n            )\n          : [];\n      })\n      .concat();\n    return sortBy((actionSet) => -actionSet.length, actionSets)[0] || [];\n  }\n  return [];\n}\n\nexport function useActions(): Action[] {\n  return useContext(ActionsContext);\n}\n\nexport const useAction = (actionId: string): Action | null => {\n  return useActions().find(({ id }) => id === actionId) ?? null;\n};\n\nexport const usePerformAction = (): ((\n  actionId: string,\n  context?: ActionContext\n) => void) => {\n  const actions = useActions();\n  return useEventCallback((actionId: string, context?: ActionContext) => {\n    const action = actions.find(({ id }) => id === actionId);\n    if (action) {\n      action.perform(context);\n    } else {\n      console.error(\n        `An attempt to perform action with id ${actionId} failed because action was not found`\n      );\n    }\n  });\n};\n","export const CommonActionId = {\n  EXPAND_ALL: \"ExpandAll\",\n  COLLAPSE_ALL: \"CollapseAll\",\n  EXPAND_SELECTION: \"EditorSelectWord\",\n  SHRINK_SELECTION: \"EditorUnSelectWord\",\n  GO_TO_ACTION: \"GotoAction\",\n  GO_TO_FILE: \"GotoFile\",\n  SHOW_INTENTION_ACTIONS: \"ShowIntentionActions\",\n  EDIT_SOURCE: \"Documentation.EditSource\",\n  SHOW_SEARCH_HISTORY: \"ShowSearchHistory\",\n  COPY_REFERENCE: \"CopyReference\",\n  REFRESH: \"Refresh\",\n  COPY: \"$Copy\",\n  CUT: \"$Cut\",\n  PASTE: \"$Paste\",\n  DELETE: \"$Delete\",\n};\n","import React, { useContext } from \"react\";\nimport { Shortcut } from \"./Shortcut\";\nimport { defaultKeymap } from \"./defaultKeymap\";\n\nexport interface Keymap {\n  [actionId: string]: ReadonlyArray<Shortcut>;\n}\n\nexport const KeymapContext = React.createContext<Keymap | null>(defaultKeymap);\n\nexport const KeymapProvider: React.FC<{\n  keymap: Keymap;\n  children?: React.ReactNode;\n}> = ({ keymap: keymapProp, children }) => {\n  const parentKeyMap = useContext(KeymapContext);\n  const keymap = Object.assign(Object.create(parentKeyMap), keymapProp);\n  return (\n    <KeymapContext.Provider value={keymap}>{children}</KeymapContext.Provider>\n  );\n};\n\nexport const useKeymap = () => useContext(KeymapContext);\n","type ShortcutType = \"mouse\" | \"keyboard\";\nexport type KeyStrokeModifier = \"Alt\" | \"Shift\" | \"Meta\" | \"Control\";\n\nexport interface KeyStroke {\n  /**\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key}\n   */\n  code: string;\n  modifiers?: Array<KeyStrokeModifier>;\n}\n\ninterface ShortcutBase {\n  type: ShortcutType;\n}\n\ninterface MouseShortcut extends ShortcutBase {\n  type: \"mouse\";\n}\n\nexport interface KeyboardShortcut extends ShortcutBase {\n  type: \"keyboard\";\n  firstKeyStroke: KeyStroke;\n  secondKeyStroke?: KeyStroke;\n}\n\nexport type Shortcut = MouseShortcut | KeyboardShortcut;\n\nexport const isKeyboardShortcut = (\n  shortcut: Shortcut\n): shortcut is KeyboardShortcut => shortcut.type === \"keyboard\";\n\nexport const supportedModifiers: KeyStrokeModifier[] = [\n  \"Alt\",\n  \"Meta\",\n  \"Shift\",\n  \"Control\",\n];\n","import React from \"react\";\nimport { useAction } from \"@intellij-platform/core/ActionSystem/ActionsProvider\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport const ActionButton = ({\n  actionId,\n  children,\n  ...otherProps\n}: {\n  actionId: string;\n  /**\n   * Content to show instead of `action.icon`.\n   */\n  children?: React.ReactNode;\n} & IconButtonProps): JSX.Element => {\n  const action = useAction(actionId);\n  if (!action) {\n    return <></>;\n  }\n  const actionButton = (\n    <IconButton\n      isDisabled={action.isDisabled}\n      aria-label={action.title}\n      {...otherProps}\n      onPress={(e) => {\n        action?.perform();\n        otherProps.onPress?.(e);\n      }}\n    >\n      {children || action.icon}\n    </IconButton>\n  );\n  if (action.title) {\n    return (\n      <TooltipTrigger\n        tooltip={\n          <ActionTooltip actionName={action.title} shortcut={action.shortcut} />\n        }\n      >\n        {actionButton}\n      </TooltipTrigger>\n    );\n  }\n  return actionButton;\n};\n","import React from \"react\";\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type ActionMenuProps, ActionsMenu } from \"./ActionsMenu\";\n\nexport type ActionGroupMenuProps = Omit<ActionMenuProps, \"actions\"> & {\n  actionGroup: ActionGroup;\n};\n/**\n * Renders children of an action group as a menu.\n */\nexport const ActionGroupMenu = ({\n  actionGroup,\n  ...props\n}: ActionGroupMenuProps) => {\n  return (\n    <ActionsMenu\n      aria-label={actionGroup.title}\n      actions={actionGroup.children}\n      {...props}\n    />\n  );\n};\n","import React from \"react\";\nimport { flatten } from \"ramda\";\nimport { Menu, MenuItemLayout, MenuProps } from \"@intellij-platform/core/Menu\";\nimport { Divider, Item, Section } from \"@intellij-platform/core/Collections\";\nimport { DividerItem } from \"@intellij-platform/core/Collections/Divider\"; // Importing from /Collections breaks the build for some reason\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport {\n  type Action,\n  ActionContext,\n} from \"@intellij-platform/core/ActionSystem/Action\";\n\ntype ActionGroupAsMenuItem = Pick<\n  ActionGroup,\n  \"id\" | \"icon\" | \"title\" | \"isDisabled\" | \"children\" | \"menuPresentation\"\n>;\nexport type ActionItem = ActionGroupAsMenuItem | Action | DividerItem;\n\nfunction isAction(item: ActionItem): item is Action {\n  return \"perform\" in item;\n}\n\ntype ControlledMenuProps = Pick<\n  MenuProps<ActionItem>,\n  \"onAction\" | \"disabledKeys\" | \"items\" | \"children\"\n>;\ntype RenderMenu = (props: ControlledMenuProps) => React.ReactNode;\nexport type ActionMenuProps = {\n  actions: Array<ActionItem>;\n\n  /**\n   * Context with which actions should be performed.\n   * Usually the context by which the ActionsMenu itself is opened.\n   * Pass a function for lazy evaluation when the action is selected from the menu.\n   */\n  actionContext?: ActionContext | (() => ActionContext);\n  /**\n   * Allows for rendering a custom menu component, e.g. {@link SpeedSearchMenu}.\n   * If not provided, {@link Menu} is rendered, receiving additional props that\n   * are passed to `ActionsMenu`.\n   * If it is provided, additional {@link Menu} props are not allowed, and they\n   * can be passed directly to the returned menu element.\n   */\n  children?: RenderMenu;\n} & (\n  | {\n      children: RenderMenu;\n    }\n  | (Omit<MenuProps<ActionItem>, keyof ControlledMenuProps> & {\n      children?: never;\n    })\n);\n/**\n * Given a nested list of resolved actions, renders a menu corresponding to them.\n */\nexport function ActionsMenu({\n  actions,\n  actionContext,\n  children = (actionMenuProps) => <Menu {...otherProps} {...actionMenuProps} />,\n  ...otherProps\n}: ActionMenuProps) {\n  const allActions = getAllActions(actions);\n  const disabledKeys = allActions\n    .filter(({ isDisabled }) => isDisabled)\n    .map(({ id }) => id);\n\n  return (\n    <>\n      {children({\n        onAction: (key) => {\n          const action = allActions.find(({ id }) => id === key);\n          if (action && isAction(action)) {\n            action.perform(\n              typeof actionContext === \"function\"\n                ? actionContext?.()\n                : actionContext\n            );\n          }\n        },\n        disabledKeys,\n        // FIXME: keep isSelected on actions (toggle action) and control selectedKeys too?\n        items: actions,\n        children: (action) => {\n          if (action instanceof DividerItem) {\n            return <Divider />;\n          }\n          return renderActionAsMenuItem(action);\n        },\n      })}\n    </>\n  );\n}\n\ntype ActionAsMenuItem = Omit<Action, \"perform\" | \"shortcuts\">;\n\nexport function renderActionAsMenuItem(\n  action: ActionAsMenuItem | ActionGroupAsMenuItem\n) {\n  const isGroup = \"children\" in action;\n  if (\n    isGroup &&\n    (action.menuPresentation === \"section\" ||\n      action.menuPresentation === \"titledSection\")\n  ) {\n    return (\n      <Section\n        key={action.id}\n        // @ts-expect-error: hasDivider is not yet made a public API.\n        hasDivider\n        aria-label={\n          action.menuPresentation === \"section\" ? action.title : undefined\n        }\n        title={\n          action.menuPresentation === \"titledSection\" ? action.title : undefined\n        }\n        items={action.children}\n      >\n        {renderActionAsMenuItem}\n      </Section>\n    );\n  }\n  return (\n    <Item\n      key={action.id}\n      textValue={action.title}\n      aria-label={action.title}\n      childItems={\n        isGroup && action.menuPresentation === \"submenu\"\n          ? action.children\n          : undefined\n      }\n    >\n      <MenuItemLayout\n        content={action.title}\n        icon={action.icon}\n        shortcut={\"shortcut\" in action ? action.shortcut : undefined}\n      />\n    </Item>\n  );\n}\n\nfunction getAllActions(items: ActionItem[]): Action[] {\n  return flatten(\n    items.map((item) =>\n      [item].concat(\"children\" in item ? getAllActions(item.children) : [])\n    )\n  ).filter(isAction);\n}\n","import { flatten } from \"ramda\";\nimport React from \"react\";\nimport { Popup, usePopupManager } from \"@intellij-platform/core/Popup\";\nimport { SpeedSearchMenu } from \"@intellij-platform/core/Menu\";\nimport { MENU_POSITION_TARGET_DATA_ATTRIBUTE } from \"@intellij-platform/core/Menu/ContextMenuContainer\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  ActionContext,\n  type ActionGroupDefinition,\n  isActionGroupDefinition,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\n\nimport { renderActionAsMenuItem } from \"./ActionsMenu\";\n\nexport const useCreateDefaultActionGroup = () => {\n  const { show } = usePopupManager();\n  const getActionShortcut = useGetActionShortcut();\n  const openActionsInPopup = useEventCallback(\n    (\n      { children, title }: Pick<ActionGroupDefinition, \"children\" | \"title\">,\n      context: ActionContext\n    ) => {\n      show(({ close }) => (\n        <Popup\n          // Maybe an option to conditionally use context-based positioning?\n          positioning={\n            context.element instanceof HTMLElement\n              ? {\n                  targetRef: {\n                    current:\n                      context.element.querySelector(\n                        `[${MENU_POSITION_TARGET_DATA_ATTRIBUTE}]`\n                      ) ?? context.element,\n                  },\n                  placement: \"bottom\",\n                }\n              : undefined\n          }\n        >\n          <Popup.Layout\n            content={\n              /**\n               * NOTE: It would be much nicer to use {@link ActionGroupMenu} component here. But the action group is not\n               * yet provided when the group definition is being created. It seems like a sign of bad design that needs\n               * to get addressed.\n               */\n              <SpeedSearchMenu\n                aria-label={title}\n                items={children}\n                onAction={(key) => {\n                  // The need for calculating `allActions` is a consequence of the issue explained in the note above.\n                  const allActions = flatten(\n                    children.map((item) =>\n                      isActionGroupDefinition(item) ? item.children : item\n                    )\n                  );\n                  const action = allActions.find((action) => action.id === key);\n                  if (action && !action.isDisabled) {\n                    action.actionPerformed(context);\n                  }\n                }}\n                onClose={close}\n                autoFocus=\"first\"\n              >\n                {(item) =>\n                  renderActionAsMenuItem({\n                    ...item,\n                    // a consequence of the issue explained in the note above.\n                    shortcut: getActionShortcut(item.id),\n                  })\n                }\n              </SpeedSearchMenu>\n            }\n            header={title}\n          />\n        </Popup>\n      ));\n    }\n  );\n\n  return (\n    groupDefinition: Omit<ActionGroupDefinition, \"actionPerformed\">\n  ): ActionGroupDefinition => {\n    return {\n      menuPresentation: \"submenu\",\n      ...groupDefinition,\n      actionPerformed: (context) =>\n        openActionsInPopup(groupDefinition, context),\n    };\n  };\n};\n","import {\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  // For some reason importing from shorter paths doesn't work as expected in cypress ¯\\_(ツ)_/¯\n  // Weirdly, `import *` works in that case.\n} from \"@intellij-platform/core/ToolWindowsImpl/ToolWindowActionIds\";\n\nimport { Keymap } from \"./KeymapProvider\";\nimport { CommonActionId } from \"./CommonActionIds\";\n\n// TODO: OS specific defaults\n// TODO: extract and export action ids\n// NOTE: defaultKeymap doesn't belong to ActionSystem semantically. Would be something to be moved to a separate module\n/**\n * Default Intellij Idea keymapping for common action ids, including tool window actions.\n * @see CommonActionId\n */\nexport const defaultKeymap: Keymap = {\n  [RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowRight\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_LEFT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowLeft\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_TOP_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowUp\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowDown\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [MAXIMIZE_TOOL_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Quote\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [FOCUS_EDITOR_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n      },\n    },\n  ],\n  [HIDE_ACTIVE_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n        modifiers: [\"Shift\"],\n      },\n    },\n  ],\n  [HIDE_ALL_WINDOWS_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [JUMP_TO_LAST_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowUp\",\n      },\n    },\n  ],\n  [CommonActionId.SHRINK_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Equal\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadAdd\",\n      },\n    },\n  ],\n  [CommonActionId.COLLAPSE_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Minus\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadSubtract\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_ACTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyA\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_INTENTION_ACTIONS]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"Enter\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_FILE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyO\",\n      },\n    },\n  ],\n  [CommonActionId.EDIT_SOURCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"ArrowDown\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F4\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_SEARCH_HISTORY]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.COPY_REFERENCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\", \"Alt\"],\n        code: \"KeyC\",\n      },\n    },\n  ],\n  [CommonActionId.REFRESH]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyR\",\n      },\n    },\n  ],\n  [CommonActionId.DELETE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Backspace\",\n      },\n    },\n  ],\n  [CommonActionId.COPY]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyC\",\n      },\n    },\n  ],\n  [CommonActionId.CUT]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyX\",\n      },\n    },\n  ],\n  [CommonActionId.PASTE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyV\",\n      },\n    },\n  ],\n};\n","import { fromPairs } from \"ramda\";\nimport { isMac } from \"@react-aria/utils\";\nimport {\n  isKeyboardShortcut,\n  KeyStroke,\n  KeyStrokeModifier,\n  Shortcut,\n} from \"./Shortcut\";\nimport {\n  KeyboardEventKey,\n  LinuxDeadKeys,\n  NumericKeypadKeys,\n  UpperAlpha,\n} from \"./KeyboardEventKey\";\n\nconst defaultKeyToStr: {\n  [key in Exclude<\n    KeyStrokeModifier | KeyboardEventKey,\n    LinuxDeadKeys | UpperAlpha | NumericKeypadKeys\n  >]: string;\n} = {\n  Control: \"Ctrl\",\n  \" \": \"Space\",\n  ArrowDown: \"↓\",\n  ArrowUp: \"↑\",\n  ArrowLeft: \"←\",\n  ArrowRight: \"→\",\n  Enter: \"⏎\",\n  Quote: \"'\",\n  Minus: \"-\",\n  Equal: \"+\",\n  Backspace: \"⌫\",\n  // lowercase to uppercase map\n  ...fromPairs(\n    Array.from(Array(26))\n      .map((e, i) => i + \"a\".charCodeAt(0))\n      .map((x) => String.fromCharCode(x))\n      .map((a) => [a, a.toUpperCase()])\n  ),\n};\nconst KeystrokeToString: {\n  separator: string;\n  codeToStr: Record<KeyStrokeModifier | KeyboardEventKey, string>;\n} = isMac()\n  ? {\n      separator: \"\",\n      codeToStr: {\n        ...defaultKeyToStr,\n        Alt: \"⌥\",\n        Shift: \"⇧\",\n        Meta: \"⌘\",\n        Control: \"^\",\n        Escape: \"⎋\",\n      },\n    }\n  : {\n      separator: \"+\",\n      codeToStr: defaultKeyToStr,\n    };\n\nconst modifiersOrder: KeyStrokeModifier[] = [\"Control\", \"Alt\", \"Shift\", \"Meta\"];\nexport const keystrokeToString = (keystroke: KeyStroke) => {\n  return [\n    ...(keystroke.modifiers || []).sort(\n      (a, b) => modifiersOrder.indexOf(a) - modifiersOrder.indexOf(b)\n    ),\n    keystroke.code,\n  ]\n    .map((code) => KeystrokeToString.codeToStr[code] || code)\n    .map((code) => code.replace(/^(Key|Digit|Numpad)(.)$/, \"$2\"))\n    .join(KeystrokeToString.separator);\n};\nexport const shortcutToString = (shortcut: Shortcut) => {\n  if (isKeyboardShortcut(shortcut)) {\n    return [shortcut.firstKeyStroke, shortcut.secondKeyStroke]\n      .filter((i): i is KeyStroke => i != undefined)\n      .map(keystrokeToString)\n      .join(\", \");\n  }\n  throw new Error(\"Not implemented yet\");\n};\n","import { useAction } from \"./ActionsProvider\";\nimport { isResolvedActionGroup, ResolvedActionGroup } from \"./ActionGroup\";\n\nexport const useActionGroup = (\n  actionGroupId: string\n): ResolvedActionGroup | null => {\n  const action = useAction(actionGroupId);\n  if (action) {\n    if (isResolvedActionGroup(action)) {\n      return action;\n    }\n    throw new Error(`Action with id ${actionGroupId} is not a group`);\n  }\n  return null;\n};\n","import React from \"react\";\nimport {\n  ModalWindow,\n  ModalWindowProps,\n} from \"@intellij-platform/core/ModalWindow\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\nimport { styled } from \"../styled\";\nimport { StyledWindowContainer } from \"@intellij-platform/core/ModalWindow/ModalWindow\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { ButtonGroup } from \"@intellij-platform/core/ButtonGroup\";\nimport { isEventOnEmptySpaces } from \"@intellij-platform/core/utils/interaction-utils/useMove\";\n\nexport interface AlertDialogProps\n  extends Pick<ModalWindowProps, \"minWidth\" | \"id\" | \"onClose\"> {\n  /**\n   * Content slot for the heading, aka. title of the dialog. Typically plain text.\n   */\n  heading?: React.ReactNode;\n  /**\n   * Content slot for the body, aka. message of the dialog. Typically plain text.\n   */\n  body?: React.ReactNode;\n  /**\n   * Content slot for the checkbox (\"Do not ask again\").\n   * @example\n   * ```jsx\n   * <AlertDialog checkbox={<Checkbox>Do not ask again</Checkbox>} />\n   * ```\n   * @see Checkbox\n   */\n  checkbox?: React.ReactNode;\n\n  /**\n   * Type of the alert dialog. The icon is set based on type.\n   */\n  type?: \"error\" | \"warning\" | \"information\" | \"question\";\n\n  /**\n   * Content slot for buttons.\n   * @example\n   * ```jsx\n   * <AlertDialog\n   *   buttons={\n   *     <>\n   *       <Button>Cancel</Button>\n   *       <Button variant=\"default\">Ok</Button>\n   *     </>\n   *   }\n   * />\n   * ```\n   * @see Button\n   */\n  buttons?: React.ReactNode;\n\n  /**\n   * Content slot for help icon button in the footer.\n   * @example\n   * ```jsx\n   * <AlertDialog\n   *   helpButton={\n   *     <TooltipTrigger tooltip={<HelpTooltip helpText=\"Show Help Contents\" />}>\n   *       <Button variant=\"icon\">\n   *         <PlatformIcon icon=\"actions/help\"></PlatformIcon>\n   *       </Button>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   * @see Button\n   */\n  helpButton?: React.ReactNode;\n}\n\nconst StyledModalWindow = styled(ModalWindow)`\n  ${StyledWindowContainer} {\n    border-radius: 0;\n    outline: 0.5px solid rgba(0, 0, 0, 0.85); // FIXME\n  }\n`;\n\nconst StyledContainer = styled.div`\n  padding: 1.25rem;\n  display: grid;\n  grid-template-columns: auto 1fr;\n  grid-template-rows: auto auto;\n  align-items: center;\n  gap: 0.875rem;\n`;\n\nconst StyledHeading = styled.h2`\n  margin: 0;\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n  font-weight: bold;\n`;\n\nconst StyledBody = styled.div`\n  line-height: 1.2;\n`;\n\nconst StyledContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  gap: 0.5rem;\n  cursor: default;\n`;\n\nconst StyledCheckbox = styled.div`\n  padding: 0.375rem 0;\n  // to align the checkbox with the content, since the box has a padding. Maybe Checkbox should not have any padding.\n  margin-left: -0.25rem;\n`;\n\nconst StyledButtons = styled(ButtonGroup)`\n  display: flex;\n  justify-self: end;\n  gap: 1rem;\n`;\n\nconst StyledIcon = styled.span`\n  align-self: start;\n`;\n\nconst StyledHelpIcon = styled.div`\n  justify-self: center;\n`;\n\n/**\n * A modal dialog implementing [Alert](https://jetbrains.github.io/ui/controls/alert), which is the\n * [notification](https://jetbrains.github.io/ui/controls/notifications/) pattern for use cases where\n * immediate user action is required.\n * Since the use cases are quite specific, and the component is expected to be used with pretty specific\n * content items, the layout is not implemented as a separate component, the way it is in components like\n * {@link ModalWindow} or {@link Menu}\n *\n *\n */\nexport const AlertDialog = ({\n  type = \"question\",\n  heading,\n  body,\n  checkbox,\n  helpButton,\n  buttons,\n  minWidth = 370,\n  ...otherProps\n}: AlertDialogProps): JSX.Element => {\n  return (\n    <StyledModalWindow\n      role=\"alertdialog\"\n      interactions=\"move\"\n      minWidth={minWidth}\n      defaultBounds={{\n        top: window.innerHeight / 4,\n      }}\n      // Reacting to content size, to make sure the content will be visible, considering the window is not resizable.\n      observeContentResize\n      {...otherProps}\n    >\n      <OverlayMoveHandle dragThreshold={6} canMoveStart={isEventOnEmptySpaces}>\n        {({ moveHandleProps }) => (\n          <StyledContainer {...moveHandleProps}>\n            <StyledIcon>\n              {/* Icon name is theme-able in the reference impl via OptionPane[`${icon}Icon`] */}\n              <PlatformIcon size={32} icon={`general/${type}Dialog`} />\n            </StyledIcon>\n            <StyledContent>\n              <StyledHeading>{heading}</StyledHeading>\n              <StyledBody>{body}</StyledBody>\n              {checkbox && <StyledCheckbox>{checkbox}</StyledCheckbox>}\n            </StyledContent>\n            <StyledHelpIcon>{helpButton}</StyledHelpIcon>\n            <StyledButtons>{buttons}</StyledButtons>\n          </StyledContainer>\n        )}\n      </OverlayMoveHandle>\n    </StyledModalWindow>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport { useWindowManager } from \"@intellij-platform/core/ModalWindow\";\nimport { Button } from \"@intellij-platform/core/Button\";\n\nimport { AlertDialog } from \"./AlertDialog\";\n\nexport interface AlertDialogApi {\n  confirm(options: {\n    title: ReactNode;\n    message: ReactNode;\n    okText?: string;\n    cancelText?: string;\n  }): Promise<boolean>;\n}\n\n/**\n * Similar to com.intellij.openapi.ui.Messages class in the reference impl, provides helper functions\n * to show different types of Alert dialog. The helper functions return a Promise of the selected option,\n * which makes it easy to use it imperatively, in a flow of statements, regardless of how the UI of the\n * alert dialog is handled.\n * {@link useAlertDialog} depends on {@link WindowManager}, to imperatively open modal windows.\n * @experimental\n */\nexport function useAlertDialog(): AlertDialogApi {\n  const { open } = useWindowManager();\n  return {\n    confirm: ({ title, message, okText = \"Ok\", cancelText = \"Cancel\" }) =>\n      new Promise((resolve) => {\n        open(({ close }) => (\n          <AlertDialog\n            type=\"question\"\n            body={message}\n            heading={title}\n            buttons={\n              <>\n                <Button onPress={close}>{cancelText}</Button>\n                <Button\n                  variant=\"default\"\n                  onPress={() => {\n                    resolve(true);\n                    close();\n                  }}\n                >\n                  {okText}\n                </Button>\n              </>\n            }\n            onClose={() => resolve(false)}\n          />\n        ));\n      }),\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nconst CORNER_RADIUS = 12; // it used to be 8. After introduction of Notifications tool window, it's 12\n\nconst bgColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Notification.background\",\n    !theme.dark ? \"rgb(242,242,242)\" : \"#4E5052\"\n  );\n\nexport const StyledHeaderActions = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  background: inherit;\n  padding: 0.375rem 0.5rem 0;\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: 100%;\n    background: linear-gradient(90deg, transparent, ${bgColor});\n    width: 20px;\n    height: 100%;\n    z-index: 1;\n    top: 0;\n  }\n`;\n\nexport const StyledBalloonContainer = styled.div`\n  line-height: 1.2;\n  box-sizing: border-box;\n  overflow: hidden; // header actions overflows a little at the top right rounded corner\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); // shadow doesn't seem to be themed\n  padding: 0.5rem 0;\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"Notification.borderColor\",\n        !theme.dark ? \"#B2B2B2CD\" : \"#565A5CCD\"\n      )};\n  border-radius: ${({ theme }) =>\n    `${\n      (theme.value<number>(\n        \"Notification.arc\" as UnknownThemeProp<\"Notification.arc\">\n      ) ?? CORNER_RADIUS) / 2\n    }px`};\n  //display: inline-flex;\n  width: 23.3125rem;\n  position: relative;\n  background-color: ${bgColor};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Notification.foreground\",\n      !theme.dark ? \"#000\" : \"rgb(191,191,191)\"\n    )};\n\n  ${StyledHeaderActions} {\n    display: none;\n  }\n  &:hover ${StyledHeaderActions} {\n    display: initial;\n  }\n`;\n\nexport const StyledIconContainer = styled.span`\n  position: absolute;\n  left: 0.75rem;\n  top: 0.5rem;\n`;\n\nexport const StyledBalloonHeader = styled.div`\n  line-height: 1rem;\n  font-weight: bold;\n  margin: 0 2.125rem 0.25rem;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; // this is not the case in original impl, but it's a clear improvement\n`;\n\nexport const StyledBalloonBody = styled.div<{\n  lineClamp: number | false;\n}>`\n  margin: 0 2.125rem 0 2.125rem;\n  line-height: 1rem;\n  display: inline;\n  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};\n  word-break: ${({ lineClamp }) => lineClamp === 1 && \"break-all\"};\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nexport const StyledBalloonFooter = styled.div`\n  margin: 0.375rem 1.875rem 0 2.125rem;\n  display: inline-flex;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 1rem;\n\n  // could be -webkit-fill-available too, if it has good support. Probably it doesn't tho\n  max-width: calc(100% - 3.5rem);\n`;\n\nexport const StyledToggleIconContainer = styled.span`\n  display: inline-flex;\n  position: absolute;\n  right: 0.5rem;\n  bottom: 0;\n  background-color: ${bgColor};\n  padding-left: 0.5rem;\n`;\n\nexport const StyledToggleExpandButtonContainer = styled.span`\n  display: block;\n  position: relative; // for icon absolute positioning\n  cursor: pointer;\n  flex: 1;\n`;\n\nexport const StyledToggleExpandButtonFooterContainer = styled(\n  StyledToggleExpandButtonContainer\n)`\n  min-height: 1.5rem;\n  margin: -0.5rem 0;\n  position: relative;\n  z-index: 1;\n  ${StyledToggleIconContainer} {\n    bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter} {\n    margin-top: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter}:hover + * .icon[data-hover] {\n    display: none;\n  }\n  ${StyledBalloonFooter}:hover + * .icon {\n    display: unset;\n  }\n`;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { IconProps } from \"@intellij-platform/core/Icon/IconProps\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  StyledBalloonBody,\n  StyledBalloonContainer,\n  StyledBalloonFooter,\n  StyledBalloonHeader,\n  StyledHeaderActions,\n  StyledIconContainer,\n  StyledToggleExpandButtonContainer,\n  StyledToggleExpandButtonFooterContainer,\n  StyledToggleIconContainer,\n} from \"@intellij-platform/core/Balloon/Balloon.styled\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { Link } from \"@intellij-platform/core/Link\";\n\nexport type BalloonProps = ControlledStateProps<{ expanded: boolean }> &\n  DOMProps & {\n    /**\n     * Icon rendered in the top left\n     */\n    icon?: \"Info\" | \"Warning\" | \"Error\" | React.ReactElement<IconProps>;\n    /**\n     * Rendered beside close button. Can be used for rendering a \"notification settings\" icon button.\n     */\n    headerActions?: React.ReactNode;\n    /**\n     * Called when the close button is clicked. If not passed, close button will not be rendered.\n     */\n    onClose?: () => void;\n    /**\n     * Actions rendered in the footer.\n     */\n    actions?: React.ReactNode;\n  } & (\n    | {\n        title?: React.ReactNode;\n        body: React.ReactNode;\n      }\n    | {\n        title: React.ReactNode;\n        body?: React.ReactNode;\n      }\n  );\n\ntype BalloonContextObj = {\n  onClose?: () => void;\n};\nconst BalloonContext = React.createContext<BalloonContextObj | null>(null);\n\n/**\n * A tiny wrapper around {@link Link} component, to be used for actions in Balloon.\n * It closes the balloon when pressed.\n */\nexport const BalloonActionLink: typeof Link = React.forwardRef(\n  ({ onPress, ...props }, ref) => {\n    const context = useContext(BalloonContext);\n    if (context === null) {\n      throw new Error(\n        \"BalloonActionLink should only be rendered inside Balloon notifications\"\n      );\n    }\n    return (\n      <Link\n        ref={ref}\n        {...props}\n        onPress={(...args) => {\n          context?.onClose?.();\n          return onPress?.(...args);\n        }}\n      />\n    );\n  }\n);\n/**\n * [Balloon notification](https://jetbrains.github.io/ui/controls/balloon/) UI.\n *\n * Notes and TODO:\n * - Add support for \"error\" variant: https://github.com/JetBrains/intellij-community/blob/48c024fcd38bd8d1eccdada05489a8952a494270/platform/platform-impl/src/com/intellij/diagnostic/IdeMessagePanel.java#L215\n * - Add support for timeout. Although if the auto close behaviour is only timeout-based, maybe there is not much value in adding a prop for it and calling onClose on timeout.\n * - BalloonActions component to be used for rendering a bunch of links in the actions. It should encapsulate the\n *   behaviour of moving actions into a menu when there is not enough room.\n */\nexport const Balloon = ({\n  icon: iconProp = \"Info\",\n  expanded: expandedProp,\n  defaultExpanded = false,\n  onExpandedChange,\n  title,\n  headerActions,\n  onClose,\n  body,\n  actions,\n  ...containerProps\n}: BalloonProps): React.ReactElement => {\n  const bodyRef = useRef<HTMLDivElement>(null);\n  const [expandable, setExpandable] = useState(false);\n  const [expanded, setExpanded] = useControlledState(\n    expandedProp!,\n    defaultExpanded,\n    onExpandedChange!\n  );\n  const maxLinesWhenNotExpanded = 1 + (title ? 0 : 1) + (actions ? 0 : 1);\n\n  useEffect(() => {\n    const bodyElem = bodyRef.current;\n    if (bodyElem) {\n      setExpandable(\n        expanded\n          ? getNumLines(bodyElem) > maxLinesWhenNotExpanded\n          : bodyElem.scrollHeight > bodyElem.clientHeight\n      );\n    } else {\n      setExpandable(false);\n    }\n  }, [expanded]);\n  const validIconTypes = [\"Error\", \"Warning\", \"Info\"] as const;\n  const icon =\n    typeof iconProp === \"string\" ? (\n      <PlatformIcon\n        icon={`general/notification${validIconTypes.find(\n          (iconType, index, arr) =>\n            iconType === iconProp || index === arr.length - 1\n        )}.svg`}\n      />\n    ) : (\n      iconProp\n    );\n  // @ts-expect-error support for callback updater is removed from useControlledState. https://github.com/adobe/react-spectrum/issues/2320\n  const toggle = () => setExpanded((expanded) => !expanded);\n\n  const effectiveExpanded = expanded && Boolean(body);\n\n  return (\n    <BalloonContext.Provider value={{ onClose }}>\n      <StyledBalloonContainer data-testid=\"balloon\" {...containerProps}>\n        <StyledIconContainer>{icon}</StyledIconContainer>\n        {title && <StyledBalloonHeader>{title}</StyledBalloonHeader>}\n        <StyledHeaderActions>\n          {headerActions}\n          {onClose && (\n            <AutoHoverPlatformIcon\n              icon=\"ide/notification/close.svg\"\n              onClick={onClose}\n              role=\"button\"\n              data-testid=\"close-btn\"\n              style={{ marginLeft: \"0.75rem\" }}\n            />\n          )}\n        </StyledHeaderActions>\n        {body && (\n          <ToggleWrapper\n            expanded={effectiveExpanded}\n            enabled={expandable && !effectiveExpanded}\n            onToggle={toggle}\n          >\n            <StyledBalloonBody\n              lineClamp={!effectiveExpanded && maxLinesWhenNotExpanded}\n              ref={bodyRef}\n            >\n              {body}\n            </StyledBalloonBody>\n          </ToggleWrapper>\n        )}\n        <ToggleWrapper\n          expanded={effectiveExpanded}\n          enabled={expandable && effectiveExpanded}\n          onToggle={toggle}\n          Component={StyledToggleExpandButtonFooterContainer}\n        >\n          {actions && (\n            <StyledBalloonFooter onClick={(e) => e.stopPropagation()}>\n              {actions}\n            </StyledBalloonFooter>\n          )}\n        </ToggleWrapper>\n      </StyledBalloonContainer>\n    </BalloonContext.Provider>\n  );\n};\n\n/**\n * If enabled wraps its children in a clickable area (with the expand/collapse arrow),f for toggling expanded state.\n */\nconst ToggleWrapper: React.FC<{\n  children?: React.ReactNode;\n  enabled: boolean;\n  expanded: boolean;\n  Component?: typeof StyledToggleExpandButtonContainer;\n  onToggle: () => void;\n}> = ({\n  children,\n  onToggle,\n  expanded,\n  enabled,\n  Component = StyledToggleExpandButtonContainer,\n}) => {\n  const iconName = expanded ? \"collapse\" : \"expand\";\n  const toggleIcon = (\n    <StyledToggleIconContainer>\n      <AutoHoverPlatformIcon\n        hoverContainerSelector={`${Component}`}\n        icon={`ide/notification/${iconName}.svg`}\n        className=\"icon\"\n      />\n    </StyledToggleIconContainer>\n  );\n\n  return enabled ? (\n    <Component\n      onClick={onToggle}\n      role=\"button\"\n      data-testid={`${expanded ? \"collapse\" : \"expand\"}-btn`}\n    >\n      {children}\n      {toggleIcon}\n    </Component>\n  ) : (\n    <>{children}</>\n  );\n};\n\n/**\n * Based on the computed line-height and clientHeight of the element, returns the number of lines of the content.\n */\nfunction getNumLines(bodyElem: Element) {\n  return (\n    bodyElem.clientHeight / parseFloat(getComputedStyle(bodyElem).lineHeight)\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Balloon, BalloonProps } from \"./Balloon\";\nimport { StyledBalloonsStack } from \"./StyledBalloonsStack\";\n\ntype ShowProps = Pick<\n  BalloonProps,\n  \"title\" | \"icon\" | \"body\" | \"actions\" | \"headerActions\"\n>;\n\nexport interface BalloonManagerAPI {\n  /**\n   * Shows a Balloon notification on the bottom left of the screen.\n   * @param props: Props to pass to the Balloon component\n   * @param [autoHideTimeout=10_000] timeout in ms for hiding the balloon notification.\n   * @returns hide function, in case the notification can expire for some reason.\n   */\n  show(props: ShowProps, autoHideTimeout?: number): () => void;\n  showSticky(props: ShowProps): () => void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\"You must render a BalloonManager...\");\n};\n\nconst BalloonsContext = React.createContext<BalloonManagerAPI>({\n  show: NotImplementedFn,\n  showSticky: NotImplementedFn,\n});\n\nexport const useBalloonManager = (): BalloonManagerAPI =>\n  useContext(BalloonsContext);\n\ntype BalloonElement = ReactElement<BalloonProps, typeof Balloon>;\n\nexport interface BalloonManagerProps {\n  disablePortal?: boolean;\n  BalloonsContainer?: React.ElementType;\n  children?: React.ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link useBalloonManager}) for showing Balloon notifications on the bottom right of the screen.\n * It renders notifications in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n * @param disablePortal: if `true`, the container for notifications will not be rendered in a portal\n * @param BalloonsContainer: container component for the notifications. It's {@link StyledBalloonsStack} by default.\n *\n * TODO: fade in/out transition. Notes:\n *  - Doesn't seem fade-in is needed. Tho it's much easier than fade-out, as it can be achieved with a css animation.\n *  - Fade out should happen only when the balloon is being hidden by timeout.\n * TODO: Support for maximum number of notifications and showing \"x more notification(s)\" button if the limit exceeds\n */\n\nexport const BalloonManager: React.FC<BalloonManagerProps> = ({\n  children,\n  disablePortal,\n  BalloonsContainer = StyledBalloonsStack,\n}) => {\n  const [balloons, setBalloons] = useState<Array<BalloonElement>>([]);\n  const timeoutIdsRef = useRef<number[]>([]);\n  const lastIdRef = useRef<number>(0);\n\n  const api = useMemo<BalloonManagerAPI>(() => {\n    const show: BalloonManagerAPI[\"show\"] = (props, timeout = 10_000) => {\n      lastIdRef.current++;\n      const onClose = () => {\n        setBalloons((balloons) =>\n          balloons.filter((aBalloon) => aBalloon !== balloon)\n        );\n      };\n      const balloon = (\n        <Balloon\n          key={lastIdRef.current}\n          {...props}\n          title={props.title} // TS acts unreasonable without this\n          onClose={onClose}\n        />\n      );\n      setBalloons((balloons) => {\n        if (timeout > 0) {\n          const timeoutId = window.setTimeout(() => {\n            onClose();\n            timeoutIdsRef.current = timeoutIdsRef.current.filter(\n              (aTimeoutId) => aTimeoutId !== timeoutId\n            );\n          }, timeout);\n          timeoutIdsRef.current = [...timeoutIdsRef.current, timeoutId];\n        }\n        return balloons.concat(balloon);\n      });\n      return onClose;\n    };\n    return {\n      show,\n      showSticky: (props) => show(props, 0),\n    };\n  }, []);\n\n  // clear timeouts when unmounted\n  useEffect(() => {\n    return () => {\n      timeoutIdsRef.current.forEach((id) => {\n        window.clearTimeout(id);\n      });\n    };\n  }, []);\n\n  const notificationsStack = (\n    <BalloonsContainer\n      style={{ position: disablePortal ? \"absolute\" : undefined }}\n    >\n      {balloons}\n    </BalloonsContainer>\n  );\n\n  return (\n    <BalloonsContext.Provider value={api}>\n      {children}\n      {disablePortal\n        ? notificationsStack\n        : ReactDOM.createPortal(notificationsStack, document.body)}\n    </BalloonsContext.Provider>\n  );\n};\n","import styled from \"styled-components\";\nimport { StyledBalloonContainer } from \"@intellij-platform/core/Balloon/Balloon.styled\";\n\n/**\n * Container component for stacking a number of Balloons in an overlay placed on the bottom right of where it's rendered.\n */\nexport const StyledBalloonsStack = styled.div`\n  position: fixed;\n  z-index: 1;\n  bottom: 42px;\n  right: 26px;\n  ${StyledBalloonContainer} {\n    margin-bottom: 12px;\n  }\n`;\n","import React, { ForwardedRef, JSXElementConstructor } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  AriaBaseButtonProps,\n  AriaButtonProps,\n  ButtonProps,\n} from \"@react-types/button\";\n\nexport interface BareButtonProps extends AriaBaseButtonProps, ButtonProps {\n  children: React.ReactElement;\n  elementType?: AriaButtonProps[\"elementType\"];\n\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n}\n\n/**\n * A component to make arbitrary content an accessible button which is also able to be a tooltip trigger.\n */\nexport const BareButton = React.forwardRef(function BareButton(\n  { elementType: elementTypeProp, ...props }: BareButtonProps,\n  forwardedRef: ForwardedRef<HTMLElement>\n) {\n  const elementType =\n    elementTypeProp ||\n    (React.isValidElement(props.children) &&\n    typeof props.children.type === \"string\"\n      ? (props.children.type as unknown as JSXElementConstructor<unknown>)\n      : undefined) ||\n    \"button\";\n  const ref = useObjectRef(forwardedRef);\n  const { buttonProps } = useButton(\n    {\n      elementType,\n      ...props,\n    },\n    ref\n  );\n  const domProps = filterDOMProps(props);\n  const { autoFocus } = props;\n\n  return React.cloneElement(\n    props.children,\n    mergeProps(domProps, buttonProps, { autoFocus, ref })\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  height: 1.5rem;\n  font-family: inherit;\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, {\n  ButtonHTMLAttributes,\n  CSSProperties,\n  ForwardedRef,\n} from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  StyledButton,\n  StyledDefaultButton,\n  StyledIconButton,\n} from \"@intellij-platform/core/Button/StyledButton\";\nimport { MnemonicTrigger } from \"@intellij-platform/core/Mnemonic\";\nimport { PressEvent } from \"@react-types/shared/src/events\";\n\ntype ButtonVariant = \"default\" | \"icon\";\nexport interface ButtonProps extends AriaButtonProps {\n  variant?: ButtonVariant; // can allow for custom (styled) component too if needed.\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  // Should this be become true by default? Maybe an context-based API to set defaults like this for a section?\n  preventFocusOnPress?: boolean;\n\n  form?: ButtonHTMLAttributes<HTMLButtonElement>[\"form\"];\n  style?: CSSProperties;\n  /**\n   * A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\n   * It will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\n   * Note: if you use mnemonic, and the direct child of the button is not a string, you should use `MnemonicText`\n   * to render the button text, to have the underlining behavior.\n   */\n  mnemonic?: string;\n  className?: string;\n\n  /**\n   * Called when the button is pressed, or triggered via mnemonic. If mnemonic is used, there won't be any event\n   * passed to onPress callback.\n   */\n  onPress?: (e?: PressEvent) => void;\n}\n\nconst variants: { [key in ButtonVariant]: typeof StyledButton } = {\n  default: StyledDefaultButton,\n  icon: StyledIconButton,\n};\n\n/**\n * https://jetbrains.github.io/ui/controls/button/\n *\n * TODO:\n * - Support for \"default\" button behaviour. it's kind of similar to a <button type=\"submit\" /> in html, but textarea\n * behaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\n * Cmd+Enter should always trigger onPress. Plus, maybe it should work independent of \"form\" being used? or maybe it's\n * not a big deal to expect an ancestor \"form\" element, when variant is \"default\"?\n * - \"Default\" style differences in Windows.\n * - Gradient colors (low hanging fruit, but negligible added value).\n *\n * Known issues:\n * - In the original impl, default button looks the same as normal button, when focus is not within the same area that\n * the button is. For example in the commit tool window, \"Commit\" button which is default, is not blue, unless the\n * \"Commit\" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n * \"default\" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\n * DefaultToolWindow is used. But we need to see if the same requirement exists in various places.\n * NOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\n * which enables \"default\" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n * - In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\n * behaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.\n *\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef(function Button(\n  { variant, style, className, mnemonic, ...props }: ButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const { buttonProps } = useButton(props, ref);\n  const domProps = filterDOMProps(props);\n  const { autoFocus, form } = props;\n\n  const Component = (variant && variants[variant]) || StyledButton;\n  return (\n    <Component\n      {...mergeProps(domProps, buttonProps, { autoFocus, form })}\n      style={style}\n      className={className}\n      ref={ref}\n    >\n      {mnemonic ? (\n        <MnemonicTrigger\n          mnemonic={mnemonic}\n          isDisabled={props.isDisabled}\n          onTriggered={props.onPress}\n        >\n          {props.children}\n        </MnemonicTrigger>\n      ) : (\n        props.children\n      )}\n    </Component>\n  );\n});\n","import React, { CSSProperties, ReactNode } from \"react\";\nimport { DOMAttributes, FocusableElement } from \"@react-types/shared\";\nimport { FocusScope, useFocusManager } from \"@react-aria/focus\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ButtonGroupProps {\n  children: ReactNode;\n  className?: string;\n  style?: CSSProperties;\n}\n\nconst StyledButtonGroup = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 0.75rem;\n`;\n\n/**\n * `ButtonGroup` should be used as a wrapper around related {@link Button Buttons}, in places such as the\n * footer of a dialog. It does two things:\n * - allows for moving the focus between the buttons with left/right arrow keys.\n * - applies the right spacing between the buttons\n *\n * @see Button\n */\nexport function ButtonGroup(props: ButtonGroupProps) {\n  return (\n    <FocusScope>\n      <HorizontalArrowKeyNavigation>\n        {(arrowKeyNavigationProps) => (\n          <StyledButtonGroup {...mergeProps(props, arrowKeyNavigationProps)} />\n        )}\n      </HorizontalArrowKeyNavigation>\n    </FocusScope>\n  );\n}\n\nfunction HorizontalArrowKeyNavigation({\n  children,\n}: {\n  children: (props: DOMAttributes<FocusableElement>) => ReactNode;\n}) {\n  const focusManager = useFocusManager();\n  const { keyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!hasAnyModifier(e)) {\n        if (e.key === \"ArrowLeft\") {\n          return focusManager?.focusPrevious({ wrap: true });\n        } else if (e.key === \"ArrowRight\") {\n          return focusManager?.focusNext({ wrap: true });\n        }\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return <>{children(keyboardProps)}</>;\n}\n","import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { MnemonicTrigger } from \"@intellij-platform/core/Mnemonic\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n\n  /**\n   * A character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic} for the button\n   * It will be shown as underlined in button text, when mnemonic is activated (by pressing Alt)\n   * Note: if you use mnemonic, and the direct child of the button is not a string, you should use `Mnemonic.Text`\n   * to render the button text, to have the underlining behavior.\n   */\n  mnemonic?: string;\n}\n\nconst StyledWrapperLabel = styled.label`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  isDisabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, isDisabled }) =>\n    isDisabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\nconst StyledInput = styled.input`\n  opacity: 0.0001;\n  position: absolute;\n  z-index: 1;\n  inset: 0;\n  cursor: default;\n  &:disabled {\n    cursor: default;\n  }\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  mnemonic,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel className={className}>\n      <StyledInput\n        {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n        ref={ref}\n      />\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={disableFocusAlwaysVisible ? isFocusVisible : isFocused}\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText isDisabled={props.isDisabled}>\n          {mnemonic ? (\n            <MnemonicTrigger\n              mnemonic={mnemonic}\n              isDisabled={props.isDisabled}\n              onTriggered={state.toggle}\n            >\n              {props.children}\n            </MnemonicTrigger>\n          ) : (\n            props.children\n          )}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import React, { ComponentProps } from \"react\";\nimport { LafIcon } from \"@intellij-platform/core/Icon\";\n\n/**\n * Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\n * with the interactions\n */\nexport const CheckboxIcon = ({\n  isDisabled,\n  isFocused,\n  isIndeterminate,\n  isSelected,\n  ...otherProps\n}: Omit<ComponentProps<typeof LafIcon>, \"size\" | \"icon\"> & {\n  isIndeterminate: boolean | undefined;\n  isFocused: boolean;\n  isDisabled: boolean | undefined;\n  isSelected: boolean;\n}) => {\n  return (\n    <LafIcon\n      {...otherProps}\n      size={20}\n      icon={{\n        name: isIndeterminate ? \"checkBoxIndeterminate\" : \"checkBox\",\n        modifiers: {\n          Disabled: isDisabled,\n          Selected: isSelected || isIndeterminate,\n          Focused: isFocused,\n        },\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { CollectionSpeedSearchMatches } from \"./useCollectionSpeedSearchResult\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext =\n  React.createContext<CollectionSpeedSearchContextValue | null>(null);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext =\n  React.createContext<null | CollectionSpeedSearchItemContextValue>(null);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{\n  children?: React.ReactNode;\n  itemKey: Key;\n}> = ({ children, itemKey }) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue ?? \"\";\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function ({\n  Component = \"span\",\n}: {\n  /**\n   * When rendering in a flex parent (which is the case for tree or list), rendering a container is necessary to have\n   * the right spacing around highlights, when the highlighter span is immediately followed or proceeded by a white\n   * space. By default, a \"span\" is rendered.\n   */\n  Component?: React.ElementType;\n}) {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return (\n    <Component>\n      {highlightedRanges ? (\n        <TextWithHighlights highlights={highlightedRanges}>\n          {text}\n        </TextWithHighlights>\n      ) : (\n        text\n      )}\n    </Component>\n  );\n};\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager: inputSelectionManager,\n  speedSearch,\n  focusBestMatch = false,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n  /**\n   * If true, focusing the best match (the longest \"start-with\" match) will be preferred.\n   * By default, the focus is moved to the first match that comes after the currently focused item, if currently\n   * focused item itself is not a match.\n   * A typical use case would be collections that filter out non-match items.\n   * @default false\n   */\n  focusBestMatch?: boolean;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const { matches } = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key)!)\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n    };\n  }, [searchTerm, collection, active]);\n\n  const selectionManager = createSpeedSearchSelectionManager(\n    inputSelectionManager,\n    active ? matches : null\n  );\n  const latestValues = useLatest({\n    matches,\n    selectionManager,\n    collection,\n    focusBestMatch,\n  });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n    let keyToFocus: Key | undefined;\n    if (latestValues.current.focusBestMatch) {\n      keyToFocus = getLongestCommonPrefixMatch(matches);\n    }\n    if (!keyToFocus && matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      keyToFocus = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n    }\n    if (keyToFocus) {\n      selectionManager.setFocusedKey(keyToFocus);\n      selectionManager.replaceSelection(keyToFocus);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return {\n    matches,\n    selectionManager,\n  };\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n\n/**\n * Returns the longest match from the beginning, if exists.\n */\nfunction getLongestCommonPrefixMatch(matches: CollectionSpeedSearchMatches) {\n  return [...matches.entries()]\n    .filter(([, [firstRange]]) => firstRange?.from === 0)\n    .sort(\n      ([, [rangeA]], [, [rangeB]]) =>\n        rangeB.to - rangeB.from - rangeA.to - rangeA.from\n    )?.[0]?.[0];\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { Key } from \"react\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { HTMLAttributes, RefObject, useMemo } from \"react\";\nimport { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport {\n  SpeedSearchPopupProps,\n  SpeedSearchProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport {\n  SpeedSearchState,\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { CollectionSpeedSearchContextValue } from \"./CollectionSpeedSearchContext\";\nimport {\n  CollectionSpeedSearchMatches,\n  useCollectionSpeedSearchResult,\n} from \"./useCollectionSpeedSearchResult\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\nexport interface CollectionSpeedSearch {\n  containerProps: HTMLAttributes<HTMLElement>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n}\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  keepSearchActiveOnBlur,\n  keyboardDelegate,\n  focusBestMatch,\n  ref,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  ref: RefObject<HTMLElement>;\n  focusBestMatch?: boolean;\n} & SpeedSearchStateProps &\n  Pick<SpeedSearchProps, \"keepSearchActiveOnBlur\">): CollectionSpeedSearch {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps);\n\n  const { matches, selectionManager: speedSearchSelectionManager } =\n    useCollectionSpeedSearchResult({\n      collection,\n      selectionManager,\n      speedSearch,\n      focusBestMatch,\n    });\n  const { containerProps } = useSpeedSearch(\n    { keepSearchActiveOnBlur },\n    speedSearch,\n    ref\n  );\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  const findFirstMatch = <T extends React.Key | undefined, K>(\n    fromKey: React.Key | undefined | null,\n    direction: \"up\" | \"down\"\n  ) => {\n    let currentKey: React.Key | undefined | null = fromKey;\n    while (currentKey != null) {\n      if (!matches || matches.has(currentKey)) {\n        return currentKey;\n      }\n      currentKey =\n        direction === \"up\"\n          ? wrappedKeyboardDelegate.getKeyAbove?.(currentKey)\n          : wrappedKeyboardDelegate.getKeyBelow?.(currentKey);\n    }\n    return currentKey ?? undefined;\n  };\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyBelow?.(key), \"down\"),\n    },\n    getKeyAbove: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyAbove?.(key), \"up\"),\n    },\n    getFirstKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const firstKey = findFirstMatch(\n          wrappedKeyboardDelegate.getFirstKey?.(key, global),\n          \"down\"\n        );\n        return firstKey == null ? matches?.values().next().value : firstKey;\n      },\n    },\n    getLastKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const lastKey = findFirstMatch(\n          wrappedKeyboardDelegate.getLastKey?.(key, global),\n          \"down\"\n        );\n        return lastKey == null\n          ? [...(matches?.keys() || [])].pop() ?? null\n          : lastKey;\n      },\n    },\n  } as { [key in keyof KeyboardDelegate]: { value: KeyboardDelegate[key] } });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n  get id() {\n    return this.key;\n  }\n}\n\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return null as any as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<PartialNode<T>> = (\n    StatelyItem as any\n  ).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { styled } from \"../styled\";\nimport { DOMAttributes } from \"@react-types/shared\";\nimport { MENU_POSITION_TARGET_DATA_ATTRIBUTE } from \"@intellij-platform/core/Menu/ContextMenuContainer\";\n\nconst GAP = \"0.1875rem\";\nconst StyledItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 0.25rem;\n  gap: ${GAP};\n`;\n\nconst StyledHint = styled.span<{ small?: boolean }>`\n  display: inline-flex;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(theme.commonColors.inactiveTextColor)};\n  padding-left: 0.1rem;\n  font-size: ${({ small }) => small && \"0.9em\"};\n`;\n\nconst StyledGroup = styled.span.attrs({\n  role: \"presentation\" as string,\n})`\n  display: inline-flex;\n  display: flex;\n  align-items: center;\n  gap: ${GAP};\n`;\n/**\n * Generic layout component capturing common use cases of tree or list items.\n * It handles the spacing between parts, and provides styled components for parts that need specific styling.\n * For more flexibility over the order of various pieces of content in list/tree items, there is no specific props\n * for parts. Different parts should just be rendered in children.\n *\n * @example\n * ```tsx\n * <ItemLayout>\n *   <PlatformIcon icon=\"nodes/folder\" />\n *   <HighlightedTextValue />\n *   <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n * </ItemLayout>\n * ```\n * @beta\n */\nexport const ItemLayout = (\n  props: { children: React.ReactNode } & DOMAttributes\n) => {\n  return (\n    <StyledItemLayout\n      {...{ [MENU_POSITION_TARGET_DATA_ATTRIBUTE]: true }}\n      {...props}\n    />\n  );\n};\n\n/**\n * A more subtle text usually rendered next to the main text in the item.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Hint = StyledHint;\n\n/**\n * Useful when a number of items need to be grouped by a wrapper, e.g. to have a tooltip.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Group = StyledGroup;\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import { RefObject, useEffect } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { RefObject, useImperativeHandle } from \"react\";\n\nexport type CollectionRefProps = {\n  /**\n   * Gives imperative access to selection manager.\n   */\n  selectionManagerRef?: RefObject<SelectionManager>;\n};\n\n/**\n * Common imperative API for collections. Used in Lists at the moment. Tree components implement a different imperative\n * API that can be refactored later for more consistency.\n */\nexport function useCollectionRef(\n  { selectionManagerRef }: CollectionRefProps,\n  state: { selectionManager: SelectionManager }\n) {\n  useImperativeHandle(selectionManagerRef, () => state.selectionManager);\n}\n","import React, { Key, RefObject } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\n/**\n * A solution for connecting a collection to a search input, so that collection can still be navigated by keyboard\n * while the input is focused. It works by replaying certain keyboard events on the collection container and focused\n * item. An alternative approach (which is used in react-aria's useCombobox) is to use useSelectableCollection\n * separately for the input, but the biggest issue with that approach is that it's limiting in the following ways:\n * - Rendering input should be a part of the same component that renders the collection. Having specific components\n *   for use cases that requires a search input is not flexible enough. For example one may want to use SpeedSearchList\n *   or List connected to an input. Also, the input and the collection may need to be in different layouts in different\n *   use cases. Decoupling the rendering of the input and collection is a more flexible solution.\n * - The same options used for collection should be passed to the input field for behavior consistency, and that can be\n *   prone to error. Some of these options, like `keyboardDelegate` can even have a default value in hooks like\n *   `useSelectableList`, which means for making sure the same value is passed to the useSelectableCollection for input,\n *   would require to not use the default value, since the same value can't be accessed.\n *\n * With this event forwarding approach, it's an arrow up or down event would behave exactly like it was triggered on\n * the collection itself, leaving no room for behavior discrepancies. But it has a few drawbacks:\n * - Although small, there is still some coupling between this code and implementation of the collection component.\n *   More specifically, the following things are assumed by this implementation:\n *   - \"Enter\" keys (selection or action) are handled on items, but arrow keys are handled on the collection element.\n *   - \"[data-key] attribute is set on items. That is used to find the element for the focused item (which of course is\n *     not actually focused while the input is).\n */\nexport const useCollectionSearchInput = ({\n  collectionRef,\n  selectionManager,\n  onAction,\n}: {\n  /**\n   * ref to the html element of the collection component\n   */\n  collectionRef: RefObject<HTMLElement>;\n  /**\n   * SelectionManager instance, returned from the state management hook for the collection component.\n   * {@link CollectionRefProps.selectionManagerRef} can be used on collection components that implement\n   * `useCollectionRef`, to get a hold of selection manager, from outside.\n   */\n  selectionManager: SelectionManager | null | undefined;\n  /**\n   * onAction callback passed to the collection component. It's needed since some upgrade of @react-aria/interactions,\n   * since a check is added to not have keyup events on outside elements trigger onPress. That's to prevent scenarios\n   * where focus is moved between keydown and keyup, but is also breaking the previous solution of just replying\n   * input keyboard events on the list item.\n   * @param key\n   */\n  onAction?: (key: Key) => void;\n}): { collectionSearchInputProps: DOMAttributes<HTMLInputElement> } => {\n  const relayEventsToCollection = useEventCallback(\n    (event: React.KeyboardEvent<HTMLInputElement>) => {\n      // Relay ArrowUp and ArrowDown to the container\n      if (\n        event.type === \"keydown\" &&\n        (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        collectionRef.current?.dispatchEvent(\n          new KeyboardEvent(event.type, event.nativeEvent)\n        );\n      } else if (\n        event.type === \"keydown\" &&\n        event.key === \"Enter\" &&\n        selectionManager?.focusedKey != null\n      ) {\n        event.currentTarget.addEventListener(\n          \"keyup\",\n          (event: KeyboardEvent) => {\n            if (event.key === \"Enter\" && selectionManager?.focusedKey != null) {\n              onAction?.(selectionManager?.focusedKey);\n            }\n          },\n          { once: true, capture: true }\n        );\n      }\n    }\n  );\n\n  return {\n    collectionSearchInputProps: {\n      onKeyDown: relayEventsToCollection,\n      onKeyPress: relayEventsToCollection,\n    },\n  };\n};\n","import React, {\n  CSSProperties,\n  ForwardedRef,\n  forwardRef,\n  HTMLProps,\n  Ref,\n  useRef,\n} from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { AriaComboBoxProps, useComboBox } from \"@react-aria/combobox\";\nimport { useComboBoxState } from \"@react-stately/combobox\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\nimport { Popover } from \"@intellij-platform/core/Overlay\";\nimport { StatelessListBox } from \"./StatelessListBox\";\nimport { StyledContainer } from \"./StyledContainer\";\nimport { LabelPlacement, WithLabel } from \"../Field/Label\";\nimport { StyledDropdownArrowIcon } from \"./StyledDropdownArrowIcon\";\nimport {\n  PositionedTooltipTrigger,\n  ValidationTooltip,\n} from \"@intellij-platform/core/Tooltip\";\nimport {\n  ContextHelpProps,\n  WithInlineContextHelp,\n} from \"@intellij-platform/core/Field/ContextHelp\";\n\ntype AriaProps<T> = {\n  [K in keyof T as K extends `aria-${string}` ? K : never]: T[K];\n};\n\nexport interface ComboBoxProps<T extends object>\n  extends Pick<\n      AriaComboBoxProps<T>,\n      | \"disabledKeys\"\n      | \"defaultSelectedKey\"\n      | \"selectedKey\"\n      | \"isDisabled\"\n      | \"children\"\n      | \"items\"\n      | \"label\"\n      | \"autoFocus\"\n      | \"menuTrigger\"\n      | \"placeholder\"\n      | \"onFocus\"\n      | \"onBlur\"\n      | \"onKeyDown\"\n      | \"onKeyUp\"\n      | \"onOpenChange\"\n      | \"onFocusChange\"\n      | \"onSelectionChange\"\n    >,\n    AriaProps<AriaComboBoxProps<T>>,\n    ControlledStateProps<{\n      value: string;\n    }>,\n    ContextHelpProps {\n  labelPlacement?: LabelPlacement;\n  className?: string;\n  style?: CSSProperties;\n\n  validationState?: \"valid\" | \"error\" | \"warning\";\n\n  /**\n   * Validation message shown as a {@link ValidationTooltip} above the component.\n   * {@link ValidationTooltipProps#type} is defined based on `validationState`.\n   */\n  validationMessage?: React.ReactNode;\n\n  /**\n   * props to apply on input, excluding value that's controlled by the component\n   */\n  inputProps?: Omit<\n    HTMLProps<HTMLInputElement>,\n    \"value\" | \"defaultValue\" | \"as\"\n  >;\n  inputRef?: Ref<HTMLInputElement>;\n}\n\nconst StyledComboBoxContainer = styled(StyledContainer)`\n  padding: 0;\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\n          \"TextField.disabledForeground\" as UnknownThemeProp<\"TextField.disabledForeground\">\n        )\n      : theme.color(\n          \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n        )};\n`;\nconst StyledComboBoxInput = styled.input`\n  flex: 1;\n  background: none;\n  border: none;\n  outline: none;\n  color: inherit;\n  padding: ${({ theme }) =>\n    theme.inset(\"ComboBox.padding\") ?? \"1px 6px 1px 6px\"};\n  height: 100%;\n`;\n\nconst StyledDropdownButton = styled.button`\n  // Resetting default styles\n  appearance: none;\n  border: none;\n  background: ${({ theme }) => theme.color(\"ComboBox.ArrowButton.background\")};\n  outline: none;\n  font: inherit;\n  padding: 0;\n\n  // Custom styles\n  border-left: 1px solid ${({ theme }) => theme.commonColors.border()};\n  height: 100%;\n  aspect-ratio: 1;\n  /**\n   * In the reference impl, the clickable area exceeds the left border by a\n   * few pixels. The following trick implements that\n   */\n  position: relative;\n  ::before {\n    content: \"\";\n    position: absolute;\n    left: -4px;\n    top: 0;\n    bottom: 0;\n    width: 4px;\n  }\n`;\n\n/**\n * [Combobox](https://plugins.jetbrains.com/docs/intellij/combo-box.html) implementation.\n * Known differences with the reference impl:\n * - selected key doesn't focus when opened the dropdown manually.\n *   Opening the dropdown by pressing ArrowDown does focus the previously selected item.\n */\nexport const ComboBox = forwardRef(\n  <T extends object>(\n    {\n      labelPlacement,\n      style,\n      className,\n      value,\n      defaultValue,\n      onValueChange,\n      validationState,\n      validationMessage,\n      contextHelp,\n      contextHelpPlacement,\n      inputProps,\n      inputRef: inputRefProp,\n      ...props\n    }: ComboBoxProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ): React.JSX.Element => {\n    const ref = useObjectRef(forwardedRef);\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const inputRef = useObjectRef(inputRefProp);\n    const dropdownContainerRef = useRef<HTMLDivElement>(null);\n    const popoverRef = useRef<HTMLDivElement>(null);\n    const listBoxRef = useRef<HTMLDivElement>(null);\n    const isInvalid = Boolean(validationState) && validationState !== \"valid\";\n\n    const state = useComboBoxState({\n      // defaultFilter not provided based on how ComboBoxes don't filter based on input in Intellij Platform\n      // filtering can still be implemented by controlling `value` and `items`.\n      menuTrigger: \"manual\", // overridable via props\n      allowsCustomValue: true,\n      inputValue: value,\n      defaultInputValue: defaultValue,\n      onInputChange: onValueChange,\n      isInvalid,\n      ...props,\n    });\n    const {\n      descriptionProps,\n      errorMessageProps,\n      labelProps,\n      inputProps: comboboxInputProps,\n      listBoxProps,\n      buttonProps,\n    } = useComboBox(\n      {\n        ...props,\n        allowsCustomValue: true,\n        buttonRef,\n        inputRef,\n        popoverRef,\n        listBoxRef,\n      },\n      state\n    );\n\n    // minWidth is not kept in the state, assuming it's unnecessary, considering the width is expected to be\n    // stable when the popover opens.\n    const minWidth = dropdownContainerRef.current\n      ? dropdownContainerRef.current?.offsetWidth + 2 /* for box shadow*/\n      : undefined;\n    return (\n      <>\n        <WithLabel\n          ref={ref}\n          isDisabled={props.isDisabled}\n          label={props.label}\n          labelPlacement={labelPlacement}\n          labelProps={labelProps}\n          className={className}\n          style={style}\n        >\n          {/* probably no need for HiddenSelect as autofilling doesn't seem relevant for applications using this library */}\n          <WithInlineContextHelp\n            contextHelp={contextHelp}\n            contextHelpPlacement={contextHelpPlacement}\n            descriptionProps={descriptionProps}\n          >\n            <StyledComboBoxContainer\n              ref={dropdownContainerRef}\n              validationState={validationState}\n              disabled={props.isDisabled}\n              className={state.isFocused ? \"is-focus\" : \"\"}\n            >\n              {/* FIXME: tooltip comes and goes on mouse enter/leave, which is especially weird when trying to open options */}\n              <PositionedTooltipTrigger\n                placement=\"top\"\n                showOnFocus\n                isDisabled={!validationMessage}\n                triggerRef={inputRef}\n                tooltip={\n                  <ValidationTooltip\n                    type={\n                      validationState !== \"valid\" ? validationState : undefined\n                    }\n                  >\n                    <div {...errorMessageProps}>{validationMessage}</div>\n                  </ValidationTooltip>\n                }\n                delay={0}\n              >\n                {(tooltipTriggerProps) => (\n                  <StyledComboBoxInput\n                    {...mergeProps(\n                      comboboxInputProps,\n                      inputProps,\n                      tooltipTriggerProps\n                    )}\n                  />\n                )}\n              </PositionedTooltipTrigger>\n\n              <BareButton {...buttonProps} ref={buttonRef}>\n                <StyledDropdownButton>\n                  <StyledDropdownArrowIcon\n                    disabled={props.isDisabled}\n                    size={20}\n                    icon=\"general/arrowDown.svg\"\n                  />\n                </StyledDropdownButton>\n              </BareButton>\n            </StyledComboBoxContainer>\n          </WithInlineContextHelp>\n        </WithLabel>\n        {state.isOpen && (\n          <Popover\n            ref={popoverRef}\n            state={state}\n            triggerRef={dropdownContainerRef}\n            placement=\"bottom start\"\n            containerPadding={0}\n            offset={2}\n            crossOffset={-1}\n          >\n            <StatelessListBox\n              {...listBoxProps}\n              ref={listBoxRef}\n              state={state}\n              minWidth={minWidth}\n            />\n          </Popover>\n        )}\n      </>\n    );\n  }\n);\n","import React, { ForwardedRef, useRef } from \"react\";\nimport {\n  AriaListBoxOptions,\n  useListBox,\n  useListBoxSection,\n  useOption,\n} from \"@react-aria/listbox\";\nimport { ListState } from \"@react-stately/list\";\nimport { Node } from \"@react-types/shared\";\n\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\nimport { StyledVerticalSeparator } from \"@intellij-platform/core/StyledSeparator\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport const StatelessListBox = React.forwardRef(function StatelessListBox<\n  T extends object\n>(\n  {\n    state,\n    minWidth,\n    ...props\n  }: AriaListBoxOptions<T> & {\n    state: ListState<T>;\n    minWidth?: number;\n  },\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const { listBoxProps, labelProps } = useListBox(props, state, ref);\n\n  return (\n    <>\n      <div {...labelProps}>{props.label}</div>\n      <StyledList {...listBoxProps} ref={ref} style={{ minWidth }}>\n        {[...state.collection].map((item) =>\n          item.type === \"section\" ? (\n            <ListBoxSection key={item.key} section={item} state={state} />\n          ) : (\n            <Option key={item.key} item={item} state={state} />\n          )\n        )}\n      </StyledList>\n    </>\n  );\n});\nfunction Option<T extends object>({\n  item,\n  state,\n}: {\n  item: Node<T>;\n  state: ListState<T>;\n}) {\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { optionProps } = useOption({ key: item.key }, state, ref);\n\n  return (\n    <StyledListItem\n      {...optionProps}\n      ref={ref}\n      disabled={state.disabledKeys.has(item.key)}\n      selected={state.selectionManager.focusedKey === item.key}\n      containerFocused\n    >\n      {item.rendered}\n    </StyledListItem>\n  );\n}\n\nconst StyledSectionHeading = styled.div`\n  font-size: 0.6875rem;\n  padding: 0 0.5rem;\n  color: ${({ theme }) => theme.commonColors.inactiveTextColor}; // not verified\n`;\n\nconst StyledSection = styled.div`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nfunction ListBoxSection<T extends object>({\n  section,\n  state,\n}: {\n  section: Node<T>;\n  state: ListState<T>;\n}) {\n  let { itemProps, headingProps, groupProps } = useListBoxSection({\n    heading: section.rendered,\n    \"aria-label\": section[\"aria-label\"],\n  });\n\n  // If the section is not the first, add a separator element to provide visual separation.\n  // The heading is rendered inside an <li> element, which contains\n  // a <ul> with the child items.\n  return (\n    <>\n      {section.key !== state.collection.getFirstKey() && (\n        <StyledVerticalSeparator role=\"presentation\" />\n      )}\n      <li {...itemProps}>\n        {section.rendered && (\n          <StyledSectionHeading {...headingProps}>\n            {section.rendered}\n          </StyledSectionHeading>\n        )}\n        <StyledSection {...groupProps}>\n          {[\n            ...(state.collection.getChildren?.(section.key) ??\n              section.childNodes),\n          ].map((node) => (\n            <Option key={node.key} item={node} state={state} />\n          ))}\n        </StyledSection>\n      </li>\n    </>\n  );\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledContainer = styled.div<{\n  disabled?: boolean;\n  validationState?: \"valid\" | \"error\" | \"warning\";\n}>`\n  box-sizing: border-box;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  height: 1.5rem;\n  background: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"ComboBox.disabledBackground\")\n      : theme.color(\"ComboBox.background\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"ComboBox.disabledForeground\")\n      : theme.color(\n          \"ComboBox.foreground\" as UnknownThemeProp<\"ComboBox.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled, validationState }) =>\n      theme.commonColors.border({\n        disabled,\n        validationState,\n      })};\n  // The focus style is applied unconditionally in the reference impl, so no use of focus-visible or js-based focus visible detection\n\n  box-shadow: 0 0 0 0.125rem\n    ${({ theme, validationState }) =>\n      theme.commonColors.focusRing({\n        validationState,\n        focused: false,\n      })};\n  &:focus,\n  &.is-focus {\n    border-color: ${({ theme, validationState }) =>\n      theme.commonColors.border({\n        focused: true,\n        validationState,\n      })};\n    outline: none;\n    box-shadow: 0 0 0 0.125rem\n      ${({ theme, validationState }) =>\n        theme.commonColors.focusRing({\n          validationState,\n          focused: true,\n        })};\n  }\n\n  border-radius: ${({ theme }) => theme.borderRadius.default}px;\n`;\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledDropdownArrowIcon = styled(PlatformIcon).attrs<{\n  disabled?: boolean;\n}>({\n  \"aria-hidden\": \"true\",\n})`\n  // NOTE: \"ArrowButton.nonEditableBackground\" theme key is used in the reference impl, but it doesn't seem necessary to allow\n  // for a separate arrow background in Dropdown (aka non-editable combobox), since the arrow is not really a\n  // separate button, but a visual indicator for the whole trigger. Also there is no mention of it in designs\n  // There is also separate theme properties for color and disabled color, but inheriting it (via currentColor)\n  // makes more sense\n\n  * {\n    fill: ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"ComboBox.ArrowButton.disabledIconColor\")\n        : theme.color(\"ComboBox.ArrowButton.iconColor\")};\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { DOMAttributes, DOMProps } from \"@react-types/shared\";\n\n/**\n * Interface to inherit in props of components that support rendering context help.\n */\nexport interface ContextHelpProps {\n  /**\n   * Context help, shown below the input.\n   * A typical use case is\n   * [to provide example values](https://jetbrains.github.io/ui/principles/context_help/#07).\n   */\n  contextHelp?: React.ReactNode; // TODO: implement\n  /**\n   * Placement of the contextHelp text with respect to the control.\n   * See more: https://plugins.jetbrains.com/docs/intellij/inline-help-text.html#placement\n   */\n  contextHelpPlacement?: \"below\" | \"after\";\n}\n\nconst StyledContextHelp = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n`;\n\nconst StyledContextHelpWrapper = styled.div<{\n  placement: ContextHelpProps[\"contextHelpPlacement\"];\n}>`\n  font-size: 0.75rem; // 12px, in new UI. It's 11px in the old UI.\n  display: flex;\n  flex-direction: column;\n  align-items: start;\n  gap: 0.25rem; /* Not checked with the reference impl */\n  ${({ placement }) =>\n    placement === \"after\" &&\n    css`\n      flex-direction: row;\n      align-items: center;\n      gap: 1rem; /* Not checked with the reference impl */\n    `}\n  flex-grow: 1; /* Needed for when the control is inside a flex layout */\n`;\n\n/**\n * Implements [inline context help](https://plugins.jetbrains.com/docs/intellij/inline-help-text.html),\n * for its children.\n */\nexport const WithInlineContextHelp = ({\n  children,\n  descriptionProps,\n  contextHelpPlacement,\n  contextHelp,\n}: {\n  children: React.ReactNode;\n  /**\n   * Props to apply on the context help wrapper, to make the connected control\n   * described by the context help.\n   */\n  descriptionProps: DOMAttributes;\n} & ContextHelpProps) => {\n  return (\n    <StyledContextHelpWrapper placement={contextHelpPlacement}>\n      {children}\n      {contextHelp && (\n        <StyledContextHelp {...descriptionProps}>\n          {contextHelp}\n        </StyledContextHelp>\n      )}\n    </StyledContextHelpWrapper>\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, {\n  ForwardedRef,\n  forwardRef,\n  RefObject,\n  useContext,\n  useEffect,\n  useLayoutEffect,\n} from \"react\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nexport type LabelPlacement = \"above\" | \"before\";\n\nconst StyledLabelContainer = styled.div<{\n  labelPlacement?: LabelPlacement;\n}>`\n  display: inline-flex;\n  flex-direction: ${({ labelPlacement }) =>\n    labelPlacement === \"above\" ? \"column\" : \"row\"};\n  align-items: start;\n  gap: 0.375rem;\n`;\n\nconst StyledLabel = styled.label<{ isDisabled?: boolean }>`\n  color: ${({ theme, isDisabled: disabled }) =>\n    theme.commonColors.label({ disabled })};\n  margin-top: 0.25rem;\n  line-height: 1.2;\n`;\n\n/**\n * Implements [label](https://jetbrains.github.io/ui/controls/input_field/#label),\n * for elements like Input, Dropdown, etc.\n */\nexport const WithLabel = forwardRef(function WithLabel(\n  {\n    label,\n    labelPlacement,\n    labelProps,\n    children,\n    isDisabled,\n    ...props\n  }: {\n    isDisabled: boolean | undefined;\n    label: React.ReactNode;\n    labelPlacement: LabelPlacement | undefined /* intentionally not optional */;\n    labelProps?: DOMAttributes;\n  } & DOMAttributes,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const labelRef = React.useRef<HTMLLabelElement>(null);\n  useAlignedLabels({ ref: labelRef, enabled: labelPlacement !== \"above\" });\n  return (\n    <StyledLabelContainer\n      {...props}\n      labelPlacement={labelPlacement}\n      ref={forwardedRef}\n    >\n      {label && (\n        <StyledLabel {...labelProps} isDisabled={isDisabled} ref={labelRef}>\n          {label}\n        </StyledLabel>\n      )}\n      {children}\n    </StyledLabelContainer>\n  );\n});\n\nfunction useAlignedLabels({\n  ref,\n  enabled,\n}: {\n  ref: RefObject<HTMLElement>;\n  enabled?: boolean;\n}) {\n  const { applyLabelWidth, commonWidth } = useContext(LabelAlignmentContext);\n  useLayoutEffect(() => {\n    const apply = (): boolean => {\n      const width = ref.current?.offsetWidth;\n      if (width) {\n        applyLabelWidth(width);\n        return true;\n      }\n      return false;\n    };\n    // In some situations, the width is zero in the first render.\n    if (!apply()) {\n      setTimeout(apply, 0);\n    }\n  });\n\n  useEffect(() => {\n    if (ref.current) {\n      ref.current.style.width =\n        commonWidth && enabled ? `${commonWidth}px` : \"\";\n    }\n  }, [commonWidth, enabled]);\n}\n\nconst LabelAlignmentContext = React.createContext<{\n  commonWidth: number | null;\n  applyLabelWidth: (width: number) => void;\n}>({ commonWidth: null, applyLabelWidth: () => {} });\n\n/**\n * Provides a context for\n * [labeled input controls](https://jetbrains.github.io/ui/principles/layout/#labeled-input-controls)\n * with side-positioned labels to have their input boxes aligned.\n * It doesn't render anything in DOM and only provides a context used\n * by labeled controls to set a common width on labels so that the input boxes\n * align.\n * Labeled input controls are:\n * - {@link InputField}\n * - {@link ComboBox}\n * - {@link Dropdown}\n */\nexport function LabeledControlsAlignmentProvider({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  const [commonWidth, setCommonWidth] = React.useState<null | number>(null);\n\n  const applyLabelWidth = (width: number) => {\n    setCommonWidth((currentWidth) =>\n      width > (currentWidth ?? 0)\n        ? width + 1 /* without 1px it wraps in some cases ¯\\_(ツ)_/¯ */\n        : currentWidth\n    );\n  };\n  return (\n    <LabelAlignmentContext.Provider value={{ commonWidth, applyLabelWidth }}>\n      {children}\n    </LabelAlignmentContext.Provider>\n  );\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { ForwardedRef } from \"react\";\nimport { amendName, PlatformIcon, PlatformIconProps } from \"./PlatformIcon\";\n\nexport const StyledHoverContainer = styled.span<{\n  hoverContainerSelector?: string;\n}>`\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector\n      ? `${hoverContainerSelector} &`\n      : \"\"} .icon[data-hover] {\n    display: none;\n  }\n\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector ? `${hoverContainerSelector}:hover &` : \"&:hover\"} {\n    .icon {\n      display: none;\n    }\n\n    .icon[data-hover] {\n      display: inline-flex;\n    }\n  }\n`;\n\nconst StyledIconHoverContainer = styled(StyledHoverContainer)`\n  display: inline-flex;\n`;\n\n/**\n * A common use case for PlatformIcons is to have a default icon and a hover icon.\n * This component captures that simple use case, by rendering both icons, and hiding one based on a hover selector.\n *\n * ### Parent hover container\n *\n * If the hover-able element is a parent of the icon, and not the icon itself (i.e., the icon should change if the\n * that parent is hovered), you can use `StyledHoverContainer` to define that parent element:\n *\n * ```tsx\n * const SomeParent = styled(StyledHoverContainer)`...`;\n * <SomeParent><AutoHoverPlatformIcon icon=\"...\" /></SomeParent>\n * ```\n *\n * If the hover-able element is a parent of the icon, with a known selector, you can pass `hoverContainerSelector`,\n * instead of using `StyledHoverContainer`:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector=\"[role=menuitem]\" />\n * ```\n *\n * If the hover container is a styled component, you can have it converted to selector like this:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector={`${MyStyledHoverContainer}`} />\n * ```\n *\n * In all examples above, the hover icon is shown when the parent is hovered, instead of the icon itself.\n *\n */\nexport const AutoHoverPlatformIcon = React.forwardRef(\n  function AutoHoverPlatformIcon(\n    {\n      hoverIcon,\n      hoverContainerSelector,\n      ...props\n    }: PlatformIconProps & {\n      /**\n       * The icon to be used when hovered. If not provided, it will be the \"somethingHovered\" where \"something\" is the `icon`\n       */\n      hoverIcon?: string;\n      hoverContainerSelector?: string;\n    },\n    ref: ForwardedRef<HTMLSpanElement>\n  ) {\n    const className = `icon ${props.className || \"\"}`;\n    return (\n      <StyledIconHoverContainer\n        ref={ref}\n        hoverContainerSelector={hoverContainerSelector}\n      >\n        <PlatformIcon {...props} className={className} />\n        <PlatformIcon\n          {...props}\n          className={className}\n          icon={hoverIcon ?? amendName(props.icon, \"Hover\")}\n          data-hover\n        />\n      </StyledIconHoverContainer>\n    );\n  }\n);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = (\n    [\"Editable\", \"Selected\", \"Pressed\", \"Focused\", \"Disabled\"] as Array<\n      keyof typeof modifiers\n    >\n  )\n    .filter((modifier) =>\n      // Focused or Pressed can't coexist with Disabled\n      modifiers.Disabled ? ![\"Focused\", \"Pressed\"].includes(modifier) : true\n    )\n    .reduce(\n      (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n      \"\"\n    );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  /**\n   * Icon path in intellij platform repo.\n   * If starts with \"/\", the path will be from the repo root. Otherwise, it's relative to \"platform/icons/src\".\n   * \".svg\" extension is optional.\n   */\n  icon: string;\n  /**\n   * Similar to icon, but for dark themes.\n   */\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  relativePath.startsWith(\"/\")\n    ? relativePath.slice(1)\n    : `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n * @example <PlatformIcon icon=\"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme();\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let canceled = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.ariaBusy = \"true\";\n      }\n      const svg = await theme\n        .getSvgIcon(path, selected)\n        .catch((e) => {\n          if (fallbackPath) {\n            return theme.getSvgIcon(fallbackPath, selected);\n          }\n          throw e;\n        })\n        .finally(() => {\n          if (ref?.current && !canceled) {\n            ref.current.ariaBusy = \"false\";\n          }\n        });\n      if (svg) {\n        const element = ref?.current;\n        if (!canceled && element) {\n          element.querySelector(\"svg\")?.remove();\n          const svgElement = document.createElement(\"svg\");\n          element.appendChild(svgElement);\n          svgElement.outerHTML = makeIdsUnique(svg); // UNSAFE! Would require sanitization, or icon sources must be trusted.\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      canceled = true;\n    };\n  }, [path, selected]);\n}\n\n/**\n * If multiple instance of the same icon is rendered at the same time, and the SVG includes\n * url(#...) references to locally defined ids, in some cases the icon is not rendered properly.\n * because of ids colliding. We make sure the ids are unique in each rendered icon.\n */\nfunction makeIdsUnique(svg: string): string {\n  const randomPostfix = (Math.random() * 1000).toFixed(0);\n  const idMatches = svg.matchAll(/id=\"(.*?)\"/g);\n  return [...idMatches].reduce((modifiedSvg, [_, id]) => {\n    const newId = `${id}-${randomPostfix}`;\n    return replaceAll(\n      `id=\"${id}\"`,\n      `id=\"${newId}\"`,\n      replaceAll(`url(#${id})`, `url(#${newId})`, modifiedSvg)\n    );\n  }, svg);\n}\n\nfunction replaceAll(theOld: string, theNew: string, str: string): string {\n  const replaced = str.replace(theOld, theNew);\n  const replacedAgain = replaced.replace(theOld, theNew);\n  if (replaced === replacedAgain) {\n    return replaced;\n  }\n  return replaceAll(theOld, theNew, replacedAgain);\n}\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { MenuTrigger, MenuTriggerProps } from \"@intellij-platform/core/Menu\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst ArrowIcon = styled(PlatformIcon)`\n  position: absolute;\n  right: 1px;\n  bottom: 1px;\n`;\n\ntype IconButtonWithMenuProps = IconButtonProps &\n  Pick<MenuTriggerProps, \"renderMenu\"> & {\n    /**\n     * whether the default arrow should be removed or not. false by default.\n     */\n    noArrow?: boolean;\n  };\n/**\n * Renders an IconButton which opens a menu. by default a down arrow icon is shown as an overlay on the rendered\n * icon, but it can be disabled by passing `noArrow`. It also restores the focus to the previously focused element,\n * when the menu is closed.\n * @param renderMenu: render prop for rendering the menu\n * @param children: the content of the icon button\n * @param noArrow: whether the default arrow should be removed or not. false by default.\n * @param buttonProps: the rest of the props that will be passed down to IconButton\n *\n * TODO: Add story and write test for focus restoration, noArrow, and basic functionality.\n */\nexport const IconButtonWithMenu = ({\n  renderMenu,\n  children,\n  noArrow = false,\n  ...buttonProps\n}: IconButtonWithMenuProps) => {\n  const previouslyFocusedElementRef = useRef<HTMLElement>();\n  return (\n    <MenuTrigger\n      renderMenu={renderMenu}\n      onOpenChange={(open) => {\n        if (!open && previouslyFocusedElementRef.current) {\n          previouslyFocusedElementRef.current.focus();\n        }\n      }}\n    >\n      {(props, ref) => (\n        <IconButton\n          {...mergeProps(buttonProps, props, {\n            onFocus: (e: FocusEvent) => {\n              if (e.relatedTarget && e.relatedTarget instanceof HTMLElement) {\n                previouslyFocusedElementRef.current = e.relatedTarget;\n              }\n            },\n          })}\n          ref={ref}\n        >\n          {children}\n          {!noArrow && <ArrowIcon icon=\"general/dropdown.svg\" />}\n        </IconButton>\n      )}\n    </MenuTrigger>\n  );\n};\n","import React, { ComponentProps, HTMLAttributes, HTMLProps } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"./Theme/Theme\";\n\ninterface Props extends React.ImgHTMLAttributes<HTMLImageElement> {\n  /**\n   * src for when a dark theme is active. if `darkSrc` doesn't have a non-empty string value, src will be used both\n   * for dark and light themes.\n   */\n  darkSrc?: string;\n}\n/**\n * Same as default `img`, but theme aware. Meaning that you can specify different sources for normal and dark mode.\n */\nexport const Img: React.FC<Props> = ({ darkSrc, ...props }) => {\n  const theme = useTheme() as Theme;\n  if (theme.dark) {\n    return <img {...props} src={darkSrc || props.src} />;\n  }\n  return <img {...props} />;\n};\n","import React, {\n  ForwardedRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableOptions, useFocusable } from \"@react-aria/focus\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled, css } from \"@intellij-platform/core/styled\";\n\nconst StyledInputBox = styled.div<{\n  disabled?: boolean;\n  focused?: boolean;\n  validationState: InputProps[\"validationState\"];\n  appearance: InputProps[\"appearance\"];\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  min-width: 4rem; // https://jetbrains.github.io/ui/controls/input_field/#28\n  background: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"TextField.disabledBackground\")\n      : theme.color(\"TextField.background\")};\n  border: 1px solid\n    ${({ theme, focused, disabled, validationState }) =>\n      theme.commonColors.border({\n        focused,\n        disabled,\n        validationState,\n      })};\n  box-shadow: 0 0 0 0.125rem\n    ${({ theme, focused = false, validationState, disabled }) =>\n      disabled\n        ? \"transparent\"\n        : theme.commonColors.focusRing({\n            validationState,\n            focused: focused,\n          })};\n  border-radius: 1px;\n  cursor: text; // the whole box moves focus to the input\n  overflow: hidden;\n  ${({ appearance, validationState, disabled }) =>\n    appearance === \"embedded\" &&\n    css`\n      border-color: ${validationState !== \"error\" && \"transparent\"};\n      box-shadow: ${validationState !== \"error\" && \"none\"};\n      background: ${!disabled && \"transparent\"};\n    `};\n`;\n\nconst StyledInput = styled.input<{ disabled?: boolean }>`\n  all: unset;\n  padding: 0.1875rem 0.375rem;\n  flex: 1; // fill in the available space within the input box\n  min-width: 0;\n  line-height: 1rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )};\n  color: ${({ theme, disabled }) =>\n    disabled &&\n    theme.color(\n      \"TextField.inactiveForeground\" as UnknownThemeProp<\"TextField.inactiveForeground\">\n    )};\n\n  caret-color: ${({ theme }) =>\n    theme.color(\n      \"TextField.caretForeground\" as UnknownThemeProp<\"TextField.caretForeground\">\n    )};\n  &::selection {\n    background: ${({ theme }) =>\n      theme.color(\n        \"*.selectionBackground\"\n      )}; // Not checked with the reference impl\n    color: ${({ theme }) =>\n      theme.color(\n        \"*.selectionForeground\"\n      )}; // Not checked with the reference impl\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  }\n`;\n\nconst StyledAddons = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem; /* TODO: check */\n  padding: 1px 0;\n`;\nconst StyledRightAddons = styled(StyledAddons)`\n  margin-right: 0.125rem; /* TODO: check */\n`;\n\nconst StyledLeftAddons = styled(StyledAddons)`\n  margin-left: 0.375rem; /* TODO: check */\n`;\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  validationState?: \"valid\" | \"error\" | \"warning\";\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n\n  /**\n   * Rendered inside the input box and after the input element.\n   * Used to render [Built-in buttons](https://jetbrains.github.io/ui/controls/built_in_button/).\n   */\n  addonAfter?: React.ReactNode;\n  /**\n   * Rendered inside the input box and before the input element.\n   */\n  addonBefore?: React.ReactNode;\n\n  /**\n   * Ref to the underlying input element\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n\n  /**\n   * Appearance of the input.\n   * - \"ghost\": Without the border and shadow in valid state.\n   * - \"boxed\" With the border and shadow.\n   * @default \"box\"\n   */\n  appearance?: \"embedded\" | \"box\";\n}\n\n/**\n * Bare input, themed, and with a few extra features:\n * - Support for \"error\" and \"warning\" state ({@param validationState}\n * - Support for autoSelect.\n * - Disables spell check by default. It can be overwritten.\n * Use {@link InputField} for more features like an associated label, error message and context help.\n */\nexport const Input = React.forwardRef(function Input(\n  {\n    validationState,\n    autoSelect,\n    addonBefore,\n    addonAfter,\n    style,\n    className,\n    inputRef: inputRefProp,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    autoFocus,\n    appearance,\n    ...props\n  }: InputProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const { focusableProps } = useFocusable(\n    {\n      isDisabled: props.disabled,\n      autoFocus,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    } as FocusableOptions,\n    inputRef\n  );\n  const [isFocused, setIsFocused] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setIsFocused,\n  });\n\n  useEffect(() => {\n    if (autoSelect) {\n      inputRef.current?.select();\n    }\n  }, [autoSelect]);\n\n  return (\n    <StyledInputBox\n      ref={ref}\n      spellCheck={false}\n      appearance={appearance}\n      {...mergeProps(focusWithinProps, {\n        className,\n        style,\n        onMouseDown: (event: MouseEvent) => {\n          if (event.target !== inputRef.current) {\n            event.preventDefault();\n            inputRef.current?.focus();\n          }\n        },\n      })}\n      focused={isFocused}\n      validationState={validationState}\n      disabled={props.disabled}\n    >\n      {addonBefore && <StyledLeftAddons>{addonBefore}</StyledLeftAddons>}\n      <StyledInput ref={inputRef} {...mergeProps(props, focusableProps)} />\n      {addonAfter && <StyledRightAddons>{addonAfter}</StyledRightAddons>}\n    </StyledInputBox>\n  );\n});\n","import React, {\n  ChangeEvent,\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n} from \"react\";\nimport { AriaFieldProps, useField } from \"@react-aria/label\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableProps } from \"@react-types/shared\";\nimport {\n  PositionedTooltipTrigger,\n  ValidationTooltip,\n} from \"@intellij-platform/core/Tooltip\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField/Input\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  ContextHelpProps,\n  WithInlineContextHelp,\n} from \"@intellij-platform/core/Field/ContextHelp\";\nimport { LabelPlacement, WithLabel } from \"@intellij-platform/core/Field/Label\";\n\nexport interface InputFieldProps\n  extends Omit<\n      AriaFieldProps,\n      \"labelElementType\" | \"validationState\" | \"errorMessage\" | \"isInvalid\"\n    >,\n    FocusableProps,\n    Pick<\n      InputProps,\n      \"addonBefore\" | \"addonAfter\" | \"inputRef\" | \"validationState\"\n    >,\n    ContextHelpProps {\n  /**\n   * className applied on the field's wrapper div.\n   */\n  className?: string;\n  /**\n   * style applied on the field's wrapper div.\n   */\n  style?: CSSProperties;\n  /**\n   * Label to be associated with the input.\n   */\n  label?: React.ReactNode;\n  /**\n   * Placement of the label with respect to the input box.\n   */\n  labelPlacement?: LabelPlacement;\n\n  /**\n   * Whether the input is disabled. Use this prop\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Convenient prop to be used instead of inputProps.placeholder\n   **/\n  placeholder?: string;\n  /**\n   * Convenient prop to be used instead of inputProps.value\n   **/\n  value?: HTMLProps<HTMLInputElement>[\"value\"];\n  /**\n   * Convenient prop to be used instead of inputProps.defaultValue\n   **/\n  defaultValue?: HTMLProps<HTMLInputElement>[\"defaultValue\"];\n  /**\n   * Convenient prop to be used instead of inputProps.onChange. It also calls the passed callback with the\n   * change value instead of input.\n   **/\n  onChange?: (newValue: string) => void;\n  /**\n   * Props to be passed to the underlying input element.\n   **/\n  inputProps?: Omit<\n    HTMLProps<HTMLInputElement>,\n    \"as\" | \"ref\" | \"disabled\" //isDisabled should be used\n  >;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n\n  /**\n   * Validation message shown as a {@link ValidationTooltip} above the field.\n   * {@link ValidationTooltipProps#type} is defined based on `validationState`.\n   */\n  validationMessage?: React.ReactNode;\n}\n\nconst StyledInput = styled(Input)`\n  width: 100%;\n`;\n\n/**\n * An input box with an associated label, error message, and context help.\n */\nexport const InputField = React.forwardRef(function InputField(\n  {\n    validationState,\n    validationMessage,\n    className,\n    style,\n    labelPlacement = \"before\",\n    contextHelp,\n    contextHelpPlacement,\n    inputProps = {},\n    addonBefore,\n    addonAfter,\n    inputRef,\n    ...props\n  }: InputFieldProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { fieldProps, errorMessageProps, labelProps, descriptionProps } =\n    useField({\n      ...props,\n      errorMessage: validationMessage,\n      validationState:\n        validationState === \"error\" || validationState === \"warning\"\n          ? \"invalid\"\n          : \"valid\",\n    });\n\n  return (\n    <WithLabel\n      ref={ref}\n      label={props.label}\n      labelPlacement={labelPlacement}\n      isDisabled={props.isDisabled}\n      labelProps={labelProps}\n      className={className}\n      style={style}\n    >\n      <WithInlineContextHelp\n        contextHelp={contextHelp}\n        contextHelpPlacement={contextHelpPlacement}\n        descriptionProps={descriptionProps}\n      >\n        <PositionedTooltipTrigger\n          placement=\"top start\"\n          crossOffset={36}\n          showOnFocus\n          isDisabled={!validationMessage}\n          tooltip={\n            <ValidationTooltip\n              type={validationState !== \"valid\" ? validationState : undefined}\n            >\n              <div {...errorMessageProps}>{validationMessage}</div>\n            </ValidationTooltip>\n          }\n          delay={0}\n        >\n          <StyledInput\n            inputRef={inputRef}\n            placeholder={props.placeholder}\n            disabled={props.isDisabled}\n            validationState={validationState}\n            autoSelect={props.autoSelect}\n            autoFocus={props.autoFocus}\n            addonAfter={addonAfter}\n            addonBefore={addonBefore}\n            {...mergeProps(fieldProps, inputProps, {\n              value: props.value,\n              defaultValue: props.defaultValue,\n              onChange: (e: ChangeEvent<HTMLInputElement>) =>\n                props.onChange?.(e.target.value),\n            })}\n          />\n        </PositionedTooltipTrigger>\n      </WithInlineContextHelp>\n    </WithLabel>\n  );\n});\n","import { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst getDefaultLinkColor = ({ theme }: { theme: Theme }) =>\n  theme.commonColors.linkForegroundEnabled;\n\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n  outline: none;\n  // &:focus-visible didn't work as expected, so FocusRing is used\n  &.focus-visible {\n    outline: 1px solid\n      ${({ theme }) =>\n        theme.color(\n          \"Link.focusedBorderColor\" as UnknownThemeProp<\"Link.focusedBorderColor\">,\n          theme.commonColors.focusBorderColor\n        )};\n    border-radius: 2px; // Registry.intValue(\"ide.link.button.focus.round.arc\", 4)\n  }\n  color: ${getDefaultLinkColor};\n\n  &:hover,\n  &.hover /* for testing purposes*/ {\n    text-decoration: underline;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.hoverForeground\",\n        theme.color(\n          \"link.hover.foreground\" as UnknownThemeProp<\"link.hover.foreground\">,\n          \"\" /*FIXME: check*/\n        )\n      )};\n  }\n  &:active,\n  &.active {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.pressedForeground\",\n        theme.color(\n          \"link.pressed.foreground\" as UnknownThemeProp<\"link.pressed.foreground\">,\n          !theme.dark ? \"#F00000\" : \"#BA6F25\"\n        )\n      )};\n  }\n  &:disabled,\n  &.disabled {\n    cursor: default;\n    text-decoration: none;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.disabledForeground\" as UnknownThemeProp<\"Link.disabledForeground\">,\n        theme.color(\n          \"Label.disabledForeground\",\n          theme.color(\"Label.disabledText\", \"#999\")\n        )\n      )};\n  }\n  // We may need to refine this to allow passing visited as a prop for links that don't have href, and not apply the\n  // styles in that case, since it seems no href is considered visited by default. Although, in all main themes\n  // Link.visitedForeground is set to the default link color.\n  &:visited,\n  &.visited {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.visitedForeground\",\n        theme.color(\n          \"link.visited.foreground\" as UnknownThemeProp<\"link.visited.foreground\">,\n          !theme.dark ? \"#800080\" : \"#9776A9\"\n        )\n      )};\n  }\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { AriaLinkProps } from \"@react-types/link\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { FocusRing, useFocusable } from \"@react-aria/focus\";\nimport { StyledLink } from \"@intellij-platform/core/Link/StyledLink\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\n\nexport type LinkProps = AriaLinkProps & {\n  isDisabled?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n  excludeFromTabOrder?: boolean;\n};\n\n/**\n * A focusable span in style of [Link](https://jetbrains.github.io/ui/controls/link/) and with accessibility role of link.\n *\n * TODO and known issues:\n * - in the reference impl, Space presses the link, Enter doesn't. It's vice versa here, because of how usePress is implemented.\n * - Support for External links\n * - Support for Anchor elements?\n *\n * Unknowns:\n * - What are ActionLink and DefaultLinkButtonUI?\n * - What is HyperLinkLabel compared to LabelLink (which was looked into in implementation of this component)?\n */\nexport const Link = React.forwardRef(\n  (\n    props: LinkProps,\n    forwardedRef: ForwardedRef<HTMLAnchorElement>\n  ): React.ReactElement => {\n    const ref = useForwardedRef(forwardedRef);\n\n    const { focusableProps } = useFocusable(props, ref);\n    const { pressProps, isPressed } = usePress({ ...props, ref });\n    const domProps = filterDOMProps(props, { labelable: true });\n    const interactionHandlers = mergeProps(focusableProps, pressProps);\n\n    return (\n      <FocusRing focusRingClass=\"focus-visible\">\n        <StyledLink\n          {...mergeProps(focusableProps, interactionHandlers, domProps)}\n          as=\"span\"\n          role=\"link\"\n          ref={ref}\n          // maybe use clsx\n          className={`${props.isDisabled ? \"disabled\" : \"\"} ${\n            isPressed ? \"active\" : \"\"\n          } ${props.className || \"\"}`}\n          aria-disabled={props.isDisabled || undefined}\n          tabIndex={\n            !props.isDisabled ? (props.excludeFromTabOrder ? -1 : 0) : undefined\n          }\n        >\n          {props.children}\n        </StyledLink>\n      </FocusRing>\n    );\n  }\n);\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable, Node } from \"@react-types/shared\";\nimport React, { ForwardedRef, Key } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { useListState } from \"./useListState\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\n\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { useListVirtualizer } from \"@intellij-platform/core/List/useListVirtualizer\";\nimport { ListContext } from \"@intellij-platform/core/List/ListContext\";\n\nexport type ListProps<T extends object> = Omit<\n  Omit<AriaListBoxProps<T>, \"disallowEmptySelection\">,\n  keyof AsyncLoadable\n> &\n  CollectionRefProps & {\n    /**\n     * fills the available horizontal or vertical space, when rendered in a flex container.\n     */\n    fillAvailableSpace?: boolean;\n    /**\n     * When true, shows the list in focused style, even when it's not focused. A common use case is when the list\n     * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n     * keyboard events as if the list was focused.\n     * Another (maybe questionable) use case is master detail views, where the master view is shown as focused, even\n     * when the details view has physical focus.\n     */\n    showAsFocused?: boolean;\n    allowEmptySelection?: boolean;\n    /**\n     * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n     * Enter not implemented yet :D\n     */\n    onAction?: (key: Key) => void;\n\n    /**\n     * Useful when list items have a custom height, to hint layout calculation logic about the item height which\n     * increases rendering efficiency and also prevents flash of items with wrong height.\n     */\n    estimatedItemHeight?: number;\n\n    className?: string;\n  };\n\n/**\n * List view\n */\nexport const List = React.forwardRef(function List<T extends object>(\n  {\n    allowEmptySelection = false,\n    fillAvailableSpace = false,\n    estimatedItemHeight,\n    className,\n    ...inputProps\n  }: ListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n  const { listProps, listContext } = useList(\n    {\n      ...props,\n      isVirtualized: true,\n    },\n    state,\n    ref\n  );\n\n  const {\n    virtualizerProps: { children: renderNode, ...virtualizerProps },\n  } = useListVirtualizer({\n    state,\n    estimatedItemHeight,\n    renderItem: (item) => <ListItem key={item.key} item={item} />,\n  });\n\n  return (\n    <ListContext.Provider value={listContext}>\n      <StyledList\n        as={Virtualizer<Node<any>, any>}\n        {...virtualizerProps}\n        {...listProps}\n        {...filterDOMProps(props, { labelable: true })}\n        fillAvailableSpace={fillAvailableSpace}\n        className={className}\n        ref={ref}\n      >\n        {renderNode}\n      </StyledList>\n    </ListContext.Provider>\n  );\n});\n","import React, { Key } from \"react\";\nimport { ListState } from \"@react-stately/list\";\n\nexport type ListContextType<T> = {\n  state: ListState<T>;\n  focused: boolean;\n  onAction: ((key: Key) => void) | undefined;\n};\n\nexport const ListContext = React.createContext<ListContextType<any> | null>(\n  null\n);\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ elementType: \"li\", orientation: \"vertical\" })\n        .separatorProps}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport { StyledListItem } from \"./StyledListItem\";\nimport { ListContext } from \"@intellij-platform/core/List/ListContext\";\n\nexport interface ListItemProps<T> {\n  item: Node<T>;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({ item, children }: ListItemProps<T>) {\n  const { state, focused: listFocused, onAction } = useContext(ListContext)!;\n  const ref = React.useRef(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isSelected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction: () => onAction?.(item.key),\n    selectionManager: state.selectionManager,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={isSelected}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      aria-selected={isSelected}\n      aria-label={item[\"aria-label\"]}\n      {...itemProps}\n      ref={ref}\n    >\n      <ItemStateContext.Provider\n        value={{\n          isDisabled,\n          isSelected,\n          isContainerFocused: listFocused,\n          node: item,\n        }}\n      >\n        {children || item.rendered}\n      </ItemStateContext.Provider>\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\ntype StyledListProps = {\n  fillAvailableSpace?: boolean;\n};\nexport const StyledList = styled.div\n  .attrs<StyledListProps>((props) => ({ role: props.role || \"list\" }))\n  .withConfig<StyledListProps>({\n    shouldForwardProp: (prop) => prop !== \"fillAvailableSpace\",\n  })<StyledListProps>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.div.attrs<StyledListItemProps>(\n  (props) => ({\n    role: props.role || \"listitem\",\n  })\n)<StyledListItemProps>`\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"List.foreground\" as UnknownThemeProp<\"List.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"List.selectionForeground\" as UnknownThemeProp<\"List.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"List.selectionBackground\" as UnknownThemeProp<\"List.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"List.selectionInactiveForeground\" as UnknownThemeProp<\"List.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"List.selectionBackgroundInactive\" as UnknownThemeProp<\"List.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor: theme.asCurrentBackground(backgroundColor),\n      color,\n    };\n  }};\n  position: relative;\n  display: flex;\n  white-space: nowrap;\n  padding: 0 0.5rem; // themed?\n  line-height: 1.25rem;\n  outline: none;\n  cursor: default;\n  min-width: min-content; // Needed for content sizing for when list/tree is used inside popup or modal window\n`;\n","import { AriaSelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { Key, useEffect, useMemo, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { ListContextType } from \"@intellij-platform/core/List/ListContext\";\n\nexport interface ListProps\n  extends Omit<\n      AriaSelectableListOptions,\n      | \"disallowEmptySelection\"\n      | \"selectOnFocus\"\n      | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n      | \"collection\" // Grouped as state, the second argument, like in useListBox\n      | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n      | \"ref\" // Third argument\n    >,\n    CollectionRefProps {\n  allowEmptySelection?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n  showAsFocused?: boolean;\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  { onAction, showAsFocused, ...props }: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is going to be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and allowEmptySelection is false.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      !props.allowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.setFocusedKey(firstKey);\n      state.selectionManager.select(firstKey);\n    }\n  }, [!props.allowEmptySelection]);\n\n  const onActionCallback = useEventCallback(onAction ?? (() => {}));\n  const listContext: ListContextType<T> = useMemo(\n    () => ({\n      state,\n      focused: Boolean(focused || showAsFocused),\n      onAction: onActionCallback,\n    }),\n    [state, focused, showAsFocused]\n  );\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    listContext,\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  KeyboardDelegate,\n  Node,\n} from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  MultipleSelectionManager,\n  SelectionManager,\n} from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { useCollectionAutoScroll } from \"@intellij-platform/core/Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T> & CollectionRefProps\n): ListState<T> {\n  const state = originalUseListState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  useCollectionRef(props, state);\n  return state;\n}\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.div(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { ReusableView } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\nimport React, { ReactNode, useRef } from \"react\";\nimport {\n  layoutInfoToStyle,\n  useVirtualizerItem,\n  VirtualizerItem,\n  VirtualizerProps,\n} from \"@react-aria/virtualizer\";\nimport { StyledListSectionHeader } from \"@intellij-platform/core/List/StyledListSectionHeader\";\n\ninterface SectionProps<T> {\n  reusableView: ReusableView<Node<T>, unknown>;\n  header: ReusableView<Node<T>, unknown>;\n  children?: ReactNode;\n}\n\nfunction ListSection<T extends object>({\n  reusableView,\n  header,\n  children,\n}: SectionProps<T>) {\n  const headerRef = useRef<HTMLDivElement>(null);\n  useVirtualizerItem({\n    reusableView: header,\n    ref: headerRef,\n  });\n  return (\n    <>\n      <StyledListSectionHeader\n        role=\"presentation\"\n        ref={headerRef}\n        style={layoutInfoToStyle(header.layoutInfo!, \"ltr\")}\n      >\n        {reusableView.content.rendered}\n      </StyledListSectionHeader>\n      <div\n        key={reusableView.key}\n        style={layoutInfoToStyle(reusableView.layoutInfo!, \"ltr\")}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport const renderWrapper: VirtualizerProps<\n  Node<any>,\n  unknown\n>[\"renderWrapper\"] = (parent, reusableView, children, renderChildren) => {\n  if (reusableView.viewType === \"section\") {\n    return (\n      <ListSection\n        key={reusableView.key}\n        reusableView={reusableView}\n        header={children.find((c) => c.viewType === \"header\")!}\n      >\n        {renderChildren(children.filter((c) => c.viewType === \"item\"))}\n      </ListSection>\n    );\n  }\n  return (\n    <VirtualizerItem\n      key={reusableView.key}\n      reusableView={reusableView}\n      parent={parent ?? undefined}\n    />\n  );\n};\n","import React, { HTMLAttributes, useMemo } from \"react\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\nimport { ListState } from \"@react-stately/list\";\nimport { Node } from \"@react-types/shared\";\nimport { renderWrapper } from \"./renderWrapper\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\";\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\nexport const useListVirtualizer = <T extends object>({\n  renderItem,\n  estimatedItemHeight = 20,\n  state,\n}: {\n  renderItem: (item: ItemNode<T>) => React.ReactNode;\n  estimatedItemHeight?: number;\n  state: ListState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<Node<T>, unknown>,\n    keyof HTMLAttributes<HTMLElement>\n  > & { children: (type: string, content: Node<T>) => React.ReactNode };\n} => {\n  const layout = useMemo(\n    () =>\n      new VariableWidthListLayout<T>({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: estimatedItemHeight,\n        estimatedHeadingHeight: 20,\n        dividerHeight: 2,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      children: (type, item) => {\n        if (type === \"item\") {\n          return renderItem(item as ItemNode<T>);\n        }\n        if (type === \"divider\") {\n          return <ListDivider key={item.key} />;\n        }\n      },\n      renderWrapper,\n\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { ForwardedRef, HTMLAttributes, HTMLProps } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayTriggerProps } from \"@react-types/overlays\";\n\nimport { useContextMenu, UseContextMenuProps } from \"./useContextMenu\";\nimport { MenuOverlay } from \"./MenuOverlay\";\n\ninterface ContextMenuContainerProps\n  extends Omit<HTMLProps<HTMLDivElement>, \"children\">,\n    UseContextMenuProps {\n  /**\n   * Will be called to return the Menu when context menu is triggered. Use {@link Menu} component to render a menu.\n   */\n  renderMenu: () => React.ReactNode;\n  /**\n   * If children is a function, context menu props is passed to it, to be passed to the underlying element.\n   * Otherwise, a div container will be rendered.\n   */\n  children:\n    | React.ReactNode\n    | ((props: HTMLAttributes<HTMLElement>) => React.ReactNode);\n}\n\n/**\n * A generic container for context menu. It's the same as a normal div, only with an additional `renderMenu` prop,\n * to be used to render context menu, when it's triggered.\n * Closes the menu when a menu action is triggered.\n */\nexport const ContextMenuContainer = React.forwardRef(\n  (\n    {\n      children,\n      renderMenu,\n      onOpen,\n      isDisabled,\n      ...props\n    }: ContextMenuContainerProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useMenuTriggerState({} as OverlayTriggerProps);\n\n    const { overlayProps, containerProps, overlayRef } = useContextMenu(\n      { onOpen, isDisabled },\n      state\n    );\n    const allProps = mergeProps(props, containerProps);\n    return (\n      <>\n        {typeof children === \"function\" ? (\n          children(allProps)\n        ) : (\n          <div {...allProps} ref={ref}>\n            {children}\n          </div>\n        )}\n        <MenuOverlay\n          state={state}\n          overlayRef={overlayRef}\n          overlayProps={overlayProps}\n          restoreFocus\n          /**\n           * Context menus don't autofocus the first item in the reference impl.\n           * Note that this just defines the default value, and can always be controlled per case on the rendered Menu\n           */\n          defaultAutoFocus={true}\n        >\n          {renderMenu()}\n        </MenuOverlay>\n      </>\n    );\n  }\n);\n\n/**\n * Data attribute name to be used to mark an element as the reference for positioning a contextual menu.\n */\nexport const MENU_POSITION_TARGET_DATA_ATTRIBUTE =\n  \"data-context-menu-position-target\";\n","import React, { useEffect, useRef } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { useOverlay } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { areInNestedOverlays } from \"@intellij-platform/core/Overlay\";\n\nexport type UseContextMenuProps = {\n  /**\n   * Whether opening contextmenu is disabled.\n   */\n  isDisabled?: boolean;\n  /**\n   * Called when contextmenu is opened.\n   * @param args\n   */\n  onOpen?: (args: {\n    /**\n     * The target element on which contextmenu event was triggered.\n     */\n    target: Element;\n  }) => void;\n};\n/**\n * Functionality and accessibility of context menu.\n */\nexport const useContextMenu = (\n  { isDisabled = false, onOpen }: UseContextMenuProps,\n  state: MenuTriggerState\n) => {\n  const containerRef = useRef<number | null>(null);\n  /**\n   * NOTE: not using useMenuTrigger because:\n   * - There is no option to have a trigger like this: \"right click + long press only by touch\" which seems to be the\n   *   reasonable trigger for context menu. If we want to use it just for long press, we could disable it if it's not\n   *   a touch device, but that would be suboptimal, since both touch and mouse can be available, and it should depend\n   *   not on availability of touch, but on the triggered event type. Plus, isDisabled is broken in v<3.5.0\n   * - It's not quite clear at the moment, if the aria attributes that useMenuTrigger sets would be applicable in case\n   *   of this context menu component too. the trigger is not the container. For example, if there is a list rendered\n   *   inside, the selected item would be the trigger. Maybe even this component, as a container for context menu\n   *   is not the best way to allow for context menu, when comes to a11y concerns. For now, we skip a11y props of the\n   *   trigger. A11y props of the menu itself (e.g. aria-label) would also be up to the usage of this component.\n   *\n   *   TODO: add support for long touch\n   */\n  const onContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n    containerRef.current = e.timeStamp;\n    updatePosition(e);\n    onOpen?.({ target: e.target as Element });\n    e.preventDefault();\n    // NOTE: we can't use offsetX/offsetY, because it would depend on the exact target that was clicked.\n    if (state.isOpen) {\n      /**\n       * If the context menu is already open, closing and reopening makes sure the menu properly gains the focus.\n       * Otherwise, the focus may go back to the background.\n       * It also better matches the reference impl.\n       */\n      state.close();\n      setTimeout(() => {\n        state.open(null);\n      });\n    } else {\n      state.open(null);\n    }\n  };\n  useEffect(() => {\n    const onOutsideContextMenu = (e: MouseEvent) => {\n      // Using timestamp an easy (and hopefully reliable) way to detect if it's the same\n      // event being handled by onContextMenu, avoiding the overhead of requiring a ref for the container.\n      if (containerRef.current !== e.timeStamp) {\n        state.close();\n      }\n    };\n    /**\n     * right clicks outside are not currently captured as \"outside interaction\" by react-aria's useOverlay hook.\n     * so we set up a global listener to close the context menu when contextmenu event is triggered outside the\n     * context menu container.\n     * to not require a ref just for this, the ref is manually updated when contextmenu event is triggered\n     * on the container (which happens before the event propagates to the document).\n     */\n    document.addEventListener(\"contextmenu\", onOutsideContextMenu);\n    return () =>\n      document.removeEventListener(\"contextmenu\", onOutsideContextMenu);\n  }, []);\n\n  const overlayRef = useRef(null);\n\n  const { overlayProps: positionProps, updatePosition } =\n    useMouseEventOverlayPosition({\n      overlayRef,\n      placement: \"bottom start\",\n      // shouldFlip should be false, but it doesn't work as expected. Overlay container is rendered within the view port\n      // but the menu overflows from the overlay container\n      shouldFlip: true,\n      offset: -8,\n      crossOffset: 2, // to not get the first item hovered on open\n      isOpen: state.isOpen,\n    });\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        return !areInNestedOverlays(overlayRef.current, element);\n      },\n    },\n    overlayRef\n  );\n\n  const containerProps: React.HTMLAttributes<HTMLElement> = isDisabled\n    ? {}\n    : {\n        onContextMenu,\n      };\n  return {\n    /**\n     * props to be applied on the container element which is supposed to have the context menu\n     */\n    containerProps,\n    /**\n     * The ref to be applied on the menu overlay wrapper. It's usually an input instead of an output in similar\n     * react-aria hooks, but it seemed unnecessary here.\n     */\n    overlayRef,\n    /**\n     * props to be applied on the menu overlay wrapper.\n     */\n    overlayProps: mergeProps(overlayProps, positionProps),\n  };\n};\n","import { Item, PartialNode, Section } from \"@react-stately/collections\";\nimport { Item as Item2 } from \"./Item\";\nimport {\n  CollectionBase,\n  CollectionElement,\n  ItemProps,\n  SectionProps,\n} from \"@react-types/shared\";\nimport React from \"react\";\n\nfunction* patchCollectionItem<T>(nodes: Generator<PartialNode<T>>) {\n  for (const partialNode of nodes)\n    yield {\n      ...partialNode,\n      *childNodes() {\n        const result2 = partialNode.childNodes?.();\n        if (result2) {\n          for (const partialChildNode of result2) {\n            const { type, ...partialChildNodeWithoutType } = partialChildNode;\n            yield partialChildNodeWithoutType;\n          }\n        }\n      },\n    };\n}\n\nconst PatchedItem = Item.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedItem.getCollectionNode = function getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Item.getCollectionNode(props, context));\n};\n\nconst PatchedSection = Section.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedSection.getCollectionNode = function getCollectionNode<T>(\n  props: SectionProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Section.getCollectionNode(props, context));\n};\nfunction convertCollectionElement<T>(\n  result: CollectionElement<T> | React.ReactNode\n): CollectionElement<T> {\n  if (\n    React.isValidElement(result) &&\n    (result.type === Item || result.type === Item2)\n  ) {\n    return React.createElement(\n      PatchedItem,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as ItemProps<T>),\n      },\n      convertChildren(result.props.children)\n    ) as CollectionElement<T>;\n  }\n  if (React.isValidElement(result) && result.type === Section) {\n    return React.createElement(\n      PatchedSection,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as SectionProps<T>),\n      } as any,\n      convertChildren((result.props as any).children)\n    ) as CollectionElement<T>;\n  }\n  return result as CollectionElement<T>;\n}\n\nfunction convertChildren<T>(children: React.ReactNode): React.ReactNode {\n  return Array.isArray(children)\n    ? // NOTE: We intentionally avoid using React.Children.map as it messes with keys.\n      children.map(convertChildren)\n    : convertCollectionElement(children);\n}\n\n/**\n * CollectionBuilder expects child type to be the same as parent type, which is weird in the first place:\n * https://github.com/adobe/react-spectrum/blob/cae83ff95f2f709b761c70d47ace96d6346ed873/packages/%40react-stately/collections/src/CollectionBuilder.ts#L148\n * On the other hand, the default Item components sets the `type` to item, for all child PartialNode objects:\n * https://github.com/adobe/react-spectrum/blob/c49d9819adc2cb63377f39557352440c72072caf/packages/%40react-stately/collections/src/Item.ts#L40-L54\n * Which is also a little unexpected, as in many nested collections, an item can have all types of children.\n * This function patches that, replacing Item elements with PatchedItem element which doesn't set type on children\n * PartialNodes.\n */\nexport function patchCollectionProps<T>({\n  children,\n  ...props\n}: Partial<CollectionBase<T>>): CollectionBase<T> {\n  return {\n    ...props,\n    children:\n      typeof children === \"function\"\n        ? (node: T) => convertChildren(children(node)) as CollectionElement<T>\n        : (convertChildren(children) as CollectionElement<T>),\n  };\n}\n","import React, { CSSProperties, Key, RefObject, useContext } from \"react\";\nimport { AriaMenuOptions, useMenu as useMenuAria } from \"@react-aria/menu\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { patchCollectionProps } from \"@intellij-platform/core/Collections/patchCollectionProps\";\nimport { TreeProps, useTreeState } from \"../Tree/useTreeState\"; // shared dependency between tree and menu, that could be lifted up import {Submenu} from '@intellij-platform/core/Menu/Submenu'\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { SubmenuProps } from \"./Submenu\"; // internal export\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key; // FIXME: should be keys\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void; // FIXME: should be keys\n  defaultExpandedKey?: Key; // FIXME: should be keys\n  /**\n   * @deprecated\n   */\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n\n  /**\n   * Defines the press behaviour (either by mouse or by pressing Enter when focused) on menu items with submenu.\n   * By default (undefined), pressing or hovering over a menu item with submenu, opens the submenu.\n   * When set to \"toggle\", pressing a menu item with submenu will toggle the submenu. Hovering over such items will\n   * no longer open the submenu.\n   * When set to \"action\", pressing a menu item with submenu will call onAction for that item, and closes the menu.\n   * Hovering over such items will no longer open the submenu.\n   *\n   * In all cases, pressing the right arrow will always open the submenu.\n   */\n  submenuBehavior?: \"default\" | \"toggleOnPress\" | \"actionOnPress\";\n\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n\n  /**\n   * Minimum width of the menu\n   * @default: 120px\n   */\n  minWidth?: CSSProperties[\"minWidth\"];\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext<{\n  close: () => void;\n  defaultAutoFocus: MenuProps<unknown>[\"autoFocus\"];\n}>({\n  close: () => {},\n  defaultAutoFocus: undefined,\n});\nexport const MenuContext = React.createContext<\n  Pick<\n    MenuProps<unknown>,\n    \"onClose\" | \"onAction\" | \"submenuBehavior\" | \"autoFocus\"\n  > & {\n    itemWrapper?: (\n      renderedItem: React.ReactNode,\n      item: Node<unknown>\n    ) => React.ReactNode;\n    renderSubmenu?: (props: SubmenuProps<unknown>) => React.ReactNode;\n  }\n>({});\n\nexport function useMenu<T>(\n  {\n    onAction: onActionProp,\n    submenuBehavior = \"default\",\n    ...props\n  }: MenuProps<T> & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { close, defaultAutoFocus } = useContext(MenuOverlayContext);\n  const autoFocus = props.autoFocus ?? defaultAutoFocus;\n  const onClose = () => {\n    props.onClose?.();\n    close();\n  };\n  const onAction = (key: Key) => {\n    if (\n      // The following check should have been in useMenu, but it's not currently. Probably because they haven't yet\n      // covered nested menus.\n      !state.collection.getItem(key)?.hasChildNodes\n    ) {\n      return onActionProp?.(key);\n    } else if (submenuBehavior === \"actionOnPress\") {\n      onClose();\n      return onActionProp?.(key);\n    }\n  };\n  const menuContextValue: React.ContextType<typeof MenuContext> = {\n    submenuBehavior,\n    autoFocus,\n    onAction,\n    onClose,\n  };\n  const { menuProps } = useMenuAria(\n    { ...props, onAction, onClose, autoFocus },\n    state,\n    ref\n  );\n\n  return {\n    menuProps,\n    menuContextValue,\n  };\n}\n\nexport function useMenuState<T extends object>(\n  props: TreeProps<T> &\n    Pick<\n      MenuProps<T>,\n      \"expandedKey\" | \"defaultExpandedKey\" | \"onExpandedKeyChange\"\n    >\n) {\n  props = patchCollectionProps(props);\n  return useTreeState({\n    ...props,\n    childExpansionBehaviour: \"single\",\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n}\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also, there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n */\nexport function Menu<T extends object>({ minWidth, ...props }: MenuProps<T>) {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useMenuState(props);\n  const { menuContextValue, menuProps } = useMenu(props, state, ref);\n\n  return (\n    /**\n     * MenuContext is used to pass onAction and onClose to be passed to useMenu in submenus.\n     * That's needed because in useMenuItem onAction and onClose are read off a WeakMap which has the menu state\n     * (TreeState) as key. So we have to pass onAction and onClose everytime we call useMenu in submenus, to let the\n     * menu items in that submenu access the right value of onAction and onClose. To avoid drilling these props down,\n     * we keep it in a context.\n     */\n    <MenuContext.Provider value={menuContextValue}>\n      <StyledMenu\n        {...menuProps}\n        ref={ref}\n        style={{ minWidth }}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        {renderMenuNodes(state, [...state.collection])}\n      </StyledMenu>\n    </MenuContext.Provider>\n  );\n}\n","import React, { HTMLAttributes, ReactNode, RefObject, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!)!;\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const hasSubmenu = item.hasChildNodes;\n  const { menuItemProps: ariaMenuItemProps, ...result } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: hasSubmenu ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n\n  // useMenuItem in react aria utilizes useHover to focus item on hover. The logic there conflicts with nested menus\n  // requirements (at least based on how nested menu is implemented here currently). Also, submenuBehavior requires\n  // some more customization. So we delete the handlers set by useHover in useMenuItem, and add a custom useHover.\n  delete ariaMenuItemProps.onMouseEnter;\n  delete ariaMenuItemProps.onPointerEnter;\n\n  if (submenuBehavior === \"default\" && isExpanded) {\n    // When menu item has its submenu opened, clicking it should not move focus or do anything.\n    delete ariaMenuItemProps.onPointerDown;\n  }\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled,\n    onHoverStart: () => {\n      const isAnySubmenuOpen = [...state.expandedKeys].some(\n        (expandedKey) =>\n          state.collection.getItem(expandedKey)?.parentKey === item.parentKey\n      );\n\n      if (submenuBehavior === \"default\" && !isExpanded) {\n        state.toggleKey(item.key);\n      }\n\n      if (!isFocusVisible()) {\n        const shouldFocus =\n          submenuBehavior === \"default\" ? !isExpanded : !isAnySubmenuOpen;\n        if (shouldFocus) {\n          state.selectionManager.setFocused(true);\n        }\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  return {\n    ...result,\n    menuItemProps: mergeProps(\n      hasSubmenu\n        ? {\n            \"aria-expanded\": isExpanded,\n            \"aria-haspopup\": \"menu\",\n          }\n        : {},\n      ariaMenuItemProps,\n      hoverProps,\n      keyboardProps,\n      submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n    ),\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...menuItemProps}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using Overlay:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         *\n         */\n        <Overlay\n          OverlayComponent={\n            /**\n             *  The FocusScope included in the default Overlay, messes with a particular expected behavior. So we use\n             *  SimpleOverlay, which just renders its children as a portal. There may be a better solution for that\n             *  problem, which would eliminate the need for the funky `OverlayComponent` prop on our `Overlay`\n             *  component. Something to look into in the future.\n             */\n            SimpleOverlay\n          }\n        >\n          <div ref={nestedMenuRef} {...positionProps}>\n            {renderSubmenu({ parentState: state, rootKey: item.key })}\n          </div>\n        </Overlay>\n      )}\n    </>\n  );\n}\n\n/**\n * A replacement for react-aria Overlay, which doesn't render FocusScope\n */\nfunction SimpleOverlay({\n  children,\n  portalContainer = document.body,\n}: {\n  children: ReactNode;\n  portalContainer?: Element | undefined;\n}) {\n  return ReactDOM.createPortal(children, portalContainer);\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport {\n  MenuOverlayContext,\n  MenuProps,\n} from \"@intellij-platform/core/Menu/Menu\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  defaultAutoFocus,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  /**\n   * Sets the default value of {@link Menu}'s {@link MenuProps#autoFocus} prop.\n   */\n  defaultAutoFocus?: MenuProps<unknown>[\"autoFocus\"];\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <Overlay>\n      <FocusScope restoreFocus={restoreFocus} autoFocus>\n        <MenuOverlayContext.Provider\n          value={{\n            ...state,\n            defaultAutoFocus,\n          }}\n        >\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </Overlay>\n  );\n}\n","import React, { HTMLAttributes, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaMenuOptions, useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { Alignment } from \"@react-types/shared\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  // TODO: replace render function children with normal children, and utilize PressResponder. Add a story for the\n  //  edge case of custom trigger, using PressResponder\n  children: (\n    props: HTMLAttributes<HTMLButtonElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean;\n  /**\n   * By default, the menu is positioned relative to the trigger. `positioningTargetRef` can be used to have the menu\n   * positioned to another element. An example use case is when the menu trigger is a button inside some list item or\n   * text box, but the menu semantically belongs to the container list item or text box.\n   */\n  positioningTargetRef?: React.RefObject<HTMLElement>;\n  renderMenu: (props: {\n    // AriaMenuOptions contains more properties than needed\n    menuProps: Pick<\n      AriaMenuOptions<unknown>,\n      \"id\" | \"aria-labelledby\" | \"autoFocus\" | \"onClose\"\n    >;\n  }) => React.ReactNode;\n\n  /**\n   * Alignment of the menu relative to the trigger.\n   * @default 'start'\n   */\n  align?: Alignment;\n  /**\n   * Where the Menu opens relative to its trigger.\n   * @default 'bottom'\n   */\n  direction?: \"bottom\" | \"top\" | \"left\" | \"right\" | \"start\" | \"end\";\n  /**\n   * Whether the menu should automatically flip direction when space is limited.\n   * @default true\n   */\n  shouldFlip?: boolean;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = true,\n  preventFocusOnPress = true,\n  positioningTargetRef,\n  ...otherProps\n}) => {\n  const state = useMenuTriggerState(otherProps);\n  const triggerRef = React.useRef(null);\n  const overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  const { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  const ariaButtonProps: AriaButtonProps<\"button\"> = {\n    ...triggerProps,\n    // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n    preventFocusOnPress,\n  };\n  const { buttonProps } = useButton(ariaButtonProps, triggerRef);\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: positioningTargetRef ?? triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<MenuTriggerProps>[\"direction\"],\n  align: Required<MenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import React, {\n  HTMLAttributes,\n  RefObject,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport {\n  mergeProps,\n  useLayoutEffect,\n  useResizeObserver,\n} from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { ListCollection } from \"@react-stately/list\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  useCollectionSpeedSearch,\n  CollectionSpeedSearchMatches,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchInput,\n  SpeedSearchPopupProps,\n  SpeedSearchState,\n} from \"@intellij-platform/core/SpeedSearch\";\n\nimport { StyledMenu } from \"./StyledMenu\";\nimport { MenuContext, MenuProps, useMenu, useMenuState } from \"./Menu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { SubmenuProps, useSubmenu } from \"./Submenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuKeyboardDelegate } from \"./_useSubmenu\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledVerticalSeparator } from \"@intellij-platform/core/StyledSeparator\";\n\nexport interface SpeedSearchMenuProps<T>\n  extends Omit<MenuProps<T>, \"submenuBehavior\"> {\n  submenuBehavior?: Exclude<MenuProps<T>[\"submenuBehavior\"], \"default\">;\n  /**\n   * Text to show when the filtering is active but no match is found for the current query.\n   * @default \"Nothing to show\"\n   */\n  emptyText?: React.ReactNode;\n}\n\nconst StyledItemsContainer = styled.ul`\n  all: unset;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst StyledSearchFieldWrapper = styled.div`\n  flex-shrink: 0;\n  padding: 0 0.2rem 0.3rem;\n`;\n\nconst StyledSpeedSearchMenu = styled(StyledMenu)`\n  --jui-menu-item-padding: 1.25rem;\n  ${StyledVerticalSeparator} {\n    margin: 0 3px; // FIXME: probably use theme\n  }\n`;\n\nconst StyledPlaceholder = styled.div`\n  color: ${({ theme }) =>\n    // Ref: StatusText => DEFAULT_ATTRIBUTES => SimpleTextAttributes.GRAYED_ATTRIBUTES\n    theme.color(\n      \"Component.infoForeground\",\n      theme.dark ? \"#787878\" : \"#999999\"\n    )};\n\n  // center positioning. Intentionally different from reference impl.\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  white-space: nowrap;\n`;\n\nfunction useSpeedSearchMenu<T>(\n  state: TreeState<T>,\n  rootKey: React.Key | null,\n  ref: React.RefObject<HTMLUListElement>,\n  containerRef: React.RefObject<HTMLDivElement>\n) {\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n  } = useCollectionSpeedSearch({\n    collection: useMemo(\n      () =>\n        new ListCollection(\n          rootKey\n            ? state.collection.getItem(rootKey)?.childNodes ?? []\n            : state.collection\n        ),\n      [rootKey, state.collection]\n    ),\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new MenuKeyboardDelegate(\n      rootKey,\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    keepSearchActiveOnBlur: true,\n    focusBestMatch: true,\n    ref,\n  });\n\n  // When a menu item which was focused is filtered out, the focus goes to body.\n  // We manually move focus back to the container.\n  useEffect(() => {\n    const element = ref.current;\n    if (\n      element &&\n      state.selectionManager.isFocused &&\n      !element?.contains(document.activeElement)\n    ) {\n      focusSafely(element);\n    }\n  });\n\n  const lastSize = useRef<{ width: number; height: number } | null>(null);\n  const [size, setSize] = useState<{ width: number; height: number } | null>(\n    null\n  );\n  const measureSize = () => {\n    const { offsetWidth = 0, offsetHeight = 0 } = containerRef.current || {};\n    if (offsetWidth > 0 && offsetHeight > 0) {\n      lastSize.current = {\n        width: offsetWidth,\n        height: offsetHeight,\n      };\n    }\n  };\n  const isSearchActive =\n    speedSearch.active && speedSearch.searchTerm.length > 0;\n  useResizeObserver({\n    ref: containerRef,\n    onResize: useEventCallback(() => {\n      if (!isSearchActive) {\n        measureSize();\n      }\n    }),\n  });\n  useLayoutEffect(() => {\n    if (isSearchActive) {\n      if (lastSize.current) {\n        setSize(lastSize.current);\n      }\n    } else {\n      if (!lastSize.current) {\n        measureSize();\n      }\n      setSize(null);\n    }\n  }, [isSearchActive]);\n\n  const sizeStyleProps: HTMLAttributes<HTMLElement> = size\n    ? {\n        style: {\n          ...size,\n          minHeight: size.height,\n          maxHeight: size.height,\n        },\n      }\n    : {};\n  return {\n    speedSearch,\n    keyboardDelegate,\n    selectionManager,\n    speedSearchContainerProps: mergeProps<HTMLAttributes<HTMLElement>[]>(\n      speedSearchContainerProps,\n      sizeStyleProps,\n      {\n        onMouseDown: (e: React.MouseEvent) => {\n          // Until SearchInput and connecting that to a selectable list is implemented, we should prevent menu from\n          // losing focus when the fake search input is clicked\n          e.preventDefault();\n        },\n      }\n    ),\n    searchPopupProps,\n  };\n}\n\n/**\n * Drop-in replacement for Menu, which implements SpeedSearch.\n *\n *\n */\nexport const SpeedSearchMenu = <T extends object>({\n  submenuBehavior = \"toggleOnPress\",\n  autoFocus = \"first\",\n  emptyText = \"Nothing to show\",\n  minWidth,\n  ...props\n}: SpeedSearchMenuProps<T>) => {\n  const onAction = (key: React.Key) => {\n    props.onAction?.(key);\n    speedSearch.clear();\n  };\n  const ref = React.useRef<HTMLUListElement>(null);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const state = useMenuState({ ...props });\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, null, ref, containerRef);\n  const { menuContextValue, menuProps } = useMenu(\n    {\n      ...props,\n      autoFocus,\n      onAction,\n      keyboardDelegate,\n      submenuBehavior,\n    },\n    state,\n    ref\n  );\n\n  return (\n    <MenuContext.Provider\n      value={{\n        ...menuContextValue,\n        renderSubmenu: (props) => (\n          <SpeedSearchSubmenu emptyText={emptyText} {...props} />\n        ),\n      }}\n    >\n      <StyledSpeedSearchMenu\n        as=\"div\"\n        ref={containerRef}\n        style={{ minWidth }}\n        {...speedSearchContainerProps}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        <SpeedSearchMenuContent\n          items={[...state.collection]}\n          emptyText={emptyText}\n          speedSearch={speedSearch}\n          searchPopupProps={searchPopupProps}\n          state={state}\n          menuProps={menuProps}\n          menuRef={ref}\n        />\n      </StyledSpeedSearchMenu>\n    </MenuContext.Provider>\n  );\n};\n\nfunction SpeedSearchMenuContent<T>({\n  items,\n  state,\n  speedSearch,\n  searchPopupProps,\n  menuProps,\n  menuRef,\n  emptyText,\n}: {\n  state: TreeState<T>;\n  items: Node<T>[];\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  menuProps: HTMLAttributes<HTMLElement>;\n  menuRef: RefObject<HTMLUListElement>;\n  emptyText: React.ReactNode;\n}) {\n  const filter = speedSearch.active\n    ? ({ key, type }: Node<T>) =>\n        type !== \"item\" || speedSearch.matches.has(key)\n    : undefined;\n  return (\n    <>\n      {searchPopupProps.children && (\n        <StyledSearchFieldWrapper\n          onClick={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <SpeedSearchInput {...searchPopupProps} clear={speedSearch.clear} />\n        </StyledSearchFieldWrapper>\n      )}\n      <StyledItemsContainer {...menuProps} ref={menuRef}>\n        {renderMenuNodes(state, items, filter)}\n        {speedSearch.active && speedSearch.matches.size === 0 && (\n          <StyledPlaceholder>{emptyText}</StyledPlaceholder>\n        )}\n      </StyledItemsContainer>\n    </>\n  );\n}\n\nfunction SpeedSearchSubmenu<T>({\n  parentState,\n  rootKey,\n  emptyText,\n}: SubmenuProps<T> & { emptyText: React.ReactNode }) {\n  const ref = useRef<HTMLUListElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, rootKey, ref, containerRef);\n  const { submenuProps } = useSubmenu(\n    { rootKey, parentState, keyboardDelegate },\n    state,\n    ref\n  );\n\n  return (\n    <StyledSpeedSearchMenu\n      {...speedSearchContainerProps}\n      as=\"div\"\n      ref={containerRef}\n    >\n      <SpeedSearchMenuContent\n        items={[...(rootItem?.childNodes || [])]}\n        speedSearch={speedSearch}\n        searchPopupProps={searchPopupProps}\n        state={state}\n        menuProps={submenuProps}\n        menuRef={ref}\n        emptyText={emptyText}\n      />\n    </StyledSpeedSearchMenu>\n  );\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ isActive }) => isActive && highlightedStyle};\n  ${({ isDisabled }) => isDisabled && disabledStyle};\n\n  padding-right: 1.25rem;\n  line-height: 1.3125rem; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuOptions, useMenu } from \"@react-aria/menu\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport {\n  MenuKeyboardDelegate,\n  useSubmenu as useSubmenuAria,\n} from \"./_useSubmenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuContext } from \"./Menu\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport function useSubmenu<T>(\n  {\n    rootKey,\n    parentState,\n    keyboardDelegate,\n  }: { rootKey: React.Key; parentState: TreeState<T> } & Pick<\n    AriaMenuOptions<T>,\n    \"keyboardDelegate\"\n  >,\n  state: TreeState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const rootItem = state.collection.getItem(rootKey);\n  const {\n    submenuBehavior,\n    autoFocus = true,\n    onClose,\n    onAction,\n  } = useContext(MenuContext);\n  let { menuProps } = useMenu(\n    {\n      \"aria-label\": rootItem?.[\"aria-label\"] || rootItem?.textValue,\n      onAction,\n      onClose,\n      selectedKeys: state.selectionManager.selectedKeys,\n      keyboardDelegate:\n        keyboardDelegate ||\n        new MenuKeyboardDelegate(\n          rootKey,\n          state.collection,\n          state.disabledKeys,\n          ref\n        ),\n      autoFocus,\n    },\n    state,\n    ref\n  );\n  const { submenuProps } = useSubmenuAria({ rootKey }, parentState, ref);\n\n  const submenuBehaviorProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        // Close the menu and submenu root node.\n        state.toggleKey(rootKey);\n        state.selectionManager.setFocusedKey(rootKey);\n        parentState.selectionManager.setFocused(true);\n        if (submenuBehavior !== \"default\") {\n          e.stopPropagation();\n        }\n        return;\n      }\n    },\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n      // it sets the focus key, which will move focus to that item.\n      // noinspection PointlessBooleanExpressionJS seems to be false positive. autoFocus can be \"first\" or \"last\"\n      if (autoFocus === true) {\n        ref.current?.focus();\n      }\n    });\n  }, []);\n\n  return {\n    submenuProps: mergeProps(menuProps, submenuProps, submenuBehaviorProps),\n  };\n}\n\nexport interface SubmenuProps<T> {\n  parentState: TreeState<T>;\n  rootKey: React.Key;\n}\n\nexport function Submenu<T>({ parentState, rootKey }: SubmenuProps<T>) {\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const { submenuProps } = useSubmenu({ rootKey, parentState }, state, ref);\n\n  return (\n    <StyledMenu {...submenuProps} ref={ref}>\n      {renderMenuNodes(state, [...(rootItem?.childNodes || [])])}\n    </StyledMenu>\n  );\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport React, { Key, RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\n\nexport class MenuKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  private keys: React.Key[];\n  constructor(\n    rootKey: Key | null,\n    private collection: Collection<Node<T>>,\n    disabledKeys: Set<React.Key>,\n    ref: React.RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n    this.keys = [...collection.getKeys()]\n      .map((key) => collection.getItem(key))\n      .flatMap((item) => {\n        if (item && item.parentKey == rootKey) {\n          if (item.type === \"item\") {\n            return [item.key];\n          } else if (item.type === \"section\") {\n            return [...item.childNodes].map(({ key }) => key);\n          }\n        }\n        return [];\n      });\n  }\n\n  getFirstKey(): React.Key {\n    return this.keys[0];\n  }\n  getLastKey(): React.Key {\n    return this.keys.slice(-1)[0];\n  }\n\n  getKeyBelow(key: React.Key): React.Key {\n    const keyBelow = super.getKeyBelow(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyBelow) ? keyBelow : null;\n  }\n  getKeyAbove(key: React.Key): React.Key {\n    const keyAbove = super.getKeyAbove(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyAbove) ? keyAbove : null;\n  }\n}\n\n/**\n * Behavior accessibility of submenus:\n * - Closing submenu on ArrowLeft key press.\n *   Note that it can't be implemented in useMenuItem, because the focus might be on no the submenu itself and not any\n *   of its items\n * @param rootKey: Key of the root node, the submenu is created from its children\n * @param state\n * @param ref\n */\nexport function useSubmenu<T>(\n  { rootKey }: { rootKey: Key },\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { keyboardProps: submenuProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Keyboard events bubble through portals. Don't handle keyboard events\n      // for elements outside the collection (e.g. menus).\n      if (!ref.current?.contains(e.target as Element)) {\n        e.continuePropagation();\n        return;\n      }\n      const root = state.collection.getItem(rootKey);\n      if (e.key === \"ArrowLeft\" && root && state.expandedKeys.has(root.key)) {\n        state.toggleKey(root.key);\n        state.selectionManager.setFocused(true);\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return {\n    submenuProps,\n  };\n}\n","import { TreeState } from \"@react-stately/tree\";\nimport { Key, useRef, useState } from \"react\";\nimport {\n  MultipleSelectionState,\n  SelectionManager,\n} from \"@react-stately/selection\";\n\n/**\n * Creates a TreeState corresponding to the submenu, from the state of a parent (sub)menu.\n * The collection and everything is the same, and the only difference from the parent state is selection manager\n * having a separate focused state to keep the focused state of each menu container separately, as the submenus\n * are usually rendered in separate overlays.\n */\nexport function useSubmenuState<T>(parentState: TreeState<T>) {\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a re-render. So, we have both a ref (sync) and state (async).\n  const [, setFocused] = useState(false);\n  const [, setFocusedKey] = useState<Key | null>(null);\n  const isFocusedRef = useRef(false);\n  const focusedKeyRef = useRef<Key | null>(null);\n\n  const state: MultipleSelectionState = {\n    // @ts-expect-error state is private\n    ...parentState.selectionManager.state,\n    setFocused: (isFocused: boolean) => {\n      isFocusedRef.current = isFocused;\n      setFocused(isFocused);\n    },\n    setFocusedKey(key: Key) {\n      focusedKeyRef.current = key;\n      setFocusedKey(key);\n    },\n  };\n  Object.defineProperties(state, {\n    isFocused: {\n      get() {\n        return isFocusedRef.current;\n      },\n    },\n    focusedKey: {\n      get() {\n        return focusedKeyRef.current!;\n      },\n    },\n  });\n\n  return {\n    ...parentState,\n    selectionManager: new SelectionManager(parentState.collection, state),\n  };\n}\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.div`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\"; // private import\n\nimport { MenuItem } from \"./MenuItem\";\nimport { MenuSection } from \"./MenuSection\";\n\nexport function renderMenuNodes<T>(\n  state: TreeState<T>,\n  nodes: Node<T>[],\n  filter: (node: Node<T>) => boolean = () => true\n) {\n  return nodes.filter(filter).map((node) => {\n    switch (node.type) {\n      case \"item\":\n        return <MenuItem key={node.key} item={node} state={state} />;\n      case \"section\":\n        return (\n          <>\n            {node.props.hasDivider && (\n              <ListDivider key={node.key + \"-divider\"} />\n            )}\n            <MenuSection\n              key={node.key}\n              item={node}\n              state={state}\n              filter={filter}\n            />\n          </>\n        );\n      case \"divider\":\n        return <ListDivider key={node.key} />;\n    }\n  });\n}\n","import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\n\nexport interface MnemonicProps {\n  children: React.ReactNode;\n  /**\n   * Character to be used as {@link https://jetbrains.design/intellij/principles/mnemonics/ mnemonic}.\n   */\n  mnemonic: string;\n  /**\n   * Called when mnemonic key is pressed with the activator key\n   */\n  onTriggered?: () => void;\n\n  /**\n   * Whether the mnemonic is disabled. Useful when setting mnemonic on disable-able components, to just pass\n   * isDisabled prop down to MnemonicTrigger\n   */\n  isDisabled?: boolean;\n}\n\nconst MnemonicContext = createContext<{\n  character: string | null;\n  rendered: () => void;\n  /**\n   * Called when mnemonic is found in the text of the trigger component and rendered underlined, so the user\n   * can have a chance to know how to trigger the component's action via mnemonic.\n   */\n  active: boolean;\n}>({ character: null, active: false, rendered: () => {} });\n\nexport const MnemonicTrigger = ({\n  children,\n  mnemonic,\n  isDisabled,\n  onTriggered: onTriggeredProp = () => {},\n}: MnemonicProps): JSX.Element => {\n  const ref = useRef<HTMLElement>(null);\n  const onTriggered = useEventCallback(onTriggeredProp);\n  const [active, setActive] = useState(false);\n  const keydownListener = useEventCallback((e: KeyboardEvent) => {\n    if (isDisabled) {\n      return;\n    }\n    if (active && !e.repeat) {\n      const character = e.code.match(/Key([A-Z])/)?.[1];\n      if (character && character.toLowerCase() === mnemonic.toLowerCase()) {\n        onTriggered();\n      }\n    }\n    if (e.key === \"Alt\" && ref.current && isAccessible(ref.current)) {\n      setActive(true);\n    }\n  });\n\n  useEffect(() => {\n    // calling addEventListener with already registered listener is no-op.\n    document.addEventListener(\"keydown\", keydownListener);\n    document.addEventListener(\"keyup\", keyupListener);\n    window.addEventListener(\"blur\", onBlur);\n    function onBlur() {\n      setActive(false);\n    }\n    function keyupListener(e: KeyboardEvent) {\n      if (e.key === \"Alt\") {\n        setActive(false);\n      }\n    }\n    return () => {\n      document.removeEventListener(\"keydown\", keydownListener);\n      document.removeEventListener(\"keyup\", keyupListener);\n      window.removeEventListener(\"blur\", onBlur);\n    };\n  }, []);\n\n  const renderedMnemonicRef = useRef<string>(\"\");\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      if (renderedMnemonicRef.current !== mnemonic) {\n        console.warn(\n          `Mnemonic ${mnemonic} was set but not rendered to the user. \nMake sure the specified character is rendered directly in MnemonicTrigger, or wrapped by MnemonicText inside MnemonicTrigger children. \nElement:`,\n          ref.current?.parentElement\n        );\n      }\n    });\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [mnemonic]);\n  return (\n    <MnemonicContext.Provider\n      value={{\n        character: mnemonic,\n        active,\n        rendered: () => {\n          renderedMnemonicRef.current = mnemonic;\n        },\n      }}\n    >\n      <span hidden ref={ref} />\n      {typeof children === \"string\" ? (\n        <MnemonicText>{children}</MnemonicText>\n      ) : (\n        children\n      )}\n    </MnemonicContext.Provider>\n  );\n};\n\n/**\n * Checks if a\n * See more in ./design-decisions.md\n */\nfunction isAccessible(element: Element): boolean {\n  return (\n    !element.closest(\"[aria-hidden]\") &&\n    element.parentElement !== null &&\n    isVisible(element.parentElement)\n  );\n}\nfunction isVisible(e: HTMLElement) {\n  return !!(e.offsetWidth || e.offsetHeight || e.getClientRects().length);\n}\n/**\n * Used inside MnemonicTrigger children, when the direct child can't be a string.\n * @example\n * ```tsx\n * <MnemonicTrigger mnemonic=\"D\">\n *    <>\n *      <MnemonicText>Disconnect</MnemonicText>\n *    </>\n * </MnemonicTrigger>\n * ```\n */\nexport function MnemonicText({ children }: { children: string }) {\n  const { character, active, rendered } = useContext(MnemonicContext);\n  if (character) {\n    const index = children.toLowerCase().indexOf(character.toLowerCase());\n    const found = index > -1;\n    if (found) {\n      rendered();\n    }\n    if (found && active) {\n      return (\n        <>\n          {children.slice(0, index)}\n          <u>{children.slice(index, index + 1)}</u>\n          {children.slice(index + 1)}\n        </>\n      );\n    }\n  }\n  return <>{children}</>;\n}\n","import { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport React, { useEffect } from \"react\";\n\n/**\n * A workaround for an issue in measuring overlay size, caused by a limitation/bug in how React 17 runs effects when\n * children suspend rendering: https://github.com/facebook/react/issues/21510\n *\n * Here is a simplified demonstration of the issue:\n * Expected behavior (React 18): https://codesandbox.io/s/parent-effects-suspense-v18-38m8p7?file=/src/App.tsx\n * Broken behavior (React 17): https://codesandbox.io/s/parent-effects-suspense-v17-h39g4g\n *\n * The overlay content size measuring runs in an effect, and that effect won't run when the content is rendered after\n * suspense.\n */\nexport function UNSAFE_React17SuspenseFix({\n  measureContentSize,\n  children,\n}: {\n  measureContentSize: () => void;\n  children: React.ReactNode;\n}) {\n  if (React.version.startsWith(\"17\")) {\n    return (\n      <React.Suspense\n        fallback={\n          <NullSuspenseFallback afterUnsuspended={measureContentSize} />\n        }\n      >\n        {children}\n      </React.Suspense>\n    );\n  }\n  return <>{children}</>;\n}\n\nfunction NullSuspenseFallback({\n  afterSuspended: afterSuspendedProp = () => {},\n  afterUnsuspended: afterUnsuspendedProp = () => {},\n}: {\n  afterUnsuspended?: () => void;\n  afterSuspended?: () => void;\n}) {\n  const afterSuspended = useEventCallback(afterSuspendedProp);\n  const afterUnsuspended = useEventCallback(afterUnsuspendedProp);\n  useEffect(() => {\n    afterSuspended?.();\n    return () => {\n      afterUnsuspended?.();\n    };\n  }, []);\n  return null;\n}\n","import React, { FocusEventHandler, useContext, useRef } from \"react\";\nimport { useOverlayTriggerState } from \"@react-stately/overlays\";\nimport { useModalOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { focusSafely, FocusScope } from \"@react-aria/focus\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { AriaDialogProps } from \"@react-types/dialog\"; // temporary phantom dependency\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { WindowContext } from \"@intellij-platform/core/ModalWindow/WindowContext\";\nimport { UNSAFE_React17SuspenseFix } from \"@intellij-platform/core/Overlay/UNSAFE_React17SuspenseFix\";\n\nexport interface ModalWindowProps\n  extends AriaDialogProps,\n    ResizableMovableOverlayOptions {\n  children: React.ReactNode;\n  className?: string;\n  onClose?: () => void;\n}\n\nconst StyledWindowUnderlay = styled.div`\n  position: fixed;\n  z-index: 1000; // FIXME: z-index should not be hard-coded like this\n  inset: 0;\n`;\n\nexport const StyledWindowContainer = styled.div`\n  position: fixed;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  border-radius: 8px;\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n  outline: 1px solid #555; // FIXME\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledWindowInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DEFAULT_WINDOW_MIN_WIDTH = 50;\nexport const DEFAULT_WINDOW_MIN_HEIGHT = 24;\n\nexport const WindowControllerContext = React.createContext<\n  Partial<Pick<ModalWindowProps, \"onClose\">>\n>({});\n\n/**\n * A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\n * In the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\n * are not relevant here since they wouldn't be os-native windows. A close button is still relevant (and kind of\n * necessary) and will be added in next iterations.\n *\n * The content container doesn't come with any padding. Other related components should be used for common layouts in\n * modal windows.\n * Example use cases: Window for git operations such as push, update, revert, new branch, etc.\n *\n * ![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n *\n * NOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\n * overlay container could be extracted into a component which is then used to create custom resizable/movable overlay\n * dialogs, like \"Branches\", or \"Search Everywhere\".\n *\n * TODO: show close button (maybe os-aware styles?)\n *\n */\nexport const ModalWindow = ({\n  interactions = \"all\",\n  minWidth = DEFAULT_WINDOW_MIN_WIDTH,\n  minHeight = DEFAULT_WINDOW_MIN_HEIGHT,\n  className,\n  ...props\n}: ModalWindowProps): React.ReactElement => {\n  const { children } = props;\n  const propsContext = useContext(WindowControllerContext);\n  const onClose = () => {\n    propsContext.onClose?.();\n    props.onClose?.();\n  };\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { modalProps, underlayProps } = useModalOverlay(\n    {\n      isDismissable: false,\n      isKeyboardDismissDisabled: false,\n    },\n    // useModalOverlay doesn't really need the full `OverlayTriggerState` interface.\n    // It only requires `isOpen` and `close`.\n    // However, it's currently typed like this, so useOverlayTriggerState is used,\n    // just to comply with the required type, and in the unlikely case where a future minor version starts to use\n    // other properties from `OverlayTriggerState`\n    useOverlayTriggerState({\n      isOpen: true,\n      onOpenChange: (isOpen) => {\n        if (!isOpen) {\n          onClose();\n        }\n      },\n    }),\n    ref\n  );\n  usePreventScroll();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  const {\n    bounds: style,\n    overlayInteractionHandlerProps,\n    UNSAFE_measureContentSize,\n  } = useResizableMovableOverlay(ref, { ...props, minHeight, minWidth });\n\n  const { focusContainmentFixProps } = useFocusContainmentFix();\n\n  return (\n    <StyledWindowUnderlay {...underlayProps} className={className}>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        <FocusScope contain restoreFocus autoFocus>\n          <StyledWindowContainer\n            {...mergeProps(dialogProps, modalProps, focusContainmentFixProps, {\n              style,\n            })}\n            ref={ref}\n          >\n            <StyledWindowInnerContainer>\n              <WindowContext.Provider\n                value={{\n                  isActive: true, // because it's modal. WindowContext would be used for non-modal windows too, in future\n                  titleProps,\n                  movable: interactions !== \"none\",\n                }}\n              >\n                <UNSAFE_React17SuspenseFix\n                  measureContentSize={UNSAFE_measureContentSize}\n                >\n                  {children}\n                </UNSAFE_React17SuspenseFix>\n              </WindowContext.Provider>\n            </StyledWindowInnerContainer>\n            {interactions === \"all\" && <OverlayResizeHandles />}\n          </StyledWindowContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </StyledWindowUnderlay>\n  );\n};\n\n/**\n * The way FocusScope is implemented at the moment, it's possible for another focus scope to steal the focus,\n * right after the modal window is opened. The issue is not tracked down to the root cause. But with this hook,\n * we make sure there is no way for focus to go out of the modal window, when it's mounted.\n */\nfunction useFocusContainmentFix<T extends HTMLElement>() {\n  const lastFocusedElementRef = useRef<HTMLElement | null>(null);\n  const onFocus: FocusEventHandler<T> = (e) => {\n    lastFocusedElementRef.current = e.target;\n  };\n  const onBlur: FocusEventHandler = (e) => {\n    const probablyFocusedElement = e.relatedTarget;\n    if (\n      !probablyFocusedElement ||\n      (probablyFocusedElement instanceof Element &&\n        !e.currentTarget.contains(probablyFocusedElement))\n    ) {\n      const elementToFocus = lastFocusedElementRef.current;\n      if (elementToFocus) {\n        focusSafely(elementToFocus);\n      }\n    }\n  };\n  return {\n    focusContainmentFixProps: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n","import React from \"react\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nexport const WindowContext = React.createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { ButtonGroup } from \"@intellij-platform/core/ButtonGroup\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nexport function WindowFooter({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer.\n   * {@link Button}s are usually used inside the right content.\n   * A {@link ButtonGroup} is rendered around the content to allow for keyboard navigation with arrow keys.\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>\n        <ButtonGroup>{right}</ButtonGroup>\n      </StyledFooterSide>\n    </StyledFooter>\n  );\n}\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { WindowContext } from \"./WindowContext\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 24px; // Double check\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\n/**\n * Implements appearance of Window header, and also acts as a handle for moving the window.\n * Expected to be used with {@link WindowLayout}:\n *\n * @example\n * ```tsx\n * <ModalWindow>\n *    <WindowLayout header={<WindowHeader>header</WindowHeader>} />\n * </ModalWindow>\n * ```\n */\nexport const WindowHeader = ({ children }: { children?: React.ReactNode }) => {\n  const { movable, titleProps } = useContext(WindowContext);\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {children || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderTitle()\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { WindowHeader } from \"./WindowHeader\";\nimport { WindowFooter } from \"@intellij-platform/core/ModalWindow/WindowFooter\";\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\n/**\n * Window content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function WindowLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the window at the top. Use {@link WindowLayout.Header} for the default window header,\n   * which also acts as a move handle for the window. If a string is passed, it will be wrapped by\n   * {@link WindowLayout.Header} automatically.\n   */\n  header: React.ReactNode;\n  /**\n   * Scrollable content of the window.\n   */\n  content: React.ReactNode;\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `content`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <>\n      {header &&\n        (typeof header === \"string\" ? (\n          <WindowHeader>{header}</WindowHeader>\n        ) : (\n          header\n        ))}\n      <StyledWindowContentWrapper>{content}</StyledWindowContentWrapper>\n      {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n    </>\n  );\n}\n\n// Just for improved discoverability. Might as well export WindowFooter and WindowHeader instead.\nWindowLayout.Footer = WindowFooter;\nWindowLayout.Header = WindowHeader;\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ModalWindow,\n  ModalWindowProps,\n  WindowControllerContext,\n} from \"./ModalWindow\";\n\nexport interface WindowManagerAPI {\n  /**\n   * Shows a modal window within the stack of windows managed by {@link WindowManager}.\n   * The opened windows will be closed when `onClose` interactions happen.\n   * Returns a Promise which is resolved when the modal window is closed.\n   *\n   * Modal window element, or a function that returns the modal window element can\n   * be passed.\n   * If a function is passed, it will receive a close function in its object argument,\n   * which can be used to resolve the returned promise with.\n   *\n   * @example\n   *\n   * ```\n   * const windowManager = useWindowManager();\n   *\n   * const showWindow = () => {\n   *   windowManager\n   *     .open<boolean>(({ close }) => (\n   *       <ModalWindow>\n   *         <WindowLayout\n   *           header=\"...\"\n   *           content={<>...</>}\n   *           footer={\n   *             <WindowLayout.Footer\n   *               right={\n   *                 <>\n   *                   <Button onPress={close}>Cancel</Button>\n   *                   <Button onPress={() => close(true)}>Ok</Button>\n   *                 </>\n   *               }\n   *             />\n   *           }\n   *         />\n   *       </ModalWindow>\n   *     ))\n   *     .then((confirmed) => alert(`confirmed: ${confirmed ?? false}`));\n   * };\n   * ```\n   */\n  open<T>(\n    props:\n      | React.ReactElement<ModalWindowProps, typeof ModalWindow>\n      | ((args: {\n          close: (result?: T) => void;\n        }) => React.ReactElement<ModalWindowProps, typeof ModalWindow>)\n  ): Promise<T | undefined>;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"WindowManager not found. Wrap your application with WindowManager to be able to open windows imperatively\"\n  );\n};\n\nconst WindowsContext = React.createContext<WindowManagerAPI>({\n  open: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing windows.\n *\n */\nexport const useWindowManager = (): WindowManagerAPI =>\n  useContext(WindowsContext);\n\ntype WindowElement = ReactElement<ModalWindowProps, typeof ModalWindow>;\n\nexport interface WindowManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link useWindowManager}) for opening windows.\n * It renders windows in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n */\nexport const WindowManager: React.FC<WindowManagerProps> = ({ children }) => {\n  const [windows, setWindows] = useState<Array<WindowElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<WindowManagerAPI>(() => {\n    return {\n      open: function <T>(content: Parameters<WindowManagerAPI[\"open\"]>[0]) {\n        return new Promise<T | undefined>((resolve) => {\n          newKeyRef.current++;\n          const close = (result?: T) => {\n            setWindows((currentWindows) =>\n              currentWindows.filter((aWindow) => aWindow !== window)\n            );\n            // Make sure (?) to resolve the promise after the dialog is closed,\n            // for the focus to be restored to the previous element before the\n            // potential further actions take place.\n            requestAnimationFrame(() => {\n              resolve(result);\n            });\n          };\n          const window = (\n            <WindowControllerContext.Provider\n              value={{\n                onClose: () => {\n                  close();\n                },\n              }}\n              key={newKeyRef.current}\n            >\n              {typeof content === \"function\"\n                ? // @ts-expect-error close signature is not correctly inferred\n                  content({ close })\n                : content}\n            </WindowControllerContext.Provider>\n          );\n          setWindows((currentWindows) => currentWindows.concat(window));\n        });\n      },\n    };\n  }, []);\n\n  return (\n    <WindowsContext.Provider value={api}>\n      {children}\n      {windows}\n    </WindowsContext.Provider>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { Overlay as AriaOverlay, OverlayProps } from \"@react-aria/overlays\";\n\nconst ParentOverlayContext = React.createContext<HTMLElement | null>(null);\n\n/**\n * A (drop-in replacement) wrapper around Overlay, which makes sure overlays created in nested\n * react components will be ported to the same top level container. This is especially useful to detect\n * \"outside clicks\" when overlays are nested. The most common example would be nested menu in popup.\n *\n */\nexport function Overlay({\n  children,\n  OverlayComponent = AriaOverlay,\n}: {\n  children: React.ReactNode;\n  OverlayComponent?: React.ComponentType<OverlayProps>;\n}) {\n  const root = useContext(ParentOverlayContext);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  if (root) {\n    return (\n      <OverlayComponent portalContainer={root}>{children}</OverlayComponent>\n    );\n  }\n  return (\n    <ParentOverlayContext.Provider value={containerRef.current}>\n      <OverlayComponent>\n        <div ref={containerRef} data-overlay-root=\"\">\n          {children}\n        </div>\n      </OverlayComponent>\n    </ParentOverlayContext.Provider>\n  );\n}\n\n/**\n * Returns true, if element1 and element2 are in nested overlays. \"Nested\" being in terms of React component tree.\n * Useful for detecting \"outside click\" when overlay components are nested in each other.\n */\nexport function areInNestedOverlays(\n  element1: Element | null,\n  element2: Element | null\n) {\n  const overlayRoot1 = element1?.closest(\"[data-overlay-root]\");\n  const overlayRoot2 = element2?.closest(\"[data-overlay-root]\");\n  return Boolean(overlayRoot1) && overlayRoot1 === overlayRoot2;\n}\n","import React, { useContext } from \"react\";\n\nexport type Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * TODO(docs): add a few words about this abstraction and it's use.\n */\nexport type OverlayInteractionHandlerProps = {\n  /**\n   * Signals start of a UI interaction like resize or move, in which overlay bounds change.\n   */\n  startInteraction: (type: \"move\" | \"resize\") => Bounds;\n  /**\n   * Used to update bounds state during a UI interaction.\n   */\n  updateBounds: (bounds: Bounds) => void;\n  /**\n   * Signals end of a UI interaction.\n   */\n  finishInteraction: () => void;\n\n  minWidth?: number;\n  minHeight?: number;\n};\n\nconst OverlayInteractionHandlerContext =\n  React.createContext<OverlayInteractionHandlerProps | null>(null);\n\n/**\n * Provides the context used by components like {@link OverlayMoveHandle} and {@link OverlayResizeHandles} that provide\n * user interactions that change the boundary of the overlay they are rendered in.\n * Use {@link useResizableMovableOverlay} which implements an efficient state management for overlay bounds and returns\n * props to be passed to `OverlayInteractionHandler`:\n *\n * @example\n *\n * const {\n *    bounds, // Bounds to be applied to the overlay element.\n *    overlayInteractionHandlerProps,\n *  } = useResizableMovableOverlay(props);\n *\n * return (\n *   <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n *     <div style={bounds}>...</div>\n *   </OverlayInteractionHandler>\n * );\n *\n * @see useResizableMovableOverlay\n */\nexport const OverlayInteractionHandler = ({\n  children,\n  ...props\n}: OverlayInteractionHandlerProps & { children: React.ReactNode }) => {\n  return (\n    <OverlayInteractionHandlerContext.Provider value={props}>\n      {children}\n    </OverlayInteractionHandlerContext.Provider>\n  );\n};\n\nexport const useOverlayInteractionHandler = () =>\n  useContext(OverlayInteractionHandlerContext);\n","import { useMove, UseMoveOptions } from \"../utils/interaction-utils/useMove\";\nimport { useOverlayInteractionHandler } from \"./OverlayInteractionHandler\";\nimport React from \"react\";\n\nexport type UseOverlayMoveHandleOptions = Omit<\n  UseMoveOptions<unknown>,\n  \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n>;\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}, and returns props to be applied on a dom element to\n * make it a move handle for the overlay it's being rendered in.\n *\n * @see OverlayMoveHandle\n */\nexport function useOverlayMoveHandle(options?: UseOverlayMoveHandleOptions) {\n  const interactionHandler = useOverlayInteractionHandler();\n  if (!interactionHandler) {\n    return { moveHandleProps: {} };\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const moveProps = useMove({\n    ...options,\n    onMoveStart: () => {\n      return startInteraction(\"move\");\n    },\n    onMove: ({ startState, movement }) => {\n      updateBounds({\n        ...startState,\n        top: startState.top + movement.y,\n        left: startState.left + movement.x,\n      });\n    },\n    onMoveEnd: () => {\n      finishInteraction();\n    },\n  });\n  return { moveHandleProps: moveProps || {} };\n}\n\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}. A render function is expected as `children`. It's\n * passed the event handlers that need to be applied on a dom element to make it a move handle for the overlay it's\n * being rendered in.\n */\nexport const OverlayMoveHandle = ({\n  children,\n  ...props\n}: {\n  children: (\n    props: ReturnType<typeof useOverlayMoveHandle>\n  ) => React.ReactElement;\n} & UseOverlayMoveHandleOptions) => {\n  return children(useOverlayMoveHandle(props));\n};\n","import React, { useRef } from \"react\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport {\n  HorizontalResizerProps,\n  VerticalResizerProps,\n} from \"../Resizer/ResizerProps\";\nimport {\n  Bounds,\n  useOverlayInteractionHandler,\n} from \"./OverlayInteractionHandler\";\n\ntype OverlayResizeHandlesProps = {\n  minWidth?: number;\n  minHeight?: number;\n};\n\n/**\n * Renders invisible resize handles at the edges of the overlay it's rendered in. It uses the context provided by\n * {@link OverlayInteractionHandler} to resize the overlay when the handles are used.\n */\nexport function OverlayResizeHandles(props: OverlayResizeHandlesProps) {\n  const overlayResizer = useOverlayResizer(props);\n  return (\n    overlayResizer && (\n      <>\n        <RightResizer {...overlayResizer.getResizerProps(\"right\")} />\n        <LeftResizer {...overlayResizer.getResizerProps(\"left\")} />\n        <TopResizer {...overlayResizer.getResizerProps(\"top\")} />\n        <BottomResizer {...overlayResizer.getResizerProps(\"bottom\")} />\n      </>\n    )\n  );\n}\n\n/**\n * overlay resizing logic and state. When resizing is in progress, the source of truth is a local state, for performance\n * reasons. When the resize is done (e.g. by mouse being released), `onBoundsChange` is called with the new bounds.\n */\nfunction useOverlayResizer(props: OverlayResizeHandlesProps = {}) {\n  const initialBoundsRef = useRef<Bounds>({\n    top: 0,\n    height: 0,\n    width: 0,\n    left: 0,\n  });\n  const interactionHandler = useOverlayInteractionHandler();\n  const {\n    minWidth = interactionHandler?.minWidth ?? 1,\n    minHeight = interactionHandler?.minHeight ?? 1,\n  } = props;\n  if (!interactionHandler) {\n    return null;\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const onResize = {\n    right: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        width: Math.max(minWidth, initialBoundsRef.current.width + size),\n      }),\n    bottom: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        height: Math.max(minHeight, initialBoundsRef.current.height + size),\n      }),\n    left: (size: number) => {\n      const newWidth = Math.max(\n        minWidth,\n        initialBoundsRef.current.width + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        left: initialBounds.left + initialBounds.width - newWidth,\n        width: newWidth,\n      });\n    },\n    top: (size: number) => {\n      const newHeight = Math.max(\n        minHeight,\n        initialBoundsRef.current.height + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        top: initialBounds.top + initialBounds.height - newHeight,\n        height: newHeight,\n      });\n    },\n  };\n\n  function getResizerProps(side: \"left\" | \"right\"): HorizontalResizerProps;\n  function getResizerProps(side: \"top\" | \"bottom\"): VerticalResizerProps;\n  function getResizerProps(\n    side: \"left\" | \"right\" | \"top\" | \"bottom\"\n  ): HorizontalResizerProps | VerticalResizerProps {\n    const horizontal = side === \"left\" || side === \"right\";\n    return {\n      size: 1,\n      cursor: horizontal ? \"ew\" : \"ns\",\n      onResizeStarted: () => {\n        initialBoundsRef.current = startInteraction(\"resize\");\n      },\n      onResize: onResize[side],\n      onResizeEnd: finishInteraction,\n      style: { position: \"absolute\", [side]: 0 },\n    };\n  }\n\n  return {\n    getResizerProps,\n  };\n}\n","import React, { ForwardedRef } from \"react\";\nimport {\n  AriaPopoverProps,\n  DismissButton,\n  Overlay,\n  usePopover,\n} from \"@react-aria/overlays\";\nimport { OverlayTriggerState } from \"@react-stately/overlays\";\n\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\n\nimport { styled } from \"../styled\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport interface PopoverProps extends Omit<AriaPopoverProps, \"popoverRef\"> {\n  children: React.ReactNode;\n  state: OverlayTriggerState;\n}\n\nconst StyledPopover = styled.div`\n  box-sizing: border-box;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  outline: none; // Focus will be reflected in header. No need for outline or any other focus style on the container\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n`;\nexport const Popover = React.forwardRef(function Popover(\n  { children, state, offset = 8, ...props }: PopoverProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const popoverRef = useObjectRef(forwardedRef);\n  const { popoverProps } = usePopover(\n    {\n      ...props,\n      offset,\n      popoverRef,\n    },\n    state\n  );\n\n  return (\n    <Overlay>\n      {/* Rendering underlay doesn't seem necessary based on the reference impl */}\n      <StyledPopover {...popoverProps} ref={popoverRef}>\n        <DismissButton onDismiss={state.close} />\n        {children}\n        <DismissButton onDismiss={state.close} />\n      </StyledPopover>\n    </Overlay>\n  );\n});\n","import { Bounds } from \"@intellij-platform/core/Overlay/OverlayInteractionHandler\";\nimport { clamp } from \"ramda\";\nimport { ResizableMovableOverlayOptions } from \"@intellij-platform/core/Overlay/useResizableMovableOverlay\";\n\nexport const withMinSize =\n  ({ width: minWidth, height: minHeight }: { width: number; height: number }) =>\n  (bounds: Bounds) => {\n    const width = Math.max(minWidth, bounds.width);\n    const height = Math.max(minHeight, bounds.height);\n    if (bounds.width != width || bounds.height != height) {\n      return { ...bounds, width, height };\n    }\n    return bounds;\n  };\n\nexport function getCenteredBounds(width: number, height: number): Bounds {\n  return {\n    left: (window.innerWidth - width) / 2,\n    top: (window.innerHeight - height) / 2,\n    width,\n    height,\n  };\n}\n\n/**\n * A helper function to create interaction interceptor which ensures bounds are contained within a container.\n *\n * @example\n * const ensureInViewPort = containedWithin({left: 0, top: 0, width: window.innerWidth, height: window.innerHeight})\n *\n * useResizableMovableOverlay({ onBoundsChanging: ensureInViewPort});\n */\nexport const containedWithin =\n  (\n    containerBounds: Bounds\n  ): ResizableMovableOverlayOptions[\"onBoundsChanging\"] =>\n  (bounds, interactionType) => {\n    if (interactionType === \"move\") {\n      const left = clamp(\n        containerBounds.left,\n        containerBounds.left + containerBounds.width - bounds.width,\n        bounds.left\n      );\n      const top = clamp(\n        containerBounds.top,\n        containerBounds.top + containerBounds.height - bounds.height,\n        bounds.top\n      );\n      return {\n        ...bounds,\n        left,\n        top,\n      };\n    } else if (interactionType === \"resize\") {\n      const left = Math.max(containerBounds.left, bounds.left);\n      const top = Math.max(containerBounds.top, bounds.top);\n      // the logic here seems unnecessarily complicated\n      return {\n        left,\n        top,\n        width:\n          bounds.width -\n          Math.max(\n            0,\n            bounds.left +\n              bounds.width -\n              (containerBounds.left + containerBounds.width)\n          ) -\n          (left - bounds.left),\n        height:\n          bounds.height -\n          Math.max(\n            0,\n            bounds.top +\n              bounds.height -\n              (containerBounds.top + containerBounds.height)\n          ) -\n          (top - bounds.top),\n      };\n    }\n    return bounds;\n  };\nexport const position =\n  ({\n    targetElement,\n    placement = \"bottom\",\n  }: {\n    placement?: \"bottom\" | \"top\";\n    targetElement: HTMLElement;\n  }) =>\n  ({ height, width }: Bounds): Bounds => {\n    const targetBounds = targetElement.getBoundingClientRect();\n    return {\n      left: targetBounds.left,\n      top:\n        placement === \"bottom\"\n          ? targetBounds.top + targetBounds.height\n          : targetBounds.top - height,\n      width,\n      height,\n    };\n  };\n\nexport function ensureInViewport(\n  bounds: Bounds,\n  { gap = 0 }: { gap?: number } = {}\n): Bounds {\n  const viewportWidth = window.innerWidth - gap;\n  const viewportHeight = window.innerHeight - gap;\n  const left = clamp(gap, viewportWidth - bounds.width, bounds.left);\n  const top = clamp(gap, viewportHeight - bounds.height, bounds.top);\n  if (left !== bounds.left || top !== bounds.top) {\n    return {\n      left,\n      top,\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n  return bounds;\n}\n","import { useCallback, useEffect, useLayoutEffect, useRef } from \"react\";\n\nexport const useDebouncedCallback = (\n  fn: () => void,\n  { timeout = 100 } = {}\n) => {\n  const fnRef = useRef(fn);\n  const currentTimeoutId = useRef<number | null>(null);\n  useLayoutEffect(() => {\n    fnRef.current = fn;\n  });\n  useEffect(() => {\n    return () => {\n      if (currentTimeoutId.current !== null) {\n        clearTimeout(currentTimeoutId.current);\n      }\n    };\n  }, []);\n  return useCallback(() => {\n    if (currentTimeoutId.current !== null) {\n      clearTimeout(currentTimeoutId.current);\n    }\n    currentTimeoutId.current = window.setTimeout(fnRef.current, timeout);\n  }, []);\n};\n","import { RefObject, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useDebouncedCallback } from \"@intellij-platform/core/utils/useDebounce\";\n\n/**\n * Clones the element, applies the temporary styles, and calls {@param fn} on the clone.\n * Previously, we applied the temporary styles on the element itself, run fn, and then revert to previous styles,\n * but that can mess with the scroll bar in the content. If there is a scrollable part in some nested element,\n * applying temporary style (in our case width: fit-content, height: fit-content) can cause scroll to jump which is not\n * restored after the style reversion. Now the approach is changed to apply the temporary styles on a temporary clone\n * of the element. It's certainly not as efficient and some optimization may be needed.\n * @param style: temporary styles to apply before fn is invoked, and revert after.\n * @param fn the function to compute something on the element with temporary styles\n */\nconst withTemporaryStyle =\n  <T extends any>(\n    style: Partial<CSSStyleDeclaration>,\n    fn: (element: HTMLElement) => T\n  ) =>\n  (element: HTMLElement): T => {\n    const clone = element.cloneNode(true) as HTMLElement;\n    clone.style.position = \"absolute\";\n    clone.style.left = \"-9999px\";\n    document.body.appendChild(clone);\n\n    Object.assign(clone.style, style);\n    const returnValue = fn(clone);\n\n    document.body.removeChild(clone);\n    return returnValue;\n  };\n\n/**\n * FIXME: withTemporaryStyle is not side-effect free and can cause scroll jumps. It creates awfully hard-to-debug\n *  issues.\n */\nexport const getContentSize = withTemporaryStyle(\n  {\n    width: \"\",\n    minWidth: \"fit-content\", // Shouldn't it be min-content? :-?\n    height: \"\",\n    minHeight: \"fit-content\",\n  },\n  (element) => ({\n    width: Math.ceil(parseFloat(getComputedStyle(element).width)),\n    height: Math.ceil(parseFloat(getComputedStyle(element).height)),\n  })\n);\n\nexport const useContentSize = (\n  ref: RefObject<HTMLElement>,\n  {\n    observe = false,\n  }: {\n    /**\n     * if false, the content size is measured only initially. If true, the dom changes are observed, and content size\n     * is updated accordingly.\n     * @default false\n     */\n    observe?: boolean;\n  } = {}\n) => {\n  const [measuredSizes, setMeasuredSizes] = useState<Size[]>([]);\n  useLayoutEffect(() => {\n    const element = ref.current;\n    if (!element || measuredSizes.length > 5) {\n      return;\n    }\n    const size = getContentSize(element);\n\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (!lastMeasuredSize || !Size.isEqual(lastMeasuredSize, size)) {\n      setMeasuredSizes([size]);\n    }\n    const id = window.requestAnimationFrame(() => {\n      const newSize = getContentSize(element);\n      if (!Size.isEqual(newSize, size)) {\n        setMeasuredSizes([...measuredSizes, newSize]);\n      }\n    });\n    return () => {\n      window.cancelAnimationFrame(id);\n    };\n  }, [\n    measuredSizes,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  const measure = () => {\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (ref.current && lastMeasuredSize) {\n      const currentSize = getContentSize(ref.current);\n      if (\n        currentSize.height !== lastMeasuredSize.height ||\n        currentSize.width !== lastMeasuredSize.width\n      ) {\n        setMeasuredSizes(\n          measuredSizes.map((aSize) =>\n            aSize === lastMeasuredSize ? currentSize : aSize\n          )\n        );\n      }\n    }\n  };\n  const debouncedMeasure = useDebouncedCallback(measure);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (observe && element) {\n      const mutationObserver = new MutationObserver(() => {\n        debouncedMeasure();\n      });\n      mutationObserver.observe(element, {\n        subtree: true,\n        childList: true,\n      });\n      return () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [\n    observe,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  return [measuredSizes.at(-1) || { width: 0, height: 0 }, measure] as const;\n};\n\ninterface Size {\n  width: number;\n  height: number;\n}\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const Size = {\n  isEqual: (\n    { width, height }: Size,\n    { width: width2, height: height2 }: { width: number; height: number }\n  ) => width === width2 && height === height2,\n};\n","import { RefObject, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  Bounds,\n  OverlayInteractionHandler,\n  OverlayInteractionHandlerProps,\n} from \"./OverlayInteractionHandler\";\nimport { clamp, filter } from \"ramda\";\nimport { useContentSize } from \"@intellij-platform/core/Overlay/useContentSize\";\nimport {\n  getCenteredBounds,\n  withMinSize,\n} from \"@intellij-platform/core/Overlay/bounds-helpers\";\n\n/**\n * Common props for resizable and movable overlays such as Windows or Popups.\n * There is currently no corresponding component/hook, and this is just a type helper.\n */\nexport interface ResizableMovableOverlayOptions {\n  onBoundsChange?: (bounds: Bounds, interactionType: \"move\" | \"resize\") => void;\n  /**\n   * For performance reason, overlay bounds is kept in a local state during a resize or move interaction, and\n   * `onBoundsChange` is called once at the end of interaction. `onBoundsChanging` gives a chance of rectifying\n   * bounds changes during an interaction to for example apply custom size/placement constraints.\n   */\n  onBoundsChanging?: (\n    newBounds: Bounds,\n    /**\n     * Whether the interaction is a \"move\" or \"resize\" considering the initial bounds when interaction was started.\n     */\n    interactionType: \"move\" | \"resize\"\n  ) => Bounds;\n  /**\n   * Controlled bounds. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `bounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  bounds?: Partial<Bounds>;\n  /**\n   * Default bounds in uncontrolled mode. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `defaultBounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  defaultBounds?: Partial<Bounds>;\n  minWidth?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n  minHeight?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n\n  /**\n   * Allowed interactions:\n   * - \"all\": both resizable and movable\n   * - \"move\": movable, but not resizable\n   * - \"none\": fixed size and position\n   * The reason there are no `resizable` and `movable` boolean props is that resizable=true,movable=false doesn't make\n   * sense from UX perspective.\n   * @default \"all\"\n   */\n  interactions?: \"all\" | \"move\" | \"none\"; // FIXME: it's not used in useResizableMovableOverlay, maybe separate props?\n\n  /**\n   * When the size is not specified by `bounds` or `defaultBounds` props, the content size is measured and used in the\n   * returned bounds. By default, the content size is measured initially. If `observeContentSize` is true, the DOM\n   * mutations will be observed and the content is re-measured as changes are observed.\n   */\n  observeContentResize?: boolean;\n}\n/**\n *\n * TODO: rename to something better? :D\n * TODO: maybe an option like ensureInViewport that would move the final bound into the viewport (if necessary), when\n *  calling onBoundsChange at the end of an interaction. That's important because if move handle(s) (usually rendered\n *  at the top of the overlay) are out of reach, there would be no way back.\n * TODO: description\n * Assumptions:\n * - The overlay is rendered in a portal, and with position \"fixed\".\n * - The returned bounds should be used to style the overlay.\n *   - There shouldn't be other style affecting the positioning, such as margin, or transform.\n *   - If the overlay has border, box-sizing should be \"border-box\"\n */\nexport function useResizableMovableOverlay(\n  overlayRef: RefObject<HTMLElement>,\n  {\n    bounds: inputBounds,\n    defaultBounds,\n    onBoundsChange,\n    onBoundsChanging = (i) => i,\n    minWidth,\n    minHeight,\n    observeContentResize,\n  }: ResizableMovableOverlayOptions\n): {\n  /**\n   * The bounds to be applied as `style` on the overlay, to position it. Even if the input `bounds` or `defaultBounds`\n   * is not defined, returned `bounds` is always a full bounds object. This eliminates any other need for styling,\n   * if the input bounds doesn't define size or position.\n   * NOTE: even when the size is not specified as input, and is to be based on content, the returned `bounds` include\n   * explicit, size, measured **after the first render**. This is because overlays such as windows are not expected to\n   * be resized without user interaction, and just based on the content size change. So we make sure even when the\n   * sizing is based on content, it's stable. If imperative re-measure of the size is needed, or even dynamic resizing\n   * based on content is needed in some cases, it is feasible to add it as an option.\n   */\n  bounds: Bounds;\n  /**\n   * `true` if the returned bounds has explicit position. `false` if it's centered as a fallback.\n   */\n  positioned: boolean;\n  /**\n   * `true` if the returned bounds has explicit size. `false` if it's measured based on content.\n   */\n  sized: boolean;\n  /**\n   * Props to be passed to {@link OverlayInteractionHandler}\n   */\n  overlayInteractionHandlerProps: OverlayInteractionHandlerProps;\n\n  /**\n   * Allow for remeasuring content size imperatively, when needed. Currently only used to work around\n   * an issue related to Suspense in React 17.\n   */\n  UNSAFE_measureContentSize: () => void;\n} {\n  const [bounds, setBounds] = useControlledState<Partial<Bounds> | undefined>(\n    inputBounds,\n    defaultBounds!,\n    // onBoundsChange is called with Bounds object. Not Partial<Bounds>, and not undefined.\n    onBoundsChange as (\n      value: Partial<Bounds> | undefined,\n      reason: \"resize\" | \"move\"\n    ) => void\n  );\n  const [contentSize, measureContentSize] = useContentSize(overlayRef, {\n    observe: observeContentResize,\n  });\n  // local state of bounds for when the overlay is in a UI interaction, like movement or resize with mouse.\n  // We don't want to update the state in the higher levels repeatedly in such transactions, and we just want to\n  // trigger on update when the UI interaction is done.\n  // It's maintained during a UI interaction and then reset to null.\n  const [currentInteraction, setCurrentInteraction] = useState<null | {\n    type: \"move\" | \"resize\";\n    bounds: Bounds;\n  }>(null);\n\n  const effectiveMinWidth =\n    minWidth === \"content\" ? contentSize.width : minWidth || 0;\n  const effectiveMinHeight =\n    minHeight === \"content\" ? contentSize.height : minHeight || 0;\n  const applyMinSize = withMinSize({\n    width: effectiveMinWidth,\n    height: effectiveMinHeight,\n  });\n  const overlayInteractionHandlerProps: OverlayInteractionHandlerProps = {\n    startInteraction: (type: \"move\" | \"resize\") => {\n      if (!overlayRef.current) {\n        throw new Error(\n          \"overlayRef value is not set. Make sure to have the ref passed to the resizable/movable overlay\"\n        );\n      }\n      const bounds = getBounds(overlayRef.current);\n      setCurrentInteraction({ bounds, type });\n      return bounds;\n    },\n    updateBounds: (updatedBounds) => {\n      setCurrentInteraction((currentInteraction) => {\n        if (currentInteraction) {\n          const { type } = currentInteraction;\n          return {\n            type,\n            bounds: onBoundsChanging(updatedBounds, type) || updatedBounds,\n          };\n        }\n        return currentInteraction;\n      });\n    },\n    finishInteraction: () => {\n      if (currentInteraction && overlayRef.current) {\n        // @ts-expect-error https://github.com/adobe/react-spectrum/issues/6784\n        setBounds(getBounds(overlayRef.current), currentInteraction.type);\n      }\n      setCurrentInteraction(null);\n    },\n    minWidth: effectiveMinWidth,\n    minHeight: effectiveMinHeight,\n  };\n\n  const partialBounds = currentInteraction?.bounds ?? bounds;\n  const centeredContentBounds = getCenteredBounds(\n    clamp(\n      effectiveMinWidth,\n      window.innerWidth,\n      bounds?.width ?? contentSize.width\n    ),\n    clamp(\n      effectiveMinHeight,\n      window.innerHeight,\n      bounds?.height ?? contentSize.height\n    )\n  );\n  return {\n    positioned:\n      partialBounds?.left != undefined && partialBounds?.top != undefined,\n    sized:\n      partialBounds?.width != undefined && partialBounds?.height != undefined,\n    bounds: applyMinSize({\n      /**\n       * Since input bounds may be partial (e.g. only specifying size), we create a full bounds object as a fallback,\n       * based on the measured size, positioned in center. We can introduce a \"loose\" mode, where the returned bound\n       * is not \"filled\" with default properties.\n       */\n      ...centeredContentBounds,\n      ...(partialBounds && filter((value) => value != null, partialBounds)),\n    }),\n    UNSAFE_measureContentSize: measureContentSize,\n    overlayInteractionHandlerProps,\n  };\n}\n\nfunction getBounds(element: HTMLElement) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  return { left, top, width, height };\n}\n","import React, { ForwardedRef, RefObject, useContext, useState } from \"react\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { useFocusWithin, useInteractOutside } from \"@react-aria/interactions\";\nimport { FocusScope, useFocusable } from \"@react-aria/focus\";\nimport { useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\nimport { pipe } from \"ramda\";\n\nimport {\n  areInNestedOverlays,\n  ensureInViewport,\n  Overlay,\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  position,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { mergeNonNullProps } from \"@intellij-platform/core/utils/mergeNonNullProps\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nimport { useDialog } from \"./_useDialog\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { PopupContext, PopupControllerContext } from \"./PopupContext\";\nimport { PopupLayout } from \"./PopupLayout\";\nimport { StyledPopupHint } from \"./StyledPopupHint\";\nimport { StyledPopupContainer } from \"@intellij-platform/core/Popup/StyledPopupContainer\";\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n`;\nexport interface PopupProps extends ResizableMovableOverlayOptions, DOMProps {\n  children: React.ReactNode;\n  onClose?: () => void;\n\n  nonDismissable?: boolean;\n\n  /**\n   * By default, Popup prevents scrolling on the scrollable ancestor, if popup is positioned relative to a target\n   * element. Allowing or disallowing scroll can be forced by passing boolean value.\n   */\n  allowScroll?: \"auto\" | boolean;\n\n  /**\n   * Used to position the popup relative to a target element, if there is no positioning information in the input\n   * `bounds`/`defaultBounds`.\n   */\n  positioning?: {\n    targetRef: RefObject<HTMLElement>;\n    placement?: \"bottom\" | \"top\";\n  };\n}\n\nexport const DEFAULT_POPUP_MIN_WIDTH = 50;\nexport const DEFAULT_POPUP_MIN_HEIGHT = 50;\n\n/**\n * [Popup](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75426%3A16881&t=vzpRGV2y2cDw5a6Z-0)\n * component, rendered as a draggable overlay which is positioned either in the center of the viewport or relative to a trigger element.\n * If there is a trigger element, use {@link PopupTrigger} instead.\n */\nexport const _Popup = (\n  // NOTE: export is only for __docgenInfo to be emitted for this.\n  {\n    interactions = \"move\",\n    nonDismissable = false,\n    allowScroll = \"auto\",\n    minWidth = DEFAULT_POPUP_MIN_WIDTH,\n    minHeight = DEFAULT_POPUP_MIN_HEIGHT,\n    positioning: positioningProp,\n    onClose: onCloseProp,\n    ...props\n  }: PopupProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element => {\n  const propsContext = useContext(PopupControllerContext);\n  const positioning = positioningProp || propsContext.positioning;\n  const onClose = () => {\n    onCloseProp?.();\n    propsContext.onClose?.();\n  };\n  const ref = useObjectRef<HTMLDivElement>(forwardedRef);\n  const shouldCloseOnInteractOutside = (element: Element) => {\n    return (\n      !positioning?.targetRef.current?.contains(element) &&\n      !areInNestedOverlays(ref.current, element)\n    );\n  };\n  const { overlayProps } = useOverlay(\n    {\n      isOpen: true, // FIXME?\n      onClose,\n      shouldCloseOnBlur: !nonDismissable,\n      shouldCloseOnInteractOutside,\n    },\n    ref\n  );\n  // Passing isDismissable to useOverlay also utilizes useInteractOutside and closes the overlay, but it calls\n  // preventDefault() and stopPropagation() on the event, which prevents focus from going to elements outside the popup.\n  // Not sure why they do this in react-aria, but it seems we are better off not using that option and using\n  // useInteractOutside directly here like this:\n  useInteractOutside({\n    ref,\n    onInteractOutsideStart: (e) => {\n      if (\n        !nonDismissable &&\n        shouldCloseOnInteractOutside(e.target as Element)\n      ) {\n        onClose();\n      }\n    },\n    // onInteractOutsideStart will not be called if onInteractOutside is not passed!\n    onInteractOutside: () => {},\n  });\n\n  usePreventScroll({\n    isDisabled: allowScroll === \"auto\" ? !positioning : allowScroll,\n  });\n\n  const { bounds, positioned, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      ...props,\n      minWidth,\n      minHeight,\n      observeContentResize: true,\n    });\n  const positionedBounds =\n    positioning?.targetRef.current && !positioned\n      ? pipe(\n          position({\n            targetElement: positioning.targetRef.current,\n            placement: positioning.placement,\n          }),\n          ensureInViewport\n        )(bounds)\n      : bounds;\n\n  const [isActive, setActive] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setActive,\n  });\n  const { focusableProps } = useFocusable(\n    {\n      excludeFromTabOrder: true,\n    },\n    ref\n  );\n  const { focusForwarderProps } = useFocusForwarder();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  /**\n   * A hook like useOverlayStack or useOverlayZIndex can be introduced which would handle focus/blur, and return/set\n   * the right z-index so that only the overlay holding the focus would have a higher z-index than others.\n   */\n  const zIndex = isActive ? 1 : 0;\n\n  return (\n    <Overlay>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        {/* TODO: FocusScope is redundant. Test focus restoration without it (in status bar progress), and remove it if unnecessary */}\n        <FocusScope restoreFocus>\n          <StyledPopupContainer\n            ref={ref}\n            style={{\n              ...positionedBounds,\n              zIndex,\n            }}\n            tabIndex={-1}\n            {...mergeNonNullProps(\n              focusWithinProps,\n              focusableProps,\n              focusForwarderProps,\n              overlayProps,\n              propsContext.overlayProps || {},\n              dialogProps,\n              filterDOMProps(props)\n            )}\n          >\n            <PopupContext.Provider\n              value={{\n                isActive,\n                movable: interactions !== \"none\",\n                titleProps,\n              }}\n            >\n              <StyledInnerContainer>{props.children}</StyledInnerContainer>\n              {interactions === \"all\" && <OverlayResizeHandles />}\n            </PopupContext.Provider>\n          </StyledPopupContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </Overlay>\n  );\n};\n\nexport const Popup = Object.assign(React.forwardRef(_Popup), {\n  Header: PopupHeader,\n  Layout: PopupLayout,\n  Hint: StyledPopupHint,\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaDialogProps } from \"@react-types/dialog\";\nimport { FocusableElement } from \"@react-types/shared\";\nimport { filterDOMProps, useSlotId } from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { RefObject, useEffect } from \"react\";\nimport { useOverlayFocusContain } from \"@react-aria/overlays\";\nimport { DialogAria } from \"@react-aria/dialog\";\n\n////////////////// NOTE //////////////////////////\n// This is a copy of useDialog from react-aria, with a little part removed from the useEffect call.\n// In the original code, inside the effect, there is a hack to fix an issue in Safari, which involves\n// blurring and refocusing the element. Even though there is a comment about an attempt to make it work\n// nice when used with `shouldCloseOnBlur` option of `useOverlay`, it didn't work and the refocusing causes\n// the popup to close. Probably because in our case useOverlay and useDialog are used in the same level, but\n// in what they've tested on in react-aria, useDialog is used in something nested in the component that uses\n// useDialog.\n// TODO: replace with original useDialog, if the issue explained above got fixed in some version of react-aria.\n//////////////////////////////////////////////////\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(\n  props: AriaDialogProps,\n  ref: RefObject<FocusableElement>\n): DialogAria {\n  let { role = \"dialog\" } = props;\n  let titleId: string | undefined = useSlotId();\n  titleId = props[\"aria-label\"] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, { labelable: true }),\n      role,\n      tabIndex: -1,\n      \"aria-labelledby\": props[\"aria-labelledby\"] || titleId,\n    },\n    titleProps: {\n      id: titleId,\n    },\n  };\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport { filter } from \"ramda\";\n\n/**\n * Like mergeProps, but doesn't merge props where value is null or undefined. That's needed because useFocusable (and\n * maybe some other react-aria hooks as well) return props like onFocus, with value set to null or undefined, which\n * overrides the same prop from other sources.\n */\n// @ts-expect-error not sure why!\nexport const mergeNonNullProps: typeof mergeProps = (...propsArray) => {\n  return mergeProps(\n    ...propsArray.map((props): typeof props =>\n      filter((value) => value != undefined, props ?? [])\n    )\n  );\n};\n","import { DOMAttributes } from \"@react-types/shared\";\nimport { createContext } from \"react\";\nimport { PopupProps } from \"./Popup\";\n\nexport const PopupContext = createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n\n/**\n * A context to provide some props that are necessary for PopupTrigger or PopupManager.\n * Passing those props via context helps with providing a nice API in those components.\n */\nexport const PopupControllerContext = createContext<\n  {\n    overlayProps?: DOMAttributes;\n  } & Partial<Pick<PopupProps, \"positioning\" | \"onClose\">>\n>({});\n","import React, { CSSProperties, HTMLAttributes, useContext } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { PopupContext } from \"./PopupContext\";\n\nconst StyledPopupHeader = styled.div<{\n  active?: boolean;\n  hasControls?: boolean;\n}>`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 1.5rem;\n  min-height: ${({ hasControls }) => hasControls && \"1.75rem\"};\n  cursor: default;\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"Popup.Header.activeForeground\" as UnknownThemeProp<\"Popup.Header.activeForeground\">,\n          theme.commonColors.labelForeground\n        )\n      : theme.color(\n          \"Popup.Header.inactiveForeground\" as UnknownThemeProp<\"Popup.Header.inactiveForeground\">,\n          theme.commonColors.labelDisabledForeground\n        )};\n  background-color: ${({ theme, active }) =>\n    active\n      ? theme.color(\"Popup.Header.activeBackground\", \"#e6e6e6\")\n      : theme.color(\"Popup.Header.inactiveBackground\", `#ededed`)};\n`;\n/**\n * Implements appearance of\n * [Popup Header](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75455%3A26566&t=Hzwse5j5R6iCEzVW-4),\n * and also acts as a handle for moving the panel.\n * Expected to be used with {@link Popup#Layout}:\n *\n * @example\n * ```tsx\n * <Popup>\n *    <Popup.Layout header={<Popup.Header>header</Popup.Header>} />\n * </Popup>\n * ```\n */\nexport const PopupHeader = ({\n  children,\n  hasControls,\n  className,\n  style,\n}: {\n  children?: React.ReactNode;\n  hasControls?: boolean;\n  className?: string;\n  style?: CSSProperties;\n}) => {\n  const { isActive, movable, titleProps } = useContext(PopupContext);\n  const renderHeader = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledPopupHeader\n      active={isActive}\n      hasControls={hasControls}\n      className={className}\n      style={style}\n      {...mergeProps(titleProps, otherProps)}\n    >\n      {children}\n    </StyledPopupHeader>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderHeader(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderHeader()\n  );\n};\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { Popup } from \"./Popup\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { StyledPopupHint } from \"@intellij-platform/core/Popup/StyledPopupHint\";\n\nconst StyledPopupLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: inherit;\n`;\nconst StyledPopupLayoutHeader = styled.div`\n  flex-shrink: 0;\n`;\nconst StyledPopupLayoutContent = styled.div`\n  flex: 1;\n  overflow: auto;\n  // Not sure about making the content area a vertical flex container, but it seemed it makes sense as default.\n  // The use case at hand where this was added was \"Branches\" popup, which would of course be implementable without this\n  // too, with an extra flex container around the menu.\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledPopupLayoutFooter = styled.div`\n  flex-shrink: 0;\n`;\n\n/**\n * Popup content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function PopupLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the popup at the top. {@link Popup.Header} can be used for the content.\n   */\n  header?: React.ReactNode;\n  /**\n   * Scrollable content of the popup.\n   */\n  content: React.ReactNode;\n  /**\n   * Fixed position footer of the popup at the bottom. {@link Popup.Hint} can be used for the content.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <StyledPopupLayout>\n      {header && (\n        <StyledPopupLayoutHeader>\n          {typeof header === \"string\" ? (\n            <PopupHeader>{header}</PopupHeader>\n          ) : (\n            header\n          )}\n        </StyledPopupLayoutHeader>\n      )}\n      <StyledPopupLayoutContent>{content}</StyledPopupLayoutContent>\n      {footer && (\n        <StyledPopupLayoutFooter>\n          {typeof footer === \"string\" ? (\n            <StyledPopupHint>{footer}</StyledPopupHint>\n          ) : (\n            footer\n          )}\n        </StyledPopupLayoutFooter>\n      )}\n    </StyledPopupLayout>\n  );\n}\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Popup, PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"@intellij-platform/core/Popup/PopupContext\";\n\nexport interface PopupManagerAPI {\n  /**\n   * Shows a popup within the stack of popups managed by {@link PopupManager}.\n   * The opened popup will be closed when `onClose` interactions happen.\n   */\n  show(\n    popup:\n      | React.ReactElement<PopupProps, typeof Popup>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<PopupProps, typeof Popup>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"PopupManager not found. Wrap your application with PopupManager to be able to open popups imperatively\"\n  );\n};\n\nconst PopupsContext = React.createContext<PopupManagerAPI>({\n  show: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing popups.\n */\nexport const usePopupManager = (): PopupManagerAPI => useContext(PopupsContext);\n\ntype PopupElement = ReactElement<PopupProps, typeof Popup>;\n\nexport interface PopupManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link usePopupManager}) for showing Popups.\n * It renders popups in a portal appended to `body`, unless `disablePortal` is `true`.\n */\nexport const PopupManager: React.FC<PopupManagerProps> = ({ children }) => {\n  const [popups, setPopups] = useState<Array<PopupElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<PopupManagerAPI>(() => {\n    const show: PopupManagerAPI[\"show\"] = (popup) => {\n      newKeyRef.current++;\n      const close = () => {\n        setPopups((currentPopups) =>\n          currentPopups.filter((aPopup) => aPopup !== wrappedPopup)\n        );\n      };\n      const wrappedPopup = (\n        <PopupControllerContext.Provider\n          key={newKeyRef.current}\n          value={{ onClose: close }}\n        >\n          {typeof popup === \"function\" ? popup({ close }) : popup}\n        </PopupControllerContext.Provider>\n      );\n      setPopups((currentPopups) => currentPopups.concat(wrappedPopup));\n    };\n    return {\n      show,\n    };\n  }, []);\n\n  return (\n    <PopupsContext.Provider value={api}>\n      {children}\n      {popups}\n    </PopupsContext.Provider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { OverlayTriggerProps, useOverlayTrigger } from \"@react-aria/overlays\";\nimport { PressResponder } from \"@react-aria/interactions\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport {\n  OverlayTriggerProps as OverlayTriggerStateProps,\n  useOverlayTriggerState,\n} from \"@react-stately/overlays\";\n\nimport { PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"./PopupContext\";\n\nexport interface PopupTriggerProps\n  extends Partial<OverlayTriggerProps>,\n    OverlayTriggerStateProps {\n  placement?: Required<PopupProps>[\"positioning\"][\"placement\"];\n  popup:\n    | React.ReactElement\n    | (({ close }: { close: () => void }) => React.ReactNode);\n  children: React.ReactElement;\n}\n\n/**\n * Popup opened by a trigger. `trigger` can be an element of any pressable component (such as {@link Button} or\n * {@link IconButton}), and is rendered in place. Similar to {@link Popup component}, `children` defines the content\n * of Popup.\n */\nexport const PopupTrigger = React.forwardRef(function PopupTrigger(\n  { placement, children, popup, ...props }: PopupTriggerProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const state = useOverlayTriggerState(props);\n  const triggerRef = useObjectRef(forwardedRef);\n  const { overlayProps, triggerProps } = useOverlayTrigger(\n    { type: props.type || \"menu\" },\n    state,\n    triggerRef\n  );\n  return (\n    <>\n      <PressResponder ref={triggerRef} {...triggerProps}>\n        {children}\n      </PressResponder>\n      {state.isOpen && (\n        <PopupControllerContext.Provider\n          value={{\n            overlayProps,\n            positioning: {\n              targetRef: triggerRef,\n              placement,\n            },\n            onClose: state.close,\n          }}\n        >\n          {typeof popup === \"function\" ? popup({ close: state.close }) : popup}\n        </PopupControllerContext.Provider>\n      )}\n    </>\n  );\n});\n","import { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledPopupContainer = styled.div`\n  position: fixed;\n  box-sizing: border-box;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  outline: none; // Focus will be reflected in header. No need for outline or any other focus style on the container\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\n\n/**\n * Hint component (aka Advertiser) used in Popup's footer.\n * {@see Popup.Layout}\n */\nexport const StyledPopupHint = styled.div`\n  // NOTE: Following the reference implementation, would require to set fallback colors non-prior to\n  // *.(background|foreground) colors (by not passing the fallback color as the second argument to theme.color).\n  // It's only in BigPopup that the fallback colors are prioritized over *-fallback. But in Figma designs, this is\n  // simplified, and hint always has the muted color (like in BigPopup), instead of the default foreground.\n  // So we are intentionally deviating from the reference implementation here.\n  background: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.background\",\n      theme.color(\"SearchEverywhere.Advertiser.background\")\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.foreground\",\n      theme.color(\"SearchEverywhere.Advertiser.foreground\")\n    )};\n  padding: 0.3125rem 0.9375rem 0.3125rem 0.625rem;\n  font-size: 0.875em;\n  line-height: normal;\n  user-select: none;\n  cursor: default;\n  // NOTE: white-space is intentionally not set as nowrap.\n`;\n","import React, {\n  CSSProperties,\n  HTMLAttributes,\n  Ref,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { keyframes } from \"styled-components\";\nimport { useProgressBar } from \"@react-aria/progress\";\nimport { AriaProgressBarProps } from \"@react-types/progress\";\nimport { PressProps, useHover } from \"@react-aria/interactions\";\nimport { useButton } from \"@react-aria/button\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, \"label\"> {\n  /**\n   * Process name, shown above or to the left of the progress bar. Placement is controlled by {@link namePosition}.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-name\n   */\n  name?: React.ReactNode;\n\n  /**\n   * Process name position with respect to the progress bar.\n   * If `namePosition` is \"side\", {@link name} is **not** automatically appended with a colon.\n   * @default \"top\"\n   */\n  namePosition?: \"side\" | \"top\";\n\n  /**\n   * Process details, placed bellow the progress bar, with a de-emphasized color.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-details\n   */\n  details?: React.ReactNode;\n\n  /**\n   * A second line of details. Not an officially documented feature, but it's supported in the reference impl.\n   */\n  secondaryDetails?: React.ReactNode;\n\n  /**\n   * Placed next to and aligned with the progress bar, used for\n   * [process control](https://jetbrains.github.io/ui/controls/progress_bar/#process-control) buttons.\n   */\n  button?: React.ReactNode;\n\n  /**\n   * Progress bar track width.\n   */\n  width?: CSSProperties[\"width\"];\n\n  /**\n   * Not supported in [the official specs](https://jetbrains.github.io/ui/controls/progress_bar/#25), but the progress\n   * bar in status bar has a denser spacing. It still won't be a pixel perfect match with the progress bar in the\n   * status bar.\n   */\n  dense?: boolean;\n\n  /** Whether the value's label is displayed. True by default if there's a label, false by default if not. */\n  showValueLabel?: boolean;\n\n  style?: HTMLAttributes<unknown>[\"style\"];\n  className?: HTMLAttributes<unknown>[\"className\"];\n}\n\ninterface ProgressBarContextObj {\n  setForcedDetails: (details: string | null) => void;\n  setTooltip: (tooltip: string | null) => void;\n}\n\n/**\n * @see https://jetbrains.github.io/ui/controls/progress_bar/\n * @see https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/platform-api/src/com/intellij/openapi/ui/panel/ProgressPanelBuilder.java\n *\n * Known issues:\n * There are a couple of UI issues because of the current layout (which can be improved probably):\n * - max-width of the label and details, it's not necessarily aligned with the the progressbar track, because they don't\n *   share the same container\n * - when label is on the side, details is aligned with the label, instead of the progressbar track.\n */\nexport const ProgressBar = ({\n  value = 0,\n  maxValue = 100,\n  minValue = 0,\n  name,\n  namePosition = \"top\",\n  details,\n  secondaryDetails,\n  button,\n  width,\n  dense,\n  className,\n  style,\n  valueLabel,\n  showValueLabel = Boolean(valueLabel),\n  ...props\n}: ProgressBarProps): React.ReactElement => {\n  const { progressBarProps, labelProps } = useProgressBar({\n    ...props,\n    label: name,\n    value,\n    valueLabel,\n    maxValue,\n    minValue,\n  });\n  const percentage = (100 * (value / maxValue)).toFixed(0);\n  const [forcedDetails, setForcedDetails] = useState<null | string>(\"\");\n  const [tooltip, setTooltip] = useState<null | string>(\"\");\n\n  const contextValue: ProgressBarContextObj = useMemo(\n    () => ({\n      setForcedDetails,\n      setTooltip,\n    }),\n    []\n  );\n  const label = (\n    <StyledProgressBarLabel {...labelProps}>{name}</StyledProgressBarLabel>\n  );\n  const effectiveDetails = details ? tooltip || forcedDetails || details : null;\n  return (\n    <StyledProgressBarContainer style={style} className={className}>\n      {namePosition === \"top\" && label}\n      <StyledProgressBarLineContainer\n        dense={dense}\n        hasTopMargin={Boolean(name) && namePosition === \"top\"}\n        hasBottomMargin={Boolean(effectiveDetails)}\n      >\n        {namePosition === \"side\" && label}\n        <StyledProgressBarTrack\n          style={{ width }}\n          {...progressBarProps}\n          indeterminate={props.isIndeterminate}\n        >\n          {!props.isIndeterminate && (\n            <StyledProgressBarProgress style={{ width: `${percentage}%` }} />\n          )}\n        </StyledProgressBarTrack>\n        {showValueLabel && <span>{valueLabel ?? `${percentage}%`}</span>}\n        <ProgressBarContext.Provider value={contextValue}>\n          {button}\n        </ProgressBarContext.Provider>\n      </StyledProgressBarLineContainer>\n      <StyledProgressBarDetails>{effectiveDetails}</StyledProgressBarDetails>\n      <StyledProgressBarDetails>{secondaryDetails}</StyledProgressBarDetails>\n    </StyledProgressBarContainer>\n  );\n};\n\nconst ProgressBarContext = React.createContext<null | ProgressBarContextObj>(\n  null\n);\n\nconst StyledProgressBarContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground /* TODO: check*/};\n  cursor: default; // prevent cursor on text\n`;\n\nconst StyledProgressBarLineContainer = styled.div<{\n  dense?: boolean;\n  hasTopMargin?: boolean;\n  hasBottomMargin?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: ${({ dense }) => (dense ? \"0.5rem\" : \"0.625rem\")};\n  height: 4px;\n  // spacing is based on the reference impl and figma designs. top and bottom spacing is inverted in the spec document\n  // figma: https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?node-id=75426%3A16650\n  // spec document: https://jetbrains.github.io/ui/controls/progress_bar/#25\n  margin-top: ${({ hasTopMargin }) => hasTopMargin && \"0.375rem\"};\n  margin-bottom: ${({ hasBottomMargin }) => hasBottomMargin && \"0.25rem\"};\n`;\n\nconst StyledProgressBarLabel = styled.div`\n  white-space: nowrap;\n  max-width: calc(100% - 2rem);\n  overflow: hidden;\n`;\n\nconst StyledProgressBarDetails = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n  font-size: 0.82em;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 2rem); // not the best way\n`;\n\nconst StyledProgressBarTrack = styled.div<{ indeterminate?: boolean }>`\n  height: inherit;\n  border-radius: 2px;\n  overflow: hidden;\n  display: flex;\n\n  // In case used in flex layout\n  min-width: 0;\n  flex: 1;\n\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.trackColor\",\n      theme.dark ? \"rgb(85,85,85)\" : \"rgb(196,196,196)\"\n    )};\n  ${({ indeterminate }) =>\n    indeterminate &&\n    css`\n      background: linear-gradient(\n        90deg,\n        ${getIndeterminateStartColor} 0%,\n        ${getIndeterminateEndColor} 50%,\n        ${getIndeterminateStartColor} 100%\n      );\n      background-size: 96px auto;\n      animation: 800ms ${indeterminateBackgroundAnimation} linear infinite;\n    `}\n`;\n\nconst getIndeterminateStartColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateStartColor\");\nconst getIndeterminateEndColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateEndColor\");\n\nconst indeterminateBackgroundAnimation = keyframes`\n  0% {\n    background-position: 0;\n  }\n  100% {\n    background-position: 96px;\n  }\n`;\n\nconst StyledProgressBarProgress = styled.div`\n  height: 100%;\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.progressColor\",\n      theme.dark ? \"rgb(160,160,160)\" : \"rgb(128,128,128)\"\n    )};\n`;\n\ntype ProgressBarIconButtonProps = Pick<PressProps, \"onPress\"> & {\n  hoverTooltip: string;\n};\n\n/**\n * Accessibility and functionality of progress bar icon buttons\n * @private maybe?\n */\nexport function useProgressBarIconButton(\n  { onPress, hoverTooltip }: ProgressBarIconButtonProps,\n  ref: Ref<HTMLElement>\n) {\n  const { buttonProps } = useButton(\n    {\n      onPress,\n      elementType: \"span\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: it works, but it's intentionally excluded from the type.\n      preventFocusOnPress: true,\n    },\n    ref\n  );\n  const context = useContext(ProgressBarContext);\n  const { hoverProps, isHovered } = useHover({});\n  useEffect(() => {\n    context?.setTooltip(isHovered ? hoverTooltip : null);\n  }, [hoverTooltip, isHovered]);\n  return {\n    buttonProps: mergeProps(buttonProps, hoverProps),\n  };\n}\n\n/**\n * @private maybe?\n * */\nexport function useProgressBarPauseIconButton(\n  { paused, ...props }: ProgressBarIconButtonProps & { paused: boolean },\n  ref: Ref<HTMLElement>\n) {\n  const context = useContext(ProgressBarContext);\n  useEffect(() => {\n    context?.setForcedDetails(paused ? \"Paused\" : null);\n  }, [paused]);\n  return useProgressBarIconButton(props, ref);\n}\n\n/**\n * Experimenting with an idea of exposing parts on each component, to maximize styling customizability, similar to\n * [classes](https://mui.com/joy-ui/api/button/#classes) API in MUI components. But instead of passing classes prop,\n * one would be able to create custom versions of a component by doing something like this:\n * const CustomComponent = styled(Component)`\n *   ${Component.part1} {\n *     // custom style here\n *   }\n * `;\n * The question is if this type of customizability is actually a good thing in the balance between flexibility for\n * catering for different use cases and not stepping out of the design system boundaries.\n * Another potential downside is that the public API expands to the anatomy of the component.\n */\nProgressBar.Container = StyledProgressBarContainer;\nProgressBar.Label = StyledProgressBarLabel;\nProgressBar.LineContainer = StyledProgressBarLineContainer;\nProgressBar.Track = StyledProgressBarTrack;\nProgressBar.Progress = StyledProgressBarProgress;\nProgressBar.Details = StyledProgressBarDetails;\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarCancelButtonProps {\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n  onPress: () => void;\n}\n\n/**\n * Stop (cancel) icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarStopButton = ({\n  small,\n  onPress,\n}: ProgressBarCancelButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarIconButton(\n    { onPress, hoverTooltip: \"Cancel\" },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      ref={ref}\n      {...buttonProps}\n      icon={`process/stop${small ? \"Small\" : \"\"}.svg`}\n      hoverIcon={`process/stop${small ? \"Small\" : \"\"}Hovered.svg`}\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  ThreeViewSplitter,\n  ThreeViewSplitterProps,\n} from \"./ThreeViewSplitter/ThreeViewSplitter\";\n\ntype ResizableViewProps = Omit<\n  ThreeViewSplitterProps,\n  | \"innerView\"\n  | \"firstView\"\n  | \"firstSize\"\n  | \"onFirstResize\"\n  | \"lastView\"\n  | \"lastSize\"\n  | \"onLastResize\"\n> & {\n  children: React.ReactNode;\n  onResize: ThreeViewSplitterProps[\"onFirstResize\"];\n  size: ThreeViewSplitterProps[\"firstSize\"];\n  /**\n   * Whether the resizer should be placed at before or after the resizable view.\n   */\n  resizerPlacement?: \"before\" | \"after\";\n};\n/**\n * A single resizable view, built on top of {@link ThreeViewSplitter}, just to provide better prop interface.\n * Like `ThreeViewSplitter` it supports \"horizontal\" or \"vertical orientations. There is an extra `resizerPlacement`\n * prop which determines where the resizer should be placed in relation with the view. When set to \"before\" the view\n * will be resizable from the start (\"left\" or \"top\"). When set to \"after\" the view will be resizable from end (\"right\"\n * or \"bottom\"). Default is \"after\"\n */\nexport const ResizableView = ({\n  children,\n  size,\n  onResize,\n  resizerPlacement = \"after\",\n  ...props\n}: ResizableViewProps) => (\n  <ThreeViewSplitter\n    {...(resizerPlacement === \"after\"\n      ? { firstView: children, firstSize: size, onFirstResize: onResize }\n      : { lastView: children, lastSize: size, onLastResize: onResize })}\n    {...props}\n  />\n);\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useBottomResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will increase/decrease the height\n */\nexport const BottomResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useBottomResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype HorizontalResizerViewProps = ResizerViewProps<\"horizontal\">;\n\nconst StyledHorizontalResizer = styled.div`\n  top: 0;\n  height: 100%;\n  width: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledHorizontalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: HorizontalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  width: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  height: 100%;\n  left: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a horizontal layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const HorizontalResizer: React.FC<HorizontalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"col\",\n  children,\n  style = {},\n  resizerProps,\n}) => {\n  return (\n    <StyledHorizontalResizer\n      {...resizerProps}\n      style={{ ...style, background, width: size }}\n    >\n      {children}\n      <StyledHorizontalResizerArea handleSize={outerPadding} cursor={cursor} />\n    </StyledHorizontalResizer>\n  );\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useLeftResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the left side of the resizable view. i.e.\n * moving mouse to right/left will decrease/increase the width\n */\nexport const LeftResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useLeftResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useRightResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the right side of the resizable view. i.e.\n * moving mouse to right/left will increase/decrease the width\n */\nexport const RightResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useRightResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useTopResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will decrease/increase the height\n */\nexport const TopResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useTopResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype VerticalResizerViewProps = ResizerViewProps<\"vertical\">;\n\nconst StyledVerticalResizer = styled.div`\n  width: 100%;\n  height: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledVerticalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: VerticalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  height: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  width: 100%;\n  top: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a vertical layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const VerticalResizer: React.FC<VerticalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"row\",\n  resizerProps,\n  children,\n  style = {},\n}) => (\n  <StyledVerticalResizer\n    {...resizerProps}\n    style={{ ...style, background, height: size }}\n  >\n    {children}\n    <StyledVerticalResizerArea handleSize={outerPadding} cursor={cursor} />\n  </StyledVerticalResizer>\n);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { ResizerProps } from \"./ResizerProps\";\n\ntype UseResizerProps = Pick<\n  ResizerProps,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n>;\n\nexport type ResizerViewProps<O = \"horizontal\" | \"vertical\"> = Omit<\n  ResizerProps<O>,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n> &\n  ReturnType<typeof useResizer>;\n\nconst useResizer = (\n  orientation: \"horizontal\" | \"vertical\",\n  invert: boolean,\n  { onResizeStarted, onResize, onResizeEnd }: UseResizerProps\n) => {\n  const props = useMove({\n    dragThreshold: 0,\n    onMoveStart: () => onResizeStarted() || 0,\n    onMoveEnd: () => onResizeEnd?.(),\n    onMove: ({ movement, startState }) =>\n      onResize(\n        startState +\n          (invert ? -1 : +1) *\n            movement[orientation === \"horizontal\" ? \"x\" : \"y\"]\n      ),\n  });\n  return {\n    resizerProps: props,\n  };\n};\n\nexport const useLeftResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", true, props);\n};\n\nexport const useRightResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", false, props);\n};\n\nexport const useTopResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", true, props);\n};\n\nexport const useBottomResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", false, props);\n};\n","import React, { ComponentProps, useState } from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n  CommonActionId,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { Item } from \"@intellij-platform/core/Collections\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport interface SearchInputProps\n  extends Omit<InputProps, \"onSubmit\" | \"onChange\"> {\n  /**\n   * Search history to be shown as a menu when the search icon is pressed.\n   */\n  searchHistory?: Array<string>;\n  /**\n   * The content of \"show history\" button tooltip, and the corresponding action title.\n   * @default \"Recent Search\"\n   */\n  historyButtonTitle?: string;\n  /**\n   * Called when the search input is cleared by either clear button or `Escape` key.\n   * `onChange` is also called with an empty string, whenever the input is cleared,\n   * so there is no need for updating the state using `onClear`, when the value is controlled.\n   *\n   * @param clearedValue the value before clearing.\n   */\n  onClear?: (clearedValue: string) => void;\n  /**\n   * Called when the search is submitted by pressing `Enter`\n   * @param value submitted text\n   */\n  onSubmit?: (value: string) => void;\n  /**\n   * Controlled value of the search input\n   */\n  value?: string;\n  /**\n   * Default value of the search input, used for initialization when value is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * Called when the value is changed.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Called when a history item is selected. `onChange` is called with the selected text, so\n   * there is no need for updating the state using `onHistoryItemSelected`, when the value is controlled.\n   *\n   * @param value text selected from history.\n   * @param previousValue the value of the input before the history item was selected.\n   */\n  onHistoryItemSelected?: (value: string, previousValue: string) => void;\n}\n\nconst StyledInput = styled(Input)`\n  input[type=\"search\"] {\n    -webkit-appearance: none;\n    &::-webkit-search-cancel-button {\n      -webkit-appearance: none;\n    }\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n  }\n`;\n\n/**\n * A wrapper around {@link Input} with a few additions:\n * - A Search icon, added as an {@link InputProps#addonBefore addonBefore}.\n * - A clear button, added as an {@link InputProps#addonAfter addonAfter}, when the input has value.\n *   {@link SearchInputProps#onClear onClear} is called when the clear button is clicked.\n * - A list of search queries shown as a menu, when the search icon is clicked,\n *   if {@link SearchInputProps#searchHistory searchHistory} is provided.\n * - An action provided on the input element, to open the search history via\n *   {@link CommonActionId.SHOW_SEARCH_HISTORY} shortcut.\n * - Search submission callback ({@link SearchInputProps#onSubmit onSubmit}) called when search is submitted by pressing Enter\n *\n * {@link InputProps#onChange onChange} and {@link InputProps#onSubmit onSubmit} props are also different in SearchInput, compared to\n * the corresponding props of the native input.\n *\n * Caveat: If the width is not set (either explicitly or via the entailing layout), the width of the input will change when clear button shows/hides.\n *\n * @see Input\n * @see InputField\n */\nexport const SearchInput = React.forwardRef(function SearchInput(\n  {\n    addonBefore,\n    addonAfter,\n    searchHistory,\n    onClear,\n    onSubmit,\n    onHistoryItemSelected,\n    historyButtonTitle = \"Recent Search\",\n    value: valueProp,\n    defaultValue = \"\",\n    onChange,\n    type = \"search\",\n    inputRef: inputRefProp,\n    ...props\n  }: SearchInputProps,\n  forwardedRef: React.Ref<HTMLDivElement>\n) {\n  const [value, setValue] = useControlledState(\n    valueProp!,\n    defaultValue,\n    onChange!\n  );\n  const inputContainerRef = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const [isSearchHistoryOpen, setSearchHistoryOpen] = useState(false);\n  const showSearchHistoryAction: ActionDefinition = {\n    id: CommonActionId.SHOW_SEARCH_HISTORY,\n    title: historyButtonTitle,\n    actionPerformed: () => {\n      setSearchHistoryOpen(true);\n    },\n  };\n  // TODO: rename HelpTooltip, ActionTooltip, etc. to Tooltip.Action Tooltip.Help, then add ActionTooltip in action\n  //  components, and use that instead of the more low-level API used here.\n  const getShortcut = useGetActionShortcut();\n  const searchIcon = searchHistory ? (\n    <MenuTrigger\n      isOpen={isSearchHistoryOpen}\n      onOpenChange={setSearchHistoryOpen}\n      positioningTargetRef={inputContainerRef}\n      renderMenu={({ menuProps }) => (\n        <Menu\n          {...menuProps}\n          autoFocus=\"first\"\n          onAction={(key) => {\n            const historyItemText =\n              searchHistory[parseInt(`${key}`.split(\"_\")[0])];\n            if (historyItemText !== undefined) {\n              setValue(historyItemText);\n              onHistoryItemSelected?.(historyItemText, value);\n              inputRef.current?.focus();\n            }\n          }}\n        >\n          {searchHistory.map((historyItem, index) => (\n            <Item key={`${index}_${historyItem}`}>{historyItem}</Item>\n          ))}\n        </Menu>\n      )}\n    >\n      {(menuTriggerProps, ref) => (\n        <TooltipTrigger\n          tooltip={\n            <ActionTooltip\n              actionName={historyButtonTitle}\n              shortcut={getShortcut(CommonActionId.SHOW_SEARCH_HISTORY)}\n            />\n          }\n        >\n          {(tooltipTriggerProps) => (\n            <PlatformIcon\n              {...mergeProps(tooltipTriggerProps, menuTriggerProps)}\n              ref={ref}\n              icon=\"actions/searchWithHistory.svg\"\n              role=\"button\"\n              aria-label={historyButtonTitle}\n            />\n          )}\n        </TooltipTrigger>\n      )}\n    </MenuTrigger>\n  ) : (\n    <PlatformIcon icon=\"actions/search.svg\" />\n  );\n  const clear = () => {\n    setValue(\"\");\n    onClear?.(value);\n  };\n  const inputProps = mergeProps<ComponentProps<typeof Input>[]>(props, {\n    ref: inputContainerRef,\n    inputRef,\n    value,\n    type,\n    onChange: (event) => {\n      setValue(event.target.value);\n    },\n    addonBefore: (\n      <>\n        {searchIcon}\n        {addonBefore}\n      </>\n    ),\n    addonAfter: (\n      <>\n        {value && (\n          <AutoHoverPlatformIcon\n            onClick={clear}\n            role=\"button\"\n            aria-label=\"Clear search\"\n            icon=\"actions/close\"\n            hoverIcon=\"actions/closeHovered\"\n          />\n        )}\n        {addonAfter}\n      </>\n    ),\n    onKeyDown: (event) => {\n      if (event.repeat) {\n        return;\n      }\n      if (event.key === \"Enter\") {\n        onSubmit?.(event.currentTarget.value);\n      } else if (event.key === \"Escape\") {\n        clear();\n      }\n    },\n  });\n  if (searchHistory) {\n    return (\n      <ActionsProvider actions={[showSearchHistoryAction]}>\n        {({ shortcutHandlerProps }) => (\n          <StyledInput {...mergeProps(inputProps, shortcutHandlerProps)} />\n        )}\n      </ActionsProvider>\n    );\n  }\n  return <StyledInput {...inputProps} />;\n});\n","import React, { useRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface SpeedSearchInputProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n  clear: () => void;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 0.25rem;\n`;\n\nconst StyledSpeedSearchInput = styled.span<{ noMatch?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  background: ${({ theme, noMatch }) =>\n    noMatch\n      ? theme.color(\n          \"SearchField.errorBackground\",\n          theme.dark ? \"#743A3A\" : \"#ffcccc\"\n        )\n      : theme.color(\n          \"TextField.background\"\n        )}; // fallback logic not checked with the ref impl\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )}; // fallback logic not checked with the ref impl\n  height: 1.5rem; // 24px, JBTextField COMPACT_HEIGHT\n  padding: 0.125rem 0.375rem;\n  border: 1px solid ${({ theme }) => theme.getOutlineColor(true, false)};\n  border-radius: ${({ theme }) =>\n    ((theme.value(\"Component.arc\") as number) ?? 5) / 2}px;\n`;\nconst StyledSearchText = styled.span`\n  flex: 1;\n  font-size: 0.91em; // RelativeFont.SMALL\n`;\n\n/**\n * An input field to be rendered to show the filter value in speed search in menus and similar speedSearch-enabled\n * components.\n * @see SpeedSearchPopup\n */\nexport const SpeedSearchInput = React.forwardRef<\n  HTMLElement,\n  SpeedSearchInputProps\n>(({ active, match, children, clear }, ref) => {\n  const clearButtonRef = useRef<HTMLElement>(null);\n  const { buttonProps } = useButton(\n    {\n      elementType: \"span\",\n      \"aria-label\": \"Clear search\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n      preventFocusOnPress: true,\n      onPress: clear,\n    },\n    clearButtonRef\n  );\n\n  // Temporary styled components until SearchInput is implemented\n  return active ? (\n    <StyledSpeedSearchInput ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      <StyledSearchText>\n        {(children || \"\").replace(/ /g, \"\\u00A0\")}\n      </StyledSearchText>\n      {children && (\n        <AutoHoverPlatformIcon\n          {...buttonProps}\n          ref={clearButtonRef}\n          icon=\"actions/close\"\n          hoverIcon=\"actions/closeHovered\"\n        />\n      )}\n    </StyledSpeedSearchInput>\n  ) : null;\n});\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown in the top left corner of list, tree, etc., which shows the search\n * query.\n * @see SpeedSearchInput\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ noMatch?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ noMatch, theme }) =>\n    noMatch\n      ? theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)\n      : theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        // Seems reasonable to prevent default here generally, but the specific case this is added for is the space key,\n        // scrolling the page.\n        event.preventDefault();\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport React, { RefObject } from \"react\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\nexport interface SpeedSearchState {\n  /**\n   * Whether speed search is active. Speed search becomes active when the user starts to type and becomes inactive\n   * when Escape is pressed, or when the speed search container is blurred and `keepSearchActiveOnBlur` is false.\n   * Whenever speed search becomes inactive, search text is also cleared.\n   * Note that speed search can be active while search term is empty.\n   */\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  /**\n   * clears search term and sets active to false\n   */\n  clear: () => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    isSearchActive: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.isSearchActive!,\n    props.defaultIsSearchActive ?? false,\n    props.onIsSearchActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n    clear: () => {\n      setSearchTerm(\"\");\n      setActive(false);\n    },\n  };\n}\n\nexport interface SpeedSearchProps {\n  keepSearchActiveOnBlur?: boolean | ((e: React.FocusEvent) => boolean);\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { keepSearchActiveOnBlur }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState,\n  ref: RefObject<HTMLElement>\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!ref.current?.contains(e.target as HTMLElement)) {\n        // In case events are propagated through portals\n        return;\n      }\n      if (e.key === \"a\" && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n      }\n      if (e.key === \"Escape\") {\n        clear();\n      } else {\n        ghostInputKeydown(e);\n      }\n      /**\n       * In the reference impl, at least some action shortcuts are allowed\n       * while the search is active. But actions with some other shortcuts\n       * (like Delete) are not triggered while the speed search is active\n       * the current condition below is not 100% matching the reference impl,\n       * but seems to be good enough for now.\n       */\n      if (!active || hasAnyModifier(e)) {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onBlurWithin: (event) => {\n      if (\n        !(typeof keepSearchActiveOnBlur === \"function\"\n          ? keepSearchActiveOnBlur(event)\n          : keepSearchActiveOnBlur)\n      ) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarProps {\n  left: React.ReactNode;\n  right: React.ReactNode;\n}\n\n/**\n * Status bar rendered at the bottom of the main window. In the reference implementation, there are three slots for\n * content: left, right and center. It doesn't seem center is really necessary, so only left and right are supported\n * for now.\n * @param left content on the left side of the status bar.\n * @param right content on the right side of the status bar. Typically, a bunch of {@link StatusBarWidget}s\n */\nexport const StatusBar = ({\n  left,\n  right,\n}: StatusBarProps): React.ReactElement => {\n  return (\n    <StyledStatusBar\n      onMouseDown={(e) => {\n        // stop focus from going out of the currently focused element, when status bar is clicked\n        // might be too intrusive to prevent default unconditionally :-? Also, it may make sense for it to be an option\n        e.preventDefault();\n      }}\n    >\n      <StyledStatusBarLeft>{left}</StyledStatusBarLeft>\n      <StyledStatusBarRight>{right}</StyledStatusBarRight>\n    </StyledStatusBar>\n  );\n};\n\nconst StyledStatusBar = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.25rem;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between; // because there is left and right sides\n  background-color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.background\" as UnknownThemeProp<\"StatusBar.background\">,\n      theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)\n    ) || \"#fff\"};\n  color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.Widget.foreground\" as UnknownThemeProp<\"StatusBar.Widget.foreground\">,\n      theme.commonColors.labelForeground\n    )};\n  border-top: 1px solid\n    ${({ theme }) => theme.color(\"StatusBar.borderColor\", \"rgb(145, 145, 145)\")};\n  height: calc(1.25rem + 1px /* border*/);\n  line-height: 1.25rem;\n  font-size: 0.656rem; // not verified\n  cursor: default;\n`;\n\nconst StyledStatusBarSection = styled.div`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst StyledStatusBarRight = styled(StyledStatusBarSection)`\n  flex-shrink: 0;\n`;\nconst StyledStatusBarLeft = styled(StyledStatusBarSection)`\n  flex-shrink: 1;\n  min-width: 0;\n  overflow: hidden;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { PressProps, usePress } from \"@react-aria/interactions\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface StatusBarWidgetProps extends PressProps {\n  label?: React.ReactNode;\n  icon?: React.ReactNode;\n}\n\n/**\n * Status bar button (aka widget), with the right hover and pressed appearance.\n * It doesn't get focused when pressed, and is excluded from tab order.\n * Disabled style is not couldn't be found, so it's skipped at the moment.\n */\nexport const StatusBarWidget = React.forwardRef(function StatusBarWidget(\n  props: StatusBarWidgetProps,\n  forwardedRef: ForwardedRef<HTMLSpanElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  // Maybe it's better for a11y to use useButton, or at least use button element?\n  const { pressProps, isPressed } = usePress({\n    ref,\n    ...props,\n    preventFocusOnPress: true,\n  });\n  const { focusableProps } = useFocusable({ excludeFromTabOrder: true }, ref);\n\n  const StyledWrapper = props.label\n    ? StyledStatusBarWidget\n    : StyledStatusBarIconWidget;\n  return (\n    <StyledWrapper\n      {...mergeProps(pressProps, focusableProps)}\n      className={isPressed ? \"pressed\" : \"\"}\n      ref={ref}\n    >\n      {props.icon}\n      {props.icon && props.label && (\n        <>&nbsp;</> //not the nicest way to handle spacing!\n      )}\n      {props.label}\n    </StyledWrapper>\n  );\n});\n\nconst StyledStatusBarWidget = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.375rem\"};\n  height: 1.125rem;\n  white-space: nowrap;\n  &:hover {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverBackground\" as UnknownThemeProp<\"StatusBar.Widget.hoverBackground\">,\n        theme.color(\"ActionButton.hoverBackground\", \"#dfdfdf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverForeground\" as UnknownThemeProp<\"StatusBar.Widget.hoverForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n  &.pressed {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedBackground\" as UnknownThemeProp<\"StatusBar.Widget.pressedBackground\">,\n        theme.color(\"ActionButton.pressedBackground\", \"#cfcfcf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedForeground\" as UnknownThemeProp<\"StatusBar.Widget.pressedForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n`;\n\nconst StyledStatusBarIconWidget = styled(StyledStatusBarWidget)`\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.25rem\"};\n`;\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  closeButton,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <DebuggerTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n}) => {\n  return (\n    <TabContentLayout startIcon={icon} title={title} endIcon={closeButton} />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\n\ninterface EditorTabContentProps {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button, shown in place of \"pin\" button if not pinned. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <EditorTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  closeButton,\n  onUnpin,\n  pinned,\n  containerProps,\n}: EditorTabContentProps) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <TooltipTrigger tooltip={<ActionTooltip actionName=\"Unpin Tab\" />}>\n            <BareButton\n              onPress={onUnpin}\n              excludeFromTabOrder\n              preventFocusOnPress\n            >\n              <PlatformIcon icon=\"actions/pinTab\" />\n            </BareButton>\n          </TooltipTrigger>\n        ) : (\n          closeButton\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import React from \"react\";\nimport { BareButton, BareButtonProps } from \"@intellij-platform/core/Button\";\nimport { PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\n\nconst StyledIconWrapper = styled.span`\n  display: inherit;\n  .icon.hover {\n    display: none;\n  }\n  &:hover {\n    .icon {\n      display: none;\n    }\n    .icon.hover {\n      display: unset;\n    }\n  }\n`;\n/**\n * Close button for Tab\n */\nexport const TabCloseButton = (props: Omit<BareButtonProps, \"children\">) => {\n  // using useHover proved to be unstable.\n  return (\n    <BareButton {...props} excludeFromTabOrder preventFocusOnPress>\n      <StyledIconWrapper>\n        <PlatformIcon icon={\"actions/closeHovered\"} className=\"icon hover\" />\n        <PlatformIcon icon={\"actions/close\"} className=\"icon\" />\n      </StyledIconWrapper>\n    </BareButton>\n  );\n};\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps = {} }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    // To allow tooltip be used easily. TooltipTrigger passes props via FocusableContext.\n    const { focusableProps } = useFocusable({}, useObjectRef(ref));\n    return (\n      <StyledTabItemLayout\n        {...mergeProps(focusableProps, containerProps)}\n        ref={ref}\n      >\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { ForwardedRef, forwardRef, RefObject, useEffect } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  shouldSelectOnPressUp?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = forwardRef(function Tab<T extends object>(\n  {\n    state,\n    item,\n    focusable,\n    active,\n    shouldSelectOnPressUp,\n    Component = StyledDefaultTab,\n  }: TabProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): React.ReactElement {\n  const { key, rendered } = item;\n  const ref = useForwardedRef(forwardedRef);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab(\n    {\n      key,\n      shouldSelectOnPressUp,\n    },\n    state,\n    ref\n  );\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n});\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useOverflowObserver } from \"../utils/overflow-utils/useOverflowObserver\";\nimport { useHasOverflow } from \"./useHasOverflow\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Whether selected tab should change on press up instead of press down.\n   * @default false.\n   */\n  shouldSelectOnPressUp?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n *  - FIX: When a tab that was not selected is removed, selection should not change. It now changes to the tab before the removed one.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  shouldSelectOnPressUp,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, hasOverflow } = useHasOverflow({ ref });\n  const { overflowedElements } = useOverflowObserver(ref);\n  const overflowedKeys = new Set(\n    overflowedElements\n      .map((element) =>\n        element instanceof HTMLElement ? element.dataset[\"key\"] : null\n      )\n      .filter(notNull)\n  );\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={hasOverflow.left}\n        hasOverflowAtEnd={hasOverflow.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              shouldSelectOnPressUp={shouldSelectOnPressUp}\n              active={active}\n              Component={TabComponent}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useHasOverflow<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [hasOverflow, setHasOverflow] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newHasOverflow = {\n        top: offsetTop > threshold,\n        bottom: offsetBottom > threshold,\n        left: offsetLeft > threshold,\n        right: offsetRight > threshold,\n      };\n      if (\n        hasOverflow.top !== newHasOverflow.top ||\n        hasOverflow.bottom !== newHasOverflow.bottom ||\n        hasOverflow.left !== newHasOverflow.left ||\n        hasOverflow.right !== newHasOverflow.right\n      ) {\n        setHasOverflow(newHasOverflow);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    hasOverflow,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [...collection].filter(\n            (menuItem) => overflowedKeys.has(menuItem.key)\n          );\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <IconButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </IconButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\n\ntype ToolWindowTabContentProps = {\n  icon?: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <ToolWindowTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactNode;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n};\n\nexport const ToolWindowTabContent = React.forwardRef(\n  (\n    { icon, title, closeButton, containerProps }: ToolWindowTabContentProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    return (\n      <TabContentLayout\n        containerProps={containerProps}\n        ref={ref}\n        startIcon={icon}\n        title={title}\n        endIcon={closeButton}\n      />\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n    shouldSelectOnPressUp\n  />\n);\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","// language=JSRegexp\nconst numberPattern = \"[0-9]{0,3}.?[0-9]*\";\n\nconst parseComponent = (componentStr: string, index: number) =>\n  componentStr\n    ? index < 3\n      ? parseInt(componentStr)\n      : Math.round(Math.min(parseFloat(componentStr), 1) * 255)\n    : undefined;\n\nconst parseHexRgba = (str: string) =>\n  str\n    .match(/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?$/i)\n    ?.slice(1, 5)\n    .map((i) => (i ? parseInt(i, 16) : undefined));\nconst parseShorthandHex = (str: string) =>\n  str\n    .match(/^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i)\n    ?.slice(1, 4)\n    .map((i) => (i ? parseInt(i + i, 16) : undefined));\nconst parseRgb = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgb\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\nconst parseRgba = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgba\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\n\n/**\n * parses a color string into rgba components.\n * @param str\n */\nexport const parseColorString = (\n  str: string\n): [number, number, number, number?] | null => {\n  const result = [parseHexRgba, parseShorthandHex, parseRgb, parseRgba].reduce<\n    (number | undefined)[] | undefined\n  >((result, parse) => result || parse(str), undefined);\n  return Array.isArray(result) &&\n    result.slice(0, 3).every((c) => Number.isInteger(c))\n    ? (result as [number, number, number, number?])\n    : null;\n};\n","import { parseColorString } from \"./parseColorString\";\n\n/**\n * A Color class resembling AWT Color\n */\nexport class Color {\n  public readonly r: number;\n  public readonly g: number;\n  public readonly b: number;\n  public readonly a: number;\n\n  private static readonly FACTOR = 0.7;\n\n  constructor(r: number, g: number, b: number, a?: number);\n  constructor(rgba: string);\n  constructor(rgba: Color);\n  constructor(\n    rgba: string | number | Color,\n    g?: number,\n    b?: number,\n    a: number = 255\n  ) {\n    let r: number;\n    if (typeof rgba === \"string\") {\n      [r = NaN, g = NaN, b = NaN, a = 255] = parseColorString(rgba) || [];\n    } else if (rgba instanceof Color) {\n      [r, g, b, a] = [rgba.r, rgba.g, rgba.b, rgba.a];\n    } else {\n      r = rgba;\n    }\n    this.r = r;\n    this.g = g!;\n    this.b = b!;\n    this.a = a < 1 ? Math.round(a * 255) : a;\n  }\n\n  isValid() {\n    return (\n      Number.isInteger(this.r) &&\n      Number.isInteger(this.g) &&\n      Number.isInteger(this.b) &&\n      Number.isInteger(this.a)\n    );\n  }\n\n  /**\n   * Extra method for changing transparency\n   */\n  withTransparency(alpha: number) {\n    return new Color(this.r, this.g, this.b, alpha);\n  }\n\n  brighter() {\n    let { r, g, b, a: alpha } = this;\n    const int = Math.floor,\n      FACTOR = Color.FACTOR;\n    // The rest is copy paste of java.awt.Color (only `int i` is changed to `let i` :D)\n    let i = int(1.0 / (1.0 - FACTOR));\n    if (r == 0 && g == 0 && b == 0) {\n      return new Color(i, i, i, alpha);\n    }\n    if (r > 0 && r < i) r = i;\n    if (g > 0 && g < i) g = i;\n    if (b > 0 && b < i) b = i;\n\n    return new Color(\n      Math.min(int(r / FACTOR), 255),\n      Math.min(int(g / FACTOR), 255),\n      Math.min(int(b / FACTOR), 255),\n      alpha\n    );\n  }\n\n  darker() {\n    const FACTOR = Color.FACTOR;\n    const int = Math.floor;\n\n    return new Color(\n      Math.max(int(this.r * FACTOR), 0),\n      Math.max(int(this.g * FACTOR), 0),\n      Math.max(int(this.b * FACTOR), 0),\n      this.a\n    );\n  }\n\n  static brighter(color: string): string {\n    // note: we can't type args simply with ConstructorParameters<typeof Color>.\n    // see more: https://github.com/microsoft/TypeScript/issues/37079\n    return new Color(color).brighter().toString();\n  }\n\n  blend(colorOrColorString: Color | string) {\n    const color =\n      typeof colorOrColorString === \"string\"\n        ? new Color(colorOrColorString)\n        : colorOrColorString;\n    const getBlendedValue = (component: \"r\" | \"g\" | \"b\") =>\n      Math.round(\n        (color.a / 255) * color[component] +\n          (this.a / 255) * (1 - color.a / 255) * this[component]\n      );\n    return new Color(\n      getBlendedValue(\"r\"),\n      getBlendedValue(\"g\"),\n      getBlendedValue(\"b\")\n    );\n  }\n\n  toString() {\n    const toString = (component: number) =>\n      Number.isNaN(component) ? \"\" : component.toString(16).padStart(2, \"0\");\n    const r = toString(this.r);\n    const g = toString(this.g);\n    const b = toString(this.b);\n    const a = this.a === 255 ? \"\" : toString(this.a);\n    return `#${r}${g}${b}${a}`;\n  }\n}\n","import React, { CSSProperties, useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport { ResizerProps } from \"../Resizer/ResizerProps\";\nimport { Theme } from \"../Theme/Theme\";\n\n/**\n * Props are named mostly based on ThreeComponentsSplitter in Intellij Platform.\n */\nexport interface ThreeViewSplitterProps {\n  orientation?: \"horizontal\" | \"vertical\";\n  resizerProps?: Partial<\n    Omit<ResizerProps, \"onResize\" | \"onResizeStarted\" | \"onResizeEnd\">\n  >;\n  innerView?: React.ReactNode;\n  innerViewMinSize?: number;\n  firstView?: React.ReactNode;\n  firstSize?: number | null;\n  firstViewMinSize?: number;\n  lastView?: React.ReactNode;\n  lastSize?: number | null;\n  lastViewMinSize?: number;\n  onFirstResize?: (size: number) => void;\n  onLastResize?: (size: number) => void;\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst StyledSplitterContainer = styled.div<{\n  orientation: \"horizontal\" | \"vertical\";\n}>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  flex-direction: ${({ orientation }) =>\n    orientation === \"vertical\" ? \"column\" : \"row\"};\n`;\n\nconst StyledView = styled.div`\n  // The default overflow visible should be changed obviously. Not sure if there is any layout implication\n  // in using 'auto' instead of hidden, to provide scroll behaviour by default, but even if we realize later\n  // that we need to set overflow to hidden here, we can have scrollable content inside the inner view via an\n  // intermediate element inside the inner view, with overflow set to auto and width set to 100%.\n  overflow: auto;\n`;\n\nconst StyledSplitterInnerView = styled(StyledView)`\n  flex: 1;\n`;\n\n/**\n * Corresponding to\n * [ThreeComponentsSplitter](https://github.com/JetBrains/intellij-community/blob/58dbd93e9ea527987466072fa0bfbf70864cd35f/platform/platform-api/src/com/intellij/openapi/ui/ThreeComponentsSplitter.java#L40-L40)\n * `firstView` and `lastView` are optional, and if not provided, the corresponding resizer is not rendered.\n * innerView is supposed to fill the remaining space, while firstView and lastView have specific sizes.\n * size changes in a resize interaction is not reported and is handled by local state in the component. That's\n * to prevent frequent state updates in a higher level which can be expensive. It's also based on this assumption\n * that in the usage side there is no need for any control over resizing or even knowing the intermediate state.\n * Maybe a minSize and maxSize would be the extent of the required control over resizing. But anyway, this model\n * of keeping the size as a local state during a resize session is something that can be changed if needed.\n *\n * Features:\n * - Relative sizing (fraction of the container)\n * - Default size by content\n * - Change handling only when resize is done.\n *\n * TODO: max and min size not implemented\n * TODO: add support for uncontrolled version\n */\nexport const ThreeViewSplitter: React.FC<ThreeViewSplitterProps> = ({\n  orientation = \"horizontal\",\n  firstView,\n  firstSize,\n  lastView,\n  lastSize,\n  onFirstResize,\n  onLastResize,\n  resizerProps: resizerPropsOverrides = {},\n  innerView,\n  firstViewMinSize,\n  lastViewMinSize,\n  innerViewMinSize,\n  ...containerProps\n}: ThreeViewSplitterProps): React.ReactElement => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const firstViewRef = useRef<HTMLDivElement>(null);\n  const lastViewRef = useRef<HTMLDivElement>(null);\n  const [firstSizeState, setFirstSizeState] = useState<number | null>(null);\n  const [lastSizeState, setLastSizeState] = useState<number | null>(null);\n  const theme = useTheme() as Theme;\n\n  const value = <T1, T2>(horizontalValue: T1, verticalValue: T2) =>\n    orientation === \"horizontal\" ? horizontalValue : verticalValue;\n\n  const FirstResizer: React.ComponentType<ResizerProps> = value(\n    RightResizer,\n    BottomResizer\n  );\n  const SecondResizer: React.ComponentType<ResizerProps> = value(\n    LeftResizer,\n    TopResizer\n  );\n  const sizeStyleProp = value(\"width\", \"height\");\n  const minSizeStyleProp = value(\"minWidth\", \"minHeight\");\n\n  const resizerProps: ThreeViewSplitterProps[\"resizerProps\"] = {\n    background: theme.commonColors.contrastBorder,\n    size: 1,\n    ...resizerPropsOverrides,\n  };\n\n  const isFractionSize = (size: number) => size < 1;\n\n  const normalizeSize = (\n    size: number | undefined | null\n  ): CSSProperties[\"width\" | \"height\"] =>\n    size != null\n      ? isFractionSize(size)\n        ? `${size * 100}%`\n        : Math.round(size)\n      : undefined;\n\n  const getSize = (elem: HTMLElement): number =>\n    value(elem.offsetWidth, elem.offsetHeight);\n\n  const getNewSize = (currentSize: number, newSize: number) => {\n    if (currentSize != null && isFractionSize(currentSize)) {\n      if (!containerRef.current) {\n        throw new Error(\n          \"ThreeViewSplitter: Could not locate container to calculate fraction size\"\n        );\n      }\n      const containerSize = value(\n        containerRef.current.offsetWidth,\n        containerRef.current.offsetHeight\n      );\n      const newFractionSize = newSize / containerSize;\n      return newFractionSize < 1 ? newFractionSize : currentSize;\n    } else {\n      return Math.max(newSize, 1);\n    }\n  };\n\n  const getActualSize = (viewElem: HTMLElement | null): number | null => {\n    if (!containerRef.current || !viewElem) {\n      return null;\n    }\n    const actualSize = getSize(viewElem);\n    if (viewElem.style[sizeStyleProp]?.includes(\"%\")) {\n      return actualSize / getSize(containerRef.current);\n    }\n    return actualSize;\n  };\n\n  const currentLastSize = normalizeSize(lastSizeState ?? lastSize);\n  const currentFirstSize = normalizeSize(firstSizeState ?? firstSize);\n  return (\n    <StyledSplitterContainer\n      ref={containerRef}\n      orientation={orientation}\n      {...containerProps}\n    >\n      {firstView && (\n        <>\n          <StyledView\n            ref={firstViewRef}\n            style={{\n              [sizeStyleProp]: currentFirstSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (lastSizeState !== null ? currentFirstSize : undefined) ??\n                firstViewMinSize,\n            }}\n          >\n            {firstView}\n          </StyledView>\n          <FirstResizer\n            onResizeStarted={() => {\n              const size = firstViewRef.current\n                ? getSize(firstViewRef.current)\n                : 0;\n              setFirstSizeState(firstSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (firstSizeState != null) {\n                setFirstSizeState(getNewSize(firstSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(firstViewRef.current);\n              if (actualSize !== null) {\n                onFirstResize?.(actualSize);\n              }\n              setFirstSizeState(null);\n            }}\n            {...resizerProps}\n          />\n        </>\n      )}\n      {innerView && (\n        <StyledSplitterInnerView\n          style={{\n            [minSizeStyleProp]: innerViewMinSize,\n          }}\n        >\n          {innerView}\n        </StyledSplitterInnerView>\n      )}\n      {lastView && (\n        <>\n          <SecondResizer\n            onResizeStarted={() => {\n              const size = getSize(lastViewRef.current!);\n              setLastSizeState(lastSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (lastSizeState != null) {\n                setLastSizeState(getNewSize(lastSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(lastViewRef.current);\n              if (actualSize !== null) {\n                onLastResize?.(actualSize);\n              }\n              setLastSizeState(null);\n            }}\n            {...resizerProps}\n          />\n          <StyledView\n            ref={lastViewRef}\n            style={{\n              [sizeStyleProp]: currentLastSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (firstSizeState !== null ? currentLastSize : undefined) ??\n                lastViewMinSize,\n            }}\n          >\n            {lastView}\n          </StyledView>\n        </>\n      )}\n    </StyledSplitterContainer>\n  );\n};\n","import { isMac } from \"@react-aria/utils\";\nimport React, { HTMLProps, useRef } from \"react\";\nimport { css } from \"styled-components\";\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { Theme } from \"../Theme/Theme\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { Overlay } from \"@react-aria/overlays\";\n\nconst FLOAT_WINDOW_MIN_WIDTH = 100;\nconst FLOAT_WINDOW_MIN_HEIGHT = 40; // in Intellij Platform it's zero but there is window frame which doesn't exist here\n\nconst StyledFloatView = styled.div`\n  box-sizing: border-box;\n  position: fixed;\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  // border color doesn't seem to be correct and needs more investigation. might be even os-specific and outside\n  // theme colors.\n  border: ${({ theme }) => `1px solid ${theme.color(\"Component.borderColor\")}`};\n  ${WINDOW_SHADOW};\n  ${isMac() &&\n  css<{ theme: Theme }>`\n    border-radius: 8px;\n  `}\n  z-index: 2;\n`;\n\n/**\n * Container for tool windows in float view mode. It handles some visual aspects like the border and shadow, as well as\n * UI interactions for changing the floatingBound of the tool window.\n */\nexport const FloatView: React.FC<\n  {\n    state: FloatWindowState;\n    onBoundsChange: (bounds: WindowBounds) => void;\n  } & Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">\n> = ({ children, state: { bounds }, onBoundsChange, ...otherProps }) => {\n  const ref = useRef(null);\n  const { bounds: boundsStyle, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      bounds,\n      onBoundsChange,\n    });\n\n  return (\n    <Overlay>\n      <StyledFloatView\n        {...otherProps}\n        ref={ref}\n        style={{ ...otherProps.style, ...boundsStyle }}\n      >\n        <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n          <OverlayResizeHandles\n            minWidth={FLOAT_WINDOW_MIN_WIDTH}\n            minHeight={FLOAT_WINDOW_MIN_HEIGHT}\n          />\n          {children}\n        </OverlayInteractionHandler>\n      </StyledFloatView>\n    </Overlay>\n  );\n};\n","import { move } from \"ramda\";\nimport React, { HTMLProps, Key, useState } from \"react\";\nimport { FloatView } from \"./FloatView\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\n\n// NOTE: useStackedLayersState and useStackedLayers are generic but kept here since there is no other use case at the\n// moment. They should be moved to their own file(s) when/if other use case came up.\n\ninterface StackedLayersState<T> {\n  /**\n   * Sorted list of items representing layers.\n   */\n  sorted: T[];\n  /**\n   * A function to be used when the layer should be brought to front, typically based on some UI interaction.\n   */\n  bringToFront: (index: number) => void;\n}\n\n/**\n * State management for a stacked list of layers with **bring to front** functionality.\n */\nfunction useStackedLayersState<T, K = React.Key>(\n  /**\n   * A list of arbitrary items representing stacked layers.\n   */\n  items: T[],\n  /**\n   * A function for converting each item into a key which consistently identifies each item, in subsequent renders.\n   * It's used to maintain current sorting state. Although it can be of any type, it's usually a string or number.\n   */\n  getKey: (item: T) => K\n): StackedLayersState<T> {\n  // Local state for now, but can easily change to controllable if needed.\n  const [sortedKeys, setSortedKeys] = useState<K[]>([]);\n  const sorted = items.sort(\n    (a, b) => sortedKeys.indexOf(getKey(a)) - sortedKeys.indexOf(getKey(b))\n  );\n  return {\n    sorted,\n    bringToFront: (index: number) => {\n      setSortedKeys(move(index, -1, sorted).map(getKey));\n    },\n  };\n}\n\n/**\n * Given the state of a stacked list of layers, returns DOM props to be applied to each layer for interaction-based\n * \"bring to front\" behaviour.\n */\nfunction useStackedLayers<T>(state: StackedLayersState<T>): {\n  layersProps: Array<HTMLProps<HTMLElement>>;\n} {\n  return {\n    layersProps: state.sorted.map((_, index) => ({\n      onFocus: () => {\n        state.bringToFront(index);\n      },\n    })),\n  };\n}\n\n/**\n * Renders float tool windows.\n * - handles resize and move actions for float windows.\n * - handles layering of float tool windows.\n */\nexport function FloatToolWindows({\n  floatWindows = [],\n  onBoundsChange,\n  renderToolWindow,\n}: {\n  floatWindows: FloatWindowState[] | undefined;\n  onBoundsChange: (key: Key, bounds: WindowBounds) => void;\n  renderToolWindow: (key: Key) => React.ReactNode;\n}) {\n  const stackedFloatWindows = useStackedLayersState(\n    floatWindows,\n    ({ key }) => key\n  );\n  const { layersProps } = useStackedLayers(stackedFloatWindows);\n  // sorted list is used to render layers. We could as well use z-index and always render with the same order, but\n  // it doesn't really matter as long as key is set.\n  return (\n    <>\n      {stackedFloatWindows.sorted.map((toolWindow, index) => (\n        <FloatView\n          key={toolWindow.key}\n          state={toolWindow}\n          {...layersProps[index]}\n          onBoundsChange={(bounds) => onBoundsChange(toolWindow.key, bounds)}\n        >\n          {renderToolWindow(toolWindow.key)}\n        </FloatView>\n      ))}\n    </>\n  );\n}\n","import React, {\n  Key,\n  MutableRefObject,\n  RefObject,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"../utils/useLatest\";\nimport { DropPosition } from \"./createGetDropPosition\";\nimport { UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor } from \"./utils\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\ntype StripeLocation<T extends unknown> = {\n  index: number;\n  anchor: Anchor;\n  isSplit: boolean;\n};\ntype MovableStripeProps<T> = {\n  stripeElRef: React.RefObject<HTMLElement>;\n  getKey: (item: T) => Key;\n  anchor: Anchor;\n  mainItems: T[];\n  splitItems: T[];\n  createGetDropPosition: (\n    key: Key\n  ) => (draggedRect: Rect) => DropPosition | null;\n};\n\ntype MovableToolWindowStripeContextType<T> = {\n  addStripe: <T>(\n    id: string,\n    propsRef: MutableRefObject<MovableStripeProps<T>>\n  ) => () => void;\n  startMove: (id: string, args: { from: Rect; key: Key }) => void;\n  move: (args: { to: Rect }) => void;\n  endMove: () => void;\n  dropPosition: null | { id: string; dropPosition: DropPosition };\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n};\n\nexport type MovableToolWindowStripeProviderProps<T = unknown> = {\n  children: React.ReactNode;\n  onMove: (args: { from: StripeLocation<T>; to: StripeLocation<T> }) => void;\n};\n\nconst MovableToolWindowStripeContext =\n  React.createContext<MovableToolWindowStripeContextType<any> | null>(null);\n\n/**\n * A wrapper component to render around `ToolWindowStripe`s to make their button movable. Stripe buttons then become\n * draggable and can be moved either within the same `ToolWindowStripe` or across different ones.\n * @param onMove: called when a stripe button is moved from one anchor to another.\n * @param children: child element tree, containing one or more ToolWindowStripe elements. No need to be direct children.\n */\nexport const MovableToolWindowStripeProvider = <T extends unknown>({\n  onMove,\n  children,\n}: MovableToolWindowStripeProviderProps<T>) => {\n  const stripes = useRef<{\n    [id: string]: RefObject<MovableStripeProps<T>>;\n  }>({});\n  const [draggingRect, setDraggingRect] = useState<Rect | null>(null);\n  const [draggingKey, setDraggingKey] = useState<Key | null>(null);\n  const [dropPosition, setDropPosition] = useState<{\n    id: string;\n    dropPosition: DropPosition;\n  } | null>(null);\n  const getDropPositionRef = useRef<\n    (to: Rect) => {\n      id: string;\n      dropPosition: DropPosition;\n    } | null\n  >(() => null);\n  const moveStartLocationRef = useRef<null | {\n    id: string;\n    index: number;\n    anchor: Anchor;\n    isSplit: boolean;\n  }>(null);\n\n  const contextValue = useMemo(\n    (): MovableToolWindowStripeContextType<T> => ({\n      addStripe: (id, propsRef) => {\n        if (stripes.current[id]) {\n          console.error(`multiple stripes with the same id \"${id}`);\n        }\n        // @ts-expect-error\n        stripes.current[id] = propsRef;\n        return () => {\n          delete stripes.current[id];\n        };\n      },\n      startMove: (id, { from, key }) => {\n        const stripe = stripes.current[id]?.current;\n        if (!stripe) {\n          return;\n        }\n        const { stripeElRef } = stripe;\n        const stripeElement = stripeElRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n\n        // Running the following two state setters immediately affect the layout\n        // in a way that is necessary for drop position calculation, so the order\n        // is important\n        setDraggingRect(getItemRect(key).toJSON());\n        setDraggingKey(key);\n\n        const indexInMain = stripe.mainItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        const indexInSplit = stripe.splitItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        moveStartLocationRef.current = {\n          id,\n          anchor: stripe.anchor,\n          index: indexInMain > -1 ? indexInMain : indexInSplit,\n          isSplit: indexInSplit > -1,\n        };\n\n        const dropPositionGetters = Object.entries(stripes.current).map(\n          ([id, stripe]) =>\n            [id, stripe.current!.createGetDropPosition(key)] as const\n        );\n        const getDropPosition = (draggedRect: Rect) => {\n          for (const [id, getDropPosition] of dropPositionGetters) {\n            const dropPosition = getDropPosition(draggedRect);\n            if (dropPosition) {\n              return {\n                id,\n                dropPosition,\n              };\n            }\n          }\n          return null;\n        };\n\n        setDropPosition(getDropPosition(from));\n\n        getDropPositionRef.current = getDropPosition;\n      },\n      move: ({ to }) => {\n        setDropPosition(getDropPositionRef.current(to));\n      },\n      endMove: () => {\n        if (dropPosition && draggingKey) {\n          onMove({\n            from: moveStartLocationRef.current!,\n            to: {\n              anchor: dropPosition.id as Anchor /*FIXME*/,\n              index: dropPosition.dropPosition.index,\n              isSplit: dropPosition.dropPosition.split,\n            },\n          });\n        }\n        setDraggingKey(null);\n        setDropPosition(null);\n        setDraggingRect(null);\n      },\n      dropPosition,\n      draggingRect,\n      draggingKey,\n    }),\n    [dropPosition, draggingKey, draggingRect]\n  );\n\n  return (\n    <MovableToolWindowStripeContext.Provider value={contextValue}>\n      {children}\n    </MovableToolWindowStripeContext.Provider>\n  );\n};\n\nexport function useMovableStripeButtons<T>(props: MovableStripeProps<T>) {\n  // Seems reasonable to assume anchor is unique. Also current onMove signature is coupled with anchor, not a more generic id.\n  const id = props.anchor;\n  const context = useContext(MovableToolWindowStripeContext);\n  const latestPropsRef = useLatest(props);\n  useEffect(() => {\n    if (context) {\n      return context.addStripe(id, latestPropsRef);\n    }\n  }, [context, id]);\n\n  const getProps = (\n    key: Key\n  ): Pick<\n    Required<UseElementMoveOptions<unknown>>,\n    \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n  > & { moveDisabled: boolean } => ({\n    moveDisabled: !context,\n    onMoveStart: ({ from }) => {\n      context?.startMove?.(id, { from, key });\n    },\n    onMove: ({ to }) => {\n      context?.move({ to });\n    },\n    onMoveEnd: () => {\n      context?.endMove();\n    },\n  });\n  return {\n    getProps,\n    draggingRect: context?.draggingRect ?? null,\n    dropPosition:\n      context?.dropPosition?.id === id\n        ? context?.dropPosition.dropPosition\n        : null,\n    draggingKey: context?.draggingKey ?? null,\n  };\n}\n","import { styled } from \"../styled\";\nimport { css } from \"styled-components\";\n\nconst TopStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: ts;\n`;\nconst BottomStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: bs;\n`;\nconst LeftStripe = styled.div`\n  grid-area: ls;\n`;\nconst RightStripe = styled.div`\n  grid-area: rs;\n`;\nconst InnerView = styled.div`\n  grid-area: main;\n  min-height: 0; // necessary to prevent overflow;\n  position: relative; // necessary for undock views which are absolute positioned\n  background: inherit;\n  min-width: 0; // very important for layout. If not set, resizing tool windows can cause weird scrollbar inside tool windows pane.\n`;\n\n/**\n * The container which renders top,bottom,left and right stripes with a centered content.\n * responsible only for the layout of the stripes and the centered content. layout doesn't\n * include the opened tool windows on different sides and is just about the stripes around\n * the center area.\n * It also supports toggling stripes visibility.\n */\nconst Shell = styled.div<{ hideStripes: boolean }>`\n  display: grid;\n  grid-template-columns: min-content auto min-content;\n  grid-template-rows: min-content auto min-content;\n  grid-template-areas:\n    \".   ts   .\"\n    \"ls main rs\"\n    \".   bs   .\";\n\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  ${({ hideStripes }) =>\n    hideStripes &&\n    css`\n      ${TopStripe},\n      ${BottomStripe}, \n      ${LeftStripe}, \n      ${RightStripe} {\n        display: none;\n      }\n    `}\n`;\n\nexport const StyledToolWindowOuterLayout = {\n  Shell,\n  TopStripe,\n  BottomStripe,\n  LeftStripe,\n  RightStripe,\n  InnerView,\n};\n","import { compose, filter, groupBy, map, pipe, prop, sortBy } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\nimport {\n  ToolWindowsState,\n  ToolWindowState,\n  ViewMode,\n} from \"./ToolWindowsState\";\n\ntype ToolWindowStateWithKey = { key: Key } & ToolWindowState;\n\nexport interface StripesState {\n  main: Key[];\n  split: Key[];\n  activeKeys: Key[];\n}\n\n/**\n * Represents UI state of the split view (aka secondary or side view) within a docked view at one of the four sides.\n */\ntype SideDockedSplitState = {\n  key: Key;\n  /**\n   * relative size of the split view inside a docked view. Note that this is intentionally a fraction size (0≤size<1),\n   * based on the expected behaviour. split views inside a docked view are not fixed sized and resizing the window\n   * affect their size. This is not the case for the docked views themselves inside the main layout, which have fixed\n   * size which is not affected by window resizing.\n   */\n  sizeFraction: number;\n};\n\n// A potential improvement for this and similar nullable types like SideDockedState.split might be to avoid null type\n// and have it like { open: false} | {open: true, ...relevantProps}\n// Not sure if it's really preferred in terms of usage in the react component.\nexport type SideDockedState = null | {\n  size: number;\n  mainKey: Key;\n  split: SideDockedSplitState | null;\n};\n\nexport type SideUnDockedState = null | {\n  size: number;\n  key: Key;\n};\n\nexport interface SideState {\n  docked: SideDockedState;\n  undocked: SideUnDockedState;\n  stripes: StripesState;\n}\n\nexport interface FloatWindowState {\n  key: Key;\n  bounds: Exclude<ToolWindowState[\"floatingBounds\"], undefined>;\n}\n\n/**\n * Derived from ToolWindowsState, it represents the same information in a away that is suitable for ToolWindows\n * component to render the layout.\n */\nexport interface ToolWindowsLayoutState {\n  left: SideState;\n  top: SideState;\n  right: SideState;\n  bottom: SideState;\n  floatWindows: Array<FloatWindowState>;\n  windows: Array<FloatWindowState>;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nconst getSizeInAnchor = (containerSize: ContainerSize, anchor: Anchor) =>\n  containerSize[isHorizontalToolWindow(anchor) ? \"height\" : \"width\"];\n\nconst mapToKey = map<ToolWindowStateWithKey, Key>(prop(\"key\"));\nconst sortAndMapToKey = compose(\n  mapToKey,\n  sortBy(({ order }: ToolWindowStateWithKey) => order)\n);\nconst filterMains = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => !isSplit\n);\nconst getMains = compose(sortAndMapToKey, filterMains);\nconst filterSplits = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => isSplit\n);\nconst filterVisible = (expectedViewMode: ViewMode | ViewMode[] = []) =>\n  filter<ToolWindowStateWithKey, \"array\">(\n    ({ viewMode, isVisible }: ToolWindowStateWithKey) =>\n      isVisible &&\n      ([] as ViewMode[]).concat(expectedViewMode).includes(viewMode)\n  );\nconst getSplits = compose(sortAndMapToKey, filterSplits);\n\nconst filterVisibleDocked = filterVisible([\"docked_unpinned\", \"docked_pinned\"]);\nconst filterVisibleUnDocked = filterVisible(\"undock\");\n\nconst getDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideDockedState => {\n  const docks = filterVisibleDocked(toolWindows);\n  const mains = filterMains(docks);\n  const splits = filterSplits(docks);\n  if (mains.length > 1 || splits.length > 1) {\n    throw new Error(\n      \"More than one visible docked window in a side is not possible\"\n    );\n  }\n  if (mains[0] || splits[0]) {\n    const weight = mains[0]?.weight || splits[0]?.weight;\n    return {\n      mainKey: mains[0]?.key || splits[0]?.key,\n      split:\n        mains[0]?.key && splits[0]?.key\n          ? {\n              key: splits[0].key,\n              sizeFraction: mains[0].weight\n                ? 1 - mains[0].sideWeight\n                : splits[0].sideWeight,\n            }\n          : null,\n      size: weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  return null;\n};\n\nconst getUnDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideUnDockedState => {\n  const windows = filterVisibleUnDocked(toolWindows);\n  if (windows.length === 1) {\n    return {\n      key: windows[0].key,\n      size: windows[0].weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  if (windows.length === 0) {\n    return null;\n  }\n  throw new Error(\n    \"More than one visible undocked window in a side is not possible\"\n  );\n};\n\nconst getSideState = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideState => ({\n  stripes: {\n    main: getMains(toolWindows),\n    split: getSplits(toolWindows),\n    activeKeys: mapToKey(toolWindows.filter(({ isVisible }) => isVisible)),\n  },\n  undocked: getUnDocked(anchor, containerSize, toolWindows),\n  docked: getDocked(anchor, containerSize, toolWindows),\n});\n\nconst DEFAULT_HEIGHT = 300;\nconst DEFAULT_WIDTH = 400;\nconst getFloatWindowState =\n  (containerSize: ContainerSize) =>\n  ({\n    floatingBounds: bounds = {\n      top: containerSize.height / 2 - DEFAULT_HEIGHT / 2,\n      left: containerSize.width / 2 - DEFAULT_WIDTH / 2,\n      height: DEFAULT_HEIGHT,\n      width: DEFAULT_WIDTH,\n    },\n    key,\n  }: ToolWindowStateWithKey): FloatWindowState => ({ bounds, key });\n\nconst getFloatWindowsState = (\n  viewMode: \"float\" | \"window\",\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n) =>\n  pipe(\n    filterVisible(viewMode),\n    map<ToolWindowStateWithKey, FloatWindowState>(\n      getFloatWindowState(containerSize)\n    )\n  )(toolWindows);\n\nexport function getToolWindowsLayoutState(\n  state: Readonly<ToolWindowsState>,\n  containerSize: ContainerSize,\n  /**\n   * list of valid window ids. If state contains window ids that are not included here, they will be excluded in\n   * the returned state object.\n   */\n  windowIds: string[] = Object.keys(state.windows)\n): ToolWindowsLayoutState {\n  const toolWindows = Object.keys(state.windows)\n    .filter(\n      (key) => windowIds.includes(key) && !state.removedFromSideBarIds.has(key)\n    )\n    .map((key) => ({\n      ...state.windows[key],\n      key,\n    }));\n  const {\n    top = [],\n    bottom = [],\n    left = [],\n    right = [],\n  } = groupBy(({ anchor }) => anchor, toolWindows);\n  return {\n    left: getSideState(\"left\", containerSize, left),\n    top: getSideState(\"top\", containerSize, top),\n    right: getSideState(\"right\", containerSize, right),\n    bottom: getSideState(\"bottom\", containerSize, bottom),\n    windows: getFloatWindowsState(\"window\", containerSize, toolWindows),\n    floatWindows: getFloatWindowsState(\"float\", containerSize, toolWindows),\n  };\n}\n","import { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { Key } from \"react\";\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface DropPosition {\n  index: number;\n  split: boolean;\n\n  relative?: {\n    placement: \"before\" | \"after\";\n    key: Key;\n  };\n}\n\n/**\n * TODO: Add a few words about what this function do.\n */\nexport const createGetDropPosition = <T extends any>({\n  anchor,\n  stripeElement,\n  splitItems,\n  mainItems,\n  getItemRect,\n  getKey,\n}: {\n  stripeElement: HTMLElement;\n  anchor: Anchor;\n  getItemRect: (key: Key) => Rect;\n  getKey: (key: T) => Key;\n  mainItems: T[];\n  splitItems: T[];\n}): ((draggedRect: Rect) => DropPosition | null) => {\n  // Note: It may be tempting to calculate stripe element boundaries just once\n  // here, since it's not supposed to change during a drag session, but it\n  // can change due to getting empty when the only button is being dragged out.\n  const getStripeRect = () => stripeElement.getBoundingClientRect();\n\n  const getCanDrop = (draggingRect: Rect) => {\n    const stripeRect = getStripeRect();\n    return (\n      draggingRect.right > stripeRect.left - stripeRect.width &&\n      draggingRect.left < stripeRect.right &&\n      draggingRect.bottom > stripeRect.top - stripeRect.height &&\n      draggingRect.top < stripeRect.bottom\n    );\n  };\n\n  const start = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.left : rect.top;\n  const end = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.right : rect.bottom;\n\n  const getKeyToOffsets = (items: T[]) => {\n    const keyToOffsets: Record<Key, { start: number; end: number }> = {};\n    items.forEach((item) => {\n      const key = getKey(item);\n      const boundingRect = getItemRect(key);\n      keyToOffsets[key] = {\n        start: start(boundingRect),\n        end: end(boundingRect),\n      };\n    });\n    return keyToOffsets;\n  };\n\n  const getDropPositions = (\n    items: T[],\n    split = false\n    // FIXME: score is a bad name. it's quite the opposite! the less means the higher score.\n  ): Array<DropPosition & { score: (rect: Rect) => number }> => {\n    const getRef = split ? end : start;\n    if (items.length === 0) {\n      // if the section is empty, we should still allow adding to it.\n      return [\n        {\n          index: 0,\n          split,\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - getRef(getStripeRect())),\n        },\n      ];\n    }\n    return items.flatMap((item, index) => {\n      const key = getKey(item);\n      return [\n        {\n          index,\n          split,\n          relative: { key, placement: \"before\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].start),\n        },\n        {\n          index: index + 1,\n          split,\n          relative: { key, placement: \"after\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].end),\n        },\n      ];\n    });\n  };\n\n  const keyToOffsets = getKeyToOffsets([...mainItems, ...splitItems]);\n\n  const dropPositions = [\n    ...getDropPositions(mainItems),\n    ...getDropPositions(splitItems, true),\n  ];\n\n  let lastDropPosition: DropPosition | null = null;\n  return (draggingRect: Rect) => {\n    if (!getCanDrop(draggingRect)) {\n      return null;\n    }\n    const result = dropPositions.reduce(\n      (bestMatch, candidate) => {\n        const score = candidate.score(draggingRect);\n        if (!bestMatch || score < bestMatch.score) {\n          return {\n            ...candidate,\n            score,\n          };\n        }\n        return bestMatch;\n      },\n      null as\n        | null\n        | (DropPosition & {\n            score: number;\n          })\n    );\n\n    if (!result) {\n      return null;\n    }\n    if (\n      result.split !== lastDropPosition?.split ||\n      result.index !== lastDropPosition?.index\n    ) {\n      lastDropPosition = result;\n    }\n    return lastDropPosition;\n  };\n};\n","import { StyledIconWrapper } from \"../Icon/StyledIconWrapper\";\nimport { styled } from \"../styled\";\nimport React from \"react\";\nimport { css } from \"styled-components\";\nimport { Anchor } from \"./utils\";\n\nexport interface StyledToolWindowStripeButtonProps {\n  anchor: Anchor;\n  active?: boolean;\n}\n\nexport const STRIPE_BUTTON_CROSS_PADDING = 2.5;\nexport const STRIPE_BUTTON_LINE_HEIGHT = \"1rem\";\n\nconst anchorStyles = ({ anchor }: { anchor: Anchor }) => {\n  const orientation =\n    anchor === \"left\" || anchor === \"right\" ? \"vertical\" : \"horizontal\";\n\n  return orientation === \"horizontal\"\n    ? css`\n        padding: ${STRIPE_BUTTON_CROSS_PADDING}px 10px;\n      `\n    : css`\n        padding: 10px ${STRIPE_BUTTON_CROSS_PADDING}px;\n        writing-mode: vertical-lr;\n        // writing-mode: sideways-lr is not supported anywhere other than FF, so, we need to rotate\n        transform: ${anchor === \"left\" ? \"rotateZ(180deg)\" : undefined};\n\n        // icons are not rotated like text in Intellij Platform implementation. It kind of makes sense.\n        ${StyledIconWrapper} {\n          transform: rotate(180deg);\n        }\n      `;\n};\n\nexport const StyledToolWindowStripeButton = styled.span<StyledToolWindowStripeButtonProps>`\n  box-sizing: border-box;\n  display: flex; // to allow icon and text alignment by default;\n  align-items: center;\n  cursor: default;\n  user-select: none;\n  overflow: hidden;\n  direction: ltr;\n  flex-shrink: 0;\n  font-size: 0.7rem;\n  line-height: ${STRIPE_BUTTON_LINE_HEIGHT}; // absolute value seems to be problematic when the base font size is changed\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedForeground\",\n          theme.dark ? \"rgb(255,255,255)\" : \"rgb(0,0,0)\"\n        )\n      : theme.color(\"*.foreground\")};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedBackground\",\n          theme.dark ? \"rgba(15,15,15,.332)\" : \"rgba(85,85,85,.332)\"\n        )\n      : undefined};\n\n  ${anchorStyles}\n  ${({ active }) =>\n    !active &&\n    css`\n      &:hover {\n        background: ${({ theme }) =>\n          theme.color(\n            \"ToolWindow.Button.hoverBackground\",\n            theme.dark ? \"rgba(15,15,15,.156)\" : \"rgba(85,85,85,.156)\"\n          )};\n      }\n    `};\n`;\n","import {\n  STRIPE_BUTTON_CROSS_PADDING,\n  STRIPE_BUTTON_LINE_HEIGHT,\n  StyledToolWindowStripeButton,\n} from \"./StyledToolWindowStripeButton\";\nimport { Anchor, isHorizontalToolWindow, theOtherSide } from \"./utils\";\nimport { css } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { styled } from \"../styled\";\nimport { Color } from \"../Theme/Color\";\n\nconst minHeight = `calc(${STRIPE_BUTTON_LINE_HEIGHT} + ${\n  2 * STRIPE_BUTTON_CROSS_PADDING + 1 /*border*/\n}px)`;\n\nconst anchorStyles = ({\n  anchor,\n  preventCollapse,\n}: StyledToolWindowStripeProps) =>\n  isHorizontalToolWindow(anchor)\n    ? css`\n        flex-direction: row;\n        width: 100%;\n        min-height: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          height: 1.25rem;\n        }\n      `\n    : css`\n        flex-direction: column;\n        height: 100%;\n        min-width: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          width: 1.25rem;\n        }\n      `;\nconst borderStyle = ({ anchor, theme }: { anchor: Anchor; theme: Theme }) =>\n  css`border-${theOtherSide(anchor)}: 1px solid ${\n    theme.commonColors.contrastBorder\n  }`;\n\nexport interface StyledToolWindowStripeProps {\n  anchor: Anchor;\n  highlighted?: boolean;\n  preventCollapse?: boolean;\n}\n\nexport const StyledToolWindowStripe = styled.div<StyledToolWindowStripeProps>`\n  box-sizing: border-box;\n  background: ${({ theme, highlighted }) =>\n    highlighted\n      ? Color.brighter(theme.commonColors.panelBackground)\n      : theme.commonColors.panelBackground};\n  display: inline-flex;\n  overflow: hidden;\n  ${borderStyle};\n  ${anchorStyles}\n`;\n\nexport const StyledSpacer = styled.div`\n  flex: 1;\n`;\n","import { RefObject } from \"react\";\nimport {\n  useMove,\n  UseMoveOptions,\n  XY,\n} from \"../utils/interaction-utils/useMove\";\nimport { findEffectiveBackgroundColor } from \"./findEffectiveBackgroundColor\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface UseElementMoveOptions<S>\n  extends Omit<UseMoveOptions<S>, \"onMoveStart\" | \"onMove\"> {\n  ref: RefObject<HTMLElement>;\n  /**\n   * if true a clone of the element is created and used as ghost.\n   * A function can be passed to customize the default ghost element or return a completely\n   * different one.\n   */\n  ghost?: boolean | ((defaultGhost: HTMLElement) => HTMLElement);\n\n  onMoveStart: (args: { from: Rect }) => S;\n  onMove: (args: { from: Rect; to: Rect; movement: XY; startState: S }) => void;\n}\n\n/**\n * Provides necessary event handling props to be applied on an element to make it movable.\n * It's implemented on top of {@link useMove}. The differences are:\n * - The signature of `onMoveStart`, `onMove` and `onMoveEnd` are changed to pass\n *   {@link Rect} instead of {@link XY}.\n * - rendering a ghost element.\n *\n * ## A note about ghost:\n * There is no easy way to create a snapshot image of an html element. Native drag and drop API\n * supports [setting drag\n * image](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage) but we are\n * not using drag events mainly because of not being able to customize the offset after which drag\n * should start. See {@link UseMoveOptions#dragThreshold dragThreshold} for more details. There are\n * some libraries like html2canvas for creating an image from an html element, but they are very\n * big and using them doesn't make sense at all from a value/cost ratio perspective. There might be\n * some ways of implementing custom move threshold on top of native drag events. For example by\n * delaying the call to setDragImage, but it needs more investigation. Also, not sure if opacity of\n * the ghost is something you can control when using setDragImage.\n **/\nexport function useElementMove<S>({\n  ref,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  ghost: ghostOption,\n  ...otherOptions\n}: UseElementMoveOptions<S>) {\n  return useMove({\n    ...otherOptions,\n    onMoveStart: () => {\n      const element = ref.current;\n      let ghost: HTMLElement | null = null;\n      if (!element) {\n        throw new Error(\n          \"Movement started but ref value is null. Make sure the passed ref is applied on the same element that other props are.\"\n        );\n      }\n      const updateGhostPosition = (rect: Rect) => {\n        if (ghost) {\n          ghost.style.left = `${rect.left}px`;\n          ghost.style.top = `${rect.top}px`;\n        }\n      };\n      const from: Rect = element.getBoundingClientRect();\n      if (ghostOption) {\n        const defaultGhost = createDefaultGhost(element);\n        ghost =\n          typeof ghostOption === \"function\"\n            ? ghostOption(defaultGhost) || defaultGhost\n            : defaultGhost;\n        ghost.style.position = \"fixed\";\n        document.body.append(ghost);\n        updateGhostPosition(from);\n      }\n      return {\n        ghost,\n        from,\n        updateGhostPosition,\n        startState: onMoveStart({ from }),\n      };\n    },\n    onMove: ({\n      movement,\n      startState: { from, updateGhostPosition, startState },\n    }) => {\n      const to: Rect = {\n        left: from.left + movement.x,\n        right: from.right + movement.x,\n        top: from.top + movement.y,\n        bottom: from.bottom + movement.y,\n        height: from.height,\n        width: from.width,\n      };\n      updateGhostPosition(to);\n      onMove({ from, to, movement, startState });\n    },\n    onMoveEnd: ({ startState: { ghost, startState } }) => {\n      ghost?.remove();\n      onMoveEnd?.({ startState });\n    },\n  });\n}\n\nfunction createDefaultGhost(element: HTMLElement) {\n  const ghost = element.cloneNode(true) as HTMLElement;\n  ghost.style.backgroundColor = findEffectiveBackgroundColor(element);\n  return ghost;\n}\n","import { Color } from \"../Theme/Color\";\n\n/**\n * Computes the effective background color of the element by blending translucent backgrounds of\n * the elements ancestors. It traverses up the parents, until reaches a solid background color.\n * all translucent backgrounds in between are blended with that solid color, with respect to their\n * transparency. It's meant to be used only for the simple cases where an element doesn't overflow\n * the parents. Obviously, in other cases there won't be one single effective background color\n * for the element.\n */\nexport function findEffectiveBackgroundColor(element: HTMLElement): string {\n  let elem: HTMLElement | null = element;\n  let colors: Color[] = [];\n  while (elem != null) {\n    const computedBackground = getComputedStyle(elem).backgroundColor;\n    if (computedBackground) {\n      const color = new Color(computedBackground);\n      colors.unshift(color);\n      if (color.a === 255) {\n        // if we've reached a solid color, we don't need to continue traversing ancestors\n        break;\n      }\n    }\n    elem = elem.parentElement;\n  }\n  return (\n    colors\n      .reduce<Color | null>((resultColor, nextColor) => {\n        return resultColor ? resultColor.blend(nextColor) : nextColor;\n      }, null)\n      ?.toString() || \"\"\n  );\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport React, { CSSProperties, HTMLAttributes, Key, useRef } from \"react\";\nimport { createGetDropPosition, DropPosition } from \"./createGetDropPosition\";\nimport { useMovableStripeButtons } from \"./MovableToolWindowStripeProvider\";\nimport { StyledSpacer, StyledToolWindowStripe } from \"./StyledToolWindowStripe\";\nimport { StyledToolWindowStripeButton } from \"./StyledToolWindowStripeButton\";\nimport { useElementMove, UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\ninterface ToolWindowStripeProps<T> {\n  anchor: Anchor;\n  items: T[];\n  splitItems?: T[];\n  getKey: (item: T) => Key;\n  renderItem: (item: T) => React.ReactNode;\n  selectedKeys?: Key[];\n  onItemPress?: (key: Key) => void;\n}\n\n/**\n * TODO: refactor to remove the key based interface.\n */\nexport function ToolWindowStripe<T>({\n  anchor,\n  items: mainItems,\n  renderItem: render,\n  splitItems = [],\n  selectedKeys = [],\n  onItemPress,\n  getKey,\n}: ToolWindowStripeProps<T>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { getProps, draggingRect, draggingKey, dropPosition } =\n    useMovableStripeButtons({\n      stripeElRef: containerRef,\n      getKey,\n      anchor,\n      mainItems,\n      splitItems,\n      createGetDropPosition: (key: Key) => {\n        const isNotCurrentItem = (anItem: T) => getKey(anItem) !== key;\n        const stripeElement = containerRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n        return createGetDropPosition({\n          stripeElement: stripeElement,\n          mainItems: mainItems.filter(isNotCurrentItem),\n          splitItems: splitItems.filter(isNotCurrentItem),\n          getKey,\n          anchor,\n          getItemRect,\n        });\n      },\n    });\n\n  const highlighted =\n    dropPosition != null &&\n    draggingKey != null &&\n    [...mainItems, ...splitItems].every((item) => getKey(item) !== draggingKey);\n\n  const renderItem = (item: T) => {\n    const key = getKey(item);\n\n    return (\n      <ToolWindowStripeButton\n        anchor={anchor}\n        key={key}\n        data-key={key}\n        style={{\n          ...getStripeButtonStyles({\n            key,\n            dropPosition,\n            anchor,\n            draggingRect,\n            draggingKey,\n          }),\n        }}\n        {...getProps(key)}\n        active={selectedKeys.includes(key)}\n        onPress={() => onItemPress?.(key)}\n      >\n        {render(item)}\n      </ToolWindowStripeButton>\n    );\n  };\n  return (\n    <>\n      <StyledToolWindowStripe\n        anchor={anchor}\n        preventCollapse={Boolean(dropPosition)}\n        highlighted={highlighted}\n        ref={containerRef}\n      >\n        {mainItems.map(renderItem)}\n        <StyledSpacer />\n        {splitItems.map(renderItem)}\n      </StyledToolWindowStripe>\n    </>\n  );\n}\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nfunction getStripeButtonStyles({\n  anchor,\n  key,\n  dropPosition,\n  draggingRect,\n  draggingKey,\n}: {\n  anchor: Anchor;\n  key: Key;\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n  dropPosition: DropPosition | null;\n}) {\n  const styles: CSSProperties = {\n    // transition: \"margin 100ms\", // maybe only when drag is in progress, if unwanted transition at drop\n  };\n  if (dropPosition?.relative?.key === key && draggingRect) {\n    const marginValue = isHorizontalToolWindow(anchor)\n      ? draggingRect.width\n      : draggingRect.height;\n\n    if (isHorizontalToolWindow(anchor)) {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginLeft\"\n          : \"marginRight\"\n      ] = marginValue;\n    } else {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginTop\"\n          : \"marginBottom\"\n      ] = marginValue;\n    }\n  }\n  if (key === draggingKey) {\n    styles.display = \"none\";\n  }\n  return styles;\n}\n\nfunction ToolWindowStripeButton<T, S>({\n  children,\n  anchor,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  onPress,\n  moveDisabled,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  anchor: Anchor;\n  style: CSSProperties;\n  active: boolean;\n  onPress: () => void;\n  moveDisabled?: boolean;\n  onMoveStart: UseElementMoveOptions<S>[\"onMoveStart\"];\n  onMove: UseElementMoveOptions<S>[\"onMove\"];\n  onMoveEnd: UseElementMoveOptions<S>[\"onMoveEnd\"];\n}) {\n  const ref = useRef<HTMLElement>(null);\n\n  // for some reason, usePress and useMove (used in useElementMove) are not compatible.\n  // it seems onMouseDown in useMove is not called, even when handlers are merged by mergeProps.\n  // FIXME: fix compatibility of useMove and usePress, and switch to usePress({ onPress })\n  const { pressProps } = {\n    pressProps: {\n      onPointerUp: onPress,\n      onMouseDown: (e) => {\n        e.preventDefault();\n      },\n    } as HTMLAttributes<HTMLElement>,\n  }; //usePress({ onPress });\n  const props = useElementMove({\n    ref,\n    disabled: moveDisabled,\n    dragThreshold: 7,\n    ghost: true,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n  });\n\n  return (\n    <StyledToolWindowStripeButton\n      anchor={anchor}\n      {...mergeProps(otherProps, pressProps, props)}\n      ref={ref}\n    >\n      {children}\n    </StyledToolWindowStripeButton>\n  );\n}\n","import React from \"react\";\nimport { css } from \"styled-components\";\nimport { ResizableView } from \"../ResizableView\";\nimport { styled } from \"../styled\";\nimport { SideUnDockedState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nexport const StyledUndockSide = styled.div<{ anchor: Anchor }>`\n  position: absolute;\n  background: inherit;\n  z-index: 1;\n  ${({ anchor }) =>\n    isHorizontalToolWindow(anchor)\n      ? css`\n          left: 0;\n          right: 0;\n        `\n      : css`\n          top: 0;\n          bottom: 0;\n        `};\n  ${({ anchor }) =>\n    css`\n      ${anchor}: 0;\n    `};\n`;\n\nexport function UndockSide({\n  state,\n  anchor,\n  children,\n  onResize,\n}: {\n  state: Exclude<SideUnDockedState, null>;\n  anchor: Anchor;\n  children: React.ReactNode;\n  onResize: (size: number) => void;\n}) {\n  return (\n    state && (\n      <StyledUndockSide anchor={anchor}>\n        <ResizableView\n          orientation={\n            isHorizontalToolWindow(anchor) ? \"vertical\" : \"horizontal\"\n          }\n          resizerPlacement={\n            anchor === \"left\" || anchor === \"top\" ? \"after\" : \"before\"\n          }\n          size={state.size}\n          onResize={onResize}\n        >\n          {children}\n        </ResizableView>\n      </StyledUndockSide>\n    )\n  );\n}\n","import { indexBy } from \"ramda\";\nimport React, {\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n  Key,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nimport { ThreeViewSplitter } from \"../ThreeViewSplitter/ThreeViewSplitter\";\nimport { FocusScope } from \"../utils/FocusScope\";\nimport { FloatToolWindows } from \"./FloatToolWindows\";\nimport { MovableToolWindowStripeProvider } from \"./MovableToolWindowStripeProvider\";\nimport { StyledToolWindowOuterLayout } from \"./StyledToolWindowOuterLayout\";\nimport {\n  getToolWindowsLayoutState,\n  SideDockedState,\n  StripesState,\n  ToolWindowsLayoutState,\n} from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { ToolWindowsState } from \"./ToolWindowsState/ToolWindowsState\";\nimport { ToolWindowStateProvider } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { ToolWindowStripe } from \"./ToolWindowStripe\";\nimport { UndockSide } from \"./UndockSide\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { useOnFocusLost } from \"./useOnFocusLost\";\nimport { useInteractOutside } from \"@react-aria/interactions\";\n\ninterface ToolWindow {\n  id: string;\n  toolbarButton: React.ReactNode;\n  content: React.ReactNode;\n}\n\nexport interface ToolWindowsProps {\n  children: React.ReactNode;\n  windows: ToolWindow[];\n  toolWindowsState: Readonly<ToolWindowsState>;\n  onToolWindowStateChange: (newState: ToolWindowsState) => void;\n\n  /**\n   * Whether stripe buttons should be hidden or not.\n   * `hideToolStripes` UISettings in Intellij Platform\n   */\n  hideToolWindowBars?: boolean;\n\n  /**\n   *\n   * `wideScreenSupport` in UISettings in Intellij Platform\n   */\n  useWidescreenLayout?: boolean;\n\n  /**\n   * min width applied to the main content (children).\n   * @default 50\n   */\n  mainContentMinWidth?: number;\n\n  height?: CSSProperties[\"height\"];\n  minHeight?: CSSProperties[\"minHeight\"];\n  margin?: CSSProperties[\"margin\"];\n\n  /**\n   * props to be passed to the container element.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\">;\n}\n\nexport interface ToolWindowRefValue {\n  focus(key: Key): void;\n  hasFocus(key: Key): void;\n  focusLastActiveWindow(): void;\n  focusMainContent(): void;\n  changeState(\n    updater: (currentState: Readonly<ToolWindowsState>) => ToolWindowsState\n  ): void;\n}\n\n/**\n * @constructor\n *\n * Corresponding to ToolWindowPane in Intellij Platform\n *\n * Known issues:\n * - in Firefox and Safari, left and right toolbars are not properly shown. Seems like a nasty bug, since adding and\n * then removing some min-width: fit-content style fixes it.\n * - in the dock view of a side, open only a window from the split ones. then open a window from main ones.\n *   focus is not moved to the just opened window. The reason is we rely on autofocusing and because the React tree\n *   changes for both windows, even the split one which was open will be unmounted and mounted again, and since it's\n *   placed after the main one, and hence mounted later, it will get the focus again. This becomes a bigger issue\n *   if the main one is unpinned, because it immediately gets closed after opening.\n *   Possible solutions:\n *   - make sure the split one won't unmount and mount again in such scenario.\n *   - decouple focusing logic from mounting logic, and only focus windows somehow, when the `isVisible` is changed\n *     from false to true, not when mounted.\n * - related to previous issue: open a tool window in split section of a side. set view mode for a tool window in main\n *   section of the same side to docked_unpinned. try to open the unpinned one while the split one is open. it doesn't\n *   work.\n */\nexport const ToolWindows = React.forwardRef(function ToolWindows(\n  {\n    hideToolWindowBars = false,\n    useWidescreenLayout = false,\n    height = \"100%\",\n    minHeight = \"0\",\n    toolWindowsState,\n    onToolWindowStateChange,\n    windows,\n    children,\n    mainContentMinWidth = 50,\n    containerProps = {},\n  }: ToolWindowsProps,\n  ref: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const windowsById = indexBy(({ id }) => id, windows);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mainContentFocusScopeRef =\n    useRef<React.ComponentRef<typeof FocusScope>>(null);\n  const [layoutState, setLayoutState] = useState<ToolWindowsLayoutState>();\n  const windowFocusableRefs = useRef<{\n    [key: string]: React.RefObject<React.ComponentRef<typeof FocusScope>>;\n  }>({});\n\n  const latestRef = useLatest({ toolWindowsState, onToolWindowStateChange });\n\n  useLayoutEffect(() => {\n    const container = containerRef.current;\n    const _setLayoutState = () =>\n      setLayoutState(\n        getToolWindowsLayoutState(\n          toolWindowsState,\n          container!.getBoundingClientRect(),\n          windows.map(({ id }) => id)\n        )\n      );\n\n    // If container is rendered but has zero dimensions for any reason, we start observing size changes, until\n    // it's no longer collapsed. Note that we don't want to unconditionally observe resizes and update the layout state.\n    // because tool windows are not supposed to keep the fraction width as the window resizes. They are supposed to have\n    // a fixed width which is determined fraction-based, but only when the tool window is opened. In fact, updating the\n    // layout state, on each and every change to toolWindowsState is also not quite correct, as some state changes\n    // are unrelated and shouldn't cause a re-calculation of the size. FIXME: don't re-calculate fraction base sizes on\n    //  every state change.\n    if (container?.offsetWidth === 0 || container?.offsetHeight === 0) {\n      const observer = new ResizeObserver(([resize]) => {\n        if (resize.contentRect.width > 0 && resize.contentRect.height > 0) {\n          _setLayoutState();\n          observer.unobserve(container);\n        }\n      });\n      observer.observe(container);\n    }\n    _setLayoutState();\n  }, [toolWindowsState]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (key: Key) => {\n        windowFocusableRefs.current[key]?.current?.focus();\n      },\n      hasFocus: (key: Key) =>\n        document.activeElement?.closest(`[data-tool-window-id=\"${key}\"]`) !==\n        null,\n      focusLastActiveWindow: () => {\n        const { lastFocusedKey } = latestRef.current.toolWindowsState;\n        if (lastFocusedKey != null) {\n          if (\n            !latestRef.current.toolWindowsState.windows[lastFocusedKey]\n              .isVisible\n          ) {\n            latestRef.current.onToolWindowStateChange(\n              toolWindowsState.show(lastFocusedKey)\n            );\n          }\n          windowFocusableRefs.current[lastFocusedKey].current?.focus(true);\n        }\n      },\n      focusMainContent: () => {\n        mainContentFocusScopeRef.current?.focus();\n      },\n      changeState: (updater) => {\n        onToolWindowStateChange(updater(latestRef.current.toolWindowsState));\n      },\n    }),\n    []\n  );\n\n  const interactionOutsideRef = useRef(false);\n  useInteractOutside({\n    ref: containerRef,\n    onInteractOutsideStart: () => {\n      interactionOutsideRef.current = true;\n    },\n    onInteractOutside: () => {\n      interactionOutsideRef.current = false;\n    },\n  });\n\n  useOnFocusLost(({ focusReceivingElement }) => {\n    if (!focusReceivingElement && !interactionOutsideRef.current) {\n      mainContentFocusScopeRef.current?.focus();\n    }\n  }, containerRef);\n\n  // TODO: extract component candidate\n  const renderStripe = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: StripesState;\n  }) => (\n    <ToolWindowStripe\n      anchor={anchor}\n      items={state.main}\n      splitItems={state.split}\n      getKey={(item) => item}\n      renderItem={(item) => windowsById[item]?.toolbarButton}\n      onItemPress={(key) =>\n        onToolWindowStateChange(toolWindowsState.toggle(key))\n      }\n      selectedKeys={state.activeKeys}\n    />\n  );\n\n  const renderToolWindow = (key: Key) => {\n    if (!windowFocusableRefs.current[key]) {\n      windowFocusableRefs.current[key] = React.createRef();\n    }\n    return (\n      <div\n        style={{ all: \"unset\" }}\n        data-tool-window-id={key}\n        onFocus={() => {\n          onToolWindowStateChange(toolWindowsState.lastFocused(key));\n        }}\n      >\n        <FocusScope ref={windowFocusableRefs.current[key]}>\n          <ToolWindowStateProvider\n            id={key}\n            containerRef={containerRef}\n            mainContentFocusableRef={mainContentFocusScopeRef}\n            toolWindowsState={toolWindowsState}\n            onToolWindowStateChange={onToolWindowStateChange}\n          >\n            {windowsById[key]?.content}\n          </ToolWindowStateProvider>\n        </FocusScope>\n      </div>\n    );\n  };\n  // TODO: candidate for component extraction\n  const renderSideDockedView = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: SideDockedState;\n  }) => {\n    if (!state) {\n      return null;\n    }\n    return (\n      <ThreeViewSplitter\n        innerView={renderToolWindow(state.mainKey)}\n        innerViewMinSize={50}\n        lastView={state.split && renderToolWindow(state.split.key)}\n        lastSize={state.split?.sizeFraction}\n        onLastResize={(newSize) => {\n          onToolWindowStateChange(\n            toolWindowsState.resizeDockSplitView(anchor, newSize)\n          );\n        }}\n        orientation={isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\"}\n      />\n    );\n  };\n  const onDockResize = (anchor: Anchor) => (size: number) => {\n    const containerBounds = containerRef.current?.getBoundingClientRect();\n    // containerBounds should have value in normal course of events\n    if (containerBounds) {\n      onToolWindowStateChange(\n        toolWindowsState.resizeDock(anchor, size, containerBounds)\n      );\n    }\n  };\n  const getSplitViewProps = (\n    layoutState: ToolWindowsLayoutState,\n    orientation: \"horizontal\" | \"vertical\"\n  ) => {\n    const firstAnchor = orientation === \"horizontal\" ? \"left\" : \"top\";\n    const secondAnchor = orientation === \"horizontal\" ? \"right\" : \"bottom\";\n    return {\n      orientation,\n      firstView: renderSideDockedView({\n        anchor: firstAnchor,\n        state: layoutState[firstAnchor].docked,\n      }),\n      firstSize: layoutState[firstAnchor].docked?.size,\n      onFirstResize: onDockResize(firstAnchor),\n      lastView: renderSideDockedView({\n        anchor: secondAnchor,\n        state: layoutState[secondAnchor].docked,\n      }),\n      lastSize: layoutState[secondAnchor].docked?.size,\n      onLastResize: onDockResize(secondAnchor),\n    };\n  };\n  const renderInnerLayout = (layoutState: ToolWindowsLayoutState) => {\n    const horizontalSplitterProps = getSplitViewProps(\n      layoutState,\n      \"horizontal\"\n    );\n    const verticalSplitterProps = getSplitViewProps(layoutState, \"vertical\");\n\n    const [outerSplitterProps, innerSplitterProps] = useWidescreenLayout\n      ? [horizontalSplitterProps, verticalSplitterProps]\n      : [verticalSplitterProps, horizontalSplitterProps];\n\n    const undockLayers = ([\"left\", \"top\", \"right\", \"bottom\"] as const).map(\n      (anchor) => {\n        const state = layoutState[anchor].undocked;\n        return (\n          state && (\n            <UndockSide\n              key={anchor}\n              anchor={anchor}\n              state={state}\n              onResize={(size) => {\n                containerRef.current &&\n                  onToolWindowStateChange(\n                    toolWindowsState.resizeUndock(\n                      anchor,\n                      size,\n                      containerRef.current.getBoundingClientRect()\n                    )\n                  );\n              }}\n            >\n              {renderToolWindow(state.key)}\n            </UndockSide>\n          )\n        );\n      }\n    );\n\n    return (\n      <>\n        <MovableToolWindowStripeProvider\n          onMove={({ to, from }) => {\n            onToolWindowStateChange(\n              toolWindowsState.move(\n                layoutState[from.anchor].stripes[\n                  from.isSplit ? \"split\" : \"main\"\n                ][from.index],\n                { anchor: to.anchor, isSplit: to.isSplit },\n                to.index\n              )\n            );\n          }}\n        >\n          {/**\n           * ToolWindow bars, aka Stripes. Order of stripes is irrelevant for layout but relevant for\n           * priority when stripe buttons are moved across stripes.\n           * layout is handled by `StyledToolWindowOuterLayout`.\n           */}\n          <StyledToolWindowOuterLayout.LeftStripe>\n            {renderStripe({\n              anchor: \"left\",\n              state: layoutState[\"left\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.LeftStripe>\n          <StyledToolWindowOuterLayout.TopStripe>\n            {renderStripe({\n              anchor: \"top\",\n              state: layoutState[\"top\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.TopStripe>\n          <StyledToolWindowOuterLayout.RightStripe>\n            {renderStripe({\n              anchor: \"right\",\n              state: layoutState[\"right\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.RightStripe>\n          <StyledToolWindowOuterLayout.BottomStripe>\n            {renderStripe({\n              anchor: \"bottom\",\n              state: layoutState[\"bottom\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.BottomStripe>\n        </MovableToolWindowStripeProvider>\n        {/**\n         * The inner layout of the ToolWindow, including four tool windows and\n         * a main content in the center.\n         */}\n        <StyledToolWindowOuterLayout.InnerView>\n          <ThreeViewSplitter\n            {...outerSplitterProps}\n            innerView={\n              <ThreeViewSplitter\n                innerViewMinSize={mainContentMinWidth}\n                innerView={\n                  <FocusScope ref={mainContentFocusScopeRef}>\n                    {children}\n                  </FocusScope>\n                }\n                {...innerSplitterProps}\n              />\n            }\n          />\n          {undockLayers}\n          {\n            <FloatToolWindows\n              floatWindows={layoutState?.floatWindows}\n              renderToolWindow={renderToolWindow}\n              onBoundsChange={(key, bounds) =>\n                onToolWindowStateChange(\n                  toolWindowsState.setFloatingBound(key, bounds)\n                )\n              }\n            />\n          }\n        </StyledToolWindowOuterLayout.InnerView>\n      </>\n    );\n  };\n\n  return (\n    <StyledToolWindowOuterLayout.Shell\n      {...containerProps}\n      ref={containerRef}\n      /**\n       * Potential refactoring: hideStripes can also be handled by conditionally\n       * rendering tool window bars, instead of considering it as a feature of\n       * StyledToolWindowOuterLayout\n       **/\n      hideStripes={hideToolWindowBars}\n      style={{ height, minHeight, ...containerProps?.style }}\n    >\n      {layoutState && renderInnerLayout(layoutState)}\n    </StyledToolWindowOuterLayout.Shell>\n  );\n});\n","import { RefObject, useEffect } from \"react\";\n\n/**\n * Executes a callback function when focus is lost from the container element. i.e. when the currently focused element\n * was within the container and:\n * - The focus is going to an element outside the container, or\n * - The focus is about to get lost (i.e. go to `document.body`).\n *\n * Note: react-aria's `useFocusWithin` (and it's `onBlurWithin` option) can't be used, since (at least currently) it\n * doesn't cover the scenario where the focus is about to get lost due to the focused element getting unmounted.\n */\nexport function useOnFocusLost(\n  onFocusLost: (args: {\n    focusLosingElement: HTMLElement | null;\n    focusReceivingElement: Element | null;\n  }) => void,\n  containerRef: RefObject<HTMLElement>\n): void {\n  useEffect(() => {\n    const handleBodyFocus = (e: FocusEvent) => {\n      if (\n        e.target instanceof HTMLElement &&\n        containerRef.current?.contains(e.target) &&\n        (!e.relatedTarget || e.relatedTarget instanceof HTMLElement) &&\n        !containerRef.current?.contains(e.relatedTarget)\n      ) {\n        onFocusLost({\n          focusLosingElement: e.target,\n          focusReceivingElement: e.relatedTarget,\n        });\n      }\n    };\n    containerRef.current?.addEventListener(\"focusout\", handleBodyFocus);\n    return () => {\n      containerRef.current?.removeEventListener(\"focusout\", handleBodyFocus);\n    };\n  }, []);\n}\n","import React, { Key, RefObject, useContext, useMemo } from \"react\";\nimport { ToolWindowsProps } from \"../ToolWindows\";\nimport { ToolWindowState, ViewMode, WindowBounds } from \"./ToolWindowsState\";\nimport { Anchor } from \"../utils\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\n\ntype ToolWindowStateContextValue = {\n  state: Readonly<ToolWindowState>;\n  hide: () => void;\n  remove: () => void;\n  blur: () => void;\n  focusMainContent: () => void;\n  moveToSide: (args: { anchor: Anchor; isSplit: boolean }) => void;\n  changeViewMode: (viewMode: ViewMode) => void;\n  stretchWidth: (value: number) => void;\n  stretchHeight: (value: number) => void;\n  setFloatingBounds: (bounds: WindowBounds) => void;\n};\nconst ToolWindowStateContext =\n  React.createContext<ToolWindowStateContextValue | null>(null);\n\n/**\n * Used in a tool window's UI tree, to get access to the tool window state and actions for changing it.\n */\nexport const useToolWindowState = () => {\n  const context = useContext(ToolWindowStateContext);\n  if (!context) {\n    throw new Error(\n      \"useToolWindowContext is meant to be used inside a tool window.\"\n    );\n  }\n  return context;\n};\n\n/**\n * Used in ToolWindows to provide tool window state and necessary actions as a context, which will be accessible\n * within the tool window content tree, via {@link useToolWindowState}\n */\nexport const ToolWindowStateProvider: React.FC<\n  {\n    children?: React.ReactNode;\n    id: Key;\n    containerRef: RefObject<HTMLElement>;\n    mainContentFocusableRef: RefObject<{ focus: () => void }>;\n  } & Pick<ToolWindowsProps, \"toolWindowsState\" | \"onToolWindowStateChange\">\n> = ({\n  toolWindowsState,\n  containerRef,\n  mainContentFocusableRef,\n  onToolWindowStateChange,\n  id,\n  children,\n}) => {\n  const blur = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.blur(id));\n  });\n  const hide = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.hide(id));\n  });\n  const remove = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.removeFromSidebar(id));\n  });\n  const focusMainContent = useEventCallback(() => {\n    mainContentFocusableRef.current?.focus();\n  });\n  const moveToSide = useEventCallback(\n    (side: { anchor: Anchor; isSplit: boolean }) => {\n      onToolWindowStateChange(toolWindowsState.move(id, side));\n    }\n  );\n  const changeViewMode = useEventCallback((viewMode: ViewMode) => {\n    onToolWindowStateChange(toolWindowsState.changeViewMode(id, viewMode));\n  });\n  const stretchWidth = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchWidth(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const stretchHeight = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchHeight(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const setFloatingBounds = useEventCallback((bounds: WindowBounds) => {\n    onToolWindowStateChange(toolWindowsState.setFloatingBound(id, bounds));\n  });\n  const contextValue = useMemo((): ToolWindowStateContextValue => {\n    const state = toolWindowsState.windows[id];\n    return {\n      state,\n      hide,\n      blur,\n      remove,\n      focusMainContent,\n      moveToSide,\n      changeViewMode,\n      stretchWidth,\n      stretchHeight,\n      setFloatingBounds,\n    };\n  }, [toolWindowsState, id]);\n  return (\n    <ToolWindowStateContext.Provider value={contextValue}>\n      {children}\n    </ToolWindowStateContext.Provider>\n  );\n};\n","import { clamp, curry, fromPairs, insert, mapObjIndexed, move } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\n\nexport type ViewMode =\n  | \"docked_pinned\"\n  | \"docked_unpinned\"\n  | \"undock\"\n  | \"float\"\n  /**\n   * @deprecated \"window\" ViewMode was initially added following the original impl. It doesn't seem reasonable to\n   * support it though. It's marked as deprecated to be removed in the future.\n   */\n  | \"window\";\n\nexport type WindowBounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * Data structure for keeping the state of a single tool window. very similar to WindowInfo in Intellij Platform\n *\n * A note about about the data structure:\n * Some fields like `isSplit`, `weight`, `floatingBound` are meaningful only\n * for a subset of viewModes. So it may be tempting to introduce a `viewMode`\n * type which minimally and more accurately describes the information\n * relevant for each viewMode. But it's not structured like that, and it's\n * orthogonal to viewMode, since we want to preserve the relevant information\n * for each viewMode, to be used when the viewMode is changed back.\n *\n * NOTE: consider renaming to `WindowState` to avoid confusion with `ToolWindowsState`\n */\nexport interface ToolWindowState {\n  /**\n   * The order of the tool window in its group. The group is specified by `anchor` and `isSplit`.\n   */\n  order: number;\n  /**\n   * Whether the tool window is visible (open) or not.\n   * NOTE: A maximum of 1 **docked** tool window within the same group (same `anchor` and `isSplit`) can be visible.\n   * You will get a render error in `ToolWindows` component otherwise.\n   */\n  isVisible: boolean;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the primary group, i.e. when\n   * `isSplit` is false\n   */\n  weight: number;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the secondary group. i.e.\n   * when `isSplit` is true.\n   */\n  sideWeight: number;\n  /**\n   * The side of the tool window, being \"left\", \"right\", \"top\" or \"bottom\"\n   */\n  anchor: Anchor;\n  /**\n   * Specifies whether the tool window should be shown in the split view, aka \"Secondary group\".\n   */\n  isSplit: boolean;\n  /**\n   * Tool windows view mode. See {@link ViewMode}\n   *\n   * NOTE: in Intellij Platform, there is a window `type` and also `docked` and\n   * `autoHide`.\n   * keeping one viewMode makes more sense and prevents invalid combinations\n   * like { type: \"window, \"docked\": true}, that would be unnecessarily allowed.\n   */\n  viewMode: ViewMode;\n  /**\n   * Boundaries of the tool window, when rendered in \"float\" view mode.\n   */\n  floatingBounds?: WindowBounds;\n}\n\nconst isDocked = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" ||\n  toolWindow.viewMode === \"docked_pinned\";\n\n/**\n * Determines whether the tool window should hide on focus. In the java implementation, it's a field on window\n * info instead of being a calculated field. We changed that to match viewMode with the 5 view modes that are possible\n * to choose from the UI, eliminating the combinations that are never allowed. If from UX perspective, having window\n * or float mode with autoHide feature is considered valid at some point, we may need to change the implementation\n * to something similar to the original implementation where isAutoHide and viewMode are separate.\n */\nconst isAutoHide = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" || toolWindow.viewMode === \"undock\";\n\nexport type SideInfo = Pick<ToolWindowState, \"anchor\" | \"isSplit\">;\nexport const areInSameSection = curry(\n  (window1: SideInfo, window2: SideInfo) =>\n    window1.anchor === window2.anchor && window1.isSplit === window2.isSplit\n);\n\nexport const getViewModeType = (viewMode: ViewMode) => {\n  if (viewMode === \"docked_pinned\" || viewMode === \"docked_unpinned\") {\n    return \"docked\";\n  }\n  if (viewMode === \"window\" || viewMode === \"float\") {\n    return \"float\";\n  }\n  return viewMode;\n};\ntype IdToWindowStateMap = Readonly<{\n  [key: string]: Readonly<ToolWindowState>;\n}>;\n\n/**\n * Represents UI state of a bunch of tool windows. What is rendered inside each window or toolbar button is irrelevant.\n *\n * TODO: document pros and cons of these two approaches\n * - Having a class for ToolWindowsState which keeps a readonly mapping of keys to window states.\n * - Having ToolWindowsState as an interface (a mapping from keys to window states), and a bunch of action functions\n *   which accept a window state and some arguments, and return a new window state.\n */\nexport class ToolWindowsState {\n  public readonly lastFocusedKey: Key | null;\n  public readonly removedFromSideBarIds: ReadonlySet<Key>;\n  private readonly layoutToRestore: IdToWindowStateMap;\n  constructor(\n    public readonly windows: IdToWindowStateMap,\n    {\n      lastFocusedKey = null,\n      layoutToRestore = {},\n      removedFromSideBarIds = [],\n    }: {\n      lastFocusedKey?: Key | null;\n      layoutToRestore?: IdToWindowStateMap;\n      removedFromSideBarIds?: Iterable<Key>;\n    } = {}\n  ) {\n    this.lastFocusedKey = lastFocusedKey;\n    this.layoutToRestore = layoutToRestore;\n    this.removedFromSideBarIds = new Set(removedFromSideBarIds);\n    // TODO: instead of keeping a set of removedFromSideBarIds showStripeButton can be a boolean on each window state.\n    //  if we want to avoid the invalid combination of `{ isVisible: true, showStripeButton: false }`, we can have a\n    //  a single property like : visibility: 'open' | 'closed' | 'removed'\n    const invalidWindows = Object.keys(this.windows).filter(\n      (key) =>\n        this.removedFromSideBarIds.has(key) && this.windows[key].isVisible\n    );\n    if (invalidWindows.length > 0) {\n      throw new Error(\n        `Invalid ToolWindowsState. The following windows are set as visible but are removed from the sidebar: ${invalidWindows}`\n      );\n    }\n  }\n\n  hide(targetKey: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow, key) =>\n      key === targetKey\n        ? {\n            ...toolWindow,\n            isVisible: false,\n          }\n        : toolWindow\n    );\n  }\n  hideAll(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) =>\n        getViewModeType(toolWindow.viewMode) === \"float\"\n          ? toolWindow\n          : {\n              ...toolWindow,\n              isVisible: false,\n            },\n      { layoutToRestore: this.windows }\n    );\n  }\n\n  /**\n   * Restores windows to the state before hideAll.\n   */\n  restoreWindows(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) => this.layoutToRestore[key] || toolWindow\n    );\n  }\n\n  lastFocused(key: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow) => toolWindow, {\n      lastFocusedKey: key,\n    });\n  }\n\n  show(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const closableViewModes: ViewMode[] = [];\n    if (target.viewMode === \"undock\") {\n      closableViewModes.push(\"undock\");\n    } else if (isDocked(target)) {\n      closableViewModes.push(\"docked_unpinned\", \"docked_pinned\", \"undock\");\n    }\n    return this.mapWindows(\n      (toolWindow, key) => {\n        if (key === targetKey) {\n          return {\n            ...toolWindow,\n            isVisible: true,\n          };\n        }\n        if (\n          toolWindow.isVisible &&\n          areInSameSection(target, toolWindow) &&\n          closableViewModes.includes(toolWindow.viewMode)\n        ) {\n          return { ...toolWindow, isVisible: false };\n        }\n        return toolWindow;\n      },\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds].filter(\n          (key) => key !== targetKey\n        ),\n      }\n    );\n  }\n\n  toggle(targetKey: Key): ToolWindowsState {\n    return this.windows[targetKey]?.isVisible\n      ? this.hide(targetKey)\n      : this.show(targetKey);\n  }\n\n  blur(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target || !isAutoHide(target)) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  // TODO: initiate floatingBound when changing viewMode to float or window and there is no previous floatingBound\n  changeViewMode(targetKey: Key, viewMode: ViewMode): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          viewMode,\n        };\n      }\n      const viewModeType = getViewModeType(toolWindow.viewMode);\n      if (\n        toolWindow.isVisible &&\n        viewModeType !== \"float\" &&\n        areInSameSection(toolWindow, target) &&\n        viewModeType === getViewModeType(viewMode)\n      ) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  move(targetKey: Key, index: number): ToolWindowsState;\n  move(targetKey: Key, side: SideInfo, index?: number): ToolWindowsState;\n  move(\n    targetKey: Key,\n    sideOrIndex: SideInfo | number,\n    index?: number\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const targetSide = typeof sideOrIndex === \"object\" ? sideOrIndex : target;\n    const targetIndex = typeof sideOrIndex === \"number\" ? sideOrIndex : index;\n    const targetSideWindows = Object.entries(this.windows).filter(([, value]) =>\n      areInSameSection(targetSide, value)\n    );\n    const indexInTargetSide = targetSideWindows.findIndex(\n      ([, window]) => window === target\n    );\n    const sortedTargetWindows: Array<[Key, ToolWindowState]> =\n      indexInTargetSide < 0\n        ? insert(\n            targetIndex ?? -1,\n            [targetKey, { ...target, ...targetSide }],\n            targetSideWindows\n          )\n        : move(\n            indexInTargetSide,\n            targetIndex ?? indexInTargetSide,\n            targetSideWindows\n          );\n    const newTargetSideWindows = fromPairs(\n      sortedTargetWindows.map(([key, value], index) => {\n        let newValue = value;\n        if (value.order !== index) {\n          newValue = { ...value, order: index };\n        }\n        const targetViewMode = getViewModeType(target.viewMode);\n        if (\n          key !== targetKey &&\n          target.isVisible &&\n          value.isVisible &&\n          targetViewMode !== \"float\" &&\n          getViewModeType(value.viewMode) === targetViewMode\n        ) {\n          newValue = { ...value, isVisible: false };\n        }\n        return [`${key}`, newValue];\n      })\n    );\n    return this.mapWindows((value, key) => newTargetSideWindows[key] || value);\n  }\n\n  stretchWidth(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"width\");\n  }\n\n  stretchHeight(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"height\");\n  }\n\n  setFloatingBound(\n    targetKey: Key,\n    floatingBounds: WindowBounds\n  ): ToolWindowsState {\n    return this.update(targetKey, \"floatingBounds\", floatingBounds);\n  }\n\n  removeFromSidebar(targetKey: Key): ToolWindowsState {\n    return this.mapWindows(\n      (state, key) =>\n        key === targetKey\n          ? {\n              ...state,\n              isVisible: false,\n            }\n          : state,\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds, targetKey],\n      }\n    );\n  }\n\n  mapWindows(\n    mapFn: (toolWindow: ToolWindowState, key: string) => ToolWindowState,\n    options: ConstructorParameters<typeof ToolWindowsState>[1] = {}\n  ) {\n    return new ToolWindowsState(mapObjIndexed(mapFn, this.windows), {\n      lastFocusedKey: this.lastFocusedKey,\n      layoutToRestore: this.layoutToRestore,\n      removedFromSideBarIds: this.removedFromSideBarIds,\n      ...options,\n    });\n  }\n\n  private update<K extends keyof ToolWindowState>(\n    targetKey: Key,\n    key: K,\n    value: ToolWindowState[K]\n  ) {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((window) => {\n      if (window === target) {\n        return {\n          ...window,\n          [key]: value,\n        };\n      }\n      return window;\n    });\n  }\n\n  private stretch(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number },\n    property: \"width\" | \"height\"\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const viewModeType = getViewModeType(target.viewMode);\n    if (viewModeType === \"float\") {\n      return this.mapWindows((window) => {\n        if (window === target) {\n          const currentFloatingBound = window.floatingBounds!;\n          return {\n            ...window,\n            floatingBounds: {\n              ...currentFloatingBound,\n              [property]: currentFloatingBound[property] + value,\n            },\n          };\n        }\n        return window;\n      });\n    }\n    const expectedProperty = isHorizontalToolWindow(target.anchor)\n      ? \"height\"\n      : \"width\";\n    if (expectedProperty !== property) {\n      return this;\n    }\n    const containerSize = containerBounds[property];\n    const newValue = containerSize * target.weight + value;\n    const isNewValueValid = clamp(0, containerSize, newValue) === newValue;\n    if (isNewValueValid) {\n      if (viewModeType === \"docked\") {\n        return this.resizeDock(target.anchor, newValue, containerBounds);\n      } else {\n        return this.resizeUndock(target.anchor, newValue, containerBounds);\n      }\n    }\n    return this;\n  }\n\n  resizeDock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(true, anchor, size, containerBounds);\n  }\n\n  resizeUndock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(false, anchor, size, containerBounds);\n  }\n\n  resizeDockSplitView(anchor: Anchor, weight: number): ToolWindowsState {\n    return this.mapWindows((window) => {\n      if (window.anchor === anchor && window.isVisible && isDocked(window)) {\n        return {\n          ...window,\n          sideWeight: window.isSplit ? weight : 1 - weight,\n        };\n      }\n      return window;\n    });\n  }\n\n  private resizeSide(\n    dock: boolean,\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.mapWindows((window) => {\n      const isInResizingView = dock\n        ? isDocked(window)\n        : window.viewMode === \"undock\";\n      if (window.anchor === anchor && isInResizingView && window.isVisible) {\n        const containerSize = !isHorizontalToolWindow(anchor)\n          ? containerBounds.width\n          : containerBounds.height;\n        return {\n          ...window,\n          weight: size / containerSize,\n        };\n      }\n      return window;\n    });\n  }\n}\n\nexport const toolWindowState = ({\n  viewMode = \"docked_pinned\",\n  ...inputs\n}: Partial<ToolWindowState> = {}): ToolWindowState => ({\n  anchor: \"left\",\n  isSplit: false,\n  viewMode: viewMode,\n  order: 1,\n  weight: 0.2,\n  sideWeight: 0.5,\n  isVisible: false,\n  floatingBounds:\n    getViewModeType(viewMode) === \"float\"\n      ? {\n          left: 300,\n          top: 300,\n          width: 600,\n          height: 300,\n        }\n      : undefined,\n  ...inputs,\n});\n","export type Anchor = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport const getAnchorOrientation = (\n  anchor: Anchor\n): \"horizontal\" | \"vertical\" =>\n  isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\";\n\nexport const isHorizontalToolWindow = (anchor: Anchor) =>\n  anchor === \"top\" || anchor === \"bottom\";\n\nexport const theOtherSide = (anchor: Anchor) =>\n  ({\n    left: \"right\" as const,\n    right: \"left\" as const,\n    top: \"bottom\" as const,\n    bottom: \"top\" as const,\n  }[anchor]);\n","import React, { RefObject, useEffect, useRef, useState } from \"react\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport { useOverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nexport function useToolWindow(\n  {\n    containerRef,\n    contentRef,\n    focusableContentRef,\n  }: {\n    containerRef: RefObject<HTMLElement>;\n    contentRef: RefObject<Element>;\n    focusableContentRef: RefObject<{ focus: () => void }>;\n  },\n  { onFocusChange }: { onFocusChange?: (focused: boolean) => void } = {}\n) {\n  const [contentHasFocus, setContentHasFocus] = useState(false);\n  /**\n   * NOTE: useFocusWithin form @react-aria/interactions (at least until 3.5.1) has a couple of problem, because of which\n   * we may need to implement our own version of it.\n   * - It doesn't play nice with FocusScope with `contain` set to true. When something is blurred, FocusScope prevents\n   *   that by restoring focus back immediately. but the blur event is already caught by useFocusWithin. One solution\n   *   would be to change useFocusWithin implementation to ignore these blur events that are immediately followed\n   *   by a focus event that keeps the focus in.\n   * - useFocusWithin has an inconsistent behaviour when it comes to Portals. Since it uses react props for handling\n   *   focus and blur, the [react tree determines event bubbling](https://reactjs.org/docs/portals.html#event-bubbling-through-portals),\n   *   which can be a very nice feature, when an overlay (rendered in a portal) grabs the focus, which should still\n   *   be seen as \"within\". But the problems is that the current implementation uses DOM `.contains(e.relatedTarget)`\n   *   method to determine if focus is no longer within. First of all, using react tree or dom tree to determine \"within\"\n   *   can be seen as an option perhaps. Secondly, it should be consistent on focus and blur.\n   *\n   *   Right now these problems are no big deal. but it may become an issue when portals are used within the content\n   *   of the tool window.\n   *\n   * NOTE: In the original implementation, when a heading toolbar button opens a menu, and focus goes to menu, the\n   * header loses the focus appearance, ant it relies only on content having the focus.\n   */\n  const { focusWithinProps: contentFocusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setContentHasFocus,\n  });\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: onFocusChange,\n  });\n\n  const { toolWindowProps: autoHideProps } = useAutoHide();\n\n  const { focusForwarderProps } = useFocusForwarder({\n    forwardFocus: focusableContentRef.current?.focus,\n    ignoreFocusedDescendant: true,\n  });\n\n  // If there is no focusable content rendered in the tool window, nothing will be autofocused. In that case\n  // we will focus the tool window container itself as a fallback.\n  useEffect(() => {\n    if (\n      !document.activeElement ||\n      !containerRef.current?.contains(document.activeElement)\n    ) {\n      containerRef.current?.focus();\n    }\n  }, []);\n\n  const { moveHandleProps } = useOverlayMoveHandle();\n\n  return {\n    contentHasFocus,\n    toolWindowProps: mergeProps(\n      focusForwarderProps,\n      focusWithinProps,\n      autoHideProps,\n      {\n        tabIndex: -1,\n      }\n    ),\n    toolWindowContentProps: contentFocusWithinProps,\n    toolWindowHeaderProps: moveHandleProps,\n  };\n}\n\n/**\n * Applies the auto hide behaviour of tool window based on view mode information and by handling focus and blur events,\n * on the root tool window element. Returns the necessary props that should be applied to the root tool window element.\n * The implementation is not perfect and may not 100% match the original Intellij Platform implementation.\n * If this focus based implementation for auto hide proves to be fragile and not good enough in future,\n * an alternative approach would be to move auto hide logic to the state management logic as much as possible,\n * and limit the focus based auto-hiding to only when the focus goes within the main content area. That should have\n * less focus-related edge cases.\n * TODO: auto hide behaviour should be moved to the core ToolWindows API. ToolWindows now renders a FocusScope and\n * handles focus events on any tool window, to track last focused tool window.\n */\nfunction useAutoHide() {\n  const { blur } = useToolWindowState();\n  const hideTimeoutId = useRef<number | null>(null);\n  const { focusWithinProps: windowFocusWithinProps } = useFocusWithin({\n    onBlurWithin: (e) => {\n      // setTimeout and windowHasFocusRef is to work around the problem with useFocusWithin, described above.\n      hideTimeoutId.current = window.setTimeout(() => {\n        // Sometimes when the element is blurred, the subsequent focus that is triggered by FocusScope to keep the focus\n        // is a little delayed and therefore after the timeout reaches. It seem to happen only when a non-focusable\n        // area is clicked. We mitigate it by ignoring blur events where nothing is focused. It's not a problem\n        // at least with `DefaultToolWindow` implementation that uses a FocusScope.\n        const isSomethingElseFocused = e.relatedTarget;\n        if (isSomethingElseFocused) {\n          blur();\n        }\n      });\n    },\n    onFocusWithin: () => {\n      if (hideTimeoutId.current !== null) {\n        clearTimeout(hideTimeoutId.current);\n        hideTimeoutId.current = null;\n      }\n    },\n  });\n  return {\n    toolWindowProps: windowFocusWithinProps,\n  };\n}\n","import React from \"react\";\nimport { DividerItem } from \"@intellij-platform/core/Collections\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport {\n  useAction,\n  useActionGroup,\n} from \"@intellij-platform/core/ActionSystem\";\nimport {\n  ActionItem,\n  ActionsMenu,\n} from \"@intellij-platform/core/ActionSystem/components\";\nimport {\n  MOVE_TO_ACTION_GROUP_ID,\n  TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n  VIEW_MODE_ACTION_GROUP_ID,\n  ViewModeToActionId,\n} from \"./useToolWindowActions\";\nimport {\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { MenuTriggerProps } from \"@intellij-platform/core/Menu\";\n\n/**\n * Tool window gear icon menu, with a set of default actions and some extra ones.\n * TODO: add support for extra actions when action system is progressed a little.\n */\nexport function ToolWindowSettingsIconMenu({\n  menuProps,\n}: {\n  menuProps: Parameters<MenuTriggerProps[\"renderMenu\"]>[0][\"menuProps\"];\n}) {\n  const { state } = useToolWindowState();\n\n  const viewModeActionGroup = useActionGroup(VIEW_MODE_ACTION_GROUP_ID);\n  const moveToActionGroup = useActionGroup(MOVE_TO_ACTION_GROUP_ID);\n  const resizeActions = useActionGroup(TOOL_WINDOW_RESIZE_ACTION_GROUP_ID);\n  const maximizeAction = useAction(MAXIMIZE_TOOL_WINDOW_ACTION_ID);\n  const removeFromSideBarAction = useAction(\n    REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID\n  );\n  if (\n    !viewModeActionGroup ||\n    !moveToActionGroup ||\n    !resizeActions ||\n    !maximizeAction ||\n    !removeFromSideBarAction\n  ) {\n    throw new Error(\n      \"[ToolWindowSettingsIconMenu]: can't find tool window actions.\"\n    );\n  }\n\n  const gearIconActions: Array<ActionItem> = [\n    viewModeActionGroup,\n    moveToActionGroup,\n    {\n      id: \"resize\",\n      title: \"Resize\",\n      menuPresentation: \"submenu\",\n      children: [...resizeActions.children, maximizeAction],\n    },\n    new DividerItem(),\n    removeFromSideBarAction,\n  ];\n  return (\n    <ActionsMenu\n      actions={gearIconActions}\n      selectedKeys={[ViewModeToActionId[state.viewMode]]}\n      {...menuProps}\n    />\n  );\n}\n","import React, { HTMLProps } from \"react\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { Toolbar } from \"@intellij-platform/core/Toolbar/Toolbar\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { MenuTrigger } from \"@intellij-platform/core/Menu/MenuTrigger\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledHorizontalSeparator } from \"@intellij-platform/core/StyledSeparator\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme/Theme\";\nimport { ToolWindowSettingsIconMenu } from \"./ToolWindowSettingsIconMenu\";\nimport {\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { ActionButton } from \"@intellij-platform/core/ActionSystem/components\";\n\nexport interface ToolWindowHeaderProps\n  extends Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\"> {\n  contentHasFocus?: boolean;\n  additionalActions?: React.ReactNode;\n}\n\nconst StyledToolWindowHeader = styled.div<{ active: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: end; // to have the content overflow from right, as the toolwindow shrinks. That will keep the left-most buttons in the view\n  padding: 0 2px 0 4px;\n  overflow: hidden; // for the negative margin applied on StyledToolWindowHeaderActions\n  border-bottom: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"ToolWindow.Header.borderColor\" as UnknownThemeProp<\"ToolWindow.Header.borderColor\">\n      ) ||\n      theme.color(\"DefaultTabs.borderColor\") ||\n      theme.commonColors.contrastBorder};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\"ToolWindow.Header.background\") ||\n        theme.color(\n          \"ToolWindow.header.active.background\" as UnknownThemeProp<\"ToolWindow.header.active.background\">\n        ) ||\n        \"#E2E6EC\"\n      : theme.color(\"ToolWindow.Header.inactiveBackground\") ||\n        theme.color(\"ToolWindow.Header.background\") ||\n        \"#ECECEC\"};\n`;\n\nconst StyledToolWindowHeaderActions = styled.div`\n  margin-right: -4px;\n`;\n\nconst StyledToolWindowHeaderContent = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`;\n\nexport const DefaultToolWindowHeader: React.FC<ToolWindowHeaderProps> = ({\n  children,\n  additionalActions,\n  contentHasFocus = false,\n  ...otherProps\n}) => {\n  return (\n    <StyledToolWindowHeader active={contentHasFocus} {...otherProps}>\n      <StyledToolWindowHeaderContent>{children}</StyledToolWindowHeaderContent>\n      <StyledToolWindowHeaderActions>\n        <Toolbar>\n          {additionalActions && (\n            <>\n              {additionalActions}\n              <StyledHorizontalSeparator />\n            </>\n          )}\n          <ActionButton actionId={DOCK_TOOL_WINDOW_ACTION_ID} />\n          <MenuTrigger\n            renderMenu={({ menuProps }) => {\n              return <ToolWindowSettingsIconMenu menuProps={menuProps} />;\n            }}\n          >\n            {(props, ref) => (\n              <TooltipTrigger tooltip={<ActionTooltip actionName=\"Options\" />}>\n                <IconButton {...props} ref={ref}>\n                  <PlatformIcon icon=\"general/gearPlain\" />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </MenuTrigger>\n          <ActionButton actionId={HIDE_ACTIVE_WINDOW_ACTION_ID} />\n        </Toolbar>\n      </StyledToolWindowHeaderActions>\n    </StyledToolWindowHeader>\n  );\n};\n","import React, { useContext, useMemo, useRef } from \"react\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  FocusScope,\n  FocusScopeRef,\n} from \"@intellij-platform/core/utils/FocusScope\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { useToolWindow } from \"./useToolWindow\";\nimport { DefaultToolWindowHeader } from \"./DefaultToolWindowHeader\";\nimport { useToolWindowActions } from \"./useToolWindowActions\";\n\nexport interface DefaultToolWindowProps extends DOMProps {\n  children?: React.ReactNode;\n  /**\n   * title to be shown on the left side of the tool window header.\n   */\n  headerContent?: React.ReactNode;\n  /**\n   * additional action buttons to be rendered before the default gear and hide buttons.\n   */\n  additionalActions?: React.ReactNode;\n  /**\n   * Actions to be provided in the tool window, in addition to the default tool window actions.\n   */\n  actions?: ActionDefinition[];\n  /**\n   * The title of main part of the tool windows component. Used in tool window actions.\n   * @default \"Editor\"\n   */\n  mainContentTitle?: string;\n  onFocusChange?: (focused: boolean) => void;\n}\n\nconst StyledToolWindowContainer = styled.div`\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 1;\n`;\nconst StyledToolWindowContent = styled.div`\n  flex: 1;\n  overflow: auto;\n`;\n\ninterface DefaultToolWindowContextObj {\n  hasFocus?: boolean;\n}\n\nconst DefaultToolWindowContext =\n  React.createContext<DefaultToolWindowContextObj>({\n    hasFocus: false,\n  });\n\nexport const useDefaultToolWindowContext = () =>\n  useContext(DefaultToolWindowContext);\n/**\n * Default component for rendering the content of a tool window. It supports a header and a scrollable area.\n * The header supports showing a content, and some default+custom actions on the right.\n *\n * @see MultiContentToolWindow\n *\n * Remaining features:\n * - Additional gear menu actions.\n *\n */\nexport const DefaultToolWindow: React.FC<DefaultToolWindowProps> = ({\n  headerContent,\n  children,\n  additionalActions,\n  onFocusChange,\n  actions,\n  mainContentTitle = \"Editor\",\n  ...otherProps\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const focusableContentRef = useRef<FocusScopeRef>(null);\n  const {\n    // NOTE: we might as well use :focus-within and target StyledToolWindowHeader to set the background, but it's not\n    // a clear improvement.\n    contentHasFocus,\n    toolWindowProps,\n    toolWindowContentProps,\n    toolWindowHeaderProps,\n  } = useToolWindow(\n    { containerRef, contentRef, focusableContentRef },\n    {\n      onFocusChange,\n    }\n  );\n\n  const defaultToolWindowContext = useMemo(\n    () => ({\n      hasFocus: contentHasFocus,\n    }),\n    [contentHasFocus]\n  );\n  const activeToolWindowActionGroup = useToolWindowActions({\n    mainContentTitle,\n  });\n  const allActions = [activeToolWindowActionGroup, ...(actions || [])];\n\n  return (\n    <ActionsProvider actions={allActions}>\n      {({ shortcutHandlerProps }) => (\n        <StyledToolWindowContainer\n          {...mergeProps(\n            toolWindowProps,\n            shortcutHandlerProps,\n            filterDOMProps(otherProps)\n          )}\n          ref={containerRef}\n        >\n          <DefaultToolWindowContext.Provider value={defaultToolWindowContext}>\n            <DefaultToolWindowHeader\n              additionalActions={additionalActions}\n              contentHasFocus={contentHasFocus}\n              {...toolWindowHeaderProps}\n            >\n              {headerContent}\n            </DefaultToolWindowHeader>\n            <StyledToolWindowContent\n              ref={contentRef}\n              {...toolWindowContentProps}\n            >\n              {/**\n               * FIXME: adding `contain` prevents focus from moving to another focus scope both with mouse and keyboard.\n               * If we want to follow the Intellij Platform behaviour exactly, we need a kind of focus containment, where\n               * focus is trapped only for keyboard interaction, and user can still move focus by clicking another scope.\n               * Maybe a custom useFocusContainment hook and a separate option for activating it on our own FocusScope.\n               */}\n              <FocusScope ref={focusableContentRef} autoFocus>\n                {children}\n              </FocusScope>\n            </StyledToolWindowContent>\n          </DefaultToolWindowContext.Provider>\n        </StyledToolWindowContainer>\n      )}\n    </ActionsProvider>\n  );\n};\n","import React from \"react\";\nimport { Shortcut, useAction } from \"@intellij-platform/core/ActionSystem\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { getActivateToolWindowActionId } from \"./useToolWindowsActions\";\nimport styled from \"styled-components\";\n\nconst getToolWindowNumberFromShortcut = (shortcut: Shortcut): number | null => {\n  const num =\n    shortcut.type === \"keyboard\" &&\n    shortcut.firstKeyStroke.modifiers?.length === 1 &&\n    [\"Alt\", \"Meta\", \"Control\"].includes(shortcut.firstKeyStroke.modifiers[0]) &&\n    shortcut.firstKeyStroke.code.match(/^(Digit|Numpad)([0-9])$/)?.[2];\n  if (num) {\n    return parseInt(num);\n  }\n  return null;\n};\n\nconst StyledWrapper = styled.span`\n  display: flex;\n`;\n\n/**\n * Default UI for the toolbar button (aka. stripe button) of the tool window.\n * - Renders the title and icon for the tool window\n * - Optionally shows the number before the title, if a numeric shortcut is set for the corresponding ActivateToolWindow\n *   action, in the currently applied keymap.\n * - Adds an Action Tooltip\n */\nexport const DefaultToolWindowToolbarButton = ({\n  id,\n  title,\n  icon,\n  showNumber = true,\n}: {\n  id: React.Key;\n  title: string;\n  icon: React.ReactNode;\n  showNumber?: boolean;\n}) => {\n  const action = useAction(getActivateToolWindowActionId(`${id}`));\n\n  const number = action?.shortcuts\n    ?.map(getToolWindowNumberFromShortcut)\n    .find(Number.isInteger);\n  return (\n    <TooltipTrigger\n      tooltip={<ActionTooltip actionName={title} shortcut={action?.shortcut} />}\n    >\n      <StyledWrapper>\n        {icon}\n        &nbsp;\n        {number != null && showNumber ? (\n          <>\n            <u>{number}</u>:&nbsp;\n          </>\n        ) : null}\n        {title}\n      </StyledWrapper>\n    </TooltipTrigger>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { indexBy } from \"ramda\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  ToolWindowRefValue,\n  ToolWindows,\n  ToolWindowsProps,\n} from \"@intellij-platform/core/ToolWindows\";\nimport { useToolWindowsActions } from \"./useToolWindowsActions\";\nimport { DefaultToolWindowToolbarButton } from \"./DefaultToolWindowToolbarButton\";\nimport { ActionsProvider } from \"@intellij-platform/core/ActionSystem\";\n\ninterface DefaultToolWindow {\n  id: string;\n  title: string;\n  icon: React.ReactNode;\n  content: React.ReactNode;\n}\n\n/**\n * A wrapper around ToolWindows, which provides default actions. It also expects windows to have a `title` and an `icon`\n * instead of more generic `toolbarButton`. The `title` and `icon` are then used in toolbar button, and also in the\n * actions that are dynamically created for each window to toggle/focus the tool window.\n */\nexport const DefaultToolWindows = React.forwardRef(function DefaultToolWindows(\n  {\n    windows: toolWindows,\n    toolWindowsState,\n    showNumbers,\n    ...props\n  }: Omit<ToolWindowsProps, \"windows\"> & {\n    windows: DefaultToolWindow[];\n    showNumbers?: boolean;\n  },\n  forwardedRef: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const toolWindowsRef = useObjectRef(forwardedRef);\n  const windowById = indexBy(({ id }) => id, toolWindows);\n  const actions = useToolWindowsActions({\n    toolWindowsRef,\n    toolWindowsState,\n    getPresentation: (id) => windowById[id],\n  });\n  return (\n    <ActionsProvider actions={actions}>\n      {({ shortcutHandlerProps }) => (\n        <ToolWindows\n          {...props}\n          ref={toolWindowsRef}\n          toolWindowsState={toolWindowsState}\n          windows={toolWindows.map(({ id, icon, content, title }) => ({\n            id,\n            toolbarButton: (\n              <DefaultToolWindowToolbarButton\n                id={id}\n                icon={icon}\n                title={title}\n                showNumber={showNumbers}\n              />\n            ),\n            content,\n          }))}\n          containerProps={mergeProps(\n            props.containerProps || {},\n            shortcutHandlerProps\n          )}\n        />\n      )}\n    </ActionsProvider>\n  );\n});\n","import React, { Key, useEffect, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { DefaultToolWindow, DefaultToolWindowProps } from \"./DefaultToolWindow\";\nimport { TabItem } from \"../Tabs/TabItem\";\nimport { usePrevious } from \"../utils/usePrevious\";\nimport { ToolWindowTabs } from \"../Tabs/ToolWindowTabs/ToolWindowTabs\";\n\nexport interface MultiContentToolWindowProps\n  extends Pick<DefaultToolWindowProps, \"additionalActions\"> {\n  /**\n   * List of contents that will be accessible with a list of grouped or ungrouped tabs in the tool window header.\n   */\n  children:\n    | React.ReactElement<MultiContentToolWindowContentProps>[]\n    | React.ReactElement<MultiContentToolWindowContentProps>;\n  /**\n   * Key of currently active content\n   */\n  activeKey?: Key;\n  defaultActiveKey?: Key;\n  onActiveKeyChange?: (key: Key) => void;\n  /**\n   * If true, it groups tabs in a dropdown instead.\n   *\n   * @default false\n   */\n  groupTabs?: boolean;\n  /**\n   * The content shown as the title of the tool window, before content switcher (tabs or dropdown).\n   * For more control over header content, you can pass a function which accepts rendered content switcher,\n   * and then you can compose it with other content as you wish. Use case examples of function variant:\n   * - You want to render a title before the content switcher, and something after the tabs. Like a \"+\" button in\n   *   terminal.\n   * - You want to conditionally move inner-content header up to the tool window header, if there is only one tab. In\n   *   that case you don't need to render the content switcher at all. An example is the new design in the \"Run\"\n   *   tool window.\n   */\n  headerContent?:\n    | React.ReactNode\n    | ((props: { renderedViewSwitcher: React.ReactNode }) => React.ReactNode);\n}\n\n/**\n * Implemented on top of DefaultToolWindow, allows for multiple tabbed content within a tool window.\n * Remaining features:\n * - Although trivial, group tabs action in tool window header gear icon is intentionally left unimplemented for now,\n *   until an increment on action system is done.\n * - Grouped mode is not implemented currently, as we don't have a dropdown component. Though it seems it's just a\n *   MenuTrigger and some trigger with a arrow icon.\n */\nexport const MultiViewToolWindow = ({\n  groupTabs,\n  children,\n  headerContent,\n  ...props\n}: MultiContentToolWindowProps) => {\n  const [isToolWindowFocused, setToolWindowFocused] = useState(false);\n  const [activeKey, setActiveKey] = useControlledState(\n    props.activeKey!,\n    props.defaultActiveKey!,\n    props.onActiveKeyChange!\n  );\n  const contents = React.Children.toArray(children)\n    .filter(\n      (\n        child\n      ): child is React.ReactElement<MultiContentToolWindowContentProps> => {\n        const validChild =\n          React.isValidElement(child) &&\n          child.type === MultiContentToolWindowContent;\n        if (!validChild) {\n          // FIXME: only warn in dev mode\n          console.warn(\n            \"You are not supposed to render anything but MultiContentToolWindowContent inside MultiViewToolWindow. Rendered: \",\n            child\n          );\n        }\n        return validChild;\n      }\n    )\n    // The following map is because of what React.Children.toArray does to keys: https://stackoverflow.com/q/33791401/1493081\n    // It doesn't look like a good idea since and there might be better ways to fix this, or at least make sure it would\n    // work in all cases. FIXME\n    .map((content) => ({ ...content, key: `${content.key}`.slice(2) as Key }));\n  const renderContentSwitcher = () => {\n    if (groupTabs) {\n      console.error(\n        \"groupTab is not supported yet in MultiViewToolWindow. Will fallback to ungrouped tabs\"\n      );\n    }\n    return (\n      <ToolWindowTabs\n        noBorders\n        items={contents}\n        active={isToolWindowFocused}\n        selectedKey={activeKey}\n        onSelectionChange={setActiveKey}\n      >\n        {(item) => <TabItem key={item.key}>{item.props.tabContent}</TabItem>}\n      </ToolWindowTabs>\n    );\n  };\n  const renderedViewSwitcher = renderContentSwitcher();\n\n  // We set the active key if it's not set or is invalid. A common scenario is when tabs are closable, and when the\n  // active tab is closed. You would always want to previous tab to get activated in such cases, instead of the first\n  // one. By having the logic here, there is no need to repeat the same logic in each use case. Although, it can also\n  // be moved into a state management utility for tabs, maybe in the future.\n\n  const keys = contents.map(({ key }) => key);\n  const previousKeys = usePrevious(keys);\n  useEffect(() => {\n    if (!keys.includes(activeKey)) {\n      const newActiveKey = keys[previousKeys.indexOf(activeKey) - 1] ?? keys[0];\n      if (newActiveKey != undefined) {\n        setActiveKey(newActiveKey);\n      }\n    }\n  });\n\n  const activeContent = contents.find(\n    (content) => activeKey == undefined || activeKey === content.key\n  );\n  return (\n    <DefaultToolWindow\n      onFocusChange={setToolWindowFocused}\n      headerContent={\n        typeof headerContent === \"function\" ? (\n          headerContent({ renderedViewSwitcher })\n        ) : (\n          <>\n            {headerContent}\n            {renderedViewSwitcher}\n          </>\n        )\n      }\n      additionalActions={props.additionalActions}\n    >\n      {activeContent?.props.children}\n    </DefaultToolWindow>\n  );\n};\n\nexport interface MultiContentToolWindowContentProps {\n  key: Key;\n  /**\n   * Used in the corresponding tab.\n   */\n  tabContent: React.ReactNode;\n\n  children: React.ReactNode;\n}\n\nconst MultiContentToolWindowContent =\n  ({}: MultiContentToolWindowContentProps) => {\n    throw new Error(\n      \"MultiContentToolWindowContent is not meant to be rendered directly. You should only use it in MultiViewToolWindow\"\n    );\n  };\n\nMultiViewToolWindow.View = MultiContentToolWindowContent;\n","export const HIDE_ALL_WINDOWS_ACTION_ID = \"HideAllWindows\";\nexport const JUMP_TO_LAST_WINDOW_ACTION_ID = \"JumpToLastWindow\";\nexport const HIDE_ACTIVE_WINDOW_ACTION_ID = \"HideActiveWindow\";\nexport const MAXIMIZE_TOOL_WINDOW_ACTION_ID = \"MaximizeToolWindow\";\nexport const DOCK_TOOL_WINDOW_ACTION_ID = \"DockToolWindow\";\nexport const RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID = \"ResizeToolWindowRight\";\nexport const RESIZE_TOOL_WINDOW_LEFT_ACTION_ID = \"ResizeToolWindowLeft\";\nexport const RESIZE_TOOL_WINDOW_TOP_ACTION_ID = \"ResizeToolWindowTop\";\nexport const RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID = \"ResizeToolWindowBottom\";\nexport const DOCK_PINNED_MODE_ACTION_ID = \"DockPinnedMode\";\nexport const DOCK_UNPINNED_MODE_ACTION_ID = \"DockUnpinnedMode\";\nexport const UNDOCK_MODE_ACTION_ID = \"UndockMode\";\nexport const FLOAT_MODE_ACTION_ID = \"FloatMode\";\nexport const WINDOW_MODE_ACTION_ID = \"WindowMode\";\nexport const FOCUS_EDITOR_ACTION_ID = \"FocusEditor\";\nexport const REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID =\n  \"RemoveToolWindowFromSidebar\"; // doesn't show up in keymap. Not sure what the id is in the original impl.\n","import React from \"react\";\nimport {\n  Anchor,\n  isHorizontalToolWindow,\n  useToolWindowState,\n  ViewMode,\n} from \"@intellij-platform/core/ToolWindows\";\nimport {\n  ActionDefinition,\n  ActionGroupDefinition,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport {\n  DOCK_PINNED_MODE_ACTION_ID,\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  DOCK_UNPINNED_MODE_ACTION_ID,\n  FLOAT_MODE_ACTION_ID,\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  UNDOCK_MODE_ACTION_ID,\n  WINDOW_MODE_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { useCreateDefaultActionGroup } from \"@intellij-platform/core/ActionSystem/components\";\n\n// Resize steps in Intellij Platform is calculated based on the size of a \"W\" character and some\n// configuration (ide.windowSystem.hScrollChars). Although it's technically feasible, it seems not necessary\nconst HEIGHT_RESIZE_STEP = 16 * 5;\nconst WIDTH_RESIZE_STEP = 13 * 5;\n\nexport const anchors: Array<{\n  anchor: Anchor;\n  isSplit: boolean;\n  id: string;\n}> = [\n  { id: \"moveToLeftTop\", anchor: \"left\", isSplit: false },\n  { id: \"moveToLeftBottom\", anchor: \"left\", isSplit: true },\n  { id: \"moveToBottomLeft\", anchor: \"bottom\", isSplit: false },\n  { id: \"moveToBottomRight\", anchor: \"bottom\", isSplit: true },\n  { id: \"moveToRightTop\", anchor: \"right\", isSplit: true },\n  { id: \"moveToRightBottom\", anchor: \"right\", isSplit: false },\n  { id: \"moveToTopRight\", anchor: \"top\", isSplit: true },\n  { id: \"moveToTopLeft\", anchor: \"top\", isSplit: false },\n];\n\nconst getAnchorName = ({\n  anchor,\n  isSplit,\n}: {\n  anchor: Anchor;\n  isSplit: boolean;\n}) =>\n  `${anchor[0].toUpperCase()}${anchor.slice(1)} ${\n    isHorizontalToolWindow(anchor)\n      ? isSplit\n        ? \"Right\"\n        : \"Left\"\n      : isSplit\n      ? \"Bottom\"\n      : \"Top\"\n  }`;\n\nexport const ViewModeToActionId: Record<ViewMode, string> = {\n  docked_pinned: DOCK_PINNED_MODE_ACTION_ID,\n  docked_unpinned: DOCK_UNPINNED_MODE_ACTION_ID,\n  undock: UNDOCK_MODE_ACTION_ID,\n  float: FLOAT_MODE_ACTION_ID,\n  window: WINDOW_MODE_ACTION_ID,\n};\n\nexport const VIEW_MODE_ACTION_GROUP_ID = \"TW.ViewModeGroup\";\nexport const MOVE_TO_ACTION_GROUP_ID = \"TW.MoveToGroup\";\nexport const TOOL_WINDOW_RESIZE_ACTION_GROUP_ID = \"ResizeToolWindowGroup\";\n\nexport function useToolWindowActions({\n  mainContentTitle,\n}: {\n  mainContentTitle: string;\n}): ActionGroupDefinition {\n  const {\n    stretchWidth,\n    stretchHeight,\n    changeViewMode,\n    moveToSide,\n    focusMainContent,\n    hide,\n    remove,\n    state,\n  } = useToolWindowState();\n  const createDefaultActionGroup = useCreateDefaultActionGroup();\n\n  const actions: ActionDefinition[] = [];\n  if (!state) {\n    // FIXME: when window is removed, a last render happens with the new ToolWindowsState, which doesn't have state\n    //  for the removed tool window. Need to understand why that happens.\n    return createDefaultActionGroup({\n      id: \"ActiveToolwindowGroup\",\n      title: \"Active Tool Window\",\n      children: [],\n    });\n  }\n  const viewModeActionGroup = createDefaultActionGroup({\n    id: VIEW_MODE_ACTION_GROUP_ID,\n    title: \"View Mode\",\n    children: [\n      {\n        id: DOCK_PINNED_MODE_ACTION_ID,\n        title: \"Dock Pinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_pinned\");\n        },\n      },\n      {\n        id: DOCK_UNPINNED_MODE_ACTION_ID,\n        title: \"Dock Unpinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_unpinned\");\n        },\n      },\n      {\n        id: UNDOCK_MODE_ACTION_ID,\n        title: \"Undock\",\n        actionPerformed: () => {\n          changeViewMode(\"undock\");\n        },\n      },\n      {\n        id: FLOAT_MODE_ACTION_ID,\n        title: \"Float\",\n        actionPerformed: () => {\n          changeViewMode(\"float\");\n        },\n      },\n      {\n        id: WINDOW_MODE_ACTION_ID,\n        title: \"Window\",\n        actionPerformed: () => {\n          changeViewMode(\"window\");\n        },\n      },\n    ],\n  });\n  const moveToActionGroup = createDefaultActionGroup({\n    id: MOVE_TO_ACTION_GROUP_ID,\n    title: \"Move to\",\n    children: anchors.map(\n      (anchor): ActionDefinition => ({\n        id: `TW.MoveTo.${anchor.id}`,\n        title: getAnchorName(anchor),\n        icon: <PlatformIcon icon={`actions/${anchor.id}`} />,\n        isDisabled:\n          state.anchor === anchor.anchor && state.isSplit === anchor.isSplit,\n        actionPerformed: () => {\n          moveToSide(anchor);\n        },\n      })\n    ),\n  });\n  actions.push(\n    {\n      id: FOCUS_EDITOR_ACTION_ID,\n      title: `Focus ${mainContentTitle}`, // in intellij it says \"Focus Editor\" but it's not generic enough.\n      actionPerformed: () => {\n        focusMainContent();\n      },\n    },\n    {\n      id: HIDE_ACTIVE_WINDOW_ACTION_ID,\n      title: \"Hide\",\n      icon: <PlatformIcon icon=\"general/hideToolWindow\" />,\n      actionPerformed: () => {\n        hide();\n      },\n    },\n    {\n      id: MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n      title: \"Maximize Tool Window\", // Should be \"Restore Tool Window Size if the window is currently maximized\n      actionPerformed: () => {\n        // TODO(release): either remove the action or implement it\n        alert(\"Not implemented\");\n      },\n    },\n    {\n      id: REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n      title: \"Remove from Sidebar\",\n      actionPerformed: () => {\n        remove();\n      },\n    },\n    viewModeActionGroup,\n    moveToActionGroup\n  );\n  if (state.viewMode === \"float\") {\n    actions.push({\n      id: DOCK_TOOL_WINDOW_ACTION_ID,\n      title: \"Dock\",\n      icon: (\n        <PlatformIcon\n          icon={`actions/${\n            anchors.find(\n              ({ anchor, isSplit }) =>\n                anchor === state.anchor && isSplit === state.isSplit\n            )?.id\n          }`}\n        />\n      ),\n      actionPerformed: () => {\n        changeViewMode(\"docked_pinned\");\n      },\n    });\n  }\n  if (state.viewMode !== \"float\" && state.viewMode !== \"window\") {\n    const resizeGroup = createDefaultActionGroup({\n      id: TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n      title: \"Resize\",\n      children: [],\n    });\n    if (isHorizontalToolWindow(state.anchor)) {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n        title: \"Stretch to bottom\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"bottom\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n        title: \"Stretch to top\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"top\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n    } else {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n        title: \"Stretch to left\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"left\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n        title: \"Stretch to right\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"right\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n    }\n    actions.push(resizeGroup);\n  }\n  return createDefaultActionGroup({\n    id: \"ActiveToolwindowGroup\",\n    title: \"Active Tool Window\",\n    children: actions,\n  });\n}\n","import React from \"react\";\nimport { ActionDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport {\n  getViewModeType,\n  ToolWindowRefValue,\n  ToolWindowsState,\n} from \"@intellij-platform/core/ToolWindows\";\nimport {\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\ninterface DefaultToolWindowActionsProps {\n  toolWindowsState: Readonly<ToolWindowsState>;\n  toolWindowsRef: React.RefObject<ToolWindowRefValue>;\n  /**\n   * Used when creating ActivateToolWindow action for each tool window.\n   */\n  getPresentation?: (key: React.Key) =>\n    | {\n        title: string;\n        icon: React.ReactNode;\n      }\n    | undefined;\n}\n\nexport const getActivateToolWindowActionId = (id: string) =>\n  `Activate${id.replace(\" \", \"\")}Window`;\n\n/**\n * Provides default tool windows actions:\n * - Hide all tool windows\n * - Activate{id}Window action for each window\n * - Jump to last tool window\n *\n * @see also {@link DefaultToolWindows}\n */\nexport function useToolWindowsActions({\n  toolWindowsState,\n  toolWindowsRef,\n  getPresentation,\n}: DefaultToolWindowActionsProps) {\n  const isAnySideWindowWindowOpen = (state: Readonly<ToolWindowsState>) =>\n    Object.values(state.windows).some(\n      ({ isVisible, viewMode }) =>\n        isVisible && getViewModeType(viewMode) !== \"float\"\n    );\n  const windowIds = Object.keys(toolWindowsState.windows).map(\n    (key) => `${key}`\n  );\n  const activateToolWindowActions = windowIds.map(\n    (id: string, index): ActionDefinition => {\n      const { title, icon } = getPresentation?.(id) || {};\n      return {\n        id: getActivateToolWindowActionId(id),\n        title: title || `${getOrdinal(index)} window`,\n        icon,\n        description: `Activate ${title || getOrdinal(index)} window`,\n        actionPerformed: () => {\n          if (\n            toolWindowsState.windows[id]?.isVisible &&\n            !toolWindowsRef.current?.hasFocus(id)\n          ) {\n            toolWindowsRef.current?.focus(id);\n          } else {\n            toolWindowsRef.current?.changeState((state) => state.toggle(id));\n          }\n        },\n      };\n    }\n  );\n  const actions: ActionDefinition[] = [\n    ...activateToolWindowActions,\n    {\n      id: HIDE_ALL_WINDOWS_ACTION_ID,\n      title: isAnySideWindowWindowOpen(toolWindowsState)\n        ? \"Hide All Windows\"\n        : \"Restore windows\",\n      actionPerformed: () => {\n        toolWindowsRef.current?.changeState((state) => {\n          if (isAnySideWindowWindowOpen(state)) {\n            return state.hideAll();\n          } else {\n            return state.restoreWindows();\n          }\n        });\n        // Because windows have autofocus behaviour, a timeout is set. Not sure how reliable it is.\n        // TODO: replace effect-based auto focus behaviour with something better, maybe controlled by ToolWindows\n        //  component, and when a tool window is opened.\n        setTimeout(() => {\n          toolWindowsRef.current?.focusMainContent();\n        });\n      },\n    },\n    {\n      id: JUMP_TO_LAST_WINDOW_ACTION_ID,\n      title: \"Jump to Last Tool Window\",\n      isDisabled: toolWindowsState.lastFocusedKey == null,\n      actionPerformed: () => {\n        toolWindowsRef.current?.focusLastActiveWindow();\n      },\n    },\n  ];\n  return actions;\n}\n\nfunction getOrdinal(n: number) {\n  let ord = [\"st\", \"nd\", \"rd\"];\n  let exceptions = [11, 12, 13];\n  let nth =\n    ord[(n % 10) - 1] == undefined || exceptions.includes(n % 100)\n      ? \"th\"\n      : ord[(n % 10) - 1];\n  return n + nth;\n}\n","import React, {\n  CSSProperties,\n  MouseEvent,\n  useContext,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { styled, css } from \"../styled\";\nimport {\n  StyledHorizontalSeparator,\n  StyledSeparator,\n  StyledVerticalSeparator,\n} from \"../StyledSeparator\";\nimport { useOverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/useOverflowObserver\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { Overlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { StyledPopupContainer } from \"@intellij-platform/core/Popup/StyledPopupContainer\";\n\ntype ToolbarBorderProp =\n  | true\n  | \"horizontal\"\n  | \"vertical\"\n  | \"bottom\"\n  | \"top\"\n  | \"left\"\n  | \"right\";\n\nexport type ToolbarProps = {\n  children: React.ReactNode;\n  orientation?: \"vertical\" | \"horizontal\";\n  border?: ToolbarBorderProp;\n  style?: CSSProperties;\n  className?: string;\n} & (\n  | {\n      orientation: \"vertical\";\n    }\n  | {\n      orientation?: \"horizontal\";\n      /**\n       * Defines how the toolbar should handle its children when there is not enough room\n       * to fit all:\n       * - popup: the overflowed children will be hidden behind a show more arrow icon that\n       *   shows the rest of the items in a popup.\n       * - wrap: children will be wrapped so that they fit the available width/height\n       **/\n      overflowBehavior?: \"popup\" | \"wrap\";\n    }\n);\n\nconst borderStyle = ({ border }: { border?: ToolbarBorderProp }) =>\n  border &&\n  css`\n    border-style: solid;\n    border-color: ${({ theme }) => theme.commonColors.borderColor};\n    border-width: ${border === true ? \"1px\" : borderPropToCssProp[border]};\n  `;\n\nconst StyledToolbar = styled.div<{\n  border?: ToolbarBorderProp;\n}>`\n  display: inline-flex;\n  box-sizing: border-box;\n  overflow: hidden;\n  // NOTE: in the original implementation, there is no empty space between buttons, but buttons have kind of an\n  // invisible left padding, which is mouse-intractable, but doesn't visually seem a part of the button.\n  // Although implementable, it didn't seem necessary to follow the exact same thing. Margin should be fine.\n  gap: 4px;\n  ${borderStyle}\n  ${StyledSeparator}:first-child {\n    display: none;\n  }\n  ${StyledSeparator}:last-child {\n    display: none;\n  }\n`;\n\nconst borderPropToCssProp: Record<\n  Exclude<ToolbarBorderProp, boolean>,\n  CSSProperties[\"borderWidth\"]\n> = {\n  top: \"1px 0 0 0\",\n  bottom: \"0 0 1px 0\",\n  right: \"0 1px 0 0\",\n  left: \"0 0 0 1px\",\n  horizontal: \"0 1px\",\n  vertical: \"1px 0\",\n};\n\nconst SIDE_PADDING = 3;\nconst END_PADDING = 4;\n\nconst StyledShowMoreButton = styled.button`\n  all: unset;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${borderStyle};\n`;\n\nconst StyledHorizontalToolbar = styled(StyledToolbar)`\n  padding: ${SIDE_PADDING}px ${END_PADDING}px;\n  max-width: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-width: -webkit-fill-available;\n  ${StyledHorizontalSeparator} {\n    margin: 1px 0;\n  }\n  ${StyledShowMoreButton} {\n    margin-right: -${END_PADDING}px;\n  }\n`;\n\nconst StyledVerticalToolbar = styled(StyledToolbar)`\n  flex-direction: column;\n  max-height: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-height: -webkit-fill-available;\n  padding: ${END_PADDING}px ${SIDE_PADDING}px;\n  ${StyledVerticalSeparator} {\n    margin: 0 1px;\n  }\n  ${StyledShowMoreButton} {\n    margin-bottom: -${END_PADDING}px;\n  }\n`;\n\nconst StyledToolbarContent = styled.div<{\n  shouldWrap?: boolean;\n  firstOverflowedIndex: number;\n}>`\n  box-sizing: inherit;\n  display: inherit;\n  flex-direction: inherit;\n  flex-wrap: ${({ shouldWrap }) => (shouldWrap ? \"wrap\" : \"nowrap\")};\n  gap: inherit;\n  max-height: inherit;\n  max-width: inherit;\n  min-height: 0;\n  min-width: 0;\n\n  ${({ firstOverflowedIndex }) =>\n    /**\n     * The hidden styles should be in a way that the hidden element:\n     * - occupies its space in the document layout.\n     * - doesn't capture mouse events. (e.g. a half-overflowing hidden element shouldn't show tooltip)\n     * - remains accessible to screen readers.\n     */\n    css`\n      > ${firstOverflowedIndex === 0\n          ? \"*\"\n          : `:nth-child(${firstOverflowedIndex}) ~ *`} {\n        opacity: 0 !important;\n        pointer-events: none !important;\n      }\n    `}\n`;\n// This can be used in other places if use-cases are raised for keeping orientation in the context.\nconst OrientationContext = React.createContext<\"horizontal\" | \"vertical\">(\n  \"horizontal\"\n);\n\n/**\n * ## Toolbar API/Implementation notes\n *\n * ### Handling Overflow\n *\n * Handling the overflow popup on DOM-level, allows for a simple and flexible implementation that doesn't\n * require any coupling between Toolbar and components like IconButton. Other components can also similarly be\n * rendered inside toolbar without adopting any specific API. It's worth noting that any generic approach based\n * on children react nodes instead of children DOM nodes will have many edge cases and will involve assumptions\n * that will limit the API of toolbar. Also, any approach based on moving dom nodes to the overflow popup will\n * conflict with React owning the DOM.\n *\n * #### Assumption\n *\n * Since the overflow popup renders the same `children`, and items in the toolbar and popup overflow are made\n * visible/hidden based on the index of DOM nodes, it's important than children deterministically results in the\n * same dom structure. i.e. if a component in children randomly renders different number of root dom nodes in\n * each render, it can cause issues in hiding/showing elements.\n *\n * ### Orientation\n * A few reasons for not having separate `HorizontalToolbar` and `VerticalToolbar` components instead of `Toolbar` with\n * `orientation` prop:\n * - From usage side, a single `Toolbar` component is considered a more discoverable API.\n * - Separate components would require abstracting common parts which unnecessarily adds to complexity.\n *   The amount of branching to handle the differences is considered ok, at the current state of the component.\n */\n\n/**\n * @description\n * A toolbar is a container for {@link IconButton} and similar UI components.\n *\n * ## Features:\n * - A toolbar can be horizontal or vertical\n * - When there is not enough space for all children, toolbar shows an arrow icon, which shows the overflowing\n *   items in a popup, upon mouseover.\n *   Optionally, overflow can be wrapped into multiple lines, in horizontal toolbars.\n *\n * @example\n * <Toolbar>\n *   <IconButton aria-label=\"Show Diff\">\n *     <PlatformIcon icon=\"actions/diff\" />\n *   </IconButton>\n *   </Toolbar>\n */\nexport const Toolbar: React.FC<ToolbarProps> = ({\n  border,\n  orientation = \"horizontal\",\n  ...props\n}): React.ReactElement => {\n  const overflowBehavior =\n    orientation === \"horizontal\" && \"overflowBehavior\" in props\n      ? props.overflowBehavior\n      : null;\n  const rootProps = { style: props.style, className: props.className };\n  const ref = useRef<HTMLDivElement>(null);\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const showMoreButtonRef = useRef<HTMLButtonElement>(null);\n  const StyledToolbar =\n    orientation === \"horizontal\"\n      ? StyledHorizontalToolbar\n      : StyledVerticalToolbar;\n  const { overflowedElements } = useOverflowObserver(ref, { threshold: 0.8 });\n  const [isOverflowPopupVisible, setOverflowPopupVisible] = useState(false);\n  const [popupHeight, setPopupHeight] = useState(30);\n  const [firstOverflowedChildIndex, setFirstOverflowedChildIndex] =\n    useState<number>(-1);\n  const firstOverflowedChildRef = useRef<HTMLElement | undefined>();\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      const childElements = [...ref.current.children].filter(\n        (node): node is HTMLElement => node instanceof HTMLElement\n      );\n      const firstOverflowedChild = childElements.findIndex((child) =>\n        overflowedElements.includes(child)\n      );\n      setFirstOverflowedChildIndex(firstOverflowedChild);\n      firstOverflowedChildRef.current = childElements[firstOverflowedChild];\n    }\n  }, [overflowedElements]);\n\n  useLayoutEffect(() => {\n    if (overlayRef.current && popupHeight !== overlayRef.current.offsetHeight) {\n      setPopupHeight(overlayRef.current.offsetHeight);\n    }\n  });\n\n  const { overlayProps } = useOverlayPosition({\n    isOpen: isOverflowPopupVisible,\n    placement: \"bottom left\",\n    offset:\n      // in lack of positioning options for aligning bottom and left of of the overflow popup with the bottom and left\n      // of the toolbar itself, we have to measure the popup height, and use offset to achieve the same\n      orientation === \"horizontal\"\n        ? -popupHeight + SIDE_PADDING + 1\n        : -popupHeight + 1,\n    crossOffset:\n      orientation === \"horizontal\" ? -(SIDE_PADDING + 2) : -(SIDE_PADDING + 1),\n    containerPadding: 0,\n    shouldFlip: false,\n    targetRef: orientation === \"horizontal\" ? ref : showMoreButtonRef,\n    overlayRef: overlayRef,\n    onClose: () => {\n      setOverflowPopupVisible(false);\n    },\n  });\n\n  const showOverflowPopup = () => {\n    setOverflowPopupVisible(true);\n  };\n\n  const toolbarProps = {\n    onMouseMove: (event: MouseEvent) => {\n      const firstOverflowedElement = firstOverflowedChildRef.current;\n      if (!firstOverflowedElement) {\n        return;\n      }\n      const shouldShow =\n        orientation === \"vertical\"\n          ? event.clientY > firstOverflowedElement.getBoundingClientRect().top\n          : event.clientX > firstOverflowedElement.getBoundingClientRect().left;\n      if (shouldShow !== isOverflowPopupVisible) {\n        setOverflowPopupVisible(shouldShow);\n      }\n    },\n    onMouseLeave: () => {\n      if (isOverflowPopupVisible) {\n        setOverflowPopupVisible(false);\n      }\n    },\n  };\n  const toolbarOverflowPopupProps = {\n    onMouseEnter: () => setOverflowPopupVisible(true),\n    onMouseLeave: () => setOverflowPopupVisible(false),\n  };\n  return (\n    <OrientationContext.Provider value={orientation}>\n      <StyledToolbar\n        border={border}\n        {...mergeProps(rootProps, toolbarProps)}\n        role=\"toolbar\"\n      >\n        <StyledToolbarContent\n          ref={ref}\n          role=\"presentation\"\n          firstOverflowedIndex={firstOverflowedChildIndex}\n          shouldWrap={overflowBehavior === \"wrap\"}\n        >\n          {props.children}\n        </StyledToolbarContent>\n        {overflowedElements.length > 0 && (\n          <StyledShowMoreButton\n            ref={showMoreButtonRef}\n            tabIndex={-1}\n            onMouseEnter={showOverflowPopup}\n          >\n            <PlatformIcon icon=\"ide/link\" />\n          </StyledShowMoreButton>\n        )}\n      </StyledToolbar>\n      {isOverflowPopupVisible && overflowedElements.length > 0 && (\n        // Maybe more accessible to reuse the entire Popup here? it would require more flexible API to handle mouseleave though\n        // Note: we could also render the whole toolbar with the same props and only orientation being overwritten,\n        // but it has the risk of infinite overlay opening in some edge cases, and that level of generality doesn't\n        // seem to be necessary, at least at the moment.\n        <OrientationContext.Provider value=\"horizontal\">\n          <Overlay>\n            <StyledPopupContainer\n              ref={overlayRef}\n              {...mergeProps(overlayProps, toolbarOverflowPopupProps)}\n            >\n              <ToolbarInOverlay\n                border\n                firstVisibleIndex={\n                  orientation === \"vertical\"\n                    ? firstOverflowedChildIndex\n                    : undefined\n                }\n              >\n                {props.children}\n              </ToolbarInOverlay>\n            </StyledPopupContainer>\n          </Overlay>\n        </OrientationContext.Provider>\n      )}\n    </OrientationContext.Provider>\n  );\n};\n\nconst ToolbarInOverlay = styled(StyledHorizontalToolbar)<{\n  firstVisibleIndex?: number;\n}>`\n  ${({ firstVisibleIndex }) =>\n    firstVisibleIndex &&\n    css`\n      ${StyledSeparator}:nth-child(${firstVisibleIndex + 1}) {\n        display: none;\n      }\n      > :not(:nth-child(${firstVisibleIndex}) ~ *) {\n        display: none;\n      }\n    `};\n`;\n\n/**\n * Separator to be used between items in a toolbar.\n */\nexport const ToolbarSeparator = (): React.ReactElement => {\n  const orientation = useContext(OrientationContext);\n  return orientation === \"horizontal\" ? (\n    <StyledHorizontalSeparator />\n  ) : (\n    <StyledVerticalSeparator />\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionHelpTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  actionName: React.ReactNode;\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action Help\"\n * @see {@link ActionTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionHelpTooltip = ({\n  actionName,\n  helpText,\n  shortcut,\n  link,\n  ...tooltipProps\n}: ActionHelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline {...tooltipProps}>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n      <Tooltip.Description>{helpText}</Tooltip.Description>\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  actionName: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action\"\n * @see {@link ActionHelpTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionTooltip = ({\n  actionName,\n  shortcut,\n  ...tooltipProps\n}: ActionTooltipProps): JSX.Element => {\n  return (\n    <Tooltip {...tooltipProps}>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface HelpTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Help\"\n * @see {@link ActionTooltip} {@link ActionHelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const HelpTooltip = ({\n  helpText,\n  shortcut,\n  link,\n  ...tooltipProps\n}: HelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline {...tooltipProps}>\n      <Tooltip.Header>{helpText}</Tooltip.Header>\n      {shortcut && (\n        <div>\n          <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>\n        </div>\n      )}\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { AriaPositionProps, useOverlayPosition } from \"@react-aria/overlays\";\nimport { TooltipTriggerAndOverlay } from \"./TooltipTriggerAndOverlay\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport interface PositionedTooltipTriggerProps<\n  T extends HTMLElement = HTMLElement\n> extends Omit<AriaTooltipTriggerProps, \"trigger\">,\n    Pick<\n      AriaPositionProps,\n      \"placement\" | \"offset\" | \"crossOffset\" | \"shouldFlip\"\n    > {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<T> }\n      ) => React.ReactNode);\n\n  /**\n   * Whether to show the tooltip on trigger's focus. By default, tooltip is shown only when the trigger\n   * is hovered, but it can improve accessibility to show the tooltip on focus as well.\n   */\n  showOnFocus?: boolean;\n\n  /**\n   * Ref to trigger.\n   * If not provided, a ref will be created internally.\n   * Useful for when a ref to the trigger is necessary where PositionedTooltipTrigger\n   * is used.\n   */\n  triggerRef?: RefObject<T>;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. Tooltip will be positioned based relative to the trigger.\n * The default tooltip positioning is based on cursor, which is implemented by {@link TooltipTrigger}\n */\nexport const PositionedTooltipTrigger = <T extends HTMLElement>({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset = 8,\n  showOnFocus,\n  triggerRef: inputTriggerRef,\n  ...props\n}: PositionedTooltipTriggerProps<T>): JSX.Element => {\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const fallbackRef = useObjectRef<T>(inputTriggerRef);\n  const triggerRef = inputTriggerRef || fallbackRef;\n\n  const positionAria = useOverlayPosition({\n    ...props,\n    overlayRef,\n    targetRef: triggerRef,\n    offset,\n    isOpen: state.isOpen,\n    onClose: state.close,\n  });\n\n  // A workaround for a mysterious issue that happens only in docusaurus build.\n  // The ref value is not up-to-date, when the effect runs.\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(positionAria.updatePosition);\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      positionAria={positionAria}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      showOnFocus={showOnFocus}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, { ForwardedRef, MutableRefObject, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { PositionAria } from \"@react-aria/overlays\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\nimport { TooltipPointer, TooltipPointerPosition } from \"./TooltipPointer\";\nimport {\n  tooltipBackground,\n  tooltipBorderColor,\n  WITH_POINTER_BORDER_RADIUS,\n} from \"./tooltip-styles\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n  className?: string;\n  /**\n   * Whether (and in what position) the arrow pointer should be shown.\n   * When using {@link TooltipTrigger} or {@link PositionedTooltipTrigger}, the position of the pointer is calculated\n   * based on the target element, and a boolean value to define whether the arrow should be shown or not would suffice.\n   *\n   * Tooltips with pointer have slight style difference.\n   * {@see https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?type=design&node-id=15-51&mode=design&t=7PplrxG8ZfXB4hIK-0}\n   *\n   * @example\n   * <Tooltip withPointer />\n   * // shows the pointer in the position controlled by {@link TooltipTrigger} or {@link PositionedTooltipTrigger}\n   * // If there is not `TooltipTrigger` or `PositionedTooltipTrigger`, the arrow is shown on top center by default.\n   *\n   * @example\n   * <Tooltip withPointer={{side: 'top', offset: 30}} />\n   * // shows the pointer on the top side, with horizontal offset of 30px from the left of tooltip, regardless\n   * // of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n   *\n   * @example\n   * <Tooltip withPointer={{side: 'left', offset: -30}} />\n   * // shows the pointer on the left side, with vertidcal offset of 30px from the bottom of the tooltip, regardless\n   * // of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n   */\n  withPointer?: boolean | TooltipPointerPosition;\n}\n\n// Providing default value for paddings, based on intellijlaf theme. In Intellij Platform, themes extend either\n// intellijlaf or darcula. Which means some properties can be omitted in the custom theme, relying on the values\n// in the base theme. This is not how theming works here, at the moment, and there are other similar issues, but\n// this is just a mitigation for one case, spacing in tooltip.\nexport const DEFAULT_TEXT_BORDER_INSETS = \"0.5rem 0.8125rem 0.625rem 0.625rem\";\nexport const DEFAULT_SMALL_TEXT_BORDER_INSETS =\n  \"0.375rem 0.75rem 0.4375rem 0.625rem\";\nconst StyledTooltip = styled.div<{ multiline?: boolean; hasPointer?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${tooltipBackground};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\") ||\n        DEFAULT_TEXT_BORDER_INSETS\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\") ||\n        DEFAULT_SMALL_TEXT_BORDER_INSETS};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme, hasPointer }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") || hasPointer ? \"1px\" : \"0px\"};\n  border-color: ${tooltipBorderColor};\n  ${WINDOW_SHADOW};\n  ${({ hasPointer }) =>\n    hasPointer &&\n    css`\n      position: relative; // needed for absolute positioning of the pointer\n      border-radius: ${WITH_POINTER_BORDER_RADIUS}px;\n    `}\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\nexport const placementToPointerSide: Record<\n  PositionAria[\"placement\"],\n  TooltipPointerPosition[\"side\"]\n> = {\n  bottom: \"top\",\n  top: \"bottom\",\n  left: \"right\",\n  right: \"left\",\n  center: \"top\", // doesn't make sense :-?\n};\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, withPointer, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref: MutableRefObject<HTMLDivElement | null> =\n    useObjectRef(forwardedRef);\n  const {\n    state,\n    isInteractive,\n    pointerPositionStyle,\n    placement = \"bottom\",\n  } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  const { side, offset } =\n    typeof withPointer === \"object\"\n      ? withPointer\n      : { side: placementToPointerSide[placement], offset: undefined };\n\n  return (\n    <StyledTooltip\n      hasPointer={Boolean(withPointer)}\n      multiline={multiline}\n      {...tooltipProps}\n      className={props.className}\n      ref={ref}\n    >\n      {withPointer && (\n        <TooltipPointer\n          tooltipRef={ref}\n          side={side}\n          offset={\n            offset || !pointerPositionStyle\n              ? { type: \"specific\", value: offset }\n              : { type: \"calculated\", value: pointerPositionStyle }\n          }\n        />\n      )}\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React, { CSSProperties } from \"react\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { PositionAria } from \"@react-aria/overlays\";\n\ninterface TooltipContextObject {\n  state: TooltipTriggerState;\n  isInteractive: boolean;\n  placement: PositionAria[\"placement\"];\n  pointerPositionStyle?: CSSProperties;\n}\n\nexport const TooltipContext = React.createContext<TooltipContextObject | null>(\n  null\n);\n","import { compose, identity } from \"ramda\";\nimport React, { CSSProperties, RefObject, useEffect, useState } from \"react\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nimport {\n  tooltipBackground,\n  WITH_POINTER_BORDER_RADIUS,\n} from \"./tooltip-styles\";\n\ntype OffsetValue = number | `${number}%`;\nexport type TooltipPointerPosition = {\n  /**\n   * The side of the tooltip the pointer is shown\n   */\n  side: \"top\" | \"bottom\" | \"left\" | \"right\";\n  /**\n   * - When side is \"top\" or \"bottom\":\n   *   Horizontal offset (in px) with respect to the left (or right, if negative) of the tooltip.\n   * - When side is \"left\" or \"right\":\n   *   Vertical offset (in px) with respect to the top (or bottom, if negative) of the tooltip.\n   *\n   * @default: '50%'\n   */\n  offset?: OffsetValue | { value: OffsetValue; invert?: boolean };\n};\n\nconst POINTER_WIDTH = 6;\nconst POINTER_HEIGHT = 9;\nconst POINTER_THICKNESS = 1.5;\nconst TRANSLATE = `translate(-${POINTER_WIDTH}px, -${POINTER_HEIGHT}px)`;\nconst sideStyles = {\n  top: css`\n    top: 0;\n    transform: ${TRANSLATE};\n  `,\n  bottom: css`\n    bottom: 0;\n    transform: rotateX(180deg) ${TRANSLATE};\n  `,\n  left: css`\n    left: 0;\n    transform: rotate(-90deg) ${TRANSLATE};\n  `,\n  right: css`\n    right: 0;\n    transform: rotate(90deg) ${TRANSLATE};\n  `,\n};\nconst StyledTooltipPointer = styled.span<{\n  side: TooltipPointerPosition[\"side\"];\n}>`\n  position: absolute;\n  width: 0;\n  height: 0;\n  ${({ side }) => sideStyles[side]};\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    border-left: ${POINTER_WIDTH + POINTER_THICKNESS}px solid transparent;\n    border-right: ${POINTER_WIDTH + POINTER_THICKNESS}px solid transparent;\n    border-bottom: ${POINTER_HEIGHT + POINTER_THICKNESS}px solid #636569;\n    left: -${POINTER_THICKNESS}px;\n    top: -${POINTER_THICKNESS}px;\n  }\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    border-left: ${POINTER_WIDTH}px solid transparent;\n    border-right: ${POINTER_WIDTH}px solid transparent;\n    border-bottom: ${POINTER_HEIGHT}px solid ${tooltipBackground};\n  }\n`;\n\nfunction normalizeCssValue(value: string | number) {\n  return typeof value === \"number\" ? `${value}px` : value;\n}\n\nconst withMin = (min: number) => (value: string | number | undefined) =>\n  value != undefined ? `max(${min}px, ${normalizeCssValue(value)})` : value;\nconst withMax = (max: number) => (value: string | number | undefined) =>\n  value != undefined ? `min(${max}px, ${normalizeCssValue(value)})` : value;\nconst HEIGHT_OFFSET = POINTER_HEIGHT + WITH_POINTER_BORDER_RADIUS;\nconst WIDTH_OFFSET = POINTER_WIDTH + WITH_POINTER_BORDER_RADIUS;\n\n/**\n * Ensures pointer is not offset too much or too little that would make the arrow appear\n * outside the tooltip boundary.\n */\nfunction limitPointerPositionStyles(\n  { width, height }: { width: number | undefined; height: number | undefined },\n  { top, left, right, bottom }: CSSProperties\n) {\n  const applyVerticalMinMax = compose(\n    height ? withMax(height - HEIGHT_OFFSET) : identity,\n    withMin(HEIGHT_OFFSET)\n  );\n  const applyHorizontalMinMax = compose(\n    width ? withMax(width - WIDTH_OFFSET) : identity,\n    withMin(WIDTH_OFFSET)\n  );\n  return {\n    top: applyVerticalMinMax(top),\n    bottom: applyVerticalMinMax(bottom),\n    left: applyHorizontalMinMax(left),\n    right: applyHorizontalMinMax(right),\n  };\n}\n\nconst getOffsetCssProp = (\n  side: TooltipPointerPosition[\"side\"],\n  invert?: boolean\n): \"top\" | \"bottom\" | \"left\" | \"right\" => {\n  if (side === \"top\" || side === \"bottom\") {\n    return invert ? \"right\" : \"left\";\n  }\n  return invert ? \"bottom\" : \"top\";\n};\n\nfunction pointerPositionToOffsetStyle({\n  side,\n  offset = \"50%\",\n}: TooltipPointerPosition): CSSProperties {\n  const { invert = false, value: offsetValue } =\n    typeof offset === \"object\" ? offset : { invert: false, value: offset };\n  return {\n    [getOffsetCssProp(side, invert)]: offsetValue,\n  };\n}\n\nexport function TooltipPointer({\n  side,\n  offset,\n  tooltipRef,\n}: {\n  side: TooltipPointerPosition[\"side\"];\n  offset:\n    | { type: \"calculated\"; value: CSSProperties }\n    | { type: \"specific\"; value: TooltipPointerPosition[\"offset\"] };\n  tooltipRef: RefObject<HTMLElement>;\n}) {\n  const [size, setSize] = useState<{\n    height: number | undefined;\n    width: number | undefined;\n  }>({ height: undefined, width: undefined });\n  useEffect(() => {\n    const { offsetHeight, offsetWidth } = tooltipRef.current || {};\n    if (offsetHeight != size?.height || offsetWidth != size?.width) {\n      setSize({ height: offsetHeight, width: offsetWidth });\n    }\n  });\n\n  return (\n    <StyledTooltipPointer\n      side={side}\n      style={limitPointerPositionStyles(\n        size,\n        offset.type === \"specific\"\n          ? pointerPositionToOffsetStyle({ side, offset: offset.value })\n          : offset.value\n      )}\n    />\n  );\n}\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { AriaPositionProps } from \"@react-aria/overlays\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { TooltipTriggerAndOverlay } from \"@intellij-platform/core/Tooltip/TooltipTriggerAndOverlay\";\n\nexport interface TooltipTriggerProps\n  // controlling isOpen state is not supported since positioning is based on cursor.\n  // PositionedTooltipTrigger can be used for controlled isOpen state\n  extends Omit<AriaTooltipTriggerProps, \"isOpen\" | \"defaultOpen\" | \"trigger\"> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Placement of the tooltip with respect to the cursor\n   * @default \"bottom left\"\n   */\n  placement?: AriaPositionProps[\"placement\"];\n  /**\n   * The additional offset applied along the main axis between the element and its\n   * anchor element.\n   * @default theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20\n   */\n  offset?: number;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}.\n * Showing tooltip on focus and controlled open state are not supported at the moment, based on how tooltip works in the\n * reference impl, and since tooltip is positioned based on cursor position. Positioning the tooltip based on cursor\n * position requires tooltip to be opened on hover. That's why neither controlling opened state nor showing the tooltip\n * on focus are supported here. {@link PositionedTooltipTrigger} allows for positioning the tooltip with respect to the\n * trigger element, and offers more options.\n */\nexport const TooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset,\n  placement = \"bottom left\",\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const triggerRef = useRef<HTMLElement>(null);\n  const theme = useTheme();\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  const positionAria = useMouseEventOverlayPosition({\n    overlayRef,\n    isOpen: state.isOpen,\n    placement,\n    shouldFlip: true,\n    offset:\n      offset ?? theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20,\n  });\n\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(() => {\n        positionAria.updatePosition();\n      });\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      positionAria={positionAria}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      /**\n       * If we want to support showing tooltip on focus, or if we want to allow controlled open state, we should let it\n       * be positioned by the trigger element in that case, rather than mouse position.\n       * One solution would be to use useOverlayPosition as well, and conditionally use the right `overlayProps`, based on\n       * whether the position determined by mouse is within `triggerRef.current?.getBoundingClientRect()`. Another way\n       * (maybe better) would be to have `useMouseEventOverlayPosition` accept `bounds` or `containerBounds`, which if\n       * passed, makes sure the position is kept within that boundary. Outside positions would be mapped to the closest\n       * point on the border of the boundary.\n       */\n      showOnFocus={false}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useState,\n} from \"react\";\nimport { useTooltipTrigger as useAriaTooltipTrigger } from \"@react-aria/tooltip\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { Overlay, PositionAria } from \"@react-aria/overlays\";\nimport { mergeProps, useLayoutEffect } from \"@react-aria/utils\";\n\nimport { TooltipContext } from \"./TooltipContext\";\n\ninterface TooltipTriggerBaseProps<T extends HTMLElement = HTMLElement> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  trigger:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<T> }\n      ) => React.ReactNode);\n\n  state: TooltipTriggerState;\n\n  showOnFocus?: boolean;\n  positionAria: PositionAria;\n  overlayRef: RefObject<HTMLDivElement>;\n  triggerRef: RefObject<T>;\n  isDisabled?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. It doesn't handle tooltip positioning, and so shouldn't be used\n * directly. {@param tooltipOverlayProps} should be used to apply the intended positioning.\n *\n * TODO: Implement timeout-based auto-hide (https://jetbrains.github.io/ui/controls/tooltip/#19)\n * TODO: shadow\n */\nexport const TooltipTriggerAndOverlay = <T extends HTMLElement>({\n  tooltip,\n  trigger,\n  state,\n  overlayRef,\n  triggerRef,\n  showOnFocus,\n  positionAria,\n  ...props\n}: TooltipTriggerBaseProps<T>): JSX.Element => {\n  const [isInteractive, setInteractive] = useState(false);\n  const { triggerProps, tooltipProps } = useTooltipTrigger(\n    props,\n    // In Intellij Platform. The tooltip hides right away. We follow the same, unless the tooltip is interactive.\n    // Maybe something to rethink if it's worth following the reference impl for.\n    { ...state, close: isInteractive ? state.close : () => state.close(true) },\n    triggerRef\n  );\n\n  if (!showOnFocus) {\n    delete triggerProps.onFocus;\n  }\n\n  useLayoutEffect(() => {\n    setInteractive(\n      overlayRef.current?.querySelector(\n        'a, button, [role=\"button\"], [role=link]'\n      ) !== null\n    );\n  });\n  return (\n    <>\n      {normalizeChildren(trigger, { ...triggerProps, ref: triggerRef })}\n      {state.isOpen && !props.isDisabled && (\n        <Overlay>\n          <TooltipContext.Provider\n            value={{\n              state,\n              isInteractive,\n              placement: positionAria.placement,\n              pointerPositionStyle: positionAria.arrowProps.style,\n            }}\n          >\n            <div\n              {...mergeProps(\n                positionAria.overlayProps,\n                // Is it ok to apply tooltip props on this wrapper?\n                tooltipProps\n              )}\n              ref={overlayRef}\n            >\n              {tooltip}\n            </div>\n          </TooltipContext.Provider>\n        </Overlay>\n      )}\n    </>\n  );\n};\n\nfunction normalizeChildren<T extends HTMLElement = HTMLElement>(\n  children: TooltipTriggerBaseProps<T>[\"trigger\"],\n  triggerProps: HTMLAttributes<HTMLElement> & { ref: RefObject<T> }\n) {\n  if (typeof children === \"function\") {\n    return children(triggerProps);\n  }\n  if (React.isValidElement(children) && typeof children.type === \"string\") {\n    return React.cloneElement(children, triggerProps);\n  }\n  return <FocusableProvider {...triggerProps}>{children}</FocusableProvider>;\n}\n\n/**\n * A wrapper around react-aria's useTooltipTrigger, adjusting it for Intellij Platform.\n */\nconst useTooltipTrigger: typeof useAriaTooltipTrigger = (props, state, ref) => {\n  const { triggerProps, tooltipProps } = useAriaTooltipTrigger(\n    props,\n    state,\n    ref\n  );\n  // onPointerDown returned from the underlying usePress stops propagation which messes with some usages of tooltip\n  // like in tab or tool window stripe button. We replace onPointerDown handler with a similar handler that closes\n  // the tooltip.\n  triggerProps.onPointerDown = () => {\n    if (!(ref.current instanceof HTMLInputElement)) {\n      state.close(true);\n    }\n  };\n  /**\n   * onMouseDown is preventDefault-ed which interferes with functionality of the tooltip trigger, in use cases like\n   * tool window stripe button. Note that since pointerDown is handled for calling the tooltip trigger's onPressStart\n   * handler (which hides the tooltip), there is no issue in excluding onMouseDown, because it's only used to preventDefault\n   * the event, because of some edge cases focus handling which is not our concern.\n   */\n  delete triggerProps.onMouseDown;\n\n  return {\n    triggerProps,\n    tooltipProps,\n  };\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ValidationTooltipProps {\n  children: React.ReactNode;\n  /**\n   * @default error\n   */\n  type?: \"error\" | \"warning\";\n}\n\nconst StyledValidationTooltip = styled(Tooltip)`\n  box-shadow: none;\n  padding: 0.25rem 0.5rem; // from ComponentValidator class in the reference impl\n  max-width: ${({ theme }) =>\n    `${theme.value<number>(\"ValidationTooltip.maxWidth\")}px`};\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.errorBackground\")};\n  border: 1px solid\n    ${({ theme }) => theme.color(\"ValidationTooltip.errorBorderColor\")};\n`;\n\nconst StyledWarningValidationTooltip = styled(StyledValidationTooltip)`\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBackground\")};\n  border-color: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBorderColor\")};\n`;\n\n/**\n * Tooltip to be used for validation error messages\n * @see https://jetbrains.github.io/ui/principles/validation_errors/\n */\nexport const ValidationTooltip = ({\n  type = \"error\",\n  children,\n}: ValidationTooltipProps): JSX.Element => {\n  const Component =\n    type === \"error\" ? StyledValidationTooltip : StyledWarningValidationTooltip;\n  return <Component multiline>{children}</Component>;\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\n\nexport const WITH_POINTER_BORDER_RADIUS = 4;\nexport const tooltipBackground = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\");\nexport const tooltipBorderColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\");\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n}: {\n  item: Node<T>;\n}) => {\n  return (\n    <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n      <TreeNode key={item.key} item={item} />\n    </SpeedSearchItemHighlightsProvider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchStateProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport { useCollectionRef } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { StyledTree } from \"../StyledTree\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { SpeedSearchTreeNode } from \"./SpeedSearchTreeNode\";\nimport { filterDOMProps } from \"@react-aria/utils\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps &\n  SpeedSearchStateProps & {\n    /**\n     * Whether speed search popup should not be shown. Useful when speed search state is controlled, and\n     * a search input is rendered outside the tree.\n     */\n    hideSpeedSearchPopup?: boolean;\n  };\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      treeRef,\n      hideSpeedSearchPopup,\n      style,\n      className,\n      ...props\n    }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(\n      { ...props, disallowEmptySelection: !props.allowEmptySelection },\n      treeRef\n    );\n    useCollectionRef(props, state);\n    const ref = useForwardedRef(forwardedRef);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          {!hideSpeedSearchPopup && <SpeedSearchPopup {...searchPopupProps} />}\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n            {...filterDOMProps(props, { labelable: true })}\n            style={style}\n            className={className}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchStateProps,\n} from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SpeedSearchStateProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    ref,\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (\n        [\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key) &&\n        !hasAnyModifier(e)\n      ) {\n        speedSearch.clear();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList).attrs({ role: \"tree\" as string })`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import React, { Key, MutableRefObject } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport type TreeContextType<T> = {\n  state: Pick<\n    TreeState<T>,\n    | \"collection\"\n    | \"selectionManager\"\n    | \"expandedKeys\"\n    | \"disabledKeys\"\n    | \"toggleKey\"\n  >;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item?.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { TREE_ICON_SIZE } from \"./TreeNodeIcon\";\n\ntype StyledListItemProps = {\n  level: number;\n};\nexport const StyledTreeNode = styled(StyledListItem).attrs<StyledListItemProps>(\n  { role: \"treeitem\" }\n)<StyledListItemProps>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n  padding-right: 0.25rem;\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"Tree.foreground\" as UnknownThemeProp<\"Tree.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"Tree.selectionForeground\" as UnknownThemeProp<\"Tree.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"Tree.selectionBackground\" as UnknownThemeProp<\"Tree.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"Tree.selectionInactiveForeground\" as UnknownThemeProp<\"Tree.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"Tree.selectionBackgroundInactive\" as UnknownThemeProp<\"Tree.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n    };\n  }}\n`;\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\nimport { StyledTreeNode } from \"@intellij-platform/core/Tree/StyledTreeNode\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n  showAsFocused?: boolean;\n};\n\nexport function TreeNode<T>({ item }: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isContainerFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n  const ariaProps = {\n    role: \"treeitem\",\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }, ariaProps),\n  };\n}\n","import { Key, RefObject, useEffect, useMemo, useRef, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { FocusEvents } from \"@react-types/shared/src/events\";\nimport { FocusStrategy } from \"@react-types/shared/src/selection\";\nimport { groupBy } from \"ramda\";\n\nexport interface SelectableTreeProps<T>\n  extends DOMProps,\n    Omit<FocusEvents, \"onFocusChange\"> {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n\n  allowEmptySelection?: boolean;\n\n  autoFocus?: boolean | FocusStrategy;\n\n  showAsFocused?: boolean;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  {\n    onAction,\n    onFocus,\n    onBlur,\n    autoFocus,\n    showAsFocused,\n    ...props\n  }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    selectOnFocus: true,\n    autoFocus,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    const focusedItem = focusedKey\n      ? state.collection.getItem(focusedKey)\n      : null;\n    if (focusedItem) {\n      const isExpandable = Boolean(focusedItem?.hasChildNodes);\n      const expanded = state.expandedKeys.has(focusedKey);\n      const isDisabled = state.disabledKeys.has(focusedKey);\n      if (isDisabled) {\n        event.continuePropagation();\n        return;\n      }\n      props?.onNodeKeyDown?.(event, focusedItem);\n      const shouldToggle =\n        !hasAnyModifier(event) &&\n        (event.key === \"Enter\" ||\n          (event.key === \"ArrowLeft\" && expanded) ||\n          (event.key === \"ArrowRight\" && !expanded));\n      if (isExpandable && shouldToggle) {\n        event.preventDefault();\n        state.toggleKey(focusedKey);\n        return;\n      } else if (event.key === \"Enter\") {\n        onAction?.(focusedKey);\n        return;\n      }\n    }\n    // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n    // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n    // inputs when the propagation is not prevented.\n    // Also, selectionKeyDown is not accurate in handling actions like \"select all\". e.g. it takes 'cmd+shift+a' too,\n    // as select all which can conflict with action system. So we don't call it if there are multiple modifiers.\n    const hasAtMostOneModifier =\n      [event.metaKey, event.ctrlKey, event.shiftKey, event.altKey].filter(\n        (i) => i\n      ).length < 2;\n    if (hasAtMostOneModifier) {\n      selectionKeyDown?.(event);\n    }\n    event.continuePropagation();\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused: Boolean(focused || showAsFocused),\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      showAsFocused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n  useSelectParentOfRemovedSelectedNode(state);\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps,\n      { onFocus, onBlur, role: \"tree\" }\n    ),\n    treeContext,\n    focused,\n  };\n}\n\n/**\n * When a selected node is removed from the tree, selects the parent of the removed node\n * if no other node is selected.\n *\n * Note: this behavior is observed in a couple of tree views, including project files tree.\n * There could be an option for disabling/enabling it, if use cases comes up in future\n * where this behavior causes issues.\n */\nconst useSelectParentOfRemovedSelectedNode = (state: TreeState<unknown>) => {\n  const previousCollectionRef = useRef(state.collection);\n  useEffect(() => {\n    if (state.selectionManager.rawSelection !== \"all\") {\n      const keys = [...state.collection.getKeys()];\n\n      const { invalid = [], valid = [] } = groupBy(\n        (selectedKey) => (keys.includes(selectedKey) ? \"valid\" : \"invalid\"),\n        [...state.selectionManager.selectedKeys]\n      );\n      if (valid.length === 0 && invalid.length > 0) {\n        for (let invalidKey of invalid) {\n          let key: Key | undefined = invalidKey;\n          while (key != undefined) {\n            if (keys.includes(key)) {\n              state.selectionManager.setSelectedKeys(valid.concat(key));\n              state.selectionManager.setFocusedKey(key);\n              return;\n            }\n            key =\n              previousCollectionRef.current.getItem(key)?.parentKey ??\n              undefined;\n          }\n        }\n      }\n    }\n    previousCollectionRef.current = state.collection;\n  }, [state.collection]);\n};\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","//@ts-nocheck\n/**\n * Not exported from @react-stately/tree, but needed in the custom implementation of useTreeState\n */\n\nimport { Key } from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node?.prevKey ?? null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node?.nextKey ?? null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key) ?? null;\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","import { Node } from \"@react-types/shared\";\nimport { Key } from \"react\";\n\n/**\n * given a node, returns keys of all consecutive single children\n */\nexport function getSingleChildrenKeys<T>(\n  node: Node<T> | null | undefined\n): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive<T>(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n): Key[] {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nconst isExpandable = <T>(node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager,\n  SelectionManagerOptions,\n} from \"@react-stately/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key } from \"react\";\n\nexport class TreeSelectionManager extends SelectionManager {\n  private readonly collection: Collection<Node<unknown>>;\n\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState,\n    options?: SelectionManagerOptions\n  ) {\n    super(collection, state, options);\n    this.collection = collection;\n  }\n\n  expandSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      if (node) {\n        const { expandKeys } = this.getExpandAndShrinkKeys(node);\n        if (expandKeys.length > 0) {\n          this.setSelectedKeys([...this.selectedKeys, ...expandKeys]);\n        }\n      }\n    }\n  }\n  shrinkSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      if (node) {\n        const { shrinkKeys } = this.getExpandAndShrinkKeys(node);\n        if (shrinkKeys.length > 0) {\n          this.setSelectedKeys(\n            [...this.selectedKeys].filter((key) => !shrinkKeys.includes(key))\n          );\n        }\n      }\n    }\n  }\n\n  private getExpandAndShrinkKeys(node: Node<unknown>) {\n    return this.recursivelyGetExpandAndShrinkKeys(\n      node,\n      [...this.collection.getKeys()],\n      null\n    );\n  }\n  /**\n   * Starting from a node, traverses the tree up, until it reaches the root of the fully selected subtree that includes\n   * the starting node. The root itself may or may not be selected. Returns:\n   * - keys to be added to selection, when expanding selection\n   * - keys to be removed from selection, when shrinking selection\n   */\n  private recursivelyGetExpandAndShrinkKeys(\n    node: Node<unknown>,\n    keys: Array<Key>,\n    previousChild: Key | null\n  ): { expandKeys: Key[]; shrinkKeys: Key[] } {\n    const parent =\n      node && node.parentKey ? this.collection.getItem(node.parentKey) : null;\n    const newKeys = keys.filter((key) => key !== previousChild);\n    const parentDescendants = parent\n      ? getAllDescendants(parent, newKeys).map(({ key }) => key)\n      : this.getAllRoots().flatMap((key) => {\n          const item = this.collection.getItem(key);\n          return key !== node.key && item\n            ? getAllDescendants(item, newKeys)\n                .map(({ key }) => key)\n                .concat(key)\n            : [];\n        });\n    if (parent && parentDescendants.every((key) => this.isSelected(key))) {\n      return this.recursivelyGetExpandAndShrinkKeys(parent, keys, node.key);\n    }\n    const descendants = getAllDescendants(\n      node,\n      keys.filter((key) => key !== previousChild)\n    ).map(({ key }) => key);\n\n    return {\n      expandKeys: descendants.some((key) => !this.isSelected(key))\n        ? descendants\n        : !this.isSelected(node.key)\n        ? [node.key]\n        : parentDescendants,\n      shrinkKeys:\n        parentDescendants.length > 0 &&\n        parentDescendants.every((key) => this.isSelected(key))\n          ? parentDescendants\n          : this.isSelected(node.key) && previousChild\n          ? [node.key]\n          : descendants.filter((key) => this.isSelected(key)),\n    };\n  }\n\n  private getAllRoots() {\n    return [...this.collection.getKeys()].filter(\n      (key) => this.collection.getItem(key)?.parentKey == null\n    );\n  }\n}\n\nfunction getAllDescendants<T>(\n  node: Node<T>,\n  stopKeys: Array<React.Key>\n): Node<T>[] {\n  const childNodes = (node.hasChildNodes ? [...node.childNodes] : []).filter(\n    (node) => stopKeys.includes(node.key)\n  );\n  return node.hasChildNodes\n    ? childNodes.concat(\n        childNodes.map((node) => getAllDescendants(node, stopKeys)).flat()\n      )\n    : [];\n}\n","import {\n  Collection,\n  CollectionStateBase,\n  Expandable,\n  MultipleSelection,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeProps as _TreeProps, TreeState } from \"@react-stately/tree\";\nimport {\n  TreeRefValue,\n  useTreeRef,\n} from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useCallback, useEffect, useMemo } from \"react\";\nimport { useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport { TreeCollection as _TreeCollection } from \"./__copied__TreeCollection\";\nimport { getSingleChildrenKeys } from \"./getSingleChildrenKeys\";\nimport { TreeSelectionManager } from \"@intellij-platform/core/Tree/TreeSelectionManager\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport class TreeCollection<T> extends _TreeCollection<T> {\n  public readonly rootKeys: Key[];\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys: Set<Key> }\n  ) {\n    super(nodes, { expandedKeys });\n    this.rootKeys = Array.from(nodes).map(({ key }) => key);\n  }\n\n  getAllExpandableKeys(): Set<Key> {\n    const rootNodes = this.rootKeys\n      .map((key) => this.getItem(key))\n      .filter(notNull);\n    return this.recursivelyAddExpandableKeys(rootNodes, new Set<Key>());\n  }\n\n  private recursivelyAddExpandableKeys(\n    nodes: Iterable<Node<T>>,\n    result: Set<Key>\n  ) {\n    for (const node of nodes) {\n      if (node?.hasChildNodes) {\n        result.add(node.key);\n        this.recursivelyAddExpandableKeys(node.childNodes, result);\n      }\n    }\n    return result;\n  }\n}\nexport interface TreeProps<T>\n  extends CollectionStateBase<T, TreeCollection<T>>,\n    Expandable,\n    MultipleSelection,\n    CollectionCacheInvalidationProps {\n  childExpansionBehaviour?: \"multi\" | \"single\";\n}\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n *\n * Similar to (and initially copied from) useTreeState from @react-stately/tree, but with the following changes:\n * - Supports exposing some imperative API via ref.\n *   Could be done via a wrapper too.\n * - Different onToggle implementation with two adjustments to match Intellij Platform:\n *   - Collapsing a key collapses all descendants as well.\n *   - Expanding a single-child node will recursively expand all single-child descendants.\n *   Couldn't be done with a wrapper in a clean and optimal way. Access to setExpandedKey is not provided. We would need\n *   to either maintain a new state for expanded keys and ignore the one returned from the wrapped hook, or\n *   inefficiently call the returned `toggleKey` function many times.\n * - Supports collection invalidation via CollectionCacheInvalidationProps\n *   Perhaps not the most important addition, but not possible to be done via a wrapper.\n * - Uses TreeSelectionManager instead of the default SelectionManager, which implements expand/shrink selection.\n *   Could be done in a wrapper, with a little hack. Would need to replace selection manager.\n * - returned `collection` is of type `TreeCollection` (which is an improved version of react-stately `TreeCollection`),\n *   instead of the more generic `Collection`.\n */\nexport function useTreeState<T extends object>(\n  { childExpansionBehaviour = \"multi\", ...props }: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRefValue>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined!,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange!\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  let tree = useCollection<T, TreeCollection<T>>(\n    props,\n    useCallback(\n      (nodes) => new TreeCollection(nodes, { expandedKeys }),\n      [expandedKeys]\n    ),\n    context\n  );\n\n  const selectionManager = new TreeSelectionManager(\n    tree as Collection<Node<T>>,\n    selectionState\n  );\n\n  useTreeRef({ selectionManager, setExpandedKeys, tree }, treeRef);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      // @ts-expect-error imprecise typing in @react-stately/selection\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const toggleKey = (key: Key) => {\n    let newExpandedKeys = toggleTreeNode(\n      tree as Collection<Node<T>>,\n      expandedKeys,\n      key\n    );\n    if (childExpansionBehaviour === \"single\") {\n      const expandedSiblings = getSiblings(tree, key).filter(\n        (aKey) => aKey !== key && expandedKeys.has(aKey)\n      );\n      newExpandedKeys = expandedSiblings.reduce((expandedKeys, expandedKey) => {\n        return toggleTreeNode(\n          tree as Collection<Node<T>>,\n          expandedKeys,\n          expandedKey\n        );\n      }, newExpandedKeys);\n    }\n    setExpandedKeys(newExpandedKeys);\n  };\n\n  return {\n    collection: tree as Collection<Node<T>>,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n    selectionManager,\n    setExpandedKeys,\n  };\n}\n\nfunction getChildItems<T>(node: Node<T>): Node<T>[] {\n  const childNodes = [...(node.childNodes || [])];\n  const childItems = childNodes.filter(({ type }) => type === \"item\");\n  const sectionItems = childNodes.filter(({ type }) => type === \"section\");\n\n  return childItems.concat(sectionItems.flatMap(getChildItems));\n}\n\nfunction getRootItemKeys(tree: TreeCollection<unknown>) {\n  return tree.rootKeys\n    .map((key) => tree.getItem(key))\n    .filter(notNull)\n    .flatMap(getChildItems)\n    .map(({ key }) => key);\n}\n/**\n * Returns the siblings of an item in tree, ignoring sections.\n * Disclaimer: The code is done quick and dirty and in a rush. Unpleasant code, good candidate for refactoring :D\n */\nfunction getSiblings(tree: TreeCollection<unknown>, key: Key): Key[] {\n  const parentKey = tree.getItem(key)?.parentKey;\n  if (!parentKey) {\n    return [...tree.rootKeys].concat(getRootItemKeys(tree));\n  }\n  let parent = parentKey ? tree.getItem(parentKey) : null;\n  if (parent?.type === \"item\") {\n    return getChildItems(parent).map(({ key }) => key);\n  }\n  const siblings: Key[] = [];\n  while (parent) {\n    siblings.push(...getChildItems(parent).map(({ key }) => key));\n    if (parent.type === \"section\") {\n      if (parent.parentKey) {\n        parent = tree.getItem(parent.parentKey);\n      } else {\n        siblings.push(...getRootItemKeys(tree));\n        parent = null;\n      }\n    } else {\n      parent = null;\n    }\n  }\n  return Array.from(new Set(siblings));\n}\nfunction toggleTreeNode(\n  tree: Collection<Node<unknown>>,\n  expandedKeys: Set<Key>,\n  key: Key\n): Set<Key> {\n  // toggling a non-expandable node should be no-op\n  if (!expandedKeys.has(key) && !tree.getItem(key)?.hasChildNodes) {\n    return expandedKeys;\n  }\n  const newKeys = toggleKey(expandedKeys, key);\n  // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n  // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n  for (const aKey of newKeys) {\n    if (tree.getItem(aKey) == null) {\n      newKeys.delete(aKey);\n    }\n  }\n\n  // If we are toggling it open, expand all expandable single-child items\n  if (newKeys.has(key)) {\n    for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n      newKeys.add(aKey);\n    }\n  }\n  return newKeys;\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeSelectionManager } from \"./TreeSelectionManager\";\nimport { TreeCollection } from \"./useTreeState\";\n\nexport interface TreeRefValue {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n\n  /**\n   * Extends selection to all siblings of the currently focused node.\n   */\n  expandSelection(): void;\n  /**\n   * Shrinks selection towards currently focused node.\n   */\n  shrinkSelection(): void;\n\n  expandAll(): void;\n  collapseAll(): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef<T extends {}>(\n  props: {\n    tree: TreeCollection<T>;\n    selectionManager: TreeSelectionManager;\n    setExpandedKeys: (keys: Set<Key>) => void;\n  },\n  forwardedRef?: ForwardedRef<TreeRefValue>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n        expandSelection() {\n          latestState.current.selectionManager.expandSelection();\n        },\n        shrinkSelection() {\n          latestState.current.selectionManager.shrinkSelection();\n        },\n        expandAll() {\n          latestState.current.setExpandedKeys(\n            latestState.current.tree.getAllExpandableKeys()\n          );\n        },\n        collapseAll() {\n          const { tree, setExpandedKeys, selectionManager } =\n            latestState.current;\n          const focusedKey = selectionManager.focusedKey;\n          setExpandedKeys(new Set());\n\n          // Find the root node that is a grandparent of focused node, and focus/select it.\n          // NOTE: this behaviour of updating selection when nodes are collapsed is something to be fixed in general,\n          // and then this custom logic here would be not necessary.\n          if (focusedKey && !tree.rootKeys.includes(focusedKey)) {\n            let item = tree.getItem(focusedKey);\n            while (item?.parentKey != null) {\n              item = tree.getItem(item.parentKey);\n            }\n            if (item) {\n              selectionManager.setFocusedKey(item.key);\n              if (selectionManager.isSelected(focusedKey)) {\n                selectionManager.select(item.key);\n              }\n            }\n          }\n        },\n      };\n    },\n    []\n  );\n}\n","import { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect, Size } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  doBuildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    /**\n     * The only difference here is that in tree, we need to use getKeys() to get the keys for a flattened list of items\n     * that are currently visible. With this difference only, things seem to work as expected, but sections are not\n     * tested, and not even sure if they would be applicable for Tree view.\n     * Diff compared to ListView#BuildCollection:\n     * -        for (let node of this.collection) {\n     * +        const visibleNodes = [...this.collection.getKeys()].map(key => this.collection.getItem(key));\n     * +        for (let node of visibleNodes) {\n     * This needs to be maintained with version upgrades, until TreeLayout is supported:\n     * https://github.com/adobe/react-spectrum/issues/2396\n     */\n    const visibleNodes = [...this.collection.getKeys()]\n      .map((key) => this.collection.getItem(key))\n      .filter(notNull);\n    for (let node of visibleNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(\n        0,\n        y,\n        this.virtualizer.visibleRect.width,\n        this.loaderHeight ?? this.virtualizer.visibleRect.height\n      );\n      let loader = new LayoutInfo(\"loader\", \"loader\", rect);\n      this.layoutInfos.set(\"loader\", loader);\n      nodes.push({ layoutInfo: loader });\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      let rect = new Rect(\n        0,\n        y,\n        this.virtualizer.visibleRect.width,\n        this.placeholderHeight ?? this.virtualizer.visibleRect.height\n      );\n      let placeholder = new LayoutInfo(\"placeholder\", \"placeholder\", rect);\n      this.layoutInfos.set(\"placeholder\", placeholder);\n      nodes.push({ layoutInfo: placeholder });\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new Size(\n      this.virtualizer.visibleRect.width,\n      y + this.padding\n    );\n    return nodes;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { RefObject } from \"react\";\nimport {\n  ActionDefinition,\n  CommonActionId,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TreeRefValue } from \"@intellij-platform/core/Tree\";\n\n/**\n * Returns action definitions object for common tree actions\n * TODO: add example in docs\n */\nexport function useTreeActions({\n  treeRef,\n}: {\n  treeRef: RefObject<TreeRefValue>;\n}): Array<ActionDefinition> {\n  return [\n    {\n      id: CommonActionId.EXPAND_ALL,\n      title: \"Expand All\",\n      icon: <PlatformIcon icon=\"actions/expandall\" />,\n      actionPerformed: () => {\n        treeRef.current?.expandAll();\n      },\n    },\n    {\n      id: CommonActionId.COLLAPSE_ALL,\n      title: \"Collapse All\",\n      icon: <PlatformIcon icon=\"actions/collapseall\" />,\n      actionPerformed: () => {\n        treeRef.current?.collapseAll();\n      },\n    },\n    {\n      id: CommonActionId.EXPAND_SELECTION,\n      title: \"Expand Selection\",\n      actionPerformed: () => {\n        treeRef.current?.expandSelection();\n      },\n    },\n    {\n      id: CommonActionId.SHRINK_SELECTION,\n      title: \"Shrink Selection\",\n      // TODO: disable if selection is only one item. Would need more data from treeRef. Maybe after treeRef is refactored\n      //  to implement/extend CollectionRef\n      actionPerformed: () => {\n        treeRef.current?.shrinkSelection();\n      },\n    },\n  ];\n}\n","import { Key } from \"react\";\n\ninterface SetState<T> {\n  items: Iterable<T>;\n\n  toggle(key: T): void;\n\n  add(...key: T[]): void;\n\n  delete(...key: T[]): void;\n}\n\nexport type SelectionState = \"NotSelected\" | \"Selected\" | \"PartiallySelected\";\n\nexport interface TreeModel<T, K = Key> {\n  rootNodes: ReadonlyArray<T>;\n  getChildren: (root: T) => ReadonlyArray<T> | /*for convenience*/ T | null;\n  getKey: (item: T) => K;\n}\n\nexport interface NestedSelectionState<T> {\n  getSelectionState: (item: T) => SelectionState;\n  toggle: (item: T) => void;\n}\n\nconst collectSelectableItems = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>\n) => {\n  const collectedItems: T[] = [];\n  collectSelectableItemsRecursive(item, getChildren, collectedItems);\n  return collectedItems;\n};\nconst collectSelectableItemsRecursive = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>,\n  collectedItems: T[] = []\n) => {\n  const children = getChildren(item);\n  if (children == null) {\n    collectedItems.push(item);\n  } else {\n    children.forEach((child) =>\n      collectSelectableItemsRecursive(child, getChildren, collectedItems)\n    );\n  }\n};\n\n// TODO: maybe change the interface to work with keys instead of items?\nexport class NestedSelection<T extends object, K = Key>\n  implements NestedSelectionState<T>\n{\n  cache = new WeakMap<T, SelectionState>();\n  constructor(private state: SetState<K>, private tree: TreeModel<T, K>) {\n    this.tree = tree;\n    this.state = state;\n  }\n\n  toggle(item: T) {\n    const children = this.tree.getChildren(item);\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    if (isSelectableNode) {\n      this.state.toggle(key);\n    } else {\n      const state = this.getSelectionState(item);\n      const itemsInSubtree = collectSelectableItems(item, (item) =>\n        normalizeChildren(this.tree.getChildren(item))\n      ).map(this.tree.getKey);\n      if (state === \"Selected\") {\n        this.state.delete(...itemsInSubtree);\n      } else {\n        this.state.add(...itemsInSubtree);\n      }\n    }\n  }\n\n  getSelectionState(item: T): SelectionState {\n    // caching can be refactored into a nice little decorator like WeakMapCached which would be applicable on a method\n    // with a single object argument.\n    const cachedState = this.cache.get(item);\n    if (cachedState) {\n      return cachedState;\n    }\n    const children = normalizeChildren(this.tree.getChildren(item));\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    let state: SelectionState;\n    if (isSelectableNode) {\n      state = [...this.state.items].includes(key) ? \"Selected\" : \"NotSelected\";\n    } else {\n      const allDescendantsStates = children.map((child) =>\n        this.getSelectionState(child)\n      );\n      if (allDescendantsStates.every((state) => state === \"NotSelected\")) {\n        state = \"NotSelected\";\n      } else {\n        state = allDescendantsStates.every((state) => state === \"Selected\")\n          ? \"Selected\"\n          : \"PartiallySelected\";\n      }\n    }\n    this.cache.set(item, state);\n    return state;\n  }\n}\n\nfunction normalizeChildren<T>(children: T | ReadonlyArray<T> | null) {\n  if (children) {\n    return ([] as ReadonlyArray<T>).concat(children);\n  }\n  return null;\n}\n","import React, { ForwardedRef } from \"react\";\nimport {\n  SpeedSearchTree,\n  SpeedSearchTreeProps,\n  TreeRefValue,\n} from \"@intellij-platform/core/Tree\";\nimport { NestedSelectionState } from \"./NestedSelection\";\n\n/**\n * Experimental wrapper component around SpeedSearchTree, which allows rendering {@link TreeNodeCheckbox} in nodes.\n *\n * See [design-decisions.md](../Tree/design-decisions.md) for more thoughts about how should different features\n * like this be supported.\n *\n * @alpha\n */\nexport const SpeedSearchTreeWithCheckboxes = React.forwardRef(\n  <T extends object>(\n    {\n      nestedSelection,\n      cacheInvalidation,\n      onNodeKeyDown,\n      ...props\n    }: SpeedSearchTreeProps<T> & {\n      nestedSelection: NestedSelectionState<T>;\n    },\n    ref: ForwardedRef<HTMLDivElement>\n  ): React.ReactElement => {\n    const otherInvalidators =\n      typeof cacheInvalidation === \"object\"\n        ? cacheInvalidation.invalidators\n        : [];\n    return (\n      <SpeedSearchTree\n        ref={ref}\n        {...props}\n        // instead of passing cacheInvalidation, a better approach could be to provide nestedSelection as context.\n        cacheInvalidation={{\n          invalidators: [nestedSelection, ...otherInvalidators],\n        }}\n        onNodeKeyDown={(event, item) => {\n          if (event.key === \" \" && item.value) {\n            nestedSelection.toggle(item.value);\n          }\n          onNodeKeyDown?.(event, item);\n        }}\n      />\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { Checkbox } from \"@intellij-platform/core/Checkbox\";\nimport { TreeContext } from \"@intellij-platform/core/Tree/TreeContext\";\nimport { SelectionState } from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport styled from \"styled-components\";\n\nexport type TreeNodeCheckboxProps<T extends unknown> = {\n  selectionState?: SelectionState;\n  selectItemOnPress?: boolean;\n  onToggle: () => void;\n  // maybe a isDisabled prop to be merged with isDisabled from the item?\n};\n\nconst StyledCheckboxWrapper = styled.span`\n  margin-right: 0.125rem;\n  display: inline-flex;\n`;\n\n/**\n * Checkbox to be used with {@link SpeedSearchTreeWithCheckboxes}. `SpeedSearchTreeWithCheckboxes` doesn't add the\n * checkboxes by default to the nodes, which makes it more flexible in terms of which nodes should have checkbox, or\n * it's exact placement within the tree rows.\n *\n * TreeNodeCheckbox renders a Checkbox with a few extras:\n * - `aria-label` set based on the encompassing item's textValue\n * - `isSelected` and `isIndeterminate` set based on `selectionState`\n * - `isDisabled` is set based in disabled state of the item.\n * - The encompassing item will be selected upon press, if `selectItemOnPress` is `true` (default is `true`).\n * - Small styling adjustment achieved by a wrapper StyledListIconWrapper.\n *\n * @see SpeedSearchTreeWithCheckboxes\n * @see useNestedSelectionState\n *\n * NOTE: this component currently uses TreeContext, to get a hold of selectionManager. If a more abstract component\n * like CollectionCheckbox is needed in the future, we can refactor TreeContext also to something more abstract like\n * CollectionContext which is provided by all such components like List, Tree or Table.\n */\nexport const TreeNodeCheckbox = <T extends unknown>({\n  selectionState,\n  onToggle,\n  selectItemOnPress = true,\n}: TreeNodeCheckboxProps<T>) => {\n  const treeContext = useContext(TreeContext);\n  const itemContext = useContext(ItemStateContext);\n  if (!itemContext) {\n    throw new Error(\"TreeNodeCheckbox is rendered outside tree nodes.\");\n  }\n\n  return (\n    <StyledCheckboxWrapper>\n      <Checkbox\n        preventFocus\n        aria-label={`Select ${itemContext.node.textValue}`}\n        isSelected={selectionState === \"Selected\"}\n        isIndeterminate={selectionState === \"PartiallySelected\"}\n        isDisabled={itemContext.isDisabled}\n        onChange={() => {\n          onToggle();\n          // this if and the whole need for treeContext could be avoided if event.stopPropagation() was not hard coded\n          // in useToggle: https://github.com/adobe/react-spectrum/blob/0d007bca9417c4b7b86fafd5842871bf997bd4c0/packages/@react-aria/toggle/src/useToggle.ts#L46\n          // An improvement could be to replace Checkbox with CheckboxIcon, and simply handle press on it (potential TODO)\n          if (treeContext && itemContext && selectItemOnPress) {\n            treeContext.state.selectionManager.setFocusedKey(\n              itemContext.node.key\n            );\n            treeContext.state.selectionManager.setFocused(true);\n            treeContext.state.selectionManager.setSelectedKeys([\n              itemContext.node.key,\n            ]);\n          }\n        }}\n      />\n    </StyledCheckboxWrapper>\n  );\n};\n","import { Key, useMemo } from \"react\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { useControllableSet } from \"@intellij-platform/core/utils/useSet\";\nimport {\n  NestedSelection,\n  NestedSelectionState,\n  TreeModel,\n} from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\n\n/**\n * A state management util for a selectable list of items with an arbitrary nested grouping. In other words,\n * it manages selection of leaves in a tree.\n *\n * tree is represented as a `getChildren` function that returns children for a given root. if null is passed it\n * returns the top level nodes.\n * Important Note: the tree structure that can be generated by calling `getChildren` function is supposed to be\n * **immutable**. in other words, any change in the tree, should result in a new array of top level items.\n */\n\nexport const useNestedSelectionState = <T extends object, K = Key>(\n  tree: TreeModel<T, K>,\n  {\n    selectedKeys: selectedKeysProp,\n    defaultSelectedKeys,\n    onSelectedKeysChange,\n  }: ControlledStateProps<{\n    selectedKeys: Set<K>;\n  }>\n): NestedSelectionState<T> => {\n  const [selectedKeys, selectedKeysSetter] = useControllableSet(\n    selectedKeysProp!, // bad typing in useControlledState\n    defaultSelectedKeys || new Set(),\n    onSelectedKeysChange! // bad typing in useControlledState\n  );\n  const treeRef = useLatest(tree);\n\n  return useMemo(\n    () =>\n      new NestedSelection<T, K>(\n        { items: selectedKeys, ...selectedKeysSetter },\n        treeRef.current\n      ),\n    [selectedKeys, tree.rootNodes]\n  );\n};\n","import {\n  LayoutNode,\n  ListLayout,\n  ListLayoutOptions,\n} from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport {\n  InvalidationContext,\n  LayoutInfo,\n  Rect,\n  Size,\n} from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n  private dividerHeight: number = 2;\n\n  constructor(options: ListLayoutOptions<T> & { dividerHeight?: number }) {\n    super(options);\n    if (options.dividerHeight != undefined) {\n      this.dividerHeight = options.dividerHeight;\n    }\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    if (node.type === \"divider\") {\n      return this.buildDivider(node, x, y);\n    }\n    return super.buildNode(node, x, y);\n  }\n\n  buildDivider(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.dividerHeight;\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = false;\n    return {\n      layoutInfo,\n      // validRect: layoutInfo.rect,\n    };\n  }\n\n  /**\n   * Allows for overriding buildCollection in a sub-class\n   */\n  protected doBuildCollection() {\n    return super.buildCollection();\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = this.doBuildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n\n      ///////////////////////////////////////////////////// MODIFICATION ///////////////////////////////////////////////\n      // Fixing https://github.com/adobe/react-spectrum/issues/4391\n      if (\n        options.selectOnFocus &&\n        (autoFocus === \"first\" || autoFocus === \"last\")\n      ) {\n        manager.replaceSelection(focusedKey);\n      }\n      /////////////////////////////////////////////////// END OF MODIFICATION //////////////////////////////////////////\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import { useSelectableItem as useOriginalSelectableItem } from \"@react-aria/selection\";\nimport { MouseEventHandler } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\n/**\n * A wrapper around useSelectableItem, which adjusts for intellij platform nuances:\n * - Selects item with right clicks as well, which allows ContextMenuContainer to be used with any collection component\n *   without the need for built-in context-menu support in such components. We won't need this if we move to a built-in\n *   context-menu support for List,Tree, etc.\n * @private\n */\nexport const useSelectableItem: typeof useOriginalSelectableItem = (\n  options\n) => {\n  const onContextMenu: MouseEventHandler<HTMLElement> = (e) => {\n    if (!options.selectionManager.isSelected(options.key)) {\n      options.selectionManager.select(options.key);\n    }\n  };\n  const result = useOriginalSelectableItem(options);\n  return {\n    ...result,\n    itemProps: mergeProps(result.itemProps, { onContextMenu }),\n  };\n};\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, { ForwardedRef, useImperativeHandle, useRef } from \"react\";\n\nexport type FocusScopeRef = { focus: (forceFocusFirst?: boolean) => void };\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, ...otherProps }: FocusScopeProps,\n  ref: ForwardedRef<FocusScopeRef>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (forceFocusFirst?: boolean) => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        if (forceFocusFirst) {\n          return focusManager.focusFirst();\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager()!;\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n","/**\n * Properly typed filter function for filtering out null/undefined items in array.\n */\nexport const notNull = <T>(\n  item: T | undefined | null\n): item is NonNullable<T> => item != null;\n","/**\n * IMPORTANT: this is a copy of a non-exported file from @react-aria/interactions\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { runAfterTransition } from \"@react-aria/utils\";\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\ntype State = \"default\" | \"disabled\" | \"restoring\";\n\nlet state: State = \"default\";\nlet savedUserSelect = \"\";\n\nexport function disableTextSelection() {\n  if (state === \"default\") {\n    savedUserSelect = document.documentElement.style.webkitUserSelect;\n    document.documentElement.style.webkitUserSelect = \"none\";\n  }\n\n  state = \"disabled\";\n}\n\nexport function restoreTextSelection() {\n  // If the state is already default, there's nothing to do.\n  // If it is restoring, then there's no need to queue a second restore.\n  if (state !== \"disabled\") {\n    return;\n  }\n\n  state = \"restoring\";\n\n  // There appears to be a delay on iOS where selection still might occur\n  // after pointer up, so wait a bit before removing user-select.\n  setTimeout(() => {\n    // Wait for any CSS transitions to complete so we don't recompute style\n    // for the whole page in the middle of the animation and cause jank.\n    runAfterTransition(() => {\n      // Avoid race conditions\n      if (state === \"restoring\") {\n        if (document.documentElement.style.webkitUserSelect === \"none\") {\n          document.documentElement.style.webkitUserSelect =\n            savedUserSelect || \"\";\n        }\n\n        savedUserSelect = \"\";\n        state = \"default\";\n      }\n    });\n  }, 300);\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { disableTextSelection, restoreTextSelection } from \"./textSelection\";\nimport { useLatest } from \"../useLatest\";\n\n/**\n * To be used with {@link UseMoveOptions#canMoveStart} to allow\n * the move to start only on whitespaces. Does that by checking if the\n * element is an HTMLElement with all children being Elements.\n * This logic almost always detects the whitespaces properly, because if mouse\n * was pressed on a piece of text, the event target would have been that element.\n */\nexport function isEventOnEmptySpaces({\n  target,\n  currentTarget,\n}: React.MouseEvent) {\n  return (\n    currentTarget === target ||\n    (target instanceof HTMLElement &&\n      [...target.childNodes].every((child) => child instanceof HTMLElement))\n  );\n}\n\nexport type XY = { x: number; y: number };\nexport type UseMoveOptions<S> = {\n  /**\n   * the amount of movement (in pixels) after which the move should start. It prevents interference\n   * with simple click (or more generally, press) events, and provides better UX.\n   * @default 0\n   */\n  dragThreshold?: number;\n  disabled?: boolean;\n  /**\n   * Whether the move should be initiated from a mouse down event.\n   * Note: regardless of the value of this option, the move won't start when interactive elements like buttons\n   * are being pressed.\n   * @see isEventOnEmptySpaces\n   * @example\n   * ```ts\n   * // Don't move when children are being dragged.\n   * useMove({ canMoveStart: e => e.target === e.currentTarget });\n   * ```\n   *\n   * @example\n   * ```ts\n   * // move when empty spaces are being dragged.\n   * useMove({ canMoveStart: isEventOnEmptySpaces });\n   * ```\n   */\n  canMoveStart?: (eventTarget: React.MouseEvent) => boolean;\n  onMoveStart: (args: { from: XY }) => S;\n  onMove: (args: { from: XY; to: XY; movement: XY; startState: S }) => void;\n  onMoveEnd?: (args: { startState: S }) => void;\n};\n\n// TODO: cleanup if unmount happens during drag.\n// TODO: Better even handling for touch devices?\n//  wrapping `useMove` from react-aria to just add support for movement threshold should be the\n//  way to go, but there are a few problems:\n//    - it seemed a little buggy in the example here: https://react-spectrum.adobe.com/react-aria/useMove.html\n//    - the API is not great in a sense that it only gives the diff in last movement.\n//      Also onMoveStart doesn't give the initial position, so it's not possible to even calculate\n//\n// TODO: move should be finished by pressing Escape. onMoveCancel maybe?\n/**\n * Similar to https://react-spectrum.adobe.com/react-aria/useMove.html, with slightly different\n * features and API.\n * NOTE: initially the API was designed in a way that onMove and onMove end callbacks were\n * returned from onMoveStart, instead of being directly passed in the options.\n * This would enable capturing the initial state of each move transaction, by defining whatever\n * variable in onMoveStart and closing over them by onMove and onMoveEnd.\n * The problem with this approach was that although you could capture the initial state of the\n * movement, by closure, any other variable in the outer scopes was also closed over, and you were\n * stuck with the values from the particular render in which the movement was started.\n * Of course, you could work around it by using refs, but it would be unintuitive.\n * So because of that issue, it's redesigned to have onMoveStart, onMove, and onMoveEnd all\n * directly passed as options, but you can return anything from `onMoveStart` which will be passed\n * to onMove and onMoveEnd as `startState`.\n */\nexport function useMove<S>({\n  dragThreshold = 0,\n  disabled,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  canMoveStart = () => true,\n}: UseMoveOptions<S>): { onMouseDown?: MouseEventHandler } {\n  const handlersRef = useLatest({ onMove, onMoveEnd });\n\n  const onMouseDown = (event: React.MouseEvent) => {\n    if (event.button !== 0 || !canMoveStart(event)) {\n      return;\n    }\n    disableTextSelection();\n    const from = { x: event.pageX, y: event.pageY };\n    let dragStarted = false;\n    let startState: S;\n\n    const onMouseMove = (event: MouseEvent) => {\n      const { pageX: x, pageY: y } = event;\n      const movement = { x: x - from.x, y: y - from.y };\n      const isDraggedEnough =\n        Math.abs(movement.x) >= dragThreshold ||\n        Math.abs(movement.y) >= dragThreshold;\n      if (isDraggedEnough && !dragStarted) {\n        dragStarted = true;\n        startState = onMoveStart({ from });\n      }\n      if (dragStarted) {\n        handlersRef.current.onMove({\n          from,\n          to: { x: from.x + movement.x, y: from.y + movement.y },\n          movement,\n          startState,\n        });\n      }\n    };\n    document.addEventListener(\"mousemove\", onMouseMove);\n\n    document.addEventListener(\n      \"mouseup\",\n      () => {\n        restoreTextSelection();\n        if (dragStarted) {\n          handlersRef.current.onMoveEnd?.({ startState });\n        }\n        document.removeEventListener(\"mousemove\", onMouseMove);\n      },\n      { once: true }\n    );\n  };\n  return disabled ? {} : { onMouseDown };\n}\n","import React from \"react\";\nimport { isMac } from \"@react-aria/utils\";\n\n/**\n * TODO: The current name is not accurate, and can be confusing. Rename to something better.\n */\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n\nexport function hasAnyModifier(e: KeyboardEvent | React.KeyboardEvent) {\n  return e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n}\n","import { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport interface OverflowObserverRecord {\n  target: Element;\n  overflowedElements: Element[];\n  previouslyOverflowedElements: Element[];\n}\n\nexport type OverflowObserverCallback = (\n  change: OverflowObserverRecord,\n  observer: OverflowObserver\n) => void;\n\n/**\n * Allows observing the list of overflowing children of a given target element.\n * An `IntersectionObserver` is created for each target to observe the intersection between the target and each child\n * element. The child elements are observed/unobserved by the intersection observer as they are added/removed to the\n * DOM, which is observed using a `MutationObserver`.\n * `IntersectionObserver` options such as `rootMargin` are supported, to fine tune what should be considered as\n * overflowed.\n *\n * TODO: add a takeRecords method to allow processing pending mutations before disconnect\n * TODO: maybe add direction option?\n *\n */\nexport class OverflowObserver {\n  private mutationObserver: MutationObserver;\n  private data: Map<\n    Element,\n    {\n      intersectionObserver: IntersectionObserver;\n      currentOverflowElements: Element[];\n    }\n  > = new Map();\n\n  constructor(private callback: OverflowObserverCallback) {\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n        if (!(target instanceof Element)) {\n          return;\n        }\n        mutation.removedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.unobserve(node);\n          }\n        });\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.observe(node);\n          }\n        });\n      });\n    });\n  }\n\n  observe(target: Element, options: Omit<IntersectionObserverInit, \"root\">) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n\n    const intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        const data = this.data.get(target);\n        const newHiddenElements = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : undefined\n          )\n          .filter(notNull);\n        const newVisibleElements = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : null\n          )\n          .filter(notNull);\n\n        //  Also cover this in Toolbar with a test case\n        const previouslyOverflowedElements =\n          data?.currentOverflowElements || [];\n        const overflowedElements = previouslyOverflowedElements\n          .filter((element) => !newVisibleElements.includes(element))\n          .concat(newHiddenElements)\n          .filter((element) => {\n            // In some cases some elements may be hidden by some styles (e.g. the first/last separator in a toolbar).\n            // It doesn't make sense to report them as overflowed.\n            const isHidden =\n              element instanceof HTMLElement &&\n              element.offsetWidth === 0 &&\n              element.offsetHeight === 0;\n            return !isHidden;\n          });\n        this.callback(\n          {\n            previouslyOverflowedElements,\n            overflowedElements: overflowedElements,\n            target,\n          },\n          this\n        );\n        if (data) {\n          data.currentOverflowElements = overflowedElements;\n        }\n      },\n      {\n        ...options,\n        root: target,\n      }\n    );\n    [...(target?.children || [])].forEach((childElement) => {\n      intersectionObserver.observe(childElement);\n    });\n    this.data.set(target, {\n      intersectionObserver,\n      currentOverflowElements: [],\n    });\n    this.mutationObserver.observe(target, {\n      childList: true,\n    });\n  }\n\n  unobserve(target: Element) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n  }\n\n  disconnect() {\n    [...this.data.values()].forEach(({ intersectionObserver }) =>\n      intersectionObserver.disconnect()\n    );\n    this.data = new Map();\n    this.mutationObserver.disconnect();\n  }\n}\n","import { RefObject, useEffect, useState } from \"react\";\nimport { OverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/OverflowObserver\";\n\n/**\n * Given a ref to a scrollable container, returns the child elements that are not completely visible and\n * are off view because of scroll.\n * @param scrollableContainerRef\n * @param threshold\n */\nexport function useOverflowObserver(\n  scrollableContainerRef: RefObject<HTMLElement>,\n  {\n    threshold = 0.9,\n    rootMargin = \"0px\",\n  }: Omit<IntersectionObserverInit, \"root\"> = {}\n) {\n  const [overflowedElements, setOverflowedElements] = useState<Element[]>([]);\n\n  useEffect(() => {\n    const overflowObserver = new OverflowObserver((change) => {\n      setOverflowedElements(change.overflowedElements);\n    });\n    overflowObserver.observe(scrollableContainerRef.current!, {\n      rootMargin,\n      threshold,\n    });\n    return () => {\n      overflowObserver.disconnect();\n    };\n  }, [\n    /**\n     * It's ok and needed to have the ref value as a dependency here. We don't know if ref is attached to different\n     * elements in each render, and it's ok that it's not a state, since we don't change it, and it's not supposed to\n     * change without a rerender\n     **/\n    scrollableContainerRef.current,\n  ]);\n\n  return {\n    overflowedElements,\n  };\n}\n","import { Key } from \"react\";\nimport { Ord } from \"ramda\";\n\ntype TreeNodeFn<T> = (root: T) => null | readonly T[];\ntype MutableTreeNodeFn<T> = (root: T) => null | T[];\n\ntype Tree<T> = {\n  getChildren: TreeNodeFn<T>;\n  roots: ReadonlyArray<T>;\n};\n\ntype MutableTree<T> = {\n  getChildren: MutableTreeNodeFn<T>;\n  roots: Array<T>;\n};\n\nexport const getExpandAllKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: ReadonlyArray<T>\n) => {\n  const keys: Key[] = roots.map(getKey);\n  const processItem = (node: T | null) => {\n    const children = node ? getChildren(node) : null;\n    if (node == null || !children) {\n      return;\n    }\n    keys.push(getKey(node));\n    children.forEach(processItem);\n  };\n  roots.map(getChildren).flat().forEach(processItem);\n  return keys;\n};\n\nexport const getExpandedToNodesKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: ReadonlyArray<T>,\n  targetNodeKeys: Iterable<Key>\n) => {\n  const targetNodeKeySet = new Set(targetNodeKeys);\n  const expandedKeys: Key[] = [];\n  dfsVisit<T, boolean>(\n    getChildren,\n    (node, childValues) => {\n      const key = getKey(node);\n      const isExpanded: boolean =\n        childValues?.some((childValue) => childValue) ||\n        targetNodeKeySet.has(key);\n      if (isExpanded) {\n        expandedKeys.push(key);\n      }\n      return isExpanded;\n    },\n    roots\n  );\n  return expandedKeys;\n};\n\nexport const dfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, childrenValues: null | R[]) => R,\n  roots: ReadonlyArray<T>\n) => {\n  const dfs = (node: T): R => {\n    const children = getChildren(node);\n    const values = children?.map(dfs) ?? null;\n    return visit(node, values);\n  };\n  roots.forEach(dfs);\n};\n\nexport const bfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, parentValue: R | null) => R,\n  roots: ReadonlyArray<T>\n) => {\n  const bfs: typeof visit = (node, parentValue) => {\n    const result = visit(node, parentValue);\n    const children = getChildren(node);\n    children?.map((childNode) => bfs(childNode, result));\n    return result;\n  };\n  return roots.map((root) => bfs(root, null));\n};\n\nexport const sortTreeNodesInPlace = <T>(\n  by: (t: T) => Ord,\n  tree: MutableTree<T>\n) => {\n  const compareFn = (a: T, b: T) => {\n    const aa = by(a);\n    const bb = by(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  };\n  tree.roots.sort(compareFn);\n  bfsVisit(\n    tree.getChildren,\n    (node) => {\n      const children = tree.getChildren(node);\n      if (children) {\n        children.sort(compareFn);\n      }\n    },\n    tree.roots\n  );\n};\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import { useCallback, useLayoutEffect, useRef } from \"react\";\n\n/**\n * Interim solution for non-reactive callbacks, until\n * [useEvent](https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md) (or whatever it will end up being\n * called), becomes available.\n */\nexport function useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  let ref = useRef<typeof fn>();\n  useLayoutEffect(() => {\n    ref.current = fn;\n  });\n  const callback = ((...args: Parameters<T>) =>\n    ref.current?.apply(null, args)) as T;\n  return useCallback<T>(callback, []);\n}\n","import { FocusEventHandler } from \"react\";\nimport { getFocusableTreeWalker } from \"@react-aria/focus\";\n\n/**\n * Provides a focus management mechanism for a container that doesn't retain focus but forwards it to its focusable\n * descendants. More specifically:\n * - When the container gets focused, it automatically focuses the first focusable child element.\n *   The {@param forwardFocus} parameter can be used to customize which element should receive focus.\n * - By default, focus is prevented from returning to the container itself when focus is being moved from a descendant\n *   to the container. {@param ignoreFocusedDescendant} can be set to `true`, to disable this behaviour.\n *   If {@param ignoreFocusedDescendant} is true, focus will be forcibly moved to the first element (or the element\n *   specified by {@param forwardFocus}) when the container gets focused.\n *\n * NOTE: This hook does not make the container element focusable. It only returns the focus event handler that should be\n * passed to the container.\n */\nexport function useFocusForwarder({\n  forwardFocus,\n  ignoreFocusedDescendant = false,\n}: {\n  /**\n   * Called when the container gets focused, to forward focus to the appropriate focusable child element.\n   * If not passed, focus is forwarded to the first focusable element, by default.\n   */\n  forwardFocus?: () => void;\n  ignoreFocusedDescendant?: boolean;\n} = {}) {\n  const onFocus: FocusEventHandler = (event) => {\n    if (event.target !== event.currentTarget) {\n      // only when this container is focused. not when anything inside is focused.\n      return;\n    }\n    const possiblyBlurredElement = event.relatedTarget;\n    if (\n      possiblyBlurredElement instanceof Element &&\n      event.currentTarget?.contains(possiblyBlurredElement) &&\n      !ignoreFocusedDescendant\n    ) {\n      // If anything inside the content is being blurred while the container is getting focused, we don't let focus\n      // go from that element, to the container.\n      if (possiblyBlurredElement instanceof HTMLElement) {\n        possiblyBlurredElement.focus();\n      }\n      return;\n    }\n    if (forwardFocus) {\n      forwardFocus();\n    } else {\n      (\n        getFocusableTreeWalker(event.currentTarget).firstChild() as HTMLElement\n      )?.focus();\n    }\n  };\n  return { focusForwarderProps: { onFocus } };\n}\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useLayoutEffect, useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos: { clientX: number; clientY: number } | undefined;\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = ({ clientX, clientY }) => {\n        lastMouseClientPos = { clientX, clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  const updatePosition = (e?: React.MouseEvent) => {\n    const coordinatesSource = e || lastMouseClientPos;\n    if (targetRef.current && coordinatesSource) {\n      const { clientX, clientY } = coordinatesSource;\n      targetRef.current.style.left = `${\n        // not sure why crossOffset passed to useOverlayPosition doesn't work, so compensating for it here.\n        clientX + (options.crossOffset ?? 0)\n      }px`;\n      targetRef.current.style.top = `${clientY}px`;\n    }\n    _updatePosition();\n  };\n  useLayoutEffect(() => {\n    if (options.isOpen) {\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition: _updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition,\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export class ImmutableSet<T> implements ReadonlySet<T> {\n  readonly size: number;\n  private readonly set: ReadonlySet<T>;\n\n  constructor(values: Iterable<T>) {\n    this.set = new Set(values);\n    this.size = this.set.size;\n  }\n\n  add(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.add(item);\n      });\n    });\n  }\n\n  delete(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.delete(item);\n      });\n    });\n  }\n\n  toggle(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        if (!newValue.delete(item)) {\n          newValue.add(item);\n        }\n      });\n    });\n  }\n\n  clear(): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      newValue.clear();\n    });\n  }\n\n  private setValueWithMutation(\n    mutate: (newValue: Set<T>) => void\n  ): ImmutableSet<T> {\n    const newValue = new Set(this.set);\n    mutate(newValue);\n    return new ImmutableSet(newValue);\n  }\n\n  ////////////////////////////////////////////////// delegated methods /////////////////////////////////////////////////\n  forEach(...args: Parameters<ReadonlySet<T>[\"forEach\"]>): void {\n    return this.set.forEach(...args);\n  }\n\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { useControlledState } from \"@react-stately/utils\";\nimport { useMemo } from \"react\";\nimport { ImmutableSet } from \"./immutableSet\";\n\n/**\n * Creates map interface out of a setter of form (currentValue: Map) => Map\n * Use {@link useControllableSet} instead if you need a Set state in a React component.\n * This is useful for use outside React components, such as state management libraries.\n */\nexport const createSetInterface = <T>(\n  set: (value: (prevState: Set<T>) => Set<T>) => void\n) => ({\n  add: (...values: T[]) =>\n    set(\n      (currentValue) => new Set(new ImmutableSet(currentValue).add(...values))\n    ),\n  delete: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).delete(...values))\n    ),\n  clear: () =>\n    set((currentValue) => new Set(new ImmutableSet(currentValue).clear())),\n  toggle: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).toggle(...values))\n    ),\n});\n\nfunction useStateSetterForSet<T>(\n  setValue: (value: (prevState: Set<T>) => Set<T>, ...args: any[]) => void\n) {\n  return useMemo(() => createSetInterface(setValue), [setValue]);\n}\n\n/**\n * controllable state management for a Set. returns a tuple containing the value and an object with Set functions on it,\n * which would update the state.\n */\nexport const useControllableSet = <T>(\n  valueProp: Set<T> | undefined,\n  defaultValue: Set<T> = new Set(),\n  onChange: ((newValue: Set<T>) => void) | undefined\n) => {\n  const [value, setValue] = useControlledState(\n    valueProp!, // bad typing in useControlledState\n    defaultValue,\n    onChange! // bad typing in useControlledState\n  );\n\n  // @ts-expect-error FIXME https://github.com/adobe/react-spectrum/issues/2320\n  return [value, useStateSetterForSet(setValue)] as const;\n};\n","import React, { useMemo } from \"react\";\nimport useDocusaurusContext from \"@docusaurus/useDocusaurusContext\";\nimport { GlobalPluginData } from \"@docusaurus/plugin-content-docs/lib/client\";\nimport { parse } from \"jsdoc-parse-plus\";\nimport Link from \"@docusaurus/Link\";\n\nfunction useDocs() {\n  return (\n    useDocusaurusContext().globalData[\"docusaurus-plugin-content-docs\"]\n      .default as GlobalPluginData\n  ).versions.find((version) => version.name === \"current\")?.docs;\n}\n\n/**\n * Returns a mapping from component names to documentation pages. We don't have a proper API\n * Docs section now, so not all components have a corresponding page. But it's a middle ground solution\n * until a more structured API documentation page is added, and mdx files are limited to guides, introductions, etc.\n */\nexport function useComponentLinkMap(): { [componentName: string]: string } {\n  const docs = useDocs();\n  return useMemo(() => {\n    const linkMap: Record<string, string> = {};\n    docs?.forEach((doc) => {\n      // maybe change the criteria based on sidebar later, if components are moved to a dedicated sidebar\n      const componentName = doc.id.match(/components\\/(.*)/)?.[1];\n      if (componentName) {\n        linkMap[componentName] = doc.path;\n      }\n    });\n    return linkMap;\n  }, [docs]);\n}\n\n/**\n * A replacement for `code` elements in documentation, which renders a link\n * to the corresponding page, if the code snippet exactly matches one of\n * the components.\n */\nexport function InlineCode({ children }: { children: string }) {\n  const link = useComponentLinkMap()[children];\n  if (link) {\n    return <Link to={link}>{children}</Link>;\n  }\n  return <code>{children}</code>;\n}\n\n/**\n * Converts links in the form of \"{\\@link SomeComponent}\" to Markdown link\n * format (\"[SomeComponent](./path/to/component/page)\"), which otherwise will\n * not be rendered as a link, due to missing url.\n */\nexport function useAutoLinkedJsDoc(content: string) {\n  const componentLinkMap = useComponentLinkMap();\n  const comment = toCommentBlock(content);\n  return (\n    parse(comment, [], (link) => {\n      const path = componentLinkMap[link.url];\n      if (path) {\n        return `[${link.text}](${path})`;\n      }\n      return `\\`${link.text}\\``;\n    }).description as any\n  )?.value;\n}\n\nconst toCommentBlock = (str: string) =>\n  [\"/**\", ...str.split(\"\\n\").map((line) => `* ${line}`), \"*/\"].join(\"\\n\");\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSvg = styled.svg`\n  position: absolute;\n  width: 24px;\n  left: 50%;\n  bottom: 1rem;\n  transform: translate(-50%, 0) rotate(180deg);\n`;\n\nconst StyledExpandButton = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  bottom: 0;\n  background: linear-gradient(0deg, rgba(255, 255, 255, 1), transparent);\n  cursor: pointer;\n  ${StyledSvg} {\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n  &:hover ${StyledSvg} {\n    opacity: 1;\n  }\n`;\nconst StyledContainer = styled.div<{ expanded: boolean }>`\n  position: relative;\n  max-height: ${({ expanded }) => (expanded ? undefined : \"200px\")};\n`;\n\nexport function Expandable({\n  children,\n  expanded,\n  onExpand,\n  isExpandable,\n  setIsExpandable,\n}: {\n  children: React.ReactNode;\n  expanded: boolean;\n  onExpand: () => void;\n  isExpandable: boolean;\n  setIsExpandable: (isExpandable: boolean) => void;\n}) {\n  const ref = useRef<HTMLDivElement>(null);\n  useEffect(() => {\n    if (ref.current) {\n      const expandable = ref.current?.scrollHeight > ref.current?.offsetHeight;\n      if (expandable !== isExpandable) {\n        setIsExpandable(expandable);\n      }\n    }\n  });\n  return (\n    <StyledContainer ref={ref} expanded={expanded}>\n      {children}\n      {!expanded && isExpandable && (\n        <StyledExpandButton onClick={onExpand}>\n          <StyledSvg viewBox=\"0 0 50 50\">\n            <path\n              fill=\"none\"\n              stroke=\"#000\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M-20 10 0-10l20 20\"\n              transform=\"translate(25 25)\"\n            />\n          </StyledSvg>\n        </StyledExpandButton>\n      )}\n    </StyledContainer>\n  );\n}\n","/**\n * NOTE: this file is copied from Docusaurus repo, to customize the live code blocks UI, since the exported\n * functionality doesn't allow for the needed customizations.\n * Original file: https://github.com/facebook/docusaurus/blob/main/packages/docusaurus-theme-live-codeblock/src/theme/Playground/index.tsx\n */\n\nimport React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport useIsBrowser from \"@docusaurus/useIsBrowser\";\nimport { LiveEditor, LiveError, LivePreview, LiveProvider } from \"react-live\";\nimport Translate from \"@docusaurus/Translate\";\nimport BrowserOnly from \"@docusaurus/BrowserOnly\";\nimport {\n  ErrorBoundaryTryAgainButton,\n  usePrismTheme,\n} from \"@docusaurus/theme-common\";\nimport ErrorBoundary from \"@docusaurus/ErrorBoundary\";\n\nimport type { Props } from \"@theme/Playground\";\nimport type { Props as ErrorProps } from \"@theme/Error\";\n\nimport styles from \"@docusaurus/theme-live-codeblock/lib/theme/Playground/styles.module.css\";\nimport { Expandable } from \"./Expandable\";\nimport {\n  PlatformIcon,\n  IconButton,\n  ThemeProvider,\n  Theme,\n  ActionTooltip,\n  TooltipTrigger,\n} from \"@intellij-platform/core\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\n\nfunction Header({\n  children,\n  icons,\n}: {\n  children: React.ReactNode;\n  icons?: React.ReactNode;\n}) {\n  return (\n    <div className={clsx(styles.playgroundHeader)} style={{ display: \"flex\" }}>\n      <span style={{ flex: 1 }}>{children}</span>\n      {icons}\n    </div>\n  );\n}\n\nfunction LivePreviewLoader() {\n  // Is it worth improving/translating?\n  return <div>Loading...</div>;\n}\n\nfunction ErrorFallback({ error, tryAgain }: ErrorProps): JSX.Element {\n  return (\n    <div className={styles.errorFallback}>\n      <p>{error.message}</p>\n      <ErrorBoundaryTryAgainButton onClick={tryAgain} />\n    </div>\n  );\n}\n\nfunction Preview() {\n  // No SSR for the live preview\n  // See https://github.com/facebook/docusaurus/issues/5747\n  return (\n    <BrowserOnly fallback={<LivePreviewLoader />}>\n      {() => (\n        <>\n          <ErrorBoundary fallback={(params) => <ErrorFallback {...params} />}>\n            <LivePreview />\n          </ErrorBoundary>\n          <LiveError />\n        </>\n      )}\n    </BrowserOnly>\n  );\n}\n\nfunction ResultWithHeader() {\n  return (\n    <>\n      <Header>\n        <Translate\n          id=\"theme.Playground.result\"\n          description=\"The result label of the live codeblocks\"\n        >\n          Result\n        </Translate>\n      </Header>\n      {/* https://github.com/facebook/docusaurus/issues/5747 */}\n      <div className={styles.playgroundPreview}>\n        <Preview />\n      </div>\n    </>\n  );\n}\n\nfunction ThemedLiveEditor({\n  expanded,\n  isExpandable,\n  onExpand,\n  setIsExpandable,\n}: {\n  expanded: boolean;\n  isExpandable: boolean;\n  onExpand: () => void;\n  setIsExpandable: (expandable: boolean) => void;\n}) {\n  const isBrowser = useIsBrowser();\n  return (\n    <Expandable\n      expanded={expanded}\n      isExpandable={isExpandable}\n      onExpand={onExpand}\n      setIsExpandable={setIsExpandable}\n    >\n      <LiveEditor\n        // We force remount the editor on hydration,\n        // otherwise dark prism theme is not applied\n        key={String(isBrowser)}\n        className={styles.playgroundEditor}\n      />\n    </Expandable>\n  );\n}\n\nfunction EditorWithHeader() {\n  const [expanded, setExpanded] = useState(false);\n  const [expandable, setExpandable] = useState(false);\n  return (\n    <>\n      <Header\n        icons={\n          <ThemeProvider theme={new Theme(lightThemeJson as any)}>\n            {(expanded || expandable) && (\n              <TooltipTrigger\n                tooltip={\n                  <ActionTooltip\n                    actionName={expanded ? \"Collapse code\" : \"Expand code\"}\n                  />\n                }\n              >\n                <IconButton\n                  onPress={() => setExpanded((expanded) => !expanded)}\n                >\n                  <PlatformIcon\n                    icon={\n                      expanded ? \"actions/collapseall\" : \"actions/expandall\"\n                    }\n                  />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </ThemeProvider>\n        }\n      >\n        <Translate\n          id=\"theme.Playground.liveEditor\"\n          description=\"The live editor label of the live codeblocks\"\n        >\n          Live Editor\n        </Translate>\n      </Header>\n      <ThemedLiveEditor\n        expanded={expanded}\n        onExpand={() => setExpanded(true)}\n        isExpandable={expandable}\n        setIsExpandable={setExpandable}\n      />\n    </>\n  );\n}\n\nexport default function Playground({\n  children,\n  transformCode,\n  ref,\n  ...props\n}: Props): JSX.Element {\n  const prismTheme = usePrismTheme();\n\n  const noInline = props.metastring?.includes(\"noInline\") ?? false;\n\n  return (\n    <>\n      <div ref={ref} className={styles.playgroundContainer}>\n        <LiveProvider\n          code={children.replace(/\\n$/, \"\")}\n          noInline={noInline}\n          transformCode={transformCode ?? ((code) => `${code};`)}\n          theme={prismTheme}\n          {...props}\n        >\n          <ResultWithHeader />\n          <EditorWithHeader />\n        </LiveProvider>\n      </div>\n    </>\n  );\n}\n","import { styled } from \"../styled\";\n\nexport const SpeedSearchContainer = styled.div`\n  position: relative;\n  overflow: visible;\n  max-height: 100%;\n`;\n","import styled from \"styled-components\";\nimport { SpeedSearchContainer } from \"../SpeedSearch/SpeedSearchContainer\";\n\nexport const CollectionSpeedSearchContainer = styled(SpeedSearchContainer)<{\n  fillAvailableSpace?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ fillAvailableSpace }) => (fillAvailableSpace ? 1 : undefined)};\n`;\n","import { ListState } from \"@react-stately/list\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { HTMLProps, Key, RefObject } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  CollectionSpeedSearchContextValue,\n  useCollectionSpeedSearch,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\nimport { SpeedSearchPopupProps } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { TextRange } from \"../../TextRange\";\nimport { ListProps, useList } from \"../useList\";\n\ninterface UseListProps\n  extends Omit<ListProps, \"keyboardDelegate\" | \"disallowTypeAhead\">,\n    Pick<SpeedSearchProps, \"keepSearchActiveOnBlur\"> {}\n\nexport function useSpeedSearchList<T>(\n  props: UseListProps,\n  listState: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ReturnType<typeof useList<T>> & {\n  searchPopupProps: SpeedSearchPopupProps;\n  focused: boolean;\n  selectionManager: SelectionManager;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n  matches: Map<Key, TextRange[]>;\n} {\n  const { keepSearchActiveOnBlur } = props;\n\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n    speedSearchContextValue,\n  } = useCollectionSpeedSearch({\n    collection: listState.collection,\n    selectionManager: listState.selectionManager,\n    keyboardDelegate: new ListKeyboardDelegate(\n      listState.collection,\n      listState.disabledKeys,\n      ref\n    ),\n    keepSearchActiveOnBlur,\n    ref,\n  });\n  const { listProps, ...otherOutputs } = useList(\n    {\n      ...props,\n      disallowTypeAhead: true,\n      keyboardDelegate,\n    },\n    { ...listState, selectionManager },\n    ref\n  );\n\n  return {\n    ...otherOutputs,\n    listProps: mergeProps(listProps, speedSearchContainerProps),\n    matches: speedSearch.matches,\n    selectionManager,\n    speedSearchContextValue,\n    searchPopupProps,\n  };\n}\n","import React, { ForwardedRef } from \"react\";\nimport { AriaListBoxProps } from \"@react-types/listbox\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\nimport {\n  CollectionSpeedSearchContainer,\n  CollectionSpeedSearchContext,\n  SpeedSearchItemHighlightsProvider,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearch,\n  SpeedSearchPopup,\n  SpeedSearchProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nimport { StyledList } from \"../StyledList\";\nimport { ListProps } from \"../List\";\nimport { useListState } from \"../useListState\";\nimport { ListItem } from \"../ListItem\";\nimport { ListContext } from \"../ListContext\";\nimport { useListVirtualizer } from \"../useListVirtualizer\";\nimport { useSpeedSearchList } from \"./useSpeedSearchList\";\n\nexport interface SpeedSearchListProps<T extends object>\n  extends ListProps<T>,\n    SpeedSearchProps {}\n\n/**\n * List component with {@link SpeedSearch}, which is a more advanced version of typeahead.\n */\nexport const SpeedSearchList = React.forwardRef(function SpeedSearchList<\n  T extends object\n>(\n  {\n    allowEmptySelection = false,\n    fillAvailableSpace = false,\n    estimatedItemHeight,\n    ...inputProps\n  }: SpeedSearchListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n\n  const { listProps, listContext, searchPopupProps, speedSearchContextValue } =\n    useSpeedSearchList({ ...props, isVirtualized: true }, state, ref);\n\n  const {\n    virtualizerProps: { children: renderNode, ...virtualizerProps },\n  } = useListVirtualizer({\n    state,\n    estimatedItemHeight,\n    renderItem: (item) => (\n      <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n        <ListItem key={item.key} item={item} />\n      </SpeedSearchItemHighlightsProvider>\n    ),\n  });\n\n  return (\n    <ListContext.Provider value={listContext}>\n      <CollectionSpeedSearchContainer fillAvailableSpace={fillAvailableSpace}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledList\n            as={Virtualizer<Node<any>, any>}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...filterDOMProps(props, { labelable: true })}\n            {...virtualizerProps}\n            {...listProps}\n          >\n            {renderNode}\n          </StyledList>\n        </CollectionSpeedSearchContext.Provider>\n      </CollectionSpeedSearchContainer>\n    </ListContext.Provider>\n  );\n});\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Green circle indicator used with icons.\n * Reference: platform/execution/src/com/intellij/execution/runners/IndicatorIcon.kt\n */\nexport const StyledIconLiveIndicator = styled.span`\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  border-radius: 1000px;\n  background: #00ff00;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0, 0, 0, 0.4);\n  bottom: 1px;\n  right: 1px;\n`;\n","import { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { SpeedSearchContainer } from \"./SpeedSearchContainer\";\nimport { SpeedSearchPopup } from \"./SpeedSearchPopup\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"./useSpeedSearch\";\n\ninterface Props extends SpeedSearchStateProps {\n  children: React.ReactNode;\n  keepSearchActiveOnBlur?: boolean;\n  match?: boolean;\n  className?: string;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\" | \"ref\">;\n}\n\n// Maybe no need for this component, now that almost everything is moved to hooks, and a couple of\n// styled components. Then useSpeedSearchState can also be moved to useSpeedSearch\nexport const SpeedSearch = React.forwardRef(function SpeedSearch(\n  {\n    children,\n    keepSearchActiveOnBlur = false,\n    className,\n    containerProps = {},\n    match,\n    ...otherProps\n  }: Props,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const speedSearchState = useSpeedSearchState(otherProps);\n  const { containerProps: speedSearchContainerProps } = useSpeedSearch(\n    { keepSearchActiveOnBlur: keepSearchActiveOnBlur },\n    speedSearchState,\n    ref\n  );\n\n  return (\n    <SpeedSearchContainer\n      /* We might as well use useFocusable. The return type was troublesome in the first try. */\n      tabIndex={-1}\n      ref={ref}\n      {...mergeProps(containerProps, speedSearchContainerProps, { className })}\n    >\n      <SpeedSearchPopup active={speedSearchState.active} match={match}>\n        {speedSearchState.searchTerm}\n      </SpeedSearchPopup>\n      {children}\n    </SpeedSearchContainer>\n  );\n});\n","import React, { CSSProperties, ForwardedRef, RefObject } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { StyledTree } from \"./StyledTree\";\nimport { TreeRefValue } from \"./useTreeRef\";\nimport { TreeNode } from \"./TreeNode\";\nimport { TreeContext } from \"./TreeContext\";\nimport { useTreeState, TreeProps as StatelyTreeProps } from \"./useTreeState\";\nimport { SelectableTreeProps, useSelectableTree } from \"./useSelectableTree\";\nimport { useTreeVirtualizer } from \"./useTreeVirtualizer\";\nimport { CollectionCacheInvalidationProps } from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\n\nexport interface TreeProps<T extends object>\n  extends Omit<StatelyTreeProps<T>, \"disallowEmptySelection\">,\n    CollectionCacheInvalidationProps,\n    CollectionRefProps,\n    Omit<SelectableTreeProps<T>, \"keyboardDelegate\" | \"isVirtualized\"> {\n  fillAvailableSpace?: boolean;\n  /**\n   * When true, shows the tree in focused style, even when it's not focused. A common use case is when the tree\n   * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n   * keyboard events as if the tree was focused.\n   */\n  showAsFocused?: boolean;\n  treeRef?: RefObject<TreeRefValue>;\n\n  className?: string;\n  style?: CSSProperties;\n}\n\n/**\n * TODO:\n *  - Match select all behaviour. Currently, `getSelectAllKeys` in `SelectionManager` returns\n *   all nested keys too. But it's not aligned with Tree implementation in Intellij Platform. And\n *   beside from that, it seems to be a little inconsistent in some edge cases where you select all,\n *   and then deselect a node. Then all of a sudden, all collapsed nested keys are no longer selected.\n */\nexport const Tree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      treeRef,\n      style,\n      className,\n      ...props\n    }: TreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(props, treeRef);\n    useCollectionRef(props, state);\n    const ref = useObjectRef(forwardedRef);\n\n    const { treeProps, treeContext } = useSelectableTree(\n      {\n        ...props,\n        isVirtualized: true,\n      },\n      state,\n      ref\n    );\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <StyledTree\n          as={Virtualizer<Node<any>, unknown>}\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...virtualizerProps}\n          {...treeProps}\n          {...filterDOMProps(props, { labelable: true })}\n          style={style}\n          className={className}\n        >\n          {(itemType: string, item: Node<any>) => (\n            <TreeNode key={item.key} item={item as Node<T>} />\n          )}\n        </StyledTree>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarPauseIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarPauseButtonProps {\n  /**\n   * Whether progress is paused.\n   */\n  paused: boolean;\n  /**\n   * Called when progress is paused or resumed.\n   * @param paused `true` when progress is being paused. `false` when resumed.\n   */\n  onPausedChange: (paused: boolean) => void | Promise<unknown>;\n\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n}\n\n/**\n * Pause/Resume icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarPauseButton = ({\n  paused,\n  onPausedChange,\n  small,\n}: ProgressBarPauseButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarPauseIconButton(\n    {\n      onPress: () => onPausedChange(!paused),\n      hoverTooltip: paused ? \"Resume\" : \"Pause\",\n      paused,\n    },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      {...buttonProps}\n      icon={\n        paused\n          ? `process/progressResume${small ? \"Small\" : \"\"}.svg`\n          : `process/progressPause${small ? \"Small\" : \"\"}.svg`\n      }\n    />\n  );\n};\n","import React, { CSSProperties, ForwardedRef, forwardRef } from \"react\";\nimport { AriaSelectProps, useSelect } from \"@react-aria/select\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { useSelectState } from \"@react-stately/select\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\nimport { Popover } from \"@intellij-platform/core/Overlay\";\nimport { ContextHelpProps, WithInlineContextHelp } from \"../Field/ContextHelp\";\nimport { StatelessListBox } from \"./StatelessListBox\";\nimport { StyledContainer } from \"./StyledContainer\";\nimport { LabelPlacement, WithLabel } from \"../Field/Label\";\nimport { StyledDropdownArrowIcon } from \"./StyledDropdownArrowIcon\";\n\nexport interface DropdownProps<T extends object>\n  extends Omit<AriaSelectProps<T>, \"validationState\">,\n    ContextHelpProps {\n  labelPlacement?: LabelPlacement;\n  className?: string;\n  style?: CSSProperties;\n  validationState?: \"valid\" | \"error\" | \"warning\";\n}\n\nconst StyledDropdownContainer = styled(StyledContainer)`\n  background: ${({ theme }) => theme.color(\"ComboBox.nonEditableBackground\")};\n`;\n\nconst StyledDropdownValue = styled.span`\n  flex: 1;\n  text-align: initial;\n  white-space: nowrap;\n  margin-right: 5px;\n`;\n\nexport const Dropdown = forwardRef(\n  <T extends object>(\n    {\n      labelPlacement,\n      style,\n      className,\n      validationState,\n      contextHelp,\n      contextHelpPlacement,\n      ...props\n    }: DropdownProps<T>,\n    forwardedRef: ForwardedRef<HTMLButtonElement>\n  ): React.JSX.Element => {\n    const ref = useObjectRef(forwardedRef);\n    const state = useSelectState(props);\n    const {\n      menuProps,\n      labelProps,\n      triggerProps,\n      valueProps,\n      descriptionProps,\n    } = useSelect(\n      { ...props, isInvalid: validationState && validationState !== \"valid\" },\n      state,\n      ref\n    );\n\n    // minWidth is not kept in the state, assuming it's unnecessary, considering the width is expected to be\n    // stable when the popover opens.\n    const minWidth = ref.current\n      ? ref.current?.offsetWidth + 2 /* for box shadow*/\n      : undefined;\n\n    return (\n      <WithLabel\n        label={props.label}\n        labelPlacement={labelPlacement}\n        labelProps={labelProps}\n        isDisabled={props.isDisabled}\n        className={className}\n        style={style}\n      >\n        {/* probably no need for HiddenSelect as auto-filling doesn't seem relevant for applications using this library */}\n        <WithInlineContextHelp\n          contextHelp={contextHelp}\n          contextHelpPlacement={contextHelpPlacement}\n          descriptionProps={descriptionProps}\n        >\n          <BareButton {...triggerProps} autoFocus={props.autoFocus} ref={ref}>\n            <StyledDropdownContainer\n              as=\"button\"\n              validationState={validationState}\n              className={state.isOpen ? \"is-focus\" : \"\"}\n            >\n              <StyledDropdownValue {...valueProps}>\n                {state.selectedItem?.rendered}\n              </StyledDropdownValue>\n              <StyledDropdownArrowIcon\n                disabled={props.isDisabled}\n                size={20}\n                icon=\"general/arrowDown.svg\"\n              />\n            </StyledDropdownContainer>\n          </BareButton>\n        </WithInlineContextHelp>\n        {state.isOpen && (\n          <Popover\n            state={state}\n            triggerRef={ref}\n            placement=\"bottom start\"\n            containerPadding={0}\n            offset={2}\n            crossOffset={-1}\n          >\n            <StatelessListBox\n              {...menuProps}\n              state={state}\n              minWidth={minWidth}\n            />\n          </Popover>\n        )}\n      </WithLabel>\n    );\n  }\n);\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as juiComponents from \"@intellij-platform/core\";\nimport darculaThemeJson from \"@intellij-platform/core/themes/darcula.theme.json\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\nimport highContrastThemeJson from \"@intellij-platform/core/themes/HighContrast.theme.json\";\n\nconst LazyExampleApp = React.lazy(() => import(\"jui-example-app/src/App\"));\nconst ExampleApp = () => (\n  // Because ReactLive doesn't render a Suspense around what it renders.\n  <React.Suspense fallback=\"loading\">\n    <LazyExampleApp />\n  </React.Suspense>\n);\nimport React from \"react\";\n\n// Add react-live imports you need here\nconst ReactLiveScope = {\n  React,\n  ...React,\n  ...juiComponents,\n  ExampleApp,\n  darculaThemeJson,\n  lightThemeJson,\n  highContrastThemeJson,\n};\n\nexport default ReactLiveScope;\n","// extracted by mini-css-extract-plugin\nexport default {\"playground\":\"playground_whuD\",\"noPadding\":\"noPadding_tWI2\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Playground from \"./Playground\";\nimport ReactLiveScope from \"@theme/ReactLiveScope\";\nimport CodeBlock from \"@theme-init/CodeBlock\";\nimport clsx from \"clsx\";\nimport styles from \"../Playground/style-overrides.module.css\";\n\nconst withLiveEditor = (Component) => {\n  function WithLiveEditor(props) {\n    if (props.live) {\n      // idea: We can support playground with alternative sources, where each of them will show up as a button\n      // below the default playground. Clicking on buttons will switch to that example. There can be a simple syntax\n      // for embedding multiple sources in one code block which then will be converted into examples here.\n      return <Playground scope={ReactLiveScope} {...props} />;\n    }\n\n    return <Component {...props} />;\n  }\n\n  return WithLiveEditor;\n};\n\nconst withThemeBackground = (Component) => {\n  function WithThemeBackground(props) {\n    const theme = useTheme();\n    const content = <Component {...props} />;\n    const style = {\n      \"--ifm-list-item-margin\": 0,\n    };\n\n    if (props.themed) {\n      style.color = theme.color(\"*.foreground\");\n      style[\"--ifm-pre-background\"] = theme.color(\"*.background\");\n      style[\"--ifm-code-background\"] = \"none\";\n    }\n    return (\n      <div\n        style={style}\n        className={clsx(styles.playground, {\n          [styles.noPadding]: props.noPadding,\n        })}\n      >\n        {content}\n      </div>\n    );\n  }\n\n  return WithThemeBackground;\n};\n\nexport default withThemeBackground(withLiveEditor(CodeBlock));\n","import React from \"react\";\nimport Code from \"@theme-original/MDXComponents/Code\";\nimport { InlineCode } from \"../../components/component-linking\";\n\n/**\n * Wrapping the default Code component, to replace inline codes with links, if possible.\n * `Code` component is used only when rendering jsdoc descriptions. It's not used\n * when inline code in mdx files is rendered. For that, `inlineCode` entry is set\n * in swizzled `MDXComponents`.\n */\nexport default function CodeWrapper(props: {\n  children: React.ReactNode;\n}): JSX.Element {\n  if (typeof props.children === \"string\") {\n    return <InlineCode>{props.children}</InlineCode>;\n  }\n  return (\n    <>\n      <Code {...props} />\n    </>\n  );\n}\n","import MDXComponents from \"@theme-original/MDXComponents\";\nimport { InlineCode } from \"../../components/component-linking\";\n\nexport default {\n  ...MDXComponents,\n  inlineCode: InlineCode,\n};\n"],"names":["isInResolvedActionGroup","action","isActionGroup","isResolvedActionGroup","isActionGroupDefinition","ActionShortcut","_ref","actionId","children","shortcutString","useGetActionShortcut","getShortcut","React","keymap","useKeymap","keyboardShortcut","find","_ref2","type","shortcutToString","__docgenInfo","isKeyMatch","keyStroke","e","loose","code","modifiers","supportedModifiers","every","modifier","getModifierState","Boolean","includes","ActionsContext","generateId","Math","floor","random","ACTION_PROVIDER_ID_ATTRIBUTE","ACTION_PROVIDER_ID_DATA_PREFIX","actionProvidersMap","Map","ActionsProvider","props","parentContext","useContext","actions","dfsVisit","push","recursivelyCreateActions","shortcuts","Object","fromEntries","map","id","actionProviderId","useState","shortcutHandlerProps","onAction","_temp","useCapture","firstKeyActivatedShortcutsRef","useRef","secondStrokeResetTimerIdRef","onKeyDown","useEventCallback","event","nativeEvent","location","repeat","current","window","clearTimeout","length","some","shortcut","secondKeyStroke","triggerAction","firstKeyMatches","entries","flatMap","filter","input","isKeyboardShortcut","_ref3","firstKeyStroke","_ref4","setTimeout","document","addEventListener","once","capture","stopPropagation","preventDefault","useShortcuts","perform","element","target","Element","allActions","useEffect","set","delete","Provider","value","actionDefinitions","parent","actionDefinition","useShortcutsOf","undefined","firstShortcut","context","isDisabled","actionPerformed","isMutableActionGroup","getAvailableActionsFor","closestActionProvider","closest","HTMLElement","actionSets","keys","dataset","dataKey","startsWith","replace","get","values","isSearchable","concat","sortBy","actionSet","useActions","useAction","usePerformAction","console","error","CommonActionId","EXPAND_ALL","COLLAPSE_ALL","EXPAND_SELECTION","SHRINK_SELECTION","GO_TO_ACTION","GO_TO_FILE","SHOW_INTENTION_ACTIONS","EDIT_SOURCE","SHOW_SEARCH_HISTORY","COPY_REFERENCE","REFRESH","COPY","CUT","PASTE","DELETE","KeymapContext","defaultKeymap","KeymapProvider","keymapProp","parentKeyMap","assign","create","ActionButton","otherProps","actionButton","IconButton","_extends","title","onPress","icon","TooltipTrigger","tooltip","ActionTooltip","actionName","ActionGroupMenu","actionGroup","ActionsMenu","isAction","item","actionContext","actionMenuProps","Menu","getAllActions","disabledKeys","key","items","DividerItem","Divider","renderActionAsMenuItem","isGroup","menuPresentation","Item","textValue","childItems","MenuItemLayout","content","Section","hasDivider","flatten","useCreateDefaultActionGroup","show","usePopupManager","getActionShortcut","openActionsInPopup","close","Popup","positioning","targetRef","querySelector","MENU_POSITION_TARGET_DATA_ATTRIBUTE","placement","Layout","SpeedSearchMenu","onClose","autoFocus","header","groupDefinition","RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID","RESIZE_TOOL_WINDOW_LEFT_ACTION_ID","RESIZE_TOOL_WINDOW_TOP_ACTION_ID","RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID","MAXIMIZE_TOOL_WINDOW_ACTION_ID","FOCUS_EDITOR_ACTION_ID","HIDE_ACTIVE_WINDOW_ACTION_ID","HIDE_ALL_WINDOWS_ACTION_ID","JUMP_TO_LAST_WINDOW_ACTION_ID","defaultKeyToStr","Control","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Enter","Quote","Minus","Equal","Backspace","fromPairs","Array","from","i","charCodeAt","x","String","fromCharCode","a","toUpperCase","KeystrokeToString","isMac","separator","codeToStr","Alt","Shift","Meta","Escape","modifiersOrder","keystrokeToString","keystroke","sort","b","indexOf","join","Error","useActionGroup","actionGroupId","StyledModalWindow","styled","ModalWindow","StyledWindowContainer","StyledContainer","div","StyledHeading","h2","StyledBody","StyledContent","StyledCheckbox","StyledButtons","ButtonGroup","StyledIcon","span","StyledHelpIcon","AlertDialog","heading","body","checkbox","helpButton","buttons","minWidth","role","interactions","defaultBounds","top","innerHeight","observeContentResize","OverlayMoveHandle","dragThreshold","canMoveStart","isEventOnEmptySpaces","moveHandleProps","PlatformIcon","size","useAlertDialog","open","useWindowManager","confirm","message","okText","cancelText","Promise","resolve","Button","variant","bgColor","theme","color","dark","StyledHeaderActions","StyledBalloonContainer","StyledIconContainer","StyledBalloonHeader","StyledBalloonBody","_ref5","lineClamp","_ref6","StyledBalloonFooter","StyledToggleIconContainer","StyledToggleExpandButtonContainer","StyledToggleExpandButtonFooterContainer","BalloonContext","BalloonActionLink","ref","Link","_len","arguments","args","_key","Balloon","iconProp","expanded","expandedProp","defaultExpanded","onExpandedChange","headerActions","containerProps","bodyRef","expandable","setExpandable","setExpanded","useControlledState","maxLinesWhenNotExpanded","bodyElem","clientHeight","parseFloat","getComputedStyle","lineHeight","getNumLines","scrollHeight","iconType","index","arr","toggle","effectiveExpanded","AutoHoverPlatformIcon","onClick","style","marginLeft","ToggleWrapper","enabled","onToggle","Component","iconName","toggleIcon","hoverContainerSelector","className","NotImplementedFn","BalloonsContext","showSticky","useBalloonManager","BalloonManager","disablePortal","BalloonsContainer","StyledBalloonsStack","balloons","setBalloons","timeoutIdsRef","lastIdRef","api","useMemo","timeout","aBalloon","balloon","timeoutId","aTimeoutId","forEach","notificationsStack","position","ReactDOM","withConfig","displayName","componentId","BareButton","forwardedRef","elementType","elementTypeProp","useObjectRef","buttonProps","useButton","domProps","filterDOMProps","mergeProps","StyledButton","button","disabled","_ref7","StyledDefaultButton","_ref8","_ref9","_ref10","_ref11","StyledIconButton","variants","default","mnemonic","form","MnemonicTrigger","onTriggered","StyledButtonGroup","FocusScope","HorizontalArrowKeyNavigation","arrowKeyNavigationProps","focusManager","useFocusManager","keyboardProps","useKeyboard","hasAnyModifier","focusPrevious","wrap","focusNext","continuePropagation","StyledWrapperLabel","label","StyledCheckboxLabelText","StyledInput","Checkbox","preventFocus","disableFocusAlwaysVisible","state","useToggleState","inputProps","useCheckbox","isFocusVisible","isFocused","focusProps","useFocusRing","focusDisabledProps","onFocusCapture","relatedTarget","focus","blur","tabIndex","CheckboxIcon","isIndeterminate","isSelected","pointerEvents","LafIcon","name","Disabled","Selected","Focused","CollectionSpeedSearchContext","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","itemKey","collection","getItem","text","warn","highlightedRanges","matches","HighlightedTextValue","speedSearchContext","TextWithHighlights","highlights","useCollectionSpeedSearchResult","selectionManager","inputSelectionManager","speedSearch","focusBestMatch","searchTerm","active","getKeys","matchedRanges","minusculeMatch","wrappedSelectionManager","selectAll","setSelectedKeys","Set","has","createSpeedSearchSelectionManager","latestValues","useLatest","matchedKeys","noneOfTheMatchesAreSelected","matchedKey","keyToFocus","firstRange","rangeA","rangeB","to","getLongestCommonPrefixMatch","passedFirstSelection","firstSelectedKey","getMatchToSelect","setFocusedKey","replaceSelection","useCollectionSpeedSearch","keepSearchActiveOnBlur","keyboardDelegate","speedSearchStateProps","useSpeedSearchState","speedSearchSelectionManager","useSpeedSearch","speedSearchKeyboardDelegate","wrappedKeyboardDelegate","findFirstMatch","fromKey","direction","currentKey","getKeyAbove","getKeyBelow","getFirstKey","global","firstKey","next","getLastKey","lastKey","pop","createSpeedSearchKeyboardDelegate","speedSearchContextValue","searchPopupProps","match","constructor","seq","this","_Divider","getCollectionNode","rendered","hasChildNodes","_Item","result","StatelyItem","originalShouldInvalidate","shouldInvalidate","invalidated","GAP","StyledItemLayout","StyledHint","currentForegroundAware","commonColors","inactiveTextColor","small","StyledGroup","attrs","ItemLayout","Hint","Group","ItemStateContext","useCollectionAutoScroll","isVirtualized","focusedKey","scrollIntoView","useCollectionRef","selectionManagerRef","useImperativeHandle","useCollectionSearchInput","collectionRef","relayEventsToCollection","currentTarget","dispatchEvent","KeyboardEvent","collectionSearchInputProps","onKeyPress","StyledComboBoxContainer","StyledComboBoxInput","inset","StyledDropdownButton","border","ComboBox","forwardRef","labelPlacement","defaultValue","onValueChange","validationState","validationMessage","contextHelp","contextHelpPlacement","inputRef","inputRefProp","buttonRef","dropdownContainerRef","popoverRef","listBoxRef","isInvalid","useComboBoxState","menuTrigger","allowsCustomValue","inputValue","defaultInputValue","onInputChange","descriptionProps","errorMessageProps","labelProps","comboboxInputProps","listBoxProps","useComboBox","offsetWidth","WithLabel","WithInlineContextHelp","PositionedTooltipTrigger","showOnFocus","triggerRef","ValidationTooltip","delay","tooltipTriggerProps","StyledDropdownArrowIcon","isOpen","Popover","containerPadding","offset","crossOffset","StatelessListBox","useListBox","StyledList","ListBoxSection","section","Option","optionProps","useOption","StyledListItem","selected","containerFocused","StyledSectionHeading","StyledSection","itemProps","headingProps","groupProps","useListBoxSection","StyledVerticalSeparator","getChildren","childNodes","node","focusRing","focused","borderRadius","StyledContextHelp","contextHelpForeground","StyledContextHelpWrapper","css","StyledLabelContainer","StyledLabel","labelRef","applyLabelWidth","commonWidth","LabelAlignmentContext","useLayoutEffect","apply","width","useAlignedLabels","LabeledControlsAlignmentProvider","setCommonWidth","currentWidth","StyledHoverContainer","StyledIconHoverContainer","hoverIcon","amendName","ICONS_DIR_PREFIX","useIconPath","iconDescriptor","themePath","useTheme","resolvedValue","isUnderDarcula","reduce","soFar","findIconPath","resolvedIconPath","useForwardedRef","useSvgIcon","path","StyledIconWrapper","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","slice","darkIcon","getDarkPath","darkPath","fallbackPath","DEFAULT_ICON_SIZE","itemState","isContainerFocused","canceled","async","ariaBusy","svg","getSvgIcon","catch","finally","remove","svgElement","createElement","appendChild","outerHTML","randomPostfix","toFixed","idMatches","matchAll","modifiedSvg","_","newId","replaceAll","makeIdsUnique","fetchIcon","theOld","theNew","str","replaced","replacedAgain","DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","minSize","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","focusableProps","useFocusable","pressProps","usePress","ArrowIcon","IconButtonWithMenu","renderMenu","noArrow","previouslyFocusedElementRef","MenuTrigger","onOpenChange","onFocus","Img","darkSrc","src","StyledInputBox","appearance","StyledAddons","StyledRightAddons","StyledLeftAddons","Input","autoSelect","addonBefore","addonAfter","onKeyUp","onBlur","setIsFocused","focusWithinProps","useFocusWithin","onFocusWithinChange","select","spellCheck","onMouseDown","InputField","fieldProps","useField","errorMessage","placeholder","onChange","StyledLink","focusBorderColor","linkForegroundEnabled","labelable","interactionHandlers","FocusRing","focusRingClass","as","List","allowEmptySelection","fillAvailableSpace","estimatedItemHeight","disallowEmptySelection","useListState","listProps","listContext","useList","virtualizerProps","renderNode","useListVirtualizer","renderItem","ListItem","ListContext","Virtualizer","ListDivider","useSeparator","orientation","separatorProps","listFocused","useSelectableItem","shouldForwardProp","prop","backgroundColor","labelForeground","asCurrentForeground","labelSelectedForeground","asCurrentBackground","showAsFocused","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","isEmpty","onActionCallback","originalUseListState","selectionBehavior","StyledListSectionHeader","paddingLeft","fontWeight","outline","cursor","ListSection","reusableView","headerRef","useVirtualizerItem","layoutInfoToStyle","layoutInfo","renderWrapper","renderChildren","viewType","c","VirtualizerItem","layout","VariableWidthListLayout","estimatedRowHeight","estimatedHeadingHeight","dividerHeight","sizeToFit","scrollToItem","virtualizer","shouldScrollX","duration","scrollDirection","ContextMenuContainer","onOpen","useMenuTriggerState","overlayProps","overlayRef","useContextMenu","containerRef","onOutsideContextMenu","timeStamp","removeEventListener","positionProps","updatePosition","useMouseEventOverlayPosition","shouldFlip","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","areInNestedOverlays","onContextMenu","allProps","MenuOverlay","restoreFocus","defaultAutoFocus","patchCollectionItem","nodes","partialNode","result2","partialChildNode","partialChildNodeWithoutType","PatchedItem","bind","PatchedSection","convertChildren","isArray","Item2","MenuOverlayContext","MenuContext","useMenu","onActionProp","submenuBehavior","menuContextValue","menuProps","useMenuAria","useMenuState","patchCollectionProps","useTreeState","childExpansionBehaviour","expandedKeys","expandedKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","StyledMenu","renderMenuNodes","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItemContext","keyboardShortcutProps","useMenuItemLayout","MenuItem","nestedMenuRef","isExpanded","selectedKeys","renderSubmenu","Submenu","itemWrapper","menuItemProps","hasSubmenu","ariaMenuItemProps","useMenuItemAria","onMouseEnter","onPointerEnter","onPointerDown","hoverProps","useHover","onHoverStart","isAnySubmenuOpen","parentKey","toggleKey","togglePressProps","useMenuItem","useOverlayPosition","MENU_VERTICAL_PADDING","MENU_BORDER_WIDTH","arrowProps","onPointerUp","StyledMenuItem","isActive","StyledMenuItemIcon","StyledNestedArrow","Overlay","OverlayComponent","SimpleOverlay","parentState","rootKey","portalContainer","StyledMenuItemLayout","Content","Shortcut","kbd","useContextOrThrow","allowedIcon","align","positioningTargetRef","menuTriggerProps","triggerProps","useMenuTrigger","ariaButtonProps","getPlacement","StyledItemsContainer","ul","StyledSearchFieldWrapper","StyledSpeedSearchMenu","StyledPlaceholder","useSpeedSearchMenu","speedSearchContainerProps","ListCollection","MenuKeyboardDelegate","contains","activeElement","focusSafely","lastSize","setSize","measureSize","offsetHeight","height","isSearchActive","useResizeObserver","onResize","sizeStyleProps","minHeight","maxHeight","emptyText","clear","SpeedSearchSubmenu","SpeedSearchMenuContent","menuRef","SpeedSearchInput","useSubmenuState","rootItem","submenuProps","useSubmenu","WINDOW_SHADOW","highlightedStyle","defaultStyle","disabledStyle","li","useSubmenuAria","submenuBehaviorProps","super","keyBelow","keyAbove","root","isFocusedRef","focusedKeyRef","defineProperties","SelectionManager","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","useMenuSection","MnemonicContext","createContext","character","onTriggeredProp","setActive","keydownListener","toLowerCase","parentElement","getClientRects","isVisible","keyupListener","renderedMnemonicRef","timerId","hidden","MnemonicText","found","UNSAFE_React17SuspenseFix","measureContentSize","fallback","NullSuspenseFallback","afterUnsuspended","afterSuspended","afterSuspendedProp","afterUnsuspendedProp","StyledWindowUnderlay","StyledWindowInnerContainer","DEFAULT_WINDOW_MIN_WIDTH","DEFAULT_WINDOW_MIN_HEIGHT","WindowControllerContext","propsContext","modalProps","underlayProps","useModalOverlay","useOverlayTriggerState","usePreventScroll","dialogProps","titleProps","useDialog","bounds","overlayInteractionHandlerProps","UNSAFE_measureContentSize","useResizableMovableOverlay","focusContainmentFixProps","lastFocusedElementRef","probablyFocusedElement","elementToFocus","useFocusContainmentFix","OverlayInteractionHandler","contain","WindowContext","movable","OverlayResizeHandles","StyledFooter","hasBorder","contrastBorder","StyledFooterSide","WindowFooter","left","right","StyledWindowTitle","h1","WindowHeader","renderTitle","StyledWindowFooter","StyledWindowContentWrapper","WindowLayout","footer","Footer","Header","WindowsContext","WindowManager","windows","setWindows","newKeyRef","currentWindows","aWindow","requestAnimationFrame","ParentOverlayContext","AriaOverlay","element1","element2","overlayRoot1","overlayRoot2","OverlayInteractionHandlerContext","useOverlayInteractionHandler","useOverlayMoveHandle","options","interactionHandler","finishInteraction","startInteraction","updateBounds","useMove","onMoveStart","onMove","startState","movement","y","onMoveEnd","overlayResizer","initialBoundsRef","max","bottom","newWidth","initialBounds","newHeight","getResizerProps","side","onResizeStarted","onResizeEnd","useOverlayResizer","RightResizer","LeftResizer","TopResizer","BottomResizer","StyledPopover","popoverProps","usePopover","DismissButton","onDismiss","withMinSize","getCenteredBounds","innerWidth","targetElement","targetBounds","getBoundingClientRect","ensureInViewport","gap","viewportWidth","viewportHeight","clamp","getContentSize","fn","ceil","clone","cloneNode","returnValue","removeChild","withTemporaryStyle","useContentSize","observe","measuredSizes","setMeasuredSizes","lastMeasuredSize","at","Size","isEqual","newSize","cancelAnimationFrame","measure","currentSize","aSize","debouncedMeasure","fnRef","currentTimeoutId","useCallback","useDebouncedCallback","mutationObserver","MutationObserver","subtree","childList","disconnect","width2","height2","inputBounds","onBoundsChange","onBoundsChanging","setBounds","contentSize","currentInteraction","setCurrentInteraction","effectiveMinWidth","effectiveMinHeight","applyMinSize","getBounds","updatedBounds","partialBounds","centeredContentBounds","positioned","sized","StyledInnerContainer","DEFAULT_POPUP_MIN_WIDTH","DEFAULT_POPUP_MIN_HEIGHT","_Popup","nonDismissable","allowScroll","positioningProp","onCloseProp","PopupControllerContext","useInteractOutside","onInteractOutsideStart","onInteractOutside","positionedBounds","pipe","focusForwarderProps","useFocusForwarder","titleId","useSlotId","useOverlayFocusContain","zIndex","StyledPopupContainer","propsArray","mergeNonNullProps","PopupContext","PopupHeader","PopupLayout","StyledPopupHint","StyledPopupHeader","hasControls","labelDisabledForeground","renderHeader","StyledPopupLayout","StyledPopupLayoutHeader","StyledPopupLayoutContent","StyledPopupLayoutFooter","PopupsContext","PopupManager","popups","setPopups","popup","currentPopups","aPopup","wrappedPopup","PopupTrigger","useOverlayTrigger","PressResponder","ProgressBar","maxValue","minValue","namePosition","details","secondaryDetails","dense","valueLabel","showValueLabel","progressBarProps","useProgressBar","percentage","forcedDetails","setForcedDetails","setTooltip","contextValue","StyledProgressBarLabel","effectiveDetails","StyledProgressBarContainer","StyledProgressBarLineContainer","hasTopMargin","hasBottomMargin","StyledProgressBarTrack","indeterminate","StyledProgressBarProgress","ProgressBarContext","StyledProgressBarDetails","getIndeterminateStartColor","getIndeterminateEndColor","indeterminateBackgroundAnimation","keyframes","useProgressBarIconButton","_ref12","hoverTooltip","isHovered","useProgressBarPauseIconButton","_ref13","paused","Container","Label","LineContainer","Track","Progress","Details","ProgressBarStopButton","ResizableView","resizerPlacement","ThreeViewSplitter","firstView","firstSize","onFirstResize","lastView","onLastResize","resizerProps","useBottomResizer","VerticalResizer","StyledHorizontalResizer","StyledHorizontalResizerArea","handleSize","HorizontalResizer","outerPadding","background","useLeftResizer","useRightResizer","useTopResizer","StyledVerticalResizer","StyledVerticalResizerArea","useResizer","invert","SearchInput","searchHistory","onClear","onSubmit","onHistoryItemSelected","historyButtonTitle","valueProp","setValue","inputContainerRef","isSearchHistoryOpen","setSearchHistoryOpen","showSearchHistoryAction","searchIcon","historyItemText","parseInt","historyItem","StyledSearchIcon","StyledSpeedSearchInput","noMatch","getOutlineColor","StyledSearchText","clearButtonRef","SpeedSearchPopup","StyledSpeedSearchPopup","red","tooltipForeground","useGhostInput","valueRef","ctrlKey","altKey","metaKey","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","defaultIsSearchActive","onIsSearchActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","ghostInputKeydown","trimmedValue","trimStart","onBlurWithin","StatusBar","StyledStatusBar","StyledStatusBarLeft","StyledStatusBarRight","StyledStatusBarSection","StatusBarWidget","StyledWrapper","StyledStatusBarWidget","StyledStatusBarIconWidget","DarculaSeparatorUI","defaultSize","StyledSeparator","hr","backgroundClip","boxSizing","margin","flexShrink","StyledHorizontalSeparator","DebuggerTabContent","closeButton","TabContentLayout","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","editorTabTheme","borderColor","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","TabCloseButton","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabItem","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","shouldSelectOnPressUp","tabProps","useTab","selectedKey","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","hasOverflow","threshold","setHasOverflow","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetTop","scrollTop","offsetBottom","newHasOverflow","onScroll","useHasOverflow","overflowedElements","useOverflowObserver","overflowedKeys","notNull","scrollableContainer","selectedTabElement","TabsOverflowMenu","onSelect","setSelectedKey","menuItem","inOverflowMenu","ToolWindowTabContent","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","getAllRanges","ranges","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","parts","highlighted","numberPattern","parseComponent","componentStr","round","min","parseHexRgba","parseShorthandHex","parseRgb","RegExp","parseRgba","Color","rgba","g","r","NaN","parse","Number","isInteger","parseColorString","isValid","withTransparency","alpha","brighter","int","FACTOR","darker","toString","blend","colorOrColorString","getBlendedValue","component","isNaN","padStart","StyledSplitterContainer","StyledView","StyledSplitterInnerView","resizerPropsOverrides","innerView","firstViewMinSize","lastViewMinSize","innerViewMinSize","firstViewRef","lastViewRef","firstSizeState","setFirstSizeState","lastSizeState","setLastSizeState","horizontalValue","verticalValue","FirstResizer","SecondResizer","sizeStyleProp","minSizeStyleProp","isFractionSize","normalizeSize","getSize","getNewSize","newFractionSize","getActualSize","viewElem","actualSize","currentLastSize","currentFirstSize","StyledFloatView","FloatView","boundsStyle","FloatToolWindows","floatWindows","renderToolWindow","stackedFloatWindows","getKey","sortedKeys","setSortedKeys","sorted","bringToFront","move","useStackedLayersState","layersProps","toolWindow","MovableToolWindowStripeContext","MovableToolWindowStripeProvider","stripes","draggingRect","setDraggingRect","draggingKey","setDraggingKey","dropPosition","setDropPosition","getDropPositionRef","moveStartLocationRef","addStripe","propsRef","startMove","stripe","stripeElRef","stripeElement","getItemRect","toJSON","indexInMain","mainItems","findIndex","indexInSplit","splitItems","anchor","isSplit","dropPositionGetters","createGetDropPosition","getDropPosition","draggedRect","endMove","TopStripe","BottomStripe","LeftStripe","RightStripe","InnerView","StyledToolWindowOuterLayout","Shell","hideStripes","getSizeInAnchor","containerSize","isHorizontalToolWindow","mapToKey","sortAndMapToKey","compose","order","filterMains","getMains","filterSplits","filterVisible","expectedViewMode","viewMode","getSplits","filterVisibleDocked","filterVisibleUnDocked","getDocked","toolWindows","docks","mains","splits","weight","mainKey","sizeFraction","sideWeight","getUnDocked","getSideState","main","activeKeys","undocked","docked","DEFAULT_HEIGHT","DEFAULT_WIDTH","getFloatWindowsState","floatingBounds","getFloatWindowState","getStripeRect","start","rect","end","getDropPositions","getRef","score","abs","relative","keyToOffsets","boundingRect","getKeyToOffsets","dropPositions","lastDropPosition","stripeRect","getCanDrop","bestMatch","candidate","STRIPE_BUTTON_LINE_HEIGHT","StyledToolWindowStripeButton","StyledToolWindowStripe","theOtherSide","preventCollapse","StyledSpacer","useElementMove","ghost","ghostOption","otherOptions","updateGhostPosition","defaultGhost","colors","computedBackground","unshift","resultColor","nextColor","findEffectiveBackgroundColor","createDefaultGhost","append","ToolWindowStripe","render","onItemPress","getProps","latestPropsRef","moveDisabled","useMovableStripeButtons","isNotCurrentItem","anItem","ToolWindowStripeButton","getStripeButtonStyles","styles","marginValue","display","StyledUndockSide","UndockSide","ToolWindows","hideToolWindowBars","useWidescreenLayout","toolWindowsState","onToolWindowStateChange","mainContentMinWidth","windowsById","indexBy","mainContentFocusScopeRef","layoutState","setLayoutState","windowFocusableRefs","latestRef","container","_setLayoutState","windowIds","removedFromSideBarIds","groupBy","getToolWindowsLayoutState","observer","ResizeObserver","resize","contentRect","unobserve","hasFocus","focusLastActiveWindow","lastFocusedKey","focusMainContent","changeState","updater","interactionOutsideRef","onFocusLost","handleBodyFocus","focusLosingElement","focusReceivingElement","useOnFocusLost","renderStripe","toolbarButton","all","lastFocused","ToolWindowStateProvider","mainContentFocusableRef","renderSideDockedView","resizeDockSplitView","onDockResize","containerBounds","resizeDock","getSplitViewProps","firstAnchor","secondAnchor","horizontalSplitterProps","verticalSplitterProps","outerSplitterProps","innerSplitterProps","undockLayers","resizeUndock","setFloatingBound","renderInnerLayout","ToolWindowStateContext","useToolWindowState","hide","removeFromSidebar","moveToSide","changeViewMode","stretchWidth","stretchHeight","setFloatingBounds","isDocked","areInSameSection","curry","window1","window2","getViewModeType","ToolWindowsState","layoutToRestore","invalidWindows","targetKey","mapWindows","hideAll","restoreWindows","closableViewModes","viewModeType","sideOrIndex","targetSide","targetIndex","targetSideWindows","indexInTargetSide","sortedTargetWindows","insert","newTargetSideWindows","newValue","targetViewMode","stretch","mapFn","mapObjIndexed","property","currentFloatingBound","resizeSide","dock","isInResizingView","toolWindowState","_temp2","inputs","getAnchorOrientation","useToolWindow","contentRef","focusableContentRef","onFocusChange","contentHasFocus","setContentHasFocus","contentFocusWithinProps","toolWindowProps","autoHideProps","hideTimeoutId","windowFocusWithinProps","onFocusWithin","useAutoHide","forwardFocus","ignoreFocusedDescendant","toolWindowContentProps","toolWindowHeaderProps","ToolWindowSettingsIconMenu","viewModeActionGroup","VIEW_MODE_ACTION_GROUP_ID","moveToActionGroup","MOVE_TO_ACTION_GROUP_ID","resizeActions","TOOL_WINDOW_RESIZE_ACTION_GROUP_ID","maximizeAction","removeFromSideBarAction","REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID","gearIconActions","ViewModeToActionId","StyledToolWindowHeader","StyledToolWindowHeaderActions","StyledToolWindowHeaderContent","DefaultToolWindowHeader","additionalActions","Toolbar","DOCK_TOOL_WINDOW_ACTION_ID","StyledToolWindowContainer","StyledToolWindowContent","DefaultToolWindowContext","useDefaultToolWindowContext","DefaultToolWindow","headerContent","mainContentTitle","defaultToolWindowContext","useToolWindowActions","getToolWindowNumberFromShortcut","num","DefaultToolWindowToolbarButton","showNumber","getActivateToolWindowActionId","number","DefaultToolWindows","showNumbers","toolWindowsRef","windowById","useToolWindowsActions","getPresentation","MultiViewToolWindow","groupTabs","isToolWindowFocused","setToolWindowFocused","activeKey","setActiveKey","defaultActiveKey","onActiveKeyChange","contents","toArray","child","validChild","MultiContentToolWindowContent","renderedViewSwitcher","onSelectionChange","tabContent","previousKeys","usePrevious","newActiveKey","activeContent","View","DOCK_PINNED_MODE_ACTION_ID","DOCK_UNPINNED_MODE_ACTION_ID","UNDOCK_MODE_ACTION_ID","FLOAT_MODE_ACTION_ID","WINDOW_MODE_ACTION_ID","HEIGHT_RESIZE_STEP","WIDTH_RESIZE_STEP","anchors","getAnchorName","docked_pinned","docked_unpinned","undock","float","createDefaultActionGroup","alert","resizeGroup","isAnySideWindowWindowOpen","getOrdinal","description","n","ord","borderStyle","borderPropToCssProp","StyledToolbar","horizontal","vertical","StyledShowMoreButton","StyledHorizontalToolbar","StyledVerticalToolbar","StyledToolbarContent","shouldWrap","firstOverflowedIndex","OrientationContext","overflowBehavior","rootProps","showMoreButtonRef","isOverflowPopupVisible","setOverflowPopupVisible","popupHeight","setPopupHeight","firstOverflowedChildIndex","setFirstOverflowedChildIndex","firstOverflowedChildRef","childElements","firstOverflowedChild","toolbarProps","onMouseMove","firstOverflowedElement","shouldShow","clientY","clientX","onMouseLeave","toolbarOverflowPopupProps","showOverflowPopup","ToolbarInOverlay","firstVisibleIndex","ToolbarSeparator","ActionHelpTooltip","helpText","link","tooltipProps","Tooltip","multiline","Description","HelpTooltip","inputTriggerRef","useTooltipTriggerState","fallbackRef","positionAria","TooltipTriggerAndOverlay","trigger","StyledTooltip","tooltipBackground","hasPointer","tooltipBorderColor","WITH_POINTER_BORDER_RADIUS","StyledShortcut","StyledHeader","fontSizeDelta","StyledDescription","placementToPointerSide","center","withPointer","isInteractive","pointerPositionStyle","TooltipContext","useTooltip","TooltipPointer","tooltipRef","_Tooltip","POINTER_THICKNESS","TRANSLATE","sideStyles","StyledTooltipPointer","POINTER_WIDTH","POINTER_HEIGHT","normalizeCssValue","withMin","withMax","HEIGHT_OFFSET","WIDTH_OFFSET","limitPointerPositionStyles","applyVerticalMinMax","identity","applyHorizontalMinMax","getOffsetCssProp","pointerPositionToOffsetStyle","offsetValue","setInteractive","useTooltipTrigger","FocusableProvider","normalizeChildren","useAriaTooltipTrigger","StyledValidationTooltip","StyledWarningValidationTooltip","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","treeRef","hideSpeedSearchPopup","treeProps","treeContext","useSpeedSearchTree","useTreeVirtualizer","TreeContext","StyledTree","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","selectableTree","useSelectableTree","getKeyLeftOf","getKeyRightOf","TREE_ICON_SIZE","StyledTreeNodeIcon","getIcon","iconPath","TreeNodeIcon","useTreeNodeToggleButton","treeNodeToggleButtonProps","selectedDescendantKeys","toggleSelection","StyledTreeNode","level","onActionRef","treeNodeProps","onDoubleClick","useTreeNode","selectionKeyDown","focusedItem","isExpandable","onNodeKeyDown","shouldToggle","shiftKey","useSelectParentOfRemovedSelectedNode","previousCollectionRef","rawSelection","invalid","valid","invalidKey","useCollectionCacheInvalidation","cacheInvalidation","invalidators","lastInvalidators","anInvalidator","Symbol","iterator","TreeCollection","keyMap","iterable","last","visit","nextKey","prevKey","_Symbol$iterator","getKeyBefore","getKeyAfter","idx","getSingleChildrenKeys","getSingleChildrenKeysRecursive","childNodesIterator","firstChild","done","noMoreChildren","isEmptyIterable","TreeSelectionManager","expandSelection","expandKeys","getExpandAndShrinkKeys","shrinkSelection","shrinkKeys","recursivelyGetExpandAndShrinkKeys","previousChild","newKeys","parentDescendants","getAllDescendants","getAllRoots","descendants","stopKeys","flat","_TreeCollection","rootKeys","getAllExpandableKeys","rootNodes","recursivelyAddExpandableKeys","add","setExpandedKeys","selectionState","useMultipleSelectionState","tree","useCollection","latestState","expandAll","collapseAll","useTreeRef","newExpandedKeys","toggleTreeNode","expandedSiblings","getRootItemKeys","getChildItems","siblings","getSiblings","aKey","sectionItems","res","FlattenedTreeLayout","buildChild","layoutNode","doBuildCollection","padding","visibleNodes","maxY","isLoading","Rect","visibleRect","loaderHeight","loader","LayoutInfo","layoutInfos","placeholderHeight","getVisibleLayoutInfos","useTreeActions","collectSelectableItemsRecursive","collectedItems","NestedSelection","cache","WeakMap","getSelectionState","itemsInSubtree","collectSelectableItems","cachedState","allDescendantsStates","SpeedSearchTreeWithCheckboxes","nestedSelection","otherInvalidators","StyledCheckboxWrapper","TreeNodeCheckbox","selectItemOnPress","itemContext","useNestedSelectionState","selectedKeysProp","defaultSelectedKeys","onSelectedKeysChange","selectedKeysSetter","useControllableSet","ListLayout","keyToWidth","visibleContentWidth","buildItem","buildNode","buildDivider","rectHeight","estimatedSize","buildCollection","getVisibleContentWidth","invalidateEverything","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","visibleViews","view","itemContentWidth","intersects","getVisibleRect","isWordSeparator","isWhitespace","char","test","isUpperCase","isMeaningfulChar","ch","rawPattern","isStarts","isStart","pattern","continuous","inputIndex","patternIndex","lastMatch","chars","previousChar","manager","disallowSelectAll","useLocale","handlers","navigateToKey","childFocus","selectionMode","extendSelection","isCtrlKeyPressed","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","useOriginalSelectableItem","styledComponents","ThemeConsumer","directChildRef","focusManagerRef","forceFocusFirst","containerElement","focusFirst","WrappedFocusScope","GetFocusManager","savedUserSelect","handlersRef","documentElement","webkitUserSelect","pageX","pageY","dragStarted","runAfterTransition","OverflowObserver","callback","data","mutations","mutation","removedNodes","intersectionObserver","addedNodes","IntersectionObserver","newHiddenElements","entry","isIntersecting","newVisibleElements","previouslyOverflowedElements","currentOverflowElements","childElement","scrollableContainerRef","rootMargin","setOverflowedElements","overflowObserver","change","getExpandAllKeys","roots","processItem","getExpandedToNodesKeys","targetNodeKeys","targetNodeKeySet","childValues","childValue","dfs","bfsVisit","bfs","parentValue","childNode","sortTreeNodesInPlace","by","compareFn","aa","bb","Context","nullErrorMessage","possiblyBlurredElement","innerRef","lastMouseClientPos","globalMoveHandler","fakeTarget","visibility","coordinatesSource","_updatePosition","ImmutableSet","setValueWithMutation","_len2","_key2","_len3","_key3","mutate","createSetInterface","currentValue","useStateSetterForSet","useComponentLinkMap","docs","useDocusaurusContext","globalData","versions","version","linkMap","doc","componentName","InlineCode","useAutoLinkedJsDoc","componentLinkMap","comment","toCommentBlock","url","line","StyledSvg","StyledExpandButton","Expandable","onExpand","setIsExpandable","viewBox","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","transform","icons","clsx","playgroundHeader","flex","LivePreviewLoader","ErrorFallback","tryAgain","errorFallback","ErrorBoundaryTryAgainButton","Preview","BrowserOnly","ErrorBoundary","params","LivePreview","LiveError","ResultWithHeader","Translate","playgroundPreview","ThemedLiveEditor","isBrowser","useIsBrowser","LiveEditor","playgroundEditor","EditorWithHeader","ThemeProvider","Theme","lightThemeJson","Playground","transformCode","prismTheme","usePrismTheme","noInline","metastring","playgroundContainer","LiveProvider","SpeedSearchContainer","CollectionSpeedSearchContainer","useSpeedSearchList","listState","otherOutputs","SpeedSearchList","StyledIconLiveIndicator","SpeedSearch","speedSearchState","Tree","itemType","ProgressBarPauseButton","onPausedChange","StyledDropdownContainer","StyledDropdownValue","Dropdown","useSelectState","valueProps","useSelect","selectedItem","LazyExampleApp","juiComponents","ExampleApp","darculaThemeJson","highContrastThemeJson","themed","noPadding","CodeBlock","live","scope","ReactLiveScope","CodeWrapper","Code","MDXComponents","inlineCode"],"sourceRoot":""}