"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8754],{90748:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=n(7896),o=(n(2784),n(30876));const i={},a="Tree",r={unversionedId:"components/Tree",id:"components/Tree",title:"Tree",description:"SpeedSearchTree",source:"@site/docs/components/Tree.mdx",sourceDirName:"components",slug:"/components/Tree",permalink:"/jui/docs/components/Tree",draft:!1,editUrl:"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Tree.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ToolWindows",permalink:"/jui/docs/components/ToolWindows"},next:{title:"Resizer",permalink:"/jui/docs/advanced/Resizer"}},c={},d=[{value:"SpeedSearchTree",id:"speedsearchtree",level:2},{value:"Context Menu",id:"context-menu",level:2},{value:"Advanced use",id:"advanced-use",level:2},{value:"Custom list component with useList and useSpeedSearchList",id:"custom-list-component-with-uselist-and-usespeedsearchlist",level:3}],l={toc:d};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,s.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"tree"},"Tree"),(0,o.kt)("h2",{id:"speedsearchtree"},"SpeedSearchTree"),(0,o.kt)("h2",{id:"context-menu"},"Context Menu"),(0,o.kt)("p",null,"In order to have context menu for tree nodes, just wrap the tree in a ",(0,o.kt)("inlineCode",{parentName:"p"},"ContextMenuContainer"),". When the context menu\nis triggered on an item, the selection is also updated right before the context menu opens, so you can render the\ncontext menu based on the selected tree node(s)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed noPadding",live:!0,themed:!0,noPadding:!0},'function TreeContextMenuExample() {\n  const treeItems = [\n    {\n      type: "file",\n      name: "ToolWindowState.test.ts",\n      items: [\n        {\n          type: "spec",\n          name: "tool window state",\n          items: [\n            {\n              type: "case",\n              name:\n                "hide or show return the same state if the key doesn\'t exist in the state",\n            },\n            {\n              type: "case",\n              name:\n                "hide returns the same state if the window is already not visible",\n            },\n            {\n              type: "case",\n              name:\n                "hiding a tool window only toggles the visibility of that window",\n            },\n          ],\n        },\n      ],\n    },\n  ];\n  const getAllKeys = (items) =>\n    items.flatMap((item) => [item.name, ...getAllKeys(item.items || [])]);\n  const allKeys = getAllKeys(treeItems);\n  const [selectedKeys, setSelectedKeys] = useState(new Set());\n\n  return (\n    <ContextMenuContainer\n      renderMenu={() => {\n        const selectedKey = Array.from(selectedKeys)[0];\n        if (!selectedKey) {\n          return (\n            <Menu>\n              <Item>Nothing here</Item>\n            </Menu>\n          );\n        }\n        return (\n          <Menu>\n            <Item textValue={`Run \'${selectedKey}\'`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="debugger/threadRunning.svg" />}\n                content={`Run \'${selectedKey}\'`}\n                shortcut="\u2303\u21e7R"\n              />\n            </Item>\n            <Item textValue={`Debug \'${selectedKey}\'`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/startDebugger.svg" />}\n                content={`Debug \'${selectedKey}\'`}\n                shortcut="\u2303\u21e7D"\n              />\n            </Item>\n            <Divider />\n            <Item textValue="Jump to source">\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/editSource.svg" />}\n                content="Jump to source"\n                shortcut="\u2318\u2193"\n              />\n            </Item>\n          </Menu>\n        );\n      }}\n    >\n      <SpeedSearchTree\n        items={treeItems}\n        fillAvailableSpace\n        selectionMode="single"\n        defaultExpandedKeys={allKeys}\n        stickySearch\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        {(item) => (\n          <Item key={item.name} textValue={item.name} childItems={item.items}>\n            <PlatformIcon\n              icon="runConfigurations/testPassed.svg"\n              style={{ marginRight: ".25rem", alignSelf: "center" }}\n            />\n            <HighlightedTextValue />\n          </Item>\n        )}\n      </SpeedSearchTree>\n    </ContextMenuContainer>\n  );\n}\n')),(0,o.kt)("h2",{id:"advanced-use"},"Advanced use"),(0,o.kt)("h3",{id:"custom-list-component-with-uselist-and-usespeedsearchlist"},"Custom list component with useList and useSpeedSearchList"))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=65a4d95d.4a782176.js.map