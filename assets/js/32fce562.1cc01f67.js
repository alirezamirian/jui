"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3674],{17729:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var a=n(7896),i=(n(2784),n(30876));n(44384);const o={},s="Checkbox",c={unversionedId:"components/Checkbox",id:"components/Checkbox",title:"Checkbox",description:"Checkbox with or without a label.",source:"@site/docs/components/Checkbox.mdx",sourceDirName:"components",slug:"/components/Checkbox",permalink:"/jui/docs/components/Checkbox",draft:!1,editUrl:"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Checkbox.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Button",permalink:"/jui/docs/components/Button"},next:{title:"Icons",permalink:"/jui/docs/components/Icons"}},l={},d=[{value:"Simple usage",id:"simple-usage",level:2},{value:"Focus options",id:"focus-options",level:2},{value:"Usage without label",id:"usage-without-label",level:2}],r={toc:d};function h(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},r,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"checkbox"},"Checkbox"),(0,i.kt)("p",null,"Checkbox with or without a label."),(0,i.kt)("h2",{id:"simple-usage"},"Simple usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live themed",live:!0,themed:!0},'// import { Checkbox } from "@intellij-platform/core";\n<>\n  <Checkbox>Default behavior</Checkbox> <br />\n  <Checkbox isSelected>Controlled selected.</Checkbox> <br />\n  <Checkbox isIndeterminate>Indeterminate state</Checkbox> <br />\n  <Checkbox isSelected isDisabled>\n    Disabled\n  </Checkbox>\n</>\n')),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When ",(0,i.kt)("inlineCode",{parentName:"p"},"isIndeterminate")," is true, ",(0,i.kt)("inlineCode",{parentName:"p"},"isSelected")," state is independently maintained, and ",(0,i.kt)("inlineCode",{parentName:"p"},"onChange")," is still called with the\ntoggled value upon interaction. But regardless of that state, the indeterminate UI is shown. It's important to note\nthat it's not a\n",(0,i.kt)("a",{parentName:"p",href:"https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/util/ui/src/com/intellij/util/ui/ThreeStateCheckBox.java#L23-L22"},"three state checkbox"),"\nin that sense and the implementation rather follows the\n",(0,i.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox#attr-indeterminate"},"web standard implementation"),",\nwhere ",(0,i.kt)("inlineCode",{parentName:"p"},"indeterminate")," is independent of ",(0,i.kt)("inlineCode",{parentName:"p"},"checked")," state."))),(0,i.kt)("h2",{id:"focus-options"},"Focus options"),(0,i.kt)("p",null,"By default, Checkbox gets focused when it's interacted with. This is inline with the default browser's behaviour for\ncheckboxes. However, the focus ring is always shown when the Checkbox has focus, regardless of the interaction type.\nThis is not inline with browser's default behavior of showing focus ring based\non ",(0,i.kt)("a",{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible",target:"_blank"},"\nfocus-visible heuristics "),", which in turn depends on the input device."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"disableFocusAlwaysVisible")," to switch to the browser default focus-visible behaviour."))),(0,i.kt)("p",null,"In some use cases, you may want to prevent checkbox from obtaining the focus when it's interacted with. A legitimate\nexample could be ",(0,i.kt)("a",{parentName:"p",href:"#usage-without-label"},"label-less checkboxes")," in List items or Table cells, where the checkbox is a\npart of a focusable container (list item, table cell) already, and that focusable container handles keyboard interaction\nfor toggling checkbox, for example by ",(0,i.kt)("inlineCode",{parentName:"p"},"Space"),' key. Another use case, which perhaps is more controversial with respect to\ni11y practices, is where the checkbox is next to more important focusable element that you don\'t want to take the focus\naway from. "Amend" checkbox in "Commit" tool window is an example of that use case. When the commit message editor is\nfocused, toggling "Amend" checkbox won\'t take focus away from the commit message editor. It\'s important to note that\nthe checkbox is still keyboard-accessible in such cases, because of the\n',(0,i.kt)("a",{parentName:"p",href:"https://plugins.jetbrains.com/docs/intellij/basic-action-system.html"},"Action System")," and also\n",(0,i.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/adding-mnemonics.html"},"mnemonics"),"."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"preventFocus")," to not allow checkbox get focused when it's interacted with."))),(0,i.kt)("p",null,"Last thing about focus management is that you can disable focus by Tab key, while the checkbox is still focusable."),(0,i.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"Tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"excludeFromTabOrder")," to exclude the checkbox from getting focus by Tab key."))),(0,i.kt)("p",null,"Below is an example of the focus management options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live themed",live:!0,themed:!0},'// import { Checkbox } from "@intellij-platform/core";\n<>\n  <Checkbox>Default behavior</Checkbox> <br />\n  <Checkbox excludeFromTabOrder>\n    Excluded from tab order. Try focusing the previous checkbox and press tab.\n  </Checkbox> <br />\n  <Checkbox disableFocusAlwaysVisible>\n    Focus ring only shown based on `focus-visible` heuristics.\n  </Checkbox>\n  <br />\n  <Checkbox preventFocus>Doesn\'t get focused when toggled</Checkbox>\n</>\n')),(0,i.kt)("h2",{id:"usage-without-label"},"Usage without label"),(0,i.kt)("p",null,"A use case for checkboxes without label is in list or tree items.\nThat kind of use case is usually together with ",(0,i.kt)("inlineCode",{parentName:"p"},"preventFocus")," option, since the checkbox is a part of a focusable\ncontainer (list/tree items), and the focus should not be taken away from that focusable container."),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"Note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"You should always pass ",(0,i.kt)("inlineCode",{parentName:"p"},"aria-label")," for checkboxes without label."))),(0,i.kt)("p",null,"Here is an example of rendering checkboxes inside tree items:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live themed",live:!0,themed:!0},'// import { Checkbox, List, Item, SpeedSearchTree, HighlightedTextValue } from "@intellij-platform/core";\n// TODO: Space doesn\'t toggle selection on tree items\nfunction Example() {\n  const [selectedKeys, setSelectedKeys] = useState(new Set(["Vicente Amigo"]));\n  const [checkedKeys, setCheckedKeys] = useState(["Paco de Lucia"]);\n\n  const isChecked = (item) =>\n    checkedKeys.includes(item.name) ||\n    (item.children && getLeafNodes(item).every(isChecked));\n\n  const getLeafNodes = (root) => {\n    if (root.children) {\n      return root.children\n        .map((child) => (child.children ? getLeafNodes(child) : [child]))\n        .flat();\n    }\n    return [];\n  };\n\n  const toggle = (item, checked) => {\n    setSelectedKeys(() => new Set([item.name]));\n    if (item.children) {\n      const allChildren = getLeafNodes(item);\n      if (!allChildren.every(isChecked)) {\n        setCheckedKeys(allChildren.map((child) => child.name));\n      } else {\n        setCheckedKeys((checkedKeys) =>\n          checkedKeys.filter(\n            (key) => !allChildren.find((child) => child.name === key)\n          )\n        );\n      }\n    } else {\n      if (checked) {\n        setCheckedKeys((checkedKeys) => checkedKeys.concat(item.name));\n      } else {\n        setCheckedKeys((checkedKeys) =>\n          checkedKeys.filter((key) => key !== item.name)\n        );\n      }\n    }\n  };\n\n  const isIndeterminate = (item) => {\n    if (!item.children) {\n      return false;\n    }\n    const leafNodes = getLeafNodes(item);\n    const checkedLeafNodes = leafNodes.filter(isChecked);\n    return (\n      checkedLeafNodes.length > 0 && checkedLeafNodes.length < leafNodes.length\n    );\n  };\n  return (\n    <SpeedSearchTree\n      selectionMode="multiple"\n      defaultExpandedKeys={["Heros"]}\n      selectedKeys={selectedKeys}\n      onSelectionChange={setSelectedKeys}\n      items={[\n        {\n          name: "Heros",\n          children: [\n            { name: "Paco de Lucia", children: null },\n            { name: "Vicente Amigo", children: null },\n            { name: "Gerardo Nunez", children: null },\n          ],\n        },\n      ]}\n    >\n      {(item) => (\n        <Item key={item.name} childItems={item.children} textValue={item.name}>\n          <div style={{ display: "flex", alignItems: "center", gap: ".2rem" }}>\n            {\n              <>\n                <span style={{ display: "inline-flex" }}>\n                  <Checkbox\n                    aria-label={`Select ${item.name}`}\n                    preventFocus\n                    isSelected={isChecked(item)}\n                    onChange={(checked) => toggle(item, checked)}\n                    isIndeterminate={item.children && isIndeterminate(item)}\n                  />\n                </span>\n              </>\n            }\n            <span>\n              <HighlightedTextValue />\n            </span>\n          </div>\n        </Item>\n      )}\n    </SpeedSearchTree>\n  );\n}\n')))}h.isMDXComponent=!0}}]);
//# sourceMappingURL=32fce562.1cc01f67.js.map