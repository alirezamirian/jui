{"version":3,"file":"assets/js/e41fee28.9fe56820.js","mappings":"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","sources":["webpack://website/../jui/src/ActionSystem/ActionGroup.tsx","webpack://website/../jui/src/ActionSystem/ActionShortcut.tsx","webpack://website/../jui/src/ActionSystem/useShortcut.ts","webpack://website/../jui/src/ActionSystem/ActionsProvider.tsx","webpack://website/../jui/src/ActionSystem/CommonActionIds.ts","webpack://website/../jui/src/ActionSystem/KeymapProvider.tsx","webpack://website/../jui/src/ActionSystem/Shortcut.ts","webpack://website/../jui/src/ActionSystem/components/ActionButton.tsx","webpack://website/../jui/src/ActionSystem/components/ActionsMenu.tsx","webpack://website/../jui/src/ActionSystem/components/useCreateDefaultActionGroup.tsx","webpack://website/../jui/src/ActionSystem/defaultKeymap.tsx","webpack://website/../jui/src/ActionSystem/shortcutToString.ts","webpack://website/../jui/src/ActionSystem/useActionGroup.tsx","webpack://website/../jui/src/Balloon/Balloon.styled.tsx","webpack://website/../jui/src/Balloon/Balloon.tsx","webpack://website/../jui/src/Balloon/BalloonManager.tsx","webpack://website/../jui/src/Balloon/StyledBalloonsStack.tsx","webpack://website/../jui/src/Button/BareButton.tsx","webpack://website/../jui/src/Button/StyledButton.tsx","webpack://website/../jui/src/Button/Button.tsx","webpack://website/../jui/src/Checkbox/Checkbox.tsx","webpack://website/../jui/src/Checkbox/CheckboxIcon.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContext.tsx","webpack://website/../jui/src/CollectionSpeedSearch/HighlightedTextValue.tsx","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearchResult.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchSelectionManager.ts","webpack://website/../jui/src/CollectionSpeedSearch/useCollectionSpeedSearch.ts","webpack://website/../jui/src/CollectionSpeedSearch/createSpeedSearchKeyboardDelegate.ts","webpack://website/../jui/src/Collections/Divider.ts","webpack://website/../jui/src/Collections/Item.ts","webpack://website/../jui/src/Collections/ItemLayout.tsx","webpack://website/../jui/src/Collections/ItemStateContext.tsx","webpack://website/../jui/src/Collections/useCollectionAutoScroll.ts","webpack://website/../jui/src/Collections/useCollectionRef.ts","webpack://website/../jui/src/Collections/useCollectionSearchInput.ts","webpack://website/../jui/src/Icon/AutoHoverPlatformIcon.tsx","webpack://website/../jui/src/Icon/LafIcon.tsx","webpack://website/../jui/src/Icon/PlatformIcon.tsx","webpack://website/../jui/src/Icon/StyledIconWrapper.tsx","webpack://website/../jui/src/Icon/useSvgIcon.tsx","webpack://website/../jui/src/IconButton/IconButton.tsx","webpack://website/../jui/src/IconButtonWithMenu/IconButtonWithMenu.tsx","webpack://website/../jui/src/Img.tsx","webpack://website/../jui/src/InputField/Input.tsx","webpack://website/../jui/src/Label/StyledLabel.ts","webpack://website/../jui/src/InputField/InputField.tsx","webpack://website/../jui/src/Link/StyledLink.tsx","webpack://website/../jui/src/Link/Link.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/ListContext.tsx","webpack://website/../jui/src/List/ListDivider.tsx","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledList.tsx","webpack://website/../jui/src/List/StyledListItem.tsx","webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/renderWrapper.tsx","webpack://website/../jui/src/List/useListVirtualizer.tsx","webpack://website/../jui/src/Menu/ContextMenuContainer.tsx","webpack://website/../jui/src/Menu/useContextMenu.tsx","webpack://website/../jui/src/Collections/patchCollectionProps.tsx","webpack://website/../jui/src/Menu/Menu.tsx","webpack://website/../jui/src/Menu/MenuItem.tsx","webpack://website/../jui/src/Menu/MenuItemLayout.tsx","webpack://website/../jui/src/Menu/MenuOverlay.tsx","webpack://website/../jui/src/Menu/MenuTrigger.tsx","webpack://website/../jui/src/Menu/SpeedSearchMenu.tsx","webpack://website/../jui/src/Menu/StyledMenu.tsx","webpack://website/../jui/src/Menu/StyledMenuItem.tsx","webpack://website/../jui/src/Menu/Submenu.tsx","webpack://website/../jui/src/Menu/_useSubmenu.ts","webpack://website/../jui/src/Menu/_useSubmenuState.tsx","webpack://website/../jui/src/Menu/MenuSection.tsx","webpack://website/../jui/src/Menu/renderMenuNodes.tsx","webpack://website/../jui/src/Overlay/UNSAFE_React17SuspenseFix.tsx","webpack://website/../jui/src/ModalWindow/ModalWindow.tsx","webpack://website/../jui/src/ModalWindow/WindowContext.ts","webpack://website/../jui/src/ModalWindow/WindowFooter.tsx","webpack://website/../jui/src/ModalWindow/WindowHeader.tsx","webpack://website/../jui/src/ModalWindow/WindowLayout.tsx","webpack://website/../jui/src/ModalWindow/WindowManager.tsx","webpack://website/../jui/src/Overlay/Overlay.tsx","webpack://website/../jui/src/Overlay/OverlayInteractionHandler.tsx","webpack://website/../jui/src/Overlay/OverlayMoveHandle.tsx","webpack://website/../jui/src/Overlay/OverlayResizeHandles.tsx","webpack://website/../jui/src/Overlay/bounds-helpers.tsx","webpack://website/../jui/src/utils/useDebounce.ts","webpack://website/../jui/src/Overlay/useContentSize.tsx","webpack://website/../jui/src/Overlay/useResizableMovableOverlay.tsx","webpack://website/../jui/src/Popup/Popup.tsx","webpack://website/../jui/src/Popup/_useDialog.ts","webpack://website/../jui/src/utils/mergeNonNullProps.tsx","webpack://website/../jui/src/Popup/PopupContext.tsx","webpack://website/../jui/src/Popup/PopupHeader.tsx","webpack://website/../jui/src/Popup/PopupLayout.tsx","webpack://website/../jui/src/Popup/PopupManager.tsx","webpack://website/../jui/src/Popup/PopupTrigger.tsx","webpack://website/../jui/src/Popup/StyledPopupHint.tsx","webpack://website/../jui/src/ProgressBar/ProgressBar.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarStopButton.tsx","webpack://website/../jui/src/ResizableView.tsx","webpack://website/../jui/src/Resizer/BottomResizer.tsx","webpack://website/../jui/src/Resizer/HorizontalResizer.tsx","webpack://website/../jui/src/Resizer/LeftResizer.tsx","webpack://website/../jui/src/Resizer/RightResizer.tsx","webpack://website/../jui/src/Resizer/TopResizer.tsx","webpack://website/../jui/src/Resizer/VerticalResizer.tsx","webpack://website/../jui/src/Resizer/useResizer.ts","webpack://website/../jui/src/SearchInput/SearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchInput.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchPopup.tsx","webpack://website/../jui/src/SpeedSearch/useGhostInput.tsx","webpack://website/../jui/src/SpeedSearch/useSpeedSearch.tsx","webpack://website/../jui/src/StatusBar/StatusBar.tsx","webpack://website/../jui/src/StatusBar/StatusBarWidget.tsx","webpack://website/../jui/src/StyledSeparator.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabContent.tsx","webpack://website/../jui/src/Tabs/DebuggerTabs/StyledDebuggerTab.ts","webpack://website/../jui/src/Tabs/DebuggerTabs/DebuggerTabs.tsx","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabContent.tsx","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTab.ts","webpack://website/../jui/src/Tabs/EditorTabs/StyledEditorTabs.ts","webpack://website/../jui/src/Tabs/EditorTabs/EditorTabs.tsx","webpack://website/../jui/src/Tabs/StyledDefaultTab.ts","webpack://website/../jui/src/Tabs/StyledDefaultTabs.ts","webpack://website/../jui/src/Tabs/TabCloseButton.tsx","webpack://website/../jui/src/Tabs/TabContentLayout.tsx","webpack://website/../jui/src/Tabs/TabItem.tsx","webpack://website/../jui/src/Tabs/TabTheme.ts","webpack://website/../jui/src/Tabs/StyledHorizontalOverflowShadows.tsx","webpack://website/../jui/src/Tabs/Tab.tsx","webpack://website/../jui/src/Tabs/Tabs.tsx","webpack://website/../jui/src/Tabs/useHasOverflow.tsx","webpack://website/../jui/src/Tabs/TabsOverflowMenu.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabContent.tsx","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTab.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/StyledToolWindowTabs.ts","webpack://website/../jui/src/Tabs/ToolWindowTabs/ToolWindowTabs.tsx","webpack://website/../jui/src/TextRange.ts","webpack://website/../jui/src/TextWithHighlights/TextWithHighlights.tsx","webpack://website/../jui/src/Theme/parseColorString.ts","webpack://website/../jui/src/Theme/Color.ts","webpack://website/../jui/src/ThreeViewSplitter/ThreeViewSplitter.tsx","webpack://website/../jui/src/ToolWindows/FloatView.tsx","webpack://website/../jui/src/ToolWindows/FloatToolWindows.tsx","webpack://website/../jui/src/ToolWindows/MovableToolWindowStripeProvider.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowOuterLayout.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsLayoutState.ts","webpack://website/../jui/src/ToolWindows/createGetDropPosition.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripeButton.tsx","webpack://website/../jui/src/ToolWindows/StyledToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/useElementMove.tsx","webpack://website/../jui/src/ToolWindows/findEffectiveBackgroundColor.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowStripe.tsx","webpack://website/../jui/src/ToolWindows/UndockSide.tsx","webpack://website/../jui/src/ToolWindows/ToolWindows.tsx","webpack://website/../jui/src/ToolWindows/useOnFocusLost.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowStateProvider.tsx","webpack://website/../jui/src/ToolWindows/ToolWindowsState/ToolWindowsState.ts","webpack://website/../jui/src/ToolWindows/utils.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowSettingsIconMenu.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowHeader.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindowToolbarButton.tsx","webpack://website/../jui/src/ToolWindowsImpl/DefaultToolWindows.tsx","webpack://website/../jui/src/ToolWindowsImpl/MultiViewToolWindow.tsx","webpack://website/../jui/src/ToolWindowsImpl/ToolWindowActionIds.ts","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowActions.tsx","webpack://website/../jui/src/ToolWindowsImpl/useToolWindowsActions.tsx","webpack://website/../jui/src/Toolbar/Toolbar.tsx","webpack://website/../jui/src/Tooltip/ActionHelpTooltip.tsx","webpack://website/../jui/src/Tooltip/ActionTooltip.tsx","webpack://website/../jui/src/Tooltip/HelpTooltip.tsx","webpack://website/../jui/src/Tooltip/PositionedTooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/Tooltip.tsx","webpack://website/../jui/src/Tooltip/TooltipContext.tsx","webpack://website/../jui/src/Tooltip/TooltipPointer.tsx","webpack://website/../jui/src/Tooltip/TooltipTrigger.tsx","webpack://website/../jui/src/Tooltip/TooltipTriggerAndOverlay.tsx","webpack://website/../jui/src/Tooltip/ValidationTooltip.tsx","webpack://website/../jui/src/Tooltip/tooltip-styles.ts","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTreeNode.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/SpeedSearchTree.tsx","webpack://website/../jui/src/Tree/SpeedSearchTree/useSpeedSearchTree.ts","webpack://website/../jui/src/Tree/StyledTree.tsx","webpack://website/../jui/src/Tree/TreeContext.tsx","webpack://website/../jui/src/Tree/TreeKeyboardDelegate.tsx","webpack://website/../jui/src/Tree/TreeNodeIcon.tsx","webpack://website/../jui/src/Tree/useTreeNodeToggleButton.tsx","webpack://website/../jui/src/Tree/StyledTreeNode.tsx","webpack://website/../jui/src/Tree/TreeNode.tsx","webpack://website/../jui/src/Tree/useTreeNode.tsx","webpack://website/../jui/src/Tree/useSelectableTree.tsx","webpack://website/../jui/src/Tree/__copied__TreeCollection.ts","webpack://website/../jui/src/Tree/getSingleChildrenKeys.ts","webpack://website/../jui/src/Tree/TreeSelectionManager.ts","webpack://website/../jui/src/Tree/useTreeState.ts","webpack://website/../jui/src/Collections/useCollectionCacheInvalidation.ts","webpack://website/../jui/src/Tree/useTreeRef.tsx","webpack://website/../jui/src/Tree/useTreeVirtualizer.tsx","webpack://website/../jui/src/TreeActions/useTreeActions.tsx","webpack://website/../jui/src/TreeCheckboxes/NestedSelection.ts","webpack://website/../jui/src/TreeCheckboxes/SpeedSearchTreeWithCheckboxes.tsx","webpack://website/../jui/src/TreeCheckboxes/TreeNodeCheckbox.tsx","webpack://website/../jui/src/TreeCheckboxes/useNestedSelectionState.ts","webpack://website/../jui/src/VariableWidthListLayout.tsx","webpack://website/../jui/src/utils/string-utils.ts","webpack://website/../jui/src/minusculeMatch.ts","webpack://website/../jui/src/selection/useSelectableCollection.ts","webpack://website/../jui/src/selection/useSelectableItem.tsx","webpack://website/../jui/src/style-constants.ts","webpack://website/../jui/src/styled.ts","webpack://website/../jui/src/utils/FocusScope.tsx","webpack://website/../jui/src/utils/array-utils.ts","webpack://website/../jui/src/utils/interaction-utils/textSelection.ts","webpack://website/../jui/src/utils/interaction-utils/useMove.tsx","webpack://website/../jui/src/utils/keyboard-utils.ts","webpack://website/../jui/src/utils/overflow-utils/OverflowObserver.ts","webpack://website/../jui/src/utils/overflow-utils/useOverflowObserver.tsx","webpack://website/../jui/src/utils/tree-utils.ts","webpack://website/../jui/src/utils/useContextOrThrow.tsx","webpack://website/../jui/src/utils/useEventCallback.ts","webpack://website/../jui/src/utils/useFocusForwarder.ts","webpack://website/../jui/src/utils/useForwardedRef.ts","webpack://website/../jui/src/utils/useLatest.ts","webpack://website/../jui/src/utils/useMouseEventOverlayPosition.tsx","webpack://website/../jui/src/utils/usePrevious.ts","webpack://website/../jui/src/utils/immutableSet.ts","webpack://website/../jui/src/utils/useSet.ts","webpack://website/./src/components/ApiDescription.tsx","webpack://website/./src/components/EmbeddedStory.tsx","webpack://website/./src/theme/CodeBlock/Expandable.tsx","webpack://website/./src/theme/CodeBlock/Playground.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearchContainer.tsx","webpack://website/../jui/src/CollectionSpeedSearch/CollectionSpeedSearchContainer.tsx","webpack://website/../jui/src/List/SpeedSearchList/useSpeedSearchList.ts","webpack://website/../jui/src/List/SpeedSearchList/SpeedSearchList.tsx","webpack://website/../jui/src/ActionSystem/components/ActionGroupMenu.tsx","webpack://website/../jui/src/Icon/StyledIconLiveIndicator.tsx","webpack://website/../jui/src/SpeedSearch/SpeedSearch.tsx","webpack://website/../jui/src/Tree/Tree.tsx","webpack://website/../jui/src/ProgressBar/ProgressBarPauseButton.tsx","webpack://website/./src/theme/ReactLiveScope/index.js","webpack://website/./src/theme/Playground/style-overrides.module.css","webpack://website/./src/theme/CodeBlock/index.js","webpack://website/./docs/components/Popup.mdx"],"sourcesContent":["import {\n  Action,\n  ActionDefinition,\n} from \"@intellij-platform/core/ActionSystem/Action\";\n\nexport type ActionInResolvedGroup = Action & { parent: ResolvedActionGroup };\n\nexport interface MutableActionGroup extends Action {\n  children: Action[];\n  /**\n   * Whether the action group is searchable. See {@link getAvailableActionsFor}.\n   */\n  isSearchable?: boolean;\n  /**\n   * If the action group should be rendered as a popup (submenu), in menus.\n   */\n  isPopup?: boolean;\n}\nexport type ActionGroup = Readonly<MutableActionGroup>;\nexport interface ResolvedActionGroup extends ActionGroup {\n  parent: ResolvedActionGroup | null;\n  children: ActionInResolvedGroup[];\n}\nexport interface ActionGroupDefinition extends ActionDefinition {\n  children: ActionDefinition[]; // Should DividerItem be supported first-class here?\n  /**\n   * Whether the action group is searchable. See {@link getAvailableActionsFor}.\n   */\n  isSearchable?: boolean;\n  /**\n   * If the action group should be rendered as a popup (submenu), in menus.\n   */\n  isPopup?: boolean;\n}\n\nexport function isInResolvedActionGroup(\n  action: Action\n): action is ActionInResolvedGroup {\n  return \"parent\" in action;\n}\nexport function isActionGroup(action: Action): action is ActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isResolvedActionGroup<T extends Action>(\n  action: Action\n): action is ResolvedActionGroup {\n  return \"children\" in action && \"parent\" in action; // probably better to use a discriminator field like `type`\n}\n\nexport function isActionGroupDefinition(\n  action: ActionDefinition\n): action is ActionGroupDefinition {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n","import React from \"react\";\nimport { useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\n\n/**\n * Renders the first keyboard shortcut for the action specified by {@param actionId}, based on the keymap context.\n * if {@param children} is provided, treats it as a render function that receives the shortcut string.\n */\nexport const ActionShortcut = ({\n  actionId,\n  children,\n}: {\n  actionId: string;\n  children?: (shortcut: string) => React.ReactNode;\n}) => {\n  const getShortcut = useGetActionShortcut();\n  const shortcutString = getShortcut(actionId);\n  return (\n    <>\n      {shortcutString && (children ? children(shortcutString) : shortcutString)}\n    </>\n  );\n};\n\n/**\n * Returns a function that gets first keyboard shortcut for the action specified by `actionId`, based on the\n * keymap context.\n */\nexport const useGetActionShortcut = (): ((actionId: string) => string) => {\n  const keymap = useKeymap();\n  return (actionId: string) => {\n    const keyboardShortcut = keymap?.[actionId]?.find(\n      ({ type }) => type === \"keyboard\"\n    );\n    return keyboardShortcut ? shortcutToString(keyboardShortcut) : \"\";\n  };\n};\n","import React, { KeyboardEventHandler, useRef } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  isKeyboardShortcut,\n  KeyboardShortcut,\n  KeyStroke,\n  Shortcut,\n  supportedModifiers,\n} from \"./Shortcut\";\n\nexport function useShortcuts(\n  shortcuts: { [actionId: string]: ReadonlyArray<Shortcut> },\n  onAction: (\n    actionId: string,\n    args: {\n      event: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>;\n    }\n  ) => void | boolean,\n  {\n    useCapture = false,\n  }: {\n    /**\n     * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n     * a descendant element handles events in capture phase, and that conflicts with an action.\n     */\n    useCapture?: boolean;\n  } = {}\n) {\n  const firstKeyActivatedShortcutsRef = useRef<\n    Array<{ actionId: string; shortcut: KeyboardShortcut }>\n  >([]);\n  const secondStrokeResetTimerIdRef = useRef<number | null>(null);\n  const onKeyDown: KeyboardEventHandler<HTMLElement> = useEventCallback((e) => {\n    // TODO: repeated key downs can trigger an action repeatedly, in the original impl. Example: expand/shrink selection\n    if (isModifierOnly(e.nativeEvent) || e.repeat) {\n      return;\n    }\n    // firstKeyActivatedShortcutsRef will be re-adjusted in any case. Cleaning whatever scheduled reset\n    if (secondStrokeResetTimerIdRef.current !== null) {\n      window.clearTimeout(secondStrokeResetTimerIdRef.current);\n    }\n\n    function triggerAction(actionId: string) {\n      const result = onAction(actionId, { event: e });\n      if (result !== false) {\n        // TODO: make sure about how propagation should be stopped and/or controlled\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n    // If there are keyboard shortcuts that are half way handled (first keystroke triggered already, and we are within\n    // the valid wait for the second keystroke), they should be prioritized over first keystroke matching.\n    if (firstKeyActivatedShortcutsRef.current.length > 0) {\n      firstKeyActivatedShortcutsRef.current.some(({ shortcut, actionId }) => {\n        if (isKeyMatch(shortcut.secondKeyStroke, e, true)) {\n          triggerAction(actionId);\n          return true;\n        }\n      });\n      firstKeyActivatedShortcutsRef.current = [];\n    } else {\n      const firstKeyMatches = Object.entries(shortcuts)\n        .flatMap(([actionId, shortcuts]) =>\n          shortcuts.map((shortcut) => ({ actionId, shortcut }))\n        )\n        .filter(\n          (\n            input\n          ): input is {\n            actionId: string;\n            shortcut: KeyboardShortcut;\n          } => isKeyboardShortcut(input.shortcut)\n        )\n        .filter(({ shortcut }) => isKeyMatch(shortcut.firstKeyStroke, e));\n\n      firstKeyActivatedShortcutsRef.current = firstKeyMatches.filter(\n        ({ shortcut, actionId }) => shortcut.secondKeyStroke\n      );\n\n      if (firstKeyActivatedShortcutsRef.current.length > 0) {\n        secondStrokeResetTimerIdRef.current = window.setTimeout(() => {\n          firstKeyActivatedShortcutsRef.current = [];\n        }, 2000);\n        document.addEventListener(\n          \"keydown\",\n          () => {\n            document.addEventListener(\n              \"keyup\",\n              () => {\n                firstKeyActivatedShortcutsRef.current = [];\n              },\n              { once: true }\n            );\n          },\n          //  by passing capture: true, we skip the current keydown event, since it's already passed capture phase\n          { once: true, capture: true }\n        );\n      } else if (firstKeyMatches.length > 0) {\n        triggerAction(firstKeyMatches[0].actionId);\n      }\n    }\n  });\n  const shortcutHandlerProps = {\n    /**\n     * by setting onKeyDownCapture is set instead of onKeyDown, we can prioritize action event handler over\n     * component-specific handlers. That might be useful for some components that aggressively stop propagation of\n     * events they handle, if the action is considered of higher priority compared to the conflicting component-internal\n     * functionality. So maybe an option would be in order to define whether the shortcut's event handling should be done\n     * in capture or bubbling phase.\n     * Another thing to get clarified as action system is more used, is to decide if action handler should stop\n     * propagation or not. Or should it be an option?\n     * UPDATE: Added an option to determine whether event handling should be done in capture phase. The use case is\n     * \"Find in files\" action with Cmd+Shift+O shortcut, which overlaps with some action in Monaco editor (only in .ts\n     * files). Monaco uses capture phase, and stops propagation, so unless we use capture phase, useShortcut's event\n     * handler is never called.\n     * An apposite use case is in SpeedSearchTree in tool windows, where we want Escape to be handled by speed search,\n     * and propagation stopped, if speed search is currently active. The second Escape keystroke should move focus to\n     * the editor. That wouldn't work if we unconditionally handle events in capture phase.\n     */\n    [useCapture ? \"onKeyDownCapture\" : \"onKeyDown\"]: onKeyDown,\n  };\n  return { shortcutHandlerProps };\n}\n\nconst isKeyMatch = (\n  keyStroke: KeyStroke | undefined,\n  e: React.KeyboardEvent,\n  loose?: boolean\n) =>\n  e.code === keyStroke?.code &&\n  (loose ? keyStroke.modifiers || [] : supportedModifiers).every(\n    (modifier) =>\n      e.getModifierState(modifier) ===\n      Boolean(keyStroke.modifiers?.includes(modifier))\n  );\n\nfunction isModifierOnly(event: KeyboardEvent) {\n  return event.location === 1 || event.location === 2;\n}\n","import { sortBy } from \"ramda\";\nimport React, { HTMLAttributes, useContext, useEffect, useState } from \"react\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { dfsVisit } from \"@intellij-platform/core/utils/tree-utils\";\n\nimport { Keymap, useKeymap } from \"./KeymapProvider\";\nimport { shortcutToString } from \"./shortcutToString\";\nimport { useShortcuts } from \"./useShortcut\";\nimport {\n  ActionGroup,\n  ActionInResolvedGroup,\n  isActionGroup,\n  isActionGroupDefinition,\n  MutableActionGroup,\n} from \"./ActionGroup\";\nimport {\n  Action,\n  ActionContext,\n  ActionDefinition,\n  MutableAction,\n} from \"./Action\";\n\n/**\n * Represents the properties required for the ActionsProvider component.\n */\ninterface ActionsProviderProps {\n  /**\n   * A collection of action definitions.\n   */\n  actions: ActionDefinition[];\n  children: (args: {\n    shortcutHandlerProps: HTMLAttributes<HTMLElement>;\n  }) => React.ReactElement;\n\n  /**\n   * Experimental option to determine if event handling should be done on capture phase. Useful for cases where\n   * a descendant element handles events in capture phase, and that conflicts with an action.\n   */\n  useCapture?: boolean;\n}\n\nconst ActionsContext = React.createContext<Action[]>([]);\n\nfunction generateId() {\n  return `jui-${Math.floor(Math.random() * 10000000)}`;\n}\n\nconst ACTION_PROVIDER_ID_ATTRIBUTE = \"data-action-provider\";\nconst ACTION_PROVIDER_ID_DATA_PREFIX = \"action_provider_id_\";\nconst actionProvidersMap = new Map<string, Action[]>();\n\n/**\n * Provides a set of actions for the wrapped UI. Uses the currently provided keymap to find the shortcuts\n * for each action, and passes the necessary event handlers for the shortcuts, to the `children` render function.\n *\n * @param {Array<Action>} props.actions - The actions to be provided.\n * @param {boolean} [props.useCapture] - Specifies whether to use capture phase for event handling.\n * @param {Function} props.children - Render function that accepts shortcutHandlerProps as argument.\n */\nexport function ActionsProvider(props: ActionsProviderProps): JSX.Element {\n  const parentContext = useContext(ActionsContext);\n  const keymap = useKeymap();\n  const actions: Action[] = [];\n  dfsVisit(\n    (action: Action | null) =>\n      action && isActionGroup(action) ? action.children : null,\n    (action) => actions.push(action),\n    recursivelyCreateActions(keymap, props.actions)\n  );\n\n  const shortcuts = Object.fromEntries(\n    actions.map((action) => [action.id, action.shortcuts || []])\n  );\n  const [actionProviderId] = useState(generateId);\n\n  const { shortcutHandlerProps } = useShortcuts(\n    shortcuts,\n    (actionId, { event }) => {\n      actions\n        .find((action) => action.id === actionId)\n        ?.perform({\n          event,\n          // it's important to use target and not currentTarget\n          element: event.target instanceof Element ? event.target : null,\n        });\n    },\n    { useCapture: props.useCapture }\n  );\n\n  const allActions = [...parentContext, ...actions]; // Maybe warn overrides?\n\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[ACTION_PROVIDER_ID_ATTRIBUTE] = actionProviderId;\n  // @ts-expect-error: not sure why data-* attribute is not accepted.\n  shortcutHandlerProps[\n    `data-${ACTION_PROVIDER_ID_DATA_PREFIX}${actionProviderId}`\n  ] = \"\";\n\n  useEffect(() => {\n    actionProvidersMap.set(actionProviderId, allActions);\n  });\n  useEffect(() => {\n    return () => {\n      actionProvidersMap.delete(actionProviderId);\n    };\n  }, []);\n  return (\n    <ActionsContext.Provider value={allActions}>\n      {props.children({ shortcutHandlerProps })}\n    </ActionsContext.Provider>\n  );\n}\n\nfunction isMutableActionGroup(\n  action: MutableAction\n): action is MutableActionGroup {\n  return \"children\" in action; // probably better to use a discriminator field like `type`\n}\n\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent: ActionGroup\n): Array<ActionInResolvedGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[]\n): Array<Action | ActionGroup>;\nfunction recursivelyCreateActions(\n  keymap: Keymap | null,\n  actionDefinitions: ActionDefinition[],\n  parent?: ActionGroup\n): Array<Action | ActionInResolvedGroup | ActionGroup> {\n  return actionDefinitions.map((actionDefinition: ActionDefinition): Action => {\n    const shortcuts =\n      keymap?.[actionDefinition.id] ??\n      (actionDefinition.useShortcutsOf\n        ? keymap?.[actionDefinition.useShortcutsOf]\n        : undefined);\n    const firstShortcut = shortcuts?.[0];\n    const action: MutableAction | ActionInResolvedGroup = {\n      ...actionDefinition,\n      ...(parent ? { parent } : {}),\n      shortcuts,\n      shortcut: firstShortcut ? shortcutToString(firstShortcut) : undefined, // Maybe it should be all shortcuts?\n      perform: (context) => {\n        if (!action.isDisabled) {\n          actionDefinition.actionPerformed(\n            context || { event: null, element: null }\n          );\n        }\n      },\n    };\n    if (\n      isMutableActionGroup(action) &&\n      isActionGroupDefinition(actionDefinition)\n    ) {\n      action.children = recursivelyCreateActions(\n        keymap,\n        actionDefinition.children,\n        action\n      );\n    }\n    return action;\n  });\n}\n\n/**\n * Experimental function to get list of all actions available from a given html elements. Useful for implementing\n * action search UI.\n * @experimental\n */\nexport function getAvailableActionsFor(element: Element): Action[] {\n  const closestActionProvider = element.closest(\n    `[${ACTION_PROVIDER_ID_ATTRIBUTE}]`\n  );\n  if (closestActionProvider instanceof HTMLElement) {\n    /**\n     * NOTE: initially, only one data attribute was used to hold the action provider id. Although simpler, that approach\n     * is subject to bug in some edge cases, where multiple nested action providers are rendered, but `actionProviderProps`\n     * is merged on a single dom element. In such cases, it's important that the props from the innermost action provider\n     * is merged last, overwriting other values for data-action-provider-id.\n     * Because that's error-prone, we keep unique data attributes (`data-action_provider_id_...`} for each action\n     * provider id, and to simplify querying part, we also add a constant data attribute (data-action-provider).\n     * This way we can read all action providers applied on the same dom element. Since action providers inherit actions\n     * from parent action providers, we can reliably pick the actions from the one with the highest number of actions.\n     */\n    const actionSets = Object.keys(closestActionProvider.dataset)\n      .filter((dataKey) => dataKey.startsWith(ACTION_PROVIDER_ID_DATA_PREFIX))\n      .map((dataKey) => {\n        const id = dataKey?.replace(ACTION_PROVIDER_ID_DATA_PREFIX, \"\");\n        const actions = id && actionProvidersMap.get(id);\n        return actions ? Object.values(actions) : [];\n      })\n      .concat();\n    return sortBy((actionSet) => -actionSet.length, actionSets)[0] || [];\n  }\n  return [];\n}\n\nexport function useActions(): Action[] {\n  return useContext(ActionsContext);\n}\n\nexport const useAction = (actionId: string): Action | null => {\n  return useActions().find(({ id }) => id === actionId) ?? null;\n};\n\nexport const usePerformAction = (): ((\n  actionId: string,\n  context?: ActionContext\n) => void) => {\n  const actions = useActions();\n  return useEventCallback((actionId: string, context?: ActionContext) => {\n    const action = actions.find(({ id }) => id === actionId);\n    if (action) {\n      action.perform(context);\n    } else {\n      console.error(\n        `An attempt to perform action with id ${actionId} failed because action was not found`\n      );\n    }\n  });\n};\n","export const CommonActionId = {\n  EXPAND_ALL: \"ExpandAll\",\n  COLLAPSE_ALL: \"CollapseAll\",\n  EXPAND_SELECTION: \"EditorSelectWord\",\n  SHRINK_SELECTION: \"EditorUnSelectWord\",\n  GO_TO_ACTION: \"GotoAction\",\n  GO_TO_FILE: \"GotoFile\",\n  SHOW_INTENTION_ACTIONS: \"ShowIntentionActions\",\n  EDIT_SOURCE: \"Documentation.EditSource\",\n  SHOW_SEARCH_HISTORY: \"ShowSearchHistory\",\n  COPY_REFERENCE: \"CopyReference\",\n  REFRESH: \"Refresh\",\n};\n","import React, { useContext } from \"react\";\nimport { Shortcut } from \"./Shortcut\";\nimport { defaultKeymap } from \"./defaultKeymap\";\n\nexport interface Keymap {\n  [actionId: string]: ReadonlyArray<Shortcut>;\n}\n\nexport const KeymapContext = React.createContext<Keymap | null>(defaultKeymap);\n\nexport const KeymapProvider: React.FC<{ keymap: Keymap }> = ({\n  keymap: keymapProp,\n  children,\n}) => {\n  const parentKeyMap = useContext(KeymapContext);\n  const keymap = Object.assign(Object.create(parentKeyMap), keymapProp);\n  return (\n    <KeymapContext.Provider value={keymap}>{children}</KeymapContext.Provider>\n  );\n};\n\nexport const useKeymap = () => useContext(KeymapContext);\n","type ShortcutType = \"mouse\" | \"keyboard\";\nexport type KeyStrokeModifier = \"Alt\" | \"Shift\" | \"Meta\" | \"Control\";\n\nexport interface KeyStroke {\n  /**\n   * {@link https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key}\n   */\n  code: string;\n  modifiers?: Array<KeyStrokeModifier>;\n}\n\ninterface ShortcutBase {\n  type: ShortcutType;\n}\n\ninterface MouseShortcut extends ShortcutBase {\n  type: \"mouse\";\n}\n\nexport interface KeyboardShortcut extends ShortcutBase {\n  type: \"keyboard\";\n  firstKeyStroke: KeyStroke;\n  secondKeyStroke?: KeyStroke;\n}\n\nexport type Shortcut = MouseShortcut | KeyboardShortcut;\n\nexport const isKeyboardShortcut = (\n  shortcut: Shortcut\n): shortcut is KeyboardShortcut => shortcut.type === \"keyboard\";\n\nexport const supportedModifiers: KeyStrokeModifier[] = [\n  \"Alt\",\n  \"Meta\",\n  \"Shift\",\n  \"Control\",\n];\n","import React from \"react\";\nimport { useAction } from \"@intellij-platform/core/ActionSystem/ActionsProvider\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport const ActionButton = ({\n  actionId,\n  children,\n  ...otherProps\n}: {\n  actionId: string;\n  /**\n   * Content to show instead of `action.icon`.\n   */\n  children?: React.ReactNode;\n} & IconButtonProps): JSX.Element => {\n  const action = useAction(actionId);\n  if (!action) {\n    return <></>;\n  }\n  const actionButton = (\n    <IconButton\n      isDisabled={action.isDisabled}\n      {...otherProps}\n      onPress={(e) => {\n        action?.perform();\n        otherProps.onPress?.(e);\n      }}\n    >\n      {children || action.icon}\n    </IconButton>\n  );\n  if (action.title) {\n    return (\n      <TooltipTrigger\n        tooltip={\n          <ActionTooltip actionName={action.title} shortcut={action.shortcut} />\n        }\n      >\n        {actionButton}\n      </TooltipTrigger>\n    );\n  }\n  return actionButton;\n};\n","import React from \"react\";\nimport { flatten } from \"ramda\";\nimport { Menu, MenuItemLayout } from \"@intellij-platform/core/Menu\";\nimport { Divider, Item, Section } from \"@intellij-platform/core/Collections\";\nimport { DividerItem } from \"@intellij-platform/core/Collections/Divider\"; // Importing from /Collections breaks the build for some reason\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type Action } from \"@intellij-platform/core/ActionSystem/Action\";\n\ntype ActionGroupAsMenuItem = Pick<\n  ActionGroup,\n  \"id\" | \"icon\" | \"title\" | \"isDisabled\" | \"children\" | \"isPopup\"\n>;\nexport type ActionItem = ActionGroupAsMenuItem | Action | DividerItem;\n\nfunction isAction(item: ActionItem): item is Action {\n  return \"perform\" in item;\n}\n\nexport type ActionMenuProps = {\n  selectedKeys?: string[];\n  menuProps?: React.HTMLAttributes<HTMLElement>;\n  actions: Array<ActionItem>;\n};\n\n/**\n * Given a nested list of resolved actions, renders a menu corresponding to them.\n */\nexport function ActionsMenu({\n  actions,\n  selectedKeys,\n  menuProps,\n}: ActionMenuProps) {\n  const allActions = getAllActions(actions);\n  const disabledKeys = allActions\n    .filter(({ isDisabled }) => isDisabled)\n    .map(({ id }) => id);\n\n  return (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        const action = allActions.find(({ id }) => id === key);\n        if (action && isAction(action)) {\n          action.perform(); // TODO: pass context, containing the menu item as `element`\n        }\n      }}\n      selectedKeys={selectedKeys} // FIXME: keep isSelected on actions (toggle action)?\n      disabledKeys={disabledKeys}\n      items={actions}\n      autoFocus\n    >\n      {(action) => {\n        if (action instanceof DividerItem) {\n          return <Divider />;\n        }\n        return renderActionAsMenuItem(action);\n      }}\n    </Menu>\n  );\n}\n\ntype ActionAsMenuItem = Omit<Action, \"perform\" | \"shortcuts\">;\n\nexport function renderActionAsMenuItem(\n  action: ActionAsMenuItem | ActionGroupAsMenuItem\n) {\n  const isGroup = \"children\" in action;\n  if (isGroup && !action.isPopup) {\n    return (\n      // `title` is intentionally not passed, as menu sections created from action groups usually don't have title.\n      // Maybe it should be an option?\n      // @ts-expect-error: hasDivider is not yet made a public API.\n      <Section key={action.id} hasDivider items={action.children}>\n        {renderActionAsMenuItem}\n      </Section>\n    );\n  }\n  return (\n    <Item\n      key={action.id}\n      textValue={action.title}\n      childItems={isGroup ? action.children : undefined}\n    >\n      <MenuItemLayout\n        content={action.title}\n        icon={action.icon}\n        shortcut={\"shortcut\" in action ? action.shortcut : undefined}\n      />\n    </Item>\n  );\n}\n\nfunction getAllActions(items: ActionItem[]): Action[] {\n  return flatten(\n    items.map((item) => (\"children\" in item ? item.children : item))\n  ).filter(isAction);\n}\n","import { flatten } from \"ramda\";\nimport React from \"react\";\nimport {\n  type ActionGroupDefinition,\n  isActionGroupDefinition,\n} from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { useGetActionShortcut } from \"@intellij-platform/core/ActionSystem/ActionShortcut\";\nimport { Popup, usePopupManager } from \"@intellij-platform/core/Popup\";\nimport { SpeedSearchMenu } from \"@intellij-platform/core/Menu\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { renderActionAsMenuItem } from \"./ActionsMenu\";\nimport { ActionContext } from \"@intellij-platform/core/ActionSystem/Action\";\n\nexport const useCreateDefaultActionGroup = () => {\n  const { show } = usePopupManager();\n  const getActionShortcut = useGetActionShortcut();\n  const openActionsInPopup = useEventCallback(\n    (\n      { children, title }: Pick<ActionGroupDefinition, \"children\" | \"title\">,\n      context: ActionContext\n    ) => {\n      show(({ close }) => (\n        <Popup>\n          <Popup.Layout\n            content={\n              /**\n               * NOTE: It would be much nicer to use {@link ActionGroupMenu} component here. But the action group is not\n               * yet provided when the group definition is being created. It seems like a sign of bad design that needs\n               * to get addressed.\n               */\n              <SpeedSearchMenu\n                aria-label={title}\n                items={children}\n                onAction={(key) => {\n                  // The need for calculating `allActions` is a consequence of the issue explained in the note above.\n                  const allActions = flatten(\n                    children.map((item) =>\n                      isActionGroupDefinition(item) ? item.children : item\n                    )\n                  );\n                  const action = allActions.find((action) => action.id === key);\n                  if (action && !action.isDisabled) {\n                    action.actionPerformed(context);\n                  }\n                }}\n                onClose={close}\n                autoFocus=\"first\"\n              >\n                {(item) =>\n                  renderActionAsMenuItem({\n                    ...item,\n                    // a consequence of the issue explained in the note above.\n                    shortcut: getActionShortcut(item.id),\n                  })\n                }\n              </SpeedSearchMenu>\n            }\n            header={title}\n          />\n        </Popup>\n      ));\n    }\n  );\n\n  return (\n    groupDefinition: Omit<ActionGroupDefinition, \"actionPerformed\">\n  ): ActionGroupDefinition => {\n    return {\n      isPopup: true,\n      ...groupDefinition,\n      actionPerformed: (context) =>\n        openActionsInPopup(groupDefinition, context),\n    };\n  };\n};\n","import {\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  // For some reason importing from shorter paths doesn't work as expected in cypress ¯\\_(ツ)_/¯\n  // Weirdly, `import *` works in that case.\n} from \"@intellij-platform/core/ToolWindowsImpl/ToolWindowActionIds\";\n\nimport { Keymap } from \"./KeymapProvider\";\nimport { CommonActionId } from \"./CommonActionIds\";\n\n// TODO: OS specific defaults\n// TODO: extract and export action ids\n// NOTE: defaultKeymap doesn't belong to ActionSystem semantically. Would be something to be moved to a separate module\n/**\n * Default Intellij Idea keymapping for common action ids, including tool window actions.\n * @see CommonActionId\n */\nexport const defaultKeymap: Keymap = {\n  [RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowRight\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_LEFT_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowLeft\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_TOP_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowUp\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"ArrowDown\",\n        modifiers: [\"Control\", \"Alt\"],\n      },\n    },\n  ],\n  [MAXIMIZE_TOOL_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Quote\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [FOCUS_EDITOR_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n      },\n    },\n  ],\n  [HIDE_ACTIVE_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"Escape\",\n        modifiers: [\"Shift\"],\n      },\n    },\n  ],\n  [HIDE_ALL_WINDOWS_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n        modifiers: [\"Shift\", \"Meta\"],\n      },\n    },\n  ],\n  [JUMP_TO_LAST_WINDOW_ACTION_ID]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F12\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowUp\",\n      },\n    },\n  ],\n  [CommonActionId.SHRINK_SELECTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyW\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.EXPAND_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Equal\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadAdd\",\n      },\n    },\n  ],\n  [CommonActionId.COLLAPSE_ALL]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"Minus\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"NumpadSubtract\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_ACTION]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyA\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_INTENTION_ACTIONS]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"Enter\",\n      },\n    },\n  ],\n  [CommonActionId.GO_TO_FILE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\"],\n        code: \"KeyO\",\n      },\n    },\n  ],\n  [CommonActionId.EDIT_SOURCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"ArrowDown\",\n      },\n    },\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        code: \"F4\",\n      },\n    },\n  ],\n  [CommonActionId.SHOW_SEARCH_HISTORY]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Alt\"],\n        code: \"ArrowDown\",\n      },\n    },\n  ],\n  [CommonActionId.COPY_REFERENCE]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\", \"Shift\", \"Alt\"],\n        code: \"KeyC\",\n      },\n    },\n  ],\n  [CommonActionId.REFRESH]: [\n    {\n      type: \"keyboard\",\n      firstKeyStroke: {\n        modifiers: [\"Meta\"],\n        code: \"KeyR\",\n      },\n    },\n  ],\n};\n","import { fromPairs } from \"ramda\";\nimport { isMac } from \"@react-aria/utils\";\nimport {\n  isKeyboardShortcut,\n  KeyStroke,\n  KeyStrokeModifier,\n  Shortcut,\n} from \"./Shortcut\";\nimport {\n  KeyboardEventKey,\n  LinuxDeadKeys,\n  NumericKeypadKeys,\n  UpperAlpha,\n} from \"./KeyboardEventKey\";\n\nconst defaultKeyToStr: {\n  [key in Exclude<\n    KeyStrokeModifier | KeyboardEventKey,\n    LinuxDeadKeys | UpperAlpha | NumericKeypadKeys\n  >]: string;\n} = {\n  Control: \"Ctrl\",\n  \" \": \"Space\",\n  ArrowDown: \"↓\",\n  ArrowUp: \"↑\",\n  ArrowLeft: \"←\",\n  ArrowRight: \"→\",\n  Enter: \"⏎\",\n  Quote: \"'\",\n  Minus: \"-\",\n  Equal: \"+\",\n  Backspace: \"⌫\",\n  // lowercase to uppercase map\n  ...fromPairs(\n    Array.from(Array(26))\n      .map((e, i) => i + \"a\".charCodeAt(0))\n      .map((x) => String.fromCharCode(x))\n      .map((a) => [a, a.toUpperCase()])\n  ),\n};\nconst KeystrokeToString: {\n  separator: string;\n  codeToStr: Record<KeyStrokeModifier | KeyboardEventKey, string>;\n} = isMac()\n  ? {\n      separator: \"\",\n      codeToStr: {\n        ...defaultKeyToStr,\n        Alt: \"⌥\",\n        Shift: \"⇧\",\n        Meta: \"⌘\",\n        Control: \"^\",\n        Escape: \"⎋\",\n      },\n    }\n  : {\n      separator: \"+\",\n      codeToStr: defaultKeyToStr,\n    };\n\nconst modifiersOrder: KeyStrokeModifier[] = [\"Control\", \"Alt\", \"Shift\", \"Meta\"];\nexport const keystrokeToString = (keystroke: KeyStroke) => {\n  return [\n    ...(keystroke.modifiers || []).sort(\n      (a, b) => modifiersOrder.indexOf(a) - modifiersOrder.indexOf(b)\n    ),\n    keystroke.code,\n  ]\n    .map((code) => KeystrokeToString.codeToStr[code] || code)\n    .map((code) => code.replace(/^(Key|Digit|Numpad)(.)$/, \"$2\"))\n    .join(KeystrokeToString.separator);\n};\nexport const shortcutToString = (shortcut: Shortcut) => {\n  if (isKeyboardShortcut(shortcut)) {\n    return [shortcut.firstKeyStroke, shortcut.secondKeyStroke]\n      .filter((i): i is KeyStroke => i != undefined)\n      .map(keystrokeToString)\n      .join(\", \");\n  }\n  throw new Error(\"Not implemented yet\");\n};\n","import { useAction } from \"./ActionsProvider\";\nimport { isResolvedActionGroup, ResolvedActionGroup } from \"./ActionGroup\";\n\nexport const useActionGroup = (\n  actionGroupId: string\n): ResolvedActionGroup | null => {\n  const action = useAction(actionGroupId);\n  if (action) {\n    if (isResolvedActionGroup(action)) {\n      return action;\n    }\n    throw new Error(`Action with id ${actionGroupId} is not a group`);\n  }\n  return null;\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nconst CORNER_RADIUS = 12; // it used to be 8. After introduction of Notifications tool window, it's 12\n\nconst bgColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\n    \"Notification.background\",\n    !theme.dark ? \"rgb(242,242,242)\" : \"#4E5052\"\n  );\n\nexport const StyledHeaderActions = styled.div`\n  position: absolute;\n  right: 0;\n  top: 0;\n  background: inherit;\n  padding: 0.375rem 0.5rem 0;\n  &::before {\n    content: \"\";\n    position: absolute;\n    right: 100%;\n    background: linear-gradient(90deg, transparent, ${bgColor});\n    width: 20px;\n    height: 100%;\n    z-index: 1;\n    top: 0;\n  }\n`;\n\nexport const StyledBalloonContainer = styled.div`\n  line-height: 1.2;\n  box-sizing: border-box;\n  overflow: hidden; // header actions overflows a little at the top right rounded corner\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.2); // shadow doesn't seem to be themed\n  padding: 0.5rem 0;\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"Notification.borderColor\",\n        !theme.dark ? \"#B2B2B2CD\" : \"#565A5CCD\"\n      )};\n  border-radius: ${({ theme }) =>\n    `${\n      (theme.value<number>(\n        \"Notification.arc\" as UnknownThemeProp<\"Notification.arc\">\n      ) ?? CORNER_RADIUS) / 2\n    }px`};\n  //display: inline-flex;\n  width: 23.3125rem;\n  position: relative;\n  background-color: ${bgColor};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Notification.foreground\",\n      !theme.dark ? \"#000\" : \"rgb(191,191,191)\"\n    )};\n\n  ${StyledHeaderActions} {\n    display: none;\n  }\n  &:hover ${StyledHeaderActions} {\n    display: initial;\n  }\n`;\n\nexport const StyledIconContainer = styled.span`\n  position: absolute;\n  left: 0.75rem;\n  top: 0.5rem;\n`;\n\nexport const StyledBalloonHeader = styled.div`\n  line-height: 1rem;\n  font-weight: bold;\n  margin: 0 2.125rem 0.25rem;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis; // this is not the case in original impl, but it's a clear improvement\n`;\n\nexport const StyledBalloonBody = styled.div<{\n  lineClamp: number | false;\n}>`\n  margin: 0 2.125rem 0 2.125rem;\n  line-height: 1rem;\n  display: inline;\n  -webkit-line-clamp: ${({ lineClamp }) => lineClamp};\n  word-break: ${({ lineClamp }) => lineClamp === 1 && \"break-all\"};\n  text-overflow: ellipsis;\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  word-wrap: break-word;\n`;\n\nexport const StyledBalloonFooter = styled.div`\n  margin: 0.375rem 1.875rem 0 2.125rem;\n  display: inline-flex;\n  white-space: nowrap;\n  overflow: hidden;\n  gap: 1rem;\n\n  // could be -webkit-fill-available too, if it has good support. Probably it doesn't tho\n  max-width: calc(100% - 3.5rem);\n`;\n\nexport const StyledToggleIconContainer = styled.span`\n  display: inline-flex;\n  position: absolute;\n  right: 0.5rem;\n  bottom: 0;\n  background-color: ${bgColor};\n  padding-left: 0.5rem;\n`;\n\nexport const StyledToggleExpandButtonContainer = styled.span`\n  display: block;\n  position: relative; // for icon absolute positioning\n  cursor: pointer;\n  flex: 1;\n`;\n\nexport const StyledToggleExpandButtonFooterContainer = styled(\n  StyledToggleExpandButtonContainer\n)`\n  min-height: 1.5rem;\n  margin: -0.5rem 0;\n  position: relative;\n  z-index: 1;\n  ${StyledToggleIconContainer} {\n    bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter} {\n    margin-top: 0.875rem;\n    margin-bottom: 0.5rem;\n  }\n  ${StyledBalloonFooter}:hover + * .icon[data-hover] {\n    display: none;\n  }\n  ${StyledBalloonFooter}:hover + * .icon {\n    display: unset;\n  }\n`;\n","import React, { useContext, useEffect, useRef, useState } from \"react\";\nimport { IconProps } from \"@intellij-platform/core/Icon/IconProps\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { ControlledStateProps } from \"@intellij-platform/core/type-utils\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  StyledBalloonBody,\n  StyledBalloonContainer,\n  StyledBalloonFooter,\n  StyledBalloonHeader,\n  StyledHeaderActions,\n  StyledIconContainer,\n  StyledToggleExpandButtonContainer,\n  StyledToggleExpandButtonFooterContainer,\n  StyledToggleIconContainer,\n} from \"@intellij-platform/core/Balloon/Balloon.styled\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { Link } from \"@intellij-platform/core/Link\";\n\nexport type BalloonProps = ControlledStateProps<{ expanded: boolean }> &\n  DOMProps & {\n    /**\n     * Icon rendered in the top left\n     */\n    icon?: \"Info\" | \"Warning\" | \"Error\" | React.ReactElement<IconProps>;\n    /**\n     * Rendered beside close button. Can be used for rendering a \"notification settings\" icon button.\n     */\n    headerActions?: React.ReactNode;\n    /**\n     * Called when the close button is clicked. If not passed, close button will not be rendered.\n     */\n    onClose?: () => void;\n    /**\n     * Actions rendered in the footer.\n     */\n    actions?: React.ReactNode;\n  } & (\n    | {\n        title?: React.ReactNode;\n        body: React.ReactNode;\n      }\n    | {\n        title: React.ReactNode;\n        body?: React.ReactNode;\n      }\n  );\n\ntype BalloonContextObj = {\n  onClose?: () => void;\n};\nconst BalloonContext = React.createContext<BalloonContextObj | null>(null);\n\n/**\n * A tiny wrapper around {@link Link} component, to be used for actions in Balloon.\n * It closes the balloon when pressed.\n */\nexport const BalloonActionLink: typeof Link = React.forwardRef(\n  ({ onPress, ...props }, ref) => {\n    const context = useContext(BalloonContext);\n    if (context === null) {\n      throw new Error(\n        \"BalloonActionLink should only be rendered inside Balloon notifications\"\n      );\n    }\n    return (\n      <Link\n        ref={ref}\n        {...props}\n        onPress={(...args) => {\n          context?.onClose?.();\n          return onPress?.(...args);\n        }}\n      />\n    );\n  }\n);\n/**\n * [Balloon notification](https://jetbrains.github.io/ui/controls/balloon/) UI.\n *\n * Notes and TODO:\n * - Add support for \"error\" variant: https://github.com/JetBrains/intellij-community/blob/48c024fcd38bd8d1eccdada05489a8952a494270/platform/platform-impl/src/com/intellij/diagnostic/IdeMessagePanel.java#L215\n * - Add support for timeout. Although if the auto close behaviour is only timeout-based, maybe there is not much value in adding a prop for it and calling onClose on timeout.\n * - BalloonActions component to be used for rendering a bunch of links in the actions. It should encapsulate the\n *   behaviour of moving actions into a menu when there is not enough room.\n */\nexport const Balloon = ({\n  icon: iconProp = \"Info\",\n  expanded: expandedProp,\n  defaultExpanded = false,\n  onExpandedChange,\n  title,\n  headerActions,\n  onClose,\n  body,\n  actions,\n  ...containerProps\n}: BalloonProps): React.ReactElement => {\n  const bodyRef = useRef<HTMLDivElement>(null);\n  const [expandable, setExpandable] = useState(false);\n  const [expanded, setExpanded] = useControlledState(\n    expandedProp!,\n    defaultExpanded,\n    onExpandedChange!\n  );\n  const maxLinesWhenNotExpanded = 1 + (title ? 0 : 1) + (actions ? 0 : 1);\n\n  useEffect(() => {\n    const bodyElem = bodyRef.current;\n    if (bodyElem) {\n      setExpandable(\n        expanded\n          ? getNumLines(bodyElem) > maxLinesWhenNotExpanded\n          : bodyElem.scrollHeight > bodyElem.clientHeight\n      );\n    } else {\n      setExpandable(false);\n    }\n  }, [expanded]);\n  const validIconTypes = [\"Error\", \"Warning\", \"Info\"] as const;\n  const icon =\n    typeof iconProp === \"string\" ? (\n      <PlatformIcon\n        icon={`general/notification${validIconTypes.find(\n          (iconType, index, arr) =>\n            iconType === iconProp || index === arr.length - 1\n        )}.svg`}\n      />\n    ) : (\n      iconProp\n    );\n  // @ts-expect-error support for callback updater is removed from useControlledState. https://github.com/adobe/react-spectrum/issues/2320\n  const toggle = () => setExpanded((expanded) => !expanded);\n\n  const effectiveExpanded = expanded && Boolean(body);\n\n  return (\n    <BalloonContext.Provider value={{ onClose }}>\n      <StyledBalloonContainer data-testid=\"balloon\" {...containerProps}>\n        <StyledIconContainer>{icon}</StyledIconContainer>\n        {title && <StyledBalloonHeader>{title}</StyledBalloonHeader>}\n        <StyledHeaderActions>\n          {headerActions}\n          {onClose && (\n            <AutoHoverPlatformIcon\n              icon=\"ide/notification/close.svg\"\n              onClick={onClose}\n              role=\"button\"\n              data-testid=\"close-btn\"\n              style={{ marginLeft: \"0.75rem\" }}\n            />\n          )}\n        </StyledHeaderActions>\n        {body && (\n          <ToggleWrapper\n            expanded={effectiveExpanded}\n            enabled={expandable && !effectiveExpanded}\n            onToggle={toggle}\n          >\n            <StyledBalloonBody\n              lineClamp={!effectiveExpanded && maxLinesWhenNotExpanded}\n              ref={bodyRef}\n            >\n              {body}\n            </StyledBalloonBody>\n          </ToggleWrapper>\n        )}\n        <ToggleWrapper\n          expanded={effectiveExpanded}\n          enabled={expandable && effectiveExpanded}\n          onToggle={toggle}\n          Component={StyledToggleExpandButtonFooterContainer}\n        >\n          {actions && (\n            <StyledBalloonFooter onClick={(e) => e.stopPropagation()}>\n              {actions}\n            </StyledBalloonFooter>\n          )}\n        </ToggleWrapper>\n      </StyledBalloonContainer>\n    </BalloonContext.Provider>\n  );\n};\n\n/**\n * If enabled wraps its children in a clickable area (with the expand/collapse arrow),f for toggling expanded state.\n */\nconst ToggleWrapper: React.FC<{\n  enabled: boolean;\n  expanded: boolean;\n  Component?: typeof StyledToggleExpandButtonContainer;\n  onToggle: () => void;\n}> = ({\n  children,\n  onToggle,\n  expanded,\n  enabled,\n  Component = StyledToggleExpandButtonContainer,\n}) => {\n  const iconName = expanded ? \"collapse\" : \"expand\";\n  const toggleIcon = (\n    <StyledToggleIconContainer>\n      <AutoHoverPlatformIcon\n        hoverContainerSelector={`${Component}`}\n        icon={`ide/notification/${iconName}.svg`}\n        className=\"icon\"\n      />\n    </StyledToggleIconContainer>\n  );\n\n  return enabled ? (\n    <Component\n      onClick={onToggle}\n      role=\"button\"\n      data-testid={`${expanded ? \"collapse\" : \"expand\"}-btn`}\n    >\n      {children}\n      {toggleIcon}\n    </Component>\n  ) : (\n    <>{children}</>\n  );\n};\n\n/**\n * Based on the computed line-height and clientHeight of the element, returns the number of lines of the content.\n */\nfunction getNumLines(bodyElem: Element) {\n  return (\n    bodyElem.clientHeight / parseFloat(getComputedStyle(bodyElem).lineHeight)\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Balloon, BalloonProps } from \"./Balloon\";\nimport { StyledBalloonsStack } from \"./StyledBalloonsStack\";\n\ntype ShowProps = Pick<\n  BalloonProps,\n  \"title\" | \"icon\" | \"body\" | \"actions\" | \"headerActions\"\n>;\n\nexport interface BalloonManagerAPI {\n  /**\n   * Shows a Balloon notification on the bottom left of the screen.\n   * @param props: Props to pass to the Balloon component\n   * @param [autoHideTimeout=10_000] timeout in ms for hiding the balloon notification.\n   * @returns hide function, in case the notification can expire for some reason.\n   */\n  show(props: ShowProps, autoHideTimeout?: number): () => void;\n  showSticky(props: ShowProps): () => void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\"You must render a BalloonManager...\");\n};\n\nconst BalloonsContext = React.createContext<BalloonManagerAPI>({\n  show: NotImplementedFn,\n  showSticky: NotImplementedFn,\n});\n\nexport const useBalloonManager = (): BalloonManagerAPI =>\n  useContext(BalloonsContext);\n\ntype BalloonElement = ReactElement<BalloonProps, typeof Balloon>;\n\nexport interface BalloonManagerProps {\n  disablePortal?: boolean;\n  BalloonsContainer?: React.ElementType;\n}\n\n/**\n * Enables imperative API (via {@link useBalloonManager}) for showing Balloon notifications on the bottom right of the screen.\n * It renders notifications in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n * @param disablePortal: if `true`, the container for notifications will not be rendered in a portal\n * @param BalloonsContainer: container component for the notifications. It's {@link StyledBalloonsStack} by default.\n *\n * TODO: fade in/out transition. Notes:\n *  - Doesn't seem fade-in is needed. Tho it's much easier than fade-out, as it can be achieved with a css animation.\n *  - Fade out should happen only when the balloon is being hidden by timeout.\n * TODO: Support for maximum number of notifications and showing \"x more notification(s)\" button if the limit exceeds\n */\n\nexport const BalloonManager: React.FC<BalloonManagerProps> = ({\n  children,\n  disablePortal,\n  BalloonsContainer = StyledBalloonsStack,\n}) => {\n  const [balloons, setBalloons] = useState<Array<BalloonElement>>([]);\n  const timeoutIdsRef = useRef<number[]>([]);\n  const lastIdRef = useRef<number>(0);\n\n  const api = useMemo<BalloonManagerAPI>(() => {\n    const show: BalloonManagerAPI[\"show\"] = (props, timeout = 10_000) => {\n      lastIdRef.current++;\n      const onClose = () => {\n        setBalloons((balloons) =>\n          balloons.filter((aBalloon) => aBalloon !== balloon)\n        );\n      };\n      const balloon = (\n        <Balloon\n          key={lastIdRef.current}\n          {...props}\n          title={props.title} // TS acts unreasonable without this\n          onClose={onClose}\n        />\n      );\n      setBalloons((balloons) => {\n        if (timeout > 0) {\n          const timeoutId = window.setTimeout(() => {\n            onClose();\n            timeoutIdsRef.current = timeoutIdsRef.current.filter(\n              (aTimeoutId) => aTimeoutId !== timeoutId\n            );\n          }, timeout);\n          timeoutIdsRef.current = [...timeoutIdsRef.current, timeoutId];\n        }\n        return balloons.concat(balloon);\n      });\n      return onClose;\n    };\n    return {\n      show,\n      showSticky: (props) => show(props, 0),\n    };\n  }, []);\n\n  // clear timeouts when unmounted\n  useEffect(() => {\n    return () => {\n      timeoutIdsRef.current.forEach((id) => {\n        window.clearTimeout(id);\n      });\n    };\n  }, []);\n\n  const notificationsStack = (\n    <BalloonsContainer\n      style={{ position: disablePortal ? \"absolute\" : undefined }}\n    >\n      {balloons}\n    </BalloonsContainer>\n  );\n\n  return (\n    <BalloonsContext.Provider value={api}>\n      {children}\n      {disablePortal\n        ? notificationsStack\n        : ReactDOM.createPortal(notificationsStack, document.body)}\n    </BalloonsContext.Provider>\n  );\n};\n","import styled from \"styled-components\";\nimport { StyledBalloonContainer } from \"@intellij-platform/core/Balloon/Balloon.styled\";\n\n/**\n * Container component for stacking a number of Balloons in an overlay placed on the bottom right of where it's rendered.\n */\nexport const StyledBalloonsStack = styled.div`\n  position: fixed;\n  z-index: 1;\n  bottom: 42px;\n  right: 26px;\n  ${StyledBalloonContainer} {\n    margin-bottom: 12px;\n  }\n`;\n","import React, { ForwardedRef, JSXElementConstructor } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { AriaBaseButtonProps, ButtonProps } from \"@react-types/button\";\n\nexport interface BareButtonProps extends AriaBaseButtonProps, ButtonProps {\n  children: React.ReactElement;\n\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n}\n\n/**\n * A component to make arbitrary content an accessible button which is also able to be a tooltip trigger.\n */\nexport const BareButton: React.FC<BareButtonProps> = React.forwardRef(\n  function BareButton(props: BareButtonProps, ref: ForwardedRef<HTMLElement>) {\n    const elementType = React.isValidElement(props.children)\n      ? (props.children.type as JSXElementConstructor<unknown>)\n      : undefined;\n    const { buttonProps } = useButton(\n      {\n        elementType,\n        ...props,\n      },\n      useObjectRef(ref)\n    );\n    const domProps = filterDOMProps(props);\n    const { autoFocus } = props;\n\n    return React.cloneElement(\n      props.children,\n      mergeProps(domProps, buttonProps, { autoFocus, ref })\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport const StyledButton = styled.button<{ disabled?: boolean }>`\n  box-sizing: border-box;\n  min-width: 4.5rem; // https://jetbrains.github.io/ui/controls/button/#28\n  padding: 0 0.875rem; // https://jetbrains.github.io/ui/controls/button/#28\n  height: 1.5rem;\n  font-family: inherit;\n  background-color: ${({ theme, disabled }) =>\n    disabled ? \"transparent\" : theme.color(\"Button.startBackground\")};\n  color: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"Button.disabledText\")\n      : theme.color(\n          \"Button.foreground\" as UnknownThemeProp<\"Button.foreground\">\n        )};\n  border: 1px solid\n    ${({ theme, disabled }) =>\n      disabled\n        ? theme.color(\"Button.disabledBorderColor\")\n        : theme.color(\"Button.startBorderColor\")};\n  border-radius: ${({ theme }) =>\n    (theme.value<number>(\"Button.arc\") ?? 6) / 2}px;\n  box-shadow: ${({ theme }) =>\n    theme.value(\"Button.paintShadow\")\n      ? `0 0 0 ${theme.value(\"Button.shadowWidth\") ?? 2}px ${\n          theme.color(\"Button.shadowColor\") ?? // Button.darcula.shadowColor default is skipped.\n          (theme.dark ? \"#36363680\" : \"#a6a6a633\")\n        }`\n      : \"\"};\n  white-space: nowrap; // https://jetbrains.github.io/ui/controls/button/#29\n\n  flex-shrink: 0; // button should not shrink when rendered in a flex container\n\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.focusedBorderColor\", \"#87afda\")};\n    outline: none;\n    box-shadow: ${({ theme }) =>\n      `0 0 0 2px ${\n        // NOTE: by not using the second argument for default value, we prioritize *.focusColor over the rest.\n        theme.color(\"Component.focusColor\") ??\n        theme.color(\n          \"Focus.borderColor\" as UnknownThemeProp<\"Focus.borderColor\">,\n          \"#8ab2eb\"\n        )\n      }`};\n  }\n`;\nexport const StyledDefaultButton = styled(StyledButton)`\n  background-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBackground\", \"#384f6b\")};\n  color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.foreground\")};\n  border-color: ${({ theme, disabled }) =>\n    !disabled && theme.color(\"Button.default.startBorderColor\", \"#BFBFBF\")};\n  &:focus,\n  &.focus /* for testing purposes*/ {\n    border-color: ${({ theme }) =>\n      theme.color(\"Button.default.focusedBorderColor\", \"#87afda\")};\n  }\n`;\n\nexport const StyledIconButton = styled(StyledButton)`\n  border-radius: 1000px;\n  padding: 0;\n  line-height: 0;\n  min-width: 0;\n  height: 1.5rem;\n  width: 1.5rem;\n`;\n","import React, {\n  ButtonHTMLAttributes,\n  CSSProperties,\n  ForwardedRef,\n} from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { AriaButtonProps } from \"@react-types/button\";\nimport { filterDOMProps, mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  StyledButton,\n  StyledDefaultButton,\n  StyledIconButton,\n} from \"@intellij-platform/core/Button/StyledButton\";\n\ntype ButtonVariant = \"default\" | \"icon\";\nexport interface ButtonProps extends AriaButtonProps {\n  variant?: ButtonVariant; // can allow for custom (styled) component too if needed.\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  // Should this be become true by default? Maybe an context-based API to set defaults like this for a section?\n  preventFocusOnPress?: boolean;\n\n  form?: ButtonHTMLAttributes<HTMLButtonElement>[\"form\"];\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst variants: { [key in ButtonVariant]: typeof StyledButton } = {\n  default: StyledDefaultButton,\n  icon: StyledIconButton,\n};\n\n/**\n * https://jetbrains.github.io/ui/controls/button/\n *\n * TODO:\n * - Support for \"default\" button behaviour. it's kind of similar to a <button type=\"submit\" /> in html, but textarea\n * behaviour is different from what is explained here: https://jetbrains.github.io/ui/controls/button/#16\n * Cmd+Enter should always trigger onPress. Plus, maybe it should work independent of \"form\" being used? or maybe it's\n * not a big deal to expect an ancestor \"form\" element, when variant is \"default\"?\n * - Support for mnemonic\n * - \"Default\" style differences in Windows.\n * - Gradient colors (low hanging fruit, but negligible added value).\n *\n * Known issues:\n * - In the original impl, default button looks the same as normal button, when focus is not within the same area that\n * the button is. For example in the commit tool window, \"Commit\" button which is default, is not blue, unless the\n * \"Commit\" tool window is focused. This particular case can easily be achieved by conditionally setting variant to,\n * \"default\" based on tool window focus state, which is accessible via useDefaultToolWindowContext(), if\n * DefaultToolWindow is used. But we need to see if the same requirement exists in various places.\n * NOTE: this item is related to the first item in the to-do list above. There can be a container kind of component,\n * which enables \"default\" behaviour and look. Maybe it can be FocusScope or at least related to FocusScope.\n * - In the original impl, there is no visual clue for pressed state, which is poor accessibility. For now, the same\n * behaviour is followed here too. But we may reconsider deviating from the original impl for an improvement here.\n *\n */\nexport const Button: React.FC<ButtonProps> = React.forwardRef(function Button(\n  { variant, style, className, ...props }: ButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const { buttonProps } = useButton(props, ref);\n  const domProps = filterDOMProps(props);\n  const { autoFocus, form } = props;\n\n  const Component = (variant && variants[variant]) || StyledButton;\n  return (\n    <Component\n      {...mergeProps(domProps, buttonProps, { autoFocus, form })}\n      style={style}\n      className={className}\n      ref={ref}\n    >\n      {props.children}\n    </Component>\n  );\n});\n","import React, { HTMLProps, ReactNode } from \"react\";\nimport { useToggleState } from \"@react-stately/toggle\";\nimport { useCheckbox } from \"@react-aria/checkbox\";\nimport {\n  AriaLabelingProps,\n  FocusableDOMProps,\n  FocusableProps,\n  InputBase,\n} from \"@react-types/shared\";\nimport { useFocusRing } from \"@react-aria/focus\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { CheckboxIcon } from \"./CheckboxIcon\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface CheckboxProps\n  extends InputBase,\n    FocusableDOMProps,\n    AriaLabelingProps,\n    FocusableProps {\n  /**\n   * If set to true, the checkbox won't be focusable.\n   * Common use cases:\n   * - When checkbox is rendered in a focusable container, like a list item where the focus should not be taken away\n   *   from that container.\n   * - \"Amend\" checkbox in \"Commit\" tool window. The focus is kept in the commit message or changes tree, perhaps, for\n   *   a questionably better UX.\n   * Note: Passing {@link excludeFromTabOrder} will still let the checkbox be focusable, while `preventFocus`, doesn't\n   * let the component get focused at all.\n   * TODO(potential): it might be nicer to have a `preventFocusOnPress` prop consistent with IconButton, instead.\n   *  In that case preventing focus completely would be achieved with `preventFocusOnPres` and `excludeFromTabOrder`.\n   */\n  preventFocus?: boolean;\n\n  /**\n   * By default, focus ring is always shown when the checkbox is focused, independent of the interaction method.\n   * if set to false, the focus will be only visible if the interaction is done via keyboard or screen readers.\n   * Similar to how [:focus-visible](https://developer.mozilla.org/en-US/docs/Web/CSS/:focus-visible) works.\n   */\n  disableFocusAlwaysVisible?: boolean;\n\n  /**\n   * Indeterminism is presentational only.\n   * The indeterminate visual representation remains regardless of user interaction.\n   */\n  isIndeterminate?: boolean;\n\n  /**\n   * The label for the element.\n   */\n  children?: ReactNode;\n\n  /**\n   * Whether the element should be selected (uncontrolled).\n   */\n  defaultSelected?: boolean;\n  /**\n   * Whether the element should be selected (controlled).\n   */\n  isSelected?: boolean;\n  /**\n   * Handler that is called when the element's selection state changes.\n   */\n  onChange?: (isSelected: boolean) => void;\n  /**\n   * The value of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefvalue).\n   */\n  value?: string;\n  /**\n   * The name of the input element, used when submitting an HTML form. See [MDN](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefname).\n   */\n  name?: string;\n\n  className?: string; // to support styled-components\n}\n\nconst StyledWrapperLabel = styled.label`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst StyledCheckboxLabelText = styled.span<{\n  isDisabled: boolean | undefined;\n}>`\n  margin-left: 0.25rem;\n  color: ${({ theme, isDisabled }) =>\n    isDisabled\n      ? theme.color(\n          \"CheckBox.disabledText\" as UnknownThemeProp<\"CheckBox.disabledText\">,\n          \"#808080\" /* this default value was a bit tricky. Still not clear from where it comes in darcular \n          theme when there is no clue of Checkbox.disabledText or *.disabledText. Note that using \n          CheckBox.disabledForeground is not a good option, because it's something other than #808080 for darcula */\n        )\n      : theme.color(\"*.foreground\")};\n`;\n\nconst StyledInput = styled.input`\n  opacity: 0.0001;\n  position: absolute;\n  z-index: 1;\n  inset: 0;\n  cursor: default;\n  &:disabled {\n    cursor: default;\n  }\n`;\n\n/**\n * Checkbox component to be used with or without a label.\n *\n * While the checkbox without the label + preventFocus makes it usable in tree/list, it might be more optimized to\n * use a more lightweight component like ListItemCheckbox, which uses CheckboxIcon with a simple press handle. Without\n * any input, state, etc.\n */\nexport const Checkbox = ({\n  preventFocus,\n  className,\n  disableFocusAlwaysVisible,\n  ...props\n}: CheckboxProps) => {\n  const state = useToggleState(props);\n  const ref = React.useRef<HTMLInputElement>(null);\n  const { inputProps } = useCheckbox(props, state, ref);\n\n  const { isFocusVisible, isFocused, focusProps } = useFocusRing({\n    autoFocus: props.autoFocus,\n  });\n\n  const focusDisabledProps: Pick<\n    HTMLProps<HTMLInputElement>,\n    \"onFocusCapture\" | \"tabIndex\"\n  > = preventFocus\n    ? {\n        onFocusCapture: (event) => {\n          event.stopPropagation();\n          event.preventDefault();\n          if (event.relatedTarget instanceof HTMLElement) {\n            event.relatedTarget.focus();\n          } else {\n            event.target.blur();\n          }\n        },\n        tabIndex: -1,\n      }\n    : {};\n\n  return (\n    <StyledWrapperLabel className={className}>\n      <StyledInput\n        {...mergeProps(inputProps, focusProps, focusDisabledProps)}\n        ref={ref}\n      />\n      <CheckboxIcon\n        isIndeterminate={props.isIndeterminate}\n        isFocused={disableFocusAlwaysVisible ? isFocusVisible : isFocused}\n        isSelected={props.isIndeterminate || state.isSelected}\n        isDisabled={props.isDisabled}\n        aria-hidden=\"true\"\n        style={{\n          pointerEvents: \"none\",\n        }}\n      />\n      {props.children && (\n        <StyledCheckboxLabelText isDisabled={props.isDisabled}>\n          {props.children}\n        </StyledCheckboxLabelText>\n      )}\n    </StyledWrapperLabel>\n  );\n};\n","import React, { ComponentProps } from \"react\";\nimport { LafIcon } from \"@intellij-platform/core/Icon\";\n\n/**\n * Renders checkbox UI in different states (focused, selected, indeterminate, etc.), without having anything to do\n * with the interactions\n */\nexport const CheckboxIcon = ({\n  isDisabled,\n  isFocused,\n  isIndeterminate,\n  isSelected,\n  ...otherProps\n}: Omit<ComponentProps<typeof LafIcon>, \"size\" | \"icon\"> & {\n  isIndeterminate: boolean | undefined;\n  isFocused: boolean;\n  isDisabled: boolean | undefined;\n  isSelected: boolean;\n}) => {\n  return (\n    <LafIcon\n      {...otherProps}\n      size={20}\n      icon={{\n        name: isIndeterminate ? \"checkBoxIndeterminate\" : \"checkBox\",\n        modifiers: {\n          Disabled: isDisabled,\n          Selected: isSelected || isIndeterminate,\n          Focused: isFocused,\n        },\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { CollectionSpeedSearchMatches } from \"./useCollectionSpeedSearchResult\";\n\nexport type CollectionSpeedSearchContextValue = {\n  matches: CollectionSpeedSearchMatches;\n  collection: Collection<Node<unknown>>;\n};\n\nexport const CollectionSpeedSearchContext =\n  React.createContext<CollectionSpeedSearchContextValue | null>(null);\n","import React, { Key, useContext } from \"react\";\nimport { TextWithHighlights } from \"@intellij-platform/core/TextWithHighlights/TextWithHighlights\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch/CollectionSpeedSearchContext\";\n\ntype CollectionSpeedSearchItemContextValue = {\n  text: string;\n  highlightedRanges: null | TextRange[];\n};\n\nconst CollectionSpeedSearchItemContext =\n  React.createContext<null | CollectionSpeedSearchItemContextValue>(null);\n\nexport const SpeedSearchItemHighlightsProvider: React.FC<{ itemKey: Key }> = ({\n  children,\n  itemKey,\n}) => {\n  const context = useContext(CollectionSpeedSearchContext);\n  if (!context) {\n    throw new Error(\n      `SpeedSearchItemProvider is only meant to be rendered by collection components with speed search. \n      CollectionSpeedSearchContext is expected to be rendered as a wrapper around all items.`\n    );\n  }\n  const item = context.collection.getItem(itemKey);\n  const text = item?.textValue;\n  if (!text && item?.props.textValue === undefined) {\n    console.warn(\n      \"no textValue specified on Item. When using SpeedSearch, you need to specify textValue for item, which will be the basis for search\"\n    );\n  }\n  return (\n    <CollectionSpeedSearchItemContext.Provider\n      value={{\n        highlightedRanges: context.matches.get(itemKey) || null,\n        text: text,\n      }}\n    >\n      {children}\n    </CollectionSpeedSearchItemContext.Provider>\n  );\n};\n\n/**\n * Used inside Item content, to render the textValue of the Item, potentially with highlighted ranges if it's a match\n * in current search.\n */\nexport const HighlightedTextValue = function ({\n  Component = \"span\",\n}: {\n  /**\n   * When rendering in a flex parent (which is the case for tree or list), rendering a container is necessary to have\n   * the right spacing around highlights, when the highlighter span is immediately followed or proceeded by a white\n   * space. By default, a \"span\" is rendered.\n   */\n  Component?: React.ElementType;\n}) {\n  const speedSearchContext = React.useContext(CollectionSpeedSearchItemContext);\n  if (!speedSearchContext) {\n    throw new Error(\n      \"HighlightedTextValue should be rendered only in items of a speed search enabled collection component\"\n    );\n  }\n  const { highlightedRanges, text } = speedSearchContext;\n  return (\n    <Component>\n      {highlightedRanges ? (\n        <TextWithHighlights highlights={highlightedRanges}>\n          {text}\n        </TextWithHighlights>\n      ) : (\n        text\n      )}\n    </Component>\n  );\n};\n","import { Key, useEffect, useMemo } from \"react\";\nimport { minusculeMatch } from \"../minusculeMatch\";\nimport { SpeedSearchState } from \"../SpeedSearch/useSpeedSearch\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { createSpeedSearchSelectionManager } from \"./createSpeedSearchSelectionManager\";\nimport { TextRange } from \"@intellij-platform/core/TextRange\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nexport type CollectionSpeedSearchMatches = Map<Key, TextRange[]>;\n\nexport function useCollectionSpeedSearchResult<T>({\n  collection,\n  selectionManager: inputSelectionManager,\n  speedSearch,\n  focusBestMatch = false,\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  speedSearch: SpeedSearchState;\n  /**\n   * If true, focusing the best match (the longest \"start-with\" match) will be preferred.\n   * By default, the focus is moved to the first match that comes after the currently focused item, if currently\n   * focused item itself is not a match.\n   * A typical use case would be collections that filter out non-match items.\n   * @default false\n   */\n  focusBestMatch?: boolean;\n}) {\n  const { searchTerm, active } = speedSearch;\n\n  /**\n   * Note: when a component is implemented using react-aria's useCollection, any re-render of that component causes\n   * a new collection. That's because prop.children is normally an inline function, and therefore the collection is\n   * re-created: https://github.com/adobe/react-spectrum/blob/4a1cff846018e449487ccf54d7474bdfa4d4f57c/packages/@react-stately/collections/src/useCollection.ts#L29\n   * This means we will unnecessarily perform the search in such cases. it might be a non-issue, but if it turned out\n   * to be an issue, a sub-optimum improvement would be to use `collection.size` as a dependency instead of `collection`,\n   * assuming that searchable text in collections won't change, and assuming that the important changes (search-wise)\n   * will usually involve a size change in the collection.\n   */\n  const { matches } = useMemo(() => {\n    const matches: CollectionSpeedSearchMatches = new Map(); // maybe make it nullable makes more sense\n    if (speedSearch.active) {\n      // it's important not to iterate on items, since they can be nested.\n      [...collection.getKeys()]\n        .map((key) => collection.getItem(key))\n        .filter(({ type }) => type === \"item\")\n        .forEach((item) => {\n          const matchedRanges = minusculeMatch(item.textValue, searchTerm);\n          if (matchedRanges) {\n            matches.set(item.key, matchedRanges);\n          }\n        });\n    }\n\n    return {\n      matches,\n    };\n  }, [searchTerm, collection, active]);\n\n  const selectionManager = createSpeedSearchSelectionManager(\n    inputSelectionManager,\n    active ? matches : null\n  );\n  const latestValues = useLatest({\n    matches,\n    selectionManager,\n    collection,\n    focusBestMatch,\n  });\n\n  // On every query change, if the current selection doesn't include any of the matched items, move selection to the\n  // first matched item.\n  useEffect(() => {\n    const { selectionManager, matches, collection } = latestValues.current;\n    const matchedKeys = [...matches.keys()];\n    const noneOfTheMatchesAreSelected = !matchedKeys.some((matchedKey) =>\n      selectionManager.isSelected(matchedKey)\n    );\n    let keyToFocus: Key | undefined;\n    if (latestValues.current.focusBestMatch) {\n      keyToFocus = getLongestCommonPrefixMatch(matches);\n    }\n    if (!keyToFocus && matchedKeys.length > 0 && noneOfTheMatchesAreSelected) {\n      keyToFocus = getMatchToSelect({\n        collection,\n        selectionManager,\n        matchedKeys,\n      });\n    }\n    if (keyToFocus) {\n      selectionManager.setFocusedKey(keyToFocus);\n      selectionManager.replaceSelection(keyToFocus);\n    }\n  }, [\n    searchTerm,\n    latestValues /*it's a ref object, so no harm in listing it here to comply with rules of hooks*/,\n  ]);\n  return {\n    matches,\n    selectionManager,\n  };\n}\n\n/**\n * given a non-empty array of matched keys, returns the one that should be selected\n */\nfunction getMatchToSelect({\n  collection,\n  selectionManager,\n  matchedKeys,\n}: {\n  collection: Collection<Node<unknown>>;\n  selectionManager: SelectionManager;\n  matchedKeys: Key[];\n}): Key {\n  let passedFirstSelection = false;\n  for (const key of collection.getKeys()) {\n    if (key === selectionManager.firstSelectedKey) {\n      passedFirstSelection = true;\n    }\n    if (passedFirstSelection && matchedKeys.includes(key)) {\n      return key;\n    }\n  }\n  return matchedKeys[0];\n}\n\n/**\n * Returns the longest match from the beginning, if exists.\n */\nfunction getLongestCommonPrefixMatch(matches: CollectionSpeedSearchMatches) {\n  return [...matches.entries()]\n    .filter(([, [firstRange]]) => firstRange?.from === 0)\n    .sort(\n      ([, [rangeA]], [, [rangeB]]) =>\n        rangeB.to - rangeB.from - rangeA.to - rangeA.from\n    )?.[0]?.[0];\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { Key } from \"react\";\n\nexport function createSpeedSearchSelectionManager(\n  wrappedSelectionManager: SelectionManager,\n  matches: Map<Key, unknown /* We don't care what a match is here */> | null\n): SelectionManager {\n  return Object.create(wrappedSelectionManager, {\n    selectAll: {\n      value: () => {\n        if (matches) {\n          // @ts-expect-error: state is private and there is no API on SelectionManager for bulk\n          // setting selected keys (which would ideally check for not selecting disabled keys internally).\n          const state = wrappedSelectionManager.state;\n          state.setSelectedKeys(\n            new Set(\n              [...matches.keys()].filter((key) => !state.disabledKeys.has(key))\n            )\n          );\n        } else {\n          wrappedSelectionManager.selectAll();\n        }\n      },\n    },\n  });\n}\n","import { HTMLAttributes, RefObject, useMemo } from \"react\";\nimport { Collection, KeyboardDelegate, Node } from \"@react-types/shared\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport {\n  SpeedSearchPopupProps,\n  SpeedSearchProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport {\n  SpeedSearchState,\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"../SpeedSearch/useSpeedSearch\";\nimport { CollectionSpeedSearchContextValue } from \"./CollectionSpeedSearchContext\";\nimport {\n  CollectionSpeedSearchMatches,\n  useCollectionSpeedSearchResult,\n} from \"./useCollectionSpeedSearchResult\";\nimport { createSpeedSearchKeyboardDelegate } from \"./createSpeedSearchKeyboardDelegate\";\n\nexport interface CollectionSpeedSearch {\n  containerProps: HTMLAttributes<HTMLElement>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n}\n\n/**\n * Given a `collection`, a `selectionManager` and a `keyboardDelegate`, it returns:\n * - `speedSearch`: search term, if speed search is active or not, and the matched keys\n * - `matches`: A Set of matched keys, or `null` if speed search is not active\n * - `containerProps`: The props you need to pass to the collection container element to enable\n * speedSearch on it.\n * - `selectionManager`: a selection manager in which select all is overridden to only select\n * matched items if speed search is active.\n * - `keyboardDelegate`: a keyboard delegate in which limits navigation to matched items, when\n * speed search is active.\n *\n * Speed search options, including the ones for optionally controlling the state of the speed search\n * are also accepted in inputs.\n */\nexport function useCollectionSpeedSearch<T>({\n  collection,\n  selectionManager,\n  keepSearchActiveOnBlur,\n  keyboardDelegate,\n  focusBestMatch,\n  ref,\n  ...speedSearchStateProps\n}: {\n  collection: Collection<Node<T>>;\n  selectionManager: SelectionManager;\n  keyboardDelegate: KeyboardDelegate;\n  ref: RefObject<HTMLElement>;\n  focusBestMatch?: boolean;\n} & SpeedSearchStateProps &\n  Pick<SpeedSearchProps, \"keepSearchActiveOnBlur\">): CollectionSpeedSearch {\n  const speedSearch = useSpeedSearchState(speedSearchStateProps);\n\n  const { matches, selectionManager: speedSearchSelectionManager } =\n    useCollectionSpeedSearchResult({\n      collection,\n      selectionManager,\n      speedSearch,\n      focusBestMatch,\n    });\n  const { containerProps } = useSpeedSearch(\n    { keepSearchActiveOnBlur },\n    speedSearch,\n    ref\n  );\n  const speedSearchKeyboardDelegate = useMemo(\n    () =>\n      createSpeedSearchKeyboardDelegate(\n        keyboardDelegate,\n        speedSearch.active ? matches : null\n      ),\n    [speedSearch.active, keyboardDelegate, matches]\n  );\n\n  // Doesn't seem necessary to wrap with useMemo, but can be rethink-ed\n  const speedSearchContextValue = { matches, collection };\n\n  return {\n    containerProps,\n    selectionManager: speedSearchSelectionManager,\n    keyboardDelegate: speedSearchKeyboardDelegate,\n    speedSearch: {\n      ...speedSearch,\n      matches,\n    },\n    searchPopupProps: {\n      active: speedSearch.active,\n      match: matches.size > 0,\n      children: speedSearch.searchTerm,\n    },\n    speedSearchContextValue,\n  };\n}\n","import React, { Key } from \"react\";\nimport { KeyboardDelegate } from \"@react-types/shared\";\n\n/**\n * Creates a new KeyboardDelegate in which keyKeyBelow and getKeyAbove are overridden in a way that\n * navigation is limited to matched items.\n * Note: select all action is not handled in KeyboardDelegate.\n * Note: when virtualization is added, this probably need to change, like how it's handled\n * in `useListBoxLayout` in react spectrum.\n */\nexport function createSpeedSearchKeyboardDelegate(\n  wrappedKeyboardDelegate: KeyboardDelegate,\n  matches: Map<Key, unknown /*We don't care what a match is, here*/> | null\n): KeyboardDelegate {\n  // TODO: page up and down deactivate speed search. If we want that, we can pass the speedSearch\n  //  object too. but doesn't seem like the best way to do it, even it the same behavior is expected\n  const findFirstMatch = <T extends React.Key | undefined, K>(\n    fromKey: React.Key | undefined | null,\n    direction: \"up\" | \"down\"\n  ) => {\n    let currentKey: React.Key | undefined | null = fromKey;\n    while (currentKey != null) {\n      if (!matches || matches.has(currentKey)) {\n        return currentKey;\n      }\n      currentKey =\n        direction === \"up\"\n          ? wrappedKeyboardDelegate.getKeyAbove?.(currentKey)\n          : wrappedKeyboardDelegate.getKeyBelow?.(currentKey);\n    }\n    return currentKey ?? undefined;\n  };\n  return Object.create(wrappedKeyboardDelegate, {\n    getKeyBelow: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyBelow?.(key), \"down\"),\n    },\n    getKeyAbove: {\n      value: (key) =>\n        findFirstMatch(wrappedKeyboardDelegate.getKeyAbove?.(key), \"up\"),\n    },\n    getFirstKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const firstKey = findFirstMatch(\n          wrappedKeyboardDelegate.getFirstKey?.(key, global),\n          \"down\"\n        );\n        return firstKey == null ? matches?.values().next().value : firstKey;\n      },\n    },\n    getLastKey: {\n      value: (key?: React.Key, global?: boolean): React.Key | null => {\n        const lastKey = findFirstMatch(\n          wrappedKeyboardDelegate.getLastKey?.(key, global),\n          \"down\"\n        );\n        return lastKey == null\n          ? [...(matches?.keys() || [])].pop() ?? null\n          : lastKey;\n      },\n    },\n  } as { [key in keyof KeyboardDelegate]: { value: KeyboardDelegate[key] } });\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { PartialNode } from \"@react-stately/collections\";\n\ninterface DividerProps {}\n\n/**\n * To be used in dynamic collections, just to provide a key and make it easy to check in the render\n * function to figure out what to render (an Item or a Divider)\n */\nexport class DividerItem {\n  private static seq = 0;\n  key = \"divider_\" + DividerItem.seq++;\n  get id() {\n    return this.key;\n  }\n}\n\nfunction Divider({}: DividerProps): ReactElement {\n  // eslint-disable-line @typescript-eslint/no-unused-vars\n  return null as any;\n}\n// We don't want getCollectionNode to show up in the type definition\nlet _Divider = Divider as (props: DividerProps) => JSX.Element;\nexport { _Divider as Divider };\n\nDivider.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>\n): Generator<PartialNode<T>> {\n  let rendered = null;\n\n  yield {\n    type: \"divider\",\n    element: null as any, // to prevent check on key, which is not necessary for divider\n    props: props,\n    rendered,\n    hasChildNodes: false,\n  };\n};\n","import React, { ReactElement } from \"react\";\nimport { ItemProps } from \"@react-types/shared\";\nimport { Item as StatelyItem, PartialNode } from \"@react-stately/collections\";\n\n// noinspection JSUnusedLocalSymbols\n/**\n * Item for collection components, which by default disables caching, unless `invalidated` prop is set to false on the\n * context passed to useCollection. Control over cache invalidation policy can be enabled by using\n * `useCollectionCacheInvalidation` for creating such context object.\n */\nfunction Item<T>(props: ItemProps<T>): ReactElement {\n  return null as any as React.ReactElement;\n}\n\nexport type CacheInvalidationContext = { invalidated?: boolean };\n\n// We don't want getCollectionNode to show up in the type definition\nlet _Item = Item as <T>(props: ItemProps<T>) => JSX.Element;\nexport { _Item as Item };\n\n/**\n * @private @preapproved\n */\nItem.getCollectionNode = function* getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: CacheInvalidationContext\n): Generator<PartialNode<T>> {\n  const itemGenerator: Generator<PartialNode<T>> = (\n    StatelyItem as any\n  ).getCollectionNode(props, context);\n  const result = itemGenerator.next().value;\n  const originalShouldInvalidate = result.shouldInvalidate;\n  result.shouldInvalidate = (context: CacheInvalidationContext) =>\n    originalShouldInvalidate?.(context) || context.invalidated;\n  yield result;\n};\n","import React from \"react\";\nimport { styled } from \"../styled\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nconst GAP = \"0.1875rem\";\nconst StyledItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  padding-right: 0.25rem;\n  gap: ${GAP};\n`;\n\nconst StyledHint = styled.span<{ small?: boolean }>`\n  display: inline-flex;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(theme.commonColors.inactiveTextColor)};\n  padding-left: 0.1rem;\n  font-size: ${({ small }) => small && \"0.9em\"};\n`;\n\nconst StyledGroup = styled.span.attrs({\n  role: \"presentation\" as string,\n})`\n  display: inline-flex;\n  display: flex;\n  align-items: center;\n  gap: ${GAP};\n`;\n/**\n * Generic layout component capturing common use cases of tree or list items.\n * It handles the spacing between parts, and provides styled components for parts that need specific styling.\n * For more flexibility over the order of various pieces of content in list/tree items, there is no specific props\n * for parts. Different parts should just be rendered in children.\n *\n * @example\n * ```tsx\n * <ItemLayout>\n *   <PlatformIcon icon=\"nodes/folder\" />\n *   <HighlightedTextValue />\n *   <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n * </ItemLayout>\n * ```\n * @beta\n */\nexport const ItemLayout = (\n  props: { children: React.ReactNode } & DOMAttributes\n) => {\n  return <StyledItemLayout {...props} />;\n};\n\n/**\n * A more subtle text usually rendered next to the main text in the item.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Hint = StyledHint;\n\n/**\n * Useful when a number of items need to be grouped by a wrapper, e.g. to have a tooltip.\n * @example: project path in project root node, in project view\n * @example: \"library root\" rendered next to \"node_modules\" folders in project view.\n */\nItemLayout.Group = StyledGroup;\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Generic state of items in collections, provided via a context.\n * To be used in Menu, Tree, or anything that deals with a collection of items for which the common states like\n * **disabled** or **selected** is applicable.\n */\nexport interface ItemStateContextType {\n  node: Node<unknown>;\n  isSelected: boolean;\n  isContainerFocused: boolean;\n  isDisabled: boolean;\n}\n\nexport const ItemStateContext =\n  React.createContext<ItemStateContextType | null>(null);\n","import { RefObject, useEffect } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { scrollIntoView } from \"@react-aria/utils\";\n\ntype CollectionAutoScrollProps = {\n  isVirtualized?: boolean;\n  selectionManager: SelectionManager;\n};\n\nexport function useCollectionAutoScroll(\n  { isVirtualized, selectionManager }: CollectionAutoScrollProps,\n  ref: RefObject<HTMLElement>\n) {\n  // If not virtualized, scroll the focused element into view when the focusedKey changes.\n  // When virtualized, Virtualizer handles this internally.\n  useEffect(() => {\n    if (!isVirtualized && selectionManager.focusedKey && ref?.current) {\n      let element = ref.current.querySelector(\n        `[data-key=\"${selectionManager.focusedKey}\"]`\n      ) as HTMLElement;\n      if (element) {\n        scrollIntoView(ref.current, element);\n      }\n    }\n  }, [isVirtualized, ref, selectionManager.focusedKey]);\n}\n","import { SelectionManager } from \"@react-stately/selection\";\nimport { RefObject, useImperativeHandle } from \"react\";\n\nexport type CollectionRefProps = {\n  /**\n   * Gives imperative access to selection manager.\n   */\n  selectionManagerRef?: RefObject<SelectionManager>;\n};\n\n/**\n * Common imperative API for collections. Used in Lists at the moment. Tree components implement a different imperative\n * API that can be refactored later for more consistency.\n */\nexport function useCollectionRef(\n  { selectionManagerRef }: CollectionRefProps,\n  state: { selectionManager: SelectionManager }\n) {\n  useImperativeHandle(selectionManagerRef, () => state.selectionManager);\n}\n","import React, { RefObject } from \"react\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\n/**\n * A solution for connecting a collection to a search input, so that collection can still be navigated by keyboard\n * while the input is focused. It works by replaying certain keyboard events on the collection container and focused\n * item. An alternative approach (which is used in react-aria's useCombobox) is to use useSelectableCollection\n * separately for the input, but the biggest issue with that approach is that it's limiting in the following ways:\n * - Rendering input should be a part of the same component that renders the collection. Having specific components\n *   for use cases that requires a search input is not flexible enough. For example one may want to use SpeedSearchList\n *   or List connected to an input. Also, the input and the collection may need to be in different layouts in different\n *   use cases. Decoupling the rendering of the input and collection is a more flexible solution.\n * - The same options used for collection should be passed to the input field for behavior consistency, and that can be\n *   prone to error. Some of these options, like `keyboardDelegate` can even have a default value in hooks like\n *   `useSelectableList`, which means for making sure the same value is passed to the useSelectableCollection for input,\n *   would require to not use the default value, since the same value can't be accessed.\n *\n * With this event forwarding approach, it's an arrow up or down event would behave exactly like it was triggered on\n * the collection itself, leaving no room for behavior discrepancies. But it has a few drawbacks:\n * - Although small, there is still some coupling between this code and implementation of the collection component.\n *   More specifically, the following things are assumed by this implementation:\n *   - \"Enter\" keys (selection or action) are handled on items, but arrow keys are handled on the collection element.\n *   - \"[data-key] attribute is set on items. That is used to find the element for the focused item (which of course is\n *     not actually focused while the input is).\n */\nexport const useCollectionSearchInput = ({\n  collectionRef,\n  selectionManager,\n}: {\n  /**\n   * ref to the html element of the collection component\n   */\n  collectionRef: RefObject<HTMLElement>;\n  /**\n   * SelectionManager instance, returned from the state management hook for the collection component.\n   * {@link CollectionRefProps.selectionManagerRef} can be used on collection components that implement\n   * `useCollectionRef`, to get a hold of selection manager, from outside.\n   */\n  selectionManager: SelectionManager | null | undefined;\n}): { collectionSearchInputProps: DOMAttributes<HTMLInputElement> } => {\n  const relayEventsToCollection = useEventCallback(\n    (event: React.KeyboardEvent) => {\n      // Relay ArrowUp and ArrowDown to the container\n      if (\n        event.type === \"keydown\" &&\n        (event.key === \"ArrowUp\" || event.key === \"ArrowDown\")\n      ) {\n        event.preventDefault();\n        event.stopPropagation();\n        collectionRef.current?.dispatchEvent(\n          new KeyboardEvent(event.type, event.nativeEvent)\n        );\n      }\n      // Relay Enter to the focused item\n      else if (event.key === \"Enter\" && selectionManager?.focusedKey) {\n        collectionRef.current\n          ?.querySelector(`[data-key=\"${selectionManager?.focusedKey}\"]`)\n          ?.dispatchEvent(new KeyboardEvent(event.type, event.nativeEvent));\n        event.preventDefault();\n      }\n    }\n  );\n\n  return {\n    collectionSearchInputProps: {\n      onKeyDown: relayEventsToCollection,\n      onKeyUp: relayEventsToCollection,\n      onKeyPress: relayEventsToCollection,\n    },\n  };\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React, { ForwardedRef } from \"react\";\nimport { amendName, PlatformIcon, PlatformIconProps } from \"./PlatformIcon\";\n\nexport const StyledHoverContainer = styled.span<{\n  hoverContainerSelector?: string;\n}>`\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector\n      ? `${hoverContainerSelector} &`\n      : \"\"} .icon[data-hover] {\n    display: none;\n  }\n\n  ${({ hoverContainerSelector }) =>\n    hoverContainerSelector ? `${hoverContainerSelector}:hover &` : \"&:hover\"} {\n    .icon {\n      display: none;\n    }\n\n    .icon[data-hover] {\n      display: inline-flex;\n    }\n  }\n`;\n\nconst StyledIconHoverContainer = styled(StyledHoverContainer)`\n  display: inline-flex;\n`;\n\n/**\n * A common use case for PlatformIcons is to have a default icon and a hover icon.\n * This component captures that simple use case, by rendering both icons, and hiding one based on a hover selector.\n *\n * ### Parent hover container\n *\n * If the hover-able element is a parent of the icon, and not the icon itself (i.e., the icon should change if the\n * that parent is hovered), you can use `StyledHoverContainer` to define that parent element:\n *\n * ```tsx\n * const SomeParent = styled(StyledHoverContainer)`...`;\n * <SomeParent><AutoHoverPlatformIcon icon=\"...\" /></SomeParent>\n * ```\n *\n * If the hover-able element is a parent of the icon, with a known selector, you can pass `hoverContainerSelector`,\n * instead of using `StyledHoverContainer`:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector=\"[role=menuitem]\" />\n * ```\n *\n * If the hover container is a styled component, you can have it converted to selector like this:\n *\n * ```tsx\n * <AutoHoverPlatformIcon icon=\"...\" hoverContainerSelector={`${MyStyledHoverContainer}`} />\n * ```\n *\n * In all examples above, the hover icon is shown when the parent is hovered, instead of the icon itself.\n *\n */\nexport const AutoHoverPlatformIcon = React.forwardRef(\n  function AutoHoverPlatformIcon(\n    {\n      hoverIcon,\n      hoverContainerSelector,\n      ...props\n    }: PlatformIconProps & {\n      /**\n       * The icon to be used when hovered. If not provided, it will be the \"somethingHovered\" where \"something\" is the `icon`\n       */\n      hoverIcon?: string;\n      hoverContainerSelector?: string;\n    },\n    ref: ForwardedRef<HTMLSpanElement>\n  ) {\n    const className = `icon ${props.className || \"\"}`;\n    return (\n      <StyledIconHoverContainer\n        ref={ref}\n        hoverContainerSelector={hoverContainerSelector}\n      >\n        <PlatformIcon {...props} className={className} />\n        <PlatformIcon\n          {...props}\n          className={className}\n          icon={hoverIcon ?? amendName(props.icon, \"Hover\")}\n          data-hover\n        />\n      </StyledIconHoverContainer>\n    );\n  }\n);\n","import useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport React, { ForwardedRef } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\ninterface IconModifiers {\n  Selected?: boolean;\n  Focused?: boolean;\n  Disabled?: boolean;\n  Editable?: boolean;\n  Pressed?: boolean;\n}\n\nexport interface ThemeIconProps extends IconProps {\n  /**\n   * Icon which will be resolved against the default icon location based on theme type\n   */\n  icon: string | { name: string; modifiers: IconModifiers };\n\n  /**\n   * A theme key that can optionally override the icon.\n   */\n  themePath?: string;\n}\n\nconst ICONS_DIR_PREFIX = \"com/intellij/ide/ui/laf/icons/\";\n\n// Similar to LafIconLookup\nfunction findIconPath(\n  theme: Theme,\n  name: string,\n  modifiers: IconModifiers = {}\n) {\n  const basePath = `${ICONS_DIR_PREFIX}${\n    theme.isUnderDarcula() ? \"darcula/\" : \"intellij/\"\n  }`;\n  const suffix = (\n    [\"Editable\", \"Selected\", \"Pressed\", \"Focused\", \"Disabled\"] as Array<\n      keyof typeof modifiers\n    >\n  )\n    .filter((modifier) =>\n      // Focused or Pressed can't coexist with Disabled\n      modifiers.Disabled ? ![\"Focused\", \"Pressed\"].includes(modifier) : true\n    )\n    .reduce(\n      (soFar, modifier) => soFar + (modifiers[modifier] ? modifier : \"\"),\n      \"\"\n    );\n  return `${basePath}${name}${suffix}.svg`;\n}\n\nfunction useIconPath(\n  iconDescriptor: string | { name: string; modifiers?: IconModifiers },\n  themePath?: string\n) {\n  const theme = useTheme() as Theme; // TODO: investigate why useTheme is typed like this\n  const resolvedValue = themePath && theme.value(themePath);\n  if (resolvedValue) {\n    return resolvedValue;\n  }\n  const { modifiers = {}, name } =\n    typeof iconDescriptor === \"string\"\n      ? { name: iconDescriptor }\n      : iconDescriptor;\n  return findIconPath(theme, name, modifiers);\n}\n\nexport const LafIcon = React.forwardRef(\n  (\n    { themePath, icon, size, ...props }: ThemeIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const resolvedIconPath = useIconPath(icon, themePath);\n\n    const ref = useForwardedRef(forwardedRef);\n    useSvgIcon({ path: `platform/platform-impl/src/${resolvedIconPath}` }, ref);\n    return <StyledIconWrapper {...props} ref={ref} size={size} />;\n  }\n);\n","import React, { ForwardedRef } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { IconProps } from \"./IconProps\";\nimport { StyledIconWrapper } from \"./StyledIconWrapper\";\nimport { useSvgIcon } from \"./useSvgIcon\";\n\nexport interface PlatformIconProps extends IconProps {\n  /**\n   * Icon path in intellij platform repo.\n   * If starts with \"/\", the path will be from the repo root. Otherwise, it's relative to \"platform/icons/src\".\n   * \".svg\" extension is optional.\n   */\n  icon: string;\n  /**\n   * Similar to icon, but for dark themes.\n   */\n  darkIcon?: string;\n}\n\nexport const amendName = (iconNameOrPath: string, amendment: string) => {\n  const [name, ext] = iconNameOrPath.split(\".\");\n  return `${name}${amendment}${ext ? `.${ext}` : \"\"}`;\n};\n\nexport const getDarkPath = (path: string, darkPath?: string) => {\n  const [name, ext] = path.split(\".\");\n  return darkPath || `${name}_dark${ext ? `.${ext}` : \"\"}`;\n};\n\nconst getPlatformIconPath = (relativePath: string) =>\n  relativePath.startsWith(\"/\")\n    ? relativePath.slice(1)\n    : `platform/icons/src/${relativePath}`;\n\n/**\n * Renders an icon from the predefined list of platform icons.\n * icon name must follow the directory structure in platform icons.\n * @example <PlatformIcon icon=\"general/hideToolWindow\" />\n * @example <PlatformIcon icon=\"toolbar/pin\" />\n * @example <PlatformIcon icon=\"toolbar/pin.svg\" />\n * @example <PlatformIcon icon=\"/platform/dvcs-impl/resources/icons/currentBranchLabel.svg\" />\n */\nexport const PlatformIcon = React.forwardRef(\n  (\n    { icon, darkIcon, ...props }: PlatformIconProps,\n    forwardedRef: ForwardedRef<HTMLElement>\n  ) => {\n    const ref = useForwardedRef(forwardedRef);\n    const theme = useTheme();\n    const iconName = theme.dark ? getDarkPath(icon, darkIcon) : icon;\n    useSvgIcon(\n      {\n        path: getPlatformIconPath(iconName),\n        fallbackPath: getPlatformIconPath(icon),\n      },\n      ref\n    );\n\n    return <StyledIconWrapper {...props} ref={ref} />;\n  }\n);\n","import { styled } from \"../styled\";\nimport { IconSize } from \"@intellij-platform/core/Icon/IconProps\";\n\nconst DEFAULT_ICON_SIZE: IconSize = 16;\n\nexport const StyledIconWrapper = styled.span<{\n  size?: IconSize;\n  useCurrentColor?: boolean;\n  role?: string;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  line-height: 0;\n  width: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  height: ${({ size = DEFAULT_ICON_SIZE }) => `${size}px`};\n  position: relative; // to allow absolute positioned indicators and overlays on icon\n  cursor: ${({ role }) => (role === \"button\" ? \"pointer\" : undefined)};\n`;\n","import { RefObject, useContext, useEffect } from \"react\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\n\nexport function useSvgIcon(\n  { path, fallbackPath }: { path: string; fallbackPath?: string },\n  /**\n   * ref to the icon wrapper element in which the svg should be injected.\n   * This hook used to return svg string, and that svg was set as dangerouslySetInnerHTML. But now it injects the svg.\n   * by direct DOM manipulation. That's to eliminate the need for using dangerouslySetInnerHTML, so that we can allow\n   * arbitrary children (like LiveIndicator) as overlays on top of icons.\n   */\n  ref: RefObject<HTMLElement>\n) {\n  const theme = useTheme();\n  const itemState = useContext(ItemStateContext);\n  const selected = itemState?.isSelected || itemState?.isContainerFocused;\n  useEffect(() => {\n    let unmounted = false;\n    const fetchIcon = async () => {\n      if (!path) {\n        console.error(\"icon path is empty\");\n        return;\n      }\n      if (ref.current) {\n        // For querying for icons that are not loaded yet. Especially useful for visual testing\n        ref.current.dataset.loadingIcon = \"true\";\n      }\n      const svg = await theme.getSvgIcon(path, selected).catch((e) => {\n        if (fallbackPath) {\n          return theme.getSvgIcon(fallbackPath, selected);\n        }\n        throw e;\n      });\n      if (svg) {\n        if (!unmounted && ref?.current) {\n          if (ref) {\n            ref.current?.querySelector(\"svg\")?.remove();\n            const svgElement = document.createElement(\"svg\");\n            ref.current?.appendChild(svgElement);\n            svgElement.outerHTML = makeIdsUnique(svg); // UNSAFE! Would require sanitization, or icon sources must be trusted.\n            delete ref.current?.dataset.loadingIcon;\n          }\n        }\n      } else {\n        console.error(\"Could not resolve icon:\", path);\n      }\n    };\n    fetchIcon().catch(console.error);\n    return () => {\n      unmounted = true;\n    };\n  }, [path, selected]);\n}\n\n/**\n * If multiple instance of the same icon is rendered at the same time, and the SVG includes\n * url(#...) references to locally defined ids, in some cases the icon is not rendered properly.\n * because of ids colliding. We make sure the ids are unique in each rendered icon.\n */\nfunction makeIdsUnique(svg: string): string {\n  const randomPostfix = (Math.random() * 1000).toFixed(0);\n  const idMatches = svg.matchAll(/id=\"(.*?)\"/g);\n  return [...idMatches].reduce((modifiedSvg, [_, id]) => {\n    const newId = `${id}-${randomPostfix}`;\n    return replaceAll(\n      `id=\"${id}\"`,\n      `id=\"${newId}\"`,\n      replaceAll(`url(#${id})`, `url(#${newId})`, modifiedSvg)\n    );\n  }, svg);\n}\n\nfunction replaceAll(theOld: string, theNew: string, str: string): string {\n  const replaced = str.replace(theOld, theNew);\n  const replacedAgain = replaced.replace(theOld, theNew);\n  if (replaced === replacedAgain) {\n    return replaced;\n  }\n  return replaceAll(theOld, theNew, replacedAgain);\n}\n","import { PressProps, usePress } from \"@react-aria/interactions\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { styled } from \"../styled\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface IconButtonProps\n  extends PressProps,\n    // Maybe we should allow any arbitrary HTMLProps<HTMLButtonElement> props, instead of whitelisting?\n    Pick<\n      HTMLProps<HTMLButtonElement>,\n      \"onFocus\" | \"onBlur\" | \"style\" | \"className\"\n    > {\n  children?: React.ReactNode;\n  /**\n   * The minimum width/height of the button.\n   */\n  minSize?: number;\n  /**\n   * Whether the button should be focusable by pressing tab. The default is true for icon buttons (aka. action buttons),\n   * which means they are not included in the tab order.\n   */\n  excludeFromTabOrder?: boolean;\n}\n\nexport const DEFAULT_MINIMUM_BUTTON_SIZE = 22;\nexport const NAVBAR_MINIMUM_BUTTON_SIZE = 20;\n\nexport const StyledIconButton = styled.button<{ minSize: number }>`\n  position: relative; // to allow absolutely positioned overlays like an dropdown icon at the bottom right corner\n  background: none;\n  color: inherit;\n  border: 1px solid transparent;\n  border-radius: 3px;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  min-height: ${({ minSize }) => `${minSize}px`};\n  min-width: ${({ minSize }) => `${minSize}px`};\n  padding: 0;\n  margin: 0;\n  &:disabled {\n    opacity: 0.25; // not quite accurate implementation. There might be better ways to style disabled state.\n  }\n  &:hover:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBackground\", \"#DFDFDF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.hoverBorderColor\", \"#DFDFDF\")};\n  }\n  &:focus-visible:not(:disabled) {\n    outline: none;\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\n        \"ActionButton.focusedBorderColor\",\n        theme.dark ? \"#5eacd0\" : \"#62b8de\"\n      )};\n  }\n  &:active:not(:disabled),\n  &.active:not(:disabled) {\n    background: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBackground\", \"#CFCFCF\")};\n    border-color: ${({ theme }) =>\n      theme.color(\"ActionButton.pressedBorderColor\", \"#CFCFCF\")};\n  }\n`;\n\n/**\n * Icon button, aka Action Button, in the reference implementation.\n * @see https://jetbrains.github.io/ui/controls/icon_button/\n */\nexport const IconButton = React.forwardRef(function IconButton(\n  {\n    minSize = DEFAULT_MINIMUM_BUTTON_SIZE,\n    preventFocusOnPress = true,\n    excludeFromTabOrder = true,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    ...otherProps\n  }: IconButtonProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  // FIXME: use useButton\n\n  const ref = useObjectRef(forwardedRef);\n  const { focusableProps } = useFocusable({ isDisabled }, ref);\n  const { pressProps, isPressed } = usePress({\n    ref,\n    isPressed: isPressedInput,\n    isDisabled,\n    onPress,\n    onPressChange,\n    onPressEnd,\n    onPressStart,\n    onPressUp,\n    shouldCancelOnPointerExit,\n    preventFocusOnPress,\n  });\n\n  return (\n    <StyledIconButton\n      className={isPressed ? \"active\" : \"\"}\n      disabled={isDisabled}\n      {...mergeProps(pressProps, otherProps, focusableProps)}\n      minSize={minSize}\n      tabIndex={excludeFromTabOrder && !isDisabled ? -1 : undefined}\n      ref={ref}\n    />\n  );\n});\n","import React, { useRef } from \"react\";\nimport styled from \"styled-components\";\nimport {\n  IconButton,\n  IconButtonProps,\n} from \"@intellij-platform/core/IconButton\";\nimport { MenuTrigger, MenuTriggerProps } from \"@intellij-platform/core/Menu\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst ArrowIcon = styled(PlatformIcon)`\n  position: absolute;\n  right: 1px;\n  bottom: 1px;\n`;\n\ntype IconButtonWithMenuProps = IconButtonProps &\n  Pick<MenuTriggerProps, \"renderMenu\"> & {\n    /**\n     * whether the default arrow should be removed or not. false by default.\n     */\n    noArrow?: boolean;\n  };\n/**\n * Renders an IconButton which opens a menu. by default a down arrow icon is shown as an overlay on the rendered\n * icon, but it can be disabled by passing `noArrow`. It also restores the focus to the previously focused element,\n * when the menu is closed.\n * @param renderMenu: render prop for rendering the menu\n * @param children: the content of the icon button\n * @param noArrow: whether the default arrow should be removed or not. false by default.\n * @param buttonProps: the rest of the props that will be passed down to IconButton\n *\n * TODO: Add story and write test for focus restoration, noArrow, and basic functionality.\n */\nexport const IconButtonWithMenu = ({\n  renderMenu,\n  children,\n  noArrow = false,\n  ...buttonProps\n}: IconButtonWithMenuProps) => {\n  const previouslyFocusedElementRef = useRef<HTMLElement>();\n  return (\n    <MenuTrigger\n      renderMenu={renderMenu}\n      onOpenChange={(open) => {\n        if (!open && previouslyFocusedElementRef.current) {\n          previouslyFocusedElementRef.current.focus();\n        }\n      }}\n    >\n      {(props, ref) => (\n        <IconButton\n          {...mergeProps(buttonProps, props, {\n            onFocus: (e: FocusEvent) => {\n              if (e.relatedTarget && e.relatedTarget instanceof HTMLElement) {\n                previouslyFocusedElementRef.current = e.relatedTarget;\n              }\n            },\n          })}\n          ref={ref}\n        >\n          {children}\n          {!noArrow && <ArrowIcon icon=\"general/dropdown.svg\" />}\n        </IconButton>\n      )}\n    </MenuTrigger>\n  );\n};\n","import React, { ComponentProps, HTMLAttributes, HTMLProps } from \"react\";\nimport { useTheme } from \"styled-components\";\nimport { Theme } from \"./Theme/Theme\";\n\ninterface Props extends React.ImgHTMLAttributes<HTMLImageElement> {\n  /**\n   * src for when a dark theme is active. if `darkSrc` doesn't have a non-empty string value, src will be used both\n   * for dark and light themes.\n   */\n  darkSrc?: string;\n}\n/**\n * Same as default `img`, but theme aware. Meaning that you can specify different sources for normal and dark mode.\n */\nexport const Img: React.FC<Props> = ({ darkSrc, ...props }) => {\n  const theme = useTheme() as Theme;\n  if (theme.dark) {\n    return <img {...props} src={darkSrc || props.src} />;\n  }\n  return <img {...props} />;\n};\n","import React, {\n  ForwardedRef,\n  InputHTMLAttributes,\n  useEffect,\n  useState,\n} from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableOptions, useFocusable } from \"@react-aria/focus\";\nimport { ValidationState } from \"@react-types/shared\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst StyledInputBox = styled.div<{\n  disabled?: boolean;\n  focused?: boolean;\n  validationState: ValidationState | undefined;\n}>`\n  box-sizing: border-box;\n  display: inline-flex;\n  min-width: 4rem; // https://jetbrains.github.io/ui/controls/input_field/#28\n  background: ${({ theme, disabled }) =>\n    disabled\n      ? theme.color(\"TextField.disabledBackground\")\n      : theme.color(\"TextField.background\")};\n  border: 1px solid\n    ${({ theme, focused, disabled, validationState }) =>\n      theme.commonColors.border({\n        focused: focused,\n        disabled: disabled,\n        invalid: validationState === \"invalid\",\n      })};\n  box-shadow: 0 0 0 0.125rem\n    ${({ theme, focused = false, validationState, disabled }) =>\n      disabled\n        ? \"transparent\"\n        : theme.commonColors.focusRing({\n            invalid: validationState === \"invalid\",\n            focused: focused,\n          })};\n  border-radius: 1px;\n  cursor: text; // the whole box moves focus to the input\n  overflow: hidden;\n`;\n\nconst StyledInput = styled.input<{ disabled?: boolean }>`\n  all: unset;\n  padding: 0.1875rem 0.375rem;\n  flex: 1; // fill in the available space within the input box\n  min-width: 0;\n  line-height: 1rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )};\n  color: ${({ theme, disabled }) =>\n    disabled &&\n    theme.color(\n      \"TextField.inactiveForeground\" as UnknownThemeProp<\"TextField.inactiveForeground\">\n    )};\n\n  caret-color: ${({ theme }) =>\n    theme.color(\n      \"TextField.caretForeground\" as UnknownThemeProp<\"TextField.caretForeground\">\n    )};\n  &::selection {\n    background: ${({ theme }) =>\n      theme.color(\n        \"*.selectionBackground\"\n      )}; // Not checked with the reference impl\n    color: ${({ theme }) =>\n      theme.color(\n        \"*.selectionForeground\"\n      )}; // Not checked with the reference impl\n  }\n  &::placeholder {\n    color: ${({ theme }) => theme.commonColors.inactiveTextColor};\n  }\n`;\n\nconst StyledAddons = styled.div`\n  display: inline-flex;\n  align-items: center;\n  gap: 0.25rem; /* TODO: check */\n  padding: 1px 0;\n`;\nconst StyledRightAddons = styled(StyledAddons)`\n  margin-right: 0.125rem; /* TODO: check */\n`;\n\nconst StyledLeftAddons = styled(StyledAddons)`\n  margin-left: 0.375rem; /* TODO: check */\n`;\n\nexport interface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  validationState?: ValidationState;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n\n  /**\n   * Rendered inside the input box and after the input element.\n   * Used to render [Built-in buttons](https://jetbrains.github.io/ui/controls/built_in_button/).\n   */\n  addonAfter?: React.ReactNode;\n  /**\n   * Rendered inside the input box and before the input element.\n   */\n  addonBefore?: React.ReactNode;\n\n  /**\n   * Ref to the underlying input element\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n}\n\n/**\n * Bare input, themed, and with a few extra features:\n * - Support for \"invalid\" state ({@param validationState}\n * - Support for autoSelect.\n * - Disables spell check by default. It can be overwritten.\n * Use {@link InputField} for more features like an associated label, error message and context help.\n */\nexport const Input = React.forwardRef(function Input(\n  {\n    validationState,\n    autoSelect,\n    addonBefore,\n    addonAfter,\n    style,\n    className,\n    inputRef: inputRefProp,\n    onKeyDown,\n    onKeyUp,\n    onFocus,\n    onBlur,\n    autoFocus,\n    ...props\n  }: InputProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const { focusableProps } = useFocusable(\n    {\n      isDisabled: props.disabled,\n      autoFocus,\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    } as FocusableOptions,\n    inputRef\n  );\n  const [isFocused, setIsFocused] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setIsFocused,\n  });\n\n  useEffect(() => {\n    if (autoSelect) {\n      inputRef.current.select();\n    }\n  }, [autoSelect]);\n\n  return (\n    <StyledInputBox\n      ref={ref}\n      spellCheck={false}\n      {...mergeProps(focusWithinProps, {\n        className,\n        style,\n        onMouseDown: (event: MouseEvent) => {\n          if (event.target !== inputRef.current) {\n            event.preventDefault();\n            inputRef.current.focus();\n          }\n        },\n      })}\n      focused={isFocused}\n      validationState={validationState}\n      disabled={props.disabled}\n    >\n      {addonBefore && <StyledLeftAddons>{addonBefore}</StyledLeftAddons>}\n      <StyledInput ref={inputRef} {...mergeProps(props, focusableProps)} />\n      {addonAfter && <StyledRightAddons>{addonAfter}</StyledRightAddons>}\n    </StyledInputBox>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\nexport const StyledLabel = styled.label<{ disabled?: boolean }>`\n  color: ${({ theme, disabled }) => theme.commonColors.label({ disabled })};\n`;\n","import React, {\n  ChangeEvent,\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n} from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { AriaFieldProps, useField } from \"@react-aria/label\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { FocusableProps } from \"@react-types/shared\";\nimport { Label } from \"@intellij-platform/core/Label\";\nimport {\n  PositionedTooltipTrigger,\n  ValidationTooltip,\n} from \"@intellij-platform/core/Tooltip\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField/Input\";\n\ntype LabelPlacement = \"above\" | \"before\";\n\nexport interface InputFieldProps\n  extends Omit<AriaFieldProps, \"labelElementType\">,\n    FocusableProps,\n    Pick<InputProps, \"addonBefore\" | \"addonAfter\" | \"inputRef\"> {\n  /**\n   * className applied on the field's wrapper div.\n   */\n  className?: string;\n  /**\n   * style applied on the field's wrapper div.\n   */\n  style?: CSSProperties;\n  /**\n   * Label to be associated with the input.\n   */\n  label?: React.ReactNode;\n  /**\n   * Context help, shown below the input. A typical use case is\n   * [to provide example values](https://jetbrains.github.io/ui/principles/context_help/#07).\n   */\n  contextHelp?: React.ReactNode;\n  /**\n   * Placement of the label with respect to the input box.\n   */\n  labelPlacement?: LabelPlacement;\n\n  /**\n   * Whether the input is disabled. Use this prop\n   */\n  isDisabled?: boolean;\n\n  /**\n   * Convenient prop to be used instead of inputProps.placeholder\n   **/\n  placeholder?: string;\n  /**\n   * Convenient prop to be used instead of inputProps.value\n   **/\n  value?: HTMLProps<HTMLInputElement>[\"value\"];\n  /**\n   * Convenient prop to be used instead of inputProps.defaultValue\n   **/\n  defaultValue?: HTMLProps<HTMLInputElement>[\"defaultValue\"];\n  /**\n   * Convenient prop to be used instead of inputProps.onChange. It also calls the passed callback with the\n   * change value instead of input.\n   **/\n  onChange?: (newValue: string) => void;\n  /**\n   * Props to be passed to the underlying input element.\n   **/\n  inputProps?: Omit<\n    HTMLProps<HTMLInputElement>,\n    \"as\" | \"ref\" | \"disabled\" //isDisabled should be used\n  >;\n  /**\n   * Whether to auto select the value initially\n   */\n  autoSelect?: boolean;\n}\n\nconst StyledInputContainer = styled.div<{ labelPlacement?: LabelPlacement }>`\n  display: inline-flex;\n  flex-direction: ${({ labelPlacement }) =>\n    labelPlacement === \"above\" ? \"column\" : \"row\"};\n  align-items: start;\n  gap: 0.375rem;\n`;\n\nconst StyledLabel = styled(Label)`\n  margin-top: 0.25rem;\n  line-height: 1.2;\n`;\nconst StyledContextHelp = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n`;\n\nconst StyledBoxAndContextHelpWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n  gap: 0.25rem; /* Not checked with the reference impl */\n`;\n\n/**\n * An input box with an associated label, error message, and context help.\n */\nexport const InputField = React.forwardRef(function InputField(\n  {\n    className,\n    style,\n    labelPlacement = \"before\",\n    contextHelp,\n    inputProps = {},\n    addonBefore,\n    addonAfter,\n    inputRef,\n    ...props\n  }: InputFieldProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref = useObjectRef(forwardedRef);\n  const { fieldProps, errorMessageProps, labelProps, descriptionProps } =\n    useField(props);\n\n  return (\n    <StyledInputContainer\n      ref={ref}\n      labelPlacement={labelPlacement}\n      className={className}\n      style={style}\n    >\n      <StyledLabel {...labelProps} disabled={props.isDisabled}>\n        {props.label}\n      </StyledLabel>\n      <StyledBoxAndContextHelpWrapper>\n        <PositionedTooltipTrigger\n          placement=\"top start\"\n          crossOffset={36}\n          showOnFocus\n          isDisabled={!props.errorMessage}\n          tooltip={\n            <ValidationTooltip>\n              <div {...errorMessageProps}>{props.errorMessage}</div>\n            </ValidationTooltip>\n          }\n          delay={0}\n        >\n          <Input\n            inputRef={inputRef}\n            placeholder={props.placeholder}\n            disabled={props.isDisabled}\n            validationState={props.validationState}\n            autoSelect={props.autoSelect}\n            autoFocus={props.autoFocus}\n            addonAfter={addonAfter}\n            addonBefore={addonBefore}\n            {...mergeProps(fieldProps, inputProps, {\n              value: props.value,\n              defaultValue: props.defaultValue,\n              onChange: (e: ChangeEvent<HTMLInputElement>) =>\n                props.onChange?.(e.target.value),\n            })}\n          />\n        </PositionedTooltipTrigger>\n        {contextHelp && (\n          <StyledContextHelp {...descriptionProps}>\n            {contextHelp}\n          </StyledContextHelp>\n        )}\n      </StyledBoxAndContextHelpWrapper>\n    </StyledInputContainer>\n  );\n});\n","import { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nconst getDefaultLinkColor = ({ theme }: { theme: Theme }) =>\n  theme.commonColors.linkForegroundEnabled;\n\nexport const StyledLink = styled.a`\n  cursor: pointer;\n  text-decoration: none;\n  outline: none;\n  // &:focus-visible didn't work as expected, so FocusRing is used\n  &.focus-visible {\n    outline: 1px solid\n      ${({ theme }) =>\n        theme.color(\n          \"Link.focusedBorderColor\" as UnknownThemeProp<\"Link.focusedBorderColor\">,\n          theme.commonColors.focusBorderColor\n        )};\n    border-radius: 2px; // Registry.intValue(\"ide.link.button.focus.round.arc\", 4)\n  }\n  color: ${getDefaultLinkColor};\n\n  &:hover,\n  &.hover /* for testing purposes*/ {\n    text-decoration: underline;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.hoverForeground\",\n        theme.color(\n          \"link.hover.foreground\" as UnknownThemeProp<\"link.hover.foreground\">,\n          \"\" /*FIXME: check*/\n        )\n      )};\n  }\n  &:active,\n  &.active {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.pressedForeground\",\n        theme.color(\n          \"link.pressed.foreground\" as UnknownThemeProp<\"link.pressed.foreground\">,\n          !theme.dark ? \"#F00000\" : \"#BA6F25\"\n        )\n      )};\n  }\n  &:disabled,\n  &.disabled {\n    cursor: default;\n    text-decoration: none;\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.disabledForeground\" as UnknownThemeProp<\"Link.disabledForeground\">,\n        theme.color(\n          \"Label.disabledForeground\",\n          theme.color(\"Label.disabledText\", \"#999\")\n        )\n      )};\n  }\n  // We may need to refine this to allow passing visited as a prop for links that don't have href, and not apply the\n  // styles in that case, since it seems no href is considered visited by default. Although, in all main themes\n  // Link.visitedForeground is set to the default link color.\n  &:visited,\n  &.visited {\n    color: ${({ theme }) =>\n      theme.color(\n        \"Link.visitedForeground\",\n        theme.color(\n          \"link.visited.foreground\" as UnknownThemeProp<\"link.visited.foreground\">,\n          !theme.dark ? \"#800080\" : \"#9776A9\"\n        )\n      )};\n  }\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { AriaLinkProps } from \"@react-types/link\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { FocusRing, useFocusable } from \"@react-aria/focus\";\nimport { StyledLink } from \"@intellij-platform/core/Link/StyledLink\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\n\nexport type LinkProps = AriaLinkProps & {\n  isDisabled?: boolean;\n  className?: string;\n  children: React.ReactNode;\n  preventFocusOnPress?: boolean; // Should this be become true by default?\n  excludeFromTabOrder?: boolean;\n};\n\n/**\n * A focusable span in style of [Link](https://jetbrains.github.io/ui/controls/link/) and with accessibility role of link.\n *\n * TODO and known issues:\n * - in the reference impl, Space presses the link, Enter doesn't. It's vice versa here, because of how usePress is implemented.\n * - Support for External links\n * - Support for Anchor elements?\n *\n * Unknowns:\n * - What are ActionLink and DefaultLinkButtonUI?\n * - What is HyperLinkLabel compared to LabelLink (which was looked into in implementation of this component)?\n */\nexport const Link = React.forwardRef(\n  (\n    props: LinkProps,\n    forwardedRef: ForwardedRef<HTMLAnchorElement>\n  ): React.ReactElement => {\n    const ref = useForwardedRef(forwardedRef);\n\n    const { focusableProps } = useFocusable(props, ref);\n    const { pressProps, isPressed } = usePress({ ...props, ref });\n    const domProps = filterDOMProps(props, { labelable: true });\n    const interactionHandlers = mergeProps(focusableProps, pressProps);\n\n    return (\n      <FocusRing focusRingClass=\"focus-visible\">\n        <StyledLink\n          {...mergeProps(focusableProps, interactionHandlers, domProps)}\n          as=\"span\"\n          role=\"link\"\n          ref={ref}\n          // maybe use clsx\n          className={`${props.isDisabled ? \"disabled\" : \"\"} ${\n            isPressed ? \"active\" : \"\"\n          } ${props.className || \"\"}`}\n          aria-disabled={props.isDisabled || undefined}\n          tabIndex={\n            !props.isDisabled ? (props.excludeFromTabOrder ? -1 : 0) : undefined\n          }\n        >\n          {props.children}\n        </StyledLink>\n      </FocusRing>\n    );\n  }\n);\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable, Node } from \"@react-types/shared\";\nimport React, { ForwardedRef, Key } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { useListState } from \"./useListState\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { useListVirtualizer } from \"@intellij-platform/core/List/useListVirtualizer\";\nimport { ListContext } from \"@intellij-platform/core/List/ListContext\";\n\nexport type ListProps<T extends object> = Omit<\n  Omit<AriaListBoxProps<T>, \"disallowEmptySelection\">,\n  keyof AsyncLoadable\n> &\n  CollectionRefProps & {\n    /**\n     * fills the available horizontal or vertical space, when rendered in a flex container.\n     */\n    fillAvailableSpace?: boolean;\n    /**\n     * When true, shows the list in focused style, even when it's not focused. A common use case is when the list\n     * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n     * keyboard events as if the list was focused.\n     * Another (maybe questionable) use case is master detail views, where the master view is shown as focused, even\n     * when the details view has physical focus.\n     */\n    showAsFocused?: boolean;\n    allowEmptySelection?: boolean;\n    /**\n     * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n     * Enter not implemented yet :D\n     */\n    onAction?: (key: Key) => void;\n\n    /**\n     * Useful when list items have a custom height, to hint layout calculation logic about the item height which\n     * increases rendering efficiency and also prevents flash of items with wrong height.\n     */\n    estimatedItemHeight?: number;\n\n    className?: string;\n  };\n\n/**\n * List view\n */\nexport const List = React.forwardRef(function List<T extends object>(\n  {\n    allowEmptySelection = false,\n    fillAvailableSpace = false,\n    estimatedItemHeight,\n    className,\n    ...inputProps\n  }: ListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n  const { listProps, listContext } = useList(\n    {\n      ...props,\n      isVirtualized: true,\n    },\n    state,\n    ref\n  );\n\n  const {\n    virtualizerProps: { children: renderNode, ...virtualizerProps },\n  } = useListVirtualizer({\n    state,\n    estimatedItemHeight,\n    renderItem: (item) => <ListItem key={item.key} item={item} />,\n  });\n\n  return (\n    <ListContext.Provider value={listContext}>\n      <StyledList\n        as={Virtualizer<Node<any>, any>}\n        {...virtualizerProps}\n        {...listProps}\n        fillAvailableSpace={fillAvailableSpace}\n        className={className}\n        ref={ref}\n      >\n        {renderNode}\n      </StyledList>\n    </ListContext.Provider>\n  );\n});\n","import React, { Key } from \"react\";\nimport { ListState } from \"@react-stately/list\";\n\nexport type ListContextType<T> = {\n  state: ListState<T>;\n  focused: boolean;\n  onAction: ((key: Key) => void) | undefined;\n};\n\nexport const ListContext = React.createContext<ListContextType<any> | null>(\n  null\n);\n","import React from \"react\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { useSeparator } from \"@react-aria/separator\";\n\nexport const ListDivider: React.FC = () => {\n  return (\n    <StyledVerticalSeparator\n      as={\"li\"}\n      {...useSeparator({ elementType: \"li\", orientation: \"vertical\" })\n        .separatorProps}\n    />\n  );\n};\n","import React, { useContext } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport { StyledListItem } from \"./StyledListItem\";\nimport { ListContext } from \"@intellij-platform/core/List/ListContext\";\n\nexport interface ListItemProps<T> {\n  item: Node<T>;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({ item, children }: ListItemProps<T>) {\n  const { state, focused: listFocused, onAction } = useContext(ListContext)!;\n  const ref = React.useRef(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isSelected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    onAction: () => onAction?.(item.key),\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={isSelected}\n      disabled={isDisabled}\n      aria-disabled={isDisabled}\n      aria-selected={isSelected}\n      {...pressProps}\n      ref={ref}\n    >\n      <ItemStateContext.Provider\n        value={{\n          isDisabled,\n          isSelected,\n          isContainerFocused: listFocused,\n          node: item,\n        }}\n      >\n        {children || item.rendered}\n      </ItemStateContext.Provider>\n    </StyledListItem>\n  );\n}\n","import { css } from \"styled-components\";\nimport { styled } from \"../styled\";\n\ntype StyledListProps = {\n  fillAvailableSpace?: boolean;\n};\nexport const StyledList = styled.div\n  .attrs<StyledListProps>({ role: \"list\" })\n  .withConfig<StyledListProps>({\n    shouldForwardProp: (prop) => prop !== \"fillAvailableSpace\",\n  })<StyledListProps>`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n  max-height: 100%;\n  overflow: auto;\n  color: ${({ theme }) => theme.color(\"*.textForeground\")};\n  outline: none;\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      height: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n    `}\n  background: ${({ theme }) => theme.color(\"List.background\")};\n`;\n","import { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"../styled\";\n\nexport type StyledListItemProps = {\n  containerFocused: boolean;\n  selected: boolean;\n  disabled: boolean;\n};\n\nexport const StyledListItem = styled.div.attrs<StyledListItemProps>({\n  role: \"listitem\",\n})<StyledListItemProps>`\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"List.foreground\" as UnknownThemeProp<\"List.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"List.selectionForeground\" as UnknownThemeProp<\"List.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"List.selectionBackground\" as UnknownThemeProp<\"List.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"List.selectionInactiveForeground\" as UnknownThemeProp<\"List.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"List.selectionBackgroundInactive\" as UnknownThemeProp<\"List.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor: theme.asCurrentBackground(backgroundColor),\n      color,\n    };\n  }};\n  position: relative;\n  display: flex;\n  white-space: nowrap;\n  padding: 0 0.5rem; // themed?\n  line-height: 1.25rem;\n  outline: none;\n  cursor: default;\n  min-width: min-content; // Needed for content sizing for when list/tree is used inside popup or modal window\n`;\n","import { AriaSelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { Key, useEffect, useMemo, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport { ListContextType } from \"@intellij-platform/core/List/ListContext\";\n\nexport interface ListProps\n  extends Omit<\n      AriaSelectableListOptions,\n      | \"disallowEmptySelection\"\n      | \"selectOnFocus\"\n      | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n      | \"collection\" // Grouped as state, the second argument, like in useListBox\n      | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n      | \"ref\" // Third argument\n    >,\n    CollectionRefProps {\n  allowEmptySelection?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n  showAsFocused?: boolean;\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  { onAction, showAsFocused, ...props }: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is going to be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and allowEmptySelection is false.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      !props.allowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.setFocusedKey(firstKey);\n      state.selectionManager.select(firstKey);\n    }\n  }, [!props.allowEmptySelection]);\n\n  const onActionCallback = useEventCallback(onAction ?? (() => {}));\n  const listContext: ListContextType<T> = useMemo(\n    () => ({\n      state,\n      focused: Boolean(focused || showAsFocused),\n      onAction: onActionCallback,\n    }),\n    [state, focused, showAsFocused]\n  );\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    listContext,\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport {\n  Collection,\n  FocusStrategy,\n  KeyboardDelegate,\n  Node,\n} from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  MultipleSelectionManager,\n  SelectionManager,\n} from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { useCollectionAutoScroll } from \"@intellij-platform/core/Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T> & CollectionRefProps\n): ListState<T> {\n  const state = originalUseListState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  useCollectionRef(props, state);\n  return state;\n}\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.div(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { ReusableView } from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\nimport React, { ReactNode, useRef } from \"react\";\nimport {\n  layoutInfoToStyle,\n  useVirtualizerItem,\n  VirtualizerItem,\n  VirtualizerProps,\n} from \"@react-aria/virtualizer\";\nimport { StyledListSectionHeader } from \"@intellij-platform/core/List/StyledListSectionHeader\";\n\ninterface SectionProps<T> {\n  reusableView: ReusableView<Node<T>, unknown>;\n  header: ReusableView<Node<T>, unknown>;\n  children?: ReactNode;\n}\n\nfunction ListSection<T extends object>({\n  reusableView,\n  header,\n  children,\n}: SectionProps<T>) {\n  const headerRef = useRef<HTMLDivElement>(null);\n  useVirtualizerItem({\n    reusableView: header,\n    ref: headerRef,\n  });\n  return (\n    <>\n      <StyledListSectionHeader\n        role=\"presentation\"\n        ref={headerRef}\n        style={layoutInfoToStyle(header.layoutInfo!, \"ltr\")}\n      >\n        {reusableView.content.rendered}\n      </StyledListSectionHeader>\n      <div\n        key={reusableView.key}\n        style={layoutInfoToStyle(reusableView.layoutInfo!, \"ltr\")}\n      >\n        {children}\n      </div>\n    </>\n  );\n}\n\nexport const renderWrapper: VirtualizerProps<\n  Node<any>,\n  unknown\n>[\"renderWrapper\"] = (parent, reusableView, children, renderChildren) => {\n  if (reusableView.viewType === \"section\") {\n    return (\n      <ListSection\n        key={reusableView.key}\n        reusableView={reusableView}\n        header={children.find((c) => c.viewType === \"header\")!}\n      >\n        {renderChildren(children.filter((c) => c.viewType === \"item\"))}\n      </ListSection>\n    );\n  }\n  return (\n    <VirtualizerItem\n      key={reusableView.key}\n      reusableView={reusableView}\n      parent={parent ?? undefined}\n    />\n  );\n};\n","import React, { HTMLAttributes, useMemo } from \"react\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\nimport { ListState } from \"@react-stately/list\";\nimport { Node } from \"@react-types/shared\";\nimport { renderWrapper } from \"./renderWrapper\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\";\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\nexport const useListVirtualizer = <T extends object>({\n  renderItem,\n  estimatedItemHeight = 20,\n  state,\n}: {\n  renderItem: (item: ItemNode<T>) => React.ReactNode;\n  estimatedItemHeight?: number;\n  state: ListState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<Node<T>, unknown>,\n    keyof HTMLAttributes<HTMLElement>\n  > & { children: (type: string, content: Node<T>) => React.ReactNode };\n} => {\n  const layout = useMemo(\n    () =>\n      new VariableWidthListLayout<T>({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: estimatedItemHeight,\n        estimatedHeadingHeight: 20,\n        dividerHeight: 2,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      children: (type, item) => {\n        if (type === \"item\") {\n          return renderItem(item as ItemNode<T>);\n        }\n        if (type === \"divider\") {\n          return <ListDivider key={item.key} />;\n        }\n      },\n      renderWrapper,\n\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { HTMLAttributes, HTMLProps } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { OverlayTriggerProps } from \"@react-types/overlays\";\n\nimport { useContextMenu } from \"./useContextMenu\";\nimport { MenuOverlay } from \"./MenuOverlay\";\n\ninterface ContextMenuContainerProps extends HTMLProps<HTMLDivElement> {\n  /**\n   * Will be called to return the Menu when context menu is triggered. Use {@link Menu} component to render a menu.\n   */\n  renderMenu: () => React.ReactNode;\n  /**\n   * If children is a function, context menu props is passed to it, to be passed to the underlying element.\n   * Otherwise, a div container will be rendered.\n   */\n  children:\n    | React.ReactNode\n    | ((props: HTMLAttributes<HTMLElement>) => React.ReactNode);\n}\n\n/**\n * A generic container for context menu. It's the same as a normal div, only with an additional `renderMenu` prop,\n * to be used to render context menu, when it's triggered.\n * Closes the menu when a menu action is triggered.\n */\nexport const ContextMenuContainer = ({\n  children,\n  renderMenu,\n  ...props\n}: ContextMenuContainerProps) => {\n  const state = useMenuTriggerState({} as OverlayTriggerProps);\n\n  const { overlayProps, containerProps, overlayRef } = useContextMenu(\n    {},\n    state\n  );\n  const allProps = mergeProps(props, containerProps);\n  return (\n    <>\n      {typeof children === \"function\" ? (\n        children(allProps)\n      ) : (\n        <div {...allProps}>{children}</div>\n      )}\n      <MenuOverlay\n        state={state}\n        overlayRef={overlayRef}\n        overlayProps={overlayProps}\n        restoreFocus\n      >\n        {renderMenu()}\n      </MenuOverlay>\n    </>\n  );\n};\n","import React, { useRef } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { useOverlay } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { areInNestedOverlays } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Functionality and accessibility of context menu.\n */\nexport const useContextMenu = (\n  { isDisabled = false }: { isDisabled?: boolean },\n  state: MenuTriggerState\n) => {\n  /**\n   * NOTE: not using useMenuTrigger because:\n   * - There is no option to have a trigger like this: \"right click + long press only by touch\" which seems to be the\n   *   reasonable trigger for context menu. If we want to use it just for long press, we could disable it if it's not\n   *   a touch device, but that would be suboptimal, since both touch and mouse can be available, and it should depend\n   *   not on availability of touch, but on the triggered event type. Plus, isDisabled is broken in v<3.5.0\n   * - It's not quite clear at the moment, if the aria attributes that useMenuTrigger sets would be applicable in case\n   *   of this context menu component too. the trigger is not the container. For example, if there is a list rendered\n   *   inside, the selected item would be the trigger. Maybe even this component, as a container for context menu\n   *   is not the best way to allow for context menu, when comes to a11y concerns. For now, we skip a11y props of the\n   *   trigger. A11y props of the menu itself (e.g. aria-label) would also be up to the usage of this component.\n   *\n   *   TODO: add support for long touch\n   */\n  const onContextMenu = (e: React.MouseEvent<HTMLElement>) => {\n    e.preventDefault();\n    // NOTE: we can't use offsetX/offsetY, because it would depend on the exact target that was clicked.\n    if (!state.isOpen) {\n      state.open(null);\n    }\n    updatePosition(e);\n  };\n\n  const overlayRef = useRef(null);\n\n  const { overlayProps: positionProps, updatePosition } =\n    useMouseEventOverlayPosition({\n      overlayRef,\n      placement: \"bottom start\",\n      // shouldFlip should be false, but it doesn't work as expected. Overlay container is rendered within the view port\n      // but the menu overflows from the overlay container\n      shouldFlip: true,\n      offset: -8,\n      isOpen: state.isOpen,\n    });\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        return !areInNestedOverlays(overlayRef.current, element);\n      },\n    },\n    overlayRef\n  );\n\n  const containerProps: React.HTMLAttributes<HTMLElement> = isDisabled\n    ? {}\n    : { onContextMenu };\n  return {\n    /**\n     * props to be applied on the container element which is supposed to have the context menu\n     */\n    containerProps,\n    /**\n     * The ref to be applied on the menu overlay wrapper. It's usually an input instead of an output in similar\n     * react-aria hooks, but it seemed unnecessary here.\n     */\n    overlayRef,\n    /**\n     * props to be applied on the menu overlay wrapper.\n     */\n    overlayProps: mergeProps(overlayProps, positionProps),\n  };\n};\n","import { Item, PartialNode, Section } from \"@react-stately/collections\";\nimport { Item as Item2 } from \"./Item\";\nimport {\n  CollectionBase,\n  CollectionElement,\n  ItemProps,\n  SectionProps,\n} from \"@react-types/shared\";\nimport React from \"react\";\n\nfunction* patchCollectionItem<T>(nodes: Generator<PartialNode<T>>) {\n  for (const partialNode of nodes)\n    yield {\n      ...partialNode,\n      *childNodes() {\n        const result2 = partialNode.childNodes?.();\n        if (result2) {\n          for (const partialChildNode of result2) {\n            const { type, ...partialChildNodeWithoutType } = partialChildNode;\n            yield partialChildNodeWithoutType;\n          }\n        }\n      },\n    };\n}\n\nconst PatchedItem = Item.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedItem.getCollectionNode = function getCollectionNode<T>(\n  props: ItemProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Item.getCollectionNode(props, context));\n};\n\nconst PatchedSection = Section.bind(null);\n\n// @ts-expect-error: getCollectionNode is not public\nPatchedSection.getCollectionNode = function getCollectionNode<T>(\n  props: SectionProps<T>,\n  context: any\n): Generator<PartialNode<T>> {\n  // @ts-expect-error getCollectionNode is not public API\n  return patchCollectionItem(Section.getCollectionNode(props, context));\n};\nfunction convertCollectionElement<T>(\n  result: CollectionElement<T> | React.ReactNode\n): CollectionElement<T> {\n  if (\n    React.isValidElement(result) &&\n    (result.type === Item || result.type === Item2)\n  ) {\n    return React.createElement(\n      PatchedItem,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as ItemProps<T>),\n      },\n      convertChildren(result.props.children)\n    ) as CollectionElement<T>;\n  }\n  if (React.isValidElement(result) && result.type === Section) {\n    return React.createElement(\n      PatchedSection,\n      {\n        key: result.key != null ? result.key : undefined,\n        ...(result.props as SectionProps<T>),\n      } as any,\n      convertChildren((result.props as any).children)\n    ) as CollectionElement<T>;\n  }\n  return result as CollectionElement<T>;\n}\n\nfunction convertChildren<T>(children: React.ReactNode): React.ReactNode {\n  return Array.isArray(children)\n    ? // NOTE: We intentionally avoid using React.Children.map as it messes with keys.\n      children.map(convertChildren)\n    : convertCollectionElement(children);\n}\n\n/**\n * CollectionBuilder expects child type to be the same as parent type, which is weird in the first place:\n * https://github.com/adobe/react-spectrum/blob/cae83ff95f2f709b761c70d47ace96d6346ed873/packages/%40react-stately/collections/src/CollectionBuilder.ts#L148\n * On the other hand, the default Item components sets the `type` to item, for all child PartialNode objects:\n * https://github.com/adobe/react-spectrum/blob/c49d9819adc2cb63377f39557352440c72072caf/packages/%40react-stately/collections/src/Item.ts#L40-L54\n * Which is also a little unexpected, as in many nested collections, an item can have all types of children.\n * This function patches that, replacing Item elements with PatchedItem element which doesn't set type on children\n * PartialNodes.\n */\nexport function patchCollectionProps<T>({\n  children,\n  ...props\n}: CollectionBase<T>): CollectionBase<T> {\n  return {\n    ...props,\n    children:\n      typeof children === \"function\"\n        ? (node: T) => convertChildren(children(node)) as CollectionElement<T>\n        : (convertChildren(children) as CollectionElement<T>),\n  };\n}\n","import React, { CSSProperties, Key, RefObject, useContext } from \"react\";\nimport { AriaMenuOptions, useMenu as useMenuAria } from \"@react-aria/menu\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuProps } from \"@react-types/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { patchCollectionProps } from \"@intellij-platform/core/Collections/patchCollectionProps\";\nimport { TreeProps, useTreeState } from \"../Tree/useTreeState\"; // shared dependency between tree and menu, that could be lifted up import {Submenu} from '@intellij-platform/core/Menu/Submenu'\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { SubmenuProps } from \"./Submenu\"; // internal export\n\nexport interface MenuProps<T>\n  extends Omit<\n    AriaMenuProps<T>,\n    // selection is not properly supported for nested menus. Plus, it's not even that meaningful for a nested menu\n    // at least the way it's implemented now.\n    | \"onSelectionChange\"\n    | \"defaultSelectedKeys\"\n    | \"selectionMode\"\n    | \"disallowEmptySelection\"\n  > {\n  /**\n   * Indicates currently expanded menu item (controlled).\n   */\n  expandedKey?: Key; // FIXME: should be keys\n  /**\n   * Called when expanded menu item is changed by user interaction, which can be either hovering over the menu item\n   */\n  onExpandedKeyChange?: (expandedKey: Key) => void; // FIXME: should be keys\n  defaultExpandedKey?: Key; // FIXME: should be keys\n  /**\n   * @deprecated\n   */\n  expandOn?: \"hover\" | \"press\"; // hover delay doesn't seem to be needed as an option\n\n  /**\n   * Defines the press behaviour (either by mouse or by pressing Enter when focused) on menu items with submenu.\n   * By default (undefined), pressing or hovering over a menu item with submenu, opens the submenu.\n   * When set to \"toggle\", pressing a menu item with submenu will toggle the submenu. Hovering over such items will\n   * no longer open the submenu.\n   * When set to \"action\", pressing a menu item with submenu will call onAction for that item, and closes the menu.\n   * Hovering over such items will no longer open the submenu.\n   *\n   * In all cases, pressing the right arrow will always open the submenu.\n   */\n  submenuBehavior?: \"default\" | \"toggleOnPress\" | \"actionOnPress\";\n\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n\n  /**\n   * Minimum width of the menu\n   * @default: 120px\n   */\n  minWidth?: CSSProperties[\"minWidth\"];\n}\n\n/**\n * Can be provided by the overlay where the menu is rendered in. If provided, menu will call the provided close function\n * on actions. Note that there is no `closeOnSelect` option as of now, on this context, since no use case seems to exist\n * for keeping the menu overlay open after a menu item is selected.\n * **Update**: there are use cases where the menu is not closed after an item is clicked. Most of the toggle-able\n * actions (the ones with a checkmark) seem to be like this.\n * TODO: Make \"close on selection\" more flexible. Some ideas:\n *  - instead of calling close, pass it to `onAction` handler. Then on each action, one would need to call close if\n *    needed.\n *  - Offer a `MenuItem` component to be used instead of generic `Item`, where it accepts `closeOnSelect` boolean, which\n *    is true by default.\n *  - pass a `keepOpen` function to `onAction`.\n *  - Allow signaling whether the menu should kept open, via the returned value of onAction. e.g. return false means keep open.\n *  Last two suggestions are based on the assumption that most of the menu items are not selectable.\n *  Note that MenuOverlayContext could be used directly in action handlers too, but baking it into the menu makes it\n *  much more convenient, which seems more important than breaking the nice separation between Menu and MenuTrigger.\n */\nexport const MenuOverlayContext = React.createContext({ close: () => {} });\nexport const MenuContext = React.createContext<\n  Pick<\n    MenuProps<unknown>,\n    \"onClose\" | \"onAction\" | \"submenuBehavior\" | \"autoFocus\"\n  > & {\n    itemWrapper?: (\n      renderedItem: React.ReactNode,\n      item: Node<unknown>\n    ) => React.ReactNode;\n    renderSubmenu?: (props: SubmenuProps<unknown>) => React.ReactNode;\n  }\n>({});\n\nexport function useMenu<T>(\n  {\n    onAction: onActionProp,\n    submenuBehavior = \"default\",\n    ...props\n  }: MenuProps<T> & AriaMenuOptions<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { close } = useContext(MenuOverlayContext);\n  const onClose = () => {\n    props.onClose?.();\n    close();\n  };\n  const onAction = (key: Key) => {\n    if (\n      // The following check should have been in useMenu, but it's not currently. Probably because they haven't yet\n      // covered nested menus.\n      !state.collection.getItem(key)?.hasChildNodes\n    ) {\n      return onActionProp?.(key);\n    } else if (submenuBehavior === \"actionOnPress\") {\n      onClose();\n      return onActionProp?.(key);\n    }\n  };\n  const menuContextValue: React.ContextType<typeof MenuContext> = {\n    submenuBehavior,\n    autoFocus: props.autoFocus,\n    onAction,\n    onClose,\n  };\n  const { menuProps } = useMenuAria(\n    { ...props, onAction, onClose },\n    state,\n    ref\n  );\n\n  return {\n    menuProps,\n    menuContextValue,\n  };\n}\n\nexport function useMenuState<T extends object>(\n  props: TreeProps<T> &\n    Pick<\n      MenuProps<T>,\n      \"expandedKey\" | \"defaultExpandedKey\" | \"onExpandedKeyChange\"\n    >\n) {\n  props = patchCollectionProps(props);\n  return useTreeState({\n    ...props,\n    childExpansionBehaviour: \"single\",\n    expandedKeys: props.expandedKey ? [props.expandedKey] : undefined,\n    onExpandedChange: ([firstKey]) => props?.onExpandedKeyChange?.(firstKey),\n    defaultExpandedKeys: props.defaultExpandedKey\n      ? [props.defaultExpandedKey]\n      : undefined,\n  });\n}\n\n/**\n * UI for menus which are normally shown in a popover. Being rendered as an overlay is not handled here.\n * Also, there is no coupling with any higher level entity like \"Action\", since this is just for the UI layer.\n * Something like ActionMenu which creates a menu out of a list of actions can be implemented on top of this.\n *\n * @example\n *  <Menu>\n *    <Item>Item one</Item>\n *    <Item>\n *      <MenuItemLayout\n *        icon={<PlatformIcon icon={\"actions/copy\"} />}\n *        content=\"Copy\"\n *        shortcut={\"⌘C\"} />\n *    </Item>\n *  </Menu>\n *\n *  Current issues and limitations:\n *  - Divider in sub-menu's is not supported. because of a constraint in @react-stately/collections, which results in\n *    this error: Unsupported type <Divider> in <Item>. Only <Item> is supported. Maybe supporting section would\n *    be a workaround for it.\n *  - when a parent menu item which has an open submenu is hovered, it gets focus.\n */\nexport function Menu<T extends object>({ minWidth, ...props }: MenuProps<T>) {\n  const ref = React.useRef<HTMLUListElement>(null);\n  const state = useMenuState(props);\n  const { menuContextValue, menuProps } = useMenu(props, state, ref);\n\n  return (\n    /**\n     * MenuContext is used to pass onAction and onClose to be passed to useMenu in submenus.\n     * That's needed because in useMenuItem onAction and onClose are read off a WeakMap which has the menu state\n     * (TreeState) as key. So we have to pass onAction and onClose everytime we call useMenu in submenus, to let the\n     * menu items in that submenu access the right value of onAction and onClose. To avoid drilling these props down,\n     * we keep it in a context.\n     */\n    <MenuContext.Provider value={menuContextValue}>\n      <StyledMenu\n        {...menuProps}\n        ref={ref}\n        style={{ minWidth }}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        {renderMenuNodes(state, [...state.collection])}\n      </StyledMenu>\n    </MenuContext.Provider>\n  );\n}\n","import React, { HTMLAttributes, ReactNode, RefObject, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { isFocusVisible, useHover, usePress } from \"@react-aria/interactions\";\nimport {\n  AriaMenuItemProps,\n  MenuItemAria,\n  useMenuItem as useMenuItemAria,\n} from \"@react-aria/menu\";\nimport { useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { FocusableElement, Node } from \"@react-types/shared\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\nimport { LafIcon, PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\nimport { MenuContext, MenuProps } from \"./Menu\";\nimport { MENU_BORDER_WIDTH, MENU_VERTICAL_PADDING } from \"./StyledMenu\";\nimport {\n  StyledMenuItem,\n  StyledMenuItemIcon,\n  StyledNestedArrow,\n} from \"./StyledMenuItem\";\nimport { Submenu, SubmenuProps } from \"@intellij-platform/core/Menu/Submenu\";\n\nexport interface MenuItemProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  onSubmenuClose?: () => void;\n}\n\nconst StyledMenuItemText = styled.span`\n  flex: 1;\n`;\n\nconst StyledMenuItemPlatformIcon = styled(PlatformIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nconst StyledMenuItemLafIcon = styled(LafIcon)`\n  svg path {\n    stroke: currentColor;\n  }\n`;\n\nfunction useMenuItem<T extends unknown>(\n  {\n    submenuBehavior,\n    ...props\n  }: AriaMenuItemProps & { submenuBehavior: MenuProps<T>[\"submenuBehavior\"] },\n  state: TreeState<T>,\n  ref: RefObject<FocusableElement>\n): MenuItemAria {\n  const item = state.collection.getItem(props.key!);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const hasSubmenu = item.hasChildNodes;\n  const { menuItemProps: ariaMenuItemProps, ...result } = useMenuItemAria(\n    {\n      key: item.key,\n      // hack to prevent react-aria to call onClose when nested items are selected, which is incorrect, and because\n      // react-aria doesn't officially support nested menus at the moment\n      onClose: hasSubmenu ? () => {} : undefined,\n    },\n    state,\n    ref\n  );\n\n  // useMenuItem in react aria utilizes useHover to focus item on hover. The logic there conflicts with nested menus\n  // requirements (at least based on how nested menu is implemented here currently). Also, submenuBehavior requires\n  // some more customization. So we delete the handlers set by useHover in useMenuItem, and add a custom useHover.\n  delete ariaMenuItemProps.onMouseEnter;\n  delete ariaMenuItemProps.onPointerEnter;\n\n  if (submenuBehavior === \"default\" && isExpanded) {\n    // When menu item has its submenu opened, clicking it should not move focus or do anything.\n    delete ariaMenuItemProps.onPointerDown;\n  }\n\n  const { hoverProps } = useHover({\n    isDisabled: isDisabled,\n    onHoverStart: () => {\n      const isAnySubmenuOpen = [...state.expandedKeys].some(\n        (expandedKey) =>\n          state.collection.getItem(expandedKey)?.parentKey === item.parentKey\n      );\n\n      if (submenuBehavior === \"default\" && !isExpanded) {\n        state.toggleKey(item.key);\n      }\n\n      if (!isFocusVisible()) {\n        const shouldFocus =\n          submenuBehavior === \"default\" ? !isExpanded : !isAnySubmenuOpen;\n        if (shouldFocus) {\n          state.selectionManager.setFocused(true);\n        }\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  const keyboardProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (\n        ((e.key === \"Enter\" || e.key === \" \") &&\n          submenuBehavior !== \"actionOnPress\") ||\n        \"ArrowRight\" === e.key\n      ) {\n        state.toggleKey(item.key);\n        e.stopPropagation();\n        return;\n      }\n    },\n  };\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  return {\n    ...result,\n    menuItemProps: mergeProps(\n      hasSubmenu\n        ? {\n            \"aria-expanded\": isExpanded,\n            \"aria-haspopup\": \"menu\",\n          }\n        : {},\n      ariaMenuItemProps,\n      hoverProps,\n      keyboardProps,\n      submenuBehavior === \"toggleOnPress\" ? togglePressProps : {}\n    ),\n  };\n}\n\nconst MenuItemContext = React.createContext<{\n  labelProps: HTMLAttributes<HTMLElement>;\n  descriptionProps: HTMLAttributes<HTMLElement>;\n  keyboardShortcutProps: HTMLAttributes<HTMLElement>;\n}>({ descriptionProps: {}, labelProps: {}, keyboardShortcutProps: {} });\n\nexport const useMenuItemLayout = () => {\n  return useContext(MenuItemContext);\n};\n\nexport function MenuItem<T>({ item, state }: MenuItemProps<T>) {\n  // Get props for the menu item element\n  const ref = React.useRef<HTMLLIElement>(null);\n  const nestedMenuRef = React.useRef<HTMLDivElement>(null);\n  const isDisabled = state.disabledKeys.has(item.key);\n  const isExpanded = state.expandedKeys.has(item.key);\n  const isSelected = state.selectionManager.selectedKeys.has(item.key);\n  const isFocused = state.selectionManager.focusedKey === item.key;\n  const {\n    onClose,\n    submenuBehavior,\n    renderSubmenu = (props: SubmenuProps<T>) => <Submenu {...props} />,\n    itemWrapper = (i: React.ReactNode) => i,\n  } = useContext(MenuContext);\n\n  const { menuItemProps, labelProps, descriptionProps, keyboardShortcutProps } =\n    useMenuItem(\n      {\n        submenuBehavior,\n        key: item.key,\n      },\n      state,\n      ref\n    );\n\n  const { pressProps: togglePressProps } = usePress({\n    isDisabled: isDisabled,\n    onPressUp: () => {\n      state.toggleKey(item.key);\n      if (isExpanded) {\n        // submenu was expanded and is closed now. moving focus back to the parent item\n        state.selectionManager.setFocusedKey(item.key);\n      }\n    },\n  });\n\n  let { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: ref,\n    overlayRef: nestedMenuRef,\n    placement: \"right top\",\n    shouldFlip: true,\n    onClose,\n    offset: 0,\n    crossOffset: -(MENU_VERTICAL_PADDING + MENU_BORDER_WIDTH),\n    isOpen: isExpanded,\n  });\n\n  const arrowProps: HTMLAttributes<HTMLElement> =\n    submenuBehavior !== \"default\"\n      ? {\n          role: \"button\",\n          \"aria-label\": \"Open\",\n          ...mergeProps(togglePressProps, {\n            // to prevent pointer up event handler on the item, which would trigger action.\n            onPointerUp: (e: React.PointerEvent) => e.stopPropagation(),\n          }),\n        }\n      : {};\n  return (\n    <>\n      <StyledMenuItem\n        {...menuItemProps}\n        isDisabled={isDisabled}\n        isActive={isFocused}\n        ref={ref}\n      >\n        {isSelected && (\n          <StyledMenuItemIcon>\n            <StyledMenuItemLafIcon\n              icon={{\n                name: \"checkmark\",\n                modifiers: { Selected: isFocused },\n              }}\n            />\n          </StyledMenuItemIcon>\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isContainerFocused: state.selectionManager.isFocused,\n            isSelected,\n            node: item,\n          }}\n        >\n          <MenuItemContext.Provider\n            value={{ labelProps, descriptionProps, keyboardShortcutProps }}\n          >\n            {itemWrapper(\n              typeof item.rendered === \"string\" ? (\n                <StyledMenuItemText {...labelProps}>\n                  {item.rendered}\n                </StyledMenuItemText>\n              ) : (\n                item.rendered\n              ),\n              item\n            )}\n          </MenuItemContext.Provider>\n        </ItemStateContext.Provider>\n        {item.hasChildNodes && (\n          <StyledNestedArrow {...arrowProps}>\n            <StyledMenuItemPlatformIcon icon=\"icons/ide/menuArrow\" />\n          </StyledNestedArrow>\n        )}\n      </StyledMenuItem>\n      {isExpanded && (\n        /**\n         * A note about using Overlay:\n         * If sub-menu is not rendered in a portal, useOverlayPosition doesn't work properly and the submenu may\n         * be rendered offscreen. Worse, it may introduce scroll in body (or some scrollable ancestor), which will\n         * trigger a scroll event which closes the menu if the menu is rendered in an overlay (like in MenuTrigger),\n         * which is almost always the case.\n         *\n         */\n        <Overlay\n          OverlayComponent={\n            /**\n             *  The FocusScope included in the default Overlay, messes with a particular expected behavior. So we use\n             *  SimpleOverlay, which just renders its children as a portal. There may be a better solution for that\n             *  problem, which would eliminate the need for the funky `OverlayComponent` prop on our `Overlay`\n             *  component. Something to look into in the future.\n             */\n            SimpleOverlay\n          }\n        >\n          <div ref={nestedMenuRef} {...positionProps}>\n            {renderSubmenu({ parentState: state, rootKey: item.key })}\n          </div>\n        </Overlay>\n      )}\n    </>\n  );\n}\n\n/**\n * A replacement for react-aria Overlay, which doesn't render FocusScope\n */\nfunction SimpleOverlay({\n  children,\n  portalContainer = document.body,\n}: {\n  children: ReactNode;\n  portalContainer?: Element | undefined;\n}) {\n  return ReactDOM.createPortal(children, portalContainer);\n}\n","import React from \"react\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections/ItemStateContext\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { useContextOrThrow } from \"@intellij-platform/core/utils/useContextOrThrow\";\n\nimport { useMenuItemLayout } from \"./MenuItem\";\nimport { StyledMenuItemIcon } from \"./StyledMenuItem\";\n\ninterface MenuItemLayoutProps {\n  icon?: React.ReactNode;\n  content: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\nconst StyledMenuItemLayout = styled.div`\n  display: flex;\n  align-items: center;\n  flex: 1; // to make sure it takes as much space as available in the menu item row, so that the suffix (shortcut) is pushed to the right\n`;\nconst Content = styled.span`\n  flex: 1;\n`;\n\nconst Shortcut = styled.kbd`\n  font-family: system-ui, sans-serif;\n  margin-left: 30px;\n  margin-right: -0.625rem;\n  color: ${({ theme }) =>\n    theme.currentForegroundAware(\n      theme.color(\"MenuItem.acceleratorForeground\")\n    )};\n`;\n\nexport const MenuItemLayout = ({\n  content,\n  shortcut,\n  icon,\n}: MenuItemLayoutProps) => {\n  const { isSelected } = useContextOrThrow(\n    ItemStateContext,\n    \"MenuItemLayout is meant to be rendered in Item component in Menus\"\n  );\n  const { labelProps, keyboardShortcutProps } = useMenuItemLayout();\n  const allowedIcon = !isSelected && icon;\n  return (\n    <StyledMenuItemLayout>\n      {allowedIcon && <StyledMenuItemIcon>{allowedIcon}</StyledMenuItemIcon>}\n      <Content {...labelProps}>{content}</Content>\n      {shortcut && <Shortcut {...keyboardShortcutProps}>{shortcut}</Shortcut>}\n    </StyledMenuItemLayout>\n  );\n};\n","import React, { HTMLProps } from \"react\";\nimport { MenuTriggerState } from \"@react-stately/menu\";\nimport { FocusScope } from \"@intellij-platform/core/utils/FocusScope\";\nimport { MenuOverlayContext } from \"@intellij-platform/core/Menu/Menu\";\nimport { Overlay } from \"@intellij-platform/core/Overlay\";\n\n/**\n * Overlay container for menu. Extracted into a separate component, to be used by components like MenuTrigger or\n * ContextMenuContainer, that need to render a menu as an overlay.\n * @private\n */\nexport function MenuOverlay({\n  children,\n  restoreFocus,\n  overlayProps,\n  overlayRef,\n  state,\n}: {\n  children: React.ReactNode;\n  restoreFocus?: boolean;\n  overlayProps: HTMLProps<HTMLDivElement>;\n  overlayRef: React.Ref<HTMLDivElement>;\n  state: MenuTriggerState;\n}) {\n  if (!state.isOpen) {\n    return null;\n  }\n  return (\n    <Overlay>\n      <FocusScope\n        restoreFocus={restoreFocus}\n        forceRestoreFocus={restoreFocus}\n        autoFocus\n      >\n        <MenuOverlayContext.Provider value={state}>\n          <div {...overlayProps} ref={overlayRef}>\n            {children}\n          </div>\n        </MenuOverlayContext.Provider>\n      </FocusScope>\n    </Overlay>\n  );\n}\n","import React, { HTMLAttributes, RefObject } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport { useMenuTrigger } from \"@react-aria/menu\";\nimport { useOverlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useMenuTriggerState } from \"@react-stately/menu\";\nimport { MenuTriggerProps as AriaMenuTriggerProps } from \"@react-types/menu\";\n\nimport { MenuOverlay } from \"./MenuOverlay\";\nimport { AriaButtonProps } from \"@react-types/button\";\n\nexport interface MenuTriggerProps\n  extends Omit<AriaMenuTriggerProps, \"closeOnSelect\"> {\n  restoreFocus?: boolean;\n  // TODO: replace render function children with normal children, and utilize PressResponder. Add a story for the\n  //  edge case of custom trigger, using PressResponder\n  children: (\n    props: HTMLAttributes<HTMLButtonElement>,\n    ref: RefObject<any> // Using a generic didn't seem to work for some reason\n  ) => React.ReactNode;\n  // NOTE: there is a chance of unchecked breaking change here, since this is not explicitly mentioned as public API\n  // of useButton, but it is passed to the underlying usePress.\n  preventFocusOnPress?: boolean;\n  /**\n   * By default, the menu is positioned relative to the trigger. `positioningTargetRef` can be used to have the menu\n   * positioned to another element. An example use case is when the menu trigger is a button inside some list item or\n   * text box, but the menu semantically belongs to the container list item or text box.\n   */\n  positioningTargetRef?: React.RefObject<HTMLElement>;\n  renderMenu: (props: {\n    menuProps: React.HTMLAttributes<HTMLElement>;\n  }) => React.ReactNode;\n}\n\n// FIXME: Escape doesn't close the menu\n// FIXME: Focus is not restored if nested menu are opened. It may be solved by using useOverlay and closing submenu in click outside.\n// FIXME: use PressResponder and replace render prop children with a normal react dom children. Issues with current impl:\n//  disabled trigger doesn't work as expected. props passed to children fn is html props, which is limiting for button\n//  components that don't accept arbitrary dom props.\n/**\n * Makes its children a trigger for a menu, rendered via {@link MenuTriggerProps#renderMenu} prop.\n * Closes the menu when a menu action is triggered.\n */\nexport const MenuTrigger: React.FC<MenuTriggerProps> = ({\n  children,\n  renderMenu,\n  direction = \"bottom\",\n  align = \"start\",\n  shouldFlip = true,\n  restoreFocus = true,\n  preventFocusOnPress = true,\n  positioningTargetRef,\n  ...otherProps\n}) => {\n  const menuTriggerProps: AriaMenuTriggerProps = {\n    ...otherProps,\n    direction,\n    align,\n    shouldFlip,\n  };\n  const state = useMenuTriggerState(menuTriggerProps);\n  const triggerRef = React.useRef(null);\n  const overlayRef = React.useRef(null);\n  // FIXME: Menu props is not used, but it's just about labelBy and id. Only needed for accessibility, but it would\n  //  require a `renderMenu` prop, instead of `menu`.\n  const { menuTriggerProps: triggerProps, menuProps } = useMenuTrigger(\n    { type: \"menu\" },\n    state,\n    triggerRef\n  );\n  const ariaButtonProps: AriaButtonProps<\"button\"> = {\n    ...triggerProps,\n    // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n    preventFocusOnPress,\n  };\n  const { buttonProps } = useButton(ariaButtonProps, triggerRef);\n  const { overlayProps } = useOverlay(\n    {\n      onClose: () => {\n        return state.close();\n      },\n      shouldCloseOnBlur: false,\n      isOpen: state.isOpen,\n      isKeyboardDismissDisabled: false,\n      isDismissable: true,\n      shouldCloseOnInteractOutside: (element) => {\n        // FIXME: this is kind of hacky and should be removed when nested menu is properly supported\n        return !element.matches(\"[role=menu] *\");\n      },\n    },\n    overlayRef\n  );\n\n  const { overlayProps: positionProps } = useOverlayPosition({\n    targetRef: positioningTargetRef ?? triggerRef,\n    overlayRef,\n    placement: getPlacement(direction, align),\n    shouldFlip,\n    offset: 0,\n    containerPadding: 0,\n    isOpen: state.isOpen,\n  });\n\n  return (\n    <>\n      {children(buttonProps, triggerRef)}\n      <MenuOverlay\n        overlayProps={mergeProps(overlayProps, positionProps)}\n        overlayRef={overlayRef}\n        state={state}\n        restoreFocus={restoreFocus}\n      >\n        {renderMenu({ menuProps })}\n      </MenuOverlay>\n    </>\n  );\n};\n\nfunction getPlacement(\n  direction: Required<AriaMenuTriggerProps>[\"direction\"],\n  align: Required<AriaMenuTriggerProps>[\"align\"]\n) {\n  switch (direction) {\n    case \"left\":\n    case \"right\":\n    case \"start\":\n    case \"end\":\n      return `${direction} ${align === \"end\" ? \"bottom\" : \"top\"}` as const;\n    case \"bottom\":\n    case \"top\":\n    default:\n      return `${direction} ${align}` as const;\n  }\n}\n","import React, {\n  HTMLAttributes,\n  RefObject,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport {\n  mergeProps,\n  useLayoutEffect,\n  useResizeObserver,\n} from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { ListCollection } from \"@react-stately/list\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport {\n  useCollectionSpeedSearch,\n  CollectionSpeedSearchMatches,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchInput,\n  SpeedSearchPopupProps,\n  SpeedSearchState,\n} from \"@intellij-platform/core/SpeedSearch\";\n\nimport { StyledMenu } from \"./StyledMenu\";\nimport { MenuContext, MenuProps, useMenu, useMenuState } from \"./Menu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\nimport { SubmenuProps, useSubmenu } from \"./Submenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuKeyboardDelegate } from \"./_useSubmenu\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledVerticalSeparator } from \"@intellij-platform/core/StyledSeparator\";\n\nexport interface SpeedSearchMenuProps<T>\n  extends Omit<MenuProps<T>, \"submenuBehavior\"> {\n  submenuBehavior?: Exclude<MenuProps<T>[\"submenuBehavior\"], \"default\">;\n  /**\n   * Text to show when the filtering is active but no match is found for the current query.\n   * @default \"Nothing to show\"\n   */\n  emptyText?: React.ReactNode;\n}\n\nconst StyledItemsContainer = styled.ul`\n  all: unset;\n  flex: 1;\n  overflow: auto;\n`;\n\nconst StyledSearchFieldWrapper = styled.div`\n  flex-shrink: 0;\n  padding: 0 0.2rem 0.3rem;\n`;\n\nconst StyledSpeedSearchMenu = styled(StyledMenu)`\n  --jui-menu-item-padding: 1.25rem;\n  ${StyledVerticalSeparator} {\n    margin: 0 3px; // FIXME: probably use theme\n  }\n`;\n\nconst StyledPlaceholder = styled.div`\n  color: ${({ theme }) =>\n    // Ref: StatusText => DEFAULT_ATTRIBUTES => SimpleTextAttributes.GRAYED_ATTRIBUTES\n    theme.color(\n      \"Component.infoForeground\",\n      theme.dark ? \"#787878\" : \"#999999\"\n    )};\n\n  // center positioning. Intentionally different from reference impl.\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 100%;\n\n  white-space: nowrap;\n`;\n\nfunction useSpeedSearchMenu<T>(\n  state: TreeState<T>,\n  rootKey: React.Key | null,\n  ref: React.RefObject<HTMLUListElement>,\n  containerRef: React.RefObject<HTMLDivElement>\n) {\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n  } = useCollectionSpeedSearch({\n    collection: useMemo(\n      () =>\n        new ListCollection(\n          rootKey\n            ? state.collection.getItem(rootKey).childNodes\n            : state.collection\n        ),\n      [rootKey, state.collection]\n    ),\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new MenuKeyboardDelegate(\n      rootKey,\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    keepSearchActiveOnBlur: true,\n    focusBestMatch: true,\n    ref,\n  });\n\n  // When a menu item which was focused is filtered out, the focus goes to body.\n  // We manually move focus back to the container.\n  useEffect(() => {\n    const element = ref.current;\n    if (\n      element &&\n      state.selectionManager.isFocused &&\n      !element?.contains(document.activeElement)\n    ) {\n      focusSafely(element);\n    }\n  });\n\n  const lastSize = useRef<{ width: number; height: number } | null>(null);\n  const [size, setSize] = useState<{ width: number; height: number } | null>(\n    null\n  );\n  const measureSize = () => {\n    const { offsetWidth = 0, offsetHeight = 0 } = containerRef.current || {};\n    if (offsetWidth > 0 && offsetHeight > 0) {\n      lastSize.current = {\n        width: offsetWidth,\n        height: offsetHeight,\n      };\n    }\n  };\n  const isSearchActive =\n    speedSearch.active && speedSearch.searchTerm.length > 0;\n  useResizeObserver({\n    ref: containerRef,\n    onResize: useEventCallback(() => {\n      if (!isSearchActive) {\n        measureSize();\n      }\n    }),\n  });\n  useLayoutEffect(() => {\n    if (isSearchActive) {\n      if (lastSize.current) {\n        setSize(lastSize.current);\n      }\n    } else {\n      if (!lastSize.current) {\n        measureSize();\n      }\n      setSize(null);\n    }\n  }, [isSearchActive]);\n\n  const sizeStyleProps: HTMLAttributes<HTMLElement> = size\n    ? {\n        style: {\n          ...size,\n          minHeight: size.height,\n          maxHeight: size.height,\n        },\n      }\n    : {};\n  return {\n    speedSearch,\n    keyboardDelegate,\n    selectionManager,\n    speedSearchContainerProps: mergeProps<HTMLAttributes<HTMLElement>[]>(\n      speedSearchContainerProps,\n      sizeStyleProps,\n      {\n        onMouseDown: (e: React.MouseEvent) => {\n          // Until SearchInput and connecting that to a selectable list is implemented, we should prevent menu from\n          // losing focus when the fake search input is clicked\n          e.preventDefault();\n        },\n      }\n    ),\n    searchPopupProps,\n  };\n}\n\n/**\n * Drop-in replacement for Menu, which implements SpeedSearch.\n *\n *\n */\nexport const SpeedSearchMenu = <T extends object>({\n  submenuBehavior = \"toggleOnPress\",\n  autoFocus = \"first\",\n  emptyText = \"Nothing to show\",\n  minWidth,\n  ...props\n}: SpeedSearchMenuProps<T>) => {\n  const onAction = (key: React.Key) => {\n    props.onAction?.(key);\n    speedSearch.clear();\n  };\n  const ref = React.useRef<HTMLUListElement>(null);\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const state = useMenuState({ ...props });\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, null, ref, containerRef);\n  const { menuContextValue, menuProps } = useMenu(\n    {\n      ...props,\n      autoFocus,\n      onAction,\n      keyboardDelegate,\n      submenuBehavior,\n    },\n    state,\n    ref\n  );\n\n  return (\n    <MenuContext.Provider\n      value={{\n        ...menuContextValue,\n        renderSubmenu: (props) => (\n          <SpeedSearchSubmenu emptyText={emptyText} {...props} />\n        ),\n      }}\n    >\n      <StyledSpeedSearchMenu\n        as=\"div\"\n        ref={containerRef}\n        style={{ minWidth }}\n        {...speedSearchContainerProps}\n        fillAvailableSpace={props.fillAvailableSpace}\n      >\n        <SpeedSearchMenuContent\n          items={[...state.collection]}\n          emptyText={emptyText}\n          speedSearch={speedSearch}\n          searchPopupProps={searchPopupProps}\n          state={state}\n          menuProps={menuProps}\n          menuRef={ref}\n        />\n      </StyledSpeedSearchMenu>\n    </MenuContext.Provider>\n  );\n};\n\nfunction SpeedSearchMenuContent<T>({\n  items,\n  state,\n  speedSearch,\n  searchPopupProps,\n  menuProps,\n  menuRef,\n  emptyText,\n}: {\n  state: TreeState<T>;\n  items: Node<T>[];\n  speedSearch: SpeedSearchState & { matches: CollectionSpeedSearchMatches };\n  searchPopupProps: SpeedSearchPopupProps;\n  menuProps: HTMLAttributes<HTMLElement>;\n  menuRef: RefObject<HTMLUListElement>;\n  emptyText: React.ReactNode;\n}) {\n  const filter = speedSearch.active\n    ? ({ key, type }: Node<T>) =>\n        type !== \"item\" || speedSearch.matches.has(key)\n    : undefined;\n  return (\n    <>\n      {searchPopupProps.children && (\n        <StyledSearchFieldWrapper\n          onClick={(e) => {\n            e.preventDefault();\n          }}\n        >\n          <SpeedSearchInput {...searchPopupProps} clear={speedSearch.clear} />\n        </StyledSearchFieldWrapper>\n      )}\n      <StyledItemsContainer {...menuProps} ref={menuRef}>\n        {renderMenuNodes(state, items, filter)}\n        {speedSearch.active && speedSearch.matches.size === 0 && (\n          <StyledPlaceholder>{emptyText}</StyledPlaceholder>\n        )}\n      </StyledItemsContainer>\n    </>\n  );\n}\n\nfunction SpeedSearchSubmenu<T>({\n  parentState,\n  rootKey,\n  emptyText,\n}: SubmenuProps<T> & { emptyText: React.ReactNode }) {\n  const ref = useRef<HTMLUListElement>(null);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const {\n    speedSearch,\n    speedSearchContainerProps,\n    searchPopupProps,\n    keyboardDelegate,\n  } = useSpeedSearchMenu(state, rootKey, ref, containerRef);\n  const { submenuProps } = useSubmenu(\n    { rootKey, parentState, keyboardDelegate },\n    state,\n    ref\n  );\n\n  return (\n    <StyledSpeedSearchMenu\n      {...speedSearchContainerProps}\n      as=\"div\"\n      ref={containerRef}\n    >\n      <SpeedSearchMenuContent\n        items={[...(rootItem?.childNodes || [])]}\n        speedSearch={speedSearch}\n        searchPopupProps={searchPopupProps}\n        state={state}\n        menuProps={submenuProps}\n        menuRef={ref}\n        emptyText={emptyText}\n      />\n    </StyledSpeedSearchMenu>\n  );\n}\n","import { css } from \"styled-components\";\n\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { StyledVerticalSeparator } from \"../StyledSeparator\";\nimport { UnknownThemeProp } from \"../Theme/Theme\";\n\nimport { StyledMenuItem, StyledMenuItemIcon } from \"./StyledMenuItem\";\n\nexport const MENU_VERTICAL_PADDING = 5;\nexport const MENU_BORDER_WIDTH = 1;\n\n// noinspection CssInvalidPropertyValue\nexport const StyledMenu = styled.ul<{ fillAvailableSpace?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  flex-direction: column;\n  font-size: 0.8rem;\n  margin: 0;\n  padding: ${MENU_VERTICAL_PADDING}px 0;\n  outline: none;\n  list-style: none;\n  width: fit-content;\n  min-width: 120px;\n  overflow: auto;\n  // Border doesn't seem to be painted in the original impl. IdeaPopupMenuUI.isUnderPopup(c) seemed to return false\n  // in all cases. More info: https://github.com/JetBrains/intellij-community/blob/c5ece483811a3ab546fc3880225efb02cc8b94dd/platform/platform-impl/src/com/intellij/ide/ui/laf/darcula/ui/DarculaPopupMenuBorder.java#L24\n  /*  border: ${MENU_BORDER_WIDTH}px solid\n    ${({ theme }) =>\n    theme.color(\"Menu.borderColor\", !theme.dark ? \"#CDCDCD\" : \"#515151\")};*/\n  ${WINDOW_SHADOW};\n  background: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.background\" as UnknownThemeProp<\"PopupMenu.background\">\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"PopupMenu.foreground\" as UnknownThemeProp<\"PopupMenu.foreground\">\n    )};\n\n  ${StyledVerticalSeparator}:first-child,\n  ${StyledVerticalSeparator}:last-child, \n  ${StyledVerticalSeparator} + ${StyledVerticalSeparator} {\n    display: none;\n  }\n  ${StyledVerticalSeparator} {\n    background-color: ${({ theme }) => theme.color(\"Menu.separatorColor\")};\n    height: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.height\") ?? 3}px`};\n    padding: ${({ theme }) =>\n      `${theme.value(\"PopupMenuSeparator.stripeIndent\") ?? 1}px 0`};\n    margin: ${({ theme }) =>\n      `0 ${theme.value(\"PopupMenuSeparator.withToEdge\") ?? 1}px`};\n  }\n  ${({ fillAvailableSpace }) =>\n    fillAvailableSpace &&\n    css`\n      flex: 1;\n      width: fill-available; // will be converted to --webkit-fill-available and --moz-available, but doesn't work in FF\n      height: fill-available;\n    `}\n\n  --jui-menu-item-padding: 1rem;\n  --jui-menu-item-icon-width: 1rem;\n  --jui-menu-item-icon-spacing: 0.3125rem;\n\n  ${StyledMenuItem} {\n    // NOTE: The left margin seems not to be consistent in all menus.\n    padding-left: var(--jui-menu-item-padding);\n  }\n  &:has(${StyledMenuItemIcon}) {\n    // Adjusting item padding for menus with icon to be slightly smaller. Based on observations on the reference impl.\n    // Could be handled by a negative margin on icons as well.\n    --jui-menu-item-padding: 0.75rem;\n\n    // CSS-only solution to conditionally add left margin to menu items without icon, if there is at least one menu item\n    // with icon, in the current menu. To have text in all menu items aligned. The extra margin is avoided if there is no\n    // menu item with icon. It relies on :has() css pseudo-class which is not supported in FF at the moment.\n    ${StyledMenuItem}:not(:has(${StyledMenuItemIcon})) {\n      padding-left: calc(\n        var(--jui-menu-item-padding) + var(--jui-menu-item-icon-width) +\n          var(--jui-menu-item-icon-spacing)\n      );\n    }\n  }\n  ${StyledMenuItemIcon} {\n    width: var(--jui-menu-item-icon-width);\n    margin-right: var(--jui-menu-item-icon-spacing);\n  }\n`;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nexport const StyledMenuItemIcon = styled.span`\n  display: inline-flex; // prevents unwanted increased height\n`;\n\nexport const StyledNestedArrow = styled.span`\n  display: inline-flex; // to make it not take more height than the icon\n  margin-right: -0.75rem;\n  margin-left: 0.75rem;\n`;\n\nconst highlightedStyle = css`\n  color: ${({ theme }) =>\n    theme.asCurrentForeground(\n      theme.color(\n        \"MenuItem.selectionForeground\" as UnknownThemeProp<\"MenuItem.selectionForeground\">\n      )\n    )};\n  background: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.selectionBackground\" as UnknownThemeProp<\"MenuItem.selectionBackground\">\n    )};\n`;\nconst defaultStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.foreground\" as UnknownThemeProp<\"MenuItem.foreground\">\n    )};\n  background: unset;\n`;\nconst disabledStyle = css`\n  color: ${({ theme }) =>\n    theme.color(\"MenuItem.disabledForeground\") + \"!important\"};\n  background: unset !important;\n`;\nexport const StyledMenuItem = styled.li<{\n  isDisabled: boolean;\n  isActive: boolean;\n}>`\n  position: relative; // for being able to position arrow icon absolutely\n  outline: none;\n  cursor: default;\n  white-space: nowrap;\n\n  // bg/fg style for different states. Order is based on how they should override each other\n  ${defaultStyle};\n  ${({ isActive }) => isActive && highlightedStyle};\n  ${({ isDisabled }) => isDisabled && disabledStyle};\n\n  padding-right: 1.25rem;\n  line-height: 1.5; // to make the item have the right height\n  display: flex;\n  align-items: center;\n`;\n","import React, { useContext, useEffect, useRef } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { AriaMenuOptions, useMenu } from \"@react-aria/menu\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport {\n  MenuKeyboardDelegate,\n  useSubmenu as useSubmenuAria,\n} from \"./_useSubmenu\";\nimport { useSubmenuState } from \"./_useSubmenuState\";\nimport { MenuContext } from \"./Menu\";\nimport { StyledMenu } from \"./StyledMenu\";\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport function useSubmenu<T>(\n  {\n    rootKey,\n    parentState,\n    keyboardDelegate,\n  }: { rootKey: React.Key; parentState: TreeState<T> } & Pick<\n    AriaMenuOptions<T>,\n    \"keyboardDelegate\"\n  >,\n  state: TreeState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const rootItem = state.collection.getItem(rootKey);\n  const {\n    submenuBehavior,\n    autoFocus = true,\n    onClose,\n    onAction,\n  } = useContext(MenuContext);\n  let { menuProps } = useMenu(\n    {\n      \"aria-label\": rootItem?.[\"aria-label\"] || rootItem?.textValue,\n      onAction,\n      onClose,\n      selectedKeys: state.selectionManager.selectedKeys,\n      keyboardDelegate:\n        keyboardDelegate ||\n        new MenuKeyboardDelegate(\n          rootKey,\n          state.collection,\n          state.disabledKeys,\n          ref\n        ),\n      autoFocus,\n    },\n    state,\n    ref\n  );\n  const { submenuProps } = useSubmenuAria({ rootKey }, parentState, ref);\n\n  const submenuBehaviorProps = {\n    onKeyDown: (e: React.KeyboardEvent) => {\n      if (e.key === \"Escape\") {\n        // Close the menu and submenu root node.\n        state.toggleKey(rootKey);\n        state.selectionManager.setFocusedKey(rootKey);\n        parentState.selectionManager.setFocused(true);\n        if (submenuBehavior !== \"default\") {\n          e.stopPropagation();\n        }\n        return;\n      }\n    },\n  };\n\n  useEffect(() => {\n    setTimeout(() => {\n      // we need this hack until the nested menu is properly supported. That's because when the element is hovered\n      // it sets the focus key, which will move focus to that item.\n      // noinspection PointlessBooleanExpressionJS seems to be false positive. autoFocus can be \"first\" or \"last\"\n      if (autoFocus === true) {\n        ref.current?.focus();\n      }\n    });\n  }, []);\n\n  return {\n    submenuProps: mergeProps(menuProps, submenuProps, submenuBehaviorProps),\n  };\n}\n\nexport interface SubmenuProps<T> {\n  parentState: TreeState<T>;\n  rootKey: React.Key;\n}\n\nexport function Submenu<T>({ parentState, rootKey }: SubmenuProps<T>) {\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useSubmenuState(parentState);\n  const rootItem = state.collection.getItem(rootKey);\n\n  const { submenuProps } = useSubmenu({ rootKey, parentState }, state, ref);\n\n  return (\n    <StyledMenu {...submenuProps} ref={ref}>\n      {renderMenuNodes(state, [...(rootItem?.childNodes || [])])}\n    </StyledMenu>\n  );\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport React, { Key, RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\n\nexport class MenuKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  private keys: React.Key[];\n  constructor(\n    rootKey: Key | null,\n    private collection: Collection<Node<T>>,\n    disabledKeys: Set<React.Key>,\n    ref: React.RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n    this.keys = [...collection.getKeys()]\n      .map((key) => collection.getItem(key))\n      .flatMap((item) => {\n        if (item.parentKey == rootKey) {\n          if (item.type === \"item\") {\n            return [item.key];\n          } else if (item.type === \"section\") {\n            return [...item.childNodes].map(({ key }) => key);\n          }\n        }\n        return [];\n      });\n  }\n\n  getFirstKey(): React.Key {\n    return this.keys[0];\n  }\n  getLastKey(): React.Key {\n    return this.keys.slice(-1)[0];\n  }\n\n  getKeyBelow(key: React.Key): React.Key {\n    const keyBelow = super.getKeyBelow(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyBelow) ? keyBelow : null;\n  }\n  getKeyAbove(key: React.Key): React.Key {\n    const keyAbove = super.getKeyAbove(key);\n    // @ts-expect-error: getKeyBelow should be allowed to return null, but typing is currently inaccurate in react-aria\n    return this.keys.includes(keyAbove) ? keyAbove : null;\n  }\n}\n\n/**\n * Behavior accessibility of submenus:\n * - Closing submenu on ArrowLeft key press.\n *   Note that it can't be implemented in useMenuItem, because the focus might be on no the submenu itself and not any\n *   of its items\n * @param rootKey: Key of the root node, the submenu is created from its children\n * @param state\n * @param ref\n */\nexport function useSubmenu<T>(\n  { rootKey }: { rootKey: Key },\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const { keyboardProps: submenuProps } = useKeyboard({\n    onKeyDown: (e) => {\n      // Keyboard events bubble through portals. Don't handle keyboard events\n      // for elements outside the collection (e.g. menus).\n      if (!ref.current?.contains(e.target as Element)) {\n        e.continuePropagation();\n        return;\n      }\n      const root = state.collection.getItem(rootKey);\n      if (e.key === \"ArrowLeft\" && state.expandedKeys.has(root.key)) {\n        state.toggleKey(root.key);\n        state.selectionManager.setFocused(true);\n        return;\n      }\n      e.continuePropagation();\n    },\n  });\n\n  return {\n    submenuProps,\n  };\n}\n","import { TreeState } from \"@react-stately/tree\";\nimport { Key, useRef, useState } from \"react\";\nimport {\n  MultipleSelectionState,\n  SelectionManager,\n} from \"@react-stately/selection\";\n\n/**\n * Creates a TreeState corresponding to the submenu, from the state of a parent (sub)menu.\n * The collection and everything is the same, and the only difference from the parent state is selection manager\n * having a separate focused state to keep the focused state of each menu container separately, as the submenus\n * are usually rendered in separate overlays.\n */\nexport function useSubmenuState<T>(parentState: TreeState<T>) {\n  // We want synchronous updates to `isFocused` and `focusedKey` after their setters are called.\n  // But we also need to trigger a re-render. So, we have both a ref (sync) and state (async).\n  const [, setFocused] = useState(false);\n  const [, setFocusedKey] = useState<Key | null>(null);\n  const isFocusedRef = useRef(false);\n  const focusedKeyRef = useRef<Key | null>(null);\n\n  const state: MultipleSelectionState = {\n    // @ts-expect-error state is private\n    ...parentState.selectionManager.state,\n    setFocused: (isFocused: boolean) => {\n      isFocusedRef.current = isFocused;\n      setFocused(isFocused);\n    },\n    setFocusedKey(key: Key) {\n      focusedKeyRef.current = key;\n      setFocusedKey(key);\n    },\n  };\n  Object.defineProperties(state, {\n    isFocused: {\n      get() {\n        return isFocusedRef.current;\n      },\n    },\n    focusedKey: {\n      get() {\n        return focusedKeyRef.current!;\n      },\n    },\n  });\n\n  return {\n    ...parentState,\n    selectionManager: new SelectionManager(parentState.collection, state),\n  };\n}\n","import React from \"react\";\nimport { useMenuSection } from \"@react-aria/menu\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { renderMenuNodes } from \"./renderMenuNodes\";\n\nexport interface MenuSectionProps<T> {\n  item: Node<T>;\n  state: TreeState<T>;\n  filter?: (node: Node<T>) => boolean;\n}\n\nconst StyledMenuHeading = styled.div`\n  cursor: default;\n  padding: 2px 0 2px 12px;\n  font-weight: bold;\n  font-size: 0.8125rem;\n  color: ${({ theme }) =>\n    theme.color(\n      \"MenuItem.disabledForeground\"\n    )}; // TODO: make sure about it. It's probably not correct color\n`;\n\nconst StyledMenuSectionItemsContainer = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n\nexport const MenuSection = <T extends unknown>({\n  item,\n  state,\n  filter = () => true,\n}: MenuSectionProps<T>): React.ReactElement => {\n  let { itemProps, headingProps, groupProps } = useMenuSection({\n    heading: item.rendered,\n    \"aria-label\": item[\"aria-label\"],\n  });\n\n  const nodes = [...item.childNodes].filter(filter);\n  if (nodes.filter(({ type }) => type === \"item\").length === 0) {\n    return <></>;\n  }\n  return (\n    <>\n      <li {...itemProps}>\n        {item.rendered && (\n          <StyledMenuHeading {...headingProps}>\n            {item.rendered}\n          </StyledMenuHeading>\n        )}\n        <StyledMenuSectionItemsContainer {...groupProps}>\n          {renderMenuNodes(state, nodes)}\n        </StyledMenuSectionItemsContainer>\n      </li>\n    </>\n  );\n};\n","import React from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { Node } from \"@react-types/shared\";\nimport { ListDivider } from \"@intellij-platform/core/List/ListDivider\"; // private import\n\nimport { MenuItem } from \"./MenuItem\";\nimport { MenuSection } from \"./MenuSection\";\n\nexport function renderMenuNodes<T>(\n  state: TreeState<T>,\n  nodes: Node<T>[],\n  filter: (node: Node<T>) => boolean = () => true\n) {\n  return nodes.filter(filter).map((node) => {\n    switch (node.type) {\n      case \"item\":\n        return <MenuItem key={node.key} item={node} state={state} />;\n      case \"section\":\n        return (\n          <>\n            {node.props.hasDivider && (\n              <ListDivider key={node.key + \"-divider\"} />\n            )}\n            <MenuSection\n              key={node.key}\n              item={node}\n              state={state}\n              filter={filter}\n            />\n          </>\n        );\n      case \"divider\":\n        return <ListDivider key={node.key} />;\n    }\n  });\n}\n","import { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\nimport React, { useEffect } from \"react\";\n\n/**\n * A workaround for an issue in measuring overlay size, caused by a limitation/bug in how React 17 runs effects when\n * children suspend rendering: https://github.com/facebook/react/issues/21510\n *\n * Here is a simplified demonstration of the issue:\n * Expected behavior (React 18): https://codesandbox.io/s/parent-effects-suspense-v18-38m8p7?file=/src/App.tsx\n * Broken behavior (React 17): https://codesandbox.io/s/parent-effects-suspense-v17-h39g4g\n *\n * The overlay content size measuring runs in an effect, and that effect won't run when the content is rendered after\n * suspense.\n */\nexport function UNSAFE_React17SuspenseFix({\n  measureContentSize,\n  children,\n}: {\n  measureContentSize: () => void;\n  children: React.ReactNode;\n}) {\n  if (React.version.startsWith(\"17\")) {\n    return (\n      <React.Suspense\n        fallback={\n          <NullSuspenseFallback afterUnsuspended={measureContentSize} />\n        }\n      >\n        {children}\n      </React.Suspense>\n    );\n  }\n  return <>{children}</>;\n}\n\nfunction NullSuspenseFallback({\n  afterSuspended: afterSuspendedProp = () => {},\n  afterUnsuspended: afterUnsuspendedProp = () => {},\n}: {\n  afterUnsuspended?: () => void;\n  afterSuspended?: () => void;\n}) {\n  const afterSuspended = useEventCallback(afterSuspendedProp);\n  const afterUnsuspended = useEventCallback(afterUnsuspendedProp);\n  useEffect(() => {\n    afterSuspended?.();\n    return () => {\n      afterUnsuspended?.();\n    };\n  }, []);\n  return null;\n}\n","import React, { FocusEventHandler, useContext, useRef } from \"react\";\nimport { useModal, useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { focusSafely, FocusScope } from \"@react-aria/focus\";\nimport { useDialog } from \"@react-aria/dialog\";\nimport { AriaDialogProps } from \"@react-types/dialog\"; // temporary phantom dependency\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { WindowContext } from \"@intellij-platform/core/ModalWindow/WindowContext\";\nimport { UNSAFE_React17SuspenseFix } from \"@intellij-platform/core/Overlay/UNSAFE_React17SuspenseFix\";\n\nexport interface ModalWindowProps\n  extends AriaDialogProps,\n    ResizableMovableOverlayOptions {\n  children: React.ReactNode;\n  onClose?: () => void;\n}\n\nconst StyledWindowUnderlay = styled.div`\n  position: fixed;\n  z-index: 1000; // FIXME: z-index should not be hard-coded like this\n  inset: 0;\n`;\nconst StyledWindowContainer = styled.div`\n  position: fixed;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  border-radius: 8px;\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n  outline: 1px solid #555; // FIXME\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledWindowInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const DEFAULT_WINDOW_MIN_WIDTH = 50;\nexport const DEFAULT_WINDOW_MIN_HEIGHT = 24;\n\nexport const WindowControllerContext = React.createContext<\n  Partial<Pick<ModalWindowProps, \"onClose\">>\n>({});\n\n/**\n * A movable/resizable modal window. The window header which holds the title, can be used to drag the window around.\n * In the reference impl, modal windows are os-native, and contain os-level buttons for minimize/close/maximise, which\n * are not relevant here since they wouldn't be os-native windows. A close button is still relevant (and kind of\n * necessary) and will be added in next iterations.\n *\n * The content container doesn't come with any padding. Other related components should be used for common layouts in\n * modal windows.\n * Example use cases: Window for git operations such as push, update, revert, new branch, etc.\n *\n * ![img.png](https://user-images.githubusercontent.com/3150694/181095858-968c5c66-2ae7-4e40-84e3-e6df43cd4aa4.png)\n *\n * NOTE: The part regarding rendering OverlayInteractionHandler, and rendering as a dialog with a focus scope, in an\n * overlay container could be extracted into a component which is then used to create custom resizable/movable overlay\n * dialogs, like \"Branches\", or \"Search Everywhere\".\n *\n * TODO: show close button (maybe os-aware styles?)\n *\n */\nexport const ModalWindow = ({\n  interactions = \"all\",\n  minWidth = DEFAULT_WINDOW_MIN_WIDTH,\n  minHeight = DEFAULT_WINDOW_MIN_HEIGHT,\n  ...props\n}: ModalWindowProps): React.ReactElement => {\n  const { children } = props;\n  const propsContext = useContext(WindowControllerContext);\n  const onClose = () => {\n    propsContext.onClose?.();\n    props.onClose?.();\n  };\n\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { overlayProps, underlayProps } = useOverlay(\n    {\n      isOpen: true, // maybe allow rendering closed window? :-?\n      onClose,\n      isDismissable: false,\n      isKeyboardDismissDisabled: false,\n      shouldCloseOnBlur: false,\n    },\n    ref\n  );\n  usePreventScroll();\n  const { modalProps } = useModal();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  const {\n    bounds: style,\n    overlayInteractionHandlerProps,\n    UNSAFE_measureContentSize,\n  } = useResizableMovableOverlay(ref, { ...props, minHeight, minWidth });\n\n  const { focusContainmentFixProps } = useFocusContainmentFix();\n\n  return (\n    <StyledWindowUnderlay {...underlayProps}>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        <FocusScope contain restoreFocus autoFocus>\n          <StyledWindowContainer\n            {...mergeProps(\n              overlayProps,\n              dialogProps,\n              modalProps,\n              focusContainmentFixProps,\n              { style }\n            )}\n            ref={ref}\n          >\n            <StyledWindowInnerContainer>\n              <WindowContext.Provider\n                value={{\n                  isActive: true, // because it's modal. WindowContext would be used for non-modal windows too, in future\n                  titleProps,\n                  movable: interactions !== \"none\",\n                }}\n              >\n                <UNSAFE_React17SuspenseFix\n                  measureContentSize={UNSAFE_measureContentSize}\n                >\n                  {children}\n                </UNSAFE_React17SuspenseFix>\n              </WindowContext.Provider>\n            </StyledWindowInnerContainer>\n            {interactions === \"all\" && <OverlayResizeHandles />}\n          </StyledWindowContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </StyledWindowUnderlay>\n  );\n};\n\n/**\n * The way FocusScope is implemented at the moment, it's possible for another focus scope to steal the focus,\n * right after the modal window is opened. The issue is not tracked down to the root cause. But with this hook,\n * we make sure there is no way for focus to go out of the modal window, when it's mounted.\n */\nfunction useFocusContainmentFix<T extends HTMLElement>() {\n  const lastFocusedElementRef = useRef<HTMLElement | null>(null);\n  const onFocus: FocusEventHandler<T> = (e) => {\n    lastFocusedElementRef.current = e.target;\n  };\n  const onBlur: FocusEventHandler = (e) => {\n    const probablyFocusedElement = e.relatedTarget;\n    if (\n      !probablyFocusedElement ||\n      (probablyFocusedElement instanceof Element &&\n        !e.currentTarget.contains(probablyFocusedElement))\n    ) {\n      const elementToFocus = lastFocusedElementRef.current;\n      if (elementToFocus) {\n        focusSafely(elementToFocus);\n      }\n    }\n  };\n  return {\n    focusContainmentFixProps: {\n      onFocus,\n      onBlur,\n    },\n  };\n}\n","import React from \"react\";\nimport { DOMAttributes } from \"@react-types/shared\";\n\nexport const WindowContext = React.createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\n\nconst StyledFooter = styled.div<{ hasBorder?: boolean }>`\n  padding: 0.625rem 0.875rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: space-between;\n  align-items: center;\n  border-top: 1px solid transparent;\n  border-color: ${({ hasBorder, theme }) =>\n    hasBorder && theme.commonColors.contrastBorder};\n`;\nconst StyledFooterSide = styled.div`\n  display: flex;\n  gap: 0.75rem;\n`;\n\n/**\n * Implements the common layout for window footer, to be used in {@link ModalWindowProps#footer}.\n * Footer has a left and a right side. There is a standard gap between the children of each side.\n */\nexport function WindowFooter({\n  left,\n  right,\n  hasBorder,\n}: {\n  /**\n   * The content to go to the left side the footer. A help icon button is very common on the left side.\n   */\n  left?: React.ReactNode;\n  /**\n   * The content to go to the right side the footer. {@link Button}s are usually used inside the right content\n   */\n  right?: React.ReactNode;\n  /**\n   * Whether to show top border for footer or not\n   */\n  hasBorder?: boolean;\n}) {\n  return (\n    <StyledFooter hasBorder={hasBorder}>\n      <StyledFooterSide>{left}</StyledFooterSide>\n      <StyledFooterSide>{right}</StyledFooterSide>\n    </StyledFooter>\n  );\n}\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { WindowContext } from \"./WindowContext\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nconst StyledWindowTitle = styled.h1`\n  margin: 0;\n  text-align: center;\n  font-size: 13px; // not rem! intentional\n  line-height: 20px;\n  cursor: default;\n  user-select: none;\n  padding: 0 8px;\n`;\n\n/**\n * Implements appearance of Window header, and also acts as a handle for moving the window.\n * Expected to be used with {@link WindowLayout}:\n *\n * @example\n * ```tsx\n * <ModalWindow>\n *    <WindowLayout header={<WindowHeader>header</WindowHeader>} />\n * </ModalWindow>\n * ```\n */\nexport const WindowHeader = ({ children }: { children?: React.ReactNode }) => {\n  const { movable, titleProps } = useContext(WindowContext);\n  const renderTitle = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledWindowTitle {...mergeProps(titleProps, otherProps)}>\n      {children || <>&nbsp;</>}\n    </StyledWindowTitle>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderTitle(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderTitle()\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport React from \"react\";\nimport { WindowHeader } from \"./WindowHeader\";\nimport { WindowFooter } from \"@intellij-platform/core/ModalWindow/WindowFooter\";\n\nconst StyledWindowFooter = styled.div`\n  min-height: min-content;\n`;\n\nconst StyledWindowContentWrapper = styled.div`\n  overflow: auto;\n  flex: 1;\n`;\n\n/**\n * Window content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function WindowLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the window at the top. Use {@link WindowLayout.Header} for the default window header,\n   * which also acts as a move handle for the window. If a string is passed, it will be wrapped by\n   * {@link WindowLayout.Header} automatically.\n   */\n  header: React.ReactNode;\n  /**\n   * Scrollable content of the window.\n   */\n  content: React.ReactNode;\n  /**\n   * An area at the bottom of the window which is not scrolled as opposed to `content`. Use {@link WindowLayout.Footer}\n   * for rendering the common layout of a window footer.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <>\n      {header &&\n        (typeof header === \"string\" ? (\n          <WindowHeader>{header}</WindowHeader>\n        ) : (\n          header\n        ))}\n      <StyledWindowContentWrapper>{content}</StyledWindowContentWrapper>\n      {footer && <StyledWindowFooter>{footer}</StyledWindowFooter>}\n    </>\n  );\n}\n\n// Just for improved discoverability. Might as well export WindowFooter and WindowHeader instead.\nWindowLayout.Footer = WindowFooter;\nWindowLayout.Header = WindowHeader;\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport {\n  ModalWindow,\n  WindowControllerContext,\n  ModalWindowProps,\n} from \"./ModalWindow\";\n\ninterface WindowManagerAPI {\n  /**\n   * Shows a modal window within the stack of windows managed by {@link WindowManager}.\n   * The opened windows will be closed when `onClose` interactions happen.\n   */\n  open(\n    props:\n      | React.ReactElement<ModalWindowProps, typeof ModalWindow>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<ModalWindowProps, typeof ModalWindow>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"WindowManager not found. Wrap your application with WindowManager to be able to open windows imperatively\"\n  );\n};\n\nconst WindowsContext = React.createContext<WindowManagerAPI>({\n  open: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing windows.\n *\n */\nexport const useWindowManager = (): WindowManagerAPI =>\n  useContext(WindowsContext);\n\ntype WindowElement = ReactElement<ModalWindowProps, typeof ModalWindow>;\n\nexport interface WindowManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link useWindowManager}) for opening windows.\n * It renders windows in a portal appended to `body`, unless `disablePortal` is `true`.\n *\n */\nexport const WindowManager: React.FC<WindowManagerProps> = ({ children }) => {\n  const [windows, setWindows] = useState<Array<WindowElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<WindowManagerAPI>(() => {\n    const openModalWindow: WindowManagerAPI[\"open\"] = (content) => {\n      newKeyRef.current++;\n      const close = () => {\n        setWindows((currentWindows) =>\n          currentWindows.filter((aWindow) => aWindow !== window)\n        );\n      };\n      const window = (\n        <WindowControllerContext.Provider\n          value={{ onClose: close }}\n          key={newKeyRef.current}\n        >\n          {typeof content === \"function\" ? content({ close }) : content}\n        </WindowControllerContext.Provider>\n      );\n      setWindows((currentWindows) => currentWindows.concat(window));\n    };\n    return {\n      open: openModalWindow,\n    };\n  }, []);\n\n  return (\n    <WindowsContext.Provider value={api}>\n      {children}\n      {windows}\n    </WindowsContext.Provider>\n  );\n};\n","import React, { useContext, useRef } from \"react\";\nimport { Overlay as AriaOverlay, OverlayProps } from \"@react-aria/overlays\";\n\nconst ParentOverlayContext = React.createContext<HTMLElement | null>(null);\n\n/**\n * A (drop-in replacement) wrapper around Overlay, which makes sure overlays created in nested\n * react components will be ported to the same top level container. This is especially useful to detect\n * \"outside clicks\" when overlays are nested. The most common example would be nested menu in popup.\n *\n */\nexport function Overlay({\n  children,\n  OverlayComponent = AriaOverlay,\n}: {\n  children: React.ReactNode;\n  OverlayComponent?: React.ComponentType<OverlayProps>;\n}) {\n  const root = useContext(ParentOverlayContext);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  if (root) {\n    return (\n      <OverlayComponent portalContainer={root}>{children}</OverlayComponent>\n    );\n  }\n  return (\n    <ParentOverlayContext.Provider value={containerRef.current}>\n      <OverlayComponent>\n        <div ref={containerRef} data-overlay-root=\"\">\n          {children}\n        </div>\n      </OverlayComponent>\n    </ParentOverlayContext.Provider>\n  );\n}\n\n/**\n * Returns true, if element1 and element2 are in nested overlays. \"Nested\" being in terms of React component tree.\n * Useful for detecting \"outside click\" when overlay components are nested in each other.\n */\nexport function areInNestedOverlays(\n  element1: Element | null,\n  element2: Element | null\n) {\n  const overlayRoot1 = element1?.closest(\"[data-overlay-root]\");\n  const overlayRoot2 = element2?.closest(\"[data-overlay-root]\");\n  return Boolean(overlayRoot1) && overlayRoot1 === overlayRoot2;\n}\n","import React, { useContext } from \"react\";\n\nexport type Bounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * TODO(docs): add a few words about this abstraction and it's use.\n */\nexport type OverlayInteractionHandlerProps = {\n  /**\n   * Signals start of a UI interaction like resize or move, in which overlay bounds change.\n   */\n  startInteraction: (type: \"move\" | \"resize\") => Bounds;\n  /**\n   * Used to update bounds state during a UI interaction.\n   */\n  updateBounds: (bounds: Bounds) => void;\n  /**\n   * Signals end of a UI interaction.\n   */\n  finishInteraction: () => void;\n\n  minWidth?: number;\n  minHeight?: number;\n};\n\nconst OverlayInteractionHandlerContext =\n  React.createContext<OverlayInteractionHandlerProps | null>(null);\n\n/**\n * Provides the context used by components like {@link OverlayMoveHandle} and {@link OverlayResizeHandles} that provide\n * user interactions that change the boundary of the overlay they are rendered in.\n * Use {@link useResizableMovableOverlay} which implements an efficient state management for overlay bounds and returns\n * props to be passed to `OverlayInteractionHandler`:\n *\n * @example\n *\n * const {\n *    bounds, // Bounds to be applied to the overlay element.\n *    overlayInteractionHandlerProps,\n *  } = useResizableMovableOverlay(props);\n *\n * return (\n *   <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n *     <div style={bounds}>...</div>\n *   </OverlayInteractionHandler>\n * );\n *\n * @see useResizableMovableOverlay\n */\nexport const OverlayInteractionHandler = ({\n  children,\n  ...props\n}: OverlayInteractionHandlerProps & { children: React.ReactNode }) => {\n  return (\n    <OverlayInteractionHandlerContext.Provider value={props}>\n      {children}\n    </OverlayInteractionHandlerContext.Provider>\n  );\n};\n\nexport const useOverlayInteractionHandler = () =>\n  useContext(OverlayInteractionHandlerContext);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { useOverlayInteractionHandler } from \"./OverlayInteractionHandler\";\nimport React from \"react\";\n\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}, and returns props to be applied on a dom element to\n * make it a move handle for the overlay it's being rendered in.\n *\n * @see OverlayMoveHandle\n */\nexport function useOverlayMoveHandle() {\n  const interactionHandler = useOverlayInteractionHandler();\n  if (!interactionHandler) {\n    return { moveHandleProps: {} };\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const moveProps = useMove({\n    onMoveStart: () => {\n      return startInteraction(\"move\");\n    },\n    onMove: ({ startState, movement }) => {\n      updateBounds({\n        ...startState,\n        top: startState.top + movement.y,\n        left: startState.left + movement.x,\n      });\n    },\n    onMoveEnd: () => {\n      finishInteraction();\n    },\n  });\n  return { moveHandleProps: moveProps || {} };\n}\n\n/**\n * Used for making a dom element a move handle for the overlay it's being rendered in.\n * It uses the context provided by {@link OverlayInteractionHandler}. A render function is expected as `children`. It's\n * passed the event handlers that need to be applied on a dom element to make it a move handle for the overlay it's\n * being rendered in.\n */\nexport const OverlayMoveHandle = ({\n  children,\n}: {\n  children: (\n    props: ReturnType<typeof useOverlayMoveHandle>\n  ) => React.ReactElement;\n}) => {\n  return children(useOverlayMoveHandle());\n};\n","import React, { useRef } from \"react\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport {\n  HorizontalResizerProps,\n  VerticalResizerProps,\n} from \"../Resizer/ResizerProps\";\nimport {\n  Bounds,\n  useOverlayInteractionHandler,\n} from \"./OverlayInteractionHandler\";\n\ntype OverlayResizeHandlesProps = {\n  minWidth?: number;\n  minHeight?: number;\n};\n\n/**\n * Renders invisible resize handles at the edges of the overlay it's rendered in. It uses the context provided by\n * {@link OverlayInteractionHandler} to resize the overlay when the handles are used.\n */\nexport function OverlayResizeHandles(props: OverlayResizeHandlesProps) {\n  const overlayResizer = useOverlayResizer(props);\n  return (\n    overlayResizer && (\n      <>\n        <RightResizer {...overlayResizer.getResizerProps(\"right\")} />\n        <LeftResizer {...overlayResizer.getResizerProps(\"left\")} />\n        <TopResizer {...overlayResizer.getResizerProps(\"top\")} />\n        <BottomResizer {...overlayResizer.getResizerProps(\"bottom\")} />\n      </>\n    )\n  );\n}\n\n/**\n * overlay resizing logic and state. When resizing is in progress, the source of truth is a local state, for performance\n * reasons. When the resize is done (e.g. by mouse being released), `onBoundsChange` is called with the new bounds.\n */\nfunction useOverlayResizer(props: OverlayResizeHandlesProps = {}) {\n  const initialBoundsRef = useRef<Bounds>({\n    top: 0,\n    height: 0,\n    width: 0,\n    left: 0,\n  });\n  const interactionHandler = useOverlayInteractionHandler();\n  const {\n    minWidth = interactionHandler?.minWidth ?? 1,\n    minHeight = interactionHandler?.minHeight ?? 1,\n  } = props;\n  if (!interactionHandler) {\n    return null;\n  }\n  const { finishInteraction, startInteraction, updateBounds } =\n    interactionHandler;\n\n  const onResize = {\n    right: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        width: Math.max(minWidth, initialBoundsRef.current.width + size),\n      }),\n    bottom: (size: number) =>\n      updateBounds({\n        ...initialBoundsRef.current,\n        height: Math.max(minHeight, initialBoundsRef.current.height + size),\n      }),\n    left: (size: number) => {\n      const newWidth = Math.max(\n        minWidth,\n        initialBoundsRef.current.width + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        left: initialBounds.left + initialBounds.width - newWidth,\n        width: newWidth,\n      });\n    },\n    top: (size: number) => {\n      const newHeight = Math.max(\n        minHeight,\n        initialBoundsRef.current.height + size\n      );\n      const initialBounds = initialBoundsRef.current;\n      return updateBounds({\n        ...initialBounds,\n        top: initialBounds.top + initialBounds.height - newHeight,\n        height: newHeight,\n      });\n    },\n  };\n\n  function getResizerProps(side: \"left\" | \"right\"): HorizontalResizerProps;\n  function getResizerProps(side: \"top\" | \"bottom\"): VerticalResizerProps;\n  function getResizerProps(\n    side: \"left\" | \"right\" | \"top\" | \"bottom\"\n  ): HorizontalResizerProps | VerticalResizerProps {\n    const horizontal = side === \"left\" || side === \"right\";\n    return {\n      size: 1,\n      cursor: horizontal ? \"ew\" : \"ns\",\n      onResizeStarted: () => {\n        initialBoundsRef.current = startInteraction(\"resize\");\n      },\n      onResize: onResize[side],\n      onResizeEnd: finishInteraction,\n      style: { position: \"absolute\", [side]: 0 },\n    };\n  }\n\n  return {\n    getResizerProps,\n  };\n}\n","import { Bounds } from \"@intellij-platform/core/Overlay/OverlayInteractionHandler\";\nimport { clamp } from \"ramda\";\nimport { ResizableMovableOverlayOptions } from \"@intellij-platform/core/Overlay/useResizableMovableOverlay\";\n\nexport const withMinSize =\n  ({ width: minWidth, height: minHeight }: { width: number; height: number }) =>\n  (bounds: Bounds) => {\n    const width = Math.max(minWidth, bounds.width);\n    const height = Math.max(minHeight, bounds.height);\n    if (bounds.width != width || bounds.height != height) {\n      return { ...bounds, width, height };\n    }\n    return bounds;\n  };\n\nexport function getCenteredBounds(width: number, height: number): Bounds {\n  return {\n    left: (window.innerWidth - width) / 2,\n    top: (window.innerHeight - height) / 2,\n    width,\n    height,\n  };\n}\n\n/**\n * A helper function to create interaction interceptor which ensures bounds are contained within a container.\n *\n * @example\n * const ensureInViewPort = containedWithin({left: 0, top: 0, width: window.innerWidth, height: window.innerHeight})\n *\n * useResizableMovableOverlay({ onBoundsChanging: ensureInViewPort});\n */\nexport const containedWithin =\n  (\n    containerBounds: Bounds\n  ): ResizableMovableOverlayOptions[\"onBoundsChanging\"] =>\n  (bounds, interactionType) => {\n    if (interactionType === \"move\") {\n      const left = clamp(\n        containerBounds.left,\n        containerBounds.left + containerBounds.width - bounds.width,\n        bounds.left\n      );\n      const top = clamp(\n        containerBounds.top,\n        containerBounds.top + containerBounds.height - bounds.height,\n        bounds.top\n      );\n      return {\n        ...bounds,\n        left,\n        top,\n      };\n    } else if (interactionType === \"resize\") {\n      const left = Math.max(containerBounds.left, bounds.left);\n      const top = Math.max(containerBounds.top, bounds.top);\n      // the logic here seems unnecessarily complicated\n      return {\n        left,\n        top,\n        width:\n          bounds.width -\n          Math.max(\n            0,\n            bounds.left +\n              bounds.width -\n              (containerBounds.left + containerBounds.width)\n          ) -\n          (left - bounds.left),\n        height:\n          bounds.height -\n          Math.max(\n            0,\n            bounds.top +\n              bounds.height -\n              (containerBounds.top + containerBounds.height)\n          ) -\n          (top - bounds.top),\n      };\n    }\n    return bounds;\n  };\nexport const position =\n  ({\n    targetElement,\n    placement = \"bottom\",\n  }: {\n    placement?: \"bottom\" | \"top\";\n    targetElement: HTMLElement;\n  }) =>\n  ({ height, width }: Bounds): Bounds => {\n    const targetBounds = targetElement.getBoundingClientRect();\n    return {\n      left: targetBounds.left,\n      top:\n        placement === \"bottom\"\n          ? targetBounds.top + targetBounds.height\n          : targetBounds.top - height,\n      width,\n      height,\n    };\n  };\n\nexport function ensureInViewport(\n  bounds: Bounds,\n  { gap = 0 }: { gap?: number } = {}\n): Bounds {\n  const viewportWidth = window.innerWidth - gap;\n  const viewportHeight = window.innerHeight - gap;\n  const left = clamp(gap, viewportWidth - bounds.width, bounds.left);\n  const top = clamp(gap, viewportHeight - bounds.height, bounds.top);\n  if (left !== bounds.left || top !== bounds.top) {\n    return {\n      left,\n      top,\n      width: bounds.width,\n      height: bounds.height,\n    };\n  }\n  return bounds;\n}\n","import { useCallback, useEffect, useLayoutEffect, useRef } from \"react\";\n\nexport const useDebouncedCallback = (\n  fn: () => void,\n  { timeout = 100 } = {}\n) => {\n  const fnRef = useRef(fn);\n  const currentTimeoutId = useRef<number | null>(null);\n  useLayoutEffect(() => {\n    fnRef.current = fn;\n  });\n  useEffect(() => {\n    return () => {\n      if (currentTimeoutId.current !== null) {\n        clearTimeout(currentTimeoutId.current);\n      }\n    };\n  }, []);\n  return useCallback(() => {\n    if (currentTimeoutId.current !== null) {\n      clearTimeout(currentTimeoutId.current);\n    }\n    currentTimeoutId.current = window.setTimeout(fnRef.current, timeout);\n  }, []);\n};\n","import { RefObject, useEffect, useLayoutEffect, useState } from \"react\";\nimport { useDebouncedCallback } from \"@intellij-platform/core/utils/useDebounce\";\n\n/**\n * Clones the element, applies the temporary styles, and calls {@param fn} on the clone.\n * Previously, we applied the temporary styles on the element itself, run fn, and then revert to previous styles,\n * but that can mess with the scroll bar in the content. If there is a scrollable part in some nested element,\n * applying temporary style (in our case width: fit-content, height: fit-content) can cause scroll to jump which is not\n * restored after the style reversion. Now the approach is changed to apply the temporary styles on a temporary clone\n * of the element. It's certainly not as efficient and some optimization may be needed.\n * @param style: temporary styles to apply before fn is invoked, and revert after.\n * @param fn the function to compute something on the element with temporary styles\n */\nconst withTemporaryStyle =\n  <T extends any>(\n    style: Partial<CSSStyleDeclaration>,\n    fn: (element: HTMLElement) => T\n  ) =>\n  (element: HTMLElement): T => {\n    const clone = element.cloneNode(true) as HTMLElement;\n    clone.style.position = \"absolute\";\n    clone.style.left = \"-9999px\";\n    document.body.appendChild(clone);\n\n    Object.assign(clone.style, style);\n    const returnValue = fn(clone);\n\n    document.body.removeChild(clone);\n    return returnValue;\n  };\n\n/**\n * FIXME: withTemporaryStyle is not side-effect free and can cause scroll jumps. It creates awfully hard-to-debug\n *  issues.\n */\nexport const getContentSize = withTemporaryStyle(\n  {\n    width: \"\",\n    minWidth: \"fit-content\", // Shouldn't it be min-content? :-?\n    height: \"\",\n    minHeight: \"fit-content\",\n  },\n  (element) => ({\n    width: Math.ceil(parseFloat(getComputedStyle(element).width)),\n    height: Math.ceil(parseFloat(getComputedStyle(element).height)),\n  })\n);\n\nexport const useContentSize = (\n  ref: RefObject<HTMLElement>,\n  {\n    observe = false,\n  }: {\n    /**\n     * if false, the content size is measured only initially. If true, the dom changes are observed, and content size\n     * is updated accordingly.\n     * @default false\n     */\n    observe?: boolean;\n  } = {}\n) => {\n  const [measuredSizes, setMeasuredSizes] = useState<Size[]>([]);\n  useLayoutEffect(() => {\n    const element = ref.current;\n    if (!element || measuredSizes.length > 5) {\n      return;\n    }\n    const size = getContentSize(element);\n\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (!lastMeasuredSize || !Size.isEqual(lastMeasuredSize, size)) {\n      setMeasuredSizes([size]);\n    }\n    const id = window.requestAnimationFrame(() => {\n      const newSize = getContentSize(element);\n      if (!Size.isEqual(newSize, size)) {\n        setMeasuredSizes([...measuredSizes, newSize]);\n      }\n    });\n    return () => {\n      window.cancelAnimationFrame(id);\n    };\n  }, [\n    measuredSizes,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  const measure = () => {\n    const lastMeasuredSize = measuredSizes.at(-1);\n    if (ref.current && lastMeasuredSize) {\n      const currentSize = getContentSize(ref.current);\n      if (\n        currentSize.height !== lastMeasuredSize.height ||\n        currentSize.width !== lastMeasuredSize.width\n      ) {\n        setMeasuredSizes(\n          measuredSizes.map((aSize) =>\n            aSize === lastMeasuredSize ? currentSize : aSize\n          )\n        );\n      }\n    }\n  };\n  const debouncedMeasure = useDebouncedCallback(measure);\n\n  useEffect(() => {\n    const element = ref.current;\n    if (observe && element) {\n      const mutationObserver = new MutationObserver(() => {\n        debouncedMeasure();\n      });\n      mutationObserver.observe(element, {\n        subtree: true,\n        childList: true,\n      });\n      return () => {\n        mutationObserver.disconnect();\n      };\n    }\n  }, [\n    observe,\n    // ref value shouldn't normally be an effect's dependency, but for some reason, ref value is null in the first call\n    // when built for website. Interestingly, it doesn't happen in storybook. So maybe something to investigate further\n    ref.current,\n  ]);\n  return [measuredSizes.at(-1) || { width: 0, height: 0 }, measure] as const;\n};\n\ninterface Size {\n  width: number;\n  height: number;\n}\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const Size = {\n  isEqual: (\n    { width, height }: Size,\n    { width: width2, height: height2 }: { width: number; height: number }\n  ) => width === width2 && height === height2,\n};\n","import React, { RefObject, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  Bounds,\n  OverlayInteractionHandler,\n  OverlayInteractionHandlerProps,\n} from \"./OverlayInteractionHandler\";\nimport { clamp, filter } from \"ramda\";\nimport { useContentSize } from \"@intellij-platform/core/Overlay/useContentSize\";\nimport {\n  getCenteredBounds,\n  withMinSize,\n} from \"@intellij-platform/core/Overlay/bounds-helpers\";\n\n/**\n * Common props for resizable and movable overlays such as Windows or Popups.\n * There is currently no corresponding component/hook, and this is just a type helper.\n */\nexport interface ResizableMovableOverlayOptions {\n  onBoundsChange?: (bounds: Bounds, interactionType: \"move\" | \"resize\") => void;\n  /**\n   * For performance reason, overlay bounds is kept in a local state during a resize or move interaction, and\n   * `onBoundsChange` is called once at the end of interaction. `onBoundsChanging` gives a chance of rectifying\n   * bounds changes during an interaction to for example apply custom size/placement constraints.\n   */\n  onBoundsChanging?: (\n    newBounds: Bounds,\n    /**\n     * Whether the interaction is a \"move\" or \"resize\" considering the initial bounds when interaction was started.\n     */\n    interactionType: \"move\" | \"resize\"\n  ) => Bounds;\n  /**\n   * Controlled bounds. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `bounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  bounds?: Partial<Bounds>;\n  /**\n   * Default bounds in uncontrolled mode. Can be a partially specified bounds.\n   * - If `top` not specified, the returned bounds will be centered vertically.\n   * - If `left` not specified, the returned bounds will be centered horizontally.\n   * - If `width` not specified, the width of the bounds will be based on content width.\n   * - If `height` not specified, the height of the bounds will be based on content height.\n   * Note that regardless of `defaultBounds`, `onBoundsChange` always receives a full `bounds` object which is solely\n   * based on the bounds of the overlay, at the end of an interaction.\n   */\n  defaultBounds?: Partial<Bounds>;\n  minWidth?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n  minHeight?: number | \"content\"; // TODO: support function, receiving measured size, for more flexibility\n\n  /**\n   * Allowed interactions:\n   * - \"all\": both resizable and movable\n   * - \"move\": movable, but not resizable\n   * - \"none\": fixed size and position\n   * The reason there are no `resizable` and `movable` boolean props is that resizable=true,movable=false doesn't make\n   * sense from UX perspective.\n   * @default \"all\"\n   */\n  interactions?: \"all\" | \"move\" | \"none\"; // FIXME: it's not used in useResizableMovableOverlay, maybe separate props?\n\n  /**\n   * When the size is not specified by `bounds` or `defaultBounds` props, the content size is measured and used in the\n   * returned bounds. By default, the content size is measured initially. If `observeContentSize` is true, the DOM\n   * mutations will be observed and the content is re-measured as changes are observed.\n   */\n  observeContentResize?: boolean;\n}\n/**\n *\n * TODO: rename to something better? :D\n * TODO: maybe an option like ensureInViewport that would move the final bound into the viewport (if necessary), when\n *  calling onBoundsChange at the end of an interaction. That's important because if move handle(s) (usually rendered\n *  at the top of the overlay) are out of reach, there would be no way back.\n * TODO: description\n * Assumptions:\n * - The overlay is rendered in a portal, and with position \"fixed\".\n * - The returned bounds should be used to style the overlay.\n *   - There shouldn't be other style affecting the positioning, such as margin, or transform.\n *   - If the overlay has border, box-sizing should be \"border-box\"\n */\nexport function useResizableMovableOverlay(\n  overlayRef: RefObject<HTMLElement>,\n  {\n    bounds: inputBounds,\n    defaultBounds,\n    onBoundsChange,\n    onBoundsChanging = (i) => i,\n    minWidth,\n    minHeight,\n    observeContentResize,\n  }: ResizableMovableOverlayOptions\n): {\n  /**\n   * The bounds to be applied as `style` on the overlay, to position it. Even if the input `bounds` or `defaultBounds`\n   * is not defined, returned `bounds` is always a full bounds object. This eliminates any other need for styling,\n   * if the input bounds doesn't define size or position.\n   * NOTE: even when the size is not specified as input, and is to be based on content, the returned `bounds` include\n   * explicit, size, measured **after the first render**. This is because overlays such as windows are not expected to\n   * be resized without user interaction, and just based on the content size change. So we make sure even when the\n   * sizing is based on content, it's stable. If imperative re-measure of the size is needed, or even dynamic resizing\n   * based on content is needed in some cases, it is feasible to add it as an option.\n   */\n  bounds: Bounds;\n  /**\n   * `true` if the returned bounds has explicit position. `false` if it's centered as a fallback.\n   */\n  positioned: boolean;\n  /**\n   * `true` if the returned bounds has explicit size. `false` if it's measured based on content.\n   */\n  sized: boolean;\n  /**\n   * Props to be passed to {@link OverlayInteractionHandler}\n   */\n  overlayInteractionHandlerProps: OverlayInteractionHandlerProps;\n\n  /**\n   * Allow for remeasuring content size imperatively, when needed. Currently only used to work around\n   * an issue related to Suspense in React 17.\n   */\n  UNSAFE_measureContentSize: () => void;\n} {\n  const [bounds, setBounds] = useControlledState<Partial<Bounds> | undefined>(\n    inputBounds!,\n    defaultBounds!,\n    // onBoundsChange is called with Bounds object. Not Partial<Bounds>, and not undefined.\n    onBoundsChange as (\n      value: Partial<Bounds> | undefined,\n      reason: \"resize\" | \"move\"\n    ) => void\n  );\n  const [contentSize, measureContentSize] = useContentSize(overlayRef, {\n    observe: observeContentResize,\n  });\n  // local state of bounds for when the overlay is in a UI interaction, like movement or resize with mouse.\n  // We don't want to update the state in the higher levels repeatedly in such transactions, and we just want to\n  // trigger on update when the UI interaction is done.\n  // It's maintained during a UI interaction and then reset to null.\n  const [currentInteraction, setCurrentInteraction] = useState<null | {\n    type: \"move\" | \"resize\";\n    bounds: Bounds;\n  }>(null);\n\n  const effectiveMinWidth =\n    minWidth === \"content\" ? contentSize.width : minWidth || 0;\n  const effectiveMinHeight =\n    minHeight === \"content\" ? contentSize.height : minHeight || 0;\n  const applyMinSize = withMinSize({\n    width: effectiveMinWidth,\n    height: effectiveMinHeight,\n  });\n  const overlayInteractionHandlerProps: OverlayInteractionHandlerProps = {\n    startInteraction: (type: \"move\" | \"resize\") => {\n      if (!overlayRef.current) {\n        throw new Error(\n          \"overlayRef value is not set. Make sure to have the ref passed to the resizable/movable overlay\"\n        );\n      }\n      const bounds = getBounds(overlayRef.current);\n      setCurrentInteraction({ bounds, type });\n      return bounds;\n    },\n    updateBounds: (updatedBounds) => {\n      setCurrentInteraction((currentInteraction) => {\n        if (currentInteraction) {\n          const { type } = currentInteraction;\n          return {\n            type,\n            bounds: onBoundsChanging(updatedBounds, type) || updatedBounds,\n          };\n        }\n        return currentInteraction;\n      });\n    },\n    finishInteraction: () => {\n      if (currentInteraction && overlayRef.current) {\n        setBounds(getBounds(overlayRef.current), currentInteraction.type);\n      }\n      setCurrentInteraction(null);\n    },\n    minWidth: effectiveMinWidth,\n    minHeight: effectiveMinHeight,\n  };\n\n  const partialBounds = currentInteraction?.bounds ?? bounds;\n  const centeredContentBounds = getCenteredBounds(\n    clamp(\n      effectiveMinWidth,\n      window.innerWidth,\n      bounds?.width ?? contentSize.width\n    ),\n    clamp(\n      effectiveMinHeight,\n      window.innerHeight,\n      bounds?.height ?? contentSize.height\n    )\n  );\n  return {\n    positioned:\n      partialBounds?.left != undefined && partialBounds?.top != undefined,\n    sized:\n      partialBounds?.width != undefined && partialBounds?.height != undefined,\n    bounds: applyMinSize({\n      /**\n       * Since input bounds may be partial (e.g. only specifying size), we create a full bounds object as a fallback,\n       * based on the measured size, positioned in center. We can introduce a \"loose\" mode, where the returned bound\n       * is not \"filled\" with default properties.\n       */\n      ...centeredContentBounds,\n      ...(partialBounds && filter((value) => value != null, partialBounds)),\n    }),\n    UNSAFE_measureContentSize: measureContentSize,\n    overlayInteractionHandlerProps,\n  };\n}\n\nfunction getBounds(element: HTMLElement) {\n  const { left, top, width, height } = element.getBoundingClientRect();\n  return { left, top, width, height };\n}\n","import React, { ForwardedRef, RefObject, useContext, useState } from \"react\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { useFocusWithin, useInteractOutside } from \"@react-aria/interactions\";\nimport { FocusScope, useFocusable } from \"@react-aria/focus\";\nimport { useOverlay, usePreventScroll } from \"@react-aria/overlays\";\nimport { filterDOMProps, useObjectRef } from \"@react-aria/utils\";\nimport { pipe } from \"ramda\";\n\nimport {\n  ensureInViewport,\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  position,\n  ResizableMovableOverlayOptions,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { areInNestedOverlays, Overlay } from \"@intellij-platform/core/Overlay\";\nimport { mergeNonNullProps } from \"@intellij-platform/core/utils/mergeNonNullProps\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nimport { useDialog } from \"./_useDialog\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { PopupContext, PopupControllerContext } from \"./PopupContext\";\nimport { PopupLayout } from \"./PopupLayout\";\nimport { StyledPopupHint } from \"./StyledPopupHint\";\n\nexport const StyledPopupContainer = styled.div`\n  position: fixed;\n  box-sizing: border-box;\n  // not checked if there should be a better substitute for * in the following colors. Maybe \"Component\"?\n  background-color: ${({ theme }) => theme.color(\"*.background\")};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  outline: none; // Focus will be reflected in header. No need for outline or any other focus style on the container\n  ${WINDOW_SHADOW}; // FIXME: OS-dependant style?\n`;\n\n/**\n * only needed for setting overflow to hidden to make sure nothing will overflow a window under any circumstances.\n * The reason we can't set that overflow: \"hidden\" on the StyledWindowContainer itself is that we want resize handles\n * to overflow without bing clipped.\n */\nconst StyledInnerContainer = styled.div`\n  height: inherit;\n  overflow: hidden;\n`;\nexport interface PopupProps extends ResizableMovableOverlayOptions, DOMProps {\n  children: React.ReactNode;\n  onClose?: () => void;\n\n  nonDismissable?: boolean;\n\n  /**\n   * By default, Popup prevents scrolling on the scrollable ancestor, if popup is positioned relative to a target\n   * element. Allowing or disallowing scroll can be forced by passing boolean value.\n   */\n  allowScroll?: \"auto\" | boolean;\n\n  /**\n   * Used to position the popup relative to a target element, if there is no positioning information in the input\n   * `bounds`/`defaultBounds`.\n   */\n  positioning?: {\n    targetRef: RefObject<HTMLElement>;\n    placement?: \"bottom\" | \"top\";\n  };\n}\n\nexport const DEFAULT_POPUP_MIN_WIDTH = 50;\nexport const DEFAULT_POPUP_MIN_HEIGHT = 50;\n\n/**\n * [Popup](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75426%3A16881&t=vzpRGV2y2cDw5a6Z-0)\n * component, rendered as a draggable overlay which is positioned either in the center of the viewport or relative to a trigger element.\n * If there is a trigger element, use {@link PopupTrigger} instead.\n */\nexport const _Popup = (\n  // NOTE: export is only for __docgenInfo to be emitted for this.\n  {\n    interactions = \"move\",\n    nonDismissable = false,\n    allowScroll = \"auto\",\n    minWidth = DEFAULT_POPUP_MIN_WIDTH,\n    minHeight = DEFAULT_POPUP_MIN_HEIGHT,\n    positioning: positioningProp,\n    onClose: onCloseProp,\n    ...props\n  }: PopupProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element => {\n  const propsContext = useContext(PopupControllerContext);\n  const positioning = positioningProp || propsContext.positioning;\n  const onClose = () => {\n    onCloseProp?.();\n    propsContext.onClose?.();\n  };\n  const ref = useObjectRef<HTMLDivElement>(forwardedRef);\n  const shouldCloseOnInteractOutside = (element: Element) => {\n    return (\n      !positioning?.targetRef.current?.contains(element) &&\n      !areInNestedOverlays(ref.current, element)\n    );\n  };\n  const { overlayProps } = useOverlay(\n    {\n      isOpen: true, // FIXME?\n      onClose,\n      shouldCloseOnBlur: !nonDismissable,\n      shouldCloseOnInteractOutside,\n    },\n    ref\n  );\n  // Passing isDismissable to useOverlay also utilizes useInteractOutside and closes the overlay, but it calls\n  // preventDefault() and stopPropagation() on the event, which prevents focus from going to elements outside the popup.\n  // Not sure why they do this in react-aria, but it seems we are better off not using that option and using\n  // useInteractOutside directly here like this:\n  useInteractOutside({\n    ref,\n    onInteractOutsideStart: (e) => {\n      if (\n        !ref.current?.contains(document.activeElement) && // If we are focused, shouldCloseOnBlur will call onClose.\n        !nonDismissable &&\n        shouldCloseOnInteractOutside(e.target as Element)\n      ) {\n        onClose();\n      }\n    },\n    // onInteractOutsideStart will not be called if onInteractOutside is not passed!\n    onInteractOutside: () => {},\n  });\n\n  usePreventScroll({\n    isDisabled: allowScroll === \"auto\" ? !positioning : allowScroll,\n  });\n\n  const { bounds, positioned, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      ...props,\n      minWidth,\n      minHeight,\n      observeContentResize: true,\n    });\n  const positionedBounds =\n    positioning?.targetRef.current && !positioned\n      ? pipe(\n          position({\n            targetElement: positioning.targetRef.current,\n            placement: positioning.placement,\n          }),\n          ensureInViewport\n        )(bounds)\n      : bounds;\n\n  const [isActive, setActive] = useState(false);\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setActive,\n  });\n  const { focusableProps } = useFocusable(\n    {\n      excludeFromTabOrder: true,\n    },\n    ref\n  );\n  const { focusForwarderProps } = useFocusForwarder();\n\n  const { dialogProps, titleProps } = useDialog(props, ref);\n\n  /**\n   * A hook like useOverlayStack or useOverlayZIndex can be introduced which would handle focus/blur, and return/set\n   * the right z-index so that only the overlay holding the focus would have a higher z-index than others.\n   */\n  const zIndex = isActive ? 1 : 0;\n\n  return (\n    <Overlay>\n      <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n        {/* TODO: FocusScope is redundant. Test focus restoration without it (in status bar progress), and remove it if unnecessary */}\n        <FocusScope restoreFocus>\n          <StyledPopupContainer\n            ref={ref}\n            style={{\n              ...positionedBounds,\n              zIndex,\n            }}\n            tabIndex={-1}\n            {...mergeNonNullProps(\n              focusWithinProps,\n              focusableProps,\n              focusForwarderProps,\n              overlayProps,\n              propsContext.overlayProps || {},\n              dialogProps,\n              filterDOMProps(props)\n            )}\n          >\n            <PopupContext.Provider\n              value={{\n                isActive,\n                movable: interactions !== \"none\",\n                titleProps,\n              }}\n            >\n              <StyledInnerContainer>{props.children}</StyledInnerContainer>\n              {interactions === \"all\" && <OverlayResizeHandles />}\n            </PopupContext.Provider>\n          </StyledPopupContainer>\n        </FocusScope>\n      </OverlayInteractionHandler>\n    </Overlay>\n  );\n};\n\nexport const Popup = Object.assign(React.forwardRef(_Popup), {\n  Header: PopupHeader,\n  Layout: PopupLayout,\n  Hint: StyledPopupHint,\n});\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { AriaDialogProps } from \"@react-types/dialog\";\nimport { FocusableElement } from \"@react-types/shared\";\nimport { filterDOMProps, useSlotId } from \"@react-aria/utils\";\nimport { focusSafely } from \"@react-aria/focus\";\nimport { RefObject, useEffect } from \"react\";\nimport { useOverlayFocusContain } from \"@react-aria/overlays\";\nimport { DialogAria } from \"@react-aria/dialog\";\n\n////////////////// NOTE //////////////////////////\n// This is a copy of useDialog from react-aria, with a little part removed from the useEffect call.\n// In the original code, inside the effect, there is a hack to fix an issue in Safari, which involves\n// blurring and refocusing the element. Even though there is a comment about an attempt to make it work\n// nice when used with `shouldCloseOnBlur` option of `useOverlay`, it didn't work and the refocusing causes\n// the popup to close. Probably because in our case useOverlay and useDialog are used in the same level, but\n// in what they've tested on in react-aria, useDialog is used in something nested in the component that uses\n// useDialog.\n// TODO: replace with original useDialog, if the issue explained above got fixed in some version of react-aria.\n//////////////////////////////////////////////////\n/**\n * Provides the behavior and accessibility implementation for a dialog component.\n * A dialog is an overlay shown above other content in an application.\n */\nexport function useDialog(\n  props: AriaDialogProps,\n  ref: RefObject<FocusableElement>\n): DialogAria {\n  let { role = \"dialog\" } = props;\n  let titleId: string | undefined = useSlotId();\n  titleId = props[\"aria-label\"] ? undefined : titleId;\n\n  // Focus the dialog itself on mount, unless a child element is already focused.\n  useEffect(() => {\n    if (ref.current && !ref.current.contains(document.activeElement)) {\n      focusSafely(ref.current);\n    }\n  }, [ref]);\n\n  useOverlayFocusContain();\n\n  return {\n    dialogProps: {\n      ...filterDOMProps(props, { labelable: true }),\n      role,\n      tabIndex: -1,\n      \"aria-labelledby\": props[\"aria-labelledby\"] || titleId,\n    },\n    titleProps: {\n      id: titleId,\n    },\n  };\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport { filter } from \"ramda\";\n\n/**\n * Like mergeProps, but doesn't merge props where value is null or undefined. That's needed because useFocusable (and\n * maybe some other react-aria hooks as well) return props like onFocus, with value set to null or undefined, which\n * overrides the same prop from other sources.\n */\n// @ts-expect-error not sure why!\nexport const mergeNonNullProps: typeof mergeProps = (...propsArray) => {\n  return mergeProps(\n    ...propsArray.map((props): typeof props =>\n      filter((value) => value != undefined, props)\n    )\n  );\n};\n","import { DOMAttributes } from \"@react-types/shared\";\nimport { createContext } from \"react\";\nimport { PopupProps } from \"./Popup\";\n\nexport const PopupContext = createContext<{\n  isActive: boolean;\n  movable: boolean;\n  titleProps: DOMAttributes;\n}>({ isActive: false, movable: true, titleProps: {} });\n\n/**\n * A context to provide some props that are necessary for PopupTrigger or PopupManager.\n * Passing those props via context helps with providing a nice API in those components.\n */\nexport const PopupControllerContext = createContext<\n  {\n    overlayProps?: DOMAttributes;\n  } & Partial<Pick<PopupProps, \"positioning\" | \"onClose\">>\n>({});\n","import React, { HTMLAttributes, useContext } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { OverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\n\nimport { PopupContext } from \"./PopupContext\";\n\nconst StyledPopupHeader = styled.div<{\n  active?: boolean;\n  hasControls?: boolean;\n}>`\n  box-sizing: border-box;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-height: 1.5rem;\n  min-height: ${({ hasControls }) => hasControls && \"1.75rem\"};\n  cursor: default;\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"Popup.Header.activeForeground\" as UnknownThemeProp<\"Popup.Header.activeForeground\">,\n          theme.commonColors.labelForeground\n        )\n      : theme.color(\n          \"Popup.Header.inactiveForeground\" as UnknownThemeProp<\"Popup.Header.inactiveForeground\">,\n          theme.commonColors.labelDisabledForeground\n        )};\n  background-color: ${({ theme, active }) =>\n    active\n      ? theme.color(\"Popup.Header.activeBackground\", \"#e6e6e6\")\n      : theme.color(\"Popup.Header.inactiveBackground\", `#ededed`)};\n`;\n/**\n * Implements appearance of\n * [Popup Header](https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-%28Community%29?node-id=75455%3A26566&t=Hzwse5j5R6iCEzVW-4),\n * and also acts as a handle for moving the panel.\n * Expected to be used with {@link Popup.Layout}:\n *\n * @example\n * ```tsx\n * <Popup>\n *    <Popup.Layout header={<Popup.Header>header</Popup.Header>} />\n * </Popup>\n * ```\n */\nexport const PopupHeader = ({\n  children,\n  hasControls,\n}: {\n  children?: React.ReactNode;\n  hasControls?: boolean;\n}) => {\n  const { isActive, movable, titleProps } = useContext(PopupContext);\n  const renderHeader = (otherProps: HTMLAttributes<HTMLElement> = {}) => (\n    <StyledPopupHeader\n      active={isActive}\n      hasControls={hasControls}\n      {...mergeProps(titleProps, otherProps)}\n    >\n      {children}\n    </StyledPopupHeader>\n  );\n  return movable ? (\n    <OverlayMoveHandle>\n      {({ moveHandleProps }) => renderHeader(moveHandleProps)}\n    </OverlayMoveHandle>\n  ) : (\n    renderHeader()\n  );\n};\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { Popup } from \"./Popup\";\nimport { PopupHeader } from \"./PopupHeader\";\nimport { StyledPopupHint } from \"@intellij-platform/core/Popup/StyledPopupHint\";\n\nconst StyledPopupLayout = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: inherit;\n`;\nconst StyledPopupLayoutHeader = styled.div`\n  flex-shrink: 0;\n`;\nconst StyledPopupLayoutContent = styled.div`\n  flex: 1;\n  overflow: auto;\n  // Not sure about making the content area a vertical flex container, but it seemed it makes sense as default.\n  // The use case at hand where this was added was \"Branches\" popup, which would of course be implementable without this\n  // too, with an extra flex container around the menu.\n  display: flex;\n  flex-direction: column;\n`;\nconst StyledPopupLayoutFooter = styled.div`\n  flex-shrink: 0;\n`;\n\n/**\n * Popup content layout, supporting fixed `header` and `footer` sections, and a scrollable `content` area.\n */\nexport function PopupLayout({\n  header,\n  footer,\n  content,\n}: {\n  /**\n   * Fixed position header of the popup at the top. {@link Popup.Header} can be used for the content.\n   */\n  header?: React.ReactNode;\n  /**\n   * Scrollable content of the popup.\n   */\n  content: React.ReactNode;\n  /**\n   * Fixed position footer of the popup at the bottom. {@link Popup.Hint} can be used for the content.\n   */\n  footer?: React.ReactNode;\n}) {\n  return (\n    <StyledPopupLayout>\n      {header && (\n        <StyledPopupLayoutHeader>\n          {typeof header === \"string\" ? (\n            <PopupHeader>{header}</PopupHeader>\n          ) : (\n            header\n          )}\n        </StyledPopupLayoutHeader>\n      )}\n      <StyledPopupLayoutContent>{content}</StyledPopupLayoutContent>\n      {footer && (\n        <StyledPopupLayoutFooter>\n          {typeof footer === \"string\" ? (\n            <StyledPopupHint>{footer}</StyledPopupHint>\n          ) : (\n            footer\n          )}\n        </StyledPopupLayoutFooter>\n      )}\n    </StyledPopupLayout>\n  );\n}\n","import React, {\n  ReactElement,\n  ReactNode,\n  useContext,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { Popup, PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"@intellij-platform/core/Popup/PopupContext\";\n\ninterface PopupManagerAPI {\n  /**\n   * Shows a popup within the stack of popups managed by {@link PopupManager}.\n   * The opened popup will be closed when `onClose` interactions happen.\n   */\n  show(\n    popup:\n      | React.ReactElement<PopupProps, typeof Popup>\n      | ((args: {\n          close: () => void;\n        }) => React.ReactElement<PopupProps, typeof Popup>)\n  ): void;\n}\n\nconst NotImplementedFn = () => {\n  throw new Error(\n    \"PopupManager not found. Wrap your application with PopupManager to be able to open popups imperatively\"\n  );\n};\n\nconst PopupsContext = React.createContext<PopupManagerAPI>({\n  show: NotImplementedFn,\n});\n\n/**\n * Returns imperative API for showing popups.\n */\nexport const usePopupManager = (): PopupManagerAPI => useContext(PopupsContext);\n\ntype PopupElement = ReactElement<PopupProps, typeof Popup>;\n\nexport interface PopupManagerProps {\n  children?: ReactNode;\n}\n\n/**\n * Enables imperative API (via {@link usePopupManager}) for showing Popups.\n * It renders popups in a portal appended to `body`, unless `disablePortal` is `true`.\n */\nexport const PopupManager: React.FC<PopupManagerProps> = ({ children }) => {\n  const [popups, setPopups] = useState<Array<PopupElement>>([]);\n  const newKeyRef = useRef<number>(0);\n\n  const api = useMemo<PopupManagerAPI>(() => {\n    const show: PopupManagerAPI[\"show\"] = (popup) => {\n      newKeyRef.current++;\n      const close = () => {\n        setPopups((currentPopups) =>\n          currentPopups.filter((aPopup) => aPopup !== wrappedPopup)\n        );\n      };\n      const wrappedPopup = (\n        <PopupControllerContext.Provider\n          key={newKeyRef.current}\n          value={{ onClose: close }}\n        >\n          {typeof popup === \"function\" ? popup({ close }) : popup}\n        </PopupControllerContext.Provider>\n      );\n      setPopups((currentPopups) => currentPopups.concat(wrappedPopup));\n    };\n    return {\n      show,\n    };\n  }, []);\n\n  return (\n    <PopupsContext.Provider value={api}>\n      {children}\n      {popups}\n    </PopupsContext.Provider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { OverlayTriggerProps, useOverlayTrigger } from \"@react-aria/overlays\";\nimport { PressResponder } from \"@react-aria/interactions\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport {\n  OverlayTriggerProps as OverlayTriggerStateProps,\n  useOverlayTriggerState,\n} from \"@react-stately/overlays\";\n\nimport { PopupProps } from \"./Popup\";\nimport { PopupControllerContext } from \"./PopupContext\";\n\nexport interface PopupTriggerProps\n  extends Partial<OverlayTriggerProps>,\n    OverlayTriggerStateProps {\n  placement?: Required<PopupProps>[\"positioning\"][\"placement\"];\n  popup:\n    | React.ReactElement\n    | (({ close }: { close: () => void }) => React.ReactNode);\n  children: React.ReactElement;\n}\n\n/**\n * Popup opened by a trigger. `trigger` can be an element of any pressable component (such as {@link Button} or\n * {@link IconButton}), and is rendered in place. Similar to {@link Popup component}, `children` defines the content\n * of Popup.\n */\nexport const PopupTrigger = React.forwardRef(function PopupTrigger(\n  { placement, children, popup, ...props }: PopupTriggerProps,\n  forwardedRef: ForwardedRef<HTMLButtonElement>\n) {\n  const state = useOverlayTriggerState(props);\n  const triggerRef = useObjectRef(forwardedRef);\n  const { overlayProps, triggerProps } = useOverlayTrigger(\n    { type: props.type || \"menu\" },\n    state,\n    triggerRef\n  );\n  return (\n    <>\n      <PressResponder ref={triggerRef} {...triggerProps}>\n        {children}\n      </PressResponder>\n      {state.isOpen && (\n        <PopupControllerContext.Provider\n          value={{\n            overlayProps,\n            positioning: {\n              targetRef: triggerRef,\n              placement,\n            },\n            onClose: state.close,\n          }}\n        >\n          {typeof popup === \"function\" ? popup({ close: state.close }) : popup}\n        </PopupControllerContext.Provider>\n      )}\n    </>\n  );\n});\n","import { styled } from \"@intellij-platform/core/styled\";\n\n/**\n * Hint component (aka Advertiser) used in Popup's footer.\n * {@see Popup.Layout}\n */\nexport const StyledPopupHint = styled.div`\n  // NOTE: Following the reference implementation, would require to set fallback colors non-prior to\n  // *.(background|foreground) colors (by not passing the fallback color as the second argument to theme.color).\n  // It's only in BigPopup that the fallback colors are prioritized over *-fallback. But in Figma designs, this is\n  // simplified, and hint always has the muted color (like in BigPopup), instead of the default foreground.\n  // So we are intentionally deviating from the reference implementation here.\n  background: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.background\",\n      theme.color(\"SearchEverywhere.Advertiser.background\")\n    )};\n  color: ${({ theme }) =>\n    theme.color(\n      \"Popup.Advertiser.foreground\",\n      theme.color(\"SearchEverywhere.Advertiser.foreground\")\n    )};\n  padding: 0.3125rem 0.9375rem 0.3125rem 0.625rem;\n  font-size: 0.875em;\n  line-height: normal;\n  user-select: none;\n  cursor: default;\n  // NOTE: white-space is intentionally not set as nowrap.\n`;\n","import React, {\n  CSSProperties,\n  HTMLAttributes,\n  Ref,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { keyframes } from \"styled-components\";\nimport { useProgressBar } from \"@react-aria/progress\";\nimport { AriaProgressBarProps } from \"@react-types/progress\";\nimport { PressProps, useHover } from \"@react-aria/interactions\";\nimport { useButton } from \"@react-aria/button\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nexport interface ProgressBarProps extends Omit<AriaProgressBarProps, \"label\"> {\n  /**\n   * Process name, shown above or to the left of the progress bar. Placement is controlled by {@link namePosition}.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-name\n   */\n  name?: React.ReactNode;\n\n  /**\n   * Process name position with respect to the progress bar.\n   * If `namePosition` is \"side\", {@link name} is **not** automatically appended with a colon.\n   * @default \"top\"\n   */\n  namePosition?: \"side\" | \"top\";\n\n  /**\n   * Process details, placed bellow the progress bar, with a de-emphasized color.\n   * @see https://jetbrains.github.io/ui/controls/progress_bar/#process-details\n   */\n  details?: React.ReactNode;\n\n  /**\n   * A second line of details. Not an officially documented feature, but it's supported in the reference impl.\n   */\n  secondaryDetails?: React.ReactNode;\n\n  /**\n   * Placed next to and aligned with the progress bar, used for\n   * [process control](https://jetbrains.github.io/ui/controls/progress_bar/#process-control) buttons.\n   */\n  button?: React.ReactNode;\n\n  /**\n   * Progress bar track width.\n   */\n  width?: CSSProperties[\"width\"];\n\n  /**\n   * Not supported in [the official specs](https://jetbrains.github.io/ui/controls/progress_bar/#25), but the progress\n   * bar in status bar has a denser spacing. It still won't be a pixel perfect match with the progress bar in the\n   * status bar.\n   */\n  dense?: boolean;\n\n  style?: HTMLAttributes<unknown>[\"style\"];\n  className?: HTMLAttributes<unknown>[\"className\"];\n}\n\ninterface ProgressBarContextObj {\n  setForcedDetails: (details: string | null) => void;\n  setTooltip: (tooltip: string | null) => void;\n}\n\n/**\n * @see https://jetbrains.github.io/ui/controls/progress_bar/\n * @see https://github.com/JetBrains/intellij-community/blob/82f201386c3f7a339ff25fc8f3389024c8078a87/platform/platform-api/src/com/intellij/openapi/ui/panel/ProgressPanelBuilder.java\n *\n * Known issues:\n * There are a couple of UI issues because of the current layout (which can be improved probably):\n * - max-width of the label and details, it's not necessarily aligned with the the progressbar track, because they don't\n *   share the same container\n * - when label is on the side, details is aligned with the label, instead of the progressbar track.\n */\nexport const ProgressBar = ({\n  value = 0,\n  maxValue = 100,\n  minValue = 0,\n  name,\n  namePosition = \"top\",\n  details,\n  secondaryDetails,\n  button,\n  width,\n  dense,\n  className,\n  style,\n  ...props\n}: ProgressBarProps): React.ReactElement => {\n  const { progressBarProps, labelProps } = useProgressBar({\n    ...props,\n    label: name,\n    value,\n    maxValue,\n    minValue,\n  });\n  const percentage = (100 * (value / maxValue)).toFixed(0);\n  const [forcedDetails, setForcedDetails] = useState<null | string>(\"\");\n  const [tooltip, setTooltip] = useState<null | string>(\"\");\n\n  const contextValue: ProgressBarContextObj = useMemo(\n    () => ({\n      setForcedDetails,\n      setTooltip,\n    }),\n    []\n  );\n  const label = (\n    <StyledProgressBarLabel {...labelProps}>{name}</StyledProgressBarLabel>\n  );\n  const effectiveDetails = details ? tooltip || forcedDetails || details : null;\n  return (\n    <StyledProgressBarContainer style={style} className={className}>\n      {namePosition === \"top\" && label}\n      <StyledProgressBarLineContainer\n        dense={dense}\n        hasTopMargin={Boolean(name) && namePosition === \"top\"}\n        hasBottomMargin={Boolean(effectiveDetails)}\n      >\n        {namePosition === \"side\" && label}\n        <StyledProgressBarTrack\n          style={{ width }}\n          {...progressBarProps}\n          indeterminate={props.isIndeterminate}\n        >\n          {!props.isIndeterminate && (\n            <StyledProgressBarProgress style={{ width: `${percentage}%` }} />\n          )}\n        </StyledProgressBarTrack>\n        {props.showValueLabel && (\n          <span>{props.valueLabel ?? `${percentage}%`}</span>\n        )}\n        <ProgressBarContext.Provider value={contextValue}>\n          {button}\n        </ProgressBarContext.Provider>\n      </StyledProgressBarLineContainer>\n      <StyledProgressBarDetails>{effectiveDetails}</StyledProgressBarDetails>\n      <StyledProgressBarDetails>{secondaryDetails}</StyledProgressBarDetails>\n    </StyledProgressBarContainer>\n  );\n};\n\nconst ProgressBarContext = React.createContext<null | ProgressBarContextObj>(\n  null\n);\n\nconst StyledProgressBarContainer = styled.div`\n  color: ${({ theme }) => theme.commonColors.labelForeground /* TODO: check*/};\n  cursor: default; // prevent cursor on text\n`;\n\nconst StyledProgressBarLineContainer = styled.div<{\n  dense?: boolean;\n  hasTopMargin?: boolean;\n  hasBottomMargin?: boolean;\n}>`\n  display: flex;\n  align-items: center;\n  gap: ${({ dense }) => (dense ? \"0.5rem\" : \"0.625rem\")};\n  height: 4px;\n  // spacing is based on the reference impl and figma designs. top and bottom spacing is inverted in the spec document\n  // figma: https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?node-id=75426%3A16650\n  // spec document: https://jetbrains.github.io/ui/controls/progress_bar/#25\n  margin-top: ${({ hasTopMargin }) => hasTopMargin && \"0.375rem\"};\n  margin-bottom: ${({ hasBottomMargin }) => hasBottomMargin && \"0.25rem\"};\n`;\n\nconst StyledProgressBarLabel = styled.div`\n  white-space: nowrap;\n  max-width: calc(100% - 2rem);\n  overflow: hidden;\n`;\n\nconst StyledProgressBarDetails = styled.div`\n  color: ${({ theme }) => theme.commonColors.contextHelpForeground};\n  font-size: 0.82em;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  max-width: calc(100% - 2rem); // not the best way\n`;\n\nconst StyledProgressBarTrack = styled.div<{ indeterminate?: boolean }>`\n  height: inherit;\n  border-radius: 2px;\n  overflow: hidden;\n  display: flex;\n\n  // In case used in flex layout\n  min-width: 0;\n  flex: 1;\n\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.trackColor\",\n      theme.dark ? \"rgb(85,85,85)\" : \"rgb(196,196,196)\"\n    )};\n  ${({ indeterminate }) =>\n    indeterminate &&\n    css`\n      background: linear-gradient(\n        90deg,\n        ${getIndeterminateStartColor} 0%,\n        ${getIndeterminateEndColor} 50%,\n        ${getIndeterminateStartColor} 100%\n      );\n      background-size: 96px auto;\n      animation: 800ms ${indeterminateBackgroundAnimation} linear infinite;\n    `}\n`;\n\nconst getIndeterminateStartColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateStartColor\");\nconst getIndeterminateEndColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ProgressBar.indeterminateEndColor\");\n\nconst indeterminateBackgroundAnimation = keyframes`\n  0% {\n    background-position: 0;\n  }\n  100% {\n    background-position: 96px;\n  }\n`;\n\nconst StyledProgressBarProgress = styled.div`\n  height: 100%;\n  background: ${({ theme }) =>\n    theme.color(\n      \"ProgressBar.progressColor\",\n      theme.dark ? \"rgb(160,160,160)\" : \"rgb(128,128,128)\"\n    )};\n`;\n\ntype ProgressBarIconButtonProps = Pick<PressProps, \"onPress\"> & {\n  hoverTooltip: string;\n};\n\n/**\n * Accessibility and functionality of progress bar icon buttons\n * @private maybe?\n */\nexport function useProgressBarIconButton(\n  { onPress, hoverTooltip }: ProgressBarIconButtonProps,\n  ref: Ref<HTMLElement>\n) {\n  const { buttonProps } = useButton(\n    {\n      onPress,\n      elementType: \"span\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: it works, but it's intentionally excluded from the type.\n      preventFocusOnPress: true,\n    },\n    ref\n  );\n  const context = useContext(ProgressBarContext);\n  const { hoverProps, isHovered } = useHover({});\n  useEffect(() => {\n    context?.setTooltip(isHovered ? hoverTooltip : null);\n  }, [hoverTooltip, isHovered]);\n  return {\n    buttonProps: mergeProps(buttonProps, hoverProps),\n  };\n}\n\n/**\n * @private maybe?\n * */\nexport function useProgressBarPauseIconButton(\n  { paused, ...props }: ProgressBarIconButtonProps & { paused: boolean },\n  ref: Ref<HTMLElement>\n) {\n  const context = useContext(ProgressBarContext);\n  useEffect(() => {\n    context?.setForcedDetails(paused ? \"Paused\" : null);\n  }, [paused]);\n  return useProgressBarIconButton(props, ref);\n}\n\n/**\n * Experimenting with an idea of exposing parts on each component, to maximize styling customizability, similar to\n * [classes](https://mui.com/joy-ui/api/button/#classes) API in MUI components. But instead of passing classes prop,\n * one would be able to create custom versions of a component by doing something like this:\n * const CustomComponent = styled(Component)`\n *   ${Component.part1} {\n *     // custom style here\n *   }\n * `;\n * The question is if this type of customizability is actually a good thing in the balance between flexibility for\n * catering for different use cases and not stepping out of the design system boundaries.\n * Another potential downside is that the public API expands to the anatomy of the component.\n */\nProgressBar.Container = StyledProgressBarContainer;\nProgressBar.Label = StyledProgressBarLabel;\nProgressBar.LineContainer = StyledProgressBarLineContainer;\nProgressBar.Track = StyledProgressBarTrack;\nProgressBar.Progress = StyledProgressBarProgress;\nProgressBar.Details = StyledProgressBarDetails;\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarCancelButtonProps {\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n  onPress: () => void;\n}\n\n/**\n * Stop (cancel) icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarStopButton = ({\n  small,\n  onPress,\n}: ProgressBarCancelButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarIconButton(\n    { onPress, hoverTooltip: \"Cancel\" },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      ref={ref}\n      {...buttonProps}\n      icon={`process/stop${small ? \"Small\" : \"\"}.svg`}\n      hoverIcon={`process/stop${small ? \"Small\" : \"\"}Hovered.svg`}\n    />\n  );\n};\n","import React from \"react\";\nimport {\n  ThreeViewSplitter,\n  ThreeViewSplitterProps,\n} from \"./ThreeViewSplitter/ThreeViewSplitter\";\n\ntype ResizableViewProps = Omit<\n  ThreeViewSplitterProps,\n  | \"innerView\"\n  | \"firstView\"\n  | \"firstSize\"\n  | \"onFirstResize\"\n  | \"lastView\"\n  | \"lastSize\"\n  | \"onLastResize\"\n> & {\n  children: React.ReactNode;\n  onResize: ThreeViewSplitterProps[\"onFirstResize\"];\n  size: ThreeViewSplitterProps[\"firstSize\"];\n  /**\n   * Whether the resizer should be placed at before or after the resizable view.\n   */\n  resizerPlacement?: \"before\" | \"after\";\n};\n/**\n * A single resizable view, built on top of {@link ThreeViewSplitter}, just to provide better prop interface.\n * Like `ThreeViewSplitter` it supports \"horizontal\" or \"vertical orientations. There is an extra `resizerPlacement`\n * prop which determines where the resizer should be placed in relation with the view. When set to \"before\" the view\n * will be resizable from the start (\"left\" or \"top\"). When set to \"after\" the view will be resizable from end (\"right\"\n * or \"bottom\"). Default is \"after\"\n */\nexport const ResizableView = ({\n  children,\n  size,\n  onResize,\n  resizerPlacement = \"after\",\n  ...props\n}: ResizableViewProps) => (\n  <ThreeViewSplitter\n    {...(resizerPlacement === \"after\"\n      ? { firstView: children, firstSize: size, onFirstResize: onResize }\n      : { lastView: children, lastSize: size, onLastResize: onResize })}\n    {...props}\n  />\n);\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useBottomResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will increase/decrease the height\n */\nexport const BottomResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useBottomResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype HorizontalResizerViewProps = ResizerViewProps<\"horizontal\">;\n\nconst StyledHorizontalResizer = styled.div`\n  top: 0;\n  height: 100%;\n  width: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledHorizontalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: HorizontalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  width: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  height: 100%;\n  left: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a horizontal layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const HorizontalResizer: React.FC<HorizontalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"col\",\n  children,\n  style = {},\n  resizerProps,\n}) => {\n  return (\n    <StyledHorizontalResizer\n      {...resizerProps}\n      style={{ ...style, background, width: size }}\n    >\n      {children}\n      <StyledHorizontalResizerArea handleSize={outerPadding} cursor={cursor} />\n    </StyledHorizontalResizer>\n  );\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useLeftResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the left side of the resizable view. i.e.\n * moving mouse to right/left will decrease/increase the width\n */\nexport const LeftResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useLeftResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { HorizontalResizer } from \"./HorizontalResizer\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useRightResizer } from \"./useResizer\";\n\n/**\n * Handle for resizing views in a horizontal layout, where the resizer is at the right side of the resizable view. i.e.\n * moving mouse to right/left will increase/decrease the width\n */\nexport const RightResizer: React.FC<ResizerProps<\"horizontal\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useRightResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <HorizontalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport { ResizerProps } from \"./ResizerProps\";\nimport { useTopResizer } from \"./useResizer\";\nimport { VerticalResizer } from \"./VerticalResizer\";\n\n/**\n * Handle for resizing views in a vertical layout, where the resizer is at the top side of the resizable view. i.e.\n * moving mouse to bottom/top will decrease/increase the height\n */\nexport const TopResizer: React.FC<ResizerProps<\"vertical\">> = ({\n  onResize,\n  onResizeEnd,\n  onResizeStarted,\n  ...props\n}) => {\n  const { resizerProps } = useTopResizer({\n    onResize,\n    onResizeEnd,\n    onResizeStarted,\n  });\n  return <VerticalResizer resizerProps={resizerProps} {...props} />;\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ResizerViewProps } from \"./useResizer\";\n\ntype VerticalResizerViewProps = ResizerViewProps<\"vertical\">;\n\nconst StyledVerticalResizer = styled.div`\n  width: 100%;\n  height: 0;\n  position: relative;\n  z-index: 1; // to keep resizer on top of sibling views, in case they are non-static\n`;\n\nconst StyledVerticalResizerArea = styled.div<{\n  handleSize: number;\n  cursor: VerticalResizerViewProps[\"cursor\"];\n}>`\n  position: absolute;\n  cursor: ${({ cursor }) => `${cursor}-resize`};\n  height: ${({ handleSize }) => `calc(100% + ${handleSize}px)`};\n  width: 100%;\n  top: ${({ handleSize }) => `-${handleSize / 2}px`};\n`;\n\n/**\n * Handle for resizing views in a vertical layout. It just handles the\n * movement event and calls onResize with the new size. It has nothing to do\n * with actually applying the size.\n */\nexport const VerticalResizer: React.FC<VerticalResizerViewProps> = ({\n  outerPadding = 10,\n  background,\n  size = 0,\n  cursor = \"row\",\n  resizerProps,\n  children,\n  style = {},\n}) => (\n  <StyledVerticalResizer\n    {...resizerProps}\n    style={{ ...style, background, height: size }}\n  >\n    {children}\n    <StyledVerticalResizerArea handleSize={outerPadding} cursor={cursor} />\n  </StyledVerticalResizer>\n);\n","import { useMove } from \"../utils/interaction-utils/useMove\";\nimport { ResizerProps } from \"./ResizerProps\";\n\ntype UseResizerProps = Pick<\n  ResizerProps,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n>;\n\nexport type ResizerViewProps<O = \"horizontal\" | \"vertical\"> = Omit<\n  ResizerProps<O>,\n  \"onResize\" | \"onResizeEnd\" | \"onResizeStarted\"\n> &\n  ReturnType<typeof useResizer>;\n\nconst useResizer = (\n  orientation: \"horizontal\" | \"vertical\",\n  invert: boolean,\n  { onResizeStarted, onResize, onResizeEnd }: UseResizerProps\n) => {\n  const props = useMove({\n    dragThreshold: 0,\n    onMoveStart: () => onResizeStarted() || 0,\n    onMoveEnd: () => onResizeEnd?.(),\n    onMove: ({ movement, startState }) =>\n      onResize(\n        startState +\n          (invert ? -1 : +1) *\n            movement[orientation === \"horizontal\" ? \"x\" : \"y\"]\n      ),\n  });\n  return {\n    resizerProps: props,\n  };\n};\n\nexport const useLeftResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", true, props);\n};\n\nexport const useRightResizer = (props: UseResizerProps) => {\n  return useResizer(\"horizontal\", false, props);\n};\n\nexport const useTopResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", true, props);\n};\n\nexport const useBottomResizer = (props: UseResizerProps) => {\n  return useResizer(\"vertical\", false, props);\n};\n","import React, { ComponentProps, useState } from \"react\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useControlledState } from \"@react-stately/utils\";\n\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n  CommonActionId,\n  useGetActionShortcut,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { Input, InputProps } from \"@intellij-platform/core/InputField\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { Item } from \"@intellij-platform/core/Collections\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\n\nexport interface SearchInputProps\n  extends Omit<InputProps, \"onSubmit\" | \"onChange\"> {\n  /**\n   * Search history to be shown as a menu when the search icon is pressed.\n   */\n  searchHistory?: Array<string>;\n  /**\n   * The content of \"show history\" button tooltip, and the corresponding action title.\n   * @default \"Recent Search\"\n   */\n  historyButtonTitle?: string;\n  /**\n   * Called when the search input is cleared by either clear button or `Escape` key.\n   * `onChange` is also called with an empty string, whenever the input is cleared,\n   * so there is no need for updating the state using `onClear`, when the value is controlled.\n   *\n   * @param clearedValue the value before clearing.\n   */\n  onClear?: (clearedValue: string) => void;\n  /**\n   * Called when the search is submitted by pressing `Enter`\n   * @param value submitted text\n   */\n  onSubmit?: (value: string) => void;\n  /**\n   * Controlled value of the search input\n   */\n  value?: string;\n  /**\n   * Default value of the search input, used for initialization when value is uncontrolled.\n   */\n  defaultValue?: string;\n  /**\n   * Called when the value is changed.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * Called when a history item is selected. `onChange` is called with the selected text, so\n   * there is no need for updating the state using `onHistoryItemSelected`, when the value is controlled.\n   *\n   * @param value text selected from history.\n   * @param previousValue the value of the input before the history item was selected.\n   */\n  onHistoryItemSelected?: (value: string, previousValue: string) => void;\n}\n\nconst StyledInput = styled(Input)`\n  input[type=\"search\"] {\n    -webkit-appearance: none;\n    &::-webkit-search-cancel-button {\n      -webkit-appearance: none;\n    }\n    &::-webkit-search-decoration {\n      -webkit-appearance: none;\n    }\n  }\n`;\n\n/**\n * A wrapper around {@link Input} with a few additions:\n * - A Search icon, added as an {@link InputProps#addonBefore addonBefore}.\n * - A clear button, added as an {@link InputProps#addonAfter addonAfter}, when the input has value.\n *   {@link SearchInputProps#onClear onClear} is called when the clear button is clicked.\n * - A list of search queries shown as a menu, when the search icon is clicked,\n *   if {@link SearchInputProps#searchHistory searchHistory} is provided.\n * - An action provided on the input element, to open the search history via\n *   {@link CommonActionId.SHOW_SEARCH_HISTORY} shortcut.\n * - Search submission callback ({@link SearchInputProps#onSubmit onSubmit}) called when search is submitted by pressing Enter\n *\n * {@link InputProps#onChange onChange} and {@link InputProps#onSubmit onSubmit} props are also different in SearchInput, compared to\n * the corresponding props of the native input.\n *\n * Caveat: If the width is not set (either explicitly or via the entailing layout), the width of the input will change when clear button shows/hides.\n *\n */\nexport const SearchInput = React.forwardRef(function SearchInput(\n  {\n    addonBefore,\n    addonAfter,\n    searchHistory,\n    onClear,\n    onSubmit,\n    onHistoryItemSelected,\n    historyButtonTitle = \"Recent Search\",\n    value: valueProp,\n    defaultValue = \"\",\n    onChange,\n    type = \"search\",\n    inputRef: inputRefProp,\n    ...props\n  }: SearchInputProps,\n  forwardedRef: React.Ref<HTMLDivElement>\n) {\n  const [value, setValue] = useControlledState(\n    valueProp!,\n    defaultValue,\n    onChange!\n  );\n  const inputContainerRef = useObjectRef(forwardedRef);\n  const inputRef = useObjectRef(inputRefProp);\n  const [isSearchHistoryOpen, setSearchHistoryOpen] = useState(false);\n  const showSearchHistoryAction: ActionDefinition = {\n    id: CommonActionId.SHOW_SEARCH_HISTORY,\n    title: historyButtonTitle,\n    actionPerformed: () => {\n      setSearchHistoryOpen(true);\n    },\n  };\n  // TODO: rename HelpTooltip, ActionTooltip, etc. to Tooltip.Action Tooltip.Help, then add ActionTooltip in action\n  //  components, and use that instead of the more low-level API used here.\n  const getShortcut = useGetActionShortcut();\n  const searchIcon = searchHistory ? (\n    <MenuTrigger\n      isOpen={isSearchHistoryOpen}\n      onOpenChange={setSearchHistoryOpen}\n      positioningTargetRef={inputContainerRef}\n      renderMenu={({ menuProps }) => (\n        <Menu\n          {...menuProps}\n          autoFocus=\"first\"\n          onAction={(key) => {\n            const historyItemText =\n              searchHistory[parseInt(`${key}`.split(\"_\")[0])];\n            if (historyItemText !== undefined) {\n              setValue(historyItemText);\n              onHistoryItemSelected?.(historyItemText, value);\n              inputRef.current?.focus();\n            }\n          }}\n        >\n          {searchHistory.map((historyItem, index) => (\n            <Item key={`${index}_${historyItem}`}>{historyItem}</Item>\n          ))}\n        </Menu>\n      )}\n    >\n      {(menuTriggerProps, ref) => (\n        <TooltipTrigger\n          tooltip={\n            <ActionTooltip\n              actionName={historyButtonTitle}\n              shortcut={getShortcut(CommonActionId.SHOW_SEARCH_HISTORY)}\n            />\n          }\n        >\n          {(tooltipTriggerProps) => (\n            <PlatformIcon\n              {...mergeProps(tooltipTriggerProps, menuTriggerProps)}\n              ref={ref}\n              icon=\"actions/searchWithHistory.svg\"\n              role=\"button\"\n              aria-label={historyButtonTitle}\n            />\n          )}\n        </TooltipTrigger>\n      )}\n    </MenuTrigger>\n  ) : (\n    <PlatformIcon icon=\"actions/search.svg\" />\n  );\n  const clear = () => {\n    setValue(\"\");\n    onClear?.(value);\n  };\n  const inputProps = mergeProps<ComponentProps<typeof Input>[]>(props, {\n    ref: inputContainerRef,\n    inputRef,\n    value,\n    type,\n    onChange: (event) => {\n      setValue(event.target.value);\n    },\n    addonBefore: (\n      <>\n        {searchIcon}\n        {addonBefore}\n      </>\n    ),\n    addonAfter: (\n      <>\n        {value && (\n          <AutoHoverPlatformIcon\n            onClick={clear}\n            role=\"button\"\n            aria-label=\"Clear search\"\n            icon=\"actions/close\"\n            hoverIcon=\"actions/closeHovered\"\n          />\n        )}\n        {addonAfter}\n      </>\n    ),\n    onKeyDown: (event) => {\n      if (event.repeat) {\n        return;\n      }\n      if (event.key === \"Enter\") {\n        onSubmit?.(event.currentTarget.value);\n      } else if (event.key === \"Escape\") {\n        clear();\n      }\n    },\n  });\n  if (searchHistory) {\n    return (\n      <ActionsProvider actions={[showSearchHistoryAction]}>\n        {({ shortcutHandlerProps }) => (\n          <StyledInput {...mergeProps(inputProps, shortcutHandlerProps)} />\n        )}\n      </ActionsProvider>\n    );\n  }\n  return <StyledInput {...inputProps} />;\n});\n","import React, { useRef } from \"react\";\nimport { useButton } from \"@react-aria/button\";\nimport {\n  AutoHoverPlatformIcon,\n  PlatformIcon,\n} from \"@intellij-platform/core/Icon\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface SpeedSearchInputProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n  clear: () => void;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 0.25rem;\n`;\n\nconst StyledSpeedSearchInput = styled.span<{ noMatch?: boolean }>`\n  box-sizing: border-box;\n  display: flex;\n  align-items: center;\n  background: ${({ theme, noMatch }) =>\n    noMatch\n      ? theme.color(\n          \"SearchField.errorBackground\",\n          theme.dark ? \"#743A3A\" : \"#ffcccc\"\n        )\n      : theme.color(\n          \"TextField.background\"\n        )}; // fallback logic not checked with the ref impl\n  color: ${({ theme }) =>\n    theme.color(\n      \"TextField.foreground\" as UnknownThemeProp<\"TextField.foreground\">\n    )}; // fallback logic not checked with the ref impl\n  height: 1.5rem; // 24px, JBTextField COMPACT_HEIGHT\n  padding: 0.125rem 0.375rem;\n  border: 1px solid ${({ theme }) => theme.getOutlineColor(true, false)};\n  border-radius: ${({ theme }) =>\n    ((theme.value(\"Component.arc\") as number) ?? 5) / 2}px;\n`;\nconst StyledSearchText = styled.span`\n  flex: 1;\n  font-size: 0.91em; // RelativeFont.SMALL\n`;\n\n/**\n * An input field to be rendered to show the filter value in speed search in menus and similar speedSearch-enabled\n * components.\n * @see SpeedSearchPopup\n */\nexport const SpeedSearchInput = React.forwardRef<\n  HTMLElement,\n  SpeedSearchInputProps\n>(({ active, match, children, clear }, ref) => {\n  const clearButtonRef = useRef<HTMLElement>(null);\n  const { buttonProps } = useButton(\n    {\n      elementType: \"span\",\n      \"aria-label\": \"Clear search\",\n      excludeFromTabOrder: true,\n      // @ts-expect-error: preventFocusOnPress is not defined in public API of useButton\n      preventFocusOnPress: true,\n      onPress: clear,\n    },\n    clearButtonRef\n  );\n\n  // Temporary styled components until SearchInput is implemented\n  return active ? (\n    <StyledSpeedSearchInput ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      <StyledSearchText>\n        {(children || \"\").replace(/ /g, \"\\u00A0\")}\n      </StyledSearchText>\n      {children && (\n        <AutoHoverPlatformIcon\n          {...buttonProps}\n          ref={clearButtonRef}\n          icon=\"actions/close\"\n          hoverIcon=\"actions/closeHovered\"\n        />\n      )}\n    </StyledSpeedSearchInput>\n  ) : null;\n});\n","import { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React from \"react\";\nimport { styled } from \"../styled\";\n\nexport interface SpeedSearchPopupProps {\n  children: string | undefined;\n  match?: boolean;\n  active: boolean | undefined;\n}\n\nconst StyledSearchIcon = styled(PlatformIcon)`\n  margin-right: 10px;\n  vertical-align: middle;\n`;\n\n/**\n * The little popup view shown in the top left corner of list, tree, etc., which shows the search\n * query.\n * @see SpeedSearchInput\n */\nexport const SpeedSearchPopup = React.forwardRef<\n  HTMLElement,\n  SpeedSearchPopupProps\n>(({ active, match, children }, ref) =>\n  active ? (\n    <StyledSpeedSearchPopup ref={ref} noMatch={!match}>\n      <StyledSearchIcon icon={\"actions/search\"} />\n      {(children || \"\").replace(/ /g, \"\\u00A0\")}\n    </StyledSpeedSearchPopup>\n  ) : null\n);\n\nconst StyledSpeedSearchPopup = styled.span<{ noMatch?: boolean }>`\n  // ref: https://github.com/JetBrains/intellij-community/blob/e3c7d96daba1d5d84d5650bde6c220aed225bfda/platform/platform-impl/src/com/intellij/ui/SpeedSearchBase.java#L53-L53\n  box-sizing: border-box;\n  position: absolute;\n  background: ${({ theme }) =>\n    theme.color(\n      \"SpeedSearch.background\",\n      theme.dark ? \"rgb(111,111,111)\" : \"#fff\"\n    )};\n  border: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"SpeedSearch.borderColor\",\n        theme.dark ? \"rgb(64, 64, 64)\" : \"rgb(192, 192, 192)\"\n      )};\n  color: ${({ noMatch, theme }) =>\n    noMatch\n      ? theme.color(\"SpeedSearch.errorForeground\", theme.commonColors.red)\n      : theme.color(\n          \"SpeedSearch.foreground\",\n          theme.commonColors.tooltipForeground\n        )};\n  z-index: 1;\n  padding: 3px 7px;\n  height: 25px;\n  line-height: 1.2;\n  transform: translateY(-100%);\n`;\n","import React, { useRef } from \"react\";\n\nfunction isTypeableElement(elem: HTMLElement): boolean {\n  const nonTypeableInputTypes: Array<HTMLInputElement[\"type\"]> = [\n    \"checkbox\",\n    \"radio\",\n    \"button\",\n  ];\n  return (\n    elem.isContentEditable ||\n    (elem instanceof HTMLInputElement &&\n      !nonTypeableInputTypes.includes(elem.type)) ||\n    elem instanceof HTMLTextAreaElement\n  );\n}\n\n/**\n * Main use case is for a list of item, which can have keyboard focus, be filterable and capture\n * typing if the corresponding keyboard events are not happening on an inner element (like an input)\n * that already handles typing.\n * @param value\n * @param onChange\n * TODO: add support for removing word by word by alt+backspace like native text fields.\n * TODO: add support for removing the whole content by command/ctrl+backspace.\n */\nexport function useGhostInput({\n  value,\n  onChange,\n}: {\n  value: string;\n  onChange: (value: string) => void;\n}) {\n  const valueRef = useRef(value);\n  valueRef.current = value;\n  const onKeyDown = (event: React.KeyboardEvent | KeyboardEvent) => {\n    if (\n      !event.ctrlKey &&\n      !event.altKey &&\n      !event.metaKey &&\n      (!(event.target instanceof HTMLElement) ||\n        !isTypeableElement(event.target))\n    ) {\n      if (event.key.length === 1) {\n        // Seems reasonable to prevent default here generally, but the specific case this is added for is the space key,\n        // scrolling the page.\n        event.preventDefault();\n        return onChange(`${valueRef.current}${event.key}`);\n      }\n      if (event.key === \"Backspace\") {\n        const sliceEnd = event.metaKey ? 0 : -1;\n        onChange(valueRef.current.slice(0, sliceEnd));\n      }\n    }\n  };\n  return { onKeyDown } as const;\n}\n","import { useGhostInput } from \"./useGhostInput\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport React, { RefObject } from \"react\";\n\nexport interface SpeedSearchState {\n  /**\n   * Whether speed search is active. Speed search becomes active when the user starts to type and becomes inactive\n   * when Escape is pressed, or when the speed search container is blurred and `keepSearchActiveOnBlur` is false.\n   * Whenever speed search becomes inactive, search text is also cleared.\n   * Note that speed search can be active while search term is empty.\n   */\n  active: boolean;\n  setActive: (value: boolean) => void;\n  searchTerm: string;\n  setSearchTerm: (value: string) => void;\n  /**\n   * clears search term and sets active to false\n   */\n  clear: () => void;\n}\n\nexport interface SpeedSearchStateProps\n  extends ControlledStateProps<{\n    searchTerm: string;\n    isSearchActive: boolean;\n  }> {}\n\nexport function useSpeedSearchState(\n  props: SpeedSearchStateProps\n): SpeedSearchState {\n  const [active, setActive] = useControlledState(\n    props.isSearchActive!,\n    props.defaultIsSearchActive ?? false,\n    props.onIsSearchActiveChange!\n  );\n  const [searchTerm, setSearchTerm] = useControlledState(\n    props.searchTerm!,\n    props.defaultSearchTerm || \"\",\n    props.onSearchTermChange!\n  );\n\n  return {\n    active,\n    searchTerm,\n    setActive,\n    setSearchTerm,\n    clear: () => {\n      setSearchTerm(\"\");\n      setActive(false);\n    },\n  };\n}\n\nexport interface SpeedSearchProps {\n  keepSearchActiveOnBlur?: boolean | ((e: React.FocusEvent) => boolean);\n}\n\n/**\n * TODO: description\n * IMPORTANT: making the container element focusable is not a part of this hook. But it's a prerequisite for it to work.\n * Previously, a tabIndex:-1 was passed as a container prop, but it turns out it's not that simple. For collections for\n * example we usually want tab index to be 0 once it's not focused and then when an item is focused, we want it to be\n * -1, and such kind of logics are handled in their respective hooks. So, making the container focusable and how to do\n * it is NOT this hook's responsibility anymore.\n */\nexport function useSpeedSearch(\n  { keepSearchActiveOnBlur }: SpeedSearchProps,\n  { searchTerm, active, setActive, setSearchTerm }: SpeedSearchState,\n  ref: RefObject<HTMLElement>\n) {\n  const { onKeyDown: ghostInputKeydown } = useGhostInput({\n    value: searchTerm,\n    onChange: (value) => {\n      const trimmedValue = value.trimStart();\n      setSearchTerm(trimmedValue);\n      if (!active && trimmedValue !== \"\") {\n        setActive(true);\n      }\n    },\n  });\n  const clear = () => {\n    setSearchTerm(\"\");\n    setActive(false);\n  };\n\n  const {\n    keyboardProps: { onKeyDown, onKeyUp },\n  } = useKeyboard({\n    onKeyDown: (e) => {\n      if (!ref.current?.contains(e.target as HTMLElement)) {\n        // In case events are propagated through portals\n        return;\n      }\n      if ((e.key === \"a\" && e.metaKey) || e.ctrlKey) {\n        e.preventDefault();\n      }\n      if (e.key === \"Escape\") {\n        if (searchTerm) {\n          clear();\n          return;\n        }\n      } else {\n        ghostInputKeydown(e);\n      }\n      e.continuePropagation();\n    },\n  });\n\n  const {\n    focusWithinProps: { onFocus, onBlur },\n  } = useFocusWithin({\n    onBlurWithin: (event) => {\n      if (\n        !(typeof keepSearchActiveOnBlur === \"function\"\n          ? keepSearchActiveOnBlur(event)\n          : keepSearchActiveOnBlur)\n      ) {\n        clear();\n      }\n    },\n  });\n\n  return {\n    containerProps: {\n      onFocus,\n      onBlur,\n      onKeyDown,\n      onKeyUp,\n    },\n  };\n}\n","import React from \"react\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\n\nexport interface StatusBarProps {\n  left: React.ReactNode;\n  right: React.ReactNode;\n}\n\n/**\n * Status bar rendered at the bottom of the main window. In the reference implementation, there are three slots for\n * content: left, right and center. It doesn't seem center is really necessary, so only left and right are supported\n * for now.\n * @param left content on the left side of the status bar.\n * @param right content on the right side of the status bar. Typically, a bunch of {@link StatusBarWidget}s\n */\nexport const StatusBar = ({\n  left,\n  right,\n}: StatusBarProps): React.ReactElement => {\n  return (\n    <StyledStatusBar\n      onMouseDown={(e) => {\n        // stop focus from going out of the currently focused element, when status bar is clicked\n        // might be too intrusive to prevent default unconditionally :-? Also, it may make sense for it to be an option\n        e.preventDefault();\n      }}\n    >\n      <StyledStatusBarLeft>{left}</StyledStatusBarLeft>\n      <StyledStatusBarRight>{right}</StyledStatusBarRight>\n    </StyledStatusBar>\n  );\n};\n\nconst StyledStatusBar = styled.div`\n  box-sizing: border-box;\n  padding: 0 0.25rem;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  justify-content: space-between; // because there is left and right sides\n  background-color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.background\" as UnknownThemeProp<\"StatusBar.background\">,\n      theme.color(\"Panel.background\" as UnknownThemeProp<\"Panel.background\">)\n    ) || \"#fff\"};\n  color: ${({ theme }) =>\n    theme.color(\n      \"StatusBar.Widget.foreground\" as UnknownThemeProp<\"StatusBar.Widget.foreground\">,\n      theme.commonColors.labelForeground\n    )};\n  border-top: 1px solid\n    ${({ theme }) => theme.color(\"StatusBar.borderColor\", \"rgb(145, 145, 145)\")};\n  height: calc(1.25rem + 1px /* border*/);\n  line-height: 1.25rem;\n  font-size: 0.656rem; // not verified\n  cursor: default;\n`;\n\nconst StyledStatusBarSection = styled.div`\n  display: flex;\n  align-items: center;\n  white-space: nowrap;\n`;\n\nconst StyledStatusBarRight = styled(StyledStatusBarSection)`\n  flex-shrink: 0;\n`;\nconst StyledStatusBarLeft = styled(StyledStatusBarSection)`\n  flex-shrink: 1;\n  min-width: 0;\n  overflow: hidden;\n`;\n","import React, { ForwardedRef } from \"react\";\nimport { PressProps, usePress } from \"@react-aria/interactions\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport { useFocusable } from \"@react-aria/focus\";\n\nexport interface StatusBarWidgetProps extends PressProps {\n  label?: React.ReactNode;\n  icon?: React.ReactNode;\n}\n\n/**\n * Status bar button (aka widget), with the right hover and pressed appearance.\n * It doesn't get focused when pressed, and is excluded from tab order.\n * Disabled style is not couldn't be found, so it's skipped at the moment.\n */\nexport const StatusBarWidget = React.forwardRef(function StatusBarWidget(\n  props: StatusBarWidgetProps,\n  forwardedRef: ForwardedRef<HTMLSpanElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  // Maybe it's better for a11y to use useButton, or at least use button element?\n  const { pressProps, isPressed } = usePress({\n    ref,\n    ...props,\n    preventFocusOnPress: true,\n  });\n  const { focusableProps } = useFocusable({ excludeFromTabOrder: true }, ref);\n\n  const StyledWrapper = props.label\n    ? StyledStatusBarWidget\n    : StyledStatusBarIconWidget;\n  return (\n    <StyledWrapper\n      {...mergeProps(pressProps, focusableProps)}\n      className={isPressed ? \"pressed\" : \"\"}\n      ref={ref}\n    >\n      {props.icon}\n      {props.icon && props.label && (\n        <>&nbsp;</> //not the nicest way to handle spacing!\n      )}\n      {props.label}\n    </StyledWrapper>\n  );\n});\n\nconst StyledStatusBarWidget = styled.span`\n  display: inline-flex;\n  align-items: center;\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.375rem\"};\n  height: 1.125rem;\n  white-space: nowrap;\n  &:hover {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverBackground\" as UnknownThemeProp<\"StatusBar.Widget.hoverBackground\">,\n        theme.color(\"ActionButton.hoverBackground\", \"#dfdfdf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.hoverForeground\" as UnknownThemeProp<\"StatusBar.Widget.hoverForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n  &.pressed {\n    background-color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedBackground\" as UnknownThemeProp<\"StatusBar.Widget.pressedBackground\">,\n        theme.color(\"ActionButton.pressedBackground\", \"#cfcfcf\")\n      )};\n    color: ${({ theme }) =>\n      theme.color(\n        \"StatusBar.Widget.pressedForeground\" as UnknownThemeProp<\"StatusBar.Widget.pressedForeground\">,\n        theme.commonColors.labelForeground\n      )};\n  }\n`;\n\nconst StyledStatusBarIconWidget = styled(StyledStatusBarWidget)`\n  padding: ${({ theme }) =>\n    theme.inset(\n      \"StatusBar.Widget.widgetInsets\" as UnknownThemeProp<\"StatusBar.Widget.widgetInsets\">\n    ) ?? \"0 0.25rem\"};\n`;\n","import React from \"react\";\nimport { styled } from \"./styled\";\n\ntype SeparatorUI = {\n  STRIPE_INDENT: number;\n  STRIPE_WIDTH: number;\n};\n\n// based on implementation in com.intellij.ide.ui.laf.darcula.ui.DarculaSeparatorUI, which seems to be used for all themes\nconst DarculaSeparatorUI: SeparatorUI = {\n  STRIPE_INDENT: 1,\n  STRIPE_WIDTH: 1,\n};\n\nconst defaultSize =\n  2 * DarculaSeparatorUI.STRIPE_INDENT + DarculaSeparatorUI.STRIPE_WIDTH;\n\nexport const StyledSeparator = styled.hr(({ theme }) => ({\n  backgroundColor: theme.color(\n    \"Separator.separatorColor\",\n    theme.dark ? \"#cdcdcd\" : \"#515151\"\n  ),\n  backgroundClip: \"content-box\",\n  boxSizing: \"border-box\",\n  margin: 0,\n  border: \"none\",\n  flexShrink: 0,\n}));\n\nexport const StyledHorizontalSeparator = styled(StyledSeparator)`\n  height: inherit; // should it be auto?\n  padding: 0 ${DarculaSeparatorUI.STRIPE_INDENT}px;\n  width: ${defaultSize}px;\n`;\nexport const StyledVerticalSeparator = styled(StyledSeparator)`\n  width: auto;\n  padding: ${DarculaSeparatorUI.STRIPE_INDENT}px 0;\n  height: ${defaultSize}px;\n`;\n","import { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport React from \"react\";\n\nexport const DebuggerTabContent = ({\n  icon,\n  title,\n  closeButton,\n}: {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <DebuggerTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n}) => {\n  return (\n    <TabContentLayout startIcon={icon} title={title} endIcon={closeButton} />\n  );\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const debuggerTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  underlineHeight: theme.value<number>(\"DebuggerTabs.underlineHeight\") ?? 2,\n  underlinedTabBackground: theme.color(\"DebuggerTabs.underlinedTabBackground\"),\n});\nexport const StyledDebuggerTab = styled(StyledDefaultTab)`\n  ${({ theme }) => getTabThemeStyles(debuggerTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledDebuggerTab } from \"./StyledDebuggerTab\";\nimport React from \"react\";\n\ntype DebuggerTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"focusable\"\n>;\n\nexport const DebuggerTabs = <T extends object>(props: DebuggerTabsProps<T>) => (\n  <Tabs {...props} TabComponent={StyledDebuggerTab} focusable={false} />\n);\n","import React from \"react\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport {\n  TabContentLayout,\n  TabItemLayoutProps,\n} from \"@intellij-platform/core/Tabs/TabContentLayout\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { BareButton } from \"@intellij-platform/core/Button\";\n\ninterface EditorTabContentProps {\n  icon: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button, shown in place of \"pin\" button if not pinned. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <EditorTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactElement;\n  onUnpin?: () => void;\n  pinned?: boolean;\n  containerProps?: TabItemLayoutProps[\"containerProps\"];\n}\n/**\n * For rendering the content of Editor tabs. supports for file icon which is shown on the left and close or unpin\n * button shown on the right.\n */\nexport const EditorTabContent = ({\n  icon,\n  title,\n  closeButton,\n  onUnpin,\n  pinned,\n  containerProps,\n}: EditorTabContentProps) => {\n  return (\n    <TabContentLayout\n      startIcon={icon}\n      title={title}\n      containerProps={containerProps}\n      endIcon={\n        pinned ? (\n          <TooltipTrigger tooltip={<ActionTooltip actionName=\"Unpin Tab\" />}>\n            <BareButton\n              onPress={onUnpin}\n              excludeFromTabOrder\n              preventFocusOnPress\n            >\n              <PlatformIcon icon=\"actions/pinTab\" />\n            </BareButton>\n          </TooltipTrigger>\n        ) : (\n          closeButton\n        )\n      }\n    />\n  );\n};\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme, UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const editorTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"EditorTabs.borderColor\"),\n  underlineHeight: theme.value<number>(\"EditorTabs.underlineHeight\"),\n  background: theme.color(\"EditorTabs.background\"),\n  underlinedTabInactiveBackground: theme.color(\n    \"EditorTabs.underlinedTabBackground\" // that's correctly not underlinedTabInactiveBackground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabBackground: theme.color(\"EditorTabs.underlinedTabBackground\"), // TODO: use EditorColorsScheme when available\n  hoverInactiveBackground: theme.color(\n    \"EditorTabs.hoverInactiveBackground\" as UnknownThemeProp<\"EditorTabs.hoverInactiveBackground\">\n  ),\n  hoverBackground: theme.color(\"EditorTabs.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\"EditorTabs.inactiveUnderlineColor\"), // TODO: use EditorColorsScheme when available\n  underlineColor: theme.color(\"EditorTabs.underlineColor\"), // TODO: use EditorColorsScheme when available\n\n  underlinedTabInactiveForeground: theme.color(\n    \"EditorTabs.underlinedTabForeground\" // that's correctly not underlinedTabInactiveForeground!\n  ), // TODO: use EditorColorsScheme when available\n  underlinedTabForeground: theme.color(\"EditorTabs.underlinedTabForeground\"), // TODO: use EditorColorsScheme when available\n});\nexport const StyledEditorTab = styled(StyledDefaultTab)`\n  font-size: 0.7rem;\n  ${({ theme }) => getTabThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { editorTabTheme } from \"./StyledEditorTab\";\n\nexport const StyledEditorTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(editorTabTheme({ theme }))};\n`;\n","import { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledEditorTab } from \"./StyledEditorTab\";\nimport { StyledEditorTabs } from \"./StyledEditorTabs\";\nimport React from \"react\";\n\nexport type EditorTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const EditorTabs = <T extends object>(props: EditorTabsProps<T>) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledEditorTab}\n    TabsComponent={StyledEditorTabs}\n    focusable={false}\n  />\n);\n","import { getTabThemeStyles } from \"./TabTheme\";\nimport { styled } from \"../styled\";\nimport { Theme, UnknownThemeProp } from \"../Theme\";\n\nexport type StyledTabProps = {\n  selected?: boolean;\n  disabled?: boolean;\n  active?: boolean;\n};\n\nconst defaultTabTheme = ({ theme }: { theme: Theme }) =>\n  getTabThemeStyles({\n    underlineHeight: theme.value<number>(\"DefaultTabs.underlineHeight\") ?? 3,\n    inactiveUnderlineColor: theme.color(\n      \"DefaultTabs.inactiveUnderlineColor\",\n      theme.dark ? \"#747a80\" : \"#9ca7b8\"\n    ),\n    underlineColor: theme.color(\n      \"DefaultTabs.underlineColor\",\n      theme.dark ? \"#4A88C7\" : \"#4083C9\"\n    ),\n\n    underlinedTabInactiveForeground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveForeground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveForeground\">\n    ),\n    underlinedTabForeground: theme.color(\"DefaultTabs.underlinedTabForeground\"),\n\n    background: theme.color(\n      \"DefaultTabs.background\",\n      theme.dark ? \"#3C3F41\" : \"#ECECEC\"\n    ),\n    underlinedTabInactiveBackground: theme.color(\n      \"DefaultTabs.underlinedTabInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabInactiveBackground\">\n    ),\n    underlinedTabBackground: theme.color(\n      \"DefaultTabs.underlinedTabBackground\" as UnknownThemeProp<\"DefaultTabs.underlinedTabBackground\">\n    ),\n    hoverInactiveBackground: theme.color(\n      \"DefaultTabs.hoverInactiveBackground\" as UnknownThemeProp<\"DefaultTabs.hoverInactiveBackground\">,\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n    hoverBackground: theme.color(\n      \"DefaultTabs.hoverBackground\",\n      theme.dark ? \"rgba(0,0,0,.35)\" : \"rgba(0,0,0,.1)\"\n    ),\n  });\n\nexport const StyledDefaultTab = styled.div<StyledTabProps>`\n  box-sizing: border-box;\n  display: inline-flex;\n  letter-spacing: 0.015rem;\n  font-size: 0.85rem;\n  cursor: default;\n  white-space: nowrap;\n\n  // spacing\n  padding: 0 0.5rem;\n  line-height: 1.7rem; // vertical spacing handled by line-height\n\n  // disabled state doesn't seem to be supported in Intellij Platform at all.\n  opacity: ${({ disabled }) => (disabled ? \".5\" : \"1\")};\n  color: ${({ theme }) =>\n    theme.color(\n      \"DefaultTabs.foreground\" as UnknownThemeProp<\"DefaultTabs.foreground\">\n    )};\n\n  position: relative;\n  &::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    left: 0;\n    bottom: 0;\n  }\n\n  ${defaultTabTheme};\n`;\n","import { Theme } from \"../Theme\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"./TabTheme\";\n\nconst defaultTabsTheme = ({ theme }: { theme: Theme }) =>\n  getTabsThemeStyles({\n    borderColor: theme.color(\n      \"DefaultTabs.borderColor\",\n      theme.commonColors.contrastBorder\n    ),\n    background: theme.color(\"DefaultTabs.background\"),\n  });\n\nexport const StyledDefaultTabs = styled.div<{ noBorders?: boolean }>`\n  display: flex;\n  align-items: center;\n  box-sizing: border-box;\n  border-style: solid;\n  border-width: ${({ noBorders }) => (noBorders ? \"0\" : \"1px 0\")};\n\n  ${defaultTabsTheme};\n`;\n","import React from \"react\";\nimport { BareButton, BareButtonProps } from \"@intellij-platform/core/Button\";\nimport { PlatformIcon } from \"../Icon\";\nimport { styled } from \"../styled\";\n\nconst StyledIconWrapper = styled.span`\n  display: inherit;\n  .icon.hover {\n    display: none;\n  }\n  &:hover {\n    .icon {\n      display: none;\n    }\n    .icon.hover {\n      display: unset;\n    }\n  }\n`;\n/**\n * Close button for Tab\n */\nexport const TabCloseButton = (props: Omit<BareButtonProps, \"children\">) => {\n  // using useHover proved to be unstable.\n  return (\n    <BareButton {...props} excludeFromTabOrder preventFocusOnPress>\n      <StyledIconWrapper>\n        <PlatformIcon icon={\"actions/closeHovered\"} className=\"icon hover\" />\n        <PlatformIcon icon={\"actions/close\"} className=\"icon\" />\n      </StyledIconWrapper>\n    </BareButton>\n  );\n};\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { css, styled } from \"../styled\";\nimport { useFocusable } from \"@react-aria/focus\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\n\nconst StyledTabItemLayout = styled.div`\n  display: inline-flex;\n  align-items: center;\n`;\n\nconst iconStyle = css`\n  display: inline-flex; // without this, the wrapper takes the full height, causing icon to be placed on top\n  margin-top: -0.1rem; // seems necessary for pixel perfect match with the original impl\n`;\n\nconst StyledStartIconWrapper = styled.span`\n  ${iconStyle};\n  margin-right: 0.25rem;\n`;\n\nconst StyledEndIconWrapper = styled.span`\n  ${iconStyle};\n  margin-left: 0.25rem;\n  margin-right: -0.25rem; // default padding of the tab should be a little reduced when close icon is there.\n  border-radius: 16px;\n`;\n\nexport interface TabItemLayoutProps {\n  /**\n   * the icon placed before the text.\n   */\n  startIcon?: React.ReactNode;\n  /**\n   * title of the tab. Normally just a string\n   */\n  title?: React.ReactNode;\n  /**\n   * the icon placed after the text. Typical use cases: close or pin icon.\n   */\n  endIcon?: React.ReactNode;\n\n  /**\n   * Generic HTML props passed to the container div.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n}\n\n/**\n * Helper component for rendering the common layout of tab content.\n */\nexport const TabContentLayout = React.forwardRef(\n  (\n    { startIcon, title, endIcon, containerProps = {} }: TabItemLayoutProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    // To allow tooltip be used easily. TooltipTrigger passes props via FocusableContext.\n    const { focusableProps } = useFocusable({}, useObjectRef(ref));\n    return (\n      <StyledTabItemLayout\n        {...mergeProps(focusableProps, containerProps)}\n        ref={ref}\n      >\n        {startIcon && (\n          <StyledStartIconWrapper>{startIcon}</StyledStartIconWrapper>\n        )}\n        {title}\n        {endIcon && <StyledEndIconWrapper>{endIcon}</StyledEndIconWrapper>}\n      </StyledTabItemLayout>\n    );\n  }\n);\n","import { ItemProps } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport React from \"react\";\n\nexport interface TabItemProps extends ItemProps<never> {\n  /**\n   * Determines how the tab item should look when rendered as a menu item in overflow menu.\n   * If not passed, `textValue` will be used.\n   * @example\n   * <TabItem\n   *   key={tab.id}\n   *   textValue={tab.title}\n   *   inOverflowMenu={\n   *     <MenuItemLayout content={tab.title} icon={icon} />\n   *   }\n   *  >\n   *   <TabContentLayout startIcon={icon} title={tab.title} />\n   * </TabItem>\n   */\n  inOverflowMenu?: React.ReactNode;\n}\n\n/**\n * Same as {@link Item}, but allows for specifying the tab content for when it's rendered in the overflow menu item.\n */\nexport const TabItem: (props: TabItemProps) => React.ReactElement = Item;\n","import { css } from \"@intellij-platform/core/styled\";\nimport { StyledTabProps } from \"./StyledDefaultTab\";\n\n/**\n * Describes theme-able properties of a tab, which can then be passed to {@link getTabThemeStyles}\n */\nexport interface TabTheme {\n  underlineHeight?: number;\n\n  borderColor?: string;\n\n  inactiveUnderlineColor?: string;\n  underlineColor?: string;\n\n  underlinedTabInactiveForeground?: string;\n  underlinedTabForeground?: string;\n\n  background?: string;\n  underlinedTabBackground?: string;\n  underlinedTabInactiveBackground?: string;\n  hoverInactiveBackground?: string;\n  hoverBackground?: string;\n  inactiveColoredTabBackground?: string; // not used for now\n}\n\nexport const getTabsThemeStyles = ({\n  background,\n  borderColor,\n}: Pick<TabTheme, \"background\" | \"borderColor\">) => css`\n  border-color: ${borderColor};\n  background: ${background};\n`;\n\n/**\n * Converts tab theme properties to a chunk of style that can be dropped in a styled version of StyledDefaultTab\n *\n * @example\n * ```ts\n * const StyledCustomTab = styled(StyledDefaultTab)`\n *   ${getTabThemeStyles({background: 'red'})}\n * `\n * ```\n */\nexport const getTabThemeStyles = ({\n  underlineHeight,\n\n  background,\n  underlinedTabBackground,\n  underlinedTabInactiveBackground,\n  hoverInactiveBackground,\n  hoverBackground,\n\n  underlinedTabForeground,\n  underlinedTabInactiveForeground,\n\n  inactiveUnderlineColor,\n  underlineColor,\n}: TabTheme) =>\n  css<StyledTabProps>`\n    // active indicator\n    &::after {\n      height: ${underlineHeight != null ? `${underlineHeight}px` : undefined};\n      background-color: ${({ selected }) => selected && inactiveUnderlineColor};\n      background-color: ${({ selected, active }) =>\n        selected && active && underlineColor};\n    }\n\n    // foreground rules\n    color: ${({ selected }) => selected && underlinedTabInactiveForeground};\n    color: ${({ selected, active }) =>\n      selected && active && underlinedTabForeground};\n\n    //  background rules\n    background: ${background};\n    background: ${({ selected }) =>\n      selected && underlinedTabInactiveBackground};\n    background: ${({ selected, active }) =>\n      selected && active && underlinedTabBackground};\n\n    ${({ disabled, active }) =>\n      !disabled &&\n      css`\n        &:hover,\n        &.hover /* for testing purposes */ {\n          background: ${hoverInactiveBackground};\n          background: ${active && hoverBackground};\n        }\n      `}\n  `;\n","import { css, styled } from \"@intellij-platform/core/styled\";\n\ninterface Props {\n  hasOverflowAtStart: boolean;\n  hasOverflowAtEnd: boolean;\n}\n\nconst horizontalOverflowIndicatorStyles = css`\n  content: \"\";\n  pointer-events: none;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  width: 10px;\n  z-index: 1;\n`;\nexport const StyledHorizontalOverflowShadows = styled.div<Props>`\n  position: relative; // for overflow indicator (pseudo-)elements to be positioned absolute\n\n  /* FIXME: find out what color, width and gradient parameters are used in the original implementation */\n  ${({ hasOverflowAtStart }) =>\n    hasOverflowAtStart &&\n    css`\n      ::before {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        left: 0;\n      }\n    `};\n  ${({ hasOverflowAtEnd }) =>\n    hasOverflowAtEnd &&\n    css`\n      ::after {\n        ${horizontalOverflowIndicatorStyles};\n        background: linear-gradient(\n          -90deg,\n          ${({ theme }) => theme.commonColors.panelBackground} 0%,\n          transparent 100%\n        );\n        right: 0;\n      }\n    `};\n`;\n","import { useTab } from \"@react-aria/tabs\";\nimport { TabListState } from \"@react-stately/tabs\";\nimport { Node } from \"@react-types/shared\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport React, { ForwardedRef, forwardRef, RefObject, useEffect } from \"react\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\n\ntype TabProps<T extends object> = {\n  state: TabListState<object>;\n  item: Node<T>;\n  /**\n   * {@see TabsProps#focusable}\n   */\n  focusable?: boolean;\n  /**\n   * {@see TabsProps#active}\n   */\n  active?: boolean;\n  shouldSelectOnPressUp?: boolean;\n  Component?: typeof StyledDefaultTab;\n};\n\nexport const Tab = forwardRef(function Tab<T extends object>(\n  {\n    state,\n    item,\n    focusable,\n    active,\n    shouldSelectOnPressUp,\n    Component = StyledDefaultTab,\n  }: TabProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): React.ReactElement {\n  const { key, rendered } = item;\n  const ref = useForwardedRef(forwardedRef);\n  const {\n    tabProps: {\n      /**\n       * by extracting out tabIndex, all keyboard support of the tabs is disabled, since we prevent the tab from being\n       * focusable.\n       */\n      tabIndex,\n      ...tabProps\n    },\n  } = useTab(\n    {\n      key,\n      // @ts-expect-error  TODO(@react-aria/tabs): update to ^3.6.0 to support this\n      shouldSelectOnPressUp,\n    },\n    state,\n    ref\n  );\n  const isSelected = state.selectedKey === key;\n  const isDisabled = state.disabledKeys.has(key);\n\n  return (\n    <Component\n      {...tabProps}\n      tabIndex={focusable ? tabIndex : undefined}\n      ref={ref}\n      active={active}\n      selected={isSelected}\n      disabled={isDisabled}\n    >\n      {rendered}\n    </Component>\n  );\n});\n","import React, { Key, useEffect } from \"react\";\nimport { useTabList } from \"@react-aria/tabs\";\nimport { filterDOMProps, mergeProps, scrollIntoView } from \"@react-aria/utils\";\nimport { useTabListState } from \"@react-stately/tabs\";\nimport { AriaTabListProps } from \"@react-types/tabs\";\nimport { StyledHorizontalOverflowShadows } from \"./StyledHorizontalOverflowShadows\";\nimport { TabsOverflowMenu } from \"./TabsOverflowMenu\";\nimport { useOverflowObserver } from \"../utils/overflow-utils/useOverflowObserver\";\nimport { useHasOverflow } from \"./useHasOverflow\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\nimport { StyledDefaultTab } from \"./StyledDefaultTab\";\nimport { StyledDefaultTabs } from \"./StyledDefaultTabs\";\nimport { Tab } from \"./Tab\";\n\nexport type TabsProps<T> = Omit<\n  AriaTabListProps<T>,\n  \"orientation\" | \"isDisabled\" | \"\"\n> & {\n  /**\n   * Whether tabs should be focusable or not. By default, following the Intellij Platform implementation, tabs are\n   * not focusable and therefore lack the keyboard accessibility support specified in WAI-ARIA.\n   * You can change this default behaviour and make the tabs keyboard accessible by passing `focusable`.\n   * focus styles are not perfect at the moment, since it's not considered an important feature.\n   * @default false\n   */\n  focusable?: boolean;\n\n  /**\n   * Whether selected tab should change on press up instead of press down.\n   * @default false.\n   */\n  shouldSelectOnPressUp?: boolean;\n\n  /**\n   * Enables \"active\" style on tabs. Is usually related to a container having focus.\n   */\n  active?: boolean;\n\n  /**\n   * If set to true, tabs will be wrapped into multiple rows if needed.\n   * NOTE: In the original implementation, in multi row mode, rows are separated by a border. It's not easy to achieve\n   * this when we are implementing this feature with a simple `flex-wrap: wrap` css rule. It doesn't seem that\n   * important, but we can achieve something similar by some css tricks like the ones suggested here:\n   * https://stackoverflow.com/questions/36128333/row-lines-for-flex-container-css\n   * @default false\n   */\n  multiRow?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * If set to true and multiRow is not true, it will prevent horizontal scroll of tabs. Depending on the value of\n   * In this case:\n   * - if {@link noOverflowMenu} is not set to true, tabs that can't be fitted into the available space will be\n   *   accessible via an overflow menu.\n   * - if {@link noOverflowMenu} is set to true, the tabs will be fitted into the available space, and they will\n   *   be shrunk when needed.\n   *\n   * @todo: not implemented yet.\n   * @default false\n   */\n  noScroll?: boolean;\n\n  /**\n   * Only effective when {@link multiRow} is not true.\n   * When set to true, tabs that couldn't be fitted into the available space, are either shrunk (if {@link noScroll}\n   * is set to true), or are just accessible by scroll.\n   */\n  noOverflowMenu?: boolean;\n\n  /**\n   * Removes the top and bottom border when passed.\n   * It's still not clear whether such option makes sense or not, but\n   * at least in common use cases like in tool windows, it seems borders are already there and there should be a way\n   * of removing tab borders. On the other hand, when Tabs is used without any assumption about the surrounding UI,\n   * it kind of makes sense to have the top and bottom borders by default. So that's why this is made an option for\n   * now, maybe until things are clearer.\n   *\n   * @default false\n   */\n  noBorders?: boolean;\n\n  TabsComponent?: typeof StyledDefaultTabs;\n  /**\n   *\n   */\n  TabComponent?: typeof StyledDefaultTab;\n};\n\nconst scrollBarDisabledStyle = css`\n  -ms-overflow-style: none; /* for Internet Explorer, Edge */\n  scrollbar-width: none; /* for Firefox */\n  &::-webkit-scrollbar {\n    /* for Chrome/Safari/Webkit */\n    display: none;\n  }\n`;\n\nconst StyledTabList = styled.div<{ multiRow?: boolean }>`\n  display: flex;\n  flex-wrap: ${({ multiRow }) => (multiRow ? \"wrap\" : \"nowrap\")};\n  overflow: auto;\n\n  ${scrollBarDisabledStyle};\n`;\n\n/**\n *\n * TODO: add support for overflow:\n *  - have vertical scroll also scroll tabs\n *  - add support for re-reordering tabs.\n *  - FIX: When a tab that was not selected is removed, selection should not change. It now changes to the tab before the removed one.\n */\nexport const Tabs = <T extends object>({\n  focusable,\n  shouldSelectOnPressUp,\n  active,\n  TabComponent,\n  TabsComponent = StyledDefaultTabs,\n  multiRow,\n  noOverflowMenu,\n  noScroll,\n  noBorders,\n  ...props\n}: TabsProps<T>): React.ReactElement => {\n  const state = useTabListState(props);\n  const ref = React.useRef<HTMLDivElement>(null);\n  const { tabListProps } = useTabList(props, state, ref);\n\n  const { scrolledIndicatorProps, hasOverflow } = useHasOverflow({ ref });\n  const { overflowedElements } = useOverflowObserver(ref);\n  const overflowedKeys = new Set(\n    overflowedElements\n      .map((element) =>\n        element instanceof HTMLElement ? element.dataset[\"key\"] : null\n      )\n      .filter(notNull)\n  );\n\n  useEffect(() => {\n    if (!noScroll) {\n      const scrollableContainer = ref.current;\n      const selectedTabElement = scrollableContainer?.querySelector(\n        `[data-key=\"${state.selectedKey}\"]`\n      ) as HTMLElement;\n      if (scrollableContainer && selectedTabElement) {\n        scrollIntoView(scrollableContainer, selectedTabElement);\n      }\n    } else {\n      // TODO maybe? sample use case: project tool window tabs, when not grouped.\n    }\n  }, [state.selectedKey]);\n  const onOverflowMenuItemSelected = (key: Key) => {\n    state.setSelectedKey(key);\n  };\n  if (noScroll) {\n    throw new Error(\"noScroll is not supported yet.\");\n  }\n  return (\n    <TabsComponent noBorders={noBorders} {...filterDOMProps(props)}>\n      <StyledHorizontalOverflowShadows\n        hasOverflowAtStart={hasOverflow.left}\n        hasOverflowAtEnd={hasOverflow.right}\n        style={{ minWidth: 0 }}\n      >\n        <StyledTabList\n          {...mergeProps(tabListProps, scrolledIndicatorProps)}\n          multiRow={multiRow}\n          ref={ref}\n        >\n          {[...state.collection].map((item) => (\n            <Tab\n              key={item.key}\n              item={item}\n              state={state}\n              focusable={focusable}\n              shouldSelectOnPressUp={shouldSelectOnPressUp}\n              active={active}\n              Component={TabComponent}\n            />\n          ))}\n        </StyledTabList>\n      </StyledHorizontalOverflowShadows>\n      {!noOverflowMenu && (\n        <TabsOverflowMenu\n          collection={state.collection}\n          overflowedKeys={overflowedKeys}\n          onSelect={onOverflowMenuItemSelected}\n        />\n      )}\n    </TabsComponent>\n  );\n};\n","import { RefObject, UIEventHandler, useEffect, useState } from \"react\";\n\nexport function useHasOverflow<T extends HTMLElement>({\n  threshold = 5,\n  ref,\n}: {\n  threshold?: number;\n  ref: RefObject<T>;\n}) {\n  const [hasOverflow, setHasOverflow] = useState({\n    left: false,\n    right: false,\n    top: false,\n    bottom: false,\n  });\n\n  const update = () => {\n    const element = ref.current;\n    if (element) {\n      const offsetLeft = element.scrollLeft;\n      const offsetRight =\n        element.scrollWidth - (element.offsetWidth + element.scrollLeft);\n      const offsetTop = element.scrollTop;\n      const offsetBottom =\n        element.scrollHeight - (element.offsetHeight + element.scrollTop);\n      const newHasOverflow = {\n        top: offsetTop > threshold,\n        bottom: offsetBottom > threshold,\n        left: offsetLeft > threshold,\n        right: offsetRight > threshold,\n      };\n      if (\n        hasOverflow.top !== newHasOverflow.top ||\n        hasOverflow.bottom !== newHasOverflow.bottom ||\n        hasOverflow.left !== newHasOverflow.left ||\n        hasOverflow.right !== newHasOverflow.right\n      ) {\n        setHasOverflow(newHasOverflow);\n      }\n    }\n  };\n  useEffect(update);\n\n  return {\n    scrolledIndicatorProps: {\n      onScroll: update as UIEventHandler<T>,\n    },\n    hasOverflow,\n  };\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { Item } from \"@react-stately/collections\";\nimport { Menu, MenuTrigger } from \"@intellij-platform/core/Menu\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport React, { Key } from \"react\";\n\nexport const TabsOverflowMenu = <T extends unknown>({\n  collection,\n  overflowedKeys,\n  onSelect,\n}: {\n  collection: Collection<Node<T>>;\n  overflowedKeys: Set<Key>;\n  onSelect: (key: Key) => void;\n}) => (\n  <>\n    {overflowedKeys.size > 0 && (\n      <MenuTrigger\n        align=\"end\"\n        renderMenu={({ menuProps }) => {\n          const items: Iterable<Node<unknown>> = [...collection].filter(\n            (menuItem) => overflowedKeys.has(menuItem.key)\n          );\n          return (\n            <Menu\n              {...menuProps}\n              onAction={(key) => {\n                onSelect(key);\n              }}\n              items={items}\n            >\n              {(item) => (\n                <Item key={item.key} textValue={item.textValue}>\n                  {item.props.inOverflowMenu || item.textValue}\n                </Item>\n              )}\n            </Menu>\n          );\n        }}\n      >\n        {(props, ref) => (\n          <IconButton {...props} ref={ref}>\n            <PlatformIcon icon=\"actions/findAndShowNextMatches\" />\n          </IconButton>\n        )}\n      </MenuTrigger>\n    )}\n  </>\n);\n","import React, { ForwardedRef, HTMLProps } from \"react\";\nimport { TabCloseButton } from \"@intellij-platform/core/Tabs/TabCloseButton\";\nimport { TabContentLayout } from \"@intellij-platform/core/Tabs/TabContentLayout\";\n\ntype ToolWindowTabContentProps = {\n  icon?: React.ReactNode;\n  title: React.ReactNode;\n  /**\n   * Close button for the tab. Use {@link TabCloseButton} to render the close button\n   * for the tab.\n   *\n   * @example\n   * ```tsx\n   * <ToolWindowTabContent\n   *   closeButton={\n   *     <TooltipTrigger\n   *       tooltip={<ActionTooltip actionName=\"Close Tab\" shortcut=\"^⇧F4\" />}\n   *     >\n   *       <TabCloseButton onPress={}></TabCloseButton>\n   *     </TooltipTrigger>\n   *   }\n   * />\n   * ```\n   */\n  closeButton?: React.ReactNode;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">;\n};\n\nexport const ToolWindowTabContent = React.forwardRef(\n  (\n    { icon, title, closeButton, containerProps }: ToolWindowTabContentProps,\n    ref: ForwardedRef<HTMLDivElement>\n  ) => {\n    return (\n      <TabContentLayout\n        containerProps={containerProps}\n        ref={ref}\n        startIcon={icon}\n        title={title}\n        endIcon={closeButton}\n      />\n    );\n  }\n);\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { Theme } from \"@intellij-platform/core/Theme\";\nimport { StyledDefaultTab } from \"@intellij-platform/core/Tabs/StyledDefaultTab\";\nimport {\n  getTabThemeStyles,\n  TabTheme,\n} from \"@intellij-platform/core/Tabs/TabTheme\";\n\nexport const toolWindowTabTheme = ({ theme }: { theme: Theme }): TabTheme => ({\n  borderColor: theme.color(\"ToolWindow.HeaderTab.borderColor\"),\n  underlineHeight: theme.value<number>(\"ToolWindow.HeaderTab.underlineHeight\"),\n  background: \"transparent\",\n  underlinedTabInactiveBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabInactiveBackground\"\n  ),\n  underlinedTabBackground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabBackground\"\n  ),\n  hoverInactiveBackground:\n    theme.color(\"ToolWindow.HeaderTab.hoverInactiveBackground\") ??\n    theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  hoverBackground: theme.color(\"ToolWindow.HeaderTab.hoverBackground\"),\n  inactiveUnderlineColor: theme.color(\n    \"ToolWindow.HeaderTab.inactiveUnderlineColor\"\n  ),\n  underlineColor: theme.color(\"ToolWindow.HeaderTab.underlineColor\"),\n\n  underlinedTabInactiveForeground:\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabInactiveForeground\") ??\n    theme.color(\"ToolWindow.HeaderTab.underlinedTabForeground\"),\n  underlinedTabForeground: theme.color(\n    \"ToolWindow.HeaderTab.underlinedTabForeground\"\n  ),\n});\nexport const StyledToolWindowTab = styled(StyledDefaultTab)`\n  padding: 0 0.7rem;\n  ${({ theme }) => getTabThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { getTabsThemeStyles } from \"@intellij-platform/core/Tabs/TabTheme\";\nimport { StyledDefaultTabs } from \"@intellij-platform/core/Tabs/StyledDefaultTabs\";\nimport { toolWindowTabTheme } from \"./StyledToolWindowTab\";\n\nexport const StyledToolWindowTabs = styled(StyledDefaultTabs)`\n  ${({ theme }) => getTabsThemeStyles(toolWindowTabTheme({ theme }))};\n`;\n","import React from \"react\";\nimport { Tabs, TabsProps } from \"@intellij-platform/core/Tabs/Tabs\";\nimport { StyledToolWindowTab } from \"./StyledToolWindowTab\";\nimport { StyledToolWindowTabs } from \"./StyledToolWindowTabs\";\n\ntype ToolWindowTabsProps<T extends object> = Omit<\n  TabsProps<T>,\n  \"TabComponent\" | \"TabsComponent\" | \"focusable\"\n>;\n\nexport const ToolWindowTabs = <T extends object>(\n  props: ToolWindowTabsProps<T>\n) => (\n  <Tabs\n    {...props}\n    TabComponent={StyledToolWindowTab}\n    TabsComponent={StyledToolWindowTabs}\n    focusable={false}\n    shouldSelectOnPressUp\n  />\n);\n","export type TextRange = { from: number; to: number };\n\nexport function isEmptyRange(range: TextRange) {\n  return range.from > range.to;\n}\n\nexport function getAllRanges(\n  ranges: TextRange[],\n  length: number\n): Array<[TextRange, boolean]> {\n  const result: Array<[TextRange, boolean]> = [];\n  if (!ranges?.length) {\n    return [[{ from: 0, to: length - 1 }, false]];\n  }\n  if (ranges[0].from > 0) {\n    result.push([{ from: 0, to: ranges[0].from - 1 }, false]);\n  }\n  ranges.forEach(({ from, to }, index) => {\n    result.push([{ from, to }, true]);\n    const gapRange: TextRange = ranges[index + 1]\n      ? { from: to + 1, to: ranges[index + 1].from - 1 }\n      : { from: to + 1, to: length - 1 };\n    if (!isEmptyRange(gapRange)) {\n      result.push([gapRange, false]);\n    }\n  });\n  return result;\n}\n\nexport function createRangesFromIndices(indices: number[]): TextRange[] {\n  return indices.reduce((ranges, index) => {\n    const lastRange = ranges.slice(-1)[0];\n    if (lastRange?.to === index - 1) {\n      return [...ranges.slice(0, -1), { from: lastRange.from, to: index }];\n    }\n    return [...ranges, { from: index, to: index }];\n  }, [] as TextRange[]);\n}\n","import React from \"react\";\nimport { getAllRanges, TextRange } from \"../TextRange\";\nimport { styled } from \"../styled\";\n\nconst HighlightedMatch = styled.span`\n  background: ${({ theme }) =>\n    `linear-gradient(${theme.color(\n      \"SearchMatch.startBackground\",\n      \"#ffeaa2b3\"\n    )}, ${theme.color(\"SearchMatch.endBackground\", \"#ffd042b3\")})`};\n  color: #000;\n  border-radius: 3px;\n`;\n\n/**\n * Renders the children (which must be a string), with highlights wrapped in spans with the highlight style.\n * Note: this component doesn't render a container. It just highlights the specified ranges.\n */\nexport function TextWithHighlights({\n  children,\n  highlights,\n}: {\n  children: string;\n  highlights: TextRange[] | null;\n}): React.ReactElement {\n  const parts: Array<[TextRange, boolean]> = highlights\n    ? getAllRanges(highlights, children.length)\n    : [[{ from: 0, to: children.length }, false]];\n  return (\n    <>\n      {parts.map(([{ from, to }, highlighted]) => {\n        const text = children.slice(from, to + 1);\n        return (\n          // TODO: key\n          <React.Fragment key={`${from}_${to}`}>\n            {highlighted ? <HighlightedMatch>{text}</HighlightedMatch> : text}\n          </React.Fragment>\n        );\n      })}\n    </>\n  );\n}\n","// language=JSRegexp\nconst numberPattern = \"[0-9]{0,3}.?[0-9]*\";\n\nconst parseComponent = (componentStr: string, index: number) =>\n  componentStr\n    ? index < 3\n      ? parseInt(componentStr)\n      : Math.round(Math.min(parseFloat(componentStr), 1) * 255)\n    : undefined;\n\nconst parseHexRgba = (str: string) =>\n  str\n    .match(/^#?([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})([0-9A-F]{2})?$/i)\n    ?.slice(1, 5)\n    .map((i) => (i ? parseInt(i, 16) : undefined));\nconst parseShorthandHex = (str: string) =>\n  str\n    .match(/^#?([0-9A-F])([0-9A-F])([0-9A-F])$/i)\n    ?.slice(1, 4)\n    .map((i) => (i ? parseInt(i + i, 16) : undefined));\nconst parseRgb = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgb\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\nconst parseRgba = (str: string) =>\n  str\n    .match(\n      new RegExp(\n        `^rgba\\\\(\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern})\\\\s*,\\\\s*(${numberPattern}\\\\s*)\\\\)$`\n      )\n    )\n    ?.slice(1, 5)\n    .map(parseComponent);\n\n/**\n * parses a color string into rgba components.\n * @param str\n */\nexport const parseColorString = (\n  str: string\n): [number, number, number, number?] | null => {\n  const result = [parseHexRgba, parseShorthandHex, parseRgb, parseRgba].reduce<\n    (number | undefined)[] | undefined\n  >((result, parse) => result || parse(str), undefined);\n  return Array.isArray(result) &&\n    result.slice(0, 3).every((c) => Number.isInteger(c))\n    ? (result as [number, number, number, number?])\n    : null;\n};\n","import { parseColorString } from \"./parseColorString\";\n\n/**\n * A Color class resembling AWT Color\n */\nexport class Color {\n  public readonly r: number;\n  public readonly g: number;\n  public readonly b: number;\n  public readonly a: number;\n\n  private static readonly FACTOR = 0.7;\n\n  constructor(r: number, g: number, b: number, a?: number);\n  constructor(rgba: string);\n  constructor(rgba: Color);\n  constructor(\n    rgba: string | number | Color,\n    g?: number,\n    b?: number,\n    a: number = 255\n  ) {\n    let r: number;\n    if (typeof rgba === \"string\") {\n      [r = NaN, g = NaN, b = NaN, a = 255] = parseColorString(rgba) || [];\n    } else if (rgba instanceof Color) {\n      [r, g, b, a] = [rgba.r, rgba.g, rgba.b, rgba.a];\n    } else {\n      r = rgba;\n    }\n    this.r = r;\n    this.g = g!;\n    this.b = b!;\n    this.a = a < 1 ? Math.round(a * 255) : a;\n  }\n\n  isValid() {\n    return (\n      Number.isInteger(this.r) &&\n      Number.isInteger(this.g) &&\n      Number.isInteger(this.b) &&\n      Number.isInteger(this.a)\n    );\n  }\n\n  /**\n   * Extra method for changing transparency\n   */\n  withTransparency(alpha: number) {\n    return new Color(this.r, this.g, this.b, alpha);\n  }\n\n  brighter() {\n    let { r, g, b, a: alpha } = this;\n    const int = Math.floor,\n      FACTOR = Color.FACTOR;\n    // The rest is copy paste of java.awt.Color (only `int i` is changed to `let i` :D)\n    let i = int(1.0 / (1.0 - FACTOR));\n    if (r == 0 && g == 0 && b == 0) {\n      return new Color(i, i, i, alpha);\n    }\n    if (r > 0 && r < i) r = i;\n    if (g > 0 && g < i) g = i;\n    if (b > 0 && b < i) b = i;\n\n    return new Color(\n      Math.min(int(r / FACTOR), 255),\n      Math.min(int(g / FACTOR), 255),\n      Math.min(int(b / FACTOR), 255),\n      alpha\n    );\n  }\n\n  darker() {\n    const FACTOR = Color.FACTOR;\n    const int = Math.floor;\n\n    return new Color(\n      Math.max(int(this.r * FACTOR), 0),\n      Math.max(int(this.g * FACTOR), 0),\n      Math.max(int(this.b * FACTOR), 0),\n      this.a\n    );\n  }\n\n  static brighter(color: string): string {\n    // note: we can't type args simply with ConstructorParameters<typeof Color>.\n    // see more: https://github.com/microsoft/TypeScript/issues/37079\n    return new Color(color).brighter().toString();\n  }\n\n  blend(colorOrColorString: Color | string) {\n    const color =\n      typeof colorOrColorString === \"string\"\n        ? new Color(colorOrColorString)\n        : colorOrColorString;\n    const getBlendedValue = (component: \"r\" | \"g\" | \"b\") =>\n      Math.round(\n        (color.a / 255) * color[component] +\n          (this.a / 255) * (1 - color.a / 255) * this[component]\n      );\n    return new Color(\n      getBlendedValue(\"r\"),\n      getBlendedValue(\"g\"),\n      getBlendedValue(\"b\")\n    );\n  }\n\n  toString() {\n    const toString = (component: number) =>\n      Number.isNaN(component) ? \"\" : component.toString(16).padStart(2, \"0\");\n    const r = toString(this.r);\n    const g = toString(this.g);\n    const b = toString(this.b);\n    const a = this.a === 255 ? \"\" : toString(this.a);\n    return `#${r}${g}${b}${a}`;\n  }\n}\n","import React, { CSSProperties, useRef, useState } from \"react\";\nimport styled, { useTheme } from \"styled-components\";\nimport {\n  BottomResizer,\n  LeftResizer,\n  RightResizer,\n  TopResizer,\n} from \"../Resizer\";\nimport { ResizerProps } from \"../Resizer/ResizerProps\";\nimport { Theme } from \"../Theme/Theme\";\n\n/**\n * Props are named mostly based on ThreeComponentsSplitter in Intellij Platform.\n */\nexport interface ThreeViewSplitterProps {\n  orientation?: \"horizontal\" | \"vertical\";\n  resizerProps?: Partial<\n    Omit<ResizerProps, \"onResize\" | \"onResizeStarted\" | \"onResizeEnd\">\n  >;\n  innerView?: React.ReactNode;\n  innerViewMinSize?: number;\n  firstView?: React.ReactNode;\n  firstSize?: number | null;\n  firstViewMinSize?: number;\n  lastView?: React.ReactNode;\n  lastSize?: number | null;\n  lastViewMinSize?: number;\n  onFirstResize?: (size: number) => void;\n  onLastResize?: (size: number) => void;\n  style?: CSSProperties;\n  className?: string;\n}\n\nconst StyledSplitterContainer = styled.div<{\n  orientation: \"horizontal\" | \"vertical\";\n}>`\n  display: flex;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  flex-direction: ${({ orientation }) =>\n    orientation === \"vertical\" ? \"column\" : \"row\"};\n`;\n\nconst StyledView = styled.div`\n  // The default overflow visible should be changed obviously. Not sure if there is any layout implication\n  // in using 'auto' instead of hidden, to provide scroll behaviour by default, but even if we realize later\n  // that we need to set overflow to hidden here, we can have scrollable content inside the inner view via an\n  // intermediate element inside the inner view, with overflow set to auto and width set to 100%.\n  overflow: auto;\n`;\n\nconst StyledSplitterInnerView = styled(StyledView)`\n  flex: 1;\n`;\n\n/**\n * Corresponding to\n * [ThreeComponentsSplitter](https://github.com/JetBrains/intellij-community/blob/58dbd93e9ea527987466072fa0bfbf70864cd35f/platform/platform-api/src/com/intellij/openapi/ui/ThreeComponentsSplitter.java#L40-L40)\n * `firstView` and `lastView` are optional, and if not provided, the corresponding resizer is not rendered.\n * innerView is supposed to fill the remaining space, while firstView and lastView have specific sizes.\n * size changes in a resize interaction is not reported and is handled by local state in the component. That's\n * to prevent frequent state updates in a higher level which can be expensive. It's also based on this assumption\n * that in the usage side there is no need for any control over resizing or even knowing the intermediate state.\n * Maybe a minSize and maxSize would be the extent of the required control over resizing. But anyway, this model\n * of keeping the size as a local state during a resize session is something that can be changed if needed.\n *\n * Features:\n * - Relative sizing (fraction of the container)\n * - Default size by content\n * - Change handling only when resize is done.\n *\n * TODO: max and min size not implemented\n * TODO: add support for uncontrolled version\n */\nexport const ThreeViewSplitter: React.FC<ThreeViewSplitterProps> = ({\n  orientation = \"horizontal\",\n  firstView,\n  firstSize,\n  lastView,\n  lastSize,\n  onFirstResize,\n  onLastResize,\n  resizerProps: resizerPropsOverrides = {},\n  innerView,\n  firstViewMinSize,\n  lastViewMinSize,\n  innerViewMinSize,\n  ...containerProps\n}: ThreeViewSplitterProps): React.ReactElement => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const firstViewRef = useRef<HTMLDivElement>(null);\n  const lastViewRef = useRef<HTMLDivElement>(null);\n  const [firstSizeState, setFirstSizeState] = useState<number | null>(null);\n  const [lastSizeState, setLastSizeState] = useState<number | null>(null);\n  const theme = useTheme() as Theme;\n\n  const value = <T1, T2>(horizontalValue: T1, verticalValue: T2) =>\n    orientation === \"horizontal\" ? horizontalValue : verticalValue;\n\n  const FirstResizer: React.ComponentType<ResizerProps> = value(\n    RightResizer,\n    BottomResizer\n  );\n  const SecondResizer: React.ComponentType<ResizerProps> = value(\n    LeftResizer,\n    TopResizer\n  );\n  const sizeStyleProp = value(\"width\", \"height\");\n  const minSizeStyleProp = value(\"minWidth\", \"minHeight\");\n\n  const resizerProps: ThreeViewSplitterProps[\"resizerProps\"] = {\n    background: theme.commonColors.contrastBorder,\n    size: 1,\n    ...resizerPropsOverrides,\n  };\n\n  const isFractionSize = (size: number) => size < 1;\n\n  const normalizeSize = (\n    size: number | undefined | null\n  ): CSSProperties[\"width\" | \"height\"] =>\n    size != null\n      ? isFractionSize(size)\n        ? `${size * 100}%`\n        : Math.round(size)\n      : undefined;\n\n  const getSize = (elem: HTMLElement): number =>\n    value(elem.offsetWidth, elem.offsetHeight);\n\n  const getNewSize = (currentSize: number, newSize: number) => {\n    if (currentSize != null && isFractionSize(currentSize)) {\n      if (!containerRef.current) {\n        throw new Error(\n          \"ThreeViewSplitter: Could not locate container to calculate fraction size\"\n        );\n      }\n      const containerSize = value(\n        containerRef.current.offsetWidth,\n        containerRef.current.offsetHeight\n      );\n      const newFractionSize = newSize / containerSize;\n      return newFractionSize < 1 ? newFractionSize : currentSize;\n    } else {\n      return Math.max(newSize, 1);\n    }\n  };\n\n  const getActualSize = (viewElem: HTMLElement | null): number | null => {\n    if (!containerRef.current || !viewElem) {\n      return null;\n    }\n    const actualSize = getSize(viewElem);\n    if (viewElem.style[sizeStyleProp]?.includes(\"%\")) {\n      return actualSize / getSize(containerRef.current);\n    }\n    return actualSize;\n  };\n\n  const currentLastSize = normalizeSize(lastSizeState ?? lastSize);\n  const currentFirstSize = normalizeSize(firstSizeState ?? firstSize);\n  return (\n    <StyledSplitterContainer\n      ref={containerRef}\n      orientation={orientation}\n      {...containerProps}\n    >\n      {firstView && (\n        <>\n          <StyledView\n            ref={firstViewRef}\n            style={{\n              [sizeStyleProp]: currentFirstSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (lastSizeState !== null ? currentFirstSize : undefined) ??\n                firstViewMinSize,\n            }}\n          >\n            {firstView}\n          </StyledView>\n          <FirstResizer\n            onResizeStarted={() => {\n              const size = firstViewRef.current\n                ? getSize(firstViewRef.current)\n                : 0;\n              setFirstSizeState(firstSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (firstSizeState != null) {\n                setFirstSizeState(getNewSize(firstSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(firstViewRef.current);\n              if (actualSize !== null) {\n                onFirstResize?.(actualSize);\n              }\n              setFirstSizeState(null);\n            }}\n            {...resizerProps}\n          />\n        </>\n      )}\n      {innerView && (\n        <StyledSplitterInnerView\n          style={{\n            [minSizeStyleProp]: innerViewMinSize,\n          }}\n        >\n          {innerView}\n        </StyledSplitterInnerView>\n      )}\n      {lastView && (\n        <>\n          <SecondResizer\n            onResizeStarted={() => {\n              const size = getSize(lastViewRef.current!);\n              setLastSizeState(lastSize ?? size);\n              return size;\n            }}\n            onResize={(newSize) => {\n              if (lastSizeState != null) {\n                setLastSizeState(getNewSize(lastSizeState, newSize));\n              }\n            }}\n            onResizeEnd={() => {\n              const actualSize = getActualSize(lastViewRef.current);\n              if (actualSize !== null) {\n                onLastResize?.(actualSize);\n              }\n              setLastSizeState(null);\n            }}\n            {...resizerProps}\n          />\n          <StyledView\n            ref={lastViewRef}\n            style={{\n              [sizeStyleProp]: currentLastSize,\n              // if other side is resizing, minWidth/minHeight is set so that this side is not get affected.\n              // It may make sense to allow opting out of this behaviour, if it's considered a feature to be able to\n              // \"push\" the other side too when expanding one side.\n              [minSizeStyleProp]:\n                (firstSizeState !== null ? currentLastSize : undefined) ??\n                lastViewMinSize,\n            }}\n          >\n            {lastView}\n          </StyledView>\n        </>\n      )}\n    </StyledSplitterContainer>\n  );\n};\n","import { isMac } from \"@react-aria/utils\";\nimport React, { HTMLProps, useRef } from \"react\";\nimport { css } from \"styled-components\";\nimport { WINDOW_SHADOW } from \"../style-constants\";\nimport { styled } from \"../styled\";\nimport { Theme } from \"../Theme/Theme\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\nimport {\n  OverlayInteractionHandler,\n  OverlayResizeHandles,\n  useResizableMovableOverlay,\n} from \"@intellij-platform/core/Overlay\";\nimport { Overlay } from \"@react-aria/overlays\";\n\nconst FLOAT_WINDOW_MIN_WIDTH = 100;\nconst FLOAT_WINDOW_MIN_HEIGHT = 40; // in Intellij Platform it's zero but there is window frame which doesn't exist here\n\nconst StyledFloatView = styled.div`\n  box-sizing: border-box;\n  position: fixed;\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  // border color doesn't seem to be correct and needs more investigation. might be even os-specific and outside\n  // theme colors.\n  border: ${({ theme }) => `1px solid ${theme.color(\"Component.borderColor\")}`};\n  ${WINDOW_SHADOW};\n  ${isMac() &&\n  css<{ theme: Theme }>`\n    border-radius: 8px;\n  `}\n  z-index: 2;\n`;\n\n/**\n * Container for tool windows in float view mode. It handles some visual aspects like the border and shadow, as well as\n * UI interactions for changing the floatingBound of the tool window.\n */\nexport const FloatView: React.FC<\n  {\n    state: FloatWindowState;\n    onBoundsChange: (bounds: WindowBounds) => void;\n  } & Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\">\n> = ({ children, state: { bounds }, onBoundsChange, ...otherProps }) => {\n  const ref = useRef(null);\n  const { bounds: boundsStyle, overlayInteractionHandlerProps } =\n    useResizableMovableOverlay(ref, {\n      bounds,\n      onBoundsChange,\n    });\n\n  return (\n    <Overlay>\n      <StyledFloatView\n        {...otherProps}\n        ref={ref}\n        style={{ ...otherProps.style, ...boundsStyle }}\n      >\n        <OverlayInteractionHandler {...overlayInteractionHandlerProps}>\n          <OverlayResizeHandles\n            minWidth={FLOAT_WINDOW_MIN_WIDTH}\n            minHeight={FLOAT_WINDOW_MIN_HEIGHT}\n          />\n          {children}\n        </OverlayInteractionHandler>\n      </StyledFloatView>\n    </Overlay>\n  );\n};\n","import { move } from \"ramda\";\nimport React, { HTMLProps, Key, useState } from \"react\";\nimport { FloatView } from \"./FloatView\";\nimport { FloatWindowState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { WindowBounds } from \"./ToolWindowsState/ToolWindowsState\";\n\n// NOTE: useStackedLayersState and useStackedLayers are generic but kept here since there is no other use case at the\n// moment. They should be moved to their own file(s) when/if other use case came up.\n\ninterface StackedLayersState<T> {\n  /**\n   * Sorted list of items representing layers.\n   */\n  sorted: T[];\n  /**\n   * A function to be used when the layer should be brought to front, typically based on some UI interaction.\n   */\n  bringToFront: (index: number) => void;\n}\n\n/**\n * State management for a stacked list of layers with **bring to front** functionality.\n */\nfunction useStackedLayersState<T, K = React.Key>(\n  /**\n   * A list of arbitrary items representing stacked layers.\n   */\n  items: T[],\n  /**\n   * A function for converting each item into a key which consistently identifies each item, in subsequent renders.\n   * It's used to maintain current sorting state. Although it can be of any type, it's usually a string or number.\n   */\n  getKey: (item: T) => K\n): StackedLayersState<T> {\n  // Local state for now, but can easily change to controllable if needed.\n  const [sortedKeys, setSortedKeys] = useState<K[]>([]);\n  const sorted = items.sort(\n    (a, b) => sortedKeys.indexOf(getKey(a)) - sortedKeys.indexOf(getKey(b))\n  );\n  return {\n    sorted,\n    bringToFront: (index: number) => {\n      setSortedKeys(move(index, -1, sorted).map(getKey));\n    },\n  };\n}\n\n/**\n * Given the state of a stacked list of layers, returns DOM props to be applied to each layer for interaction-based\n * \"bring to front\" behaviour.\n */\nfunction useStackedLayers<T>(state: StackedLayersState<T>): {\n  layersProps: Array<HTMLProps<HTMLElement>>;\n} {\n  return {\n    layersProps: state.sorted.map((_, index) => ({\n      onFocus: () => {\n        state.bringToFront(index);\n      },\n    })),\n  };\n}\n\n/**\n * Renders float tool windows.\n * - handles resize and move actions for float windows.\n * - handles layering of float tool windows.\n */\nexport function FloatToolWindows({\n  floatWindows = [],\n  onBoundsChange,\n  renderToolWindow,\n}: {\n  floatWindows: FloatWindowState[] | undefined;\n  onBoundsChange: (key: Key, bounds: WindowBounds) => void;\n  renderToolWindow: (key: Key) => React.ReactNode;\n}) {\n  const stackedFloatWindows = useStackedLayersState(\n    floatWindows,\n    ({ key }) => key\n  );\n  const { layersProps } = useStackedLayers(stackedFloatWindows);\n  // sorted list is used to render layers. We could as well use z-index and always render with the same order, but\n  // it doesn't really matter as long as key is set.\n  return (\n    <>\n      {stackedFloatWindows.sorted.map((toolWindow, index) => (\n        <FloatView\n          key={toolWindow.key}\n          state={toolWindow}\n          {...layersProps[index]}\n          onBoundsChange={(bounds) => onBoundsChange(toolWindow.key, bounds)}\n        >\n          {renderToolWindow(toolWindow.key)}\n        </FloatView>\n      ))}\n    </>\n  );\n}\n","import React, {\n  Key,\n  MutableRefObject,\n  RefObject,\n  useContext,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"../utils/useLatest\";\nimport { DropPosition } from \"./createGetDropPosition\";\nimport { UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor } from \"./utils\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\ntype StripeLocation<T extends unknown> = {\n  index: number;\n  anchor: Anchor;\n  isSplit: boolean;\n};\ntype MovableStripeProps<T> = {\n  stripeElRef: React.RefObject<HTMLElement>;\n  getKey: (item: T) => Key;\n  anchor: Anchor;\n  mainItems: T[];\n  splitItems: T[];\n  createGetDropPosition: (\n    key: Key\n  ) => (draggedRect: Rect) => DropPosition | null;\n};\n\ntype MovableToolWindowStripeContextType<T> = {\n  addStripe: <T>(\n    id: string,\n    propsRef: MutableRefObject<MovableStripeProps<T>>\n  ) => () => void;\n  startMove: (id: string, args: { from: Rect; key: Key }) => void;\n  move: (args: { to: Rect }) => void;\n  endMove: () => void;\n  dropPosition: null | { id: string; dropPosition: DropPosition };\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n};\n\nexport type MovableToolWindowStripeProviderProps<T = unknown> = {\n  children: React.ReactNode;\n  onMove: (args: { from: StripeLocation<T>; to: StripeLocation<T> }) => void;\n};\n\nconst MovableToolWindowStripeContext =\n  React.createContext<MovableToolWindowStripeContextType<any> | null>(null);\n\n/**\n * A wrapper component to render around `ToolWindowStripe`s to make their button movable. Stripe buttons then become\n * draggable and can be moved either within the same `ToolWindowStripe` or across different ones.\n * @param onMove: called when a stripe button is moved from one anchor to another.\n * @param children: child element tree, containing one or more ToolWindowStripe elements. No need to be direct children.\n */\nexport const MovableToolWindowStripeProvider = <T extends unknown>({\n  onMove,\n  children,\n}: MovableToolWindowStripeProviderProps<T>) => {\n  const stripes = useRef<{\n    [id: string]: RefObject<MovableStripeProps<T>>;\n  }>({});\n  const [draggingRect, setDraggingRect] = useState<Rect | null>(null);\n  const [draggingKey, setDraggingKey] = useState<Key | null>(null);\n  const [dropPosition, setDropPosition] = useState<{\n    id: string;\n    dropPosition: DropPosition;\n  } | null>(null);\n  const getDropPositionRef = useRef<\n    (to: Rect) => {\n      id: string;\n      dropPosition: DropPosition;\n    } | null\n  >(() => null);\n  const moveStartLocationRef = useRef<null | {\n    id: string;\n    index: number;\n    anchor: Anchor;\n    isSplit: boolean;\n  }>(null);\n\n  const contextValue = useMemo(\n    (): MovableToolWindowStripeContextType<T> => ({\n      addStripe: (id, propsRef) => {\n        if (stripes.current[id]) {\n          console.error(`multiple stripes with the same id \"${id}`);\n        }\n        // @ts-expect-error\n        stripes.current[id] = propsRef;\n        return () => {\n          delete stripes.current[id];\n        };\n      },\n      startMove: (id, { from, key }) => {\n        const stripe = stripes.current[id]?.current;\n        if (!stripe) {\n          return;\n        }\n        const { stripeElRef } = stripe;\n        const stripeElement = stripeElRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n\n        // Running the following two state setters immediately affect the layout\n        // in a way that is necessary for drop position calculation, so the order\n        // is important\n        setDraggingRect(getItemRect(key).toJSON());\n        setDraggingKey(key);\n\n        const indexInMain = stripe.mainItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        const indexInSplit = stripe.splitItems.findIndex(\n          (item) => stripe.getKey(item) === key\n        );\n        moveStartLocationRef.current = {\n          id,\n          anchor: stripe.anchor,\n          index: indexInMain > -1 ? indexInMain : indexInSplit,\n          isSplit: indexInSplit > -1,\n        };\n\n        const dropPositionGetters = Object.entries(stripes.current).map(\n          ([id, stripe]) =>\n            [id, stripe.current!.createGetDropPosition(key)] as const\n        );\n        const getDropPosition = (draggedRect: Rect) => {\n          for (const [id, getDropPosition] of dropPositionGetters) {\n            const dropPosition = getDropPosition(draggedRect);\n            if (dropPosition) {\n              return {\n                id,\n                dropPosition,\n              };\n            }\n          }\n          return null;\n        };\n\n        setDropPosition(getDropPosition(from));\n\n        getDropPositionRef.current = getDropPosition;\n      },\n      move: ({ to }) => {\n        setDropPosition(getDropPositionRef.current(to));\n      },\n      endMove: () => {\n        if (dropPosition && draggingKey) {\n          onMove({\n            from: moveStartLocationRef.current!,\n            to: {\n              anchor: dropPosition.id as Anchor /*FIXME*/,\n              index: dropPosition.dropPosition.index,\n              isSplit: dropPosition.dropPosition.split,\n            },\n          });\n        }\n        setDraggingKey(null);\n        setDropPosition(null);\n        setDraggingRect(null);\n      },\n      dropPosition,\n      draggingRect,\n      draggingKey,\n    }),\n    [dropPosition, draggingKey, draggingRect]\n  );\n\n  return (\n    <MovableToolWindowStripeContext.Provider value={contextValue}>\n      {children}\n    </MovableToolWindowStripeContext.Provider>\n  );\n};\n\nexport function useMovableStripeButtons<T>(props: MovableStripeProps<T>) {\n  // Seems reasonable to assume anchor is unique. Also current onMove signature is coupled with anchor, not a more generic id.\n  const id = props.anchor;\n  const context = useContext(MovableToolWindowStripeContext);\n  const latestPropsRef = useLatest(props);\n  useEffect(() => {\n    if (context) {\n      return context.addStripe(id, latestPropsRef);\n    }\n  }, [context, id]);\n\n  const getProps = (\n    key: Key\n  ): Pick<\n    Required<UseElementMoveOptions<unknown>>,\n    \"onMoveStart\" | \"onMove\" | \"onMoveEnd\"\n  > & { moveDisabled: boolean } => ({\n    moveDisabled: !context,\n    onMoveStart: ({ from }) => {\n      context?.startMove?.(id, { from, key });\n    },\n    onMove: ({ to }) => {\n      context?.move({ to });\n    },\n    onMoveEnd: () => {\n      context?.endMove();\n    },\n  });\n  return {\n    getProps,\n    draggingRect: context?.draggingRect ?? null,\n    dropPosition:\n      context?.dropPosition?.id === id\n        ? context?.dropPosition.dropPosition\n        : null,\n    draggingKey: context?.draggingKey ?? null,\n  };\n}\n","import { styled } from \"../styled\";\nimport { css } from \"styled-components\";\n\nconst TopStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: ts;\n`;\nconst BottomStripe = styled.div`\n  display: flex; // default display, which is block causes an unwanted minimum height\n  grid-area: bs;\n`;\nconst LeftStripe = styled.div`\n  grid-area: ls;\n`;\nconst RightStripe = styled.div`\n  grid-area: rs;\n`;\nconst InnerView = styled.div`\n  grid-area: main;\n  min-height: 0; // necessary to prevent overflow;\n  position: relative; // necessary for undock views which are absolute positioned\n  background: inherit;\n  min-width: 0; // very important for layout. If not set, resizing tool windows can cause weird scrollbar inside tool windows pane.\n`;\n\n/**\n * The container which renders top,bottom,left and right stripes with a centered content.\n * responsible only for the layout of the stripes and the centered content. layout doesn't\n * include the opened tool windows on different sides and is just about the stripes around\n * the center area.\n * It also supports toggling stripes visibility.\n */\nconst Shell = styled.div<{ hideStripes: boolean }>`\n  display: grid;\n  grid-template-columns: min-content auto min-content;\n  grid-template-rows: min-content auto min-content;\n  grid-template-areas:\n    \".   ts   .\"\n    \"ls main rs\"\n    \".   bs   .\";\n\n  background: ${({ theme }) => theme.commonColors.panelBackground};\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n  ${({ hideStripes }) =>\n    hideStripes &&\n    css`\n      ${TopStripe},\n      ${BottomStripe}, \n      ${LeftStripe}, \n      ${RightStripe} {\n        display: none;\n      }\n    `}\n`;\n\nexport const StyledToolWindowOuterLayout = {\n  Shell,\n  TopStripe,\n  BottomStripe,\n  LeftStripe,\n  RightStripe,\n  InnerView,\n};\n","import { compose, filter, groupBy, map, pipe, prop, sortBy } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\nimport {\n  ToolWindowsState,\n  ToolWindowState,\n  ViewMode,\n} from \"./ToolWindowsState\";\n\ntype ToolWindowStateWithKey = { key: Key } & ToolWindowState;\n\nexport interface StripesState {\n  main: Key[];\n  split: Key[];\n  activeKeys: Key[];\n}\n\n/**\n * Represents UI state of the split view (aka secondary or side view) within a docked view at one of the four sides.\n */\ntype SideDockedSplitState = {\n  key: Key;\n  /**\n   * relative size of the split view inside a docked view. Note that this is intentionally a fraction size (0≤size<1),\n   * based on the expected behaviour. split views inside a docked view are not fixed sized and resizing the window\n   * affect their size. This is not the case for the docked views themselves inside the main layout, which have fixed\n   * size which is not affected by window resizing.\n   */\n  sizeFraction: number;\n};\n\n// A potential improvement for this and similar nullable types like SideDockedState.split might be to avoid null type\n// and have it like { open: false} | {open: true, ...relevantProps}\n// Not sure if it's really preferred in terms of usage in the react component.\nexport type SideDockedState = null | {\n  size: number;\n  mainKey: Key;\n  split: SideDockedSplitState | null;\n};\n\nexport type SideUnDockedState = null | {\n  size: number;\n  key: Key;\n};\n\nexport interface SideState {\n  docked: SideDockedState;\n  undocked: SideUnDockedState;\n  stripes: StripesState;\n}\n\nexport interface FloatWindowState {\n  key: Key;\n  bounds: Exclude<ToolWindowState[\"floatingBounds\"], undefined>;\n}\n\n/**\n * Derived from ToolWindowsState, it represents the same information in a away that is suitable for ToolWindows\n * component to render the layout.\n */\nexport interface ToolWindowsLayoutState {\n  left: SideState;\n  top: SideState;\n  right: SideState;\n  bottom: SideState;\n  floatWindows: Array<FloatWindowState>;\n  windows: Array<FloatWindowState>;\n}\n\ninterface ContainerSize {\n  width: number;\n  height: number;\n}\n\nconst getSizeInAnchor = (containerSize: ContainerSize, anchor: Anchor) =>\n  containerSize[isHorizontalToolWindow(anchor) ? \"height\" : \"width\"];\n\nconst mapToKey = map<ToolWindowStateWithKey, Key>(prop(\"key\"));\nconst sortAndMapToKey = compose(\n  mapToKey,\n  sortBy(({ order }: ToolWindowStateWithKey) => order)\n);\nconst filterMains = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => !isSplit\n);\nconst getMains = compose(sortAndMapToKey, filterMains);\nconst filterSplits = filter<ToolWindowStateWithKey, \"array\">(\n  ({ isSplit }: ToolWindowStateWithKey) => isSplit\n);\nconst filterVisible = (expectedViewMode: ViewMode | ViewMode[] = []) =>\n  filter<ToolWindowStateWithKey, \"array\">(\n    ({ viewMode, isVisible }: ToolWindowStateWithKey) =>\n      isVisible &&\n      ([] as ViewMode[]).concat(expectedViewMode).includes(viewMode)\n  );\nconst getSplits = compose(sortAndMapToKey, filterSplits);\n\nconst filterVisibleDocked = filterVisible([\"docked_unpinned\", \"docked_pinned\"]);\nconst filterVisibleUnDocked = filterVisible(\"undock\");\n\nconst getDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideDockedState => {\n  const docks = filterVisibleDocked(toolWindows);\n  const mains = filterMains(docks);\n  const splits = filterSplits(docks);\n  if (mains.length > 1 || splits.length > 1) {\n    throw new Error(\n      \"More than one visible docked window in a side is not possible\"\n    );\n  }\n  if (mains[0] || splits[0]) {\n    const weight = mains[0]?.weight || splits[0]?.weight;\n    return {\n      mainKey: mains[0]?.key || splits[0]?.key,\n      split:\n        mains[0]?.key && splits[0]?.key\n          ? {\n              key: splits[0].key,\n              sizeFraction: mains[0].weight\n                ? 1 - mains[0].sideWeight\n                : splits[0].sideWeight,\n            }\n          : null,\n      size: weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  return null;\n};\n\nconst getUnDocked = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideUnDockedState => {\n  const windows = filterVisibleUnDocked(toolWindows);\n  if (windows.length === 1) {\n    return {\n      key: windows[0].key,\n      size: windows[0].weight * getSizeInAnchor(containerSize, anchor),\n    };\n  }\n  if (windows.length === 0) {\n    return null;\n  }\n  throw new Error(\n    \"More than one visible undocked window in a side is not possible\"\n  );\n};\n\nconst getSideState = (\n  anchor: Anchor,\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n): SideState => ({\n  stripes: {\n    main: getMains(toolWindows),\n    split: getSplits(toolWindows),\n    activeKeys: mapToKey(toolWindows.filter(({ isVisible }) => isVisible)),\n  },\n  undocked: getUnDocked(anchor, containerSize, toolWindows),\n  docked: getDocked(anchor, containerSize, toolWindows),\n});\n\nconst DEFAULT_HEIGHT = 300;\nconst DEFAULT_WIDTH = 400;\nconst getFloatWindowState =\n  (containerSize: ContainerSize) =>\n  ({\n    floatingBounds: bounds = {\n      top: containerSize.height / 2 - DEFAULT_HEIGHT / 2,\n      left: containerSize.width / 2 - DEFAULT_WIDTH / 2,\n      height: DEFAULT_HEIGHT,\n      width: DEFAULT_WIDTH,\n    },\n    key,\n  }: ToolWindowStateWithKey): FloatWindowState => ({ bounds, key });\n\nconst getFloatWindowsState = (\n  viewMode: \"float\" | \"window\",\n  containerSize: ContainerSize,\n  toolWindows: ToolWindowStateWithKey[]\n) =>\n  pipe(\n    filterVisible(viewMode),\n    map<ToolWindowStateWithKey, FloatWindowState>(\n      getFloatWindowState(containerSize)\n    )\n  )(toolWindows);\n\nexport function getToolWindowsLayoutState(\n  state: Readonly<ToolWindowsState>,\n  containerSize: ContainerSize,\n  /**\n   * list of valid window ids. If state contains window ids that are not included here, they will be excluded in\n   * the returned state object.\n   */\n  windowIds: string[] = Object.keys(state.windows)\n): ToolWindowsLayoutState {\n  const toolWindows = Object.keys(state.windows)\n    .filter(\n      (key) => windowIds.includes(key) && !state.removedFromSideBarIds.has(key)\n    )\n    .map((key) => ({\n      ...state.windows[key],\n      key,\n    }));\n  const {\n    top = [],\n    bottom = [],\n    left = [],\n    right = [],\n  } = groupBy(({ anchor }) => anchor, toolWindows);\n  return {\n    left: getSideState(\"left\", containerSize, left),\n    top: getSideState(\"top\", containerSize, top),\n    right: getSideState(\"right\", containerSize, right),\n    bottom: getSideState(\"bottom\", containerSize, bottom),\n    windows: getFloatWindowsState(\"window\", containerSize, toolWindows),\n    floatWindows: getFloatWindowsState(\"float\", containerSize, toolWindows),\n  };\n}\n","import { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { Key } from \"react\";\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface DropPosition {\n  index: number;\n  split: boolean;\n\n  relative?: {\n    placement: \"before\" | \"after\";\n    key: Key;\n  };\n}\n\n/**\n * TODO: Add a few words about what this function do.\n */\nexport const createGetDropPosition = <T extends any>({\n  anchor,\n  stripeElement,\n  splitItems,\n  mainItems,\n  getItemRect,\n  getKey,\n}: {\n  stripeElement: HTMLElement;\n  anchor: Anchor;\n  getItemRect: (key: Key) => Rect;\n  getKey: (key: T) => Key;\n  mainItems: T[];\n  splitItems: T[];\n}): ((draggedRect: Rect) => DropPosition | null) => {\n  // Note: It may be tempting to calculate stripe element boundaries just once\n  // here, since it's not supposed to change during a drag session, but it\n  // can change due to getting empty when the only button is being dragged out.\n  const getStripeRect = () => stripeElement.getBoundingClientRect();\n\n  const getCanDrop = (draggingRect: Rect) => {\n    const stripeRect = getStripeRect();\n    return (\n      draggingRect.right > stripeRect.left - stripeRect.width &&\n      draggingRect.left < stripeRect.right &&\n      draggingRect.bottom > stripeRect.top - stripeRect.height &&\n      draggingRect.top < stripeRect.bottom\n    );\n  };\n\n  const start = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.left : rect.top;\n  const end = (rect: Rect) =>\n    isHorizontalToolWindow(anchor) ? rect.right : rect.bottom;\n\n  const getKeyToOffsets = (items: T[]) => {\n    const keyToOffsets: Record<Key, { start: number; end: number }> = {};\n    items.forEach((item) => {\n      const key = getKey(item);\n      const boundingRect = getItemRect(key);\n      keyToOffsets[key] = {\n        start: start(boundingRect),\n        end: end(boundingRect),\n      };\n    });\n    return keyToOffsets;\n  };\n\n  const getDropPositions = (\n    items: T[],\n    split = false\n    // FIXME: score is a bad name. it's quite the opposite! the less means the higher score.\n  ): Array<DropPosition & { score: (rect: Rect) => number }> => {\n    const getRef = split ? end : start;\n    if (items.length === 0) {\n      // if the section is empty, we should still allow adding to it.\n      return [\n        {\n          index: 0,\n          split,\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - getRef(getStripeRect())),\n        },\n      ];\n    }\n    return items.flatMap((item, index) => {\n      const key = getKey(item);\n      return [\n        {\n          index,\n          split,\n          relative: { key, placement: \"before\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].start),\n        },\n        {\n          index: index + 1,\n          split,\n          relative: { key, placement: \"after\" },\n          score: (draggingRect: Rect) =>\n            Math.abs(getRef(draggingRect) - keyToOffsets[key].end),\n        },\n      ];\n    });\n  };\n\n  const keyToOffsets = getKeyToOffsets([...mainItems, ...splitItems]);\n\n  const dropPositions = [\n    ...getDropPositions(mainItems),\n    ...getDropPositions(splitItems, true),\n  ];\n\n  let lastDropPosition: DropPosition | null = null;\n  return (draggingRect: Rect) => {\n    if (!getCanDrop(draggingRect)) {\n      return null;\n    }\n    const result = dropPositions.reduce(\n      (bestMatch, candidate) => {\n        const score = candidate.score(draggingRect);\n        if (!bestMatch || score < bestMatch.score) {\n          return {\n            ...candidate,\n            score,\n          };\n        }\n        return bestMatch;\n      },\n      null as\n        | null\n        | (DropPosition & {\n            score: number;\n          })\n    );\n\n    if (!result) {\n      return null;\n    }\n    if (\n      result.split !== lastDropPosition?.split ||\n      result.index !== lastDropPosition?.index\n    ) {\n      lastDropPosition = result;\n    }\n    return lastDropPosition;\n  };\n};\n","import { StyledIconWrapper } from \"../Icon/StyledIconWrapper\";\nimport { styled } from \"../styled\";\nimport React from \"react\";\nimport { css } from \"styled-components\";\nimport { Anchor } from \"./utils\";\n\nexport interface StyledToolWindowStripeButtonProps {\n  anchor: Anchor;\n  active?: boolean;\n}\n\nexport const STRIPE_BUTTON_CROSS_PADDING = 2.5;\nexport const STRIPE_BUTTON_LINE_HEIGHT = \"1rem\";\n\nconst anchorStyles = ({ anchor }: { anchor: Anchor }) => {\n  const orientation =\n    anchor === \"left\" || anchor === \"right\" ? \"vertical\" : \"horizontal\";\n\n  return orientation === \"horizontal\"\n    ? css`\n        padding: ${STRIPE_BUTTON_CROSS_PADDING}px 10px;\n      `\n    : css`\n        padding: 10px ${STRIPE_BUTTON_CROSS_PADDING}px;\n        writing-mode: vertical-lr;\n        // writing-mode: sideways-lr is not supported anywhere other than FF, so, we need to rotate\n        transform: ${anchor === \"left\" ? \"rotateZ(180deg)\" : undefined};\n\n        // icons are not rotated like text in Intellij Platform implementation. It kind of makes sense.\n        ${StyledIconWrapper} {\n          transform: rotate(180deg);\n        }\n      `;\n};\n\nexport const StyledToolWindowStripeButton = styled.span<StyledToolWindowStripeButtonProps>`\n  box-sizing: border-box;\n  display: flex; // to allow icon and text alignment by default;\n  align-items: center;\n  cursor: default;\n  user-select: none;\n  overflow: hidden;\n  direction: ltr;\n  flex-shrink: 0;\n  font-size: 0.7rem;\n  line-height: ${STRIPE_BUTTON_LINE_HEIGHT}; // absolute value seems to be problematic when the base font size is changed\n  white-space: nowrap;\n  color: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedForeground\",\n          theme.dark ? \"rgb(255,255,255)\" : \"rgb(0,0,0)\"\n        )\n      : theme.color(\"*.foreground\")};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\n          \"ToolWindow.Button.selectedBackground\",\n          theme.dark ? \"rgba(15,15,15,.332)\" : \"rgba(85,85,85,.332)\"\n        )\n      : undefined};\n\n  ${anchorStyles}\n  ${({ active }) =>\n    !active &&\n    css`\n      &:hover {\n        background: ${({ theme }) =>\n          theme.color(\n            \"ToolWindow.Button.hoverBackground\",\n            theme.dark ? \"rgba(15,15,15,.156)\" : \"rgba(85,85,85,.156)\"\n          )};\n      }\n    `};\n`;\n","import {\n  STRIPE_BUTTON_CROSS_PADDING,\n  STRIPE_BUTTON_LINE_HEIGHT,\n  StyledToolWindowStripeButton,\n} from \"./StyledToolWindowStripeButton\";\nimport { Anchor, isHorizontalToolWindow, theOtherSide } from \"./utils\";\nimport { css } from \"styled-components\";\nimport { Theme } from \"../Theme/Theme\";\nimport { styled } from \"../styled\";\nimport { Color } from \"../Theme/Color\";\n\nconst minHeight = `calc(${STRIPE_BUTTON_LINE_HEIGHT} + ${\n  2 * STRIPE_BUTTON_CROSS_PADDING + 1 /*border*/\n}px)`;\n\nconst anchorStyles = ({\n  anchor,\n  preventCollapse,\n}: StyledToolWindowStripeProps) =>\n  isHorizontalToolWindow(anchor)\n    ? css`\n        flex-direction: row;\n        width: 100%;\n        min-height: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          height: 1.25rem;\n        }\n      `\n    : css`\n        flex-direction: column;\n        height: 100%;\n        min-width: ${preventCollapse ? minHeight : \"fit-content\"};\n        ${StyledToolWindowStripeButton} {\n          width: 1.25rem;\n        }\n      `;\nconst borderStyle = ({ anchor, theme }: { anchor: Anchor; theme: Theme }) =>\n  css`border-${theOtherSide(anchor)}: 1px solid ${\n    theme.commonColors.contrastBorder\n  }`;\n\nexport interface StyledToolWindowStripeProps {\n  anchor: Anchor;\n  highlighted?: boolean;\n  preventCollapse?: boolean;\n}\n\nexport const StyledToolWindowStripe = styled.div<StyledToolWindowStripeProps>`\n  box-sizing: border-box;\n  background: ${({ theme, highlighted }) =>\n    highlighted\n      ? Color.brighter(theme.commonColors.panelBackground)\n      : theme.commonColors.panelBackground};\n  display: inline-flex;\n  overflow: hidden;\n  ${borderStyle};\n  ${anchorStyles}\n`;\n\nexport const StyledSpacer = styled.div`\n  flex: 1;\n`;\n","import { RefObject } from \"react\";\nimport {\n  useMove,\n  UseMoveOptions,\n  XY,\n} from \"../utils/interaction-utils/useMove\";\nimport { findEffectiveBackgroundColor } from \"./findEffectiveBackgroundColor\";\n\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nexport interface UseElementMoveOptions<S>\n  extends Omit<UseMoveOptions<S>, \"onMoveStart\" | \"onMove\"> {\n  ref: RefObject<HTMLElement>;\n  /**\n   * if true a clone of the element is created and used as ghost.\n   * A function can be passed to customize the default ghost element or return a completely\n   * different one.\n   */\n  ghost?: boolean | ((defaultGhost: HTMLElement) => HTMLElement);\n\n  onMoveStart: (args: { from: Rect }) => S;\n  onMove: (args: { from: Rect; to: Rect; movement: XY; startState: S }) => void;\n}\n\n/**\n * Provides necessary event handling props to be applied on an element to make it movable.\n * It's implemented on top of {@link useMove}. The differences are:\n * - The signature of `onMoveStart`, `onMove` and `onMoveEnd` are changed to pass\n *   {@link Rect} instead of {@link XY}.\n * - rendering a ghost element.\n *\n * ## A note about ghost:\n * There is no easy way to create a snapshot image of an html element. Native drag and drop API\n * supports [setting drag\n * image](https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/setDragImage) but we are\n * not using drag events mainly because of not being able to customize the offset after which drag\n * should start. See {@link UseMoveOptions#dragThreshold dragThreshold} for more details. There are\n * some libraries like html2canvas for creating an image from an html element, but they are very\n * big and using them doesn't make sense at all from a value/cost ratio perspective. There might be\n * some ways of implementing custom move threshold on top of native drag events. For example by\n * delaying the call to setDragImage, but it needs more investigation. Also, not sure if opacity of\n * the ghost is something you can control when using setDragImage.\n **/\nexport function useElementMove<S>({\n  ref,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  ghost: ghostOption,\n  ...otherOptions\n}: UseElementMoveOptions<S>) {\n  return useMove({\n    ...otherOptions,\n    onMoveStart: () => {\n      const element = ref.current;\n      let ghost: HTMLElement | null = null;\n      if (!element) {\n        throw new Error(\n          \"Movement started but ref value is null. Make sure the passed ref is applied on the same element that other props are.\"\n        );\n      }\n      const updateGhostPosition = (rect: Rect) => {\n        if (ghost) {\n          ghost.style.left = `${rect.left}px`;\n          ghost.style.top = `${rect.top}px`;\n        }\n      };\n      const from: Rect = element.getBoundingClientRect();\n      if (ghostOption) {\n        const defaultGhost = createDefaultGhost(element);\n        ghost =\n          typeof ghostOption === \"function\"\n            ? ghostOption(defaultGhost) || defaultGhost\n            : defaultGhost;\n        ghost.style.position = \"fixed\";\n        document.body.append(ghost);\n        updateGhostPosition(from);\n      }\n      return {\n        ghost,\n        from,\n        updateGhostPosition,\n        startState: onMoveStart({ from }),\n      };\n    },\n    onMove: ({\n      movement,\n      startState: { from, updateGhostPosition, startState },\n    }) => {\n      const to: Rect = {\n        left: from.left + movement.x,\n        right: from.right + movement.x,\n        top: from.top + movement.y,\n        bottom: from.bottom + movement.y,\n        height: from.height,\n        width: from.width,\n      };\n      updateGhostPosition(to);\n      onMove({ from, to, movement, startState });\n    },\n    onMoveEnd: ({ startState: { ghost, startState } }) => {\n      ghost?.remove();\n      onMoveEnd?.({ startState });\n    },\n  });\n}\n\nfunction createDefaultGhost(element: HTMLElement) {\n  const ghost = element.cloneNode(true) as HTMLElement;\n  ghost.style.backgroundColor = findEffectiveBackgroundColor(element);\n  return ghost;\n}\n","import { Color } from \"../Theme/Color\";\n\n/**\n * Computes the effective background color of the element by blending translucent backgrounds of\n * the elements ancestors. It traverses up the parents, until reaches a solid background color.\n * all translucent backgrounds in between are blended with that solid color, with respect to their\n * transparency. It's meant to be used only for the simple cases where an element doesn't overflow\n * the parents. Obviously, in other cases there won't be one single effective background color\n * for the element.\n */\nexport function findEffectiveBackgroundColor(element: HTMLElement): string {\n  let elem: HTMLElement | null = element;\n  let colors: Color[] = [];\n  while (elem != null) {\n    const computedBackground = getComputedStyle(elem).backgroundColor;\n    if (computedBackground) {\n      const color = new Color(computedBackground);\n      colors.unshift(color);\n      if (color.a === 255) {\n        // if we've reached a solid color, we don't need to continue traversing ancestors\n        break;\n      }\n    }\n    elem = elem.parentElement;\n  }\n  return (\n    colors\n      .reduce<Color | null>((resultColor, nextColor) => {\n        return resultColor ? resultColor.blend(nextColor) : nextColor;\n      }, null)\n      ?.toString() || \"\"\n  );\n}\n","import { mergeProps } from \"@react-aria/utils\";\nimport React, { CSSProperties, HTMLAttributes, Key, useRef } from \"react\";\nimport { createGetDropPosition, DropPosition } from \"./createGetDropPosition\";\nimport { useMovableStripeButtons } from \"./MovableToolWindowStripeProvider\";\nimport { StyledSpacer, StyledToolWindowStripe } from \"./StyledToolWindowStripe\";\nimport { StyledToolWindowStripeButton } from \"./StyledToolWindowStripeButton\";\nimport { useElementMove, UseElementMoveOptions } from \"./useElementMove\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\ninterface ToolWindowStripeProps<T> {\n  anchor: Anchor;\n  items: T[];\n  splitItems?: T[];\n  getKey: (item: T) => Key;\n  renderItem: (item: T) => React.ReactNode;\n  selectedKeys?: Key[];\n  onItemPress?: (key: Key) => void;\n}\n\n/**\n * TODO: refactor to remove the key based interface.\n */\nexport function ToolWindowStripe<T>({\n  anchor,\n  items: mainItems,\n  renderItem: render,\n  splitItems = [],\n  selectedKeys = [],\n  onItemPress,\n  getKey,\n}: ToolWindowStripeProps<T>) {\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const { getProps, draggingRect, draggingKey, dropPosition } =\n    useMovableStripeButtons({\n      stripeElRef: containerRef,\n      getKey,\n      anchor,\n      mainItems,\n      splitItems,\n      createGetDropPosition: (key: Key) => {\n        const isNotCurrentItem = (anItem: T) => getKey(anItem) !== key;\n        const stripeElement = containerRef.current!;\n        const getItemRect = (key: Key) =>\n          stripeElement\n            .querySelector(`[data-key=\"${key}\"]`)! // FIXME\n            .getBoundingClientRect();\n        return createGetDropPosition({\n          stripeElement: stripeElement,\n          mainItems: mainItems.filter(isNotCurrentItem),\n          splitItems: splitItems.filter(isNotCurrentItem),\n          getKey,\n          anchor,\n          getItemRect,\n        });\n      },\n    });\n\n  const highlighted =\n    dropPosition != null &&\n    draggingKey != null &&\n    [...mainItems, ...splitItems].every((item) => getKey(item) !== draggingKey);\n\n  const renderItem = (item: T) => {\n    const key = getKey(item);\n\n    return (\n      <ToolWindowStripeButton\n        anchor={anchor}\n        key={key}\n        data-key={key}\n        style={{\n          ...getStripeButtonStyles({\n            key,\n            dropPosition,\n            anchor,\n            draggingRect,\n            draggingKey,\n          }),\n        }}\n        {...getProps(key)}\n        active={selectedKeys.includes(key)}\n        onPress={() => onItemPress?.(key)}\n      >\n        {render(item)}\n      </ToolWindowStripeButton>\n    );\n  };\n  return (\n    <>\n      <StyledToolWindowStripe\n        anchor={anchor}\n        preventCollapse={Boolean(dropPosition)}\n        highlighted={highlighted}\n        ref={containerRef}\n      >\n        {mainItems.map(renderItem)}\n        <StyledSpacer />\n        {splitItems.map(renderItem)}\n      </StyledToolWindowStripe>\n    </>\n  );\n}\ntype Rect = Omit<ClientRect, \"toJSON\" | \"x\" | \"y\">;\n\nfunction getStripeButtonStyles({\n  anchor,\n  key,\n  dropPosition,\n  draggingRect,\n  draggingKey,\n}: {\n  anchor: Anchor;\n  key: Key;\n  draggingKey: Key | null;\n  draggingRect: Rect | null;\n  dropPosition: DropPosition | null;\n}) {\n  const styles: CSSProperties = {\n    // transition: \"margin 100ms\", // maybe only when drag is in progress, if unwanted transition at drop\n  };\n  if (dropPosition?.relative?.key === key && draggingRect) {\n    const marginValue = isHorizontalToolWindow(anchor)\n      ? draggingRect.width\n      : draggingRect.height;\n\n    if (isHorizontalToolWindow(anchor)) {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginLeft\"\n          : \"marginRight\"\n      ] = marginValue;\n    } else {\n      styles[\n        dropPosition.relative.placement === \"before\"\n          ? \"marginTop\"\n          : \"marginBottom\"\n      ] = marginValue;\n    }\n  }\n  if (key === draggingKey) {\n    styles.display = \"none\";\n  }\n  return styles;\n}\n\nfunction ToolWindowStripeButton<T, S>({\n  children,\n  anchor,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n  onPress,\n  moveDisabled,\n  ...otherProps\n}: {\n  children: React.ReactNode;\n  anchor: Anchor;\n  style: CSSProperties;\n  active: boolean;\n  onPress: () => void;\n  moveDisabled?: boolean;\n  onMoveStart: UseElementMoveOptions<S>[\"onMoveStart\"];\n  onMove: UseElementMoveOptions<S>[\"onMove\"];\n  onMoveEnd: UseElementMoveOptions<S>[\"onMoveEnd\"];\n}) {\n  const ref = useRef<HTMLElement>(null);\n\n  // for some reason, usePress and useMove (used in useElementMove) are not compatible.\n  // it seems onMouseDown in useMove is not called, even when handlers are merged by mergeProps.\n  // FIXME: fix compatibility of useMove and usePress, and switch to usePress({ onPress })\n  const { pressProps } = {\n    pressProps: {\n      onPointerUp: onPress,\n      onMouseDown: (e) => {\n        e.preventDefault();\n      },\n    } as HTMLAttributes<HTMLElement>,\n  }; //usePress({ onPress });\n  const props = useElementMove({\n    ref,\n    disabled: moveDisabled,\n    dragThreshold: 7,\n    ghost: true,\n    onMoveStart,\n    onMove,\n    onMoveEnd,\n  });\n\n  return (\n    <StyledToolWindowStripeButton\n      anchor={anchor}\n      {...mergeProps(otherProps, pressProps, props)}\n      ref={ref}\n    >\n      {children}\n    </StyledToolWindowStripeButton>\n  );\n}\n","import React from \"react\";\nimport { css } from \"styled-components\";\nimport { ResizableView } from \"../ResizableView\";\nimport { styled } from \"../styled\";\nimport { SideUnDockedState } from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\n\nexport const StyledUndockSide = styled.div<{ anchor: Anchor }>`\n  position: absolute;\n  background: inherit;\n  z-index: 1;\n  ${({ anchor }) =>\n    isHorizontalToolWindow(anchor)\n      ? css`\n          left: 0;\n          right: 0;\n        `\n      : css`\n          top: 0;\n          bottom: 0;\n        `};\n  ${({ anchor }) =>\n    css`\n      ${anchor}: 0;\n    `};\n`;\n\nexport function UndockSide({\n  state,\n  anchor,\n  children,\n  onResize,\n}: {\n  state: Exclude<SideUnDockedState, null>;\n  anchor: Anchor;\n  children: React.ReactNode;\n  onResize: (size: number) => void;\n}) {\n  return (\n    state && (\n      <StyledUndockSide anchor={anchor}>\n        <ResizableView\n          orientation={\n            isHorizontalToolWindow(anchor) ? \"vertical\" : \"horizontal\"\n          }\n          resizerPlacement={\n            anchor === \"left\" || anchor === \"top\" ? \"after\" : \"before\"\n          }\n          size={state.size}\n          onResize={onResize}\n        >\n          {children}\n        </ResizableView>\n      </StyledUndockSide>\n    )\n  );\n}\n","import { indexBy } from \"ramda\";\nimport React, {\n  CSSProperties,\n  ForwardedRef,\n  HTMLProps,\n  Key,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\n\nimport { ThreeViewSplitter } from \"../ThreeViewSplitter/ThreeViewSplitter\";\nimport { FocusScope } from \"../utils/FocusScope\";\nimport { FloatToolWindows } from \"./FloatToolWindows\";\nimport { MovableToolWindowStripeProvider } from \"./MovableToolWindowStripeProvider\";\nimport { StyledToolWindowOuterLayout } from \"./StyledToolWindowOuterLayout\";\nimport {\n  getToolWindowsLayoutState,\n  SideDockedState,\n  StripesState,\n  ToolWindowsLayoutState,\n} from \"./ToolWindowsState/ToolWindowsLayoutState\";\nimport { ToolWindowsState } from \"./ToolWindowsState/ToolWindowsState\";\nimport { ToolWindowStateProvider } from \"./ToolWindowsState/ToolWindowStateProvider\";\nimport { ToolWindowStripe } from \"./ToolWindowStripe\";\nimport { UndockSide } from \"./UndockSide\";\nimport { Anchor, isHorizontalToolWindow } from \"./utils\";\nimport { useOnFocusLost } from \"./useOnFocusLost\";\nimport { useInteractOutside } from \"@react-aria/interactions\";\n\ninterface ToolWindow {\n  id: string;\n  toolbarButton: React.ReactNode;\n  content: React.ReactNode;\n}\n\nexport interface ToolWindowsProps {\n  children: React.ReactNode;\n  windows: ToolWindow[];\n  toolWindowsState: Readonly<ToolWindowsState>;\n  onToolWindowStateChange: (newState: ToolWindowsState) => void;\n\n  /**\n   * Whether stripe buttons should be hidden or not.\n   * `hideToolStripes` UISettings in Intellij Platform\n   */\n  hideToolWindowBars?: boolean;\n\n  /**\n   *\n   * `wideScreenSupport` in UISettings in Intellij Platform\n   */\n  useWidescreenLayout?: boolean;\n\n  /**\n   * min width applied to the main content (children).\n   * @default 50\n   */\n  mainContentMinWidth?: number;\n\n  height?: CSSProperties[\"height\"];\n  minHeight?: CSSProperties[\"minHeight\"];\n  margin?: CSSProperties[\"margin\"];\n\n  /**\n   * props to be passed to the container element.\n   */\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\">;\n}\n\nexport interface ToolWindowRefValue {\n  focus(key: Key): void;\n  hasFocus(key: Key): void;\n  focusLastActiveWindow(): void;\n  focusMainContent(): void;\n  changeState(\n    updater: (currentState: Readonly<ToolWindowsState>) => ToolWindowsState\n  ): void;\n}\n\n/**\n * @constructor\n *\n * Corresponding to ToolWindowPane in Intellij Platform\n *\n * Known issues:\n * - in Firefox and Safari, left and right toolbars are not properly shown. Seems like a nasty bug, since adding and\n * then removing some min-width: fit-content style fixes it.\n * - in the dock view of a side, open only a window from the split ones. then open a window from main ones.\n *   focus is not moved to the just opened window. The reason is we rely on autofocusing and because the React tree\n *   changes for both windows, even the split one which was open will be unmounted and mounted again, and since it's\n *   placed after the main one, and hence mounted later, it will get the focus again. This becomes a bigger issue\n *   if the main one is unpinned, because it immediately gets closed after opening.\n *   Possible solutions:\n *   - make sure the split one won't unmount and mount again in such scenario.\n *   - decouple focusing logic from mounting logic, and only focus windows somehow, when the `isVisible` is changed\n *     from false to true, not when mounted.\n * - related to previous issue: open a tool window in split section of a side. set view mode for a tool window in main\n *   section of the same side to docked_unpinned. try to open the unpinned one while the split one is open. it doesn't\n *   work.\n */\nexport const ToolWindows = React.forwardRef(function ToolWindows(\n  {\n    hideToolWindowBars = false,\n    useWidescreenLayout = false,\n    height = \"100%\",\n    minHeight = \"0\",\n    toolWindowsState,\n    onToolWindowStateChange,\n    windows,\n    children,\n    mainContentMinWidth = 50,\n    containerProps = {},\n  }: ToolWindowsProps,\n  ref: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const windowsById = indexBy(({ id }) => id, windows);\n  const containerRef = useRef<HTMLDivElement>(null);\n  const mainContentFocusScopeRef =\n    useRef<React.ComponentRef<typeof FocusScope>>(null);\n  const [layoutState, setLayoutState] = useState<ToolWindowsLayoutState>();\n  const windowFocusableRefs = useRef<{\n    [key: string]: React.RefObject<React.ComponentRef<typeof FocusScope>>;\n  }>({});\n\n  const latestRef = useLatest({ toolWindowsState, onToolWindowStateChange });\n\n  useLayoutEffect(() => {\n    const container = containerRef.current;\n    const _setLayoutState = () =>\n      setLayoutState(\n        getToolWindowsLayoutState(\n          toolWindowsState,\n          container!.getBoundingClientRect(),\n          windows.map(({ id }) => id)\n        )\n      );\n\n    // If container is rendered but has zero dimensions for any reason, we start observing size changes, until\n    // it's no longer collapsed. Note that we don't want to unconditionally observe resizes and update the layout state.\n    // because tool windows are not supposed to keep the fraction width as the window resizes. They are supposed to have\n    // a fixed width which is determined fraction-based, but only when the tool window is opened. In fact, updating the\n    // layout state, on each and every change to toolWindowsState is also not quite correct, as some state changes\n    // are unrelated and shouldn't cause a re-calculation of the size. FIXME: don't re-calculate fraction base sizes on\n    //  every state change.\n    if (container?.offsetWidth === 0 || container?.offsetHeight === 0) {\n      const observer = new ResizeObserver(([resize]) => {\n        if (resize.contentRect.width > 0 && resize.contentRect.height > 0) {\n          _setLayoutState();\n          observer.unobserve(container);\n        }\n      });\n      observer.observe(container);\n    }\n    _setLayoutState();\n  }, [toolWindowsState]);\n\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (key: Key) => {\n        windowFocusableRefs.current[key]?.current?.focus();\n      },\n      hasFocus: (key: Key) =>\n        document.activeElement?.closest(`[data-tool-window-id=\"${key}\"]`) !==\n        null,\n      focusLastActiveWindow: () => {\n        const { lastFocusedKey } = latestRef.current.toolWindowsState;\n        if (lastFocusedKey != null) {\n          if (\n            !latestRef.current.toolWindowsState.windows[lastFocusedKey]\n              .isVisible\n          ) {\n            latestRef.current.onToolWindowStateChange(\n              toolWindowsState.show(lastFocusedKey)\n            );\n          }\n          windowFocusableRefs.current[lastFocusedKey].current?.focus(true);\n        }\n      },\n      focusMainContent: () => {\n        mainContentFocusScopeRef.current?.focus();\n      },\n      changeState: (updater) => {\n        onToolWindowStateChange(updater(latestRef.current.toolWindowsState));\n      },\n    }),\n    []\n  );\n\n  const interactionOutsideRef = useRef(false);\n  useInteractOutside({\n    ref: containerRef,\n    onInteractOutsideStart: () => {\n      interactionOutsideRef.current = true;\n    },\n    onInteractOutside: () => {\n      interactionOutsideRef.current = false;\n    },\n  });\n\n  useOnFocusLost(({ focusReceivingElement }) => {\n    if (!focusReceivingElement && !interactionOutsideRef.current) {\n      mainContentFocusScopeRef.current?.focus();\n    }\n  }, containerRef);\n\n  // TODO: extract component candidate\n  const renderStripe = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: StripesState;\n  }) => (\n    <ToolWindowStripe\n      anchor={anchor}\n      items={state.main}\n      splitItems={state.split}\n      getKey={(item) => item}\n      renderItem={(item) => windowsById[item]?.toolbarButton}\n      onItemPress={(key) =>\n        onToolWindowStateChange(toolWindowsState.toggle(key))\n      }\n      selectedKeys={state.activeKeys}\n    />\n  );\n\n  const renderToolWindow = (key: Key) => {\n    if (!windowFocusableRefs.current[key]) {\n      windowFocusableRefs.current[key] = React.createRef();\n    }\n    return (\n      <div\n        style={{ all: \"unset\" }}\n        data-tool-window-id={key}\n        onFocus={() => {\n          onToolWindowStateChange(toolWindowsState.lastFocused(key));\n        }}\n      >\n        <FocusScope ref={windowFocusableRefs.current[key]}>\n          <ToolWindowStateProvider\n            id={key}\n            containerRef={containerRef}\n            mainContentFocusableRef={mainContentFocusScopeRef}\n            toolWindowsState={toolWindowsState}\n            onToolWindowStateChange={onToolWindowStateChange}\n          >\n            {windowsById[key]?.content}\n          </ToolWindowStateProvider>\n        </FocusScope>\n      </div>\n    );\n  };\n  // TODO: candidate for component extraction\n  const renderSideDockedView = ({\n    anchor,\n    state,\n  }: {\n    anchor: Anchor;\n    state: SideDockedState;\n  }) => {\n    if (!state) {\n      return null;\n    }\n    return (\n      <ThreeViewSplitter\n        innerView={renderToolWindow(state.mainKey)}\n        innerViewMinSize={50}\n        lastView={state.split && renderToolWindow(state.split.key)}\n        lastSize={state.split?.sizeFraction}\n        onLastResize={(newSize) => {\n          onToolWindowStateChange(\n            toolWindowsState.resizeDockSplitView(anchor, newSize)\n          );\n        }}\n        orientation={isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\"}\n      />\n    );\n  };\n  const onDockResize = (anchor: Anchor) => (size: number) => {\n    const containerBounds = containerRef.current?.getBoundingClientRect();\n    // containerBounds should have value in normal course of events\n    if (containerBounds) {\n      onToolWindowStateChange(\n        toolWindowsState.resizeDock(anchor, size, containerBounds)\n      );\n    }\n  };\n  const getSplitViewProps = (\n    layoutState: ToolWindowsLayoutState,\n    orientation: \"horizontal\" | \"vertical\"\n  ) => {\n    const firstAnchor = orientation === \"horizontal\" ? \"left\" : \"top\";\n    const secondAnchor = orientation === \"horizontal\" ? \"right\" : \"bottom\";\n    return {\n      orientation,\n      firstView: renderSideDockedView({\n        anchor: firstAnchor,\n        state: layoutState[firstAnchor].docked,\n      }),\n      firstSize: layoutState[firstAnchor].docked?.size,\n      onFirstResize: onDockResize(firstAnchor),\n      lastView: renderSideDockedView({\n        anchor: secondAnchor,\n        state: layoutState[secondAnchor].docked,\n      }),\n      lastSize: layoutState[secondAnchor].docked?.size,\n      onLastResize: onDockResize(secondAnchor),\n    };\n  };\n  const renderInnerLayout = (layoutState: ToolWindowsLayoutState) => {\n    const horizontalSplitterProps = getSplitViewProps(\n      layoutState,\n      \"horizontal\"\n    );\n    const verticalSplitterProps = getSplitViewProps(layoutState, \"vertical\");\n\n    const [outerSplitterProps, innerSplitterProps] = useWidescreenLayout\n      ? [horizontalSplitterProps, verticalSplitterProps]\n      : [verticalSplitterProps, horizontalSplitterProps];\n\n    const undockLayers = ([\"left\", \"top\", \"right\", \"bottom\"] as const).map(\n      (anchor) => {\n        const state = layoutState[anchor].undocked;\n        return (\n          state && (\n            <UndockSide\n              key={anchor}\n              anchor={anchor}\n              state={state}\n              onResize={(size) => {\n                containerRef.current &&\n                  onToolWindowStateChange(\n                    toolWindowsState.resizeUndock(\n                      anchor,\n                      size,\n                      containerRef.current.getBoundingClientRect()\n                    )\n                  );\n              }}\n            >\n              {renderToolWindow(state.key)}\n            </UndockSide>\n          )\n        );\n      }\n    );\n\n    return (\n      <>\n        <MovableToolWindowStripeProvider\n          onMove={({ to, from }) => {\n            onToolWindowStateChange(\n              toolWindowsState.move(\n                layoutState[from.anchor].stripes[\n                  from.isSplit ? \"split\" : \"main\"\n                ][from.index],\n                { anchor: to.anchor, isSplit: to.isSplit },\n                to.index\n              )\n            );\n          }}\n        >\n          {/**\n           * ToolWindow bars, aka Stripes. Order of stripes is irrelevant for layout but relevant for\n           * priority when stripe buttons are moved across stripes.\n           * layout is handled by `StyledToolWindowOuterLayout`.\n           */}\n          <StyledToolWindowOuterLayout.LeftStripe>\n            {renderStripe({\n              anchor: \"left\",\n              state: layoutState[\"left\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.LeftStripe>\n          <StyledToolWindowOuterLayout.TopStripe>\n            {renderStripe({\n              anchor: \"top\",\n              state: layoutState[\"top\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.TopStripe>\n          <StyledToolWindowOuterLayout.RightStripe>\n            {renderStripe({\n              anchor: \"right\",\n              state: layoutState[\"right\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.RightStripe>\n          <StyledToolWindowOuterLayout.BottomStripe>\n            {renderStripe({\n              anchor: \"bottom\",\n              state: layoutState[\"bottom\"].stripes,\n            })}\n          </StyledToolWindowOuterLayout.BottomStripe>\n        </MovableToolWindowStripeProvider>\n        {/**\n         * The inner layout of the ToolWindow, including four tool windows and\n         * a main content in the center.\n         */}\n        <StyledToolWindowOuterLayout.InnerView>\n          <ThreeViewSplitter\n            {...outerSplitterProps}\n            innerView={\n              <ThreeViewSplitter\n                innerViewMinSize={mainContentMinWidth}\n                innerView={\n                  <FocusScope ref={mainContentFocusScopeRef}>\n                    {children}\n                  </FocusScope>\n                }\n                {...innerSplitterProps}\n              />\n            }\n          />\n          {undockLayers}\n          {\n            <FloatToolWindows\n              floatWindows={layoutState?.floatWindows}\n              renderToolWindow={renderToolWindow}\n              onBoundsChange={(key, bounds) =>\n                onToolWindowStateChange(\n                  toolWindowsState.setFloatingBound(key, bounds)\n                )\n              }\n            />\n          }\n        </StyledToolWindowOuterLayout.InnerView>\n      </>\n    );\n  };\n\n  return (\n    <StyledToolWindowOuterLayout.Shell\n      {...containerProps}\n      ref={containerRef}\n      /**\n       * Potential refactoring: hideStripes can also be handled by conditionally\n       * rendering tool window bars, instead of considering it as a feature of\n       * StyledToolWindowOuterLayout\n       **/\n      hideStripes={hideToolWindowBars}\n      style={{ height, minHeight, ...containerProps?.style }}\n    >\n      {layoutState && renderInnerLayout(layoutState)}\n    </StyledToolWindowOuterLayout.Shell>\n  );\n});\n","import { RefObject, useEffect } from \"react\";\n\n/**\n * Executes a callback function when focus is lost from the container element. i.e. when the currently focused element\n * was within the container and:\n * - The focus is going to an element outside the container, or\n * - The focus is about to get lost (i.e. go to `document.body`).\n *\n * Note: react-aria's `useFocusWithin` (and it's `onBlurWithin` option) can't be used, since (at least currently) it\n * doesn't cover the scenario where the focus is about to get lost due to the focused element getting unmounted.\n */\nexport function useOnFocusLost(\n  onFocusLost: (args: {\n    focusLosingElement: HTMLElement | null;\n    focusReceivingElement: Element | null;\n  }) => void,\n  containerRef: RefObject<HTMLElement>\n): void {\n  useEffect(() => {\n    const handleBodyFocus = (e: FocusEvent) => {\n      if (\n        e.target instanceof HTMLElement &&\n        containerRef.current?.contains(e.target) &&\n        (!e.relatedTarget || e.relatedTarget instanceof HTMLElement) &&\n        !containerRef.current?.contains(e.relatedTarget)\n      ) {\n        onFocusLost({\n          focusLosingElement: e.target,\n          focusReceivingElement: e.relatedTarget,\n        });\n      }\n    };\n    containerRef.current?.addEventListener(\"focusout\", handleBodyFocus);\n    return () => {\n      containerRef.current?.removeEventListener(\"focusout\", handleBodyFocus);\n    };\n  }, []);\n}\n","import React, { Key, RefObject, useContext, useMemo } from \"react\";\nimport { ToolWindowsProps } from \"../ToolWindows\";\nimport { ToolWindowState, ViewMode, WindowBounds } from \"./ToolWindowsState\";\nimport { Anchor } from \"../utils\";\nimport { useEventCallback } from \"@intellij-platform/core/utils/useEventCallback\";\n\ntype ToolWindowStateContextValue = {\n  state: Readonly<ToolWindowState>;\n  hide: () => void;\n  remove: () => void;\n  blur: () => void;\n  focusMainContent: () => void;\n  moveToSide: (args: { anchor: Anchor; isSplit: boolean }) => void;\n  changeViewMode: (viewMode: ViewMode) => void;\n  stretchWidth: (value: number) => void;\n  stretchHeight: (value: number) => void;\n  setFloatingBounds: (bounds: WindowBounds) => void;\n};\nconst ToolWindowStateContext =\n  React.createContext<ToolWindowStateContextValue | null>(null);\n\n/**\n * Used in a tool window's UI tree, to get access to the tool window state and actions for changing it.\n */\nexport const useToolWindowState = () => {\n  const context = useContext(ToolWindowStateContext);\n  if (!context) {\n    throw new Error(\n      \"useToolWindowContext is meant to be used inside a tool window.\"\n    );\n  }\n  return context;\n};\n\n/**\n * Used in ToolWindows to provide tool window state and necessary actions as a context, which will be accessible\n * within the tool window content tree, via {@link useToolWindowState}\n */\nexport const ToolWindowStateProvider: React.FC<\n  {\n    id: Key;\n    containerRef: RefObject<HTMLElement>;\n    mainContentFocusableRef: RefObject<{ focus: () => void }>;\n  } & Pick<ToolWindowsProps, \"toolWindowsState\" | \"onToolWindowStateChange\">\n> = ({\n  toolWindowsState,\n  containerRef,\n  mainContentFocusableRef,\n  onToolWindowStateChange,\n  id,\n  children,\n}) => {\n  const blur = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.blur(id));\n  });\n  const hide = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.hide(id));\n  });\n  const remove = useEventCallback(() => {\n    onToolWindowStateChange(toolWindowsState.removeFromSidebar(id));\n  });\n  const focusMainContent = useEventCallback(() => {\n    mainContentFocusableRef.current?.focus();\n  });\n  const moveToSide = useEventCallback(\n    (side: { anchor: Anchor; isSplit: boolean }) => {\n      onToolWindowStateChange(toolWindowsState.move(id, side));\n    }\n  );\n  const changeViewMode = useEventCallback((viewMode: ViewMode) => {\n    onToolWindowStateChange(toolWindowsState.changeViewMode(id, viewMode));\n  });\n  const stretchWidth = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchWidth(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const stretchHeight = useEventCallback((value: number) => {\n    const container = containerRef.current;\n    if (!container) {\n      throw new Error(\"Couldn't resize since the container is not present\");\n    }\n    onToolWindowStateChange(\n      toolWindowsState.stretchHeight(\n        id,\n        value,\n        container.getBoundingClientRect()\n      )\n    );\n  });\n  const setFloatingBounds = useEventCallback((bounds: WindowBounds) => {\n    onToolWindowStateChange(toolWindowsState.setFloatingBound(id, bounds));\n  });\n  const contextValue = useMemo((): ToolWindowStateContextValue => {\n    const state = toolWindowsState.windows[id];\n    return {\n      state,\n      hide,\n      blur,\n      remove,\n      focusMainContent,\n      moveToSide,\n      changeViewMode,\n      stretchWidth,\n      stretchHeight,\n      setFloatingBounds,\n    };\n  }, [toolWindowsState, id]);\n  return (\n    <ToolWindowStateContext.Provider value={contextValue}>\n      {children}\n    </ToolWindowStateContext.Provider>\n  );\n};\n","import { clamp, curry, fromPairs, insert, mapObjIndexed, move } from \"ramda\";\nimport { Key } from \"react\";\nimport { Anchor, isHorizontalToolWindow } from \"../utils\";\n\nexport type ViewMode =\n  | \"docked_pinned\"\n  | \"docked_unpinned\"\n  | \"undock\"\n  | \"float\"\n  /**\n   * @deprecated \"window\" ViewMode was initially added following the original impl. It doesn't seem reasonable to\n   * support it though. It's marked as deprecated to be removed in the future.\n   */\n  | \"window\";\n\nexport type WindowBounds = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n/**\n * Data structure for keeping the state of a single tool window. very similar to WindowInfo in Intellij Platform\n *\n * A note about about the data structure:\n * Some fields like `isSplit`, `weight`, `floatingBound` are meaningful only\n * for a subset of viewModes. So it may be tempting to introduce a `viewMode`\n * type which minimally and more accurately describes the information\n * relevant for each viewMode. But it's not structured like that, and it's\n * orthogonal to viewMode, since we want to preserve the relevant information\n * for each viewMode, to be used when the viewMode is changed back.\n *\n * NOTE: consider renaming to `WindowState` to avoid confusion with `ToolWindowsState`\n */\nexport interface ToolWindowState {\n  /**\n   * The order of the tool window in its group. The group is specified by `anchor` and `isSplit`.\n   */\n  order: number;\n  /**\n   * Whether the tool window is visible (open) or not.\n   * NOTE: A maximum of 1 **docked** tool window within the same group (same `anchor` and `isSplit`) can be visible.\n   * You will get a render error in `ToolWindows` component otherwise.\n   */\n  isVisible: boolean;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the primary group, i.e. when\n   * `isSplit` is false\n   */\n  weight: number;\n  /**\n   * Relative size (in the scale of 0-1) of the tool window in its anchor, when rendered in the secondary group. i.e.\n   * when `isSplit` is true.\n   */\n  sideWeight: number;\n  /**\n   * The side of the tool window, being \"left\", \"right\", \"top\" or \"bottom\"\n   */\n  anchor: Anchor;\n  /**\n   * Specifies whether the tool window should be shown in the split view, aka \"Secondary group\".\n   */\n  isSplit: boolean;\n  /**\n   * Tool windows view mode. See {@link ViewMode}\n   *\n   * NOTE: in Intellij Platform, there is a window `type` and also `docked` and\n   * `autoHide`.\n   * keeping one viewMode makes more sense and prevents invalid combinations\n   * like { type: \"window, \"docked\": true}, that would be unnecessarily allowed.\n   */\n  viewMode: ViewMode;\n  /**\n   * Boundaries of the tool window, when rendered in \"float\" view mode.\n   */\n  floatingBounds?: WindowBounds;\n}\n\nconst isDocked = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" ||\n  toolWindow.viewMode === \"docked_pinned\";\n\n/**\n * Determines whether the tool window should hide on focus. In the java implementation, it's a field on window\n * info instead of being a calculated field. We changed that to match viewMode with the 5 view modes that are possible\n * to choose from the UI, eliminating the combinations that are never allowed. If from UX perspective, having window\n * or float mode with autoHide feature is considered valid at some point, we may need to change the implementation\n * to something similar to the original implementation where isAutoHide and viewMode are separate.\n */\nconst isAutoHide = (toolWindow: ToolWindowState) =>\n  toolWindow.viewMode === \"docked_unpinned\" || toolWindow.viewMode === \"undock\";\n\nexport type SideInfo = Pick<ToolWindowState, \"anchor\" | \"isSplit\">;\nexport const areInSameSection = curry(\n  (window1: SideInfo, window2: SideInfo) =>\n    window1.anchor === window2.anchor && window1.isSplit === window2.isSplit\n);\n\nexport const getViewModeType = (viewMode: ViewMode) => {\n  if (viewMode === \"docked_pinned\" || viewMode === \"docked_unpinned\") {\n    return \"docked\";\n  }\n  if (viewMode === \"window\" || viewMode === \"float\") {\n    return \"float\";\n  }\n  return viewMode;\n};\ntype IdToWindowStateMap = Readonly<{\n  [key: string]: Readonly<ToolWindowState>;\n}>;\n\n/**\n * Represents UI state of a bunch of tool windows. What is rendered inside each window or toolbar button is irrelevant.\n *\n * TODO: document pros and cons of these two approaches\n * - Having a class for ToolWindowsState which keeps a readonly mapping of keys to window states.\n * - Having ToolWindowsState as an interface (a mapping from keys to window states), and a bunch of action functions\n *   which accept a window state and some arguments, and return a new window state.\n */\nexport class ToolWindowsState {\n  public readonly lastFocusedKey: Key | null;\n  public readonly removedFromSideBarIds: ReadonlySet<Key>;\n  private readonly layoutToRestore: IdToWindowStateMap;\n  constructor(\n    public readonly windows: IdToWindowStateMap,\n    {\n      lastFocusedKey = null,\n      layoutToRestore = {},\n      removedFromSideBarIds = [],\n    }: {\n      lastFocusedKey?: Key | null;\n      layoutToRestore?: IdToWindowStateMap;\n      removedFromSideBarIds?: Iterable<Key>;\n    } = {}\n  ) {\n    this.lastFocusedKey = lastFocusedKey;\n    this.layoutToRestore = layoutToRestore;\n    this.removedFromSideBarIds = new Set(removedFromSideBarIds);\n    // TODO: instead of keeping a set of removedFromSideBarIds showStripeButton can be a boolean on each window state.\n    //  if we want to avoid the invalid combination of `{ isVisible: true, showStripeButton: false }`, we can have a\n    //  a single property like : visibility: 'open' | 'closed' | 'removed'\n    const invalidWindows = Object.keys(this.windows).filter(\n      (key) =>\n        this.removedFromSideBarIds.has(key) && this.windows[key].isVisible\n    );\n    if (invalidWindows.length > 0) {\n      throw new Error(\n        `Invalid ToolWindowsState. The following windows are set as visible but are removed from the sidebar: ${invalidWindows}`\n      );\n    }\n  }\n\n  hide(targetKey: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow, key) =>\n      key === targetKey\n        ? {\n            ...toolWindow,\n            isVisible: false,\n          }\n        : toolWindow\n    );\n  }\n  hideAll(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) =>\n        getViewModeType(toolWindow.viewMode) === \"float\"\n          ? toolWindow\n          : {\n              ...toolWindow,\n              isVisible: false,\n            },\n      { layoutToRestore: this.windows }\n    );\n  }\n\n  /**\n   * Restores windows to the state before hideAll.\n   */\n  restoreWindows(): ToolWindowsState {\n    return this.mapWindows(\n      (toolWindow, key) => this.layoutToRestore[key] || toolWindow\n    );\n  }\n\n  lastFocused(key: Key): ToolWindowsState {\n    return this.mapWindows((toolWindow) => toolWindow, {\n      lastFocusedKey: key,\n    });\n  }\n\n  show(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const closableViewModes: ViewMode[] = [];\n    if (target.viewMode === \"undock\") {\n      closableViewModes.push(\"undock\");\n    } else if (isDocked(target)) {\n      closableViewModes.push(\"docked_unpinned\", \"docked_pinned\", \"undock\");\n    }\n    return this.mapWindows(\n      (toolWindow, key) => {\n        if (key === targetKey) {\n          return {\n            ...toolWindow,\n            isVisible: true,\n          };\n        }\n        if (\n          toolWindow.isVisible &&\n          areInSameSection(target, toolWindow) &&\n          closableViewModes.includes(toolWindow.viewMode)\n        ) {\n          return { ...toolWindow, isVisible: false };\n        }\n        return toolWindow;\n      },\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds].filter(\n          (key) => key !== targetKey\n        ),\n      }\n    );\n  }\n\n  toggle(targetKey: Key): ToolWindowsState {\n    return this.windows[targetKey]?.isVisible\n      ? this.hide(targetKey)\n      : this.show(targetKey);\n  }\n\n  blur(targetKey: Key): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target || !isAutoHide(target)) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  // TODO: initiate floatingBound when changing viewMode to float or window and there is no previous floatingBound\n  changeViewMode(targetKey: Key, viewMode: ViewMode): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((toolWindow) => {\n      if (toolWindow === target) {\n        return {\n          ...toolWindow,\n          viewMode,\n        };\n      }\n      const viewModeType = getViewModeType(toolWindow.viewMode);\n      if (\n        toolWindow.isVisible &&\n        viewModeType !== \"float\" &&\n        areInSameSection(toolWindow, target) &&\n        viewModeType === getViewModeType(viewMode)\n      ) {\n        return {\n          ...toolWindow,\n          isVisible: false,\n        };\n      }\n      return toolWindow;\n    });\n  }\n\n  move(targetKey: Key, index: number): ToolWindowsState;\n  move(targetKey: Key, side: SideInfo, index?: number): ToolWindowsState;\n  move(\n    targetKey: Key,\n    sideOrIndex: SideInfo | number,\n    index?: number\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const targetSide = typeof sideOrIndex === \"object\" ? sideOrIndex : target;\n    const targetIndex = typeof sideOrIndex === \"number\" ? sideOrIndex : index;\n    const targetSideWindows = Object.entries(this.windows).filter(([, value]) =>\n      areInSameSection(targetSide, value)\n    );\n    const indexInTargetSide = targetSideWindows.findIndex(\n      ([, window]) => window === target\n    );\n    const sortedTargetWindows: Array<[Key, ToolWindowState]> =\n      indexInTargetSide < 0\n        ? insert(\n            targetIndex ?? -1,\n            [targetKey, { ...target, ...targetSide }],\n            targetSideWindows\n          )\n        : move(\n            indexInTargetSide,\n            targetIndex ?? indexInTargetSide,\n            targetSideWindows\n          );\n    const newTargetSideWindows = fromPairs(\n      sortedTargetWindows.map(([key, value], index) => {\n        let newValue = value;\n        if (value.order !== index) {\n          newValue = { ...value, order: index };\n        }\n        const targetViewMode = getViewModeType(target.viewMode);\n        if (\n          key !== targetKey &&\n          target.isVisible &&\n          value.isVisible &&\n          targetViewMode !== \"float\" &&\n          getViewModeType(value.viewMode) === targetViewMode\n        ) {\n          newValue = { ...value, isVisible: false };\n        }\n        return [`${key}`, newValue];\n      })\n    );\n    return this.mapWindows((value, key) => newTargetSideWindows[key] || value);\n  }\n\n  stretchWidth(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"width\");\n  }\n\n  stretchHeight(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.stretch(targetKey, value, containerBounds, \"height\");\n  }\n\n  setFloatingBound(\n    targetKey: Key,\n    floatingBounds: WindowBounds\n  ): ToolWindowsState {\n    return this.update(targetKey, \"floatingBounds\", floatingBounds);\n  }\n\n  removeFromSidebar(targetKey: Key): ToolWindowsState {\n    return this.mapWindows(\n      (state, key) =>\n        key === targetKey\n          ? {\n              ...state,\n              isVisible: false,\n            }\n          : state,\n      {\n        removedFromSideBarIds: [...this.removedFromSideBarIds, targetKey],\n      }\n    );\n  }\n\n  mapWindows(\n    mapFn: (toolWindow: ToolWindowState, key: string) => ToolWindowState,\n    options: ConstructorParameters<typeof ToolWindowsState>[1] = {}\n  ) {\n    return new ToolWindowsState(mapObjIndexed(mapFn, this.windows), {\n      lastFocusedKey: this.lastFocusedKey,\n      layoutToRestore: this.layoutToRestore,\n      removedFromSideBarIds: this.removedFromSideBarIds,\n      ...options,\n    });\n  }\n\n  private update<K extends keyof ToolWindowState>(\n    targetKey: Key,\n    key: K,\n    value: ToolWindowState[K]\n  ) {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    return this.mapWindows((window) => {\n      if (window === target) {\n        return {\n          ...window,\n          [key]: value,\n        };\n      }\n      return window;\n    });\n  }\n\n  private stretch(\n    targetKey: Key,\n    value: number,\n    containerBounds: { width: number; height: number },\n    property: \"width\" | \"height\"\n  ): ToolWindowsState {\n    const target = this.windows[targetKey];\n    if (!target) {\n      return this;\n    }\n    const viewModeType = getViewModeType(target.viewMode);\n    if (viewModeType === \"float\") {\n      return this.mapWindows((window) => {\n        if (window === target) {\n          const currentFloatingBound = window.floatingBounds!;\n          return {\n            ...window,\n            floatingBounds: {\n              ...currentFloatingBound,\n              [property]: currentFloatingBound[property] + value,\n            },\n          };\n        }\n        return window;\n      });\n    }\n    const expectedProperty = isHorizontalToolWindow(target.anchor)\n      ? \"height\"\n      : \"width\";\n    if (expectedProperty !== property) {\n      return this;\n    }\n    const containerSize = containerBounds[property];\n    const newValue = containerSize * target.weight + value;\n    const isNewValueValid = clamp(0, containerSize, newValue) === newValue;\n    if (isNewValueValid) {\n      if (viewModeType === \"docked\") {\n        return this.resizeDock(target.anchor, newValue, containerBounds);\n      } else {\n        return this.resizeUndock(target.anchor, newValue, containerBounds);\n      }\n    }\n    return this;\n  }\n\n  resizeDock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(true, anchor, size, containerBounds);\n  }\n\n  resizeUndock(\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.resizeSide(false, anchor, size, containerBounds);\n  }\n\n  resizeDockSplitView(anchor: Anchor, weight: number): ToolWindowsState {\n    return this.mapWindows((window) => {\n      if (window.anchor === anchor && window.isVisible && isDocked(window)) {\n        return {\n          ...window,\n          sideWeight: window.isSplit ? weight : 1 - weight,\n        };\n      }\n      return window;\n    });\n  }\n\n  private resizeSide(\n    dock: boolean,\n    anchor: Anchor,\n    size: number,\n    containerBounds: { width: number; height: number }\n  ): ToolWindowsState {\n    return this.mapWindows((window) => {\n      const isInResizingView = dock\n        ? isDocked(window)\n        : window.viewMode === \"undock\";\n      if (window.anchor === anchor && isInResizingView && window.isVisible) {\n        const containerSize = !isHorizontalToolWindow(anchor)\n          ? containerBounds.width\n          : containerBounds.height;\n        return {\n          ...window,\n          weight: size / containerSize,\n        };\n      }\n      return window;\n    });\n  }\n}\n\nexport const toolWindowState = ({\n  viewMode = \"docked_pinned\",\n  ...inputs\n}: Partial<ToolWindowState> = {}): ToolWindowState => ({\n  anchor: \"left\",\n  isSplit: false,\n  viewMode: viewMode,\n  order: 1,\n  weight: 0.2,\n  sideWeight: 0.5,\n  isVisible: false,\n  floatingBounds:\n    getViewModeType(viewMode) === \"float\"\n      ? {\n          left: 300,\n          top: 300,\n          width: 600,\n          height: 300,\n        }\n      : undefined,\n  ...inputs,\n});\n","export type Anchor = \"left\" | \"right\" | \"top\" | \"bottom\";\n\nexport const getAnchorOrientation = (\n  anchor: Anchor\n): \"horizontal\" | \"vertical\" =>\n  isHorizontalToolWindow(anchor) ? \"horizontal\" : \"vertical\";\n\nexport const isHorizontalToolWindow = (anchor: Anchor) =>\n  anchor === \"top\" || anchor === \"bottom\";\n\nexport const theOtherSide = (anchor: Anchor) =>\n  ({\n    left: \"right\" as const,\n    right: \"left\" as const,\n    top: \"bottom\" as const,\n    bottom: \"top\" as const,\n  }[anchor]);\n","import React, { RefObject, useEffect, useRef, useState } from \"react\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport { useOverlayMoveHandle } from \"@intellij-platform/core/Overlay\";\nimport { useFocusForwarder } from \"@intellij-platform/core/utils/useFocusForwarder\";\n\nexport function useToolWindow(\n  {\n    containerRef,\n    contentRef,\n    focusableContentRef,\n  }: {\n    containerRef: RefObject<HTMLElement>;\n    contentRef: RefObject<Element>;\n    focusableContentRef: RefObject<{ focus: () => void }>;\n  },\n  { onFocusChange }: { onFocusChange?: (focused: boolean) => void } = {}\n) {\n  const [contentHasFocus, setContentHasFocus] = useState(false);\n  /**\n   * NOTE: useFocusWithin form @react-aria/interactions (at least until 3.5.1) has a couple of problem, because of which\n   * we may need to implement our own version of it.\n   * - It doesn't play nice with FocusScope with `contain` set to true. When something is blurred, FocusScope prevents\n   *   that by restoring focus back immediately. but the blur event is already caught by useFocusWithin. One solution\n   *   would be to change useFocusWithin implementation to ignore these blur events that are immediately followed\n   *   by a focus event that keeps the focus in.\n   * - useFocusWithin has an inconsistent behaviour when it comes to Portals. Since it uses react props for handling\n   *   focus and blur, the [react tree determines event bubbling](https://reactjs.org/docs/portals.html#event-bubbling-through-portals),\n   *   which can be a very nice feature, when an overlay (rendered in a portal) grabs the focus, which should still\n   *   be seen as \"within\". But the problems is that the current implementation uses DOM `.contains(e.relatedTarget)`\n   *   method to determine if focus is no longer within. First of all, using react tree or dom tree to determine \"within\"\n   *   can be seen as an option perhaps. Secondly, it should be consistent on focus and blur.\n   *\n   *   Right now these problems are no big deal. but it may become an issue when portals are used within the content\n   *   of the tool window.\n   *\n   * NOTE: In the original implementation, when a heading toolbar button opens a menu, and focus goes to menu, the\n   * header loses the focus appearance, ant it relies only on content having the focus.\n   */\n  const { focusWithinProps: contentFocusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setContentHasFocus,\n  });\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: onFocusChange,\n  });\n\n  const { toolWindowProps: autoHideProps } = useAutoHide();\n\n  const { focusForwarderProps } = useFocusForwarder({\n    forwardFocus: focusableContentRef.current?.focus,\n    ignoreFocusedDescendant: true,\n  });\n\n  // If there is no focusable content rendered in the tool window, nothing will be autofocused. In that case\n  // we will focus the tool window container itself as a fallback.\n  useEffect(() => {\n    if (\n      !document.activeElement ||\n      !containerRef.current?.contains(document.activeElement)\n    ) {\n      containerRef.current?.focus();\n    }\n  }, []);\n\n  const { moveHandleProps } = useOverlayMoveHandle();\n\n  return {\n    contentHasFocus,\n    toolWindowProps: mergeProps(\n      focusForwarderProps,\n      focusWithinProps,\n      autoHideProps,\n      {\n        tabIndex: -1,\n      }\n    ),\n    toolWindowContentProps: contentFocusWithinProps,\n    toolWindowHeaderProps: moveHandleProps,\n  };\n}\n\n/**\n * Applies the auto hide behaviour of tool window based on view mode information and by handling focus and blur events,\n * on the root tool window element. Returns the necessary props that should be applied to the root tool window element.\n * The implementation is not perfect and may not 100% match the original Intellij Platform implementation.\n * If this focus based implementation for auto hide proves to be fragile and not good enough in future,\n * an alternative approach would be to move auto hide logic to the state management logic as much as possible,\n * and limit the focus based auto-hiding to only when the focus goes within the main content area. That should have\n * less focus-related edge cases.\n * TODO: auto hide behaviour should be moved to the core ToolWindows API. ToolWindows now renders a FocusScope and\n * handles focus events on any tool window, to track last focused tool window.\n */\nfunction useAutoHide() {\n  const { blur } = useToolWindowState();\n  const hideTimeoutId = useRef<number | null>(null);\n  const { focusWithinProps: windowFocusWithinProps } = useFocusWithin({\n    onBlurWithin: (e) => {\n      // setTimeout and windowHasFocusRef is to work around the problem with useFocusWithin, described above.\n      hideTimeoutId.current = window.setTimeout(() => {\n        // Sometimes when the element is blurred, the subsequent focus that is triggered by FocusScope to keep the focus\n        // is a little delayed and therefore after the timeout reaches. It seem to happen only when a non-focusable\n        // area is clicked. We mitigate it by ignoring blur events where nothing is focused. It's not a problem\n        // at least with `DefaultToolWindow` implementation that uses a FocusScope.\n        const isSomethingElseFocused = e.relatedTarget;\n        if (isSomethingElseFocused) {\n          blur();\n        }\n      });\n    },\n    onFocusWithin: () => {\n      if (hideTimeoutId.current !== null) {\n        clearTimeout(hideTimeoutId.current);\n        hideTimeoutId.current = null;\n      }\n    },\n  });\n  return {\n    toolWindowProps: windowFocusWithinProps,\n  };\n}\n","import React from \"react\";\nimport { DividerItem } from \"@intellij-platform/core/Collections\";\nimport { useToolWindowState } from \"@intellij-platform/core/ToolWindows\";\nimport {\n  useAction,\n  useActionGroup,\n} from \"@intellij-platform/core/ActionSystem\";\nimport {\n  ActionItem,\n  ActionsMenu,\n} from \"@intellij-platform/core/ActionSystem/components\";\nimport {\n  MOVE_TO_ACTION_GROUP_ID,\n  TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n  VIEW_MODE_ACTION_GROUP_ID,\n  ViewModeToActionId,\n} from \"./useToolWindowActions\";\nimport {\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\n/**\n * Tool window gear icon menu, with a set of default actions and some extra ones.\n * TODO: add support for extra actions when action system is progressed a little.\n */\nexport function ToolWindowSettingsIconMenu({\n  menuProps,\n}: {\n  menuProps: React.HTMLAttributes<HTMLElement>;\n}) {\n  const { state } = useToolWindowState();\n\n  const viewModeActionGroup = useActionGroup(VIEW_MODE_ACTION_GROUP_ID);\n  const moveToActionGroup = useActionGroup(MOVE_TO_ACTION_GROUP_ID);\n  const resizeActions = useActionGroup(TOOL_WINDOW_RESIZE_ACTION_GROUP_ID);\n  const maximizeAction = useAction(MAXIMIZE_TOOL_WINDOW_ACTION_ID);\n  const removeFromSideBarAction = useAction(\n    REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID\n  );\n  if (\n    !viewModeActionGroup ||\n    !moveToActionGroup ||\n    !resizeActions ||\n    !maximizeAction ||\n    !removeFromSideBarAction\n  ) {\n    throw new Error(\n      \"[ToolWindowSettingsIconMenu]: can't find tool window actions.\"\n    );\n  }\n\n  const gearIconActions: Array<ActionItem> = [\n    viewModeActionGroup,\n    moveToActionGroup,\n    {\n      id: \"resize\",\n      title: \"Resize\",\n      isPopup: true,\n      children: [...resizeActions.children, maximizeAction],\n    },\n    new DividerItem(),\n    removeFromSideBarAction,\n  ];\n  return (\n    <ActionsMenu\n      actions={gearIconActions}\n      menuProps={menuProps}\n      selectedKeys={[ViewModeToActionId[state.viewMode]]}\n    />\n  );\n}\n","import React, { HTMLProps } from \"react\";\nimport { IconButton } from \"@intellij-platform/core/IconButton\";\nimport { Toolbar } from \"@intellij-platform/core/Toolbar/Toolbar\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { MenuTrigger } from \"@intellij-platform/core/Menu/MenuTrigger\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport { StyledHorizontalSeparator } from \"@intellij-platform/core/StyledSeparator\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme/Theme\";\nimport { ToolWindowSettingsIconMenu } from \"./ToolWindowSettingsIconMenu\";\nimport {\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { ActionButton } from \"@intellij-platform/core/ActionSystem/components\";\n\nexport interface ToolWindowHeaderProps\n  extends Omit<HTMLProps<HTMLDivElement>, \"ref\" | \"as\"> {\n  contentHasFocus?: boolean;\n  additionalActions?: React.ReactNode;\n}\n\nconst StyledToolWindowHeader = styled.div<{ active: boolean }>`\n  display: flex;\n  align-items: center;\n  justify-content: end; // to have the content overflow from right, as the toolwindow shrinks. That will keep the left-most buttons in the view\n  padding: 0 2px 0 4px;\n  overflow: hidden; // for the negative margin applied on StyledToolWindowHeaderActions\n  border-bottom: 1px solid\n    ${({ theme }) =>\n      theme.color(\n        \"ToolWindow.Header.borderColor\" as UnknownThemeProp<\"ToolWindow.Header.borderColor\">\n      ) ||\n      theme.color(\"DefaultTabs.borderColor\") ||\n      theme.commonColors.contrastBorder};\n  background: ${({ theme, active }) =>\n    active\n      ? theme.color(\"ToolWindow.Header.background\") ||\n        theme.color(\n          \"ToolWindow.header.active.background\" as UnknownThemeProp<\"ToolWindow.header.active.background\">\n        ) ||\n        \"#E2E6EC\"\n      : theme.color(\"ToolWindow.Header.inactiveBackground\") ||\n        theme.color(\"ToolWindow.Header.background\") ||\n        \"#ECECEC\"};\n`;\n\nconst StyledToolWindowHeaderActions = styled.div`\n  margin-right: -4px;\n`;\n\nconst StyledToolWindowHeaderContent = styled.div`\n  flex: 1;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n`;\n\nexport const DefaultToolWindowHeader: React.FC<ToolWindowHeaderProps> = ({\n  children,\n  additionalActions,\n  contentHasFocus = false,\n  ...otherProps\n}) => {\n  return (\n    <StyledToolWindowHeader active={contentHasFocus} {...otherProps}>\n      <StyledToolWindowHeaderContent>{children}</StyledToolWindowHeaderContent>\n      <StyledToolWindowHeaderActions>\n        <Toolbar>\n          {additionalActions && (\n            <>\n              {additionalActions}\n              <StyledHorizontalSeparator />\n            </>\n          )}\n          <ActionButton actionId={DOCK_TOOL_WINDOW_ACTION_ID} />\n          <MenuTrigger\n            renderMenu={({ menuProps }) => {\n              return <ToolWindowSettingsIconMenu menuProps={menuProps} />;\n            }}\n          >\n            {(props, ref) => (\n              <TooltipTrigger tooltip={<ActionTooltip actionName=\"Options\" />}>\n                <IconButton {...props} ref={ref}>\n                  <PlatformIcon icon=\"general/gearPlain\" />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </MenuTrigger>\n          <ActionButton actionId={HIDE_ACTIVE_WINDOW_ACTION_ID} />\n        </Toolbar>\n      </StyledToolWindowHeaderActions>\n    </StyledToolWindowHeader>\n  );\n};\n","import React, { useContext, useMemo, useRef } from \"react\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { DOMProps } from \"@react-types/shared\";\nimport { styled } from \"@intellij-platform/core/styled\";\nimport {\n  FocusScope,\n  FocusScopeRef,\n} from \"@intellij-platform/core/utils/FocusScope\";\nimport {\n  ActionDefinition,\n  ActionsProvider,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { useToolWindow } from \"./useToolWindow\";\nimport { DefaultToolWindowHeader } from \"./DefaultToolWindowHeader\";\nimport { useToolWindowActions } from \"./useToolWindowActions\";\n\nexport interface DefaultToolWindowProps extends DOMProps {\n  /**\n   * title to be shown on the left side of the tool window header.\n   */\n  headerContent?: React.ReactNode;\n  /**\n   * additional action buttons to be rendered before the default gear and hide buttons.\n   */\n  additionalActions?: React.ReactNode;\n  /**\n   * Actions to be provided in the tool window, in addition to the default tool window actions.\n   */\n  actions?: ActionDefinition[];\n  /**\n   * The title of main part of the tool windows component. Used in tool window actions.\n   * @default \"Editor\"\n   */\n  mainContentTitle?: string;\n  onFocusChange?: (focused: boolean) => void;\n}\n\nconst StyledToolWindowContainer = styled.div`\n  outline: none;\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  width: 100%;\n  flex: 1;\n`;\nconst StyledToolWindowContent = styled.div`\n  flex: 1;\n  overflow: auto;\n`;\n\ninterface DefaultToolWindowContextObj {\n  hasFocus?: boolean;\n}\n\nconst DefaultToolWindowContext =\n  React.createContext<DefaultToolWindowContextObj>({\n    hasFocus: false,\n  });\n\nexport const useDefaultToolWindowContext = () =>\n  useContext(DefaultToolWindowContext);\n/**\n * Default component for rendering the content of a tool window. It supports a header and a scrollable area.\n * The header supports showing a content, and some default+custom actions on the right.\n *\n * @see MultiContentToolWindow\n *\n * Remaining features:\n * - Additional gear menu actions.\n *\n */\nexport const DefaultToolWindow: React.FC<DefaultToolWindowProps> = ({\n  headerContent,\n  children,\n  additionalActions,\n  onFocusChange,\n  actions,\n  mainContentTitle = \"Editor\",\n  ...otherProps\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const contentRef = useRef<HTMLDivElement>(null);\n  const focusableContentRef = useRef<FocusScopeRef>(null);\n  const {\n    // NOTE: we might as well use :focus-within and target StyledToolWindowHeader to set the background, but it's not\n    // a clear improvement.\n    contentHasFocus,\n    toolWindowProps,\n    toolWindowContentProps,\n    toolWindowHeaderProps,\n  } = useToolWindow(\n    { containerRef, contentRef, focusableContentRef },\n    {\n      onFocusChange,\n    }\n  );\n\n  const defaultToolWindowContext = useMemo(\n    () => ({\n      hasFocus: contentHasFocus,\n    }),\n    [contentHasFocus]\n  );\n  const activeToolWindowActionGroup = useToolWindowActions({\n    mainContentTitle,\n  });\n  const allActions = [activeToolWindowActionGroup, ...(actions || [])];\n\n  return (\n    <ActionsProvider actions={allActions}>\n      {({ shortcutHandlerProps }) => (\n        <StyledToolWindowContainer\n          {...mergeProps(\n            toolWindowProps,\n            shortcutHandlerProps,\n            filterDOMProps(otherProps)\n          )}\n          ref={containerRef}\n        >\n          <DefaultToolWindowContext.Provider value={defaultToolWindowContext}>\n            <DefaultToolWindowHeader\n              additionalActions={additionalActions}\n              contentHasFocus={contentHasFocus}\n              {...toolWindowHeaderProps}\n            >\n              {headerContent}\n            </DefaultToolWindowHeader>\n            <StyledToolWindowContent\n              ref={contentRef}\n              {...toolWindowContentProps}\n            >\n              {/**\n               * FIXME: adding `contain` prevents focus from moving to another focus scope both with mouse and keyboard.\n               * If we want to follow the Intellij Platform behaviour exactly, we need a kind of focus containment, where\n               * focus is trapped only for keyboard interaction, and user can still move focus by clicking another scope.\n               * Maybe a custom useFocusContainment hook and a separate option for activating it on our own FocusScope.\n               */}\n              <FocusScope ref={focusableContentRef} autoFocus>\n                {children}\n              </FocusScope>\n            </StyledToolWindowContent>\n          </DefaultToolWindowContext.Provider>\n        </StyledToolWindowContainer>\n      )}\n    </ActionsProvider>\n  );\n};\n","import React from \"react\";\nimport { Shortcut, useAction } from \"@intellij-platform/core/ActionSystem\";\nimport { ActionTooltip, TooltipTrigger } from \"@intellij-platform/core/Tooltip\";\nimport { getActivateToolWindowActionId } from \"./useToolWindowsActions\";\nimport styled from \"styled-components\";\n\nconst getToolWindowNumberFromShortcut = (shortcut: Shortcut): number | null => {\n  const num =\n    shortcut.type === \"keyboard\" &&\n    shortcut.firstKeyStroke.modifiers?.length === 1 &&\n    [\"Alt\", \"Meta\", \"Control\"].includes(shortcut.firstKeyStroke.modifiers[0]) &&\n    shortcut.firstKeyStroke.code.match(/^(Digit|Numpad)([0-9])$/)?.[2];\n  if (num) {\n    return parseInt(num);\n  }\n  return null;\n};\n\nconst StyledWrapper = styled.span`\n  display: flex;\n`;\n\n/**\n * Default UI for the toolbar button (aka. stripe button) of the tool window.\n * - Renders the title and icon for the tool window\n * - Optionally shows the number before the title, if a numeric shortcut is set for the corresponding ActivateToolWindow\n *   action, in the currently applied keymap.\n * - Adds an Action Tooltip\n */\nexport const DefaultToolWindowToolbarButton = ({\n  id,\n  title,\n  icon,\n  showNumber = true,\n}: {\n  id: React.Key;\n  title: string;\n  icon: React.ReactNode;\n  showNumber?: boolean;\n}) => {\n  const action = useAction(getActivateToolWindowActionId(`${id}`));\n\n  const number = action?.shortcuts\n    ?.map(getToolWindowNumberFromShortcut)\n    .find(Number.isInteger);\n  return (\n    <TooltipTrigger\n      tooltip={<ActionTooltip actionName={title} shortcut={action?.shortcut} />}\n    >\n      <StyledWrapper>\n        {icon}\n        &nbsp;\n        {number != null && showNumber ? (\n          <>\n            <u>{number}</u>:&nbsp;\n          </>\n        ) : null}\n        {title}\n      </StyledWrapper>\n    </TooltipTrigger>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { indexBy } from \"ramda\";\nimport { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport {\n  ToolWindowRefValue,\n  ToolWindows,\n  ToolWindowsProps,\n} from \"@intellij-platform/core/ToolWindows\";\nimport { useToolWindowsActions } from \"./useToolWindowsActions\";\nimport { DefaultToolWindowToolbarButton } from \"./DefaultToolWindowToolbarButton\";\nimport { ActionsProvider } from \"@intellij-platform/core/ActionSystem\";\n\ninterface DefaultToolWindow {\n  id: string;\n  title: string;\n  icon: React.ReactNode;\n  content: React.ReactNode;\n}\n\n/**\n * A wrapper around ToolWindows, which provides default actions. It also expects windows to have a `title` and an `icon`\n * instead of more generic `toolbarButton`. The `title` and `icon` are then used in toolbar button, and also in the\n * actions that are dynamically created for each window to toggle/focus the tool window.\n */\nexport const DefaultToolWindows = React.forwardRef(function DefaultToolWindows(\n  {\n    windows: toolWindows,\n    toolWindowsState,\n    showNumbers,\n    ...props\n  }: Omit<ToolWindowsProps, \"windows\"> & {\n    windows: DefaultToolWindow[];\n    showNumbers?: boolean;\n  },\n  forwardedRef: ForwardedRef<ToolWindowRefValue>\n): React.ReactElement {\n  const toolWindowsRef = useObjectRef(forwardedRef);\n  const windowById = indexBy(({ id }) => id, toolWindows);\n  const actions = useToolWindowsActions({\n    toolWindowsRef,\n    toolWindowsState,\n    getPresentation: (id) => windowById[id],\n  });\n  return (\n    <ActionsProvider actions={actions}>\n      {({ shortcutHandlerProps }) => (\n        <ToolWindows\n          {...props}\n          ref={toolWindowsRef}\n          toolWindowsState={toolWindowsState}\n          windows={toolWindows.map(({ id, icon, content, title }) => ({\n            id,\n            toolbarButton: (\n              <DefaultToolWindowToolbarButton\n                id={id}\n                icon={icon}\n                title={title}\n                showNumber={showNumbers}\n              />\n            ),\n            content,\n          }))}\n          containerProps={mergeProps(\n            props.containerProps || {},\n            shortcutHandlerProps\n          )}\n        />\n      )}\n    </ActionsProvider>\n  );\n});\n","import React, { Key, useEffect, useState } from \"react\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport { DefaultToolWindow, DefaultToolWindowProps } from \"./DefaultToolWindow\";\nimport { TabItem } from \"../Tabs/TabItem\";\nimport { usePrevious } from \"../utils/usePrevious\";\nimport { ToolWindowTabs } from \"../Tabs/ToolWindowTabs/ToolWindowTabs\";\n\nexport interface MultiContentToolWindowProps\n  extends Pick<DefaultToolWindowProps, \"additionalActions\"> {\n  /**\n   * List of contents that will be accessible with a list of grouped or ungrouped tabs in the tool window header.\n   */\n  children:\n    | React.ReactElement<MultiContentToolWindowContentProps>[]\n    | React.ReactElement<MultiContentToolWindowContentProps>;\n  /**\n   * Key of currently active content\n   */\n  activeKey?: Key;\n  defaultActiveKey?: Key;\n  onActiveKeyChange?: (key: Key) => void;\n  /**\n   * If true, it groups tabs in a dropdown instead.\n   *\n   * @default false\n   */\n  groupTabs?: boolean;\n  /**\n   * The content shown as the title of the tool window, before content switcher (tabs or dropdown).\n   * For more control over header content, you can pass a function which accepts rendered content switcher,\n   * and then you can compose it with other content as you wish. Use case examples of function variant:\n   * - You want to render a title before the content switcher, and something after the tabs. Like a \"+\" button in\n   *   terminal.\n   * - You want to conditionally move inner-content header up to the tool window header, if there is only one tab. In\n   *   that case you don't need to render the content switcher at all. An example is the new design in the \"Run\"\n   *   tool window.\n   */\n  headerContent?:\n    | React.ReactNode\n    | ((props: { renderedViewSwitcher: React.ReactNode }) => React.ReactNode);\n}\n\n/**\n * Implemented on top of DefaultToolWindow, allows for multiple tabbed content within a tool window.\n * Remaining features:\n * - Although trivial, group tabs action in tool window header gear icon is intentionally left unimplemented for now,\n *   until an increment on action system is done.\n * - Grouped mode is not implemented currently, as we don't have a dropdown component. Though it seems it's just a\n *   MenuTrigger and some trigger with a arrow icon.\n */\nexport const MultiViewToolWindow = ({\n  groupTabs,\n  children,\n  headerContent,\n  ...props\n}: MultiContentToolWindowProps) => {\n  const [isToolWindowFocused, setToolWindowFocused] = useState(false);\n  const [activeKey, setActiveKey] = useControlledState(\n    props.activeKey!,\n    props.defaultActiveKey!,\n    props.onActiveKeyChange!\n  );\n  const contents = React.Children.toArray(children)\n    .filter(\n      (\n        child\n      ): child is React.ReactElement<MultiContentToolWindowContentProps> => {\n        const validChild =\n          React.isValidElement(child) &&\n          child.type === MultiContentToolWindowContent;\n        if (!validChild) {\n          // FIXME: only warn in dev mode\n          console.warn(\n            \"You are not supposed to render anything but MultiContentToolWindowContent inside MultiViewToolWindow. Rendered: \",\n            child\n          );\n        }\n        return validChild;\n      }\n    )\n    // The following map is because of what React.Children.toArray does to keys: https://stackoverflow.com/q/33791401/1493081\n    // It doesn't look like a good idea since and there might be better ways to fix this, or at least make sure it would\n    // work in all cases. FIXME\n    .map((content) => ({ ...content, key: `${content.key}`.slice(2) as Key }));\n  const renderContentSwitcher = () => {\n    if (groupTabs) {\n      console.error(\n        \"groupTab is not supported yet in MultiViewToolWindow. Will fallback to ungrouped tabs\"\n      );\n    }\n    return (\n      <ToolWindowTabs\n        noBorders\n        items={contents}\n        active={isToolWindowFocused}\n        selectedKey={activeKey}\n        onSelectionChange={setActiveKey}\n      >\n        {(item) => <TabItem key={item.key}>{item.props.tabContent}</TabItem>}\n      </ToolWindowTabs>\n    );\n  };\n  const renderedViewSwitcher = renderContentSwitcher();\n\n  // We set the active key if it's not set or is invalid. A common scenario is when tabs are closable, and when the\n  // active tab is closed. You would always want to previous tab to get activated in such cases, instead of the first\n  // one. By having the logic here, there is no need to repeat the same logic in each use case. Although, it can also\n  // be moved into a state management utility for tabs, maybe in the future.\n\n  const keys = contents.map(({ key }) => key);\n  const previousKeys = usePrevious(keys);\n  useEffect(() => {\n    if (!keys.includes(activeKey)) {\n      const newActiveKey = keys[previousKeys.indexOf(activeKey) - 1] ?? keys[0];\n      if (newActiveKey != undefined) {\n        setActiveKey(newActiveKey);\n      }\n    }\n  });\n\n  const activeContent = contents.find(\n    (content) => activeKey == undefined || activeKey === content.key\n  );\n  return (\n    <DefaultToolWindow\n      onFocusChange={setToolWindowFocused}\n      headerContent={\n        typeof headerContent === \"function\" ? (\n          headerContent({ renderedViewSwitcher })\n        ) : (\n          <>\n            {headerContent}\n            {renderedViewSwitcher}\n          </>\n        )\n      }\n      additionalActions={props.additionalActions}\n    >\n      {activeContent?.props.children}\n    </DefaultToolWindow>\n  );\n};\n\nexport interface MultiContentToolWindowContentProps {\n  key: Key;\n  /**\n   * Used in the corresponding tab.\n   */\n  tabContent: React.ReactNode;\n\n  children: React.ReactNode;\n}\n\nconst MultiContentToolWindowContent =\n  ({}: MultiContentToolWindowContentProps) => {\n    throw new Error(\n      \"MultiContentToolWindowContent is not meant to be rendered directly. You should only use it in MultiViewToolWindow\"\n    );\n  };\n\nMultiViewToolWindow.View = MultiContentToolWindowContent;\n","export const HIDE_ALL_WINDOWS_ACTION_ID = \"HideAllWindows\";\nexport const JUMP_TO_LAST_WINDOW_ACTION_ID = \"JumpToLastWindow\";\nexport const HIDE_ACTIVE_WINDOW_ACTION_ID = \"HideActiveWindow\";\nexport const MAXIMIZE_TOOL_WINDOW_ACTION_ID = \"MaximizeToolWindow\";\nexport const DOCK_TOOL_WINDOW_ACTION_ID = \"DockToolWindow\";\nexport const RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID = \"ResizeToolWindowRight\";\nexport const RESIZE_TOOL_WINDOW_LEFT_ACTION_ID = \"ResizeToolWindowLeft\";\nexport const RESIZE_TOOL_WINDOW_TOP_ACTION_ID = \"ResizeToolWindowTop\";\nexport const RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID = \"ResizeToolWindowBottom\";\nexport const DOCK_PINNED_MODE_ACTION_ID = \"DockPinnedMode\";\nexport const DOCK_UNPINNED_MODE_ACTION_ID = \"DockUnpinnedMode\";\nexport const UNDOCK_MODE_ACTION_ID = \"UndockMode\";\nexport const FLOAT_MODE_ACTION_ID = \"FloatMode\";\nexport const WINDOW_MODE_ACTION_ID = \"WindowMode\";\nexport const FOCUS_EDITOR_ACTION_ID = \"FocusEditor\";\nexport const REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID =\n  \"RemoveToolWindowFromSidebar\"; // doesn't show up in keymap. Not sure what the id is in the original impl.\n","import React from \"react\";\nimport {\n  Anchor,\n  isHorizontalToolWindow,\n  useToolWindowState,\n  ViewMode,\n} from \"@intellij-platform/core/ToolWindows\";\nimport { ActionDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport {\n  DOCK_PINNED_MODE_ACTION_ID,\n  DOCK_TOOL_WINDOW_ACTION_ID,\n  DOCK_UNPINNED_MODE_ACTION_ID,\n  FLOAT_MODE_ACTION_ID,\n  FOCUS_EDITOR_ACTION_ID,\n  HIDE_ACTIVE_WINDOW_ACTION_ID,\n  MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n  REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n  RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n  RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n  RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n  UNDOCK_MODE_ACTION_ID,\n  WINDOW_MODE_ACTION_ID,\n} from \"./ToolWindowActionIds\";\nimport { ActionGroupDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport { useCreateDefaultActionGroup } from \"@intellij-platform/core/ActionSystem/components\";\n\n// Resize steps in Intellij Platform is calculated based on the size of a \"W\" character and some\n// configuration (ide.windowSystem.hScrollChars). Although it's technically feasible, it seems not necessary\nconst HEIGHT_RESIZE_STEP = 16 * 5;\nconst WIDTH_RESIZE_STEP = 13 * 5;\n\nexport const anchors: Array<{\n  anchor: Anchor;\n  isSplit: boolean;\n  id: string;\n}> = [\n  { id: \"moveToLeftTop\", anchor: \"left\", isSplit: false },\n  { id: \"moveToLeftBottom\", anchor: \"left\", isSplit: true },\n  { id: \"moveToBottomLeft\", anchor: \"bottom\", isSplit: false },\n  { id: \"moveToBottomRight\", anchor: \"bottom\", isSplit: true },\n  { id: \"moveToRightTop\", anchor: \"right\", isSplit: true },\n  { id: \"moveToRightBottom\", anchor: \"right\", isSplit: false },\n  { id: \"moveToTopRight\", anchor: \"top\", isSplit: true },\n  { id: \"moveToTopLeft\", anchor: \"top\", isSplit: false },\n];\n\nconst getAnchorName = ({\n  anchor,\n  isSplit,\n}: {\n  anchor: Anchor;\n  isSplit: boolean;\n}) =>\n  `${anchor[0].toUpperCase()}${anchor.slice(1)} ${\n    isHorizontalToolWindow(anchor)\n      ? isSplit\n        ? \"Right\"\n        : \"Left\"\n      : isSplit\n      ? \"Bottom\"\n      : \"Top\"\n  }`;\n\nexport const ViewModeToActionId: Record<ViewMode, string> = {\n  docked_pinned: DOCK_PINNED_MODE_ACTION_ID,\n  docked_unpinned: DOCK_UNPINNED_MODE_ACTION_ID,\n  undock: UNDOCK_MODE_ACTION_ID,\n  float: FLOAT_MODE_ACTION_ID,\n  window: WINDOW_MODE_ACTION_ID,\n};\n\nexport const VIEW_MODE_ACTION_GROUP_ID = \"TW.ViewModeGroup\";\nexport const MOVE_TO_ACTION_GROUP_ID = \"TW.MoveToGroup\";\nexport const TOOL_WINDOW_RESIZE_ACTION_GROUP_ID = \"ResizeToolWindowGroup\";\n\nexport function useToolWindowActions({\n  mainContentTitle,\n}: {\n  mainContentTitle: string;\n}): ActionGroupDefinition {\n  const {\n    stretchWidth,\n    stretchHeight,\n    changeViewMode,\n    moveToSide,\n    focusMainContent,\n    hide,\n    remove,\n    state,\n  } = useToolWindowState();\n  const createDefaultActionGroup = useCreateDefaultActionGroup();\n\n  const actions: ActionDefinition[] = [];\n  const activeToolWindowActionGroup = createDefaultActionGroup({\n    id: \"ActiveToolwindowGroup\",\n    title: \"Active Tool Window\",\n    children: actions,\n  });\n  if (!state) {\n    // FIXME: when window is removed, a last render happens with the new ToolWindowsState, which doesn't have state\n    //  for the removed tool window. Need to understand why that happens.\n    return activeToolWindowActionGroup;\n  }\n  const viewModeActionGroup = createDefaultActionGroup({\n    id: VIEW_MODE_ACTION_GROUP_ID,\n    title: \"View Mode\",\n    children: [\n      {\n        id: DOCK_PINNED_MODE_ACTION_ID,\n        title: \"Dock Pinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_pinned\");\n        },\n      },\n      {\n        id: DOCK_UNPINNED_MODE_ACTION_ID,\n        title: \"Dock Unpinned\",\n        actionPerformed: () => {\n          changeViewMode(\"docked_unpinned\");\n        },\n      },\n      {\n        id: UNDOCK_MODE_ACTION_ID,\n        title: \"Undock\",\n        actionPerformed: () => {\n          changeViewMode(\"undock\");\n        },\n      },\n      {\n        id: FLOAT_MODE_ACTION_ID,\n        title: \"Float\",\n        actionPerformed: () => {\n          changeViewMode(\"float\");\n        },\n      },\n      {\n        id: WINDOW_MODE_ACTION_ID,\n        title: \"Window\",\n        actionPerformed: () => {\n          changeViewMode(\"window\");\n        },\n      },\n    ],\n  });\n  const moveToActionGroup = createDefaultActionGroup({\n    id: MOVE_TO_ACTION_GROUP_ID,\n    title: \"Move to\",\n    children: anchors.map(\n      (anchor): ActionDefinition => ({\n        id: `TW.MoveTo.${anchor.id}`,\n        title: getAnchorName(anchor),\n        icon: <PlatformIcon icon={`actions/${anchor.id}`} />,\n        isDisabled:\n          state.anchor === anchor.anchor && state.isSplit === anchor.isSplit,\n        actionPerformed: () => {\n          moveToSide(anchor);\n        },\n      })\n    ),\n  });\n  actions.push(\n    {\n      id: FOCUS_EDITOR_ACTION_ID,\n      title: `Focus ${mainContentTitle}`, // in intellij it says \"Focus Editor\" but it's not generic enough.\n      actionPerformed: () => {\n        focusMainContent();\n      },\n    },\n    {\n      id: HIDE_ACTIVE_WINDOW_ACTION_ID,\n      title: \"Hide\",\n      icon: <PlatformIcon icon=\"general/hideToolWindow\" />,\n      actionPerformed: () => {\n        hide();\n      },\n    },\n    {\n      id: MAXIMIZE_TOOL_WINDOW_ACTION_ID,\n      title: \"Maximize Tool Window\", // Should be \"Restore Tool Window Size if the window is currently maximized\n      actionPerformed: () => {\n        // TODO(release): either remove the action or implement it\n        alert(\"Not implemented\");\n      },\n    },\n    {\n      id: REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID,\n      title: \"Remove from Sidebar\",\n      actionPerformed: () => {\n        remove();\n      },\n    },\n    viewModeActionGroup,\n    moveToActionGroup\n  );\n  if (state.viewMode === \"float\") {\n    actions.push({\n      id: DOCK_TOOL_WINDOW_ACTION_ID,\n      title: \"Dock\",\n      icon: (\n        <PlatformIcon\n          icon={`actions/${\n            anchors.find(\n              ({ anchor, isSplit }) =>\n                anchor === state.anchor && isSplit === state.isSplit\n            )?.id\n          }`}\n        />\n      ),\n      actionPerformed: () => {\n        changeViewMode(\"docked_pinned\");\n      },\n    });\n  }\n  if (state.viewMode !== \"float\" && state.viewMode !== \"window\") {\n    const resizeGroup = createDefaultActionGroup({\n      id: TOOL_WINDOW_RESIZE_ACTION_GROUP_ID,\n      title: \"Resize\",\n      children: [],\n    });\n    if (isHorizontalToolWindow(state.anchor)) {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID,\n        title: \"Stretch to bottom\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"bottom\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_TOP_ACTION_ID,\n        title: \"Stretch to top\",\n        actionPerformed: () => {\n          stretchHeight(\n            state.anchor === \"top\" ? -HEIGHT_RESIZE_STEP : HEIGHT_RESIZE_STEP\n          );\n        },\n      });\n    } else {\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_LEFT_ACTION_ID,\n        title: \"Stretch to left\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"left\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n      resizeGroup.children.push({\n        id: RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID,\n        title: \"Stretch to right\",\n        actionPerformed: () => {\n          stretchWidth(\n            state.anchor === \"right\" ? -WIDTH_RESIZE_STEP : WIDTH_RESIZE_STEP\n          );\n        },\n      });\n    }\n    actions.push(resizeGroup);\n  }\n  return activeToolWindowActionGroup;\n}\n","import React from \"react\";\nimport { ActionDefinition } from \"@intellij-platform/core/ActionSystem\";\nimport {\n  getViewModeType,\n  ToolWindowRefValue,\n  ToolWindowsState,\n} from \"@intellij-platform/core/ToolWindows\";\nimport {\n  HIDE_ALL_WINDOWS_ACTION_ID,\n  JUMP_TO_LAST_WINDOW_ACTION_ID,\n} from \"./ToolWindowActionIds\";\n\ninterface DefaultToolWindowActionsProps {\n  toolWindowsState: Readonly<ToolWindowsState>;\n  toolWindowsRef: React.RefObject<ToolWindowRefValue>;\n  /**\n   * Used when creating ActivateToolWindow action for each tool window.\n   */\n  getPresentation?: (key: React.Key) =>\n    | {\n        title: string;\n        icon: React.ReactNode;\n      }\n    | undefined;\n}\n\nexport const getActivateToolWindowActionId = (id: string) =>\n  `Activate${id.replace(\" \", \"\")}Window`;\n\n/**\n * Provides default tool windows actions:\n * - Hide all tool windows\n * - Activate{id}Window action for each window\n * - Jump to last tool window\n *\n * @see also {@link DefaultToolWindows}\n */\nexport function useToolWindowsActions({\n  toolWindowsState,\n  toolWindowsRef,\n  getPresentation,\n}: DefaultToolWindowActionsProps) {\n  const isAnySideWindowWindowOpen = (state: Readonly<ToolWindowsState>) =>\n    Object.values(state.windows).some(\n      ({ isVisible, viewMode }) =>\n        isVisible && getViewModeType(viewMode) !== \"float\"\n    );\n  const windowIds = Object.keys(toolWindowsState.windows).map(\n    (key) => `${key}`\n  );\n  const activateToolWindowActions = windowIds.map(\n    (id: string, index): ActionDefinition => {\n      const { title, icon } = getPresentation?.(id) || {};\n      return {\n        id: getActivateToolWindowActionId(id),\n        title: title || `${getOrdinal(index)} window`,\n        icon,\n        description: `Activate ${title || getOrdinal(index)} window`,\n        actionPerformed: () => {\n          if (\n            toolWindowsState.windows[id]?.isVisible &&\n            !toolWindowsRef.current?.hasFocus(id)\n          ) {\n            toolWindowsRef.current?.focus(id);\n          } else {\n            toolWindowsRef.current?.changeState((state) => state.toggle(id));\n          }\n        },\n      };\n    }\n  );\n  const actions: ActionDefinition[] = [\n    ...activateToolWindowActions,\n    {\n      id: HIDE_ALL_WINDOWS_ACTION_ID,\n      title: isAnySideWindowWindowOpen(toolWindowsState)\n        ? \"Hide All Windows\"\n        : \"Restore windows\",\n      actionPerformed: () => {\n        toolWindowsRef.current?.changeState((state) => {\n          if (isAnySideWindowWindowOpen(state)) {\n            return state.hideAll();\n          } else {\n            return state.restoreWindows();\n          }\n        });\n        // Because windows have autofocus behaviour, a timeout is set. Not sure how reliable it is.\n        // TODO: replace effect-based auto focus behaviour with something better, maybe controlled by ToolWindows\n        //  component, and when a tool window is opened.\n        setTimeout(() => {\n          toolWindowsRef.current?.focusMainContent();\n        });\n      },\n    },\n    {\n      id: JUMP_TO_LAST_WINDOW_ACTION_ID,\n      title: \"Jump to Last Tool Window\",\n      isDisabled: toolWindowsState.lastFocusedKey == null,\n      actionPerformed: () => {\n        toolWindowsRef.current?.focusLastActiveWindow();\n      },\n    },\n  ];\n  return actions;\n}\n\nfunction getOrdinal(n: number) {\n  let ord = [\"st\", \"nd\", \"rd\"];\n  let exceptions = [11, 12, 13];\n  let nth =\n    ord[(n % 10) - 1] == undefined || exceptions.includes(n % 100)\n      ? \"th\"\n      : ord[(n % 10) - 1];\n  return n + nth;\n}\n","import React, {\n  CSSProperties,\n  MouseEvent,\n  useContext,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nimport { styled, css } from \"../styled\";\nimport {\n  StyledHorizontalSeparator,\n  StyledSeparator,\n  StyledVerticalSeparator,\n} from \"../StyledSeparator\";\nimport { useOverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/useOverflowObserver\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { Overlay, useOverlayPosition } from \"@react-aria/overlays\";\nimport { StyledPopupContainer } from \"@intellij-platform/core/Popup/Popup\";\nimport { mergeProps } from \"@react-aria/utils\";\n\ntype ToolbarBorderProp =\n  | true\n  | \"horizontal\"\n  | \"vertical\"\n  | \"bottom\"\n  | \"top\"\n  | \"left\"\n  | \"right\";\n\nexport type ToolbarProps = {\n  children: React.ReactNode;\n  orientation?: \"vertical\" | \"horizontal\";\n  border?: ToolbarBorderProp;\n  style?: CSSProperties;\n  className?: string;\n} & (\n  | {\n      orientation: \"vertical\";\n    }\n  | {\n      orientation?: \"horizontal\";\n      /**\n       * Defines how the toolbar should handle its children when there is not enough room\n       * to fit all:\n       * - popup: the overflowed children will be hidden behind a show more arrow icon that\n       *   shows the rest of the items in a popup.\n       * - wrap: children will be wrapped so that they fit the available width/height\n       **/\n      overflowBehavior?: \"popup\" | \"wrap\";\n    }\n);\n\nconst borderStyle = ({ border }: { border?: ToolbarBorderProp }) =>\n  border &&\n  css`\n    border-style: solid;\n    border-color: ${({ theme }) => theme.commonColors.borderColor};\n    border-width: ${border === true ? \"1px\" : borderPropToCssProp[border]};\n  `;\n\nconst StyledToolbar = styled.div<{\n  border?: ToolbarBorderProp;\n}>`\n  display: inline-flex;\n  box-sizing: border-box;\n  overflow: hidden;\n  // NOTE: in the original implementation, there is no empty space between buttons, but buttons have kind of an\n  // invisible left padding, which is mouse-intractable, but doesn't visually seem a part of the button.\n  // Although implementable, it didn't seem necessary to follow the exact same thing. Margin should be fine.\n  gap: 4px;\n  ${borderStyle}\n  ${StyledSeparator}:first-child {\n    display: none;\n  }\n  ${StyledSeparator}:last-child {\n    display: none;\n  }\n`;\n\nconst borderPropToCssProp: Record<\n  Exclude<ToolbarBorderProp, boolean>,\n  CSSProperties[\"borderWidth\"]\n> = {\n  top: \"1px 0 0 0\",\n  bottom: \"0 0 1px 0\",\n  right: \"0 1px 0 0\",\n  left: \"0 0 0 1px\",\n  horizontal: \"0 1px\",\n  vertical: \"1px 0\",\n};\n\nconst SIDE_PADDING = 3;\nconst END_PADDING = 4;\n\nconst StyledShowMoreButton = styled.button`\n  all: unset;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  ${borderStyle};\n`;\n\nconst StyledHorizontalToolbar = styled(StyledToolbar)`\n  padding: ${SIDE_PADDING}px ${END_PADDING}px;\n  max-width: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-width: -webkit-fill-available;\n  ${StyledHorizontalSeparator} {\n    margin: 1px 0;\n  }\n  ${StyledShowMoreButton} {\n    margin-right: -${END_PADDING}px;\n  }\n`;\n\nconst StyledVerticalToolbar = styled(StyledToolbar)`\n  flex-direction: column;\n  max-height: 100%;\n  /*noinspection CssInvalidPropertyValue*/\n  max-height: -webkit-fill-available;\n  padding: ${END_PADDING}px ${SIDE_PADDING}px;\n  ${StyledVerticalSeparator} {\n    margin: 0 1px;\n  }\n  ${StyledShowMoreButton} {\n    margin-bottom: -${END_PADDING}px;\n  }\n`;\n\nconst StyledToolbarContent = styled.div<{\n  shouldWrap?: boolean;\n  firstOverflowedIndex: number;\n}>`\n  box-sizing: inherit;\n  display: inherit;\n  flex-direction: inherit;\n  flex-wrap: ${({ shouldWrap }) => (shouldWrap ? \"wrap\" : \"nowrap\")};\n  gap: inherit;\n  max-height: inherit;\n  max-width: inherit;\n  min-height: 0;\n  min-width: 0;\n\n  ${({ firstOverflowedIndex }) =>\n    /**\n     * The hidden styles should be in a way that the hidden element:\n     * - occupies its space in the document layout.\n     * - doesn't capture mouse events. (e.g. a half-overflowing hidden element shouldn't show tooltip)\n     * - remains accessible to screen readers.\n     */\n    css`\n      > ${firstOverflowedIndex === 0\n          ? \"*\"\n          : `:nth-child(${firstOverflowedIndex}) ~ *`} {\n        opacity: 0 !important;\n        pointer-events: none !important;\n      }\n    `}\n`;\n// This can be used in other places if use-cases are raised for keeping orientation in the context.\nconst OrientationContext = React.createContext<\"horizontal\" | \"vertical\">(\n  \"horizontal\"\n);\n\n/**\n * ## Toolbar API/Implementation notes\n *\n * ### Handling Overflow\n *\n * Handling the overflow popup on DOM-level, allows for a simple and flexible implementation that doesn't\n * require any coupling between Toolbar and components like IconButton. Other components can also similarly be\n * rendered inside toolbar without adopting any specific API. It's worth noting that any generic approach based\n * on children react nodes instead of children DOM nodes will have many edge cases and will involve assumptions\n * that will limit the API of toolbar. Also, any approach based on moving dom nodes to the overflow popup will\n * conflict with React owning the DOM.\n *\n * #### Assumption\n *\n * Since the overflow popup renders the same `children`, and items in the toolbar and popup overflow are made\n * visible/hidden based on the index of DOM nodes, it's important than children deterministically results in the\n * same dom structure. i.e. if a component in children randomly renders different number of root dom nodes in\n * each render, it can cause issues in hiding/showing elements.\n *\n * ### Orientation\n * A few reasons for not having separate `HorizontalToolbar` and `VerticalToolbar` components instead of `Toolbar` with\n * `orientation` prop:\n * - From usage side, a single `Toolbar` component is considered a more discoverable API.\n * - Separate components would require abstracting common parts which unnecessarily adds to complexity.\n *   The amount of branching to handle the differences is considered ok, at the current state of the component.\n */\n\n/**\n * @description\n * A toolbar is a container for {@link IconButton} and similar UI components.\n *\n * ## Features:\n * - A toolbar can be horizontal or vertical\n * - When there is not enough space for all children, toolbar shows an arrow icon, which shows the overflowing\n *   items in a popup, upon mouseover.\n *   Optionally, overflow can be wrapped into multiple lines, in horizontal toolbars.\n *\n * @example\n * <Toolbar>\n *   <IconButton aria-label=\"Show Diff\">\n *     <PlatformIcon icon=\"actions/diff\" />\n *   </IconButton>\n *   </Toolbar>\n */\nexport const Toolbar: React.FC<ToolbarProps> = ({\n  border,\n  orientation = \"horizontal\",\n  ...props\n}): React.ReactElement => {\n  const overflowBehavior =\n    orientation === \"horizontal\" && \"overflowBehavior\" in props\n      ? props.overflowBehavior\n      : null;\n  const rootProps = { style: props.style, className: props.className };\n  const ref = useRef<HTMLDivElement>(null);\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const showMoreButtonRef = useRef<HTMLButtonElement>(null);\n  const StyledToolbar =\n    orientation === \"horizontal\"\n      ? StyledHorizontalToolbar\n      : StyledVerticalToolbar;\n  const { overflowedElements } = useOverflowObserver(ref, { threshold: 0.8 });\n  const [isOverflowPopupVisible, setOverflowPopupVisible] = useState(false);\n  const [popupHeight, setPopupHeight] = useState(30);\n  const [firstOverflowedChildIndex, setFirstOverflowedChildIndex] =\n    useState<number>(-1);\n  const firstOverflowedChildRef = useRef<HTMLElement | undefined>();\n\n  useLayoutEffect(() => {\n    if (ref.current) {\n      const childElements = [...ref.current.children].filter(\n        (node): node is HTMLElement => node instanceof HTMLElement\n      );\n      const firstOverflowedChild = childElements.findIndex((child) =>\n        overflowedElements.includes(child)\n      );\n      setFirstOverflowedChildIndex(firstOverflowedChild);\n      firstOverflowedChildRef.current = childElements[firstOverflowedChild];\n    }\n  }, [overflowedElements]);\n\n  useLayoutEffect(() => {\n    if (overlayRef.current && popupHeight !== overlayRef.current.offsetHeight) {\n      setPopupHeight(overlayRef.current.offsetHeight);\n    }\n  });\n\n  const { overlayProps } = useOverlayPosition({\n    isOpen: isOverflowPopupVisible,\n    placement: \"bottom left\",\n    offset:\n      // in lack of positioning options for aligning bottom and left of of the overflow popup with the bottom and left\n      // of the toolbar itself, we have to measure the popup height, and use offset to achieve the same\n      orientation === \"horizontal\"\n        ? -popupHeight + SIDE_PADDING + 1\n        : -popupHeight + 1,\n    crossOffset:\n      orientation === \"horizontal\" ? -(SIDE_PADDING + 2) : -(SIDE_PADDING + 1),\n    containerPadding: 0,\n    shouldFlip: false,\n    targetRef: orientation === \"horizontal\" ? ref : showMoreButtonRef,\n    overlayRef: overlayRef,\n    onClose: () => {\n      setOverflowPopupVisible(false);\n    },\n  });\n\n  const showOverflowPopup = () => {\n    setOverflowPopupVisible(true);\n  };\n\n  const toolbarProps = {\n    onMouseMove: (event: MouseEvent) => {\n      const firstOverflowedElement = firstOverflowedChildRef.current;\n      if (!firstOverflowedElement) {\n        return;\n      }\n      const shouldShow =\n        orientation === \"vertical\"\n          ? event.clientY > firstOverflowedElement.getBoundingClientRect().top\n          : event.clientX > firstOverflowedElement.getBoundingClientRect().left;\n      if (shouldShow !== isOverflowPopupVisible) {\n        setOverflowPopupVisible(shouldShow);\n      }\n    },\n    onMouseLeave: () => {\n      if (isOverflowPopupVisible) {\n        setOverflowPopupVisible(false);\n      }\n    },\n  };\n  const toolbarOverflowPopupProps = {\n    onMouseEnter: () => setOverflowPopupVisible(true),\n    onMouseLeave: () => setOverflowPopupVisible(false),\n  };\n  return (\n    <OrientationContext.Provider value={orientation}>\n      <StyledToolbar\n        border={border}\n        {...mergeProps(rootProps, toolbarProps)}\n        role=\"toolbar\"\n      >\n        <StyledToolbarContent\n          ref={ref}\n          role=\"presentation\"\n          firstOverflowedIndex={firstOverflowedChildIndex}\n          shouldWrap={overflowBehavior === \"wrap\"}\n        >\n          {props.children}\n        </StyledToolbarContent>\n        {overflowedElements.length > 0 && (\n          <StyledShowMoreButton\n            ref={showMoreButtonRef}\n            tabIndex={-1}\n            onMouseEnter={showOverflowPopup}\n          >\n            <PlatformIcon icon=\"ide/link\" />\n          </StyledShowMoreButton>\n        )}\n      </StyledToolbar>\n      {isOverflowPopupVisible && overflowedElements.length > 0 && (\n        // Maybe more accessible to reuse the entire Popup here? it would require more flexible API to handle mouseleave though\n        // Note: we could also render the whole toolbar with the same props and only orientation being overwritten,\n        // but it has the risk of infinite overlay opening in some edge cases, and that level of generality doesn't\n        // seem to be necessary, at least at the moment.\n        <OrientationContext.Provider value=\"horizontal\">\n          <Overlay>\n            <StyledPopupContainer\n              ref={overlayRef}\n              {...mergeProps(overlayProps, toolbarOverflowPopupProps)}\n            >\n              <ToolbarInOverlay\n                border\n                firstVisibleIndex={\n                  orientation === \"vertical\"\n                    ? firstOverflowedChildIndex\n                    : undefined\n                }\n              >\n                {props.children}\n              </ToolbarInOverlay>\n            </StyledPopupContainer>\n          </Overlay>\n        </OrientationContext.Provider>\n      )}\n    </OrientationContext.Provider>\n  );\n};\n\nconst ToolbarInOverlay = styled(StyledHorizontalToolbar)<{\n  firstVisibleIndex?: number;\n}>`\n  ${({ firstVisibleIndex }) =>\n    firstVisibleIndex &&\n    css`\n      ${StyledSeparator}:nth-child(${firstVisibleIndex + 1}) {\n        display: none;\n      }\n      > :not(:nth-child(${firstVisibleIndex}) ~ *) {\n        display: none;\n      }\n    `};\n`;\n\n/**\n * Separator to be used between items in a toolbar.\n */\nexport const ToolbarSeparator = (): React.ReactElement => {\n  const orientation = useContext(OrientationContext);\n  return orientation === \"horizontal\" ? (\n    <StyledHorizontalSeparator />\n  ) : (\n    <StyledVerticalSeparator />\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionHelpTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  actionName: React.ReactNode;\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action Help\"\n * @see {@link ActionTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionHelpTooltip = ({\n  actionName,\n  helpText,\n  shortcut,\n  link,\n  ...tooltipProps\n}: ActionHelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline {...tooltipProps}>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n      <Tooltip.Description>{helpText}</Tooltip.Description>\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface ActionTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  actionName: React.ReactNode;\n  shortcut?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Action\"\n * @see {@link ActionHelpTooltip} {@link HelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const ActionTooltip = ({\n  actionName,\n  shortcut,\n  ...tooltipProps\n}: ActionTooltipProps): JSX.Element => {\n  return (\n    <Tooltip {...tooltipProps}>\n      <Tooltip.Header>\n        {actionName}\n        {shortcut && <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>}\n      </Tooltip.Header>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { Tooltip, TooltipProps } from \"@intellij-platform/core/Tooltip/Tooltip\";\n\nexport interface HelpTooltipProps\n  extends Omit<TooltipProps, \"children\" | \"multiline\"> {\n  helpText: React.ReactNode;\n  shortcut?: React.ReactNode;\n  link?: React.ReactNode;\n}\n\n/**\n * Tooltip of type \"Help\"\n * @see {@link ActionTooltip} {@link ActionHelpTooltip}\n * @see https://jetbrains.github.io/ui/controls/tooltip/#02\n */\nexport const HelpTooltip = ({\n  helpText,\n  shortcut,\n  link,\n  ...tooltipProps\n}: HelpTooltipProps): JSX.Element => {\n  return (\n    <Tooltip multiline {...tooltipProps}>\n      <Tooltip.Header>{helpText}</Tooltip.Header>\n      <div>\n        <Tooltip.Shortcut>{shortcut}</Tooltip.Shortcut>\n      </div>\n      {link && <Tooltip.Link>{link}</Tooltip.Link>}\n    </Tooltip>\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { AriaPositionProps, useOverlayPosition } from \"@react-aria/overlays\";\nimport { TooltipTriggerAndOverlay } from \"./TooltipTriggerAndOverlay\";\n\nexport interface PositionedTooltipTriggerProps\n  extends Omit<AriaTooltipTriggerProps, \"trigger\">,\n    Pick<\n      AriaPositionProps,\n      \"placement\" | \"offset\" | \"crossOffset\" | \"shouldFlip\"\n    > {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  /**\n   * Whether to show the tooltip on trigger's focus. By default, tooltip is shown only when the trigger\n   * is hovered, but it can improve accessibility to show the tooltip on focus as well.\n   */\n  showOnFocus?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. Tooltip will be positioned based relative to the trigger.\n * The default tooltip positioning is based on cursor, which is implemented by {@link TooltipTrigger}\n */\nexport const PositionedTooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset = 8,\n  showOnFocus,\n  ...props\n}: PositionedTooltipTriggerProps): JSX.Element => {\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n  const triggerRef = useRef<HTMLElement>(null);\n\n  const positionAria = useOverlayPosition({\n    ...props,\n    overlayRef,\n    targetRef: triggerRef,\n    offset,\n    isOpen: state.isOpen,\n    onClose: state.close,\n  });\n\n  // A workaround for a mysterious issue that happens only in docusaurus build.\n  // The ref value is not up-to-date, when the effect runs.\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(positionAria.updatePosition);\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      positionAria={positionAria}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      showOnFocus={showOnFocus}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, { ForwardedRef, MutableRefObject, useContext } from \"react\";\nimport { AriaTooltipProps, useTooltip } from \"@react-aria/tooltip\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { PositionAria } from \"@react-aria/overlays\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { WINDOW_SHADOW } from \"@intellij-platform/core/style-constants\";\nimport { TooltipContext } from \"./TooltipContext\";\nimport { TooltipPointer, TooltipPointerPosition } from \"./TooltipPointer\";\nimport {\n  tooltipBackground,\n  tooltipBorderColor,\n  WITH_POINTER_BORDER_RADIUS,\n} from \"./tooltip-styles\";\n\nexport interface TooltipProps extends Omit<AriaTooltipProps, \"isOpen\"> {\n  children: React.ReactNode;\n  multiline?: boolean;\n  className?: string;\n  /**\n   * Whether (and in what position) the arrow pointer should be shown.\n   * When using {@link TooltipTrigger} or {@link PositionedTooltipTrigger}, the position of the pointer is calculated\n   * based on the target element, and a boolean value to define whether the arrow should be shown or not would suffice.\n   *\n   * Tooltips with pointer have slight style difference.\n   * {@see https://www.figma.com/file/nfDfMAdV7j2fnQlpYNAOfP/IntelliJ-Platform-UI-Kit-(Community)?type=design&node-id=15-51&mode=design&t=7PplrxG8ZfXB4hIK-0}\n   *\n   * @example\n   * <Tooltip withPointer />\n   * // shows the pointer in the position controlled by {@link TooltipTrigger} or {@link PositionedTooltipTrigger}\n   * // If there is not `TooltipTrigger` or `PositionedTooltipTrigger`, the arrow is shown on top center by default.\n   *\n   * @example\n   * <Tooltip withPointer={{side: 'top', offset: 30}} />\n   * // shows the pointer on the top side, with horizontal offset of 30px from the left of tooltip, regardless\n   * // of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n   *\n   * @example\n   * <Tooltip withPointer={{side: 'left', offset: -30}} />\n   * // shows the pointer on the left side, with vertidcal offset of 30px from the bottom of the tooltip, regardless\n   * // of whether `TooltipTrigger` or `PositionedTooltipTrigger` is used.\n   */\n  withPointer?: boolean | TooltipPointerPosition;\n}\n\n// Providing default value for paddings, based on intellijlaf theme. In Intellij Platform, themes extend either\n// intellijlaf or darcula. Which means some properties can be omitted in the custom theme, relying on the values\n// in the base theme. This is not how theming works here, at the moment, and there are other similar issues, but\n// this is just a mitigation for one case, spacing in tooltip.\nexport const DEFAULT_TEXT_BORDER_INSETS = \"0.5rem 0.8125rem 0.625rem 0.625rem\";\nexport const DEFAULT_SMALL_TEXT_BORDER_INSETS =\n  \"0.375rem 0.75rem 0.4375rem 0.625rem\";\nconst StyledTooltip = styled.div<{ multiline?: boolean; hasPointer?: boolean }>`\n  box-sizing: content-box;\n  max-width: ${\n    /**\n     * Max width is meant to be set on the multiline description (which is not used in ActionTooltip which would\n     * be right according to [the specs](https://jetbrains.github.io/ui/controls/tooltip/#09)).\n     * But if set on `Tooltip.Description`, title and link can still make the tooltip grow more that the expected max\n     * width. So it makes more sense to set the max width on the container anyway. But since the value of the max width\n     * is meant to be for description we set the box-sizing to \"content-box\" to exclude container's padding in max-width\n     * calculation.\n     */\n    ({ theme, multiline }) =>\n      multiline\n        ? `${\n            theme.value<number>(\n              \"HelpTooltip.maxWidth\" as UnknownThemeProp<\"HelpTooltip.maxWidth\">\n            ) ?? 250\n          }px`\n        : null\n  };\n  white-space: ${({ multiline }) => (!multiline ? \"nowrap\" : null)};\n  display: inline-flex;\n  flex-direction: column;\n  gap: ${({ theme }) =>\n    theme.value<number>(\n      \"HelpToolTip.verticalGap\" as UnknownThemeProp<\"HelpToolTip.verticalGap\">\n    ) ?? 4}px;\n  background: ${tooltipBackground};\n  color: ${({ theme }) =>\n    theme.color(\"ToolTip.foreground\", !theme.dark ? \"#000\" : \"#bfbfbf\")};\n  padding: ${({ theme, multiline }) =>\n    multiline\n      ? theme.inset(\"HelpTooltip.defaultTextBorderInsets\") ||\n        DEFAULT_TEXT_BORDER_INSETS\n      : theme.inset(\"HelpTooltip.smallTextBorderInsets\") ||\n        DEFAULT_SMALL_TEXT_BORDER_INSETS};\n  line-height: 1.2;\n  border-style: solid;\n  border-width: ${({ theme, hasPointer }) =>\n    theme.value<boolean>(\"ToolTip.paintBorder\") || hasPointer ? \"1px\" : \"0px\"};\n  border-color: ${tooltipBorderColor};\n  ${WINDOW_SHADOW};\n  ${({ hasPointer }) =>\n    hasPointer &&\n    css`\n      position: relative; // needed for absolute positioning of the pointer\n      border-radius: ${WITH_POINTER_BORDER_RADIUS}px;\n    `}\n`;\n\nconst StyledShortcut = styled.kbd`\n  all: unset;\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.shortcutForeground\",\n      !theme.dark ? \"#787878\" : \"#999999\"\n    )};\n`;\n\nconst StyledHeader = styled.div`\n  font-size: ${({ theme }) => theme.fontSizeDelta(\"HelpTooltip.fontSizeDelta\")};\n  display: flex;\n  gap: 0.5rem;\n`;\nconst StyledDescription = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"Tooltip.infoForeground\" as UnknownThemeProp<\"Tooltip.infoForeground\">,\n      theme.commonColors.contextHelpForeground\n    )};\n  font-size: ${({ theme }) =>\n    theme.fontSizeDelta(\"HelpTooltip.descriptionSizeDelta\")};\n`;\n\nconst StyledLink = styled.div`\n  color: ${({ theme }) =>\n    theme.color(\n      \"ToolTip.linkForeground\" as UnknownThemeProp<\"ToolTip.linkForeground\">,\n      theme.commonColors.linkForegroundEnabled\n    )};\n  a,\n  [role=\"link\"] {\n    // Maybe target Link instead, without important. It didn't work as expected, in the first try tho.\n    color: inherit !important;\n  }\n`;\n\nexport const placementToPointerSide: Record<\n  PositionAria[\"placement\"],\n  TooltipPointerPosition[\"side\"]\n> = {\n  bottom: \"top\",\n  top: \"bottom\",\n  left: \"right\",\n  right: \"left\",\n  center: \"top\", // doesn't make sense :-?\n};\n/**\n * Implements the UI of a Tooltip. For tooltip to be shown for a trigger, on hover, use {@link TooltipTrigger}.\n * The following components can be used to compose the content of a tooltip.\n * - {@link Tooltip.Header}\n * - {@link Tooltip.Description}\n * - {@link Tooltip.Link}\n * - {@link Tooltip.Shortcut}\n * Prefer using higher-level components like {@link HelpTooltip}, {@link ActionHelpTooltip} or {@link ActionTooltip}.\n * that ensure different pieces of tooltip content follow the\n * [design system recommendation](https://jetbrains.github.io/ui/controls/tooltip)\n *\n *\n * ### Reference:\n * Tooltip, Tooltip.* and TooltipTrigger are corresponding to [HelpTooltip](https://github.com/JetBrains/intellij-community/blob/854daf45b47a6ea9da0348978608bfbfe998d99c/platform/platform-api/src/com/intellij/ide/HelpTooltip.java#L102)\n * in the original impl.\n */\nconst Tooltip = React.forwardRef(function Tooltip(\n  { children, multiline, withPointer, ...props }: TooltipProps,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n): JSX.Element {\n  const ref: MutableRefObject<HTMLDivElement | null> =\n    useObjectRef(forwardedRef);\n  const {\n    state,\n    isInteractive,\n    pointerPositionStyle,\n    placement = \"bottom\",\n  } = useContext(TooltipContext) || {};\n  const { tooltipProps } = useTooltip(\n    props,\n    state\n      ? {\n          ...state,\n          // if the tooltip is not interactive, let it be closed even when it's hovered. That's the according to the reference impl.\n          open: isInteractive ? state?.open : () => {},\n        }\n      : state\n  );\n\n  const { side, offset } =\n    typeof withPointer === \"object\"\n      ? withPointer\n      : { side: placementToPointerSide[placement], offset: undefined };\n\n  return (\n    <StyledTooltip\n      hasPointer={Boolean(withPointer)}\n      multiline={multiline}\n      {...tooltipProps}\n      className={props.className}\n      ref={ref}\n    >\n      {withPointer && (\n        <TooltipPointer\n          tooltipRef={ref}\n          side={side}\n          offset={\n            offset || !pointerPositionStyle\n              ? { type: \"specific\", value: offset }\n              : { type: \"calculated\", value: pointerPositionStyle }\n          }\n        />\n      )}\n      {children}\n    </StyledTooltip>\n  );\n});\n\nconst _Tooltip = Object.assign(Tooltip, {\n  Header: StyledHeader,\n  Shortcut: StyledShortcut,\n  Description: StyledDescription,\n  Link: StyledLink,\n});\n\nexport { _Tooltip as Tooltip };\n","import React, { CSSProperties } from \"react\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { PositionAria } from \"@react-aria/overlays\";\n\ninterface TooltipContextObject {\n  state: TooltipTriggerState;\n  isInteractive: boolean;\n  placement: PositionAria[\"placement\"];\n  pointerPositionStyle?: CSSProperties;\n}\n\nexport const TooltipContext = React.createContext<TooltipContextObject | null>(\n  null\n);\n","import { compose, identity } from \"ramda\";\nimport React, { CSSProperties, RefObject, useEffect, useState } from \"react\";\nimport { css, styled } from \"@intellij-platform/core/styled\";\n\nimport {\n  tooltipBackground,\n  WITH_POINTER_BORDER_RADIUS,\n} from \"./tooltip-styles\";\n\ntype OffsetValue = number | `${number}%`;\nexport type TooltipPointerPosition = {\n  /**\n   * The side of the tooltip the pointer is shown\n   */\n  side: \"top\" | \"bottom\" | \"left\" | \"right\";\n  /**\n   * - When side is \"top\" or \"bottom\":\n   *   Horizontal offset (in px) with respect to the left (or right, if negative) of the tooltip.\n   * - When side is \"left\" or \"right\":\n   *   Vertical offset (in px) with respect to the top (or bottom, if negative) of the tooltip.\n   *\n   * @default: '50%'\n   */\n  offset?: OffsetValue | { value: OffsetValue; invert?: boolean };\n};\n\nconst POINTER_WIDTH = 6;\nconst POINTER_HEIGHT = 9;\nconst POINTER_THICKNESS = 1.5;\nconst TRANSLATE = `translate(-${POINTER_WIDTH}px, -${POINTER_HEIGHT}px)`;\nconst sideStyles = {\n  top: css`\n    top: 0;\n    transform: ${TRANSLATE};\n  `,\n  bottom: css`\n    bottom: 0;\n    transform: rotateX(180deg) ${TRANSLATE};\n  `,\n  left: css`\n    left: 0;\n    transform: rotate(-90deg) ${TRANSLATE};\n  `,\n  right: css`\n    right: 0;\n    transform: rotate(90deg) ${TRANSLATE};\n  `,\n};\nconst StyledTooltipPointer = styled.span<{\n  side: TooltipPointerPosition[\"side\"];\n}>`\n  position: absolute;\n  width: 0;\n  height: 0;\n  ${({ side }) => sideStyles[side]};\n\n  &::before {\n    content: \"\";\n    position: absolute;\n    border-left: ${POINTER_WIDTH + POINTER_THICKNESS}px solid transparent;\n    border-right: ${POINTER_WIDTH + POINTER_THICKNESS}px solid transparent;\n    border-bottom: ${POINTER_HEIGHT + POINTER_THICKNESS}px solid #636569;\n    left: -${POINTER_THICKNESS}px;\n    top: -${POINTER_THICKNESS}px;\n  }\n\n  &::after {\n    content: \"\";\n    position: absolute;\n    border-left: ${POINTER_WIDTH}px solid transparent;\n    border-right: ${POINTER_WIDTH}px solid transparent;\n    border-bottom: ${POINTER_HEIGHT}px solid ${tooltipBackground};\n  }\n`;\n\nfunction normalizeCssValue(value: string | number) {\n  return typeof value === \"number\" ? `${value}px` : value;\n}\n\nconst withMin = (min: number) => (value: string | number | undefined) =>\n  value != undefined ? `max(${min}px, ${normalizeCssValue(value)})` : value;\nconst withMax = (max: number) => (value: string | number | undefined) =>\n  value != undefined ? `min(${max}px, ${normalizeCssValue(value)})` : value;\nconst HEIGHT_OFFSET = POINTER_HEIGHT + WITH_POINTER_BORDER_RADIUS;\nconst WIDTH_OFFSET = POINTER_WIDTH + WITH_POINTER_BORDER_RADIUS;\n\n/**\n * Ensures pointer is not offset too much or too little that would make the arrow appear\n * outside the tooltip boundary.\n */\nfunction limitPointerPositionStyles(\n  { width, height }: { width: number | undefined; height: number | undefined },\n  { top, left, right, bottom }: CSSProperties\n) {\n  const applyVerticalMinMax = compose(\n    height ? withMax(height - HEIGHT_OFFSET) : identity,\n    withMin(HEIGHT_OFFSET)\n  );\n  const applyHorizontalMinMax = compose(\n    width ? withMax(width - WIDTH_OFFSET) : identity,\n    withMin(WIDTH_OFFSET)\n  );\n  return {\n    top: applyVerticalMinMax(top),\n    bottom: applyVerticalMinMax(bottom),\n    left: applyHorizontalMinMax(left),\n    right: applyHorizontalMinMax(right),\n  };\n}\n\nconst getOffsetCssProp = (\n  side: TooltipPointerPosition[\"side\"],\n  invert?: boolean\n): \"top\" | \"bottom\" | \"left\" | \"right\" => {\n  if (side === \"top\" || side === \"bottom\") {\n    return invert ? \"right\" : \"left\";\n  }\n  return invert ? \"bottom\" : \"top\";\n};\n\nfunction pointerPositionToOffsetStyle({\n  side,\n  offset = \"50%\",\n}: TooltipPointerPosition): CSSProperties {\n  const { invert = false, value: offsetValue } =\n    typeof offset === \"object\" ? offset : { invert: false, value: offset };\n  return {\n    [getOffsetCssProp(side, invert)]: offsetValue,\n  };\n}\n\nexport function TooltipPointer({\n  side,\n  offset,\n  tooltipRef,\n}: {\n  side: TooltipPointerPosition[\"side\"];\n  offset:\n    | { type: \"calculated\"; value: CSSProperties }\n    | { type: \"specific\"; value: TooltipPointerPosition[\"offset\"] };\n  tooltipRef: RefObject<HTMLElement>;\n}) {\n  const [size, setSize] = useState<{\n    height: number | undefined;\n    width: number | undefined;\n  }>({ height: undefined, width: undefined });\n  useEffect(() => {\n    const { offsetHeight, offsetWidth } = tooltipRef.current || {};\n    if (offsetHeight != size?.height || offsetWidth != size?.width) {\n      setSize({ height: offsetHeight, width: offsetWidth });\n    }\n  });\n\n  return (\n    <StyledTooltipPointer\n      side={side}\n      style={limitPointerPositionStyles(\n        size,\n        offset.type === \"specific\"\n          ? pointerPositionToOffsetStyle({ side, offset: offset.value })\n          : offset.value\n      )}\n    />\n  );\n}\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { TooltipTriggerProps as AriaTooltipTriggerProps } from \"@react-aria/tooltip\";\nimport { AriaPositionProps } from \"@react-aria/overlays\";\nimport { useTooltipTriggerState } from \"@react-stately/tooltip\";\nimport { useMouseEventOverlayPosition } from \"@intellij-platform/core/utils/useMouseEventOverlayPosition\";\nimport { useTheme } from \"@intellij-platform/core/styled\";\nimport { TooltipTriggerAndOverlay } from \"@intellij-platform/core/Tooltip/TooltipTriggerAndOverlay\";\n\nexport interface TooltipTriggerProps\n  // controlling isOpen state is not supported since positioning is based on cursor.\n  // PositionedTooltipTrigger can be used for controlled isOpen state\n  extends Omit<AriaTooltipTriggerProps, \"isOpen\" | \"defaultOpen\" | \"trigger\"> {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Placement of the tooltip with respect to the cursor\n   * @default \"bottom left\"\n   */\n  placement?: AriaPositionProps[\"placement\"];\n  /**\n   * The additional offset applied along the main axis between the element and its\n   * anchor element.\n   * @default theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20\n   */\n  offset?: number;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  children:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}.\n * Showing tooltip on focus and controlled open state are not supported at the moment, based on how tooltip works in the\n * reference impl, and since tooltip is positioned based on cursor position. Positioning the tooltip based on cursor\n * position requires tooltip to be opened on hover. That's why neither controlling opened state nor showing the tooltip\n * on focus are supported here. {@link PositionedTooltipTrigger} allows for positioning the tooltip with respect to the\n * trigger element, and offers more options.\n */\nexport const TooltipTrigger = ({\n  tooltip,\n  children,\n  /**\n   * ide.tooltip.initialReshowDelay registry key. [Docs](https://jetbrains.github.io/ui/controls/tooltip/#19) says\n   * it's 300 by default, but it's 500 in the code currently.\n   */\n  delay = 500,\n  offset,\n  placement = \"bottom left\",\n  ...props\n}: TooltipTriggerProps): JSX.Element => {\n  const triggerRef = useRef<HTMLElement>(null);\n  const theme = useTheme();\n  const state = useTooltipTriggerState({\n    ...props,\n    delay,\n  });\n\n  const overlayRef = useRef<HTMLDivElement>(null);\n\n  const positionAria = useMouseEventOverlayPosition({\n    overlayRef,\n    isOpen: state.isOpen,\n    placement,\n    shouldFlip: true,\n    offset:\n      offset ?? theme.value<number>(\"HelpTooltip.mouseCursorOffset\") ?? 20,\n  });\n\n  // FIXME: Find the explanation for why it happens, and fix it properly, if it's a legit issue.\n  useEffect(() => {\n    if (state.isOpen) {\n      requestAnimationFrame(() => {\n        positionAria.updatePosition();\n      });\n    }\n  }, [state.isOpen]);\n\n  return (\n    <TooltipTriggerAndOverlay\n      tooltip={tooltip}\n      positionAria={positionAria}\n      trigger={children}\n      state={state}\n      overlayRef={overlayRef}\n      triggerRef={triggerRef}\n      /**\n       * If we want to support showing tooltip on focus, or if we want to allow controlled open state, we should let it\n       * be positioned by the trigger element in that case, rather than mouse position.\n       * One solution would be to use useOverlayPosition as well, and conditionally use the right `overlayProps`, based on\n       * whether the position determined by mouse is within `triggerRef.current?.getBoundingClientRect()`. Another way\n       * (maybe better) would be to have `useMouseEventOverlayPosition` accept `bounds` or `containerBounds`, which if\n       * passed, makes sure the position is kept within that boundary. Outside positions would be mapped to the closest\n       * point on the border of the boundary.\n       */\n      showOnFocus={false}\n      isDisabled={props.isDisabled}\n    />\n  );\n};\n","import React, {\n  HTMLAttributes,\n  ReactElement,\n  RefObject,\n  useState,\n} from \"react\";\nimport { useTooltipTrigger as useAriaTooltipTrigger } from \"@react-aria/tooltip\";\nimport { TooltipTriggerState } from \"@react-stately/tooltip\";\nimport { FocusableProvider } from \"@react-aria/focus\";\nimport { Overlay, PositionAria } from \"@react-aria/overlays\";\nimport { mergeProps, useLayoutEffect } from \"@react-aria/utils\";\n\nimport { TooltipContext } from \"./TooltipContext\";\n\ninterface TooltipTriggerBaseProps {\n  /**\n   * Tooltip content. The value should be an element of type {@link Tooltip}.\n   */\n  tooltip: ReactElement;\n  /**\n   * Either a focusable component, or a render function which accepts trigger props and passes it to some component.\n   */\n  trigger:\n    | React.ReactNode\n    | ((\n        props: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n      ) => React.ReactNode);\n\n  state: TooltipTriggerState;\n\n  showOnFocus?: boolean;\n  positionAria: PositionAria;\n  overlayRef: RefObject<HTMLDivElement>;\n  triggerRef: RefObject<HTMLElement>;\n  isDisabled?: boolean;\n}\n\n/**\n * Sets {@param tooltip} for its {@param children}. It doesn't handle tooltip positioning, and so shouldn't be used\n * directly. {@param tooltipOverlayProps} should be used to apply the intended positioning.\n *\n * TODO: Implement timeout-based auto-hide (https://jetbrains.github.io/ui/controls/tooltip/#19)\n * TODO: shadow\n */\nexport const TooltipTriggerAndOverlay = ({\n  tooltip,\n  trigger,\n  state,\n  overlayRef,\n  triggerRef,\n  showOnFocus,\n  positionAria,\n  ...props\n}: TooltipTriggerBaseProps): JSX.Element => {\n  const [isInteractive, setInteractive] = useState(false);\n  const { triggerProps, tooltipProps } = useTooltipTrigger(\n    props,\n    // In Intellij Platform. The tooltip hides right away. We follow the same, unless the tooltip is interactive.\n    // Maybe something to rethink if it's worth following the reference impl for.\n    { ...state, close: isInteractive ? state.close : () => state.close(true) },\n    triggerRef\n  );\n\n  if (!showOnFocus) {\n    delete triggerProps.onFocus;\n  }\n\n  useLayoutEffect(() => {\n    setInteractive(\n      overlayRef.current?.querySelector(\n        'a, button, [role=\"button\"], [role=link]'\n      ) !== null\n    );\n  });\n  return (\n    <>\n      {normalizeChildren(trigger, { ...triggerProps, ref: triggerRef })}\n      {state.isOpen && !props.isDisabled && (\n        <Overlay>\n          <TooltipContext.Provider\n            value={{\n              state,\n              isInteractive,\n              placement: positionAria.placement,\n              pointerPositionStyle: positionAria.arrowProps.style,\n            }}\n          >\n            <div\n              {...mergeProps(\n                positionAria.overlayProps,\n                // Is it ok to apply tooltip props on this wrapper?\n                tooltipProps\n              )}\n              ref={overlayRef}\n            >\n              {tooltip}\n            </div>\n          </TooltipContext.Provider>\n        </Overlay>\n      )}\n    </>\n  );\n};\n\nfunction normalizeChildren(\n  children: TooltipTriggerBaseProps[\"trigger\"],\n  triggerProps: HTMLAttributes<HTMLElement> & { ref: RefObject<HTMLElement> }\n) {\n  if (typeof children === \"function\") {\n    return children(triggerProps);\n  }\n  if (React.isValidElement(children) && typeof children.type === \"string\") {\n    return React.cloneElement(children, triggerProps);\n  }\n  return <FocusableProvider {...triggerProps}>{children}</FocusableProvider>;\n}\n\n/**\n * A wrapper around react-aria's useTooltipTrigger, adjusting it for Intellij Platform.\n */\nconst useTooltipTrigger: typeof useAriaTooltipTrigger = (props, state, ref) => {\n  const { triggerProps, tooltipProps } = useAriaTooltipTrigger(\n    props,\n    state,\n    ref\n  );\n  // onPointerDown returned from the underlying usePress stops propagation which messes with some usages of tooltip\n  // like in tab or tool window stripe button. We replace onPointerDown handler with a similar handler that closes\n  // the tooltip.\n  triggerProps.onPointerDown = () => {\n    if (!(ref.current instanceof HTMLInputElement)) {\n      state.close(true);\n    }\n  };\n  /**\n   * onMouseDown is preventDefault-ed which interferes with functionality of the tooltip trigger, in use cases like\n   * tool window stripe button. Note that since pointerDown is handled for calling the tooltip trigger's onPressStart\n   * handler (which hides the tooltip), there is no issue in excluding onMouseDown, because it's only used to preventDefault\n   * the event, because of some edge cases focus handling which is not our concern.\n   */\n  delete triggerProps.onMouseDown;\n\n  return {\n    triggerProps,\n    tooltipProps,\n  };\n};\n","import React from \"react\";\nimport { Tooltip } from \"@intellij-platform/core/Tooltip/Tooltip\";\nimport { styled } from \"@intellij-platform/core/styled\";\n\nexport interface ValidationTooltipProps {\n  children: React.ReactNode;\n  /**\n   * @default error\n   */\n  type?: \"error\" | \"warning\";\n}\n\nconst StyledValidationTooltip = styled(Tooltip)`\n  box-shadow: none;\n  padding: 0.25rem 0.5rem; // from ComponentValidator class in the reference impl\n  max-width: ${({ theme }) =>\n    `${theme.value<number>(\"ValidationTooltip.maxWidth\")}px`};\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.errorBackground\")};\n  border: 1px solid\n    ${({ theme }) => theme.color(\"ValidationTooltip.errorBorderColor\")};\n`;\n\nconst StyledWarningValidationTooltip = styled(StyledValidationTooltip)`\n  background: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBackground\")};\n  border-color: ${({ theme }) =>\n    theme.color(\"ValidationTooltip.warningBorderColor\")};\n`;\n\n/**\n * Tooltip to be used for validation error messages\n * @see https://jetbrains.github.io/ui/principles/validation_errors/\n */\nexport const ValidationTooltip = ({\n  type = \"error\",\n  children,\n}: ValidationTooltipProps): JSX.Element => {\n  const Component =\n    type === \"error\" ? StyledValidationTooltip : StyledWarningValidationTooltip;\n  return <Component multiline>{children}</Component>;\n};\n","import { Theme } from \"@intellij-platform/core/Theme\";\n\nexport const WITH_POINTER_BORDER_RADIUS = 4;\nexport const tooltipBackground = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ToolTip.background\", !theme.dark ? \"#f2f2f2\" : \"#3c3f41\");\nexport const tooltipBorderColor = ({ theme }: { theme: Theme }) =>\n  theme.color(\"ToolTip.borderColor\", !theme.dark ? \"#adadad\" : \"#636569\");\n","import React from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeNode } from \"../TreeNode\";\nimport { SpeedSearchItemHighlightsProvider } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const SpeedSearchTreeNode = <T extends object>({\n  item,\n}: {\n  item: Node<T>;\n}) => {\n  return (\n    <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n      <TreeNode key={item.key} item={item} />\n    </SpeedSearchItemHighlightsProvider>\n  );\n};\n","import React, { ForwardedRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { CollectionSpeedSearchContext } from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchStateProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport { useCollectionRef } from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport useForwardedRef from \"@intellij-platform/core/utils/useForwardedRef\";\nimport { StyledTree } from \"../StyledTree\";\nimport { SpeedSearchPopup } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { useTreeState } from \"../useTreeState\";\nimport { TreeProps } from \"../Tree\";\nimport { useTreeVirtualizer } from \"../useTreeVirtualizer\";\nimport { TreeContext } from \"../TreeContext\";\nimport { useSpeedSearchTree } from \"./useSpeedSearchTree\";\nimport { SpeedSearchTreeNode } from \"./SpeedSearchTreeNode\";\n\nexport type SpeedSearchTreeProps<T extends object> = TreeProps<T> &\n  SpeedSearchProps &\n  SpeedSearchStateProps & {\n    /**\n     * Whether speed search popup should not be shown. Useful when speed search state is controlled, and\n     * a search input is rendered outside the tree.\n     */\n    hideSpeedSearchPopup?: boolean;\n  };\n\nexport const SpeedSearchTree = React.forwardRef(\n  <T extends object>(\n    {\n      fillAvailableSpace = false,\n      treeRef,\n      hideSpeedSearchPopup,\n      ...props\n    }: SpeedSearchTreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(\n      { ...props, disallowEmptySelection: !props.allowEmptySelection },\n      treeRef\n    );\n    useCollectionRef(props, state);\n    const ref = useForwardedRef(forwardedRef);\n    const {\n      treeProps,\n      treeContext,\n      speedSearchContextValue,\n      searchPopupProps,\n    } = useSpeedSearchTree({ ...props, isVirtualized: true }, state, ref);\n\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    // NOTE: SpeedSearchPopup can be rendered as a portal with proper positioning (useOverlayPosition), if overflow\n    // issues required it.\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          {!hideSpeedSearchPopup && <SpeedSearchPopup {...searchPopupProps} />}\n          <StyledTree\n            as={Virtualizer}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...treeProps}\n          >\n            {(type: string, item: unknown) => (\n              <SpeedSearchTreeNode\n                key={(item as Node<T>).key}\n                item={item as Node<T>}\n              />\n            )}\n          </StyledTree>\n        </CollectionSpeedSearchContext.Provider>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import { RefObject } from \"react\";\nimport { useKeyboard } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useCollectionSpeedSearch } from \"../../CollectionSpeedSearch/useCollectionSpeedSearch\";\nimport {\n  SpeedSearchProps,\n  SpeedSearchStateProps,\n} from \"../../SpeedSearch/useSpeedSearch\";\nimport { TreeKeyboardDelegate } from \"../TreeKeyboardDelegate\";\nimport { SelectableTreeProps, useSelectableTree } from \"../useSelectableTree\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\n\ninterface UseSpeedSearchTreeProps<T>\n  extends SpeedSearchProps,\n    SpeedSearchStateProps,\n    SelectableTreeProps<T> {}\n\nexport function useSpeedSearchTree<T>(\n  props: UseSpeedSearchTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const {\n    containerProps,\n    keyboardDelegate,\n    selectionManager,\n    speedSearch,\n    ...collectionSpeedSearch\n  } = useCollectionSpeedSearch({\n    ...props,\n    collection: state.collection,\n    selectionManager: state.selectionManager,\n    keyboardDelegate: new TreeKeyboardDelegate(\n      state.collection,\n      state.disabledKeys,\n      ref\n    ),\n    ref,\n    // TODO: maybe allow control over speed search via other props\n  });\n\n  // Speed search is cleared on \"Enter\" key. Alternatively we could wrap onAction and onToggle props\n  // but this seemed more reasonable\n  // NOTE: It may make sense for this behaviour to be pulled up to useCollectionSpeedSearch.\n  const { keyboardProps: speedSearchKeyboardProps } = useKeyboard({\n    onKeyDown: (e) => {\n      if (\n        [\"Enter\", \"ArrowLeft\", \"ArrowRight\"].includes(e.key) &&\n        !hasAnyModifier(e)\n      ) {\n        speedSearch.clear();\n      } else {\n        e.continuePropagation();\n      }\n    },\n  });\n\n  const { treeProps, ...selectableTree } = useSelectableTree(\n    { ...props, keyboardDelegate },\n    { ...state, selectionManager },\n    ref\n  );\n\n  return {\n    treeProps: mergeProps(treeProps, containerProps, speedSearchKeyboardProps),\n    ...collectionSpeedSearch,\n    ...selectableTree,\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { StyledList } from \"@intellij-platform/core/List/StyledList\";\n\nexport const StyledTree = styled(StyledList)`\n  background: ${({ theme }) => theme.color(\"Tree.background\")};\n`;\n","import React, { Key, MutableRefObject } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\n\nexport type TreeContextType<T> = {\n  state: TreeState<T>;\n  focused: boolean;\n  onActionRef: MutableRefObject<((key: Key) => void) | undefined>;\n};\n\nexport const TreeContext = React.createContext<TreeContextType<any> | null>(\n  null\n);\n","import { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key, RefObject } from \"react\";\n\nexport class TreeKeyboardDelegate<T> extends ListKeyboardDelegate<T> {\n  constructor(\n    private collection: Collection<Node<T>>,\n    private disabledKeys: Set<Key>,\n    ref: RefObject<HTMLElement>,\n    collator?: Intl.Collator\n  ) {\n    super(collection, disabledKeys, ref, collator);\n  }\n\n  getKeyLeftOf(key: React.Key): React.Key {\n    const item = this.collection.getItem(key);\n    return item.parentKey ?? this.getKeyAbove(key);\n  }\n\n  getKeyRightOf(key: React.Key): React.Key {\n    return this.getKeyBelow(key);\n  }\n}\n","import { LafIcon } from \"../Icon\";\nimport React, { ComponentProps, useMemo } from \"react\";\nimport { styled } from \"../styled\";\n\nexport const TREE_ICON_SIZE = 16;\nconst StyledTreeNodeIcon = styled(LafIcon)`\n  margin-left: -20px;\n  margin-right: 4px;\n  margin-top: -1px; // the svg path seems to have uneven vertical padding. This is to compensate for that.\n  flex-shrink: 0;\n  align-self: center;\n`;\n\ntype TreeNodeIconProps = ComponentProps<typeof StyledTreeNodeIcon> & {\n  selected: boolean;\n  expanded: boolean;\n};\nconst getIcon = (selected: boolean, expanded: boolean) => {\n  const modifiers = { Selected: selected };\n  if (expanded) {\n    return {\n      themePath: selected ? \"Tree.expandedSelectedIcon\" : \"Tree.expandedIcon\",\n      iconPath: { name: \"treeExpanded\", modifiers },\n    };\n  }\n  if (!expanded) {\n    return {\n      themePath: selected ? \"Tree.collapsedSelectedIcon\" : \"Tree.collapsedIcon\",\n      iconPath: { name: \"treeCollapsed\", modifiers },\n    };\n  }\n};\n\nexport function TreeNodeIcon({\n  selected,\n  expanded,\n  ...props\n}: TreeNodeIconProps) {\n  const icon = useMemo(() => getIcon(selected, expanded), [selected, expanded]);\n  return (\n    <StyledTreeNodeIcon\n      icon={icon?.iconPath}\n      themePath={icon?.themePath}\n      size={TREE_ICON_SIZE}\n      {...props}\n    />\n  );\n}\n","import { Key } from \"react\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { PressProps } from \"@react-aria/interactions\";\n\nexport function useTreeNodeToggleButton<T>({\n  collection,\n  toggleKey,\n  selectionManager,\n  key,\n}: { key: Key } & Pick<\n  TreeState<T>,\n  \"collection\" | \"toggleKey\" | \"selectionManager\"\n>): { treeNodeToggleButtonProps: PressProps } {\n  return {\n    treeNodeToggleButtonProps: {\n      preventFocusOnPress: true,\n      onPress: () => {\n        toggleKey(key);\n\n        // The rest is for deselecting selected descendants and selecting the toggled node, if there\n        // is at least one of such currently selected descendants. This is the exact behavior\n        // of Tree in Intellij Platform, and hence implemented here.\n        const selectedDescendantKeys = [\n          ...selectionManager.selectedKeys,\n        ].filter((key: Key) => {\n          let parentKey = collection.getItem(key)?.parentKey;\n          while (parentKey) {\n            if (parentKey === key) {\n              return true;\n            }\n            parentKey = collection.getItem(parentKey)?.parentKey;\n          }\n          return false;\n        });\n        selectedDescendantKeys.forEach((key) =>\n          selectionManager.toggleSelection(key)\n        );\n        // if any of the descendants are selected\n        if (\n          !selectionManager.isSelected(key) &&\n          selectedDescendantKeys.length > 0\n        ) {\n          selectionManager.toggleSelection(key);\n        }\n      },\n    },\n  };\n}\n","import { styled } from \"@intellij-platform/core/styled\";\nimport { UnknownThemeProp } from \"@intellij-platform/core/Theme\";\nimport { StyledListItem } from \"@intellij-platform/core/List/StyledListItem\";\nimport { TREE_ICON_SIZE } from \"./TreeNodeIcon\";\n\ntype StyledListItemProps = {\n  level: number;\n};\nexport const StyledTreeNode = styled(StyledListItem).attrs<StyledListItemProps>(\n  { role: \"treeitem\" }\n)<StyledListItemProps>`\n  // There are some theme properties for tree node padding (theme.ui.Tree.leftChildIndent and\n  // theme.ui.Tree.leftChildIndent), but they doesn't seem to be applicable.\n  padding-left: ${({ level }) => `${(level + 1) * TREE_ICON_SIZE + 8}px`};\n  padding-right: 0.25rem;\n  ${({ containerFocused, selected, disabled, theme }) => {\n    let backgroundColor;\n    let color = disabled\n      ? theme.color(\"*.disabledForeground\")\n      : theme.color(\n          \"Tree.foreground\" as UnknownThemeProp<\"Tree.foreground\">,\n          theme.commonColors.labelForeground\n        );\n    if (selected) {\n      if (containerFocused) {\n        color = theme.asCurrentForeground(\n          theme.color(\n            \"Tree.selectionForeground\" as UnknownThemeProp<\"Tree.selectionForeground\">\n          ) || theme.commonColors.labelSelectedForeground\n        ) /* Prioritizing \"*.selectionForeground\" over labelSelectedForeground*/;\n        backgroundColor = theme.color(\n          \"Tree.selectionBackground\" as UnknownThemeProp<\"Tree.selectionBackground\">\n        );\n      } else {\n        color = theme.color(\n          \"Tree.selectionInactiveForeground\" as UnknownThemeProp<\"Tree.selectionInactiveForeground\">,\n          color\n        );\n        backgroundColor = theme.color(\n          \"Tree.selectionBackgroundInactive\" as UnknownThemeProp<\"Tree.selectionBackgroundInactive\">\n        );\n      }\n    }\n    return {\n      backgroundColor,\n      color,\n    };\n  }}\n`;\n","import { usePress } from \"@react-aria/interactions\";\nimport { Node } from \"@react-types/shared\";\nimport React, { useContext, useRef } from \"react\";\nimport { ItemStateContext } from \"../Collections/ItemStateContext\";\nimport { TreeNodeIcon } from \"./TreeNodeIcon\";\nimport { useTreeNode } from \"./useTreeNode\";\nimport { useTreeNodeToggleButton } from \"./useTreeNodeToggleButton\";\nimport { TreeContext } from \"./TreeContext\";\nimport { StyledTreeNode } from \"@intellij-platform/core/Tree/StyledTreeNode\";\n\ntype TreeNodeProps<T> = {\n  item: Node<T>;\n  showAsFocused?: boolean;\n};\n\nexport function TreeNode<T>({ item }: TreeNodeProps<T>) {\n  const ref = useRef(null);\n  const {\n    state: {\n      collection,\n      selectionManager,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n    },\n    focused: containerFocused,\n    onActionRef: { current: onAction },\n  } = useContext(TreeContext)!;\n\n  const isSelected = selectionManager.isSelected(item.key);\n  const expanded = expandedKeys.has(item.key);\n  const isDisabled = disabledKeys.has(item.key);\n\n  const { pressProps: togglePressProps } = usePress({\n    ...useTreeNodeToggleButton({\n      key: item.key,\n      collection,\n      selectionManager,\n      toggleKey,\n    }).treeNodeToggleButtonProps,\n    isDisabled,\n  });\n\n  const { treeNodeProps } = useTreeNode({\n    item,\n    ref,\n    toggleKey,\n    onAction,\n    selectionManager,\n    disabled: isDisabled,\n  });\n\n  /**\n   * NOTE: TreeNode intentionally is not designed in a recursive way for two main reasons:\n   * - Performance\n   * - Better support for virtualization\n   * So instead of rendering TreeNode for childNodes, if the node is expanded, we expect parent\n   * to render children. It's not a layout issue since we don't need any nesting in terms of\n   * layout of nested items. In terms of layout, a tree will be rendered similar to a flat list,\n   * but with more indentation for nested nodes.\n   */\n  return (\n    <>\n      <StyledTreeNode\n        ref={ref}\n        {...treeNodeProps}\n        containerFocused={containerFocused}\n        disabled={isDisabled}\n        selected={isSelected}\n        aria-disabled={isDisabled}\n        aria-selected={isSelected}\n        level={item.level}\n      >\n        {[...item.childNodes].length > 0 && (\n          <TreeNodeIcon\n            selected={isSelected}\n            expanded={expanded}\n            {...togglePressProps}\n          />\n        )}\n        <ItemStateContext.Provider\n          value={{\n            isDisabled,\n            isSelected,\n            isContainerFocused: containerFocused,\n            node: item,\n          }}\n        >\n          {item.rendered}\n        </ItemStateContext.Provider>\n      </StyledTreeNode>\n    </>\n  );\n}\n","import { usePress } from \"@react-aria/interactions\";\nimport { useSelectableItem } from \"@intellij-platform/core/selection\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { Node } from \"@react-types/shared\";\nimport { Key, RefObject } from \"react\";\n\nexport function useTreeNode<T>({\n  item,\n  ref,\n  selectionManager,\n  disabled,\n  toggleKey,\n  onAction,\n}: {\n  item: Node<T>;\n  ref: RefObject<HTMLElement>;\n  disabled: boolean;\n  toggleKey: (key: Key) => void;\n  onAction?: (key: Key) => void;\n  selectionManager: SelectionManager;\n}) {\n  const {\n    pressProps: { onKeyDown, ...pressProps },\n  } = usePress({\n    ...useSelectableItem({\n      key: item.key,\n      ref,\n      selectionManager,\n      isVirtualized: false,\n    }).itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  const onDoubleClick = () => {\n    if ([...item.childNodes].length > 0) {\n      toggleKey(item.key);\n    } else {\n      onAction?.(item.key);\n    }\n  };\n  const ariaProps = {\n    role: \"treeitem\",\n  };\n\n  return {\n    treeNodeProps: mergeProps(pressProps, { onDoubleClick }, ariaProps),\n  };\n}\n","import React, { Key, RefObject, useMemo, useState } from \"react\";\nimport {\n  DOMProps,\n  KeyboardDelegate,\n  KeyboardEvent,\n  Node,\n} from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { useFocusWithin, useKeyboard } from \"@react-aria/interactions\";\nimport { filterDOMProps, mergeProps } from \"@react-aria/utils\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"@intellij-platform/core/selection\";\nimport { TreeKeyboardDelegate } from \"./TreeKeyboardDelegate\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeContextType } from \"./TreeContext\";\nimport { hasAnyModifier } from \"@intellij-platform/core/utils/keyboard-utils\";\nimport { FocusEvents } from \"@react-types/shared/src/events\";\nimport { FocusStrategy } from \"@react-types/shared/src/selection\";\n\nexport interface SelectableTreeProps<T>\n  extends DOMProps,\n    Omit<FocusEvents, \"onFocusChange\"> {\n  isVirtualized?: boolean;\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Called when the action associated with a leaf tree node should be taken.\n   * The exact UI interaction is abstracted away, but it's either Enter key or double click.\n   */\n  onAction?: (key: Key) => void;\n  onNodeKeyDown?: (event: KeyboardEvent, node: Node<T>) => void;\n\n  allowEmptySelection?: boolean;\n\n  autoFocus?: boolean | FocusStrategy;\n\n  showAsFocused?: boolean;\n}\n\n/**\n * NOTE: at the time of writing this hook, react-aria didn't have support for Tree. When useTree is implemented in\n * react-aria, it makes sense to refactor this and use that. There will still be something on top of it here.\n */\nexport function useSelectableTree<T>(\n  {\n    onAction,\n    onFocus,\n    onBlur,\n    autoFocus,\n    showAsFocused,\n    ...props\n  }: SelectableTreeProps<T>,\n  state: TreeState<T>,\n  ref: RefObject<HTMLElement>\n) {\n  const domProps = filterDOMProps(props);\n  const collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n\n  const [focused, setFocused] = useState(false);\n  const {\n    collectionProps: {\n      // preventDefault in onMouseDown prevents collection from getting focused.\n      // Maybe it should be removed from useSelectableCollection, now that it lives here\n      onMouseDown,\n      onKeyDown: selectionKeyDown,\n      ...collectionProps\n    },\n  } = useSelectableCollection({\n    ref,\n    selectionManager: state.selectionManager,\n    disallowEmptySelection: !props.allowEmptySelection,\n    selectOnFocus: true,\n    autoFocus,\n    keyboardDelegate: useMemo(\n      () =>\n        props.keyboardDelegate ||\n        new TreeKeyboardDelegate(\n          state.collection,\n          state.disabledKeys,\n          ref,\n          collator\n        ),\n      [state.collection, state.disabledKeys, props.keyboardDelegate]\n    ),\n  });\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  useCollectionAutoScroll(\n    {\n      isVirtualized: props.isVirtualized,\n      selectionManager: state.selectionManager,\n    },\n    ref\n  );\n\n  const onKeyDown = (event: KeyboardEvent) => {\n    const focusedKey = state.selectionManager.focusedKey;\n    if (focusedKey == null) {\n      event.continuePropagation();\n      return;\n    }\n    const item = state.collection.getItem(focusedKey);\n    const isExpandable = item.hasChildNodes;\n    const expanded = state.expandedKeys.has(focusedKey);\n    const isDisabled = state.disabledKeys.has(focusedKey);\n    if (isDisabled) {\n      event.continuePropagation();\n      return;\n    }\n\n    props?.onNodeKeyDown?.(event, item);\n\n    const shouldToggle =\n      !hasAnyModifier(event) &&\n      (event.key === \"Enter\" ||\n        (event.key === \"ArrowLeft\" && expanded) ||\n        (event.key === \"ArrowRight\" && !expanded));\n\n    if (isExpandable && shouldToggle) {\n      event.preventDefault();\n      state.toggleKey(focusedKey);\n    } else if (event.key === \"Enter\") {\n      onAction?.(focusedKey);\n    } else {\n      // selectionKeyDown currently doesn't report back if it handled the event or not. We could have conditionally\n      // continued propagation if the event was not handled. Then we could change Speed Search impl to only handle\n      // inputs when the propagation is not prevented.\n      // Also, selectionKeyDown is not accurate in handling actions like \"select all\". e.g. it takes 'cmd+shift+a' too,\n      // as select all which can conflict with action system. So we don't call it if there are multiple modifiers.\n      const hasAtMostOneModifier =\n        [event.metaKey, event.ctrlKey, event.shiftKey, event.altKey].filter(\n          (i) => i\n        ).length < 2;\n      if (hasAtMostOneModifier) {\n        selectionKeyDown?.(event);\n      }\n      event.continuePropagation();\n    }\n  };\n  const { keyboardProps } = useKeyboard({\n    onKeyDown,\n  });\n\n  //////////////////////////////// providing context value ////////////////////////////////\n  const onActionRef = useLatest(onAction);\n\n  const {\n    selectionManager,\n    collection,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n  } = state;\n  const treeContext = useMemo<TreeContextType<T>>(\n    () => ({\n      state: {\n        collection,\n        selectionManager,\n        expandedKeys,\n        disabledKeys,\n        toggleKey,\n      },\n      focused: Boolean(focused || showAsFocused),\n      onActionRef,\n    }),\n    [\n      selectionManager,\n      collection,\n      expandedKeys,\n      disabledKeys,\n      toggleKey,\n      focused,\n      showAsFocused,\n      onActionRef,\n    ]\n  );\n  ////////////////////////////////////////////////////////////////////////////////////////\n\n  return {\n    // order of merging here is important. navigation handling should precede selection handling\n    treeProps: mergeProps(\n      focusWithinProps,\n      collectionProps,\n      keyboardProps,\n      domProps,\n      { onFocus, onBlur, role: \"tree\" }\n    ),\n    treeContext,\n    focused,\n  };\n}\n","//@ts-nocheck\n/**\n * Not exported from @react-stately/tree, but needed in the custom implementation of useTreeState\n */\n\nimport { Key } from \"react\";\nimport { Collection, Node } from \"@react-types/shared\";\n\nexport class TreeCollection<T> implements Collection<Node<T>> {\n  private keyMap: Map<Key, Node<T>> = new Map();\n  private iterable: Iterable<Node<T>>;\n  private firstKey: Key;\n  private lastKey: Key;\n\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys?: Set<Key> } = {}\n  ) {\n    this.iterable = nodes;\n    expandedKeys = expandedKeys || new Set();\n\n    let visit = (node: Node<T>) => {\n      this.keyMap.set(node.key, node);\n\n      if (\n        node.childNodes &&\n        (node.type === \"section\" || expandedKeys.has(node.key))\n      ) {\n        for (let child of node.childNodes) {\n          visit(child);\n        }\n      }\n    };\n\n    for (let node of nodes) {\n      visit(node);\n    }\n\n    let last: Node<T>;\n    let index = 0;\n    for (let [key, node] of this.keyMap) {\n      if (last) {\n        last.nextKey = key;\n        node.prevKey = last.key;\n      } else {\n        this.firstKey = key;\n        node.prevKey = undefined;\n      }\n\n      if (node.type === \"item\") {\n        node.index = index++;\n      }\n\n      last = node;\n\n      // Set nextKey as undefined since this might be the last node\n      // If it isn't the last node, last.nextKey will properly set at start of new loop\n      last.nextKey = undefined;\n    }\n\n    this.lastKey = last?.key;\n  }\n\n  *[Symbol.iterator]() {\n    yield* this.iterable;\n  }\n\n  get size() {\n    return this.keyMap.size;\n  }\n\n  getKeys() {\n    return this.keyMap.keys();\n  }\n\n  getKeyBefore(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.prevKey : null;\n  }\n\n  getKeyAfter(key: Key) {\n    let node = this.keyMap.get(key);\n    return node ? node.nextKey : null;\n  }\n\n  getFirstKey() {\n    return this.firstKey;\n  }\n\n  getLastKey() {\n    return this.lastKey;\n  }\n\n  getItem(key: Key) {\n    return this.keyMap.get(key);\n  }\n\n  at(idx: number) {\n    const keys = [...this.getKeys()];\n    return this.getItem(keys[idx]);\n  }\n}\n","import { Node } from \"@react-types/shared\";\nimport { Key } from \"react\";\n\n/**\n * given a node, returns keys of all consecutive single children\n */\nexport function getSingleChildrenKeys<T>(\n  node: Node<T> | null | undefined\n): Key[] {\n  return getSingleChildrenKeysRecursive(node, []);\n}\n\nfunction getSingleChildrenKeysRecursive<T>(\n  node: Node<T> | null | undefined,\n  previousKeys: Key[]\n): Key[] {\n  if (!node) {\n    return [];\n  }\n  const childNodesIterator: Iterator<\n    Node<T>,\n    Node<T> | undefined\n  > = node.childNodes[Symbol.iterator]();\n  const { value: firstChild, done } = childNodesIterator.next();\n  const noMoreChildren = done || childNodesIterator.next().value == null;\n  if (firstChild != null && noMoreChildren && isExpandable(firstChild)) {\n    return getSingleChildrenKeysRecursive(\n      firstChild,\n      previousKeys.concat((firstChild as Node<T>).key)\n    );\n  }\n  return previousKeys;\n}\n\nconst isExpandable = <T>(node: Node<T>) =>\n  node.hasChildNodes || !isEmptyIterable(node.childNodes);\n\nfunction isEmptyIterable(iterable: Iterable<unknown> | undefined | null) {\n  for (const _ of iterable || []) {\n    // eslint-disable-line no-unused-vars, no-unreachable-loop\n    return false;\n  }\n  return true;\n}\n","import {\n  MultipleSelectionState,\n  SelectionManager,\n  SelectionManagerOptions,\n} from \"@react-stately/selection\";\nimport { Collection, Node } from \"@react-types/shared\";\nimport React, { Key } from \"react\";\n\nexport class TreeSelectionManager extends SelectionManager {\n  private readonly collection: Collection<Node<unknown>>;\n\n  constructor(\n    collection: Collection<Node<unknown>>,\n    state: MultipleSelectionState,\n    options?: SelectionManagerOptions\n  ) {\n    super(collection, state, options);\n    this.collection = collection;\n  }\n\n  expandSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { expandKeys } = this.getExpandAndShrinkKeys(node);\n      if (expandKeys.length > 0) {\n        this.setSelectedKeys([...this.selectedKeys, ...expandKeys]);\n      }\n    }\n  }\n  shrinkSelection() {\n    if (this.focusedKey) {\n      const node = this.collection.getItem(this.focusedKey);\n      const { shrinkKeys } = this.getExpandAndShrinkKeys(node);\n      if (shrinkKeys.length > 0) {\n        this.setSelectedKeys(\n          [...this.selectedKeys].filter((key) => !shrinkKeys.includes(key))\n        );\n      }\n    }\n  }\n\n  private getExpandAndShrinkKeys(node: Node<unknown>) {\n    return this.recursivelyGetExpandAndShrinkKeys(\n      node,\n      [...this.collection.getKeys()],\n      null\n    );\n  }\n  /**\n   * Starting from a node, traverses the tree up, until it reaches the root of the fully selected subtree that includes\n   * the starting node. The root itself may or may not be selected. Returns:\n   * - keys to be added to selection, when expanding selection\n   * - keys to be removed from selection, when shrinking selection\n   */\n  private recursivelyGetExpandAndShrinkKeys(\n    node: Node<unknown>,\n    keys: Array<Key>,\n    previousChild: Key | null\n  ): { expandKeys: Key[]; shrinkKeys: Key[] } {\n    const parent =\n      node && node.parentKey ? this.collection.getItem(node.parentKey) : null;\n    const newKeys = keys.filter((key) => key !== previousChild);\n    const parentDescendants = parent\n      ? getAllDescendants(parent, newKeys).map(({ key }) => key)\n      : this.getAllRoots().flatMap((key) =>\n          key !== node.key\n            ? getAllDescendants(this.collection.getItem(key), newKeys)\n                .map(({ key }) => key)\n                .concat(key)\n            : []\n        );\n    if (parent && parentDescendants.every((key) => this.isSelected(key))) {\n      return this.recursivelyGetExpandAndShrinkKeys(parent, keys, node.key);\n    }\n    const descendants = getAllDescendants(\n      node,\n      keys.filter((key) => key !== previousChild)\n    ).map(({ key }) => key);\n\n    return {\n      expandKeys: descendants.some((key) => !this.isSelected(key))\n        ? descendants\n        : !this.isSelected(node.key)\n        ? [node.key]\n        : parentDescendants,\n      shrinkKeys:\n        parentDescendants.length > 0 &&\n        parentDescendants.every((key) => this.isSelected(key))\n          ? parentDescendants\n          : this.isSelected(node.key) && previousChild\n          ? [node.key]\n          : descendants.filter((key) => this.isSelected(key)),\n    };\n  }\n\n  private getAllRoots() {\n    return [...this.collection.getKeys()].filter(\n      (key) => this.collection.getItem(key).parentKey == null\n    );\n  }\n}\n\nfunction getAllDescendants<T>(\n  node: Node<T>,\n  stopKeys: Array<React.Key>\n): Node<T>[] {\n  const childNodes = (node.hasChildNodes ? [...node.childNodes] : []).filter(\n    (node) => stopKeys.includes(node.key)\n  );\n  return node.hasChildNodes\n    ? childNodes.concat(\n        childNodes.map((node) => getAllDescendants(node, stopKeys)).flat()\n      )\n    : [];\n}\n","import { Collection, Node } from \"@react-types/shared\";\nimport { TreeProps as _TreeProps, TreeState } from \"@react-stately/tree\";\nimport {\n  TreeRefValue,\n  useTreeRef,\n} from \"@intellij-platform/core/Tree/useTreeRef\";\nimport { ForwardedRef, Key, useEffect, useMemo } from \"react\";\nimport { useMultipleSelectionState } from \"@react-stately/selection\";\nimport { useCollection } from \"@react-stately/collections\";\nimport { useControlledState } from \"@react-stately/utils\";\nimport {\n  CollectionCacheInvalidationProps,\n  useCollectionCacheInvalidation,\n} from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport { TreeCollection as _TreeCollection } from \"./__copied__TreeCollection\";\nimport { getSingleChildrenKeys } from \"./getSingleChildrenKeys\";\nimport { TreeSelectionManager } from \"@intellij-platform/core/Tree/TreeSelectionManager\";\nimport { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport class TreeCollection<T> extends _TreeCollection<T> {\n  public readonly rootKeys: Key[];\n  constructor(\n    nodes: Iterable<Node<T>>,\n    { expandedKeys }: { expandedKeys: Set<Key> }\n  ) {\n    super(nodes, { expandedKeys });\n    this.rootKeys = Array.from(nodes).map(({ key }) => key);\n  }\n\n  getAllExpandableKeys(): Set<Key> {\n    const rootNodes = this.rootKeys\n      .map((key) => this.getItem(key))\n      .filter(notNull);\n    return this.recursivelyAddExpandableKeys(rootNodes, new Set<Key>());\n  }\n\n  private recursivelyAddExpandableKeys(\n    nodes: Iterable<Node<T>>,\n    result: Set<Key>\n  ) {\n    for (const node of nodes) {\n      if (node?.hasChildNodes) {\n        result.add(node.key);\n        this.recursivelyAddExpandableKeys(node.childNodes, result);\n      }\n    }\n    return result;\n  }\n}\nexport interface TreeProps<T>\n  extends _TreeProps<T>,\n    CollectionCacheInvalidationProps {\n  childExpansionBehaviour?: \"multi\" | \"single\";\n}\n/**\n * Provides state management for tree-like components. Handles building a collection\n * of items from props, item expanded state, and manages multiple selection state.\n *\n * Similar to (and initially copied from) useTreeState from @react-stately/tree, but with the following changes:\n * - Supports exposing some imperative API via ref.\n *   Could be done via a wrapper too.\n * - Different onToggle implementation with two adjustments to match Intellij Platform:\n *   - Collapsing a key collapses all descendants as well.\n *   - Expanding a single-child node will recursively expand all single-child descendants.\n *   Couldn't be done with a wrapper in a clean and optimal way. Access to setExpandedKey is not provided. We would need\n *   to either maintain a new state for expanded keys and ignore the one returned from the wrapped hook, or\n *   inefficiently call the returned `toggleKey` function many times.\n * - Supports collection invalidation via CollectionCacheInvalidationProps\n *   Perhaps not the most important addition, but not possible to be done via a wrapper.\n * - Uses TreeSelectionManager instead of the default SelectionManager, which implements expand/shrink selection.\n *   Could be done in a wrapper, with a little hack. Would need to replace selection manager.\n * - returned `collection` is of type `TreeCollection` (which is an improved version of react-stately `TreeCollection`),\n *   instead of the more generic `Collection`.\n */\nexport function useTreeState<T extends object>(\n  { childExpansionBehaviour = \"multi\", ...props }: TreeProps<T>,\n  treeRef?: ForwardedRef<TreeRefValue>\n): TreeState<T> {\n  let [expandedKeys, setExpandedKeys] = useControlledState(\n    props.expandedKeys ? new Set(props.expandedKeys) : undefined!,\n    props.defaultExpandedKeys ? new Set(props.defaultExpandedKeys) : new Set(),\n    props.onExpandedChange!\n  );\n\n  let selectionState = useMultipleSelectionState({\n    ...props,\n    selectionBehavior: \"replace\",\n  });\n  let disabledKeys = useMemo(\n    () => (props.disabledKeys ? new Set(props.disabledKeys) : new Set<Key>()),\n    [props.disabledKeys]\n  );\n\n  const context = useCollectionCacheInvalidation(props);\n\n  // @ts-expect-error imprecise typing in @react-stately/selection\n  let tree = useCollection<T, TreeCollection<T>>(\n    props,\n    (nodes) => new TreeCollection(nodes, { expandedKeys }),\n    context,\n    [expandedKeys]\n  );\n\n  const selectionManager = new TreeSelectionManager(\n    tree as Collection<Node<T>>,\n    selectionState\n  );\n\n  useTreeRef({ selectionManager, setExpandedKeys, tree }, treeRef);\n\n  // Reset focused key if that item is deleted from the collection.\n  useEffect(() => {\n    if (\n      selectionState.focusedKey != null &&\n      !tree.getItem(selectionState.focusedKey)\n    ) {\n      // @ts-expect-error imprecise typing in @react-stately/selection\n      selectionState.setFocusedKey(null);\n    }\n  }, [tree, selectionState.focusedKey]);\n\n  const toggleKey = (key: Key) => {\n    let newExpandedKeys = toggleTreeNode(\n      tree as Collection<Node<T>>,\n      expandedKeys,\n      key\n    );\n    if (childExpansionBehaviour === \"single\") {\n      const expandedSiblings = getSiblings(tree, key).filter(\n        (aKey) => aKey !== key && expandedKeys.has(aKey)\n      );\n      newExpandedKeys = expandedSiblings.reduce((expandedKeys, expandedKey) => {\n        return toggleTreeNode(\n          tree as Collection<Node<T>>,\n          expandedKeys,\n          expandedKey\n        );\n      }, newExpandedKeys);\n    }\n    setExpandedKeys(newExpandedKeys);\n  };\n\n  return {\n    collection: tree as Collection<Node<T>>,\n    expandedKeys,\n    disabledKeys,\n    toggleKey,\n    selectionManager,\n  };\n}\n\nfunction getChildItems<T>(node: Node<T>): Node<T>[] {\n  const childNodes = [...(node.childNodes || [])];\n  const childItems = childNodes.filter(({ type }) => type === \"item\");\n  const sectionItems = childNodes.filter(({ type }) => type === \"section\");\n\n  return childItems.concat(sectionItems.flatMap(getChildItems));\n}\n\nfunction getRootItemKeys(tree: TreeCollection<unknown>) {\n  return tree.rootKeys\n    .map((key) => tree.getItem(key))\n    .filter(notNull)\n    .flatMap(getChildItems)\n    .map(({ key }) => key);\n}\n/**\n * Returns the siblings of an item in tree, ignoring sections.\n * Disclaimer: The code is done quick and dirty and in a rush. Unpleasant code, good candidate for refactoring :D\n */\nfunction getSiblings(tree: TreeCollection<unknown>, key: Key): Key[] {\n  const parentKey = tree.getItem(key)?.parentKey;\n  if (!parentKey) {\n    return [...tree.rootKeys].concat(getRootItemKeys(tree));\n  }\n  let parent = parentKey ? tree.getItem(parentKey) : null;\n  if (parent?.type === \"item\") {\n    return getChildItems(parent).map(({ key }) => key);\n  }\n  const siblings: Key[] = [];\n  while (parent) {\n    siblings.push(...getChildItems(parent).map(({ key }) => key));\n    if (parent.type === \"section\") {\n      if (parent.parentKey) {\n        parent = tree.getItem(parent.parentKey);\n      } else {\n        siblings.push(...getRootItemKeys(tree));\n        parent = null;\n      }\n    } else {\n      parent = null;\n    }\n  }\n  return Array.from(new Set(siblings));\n}\nfunction toggleTreeNode(\n  tree: Collection<Node<unknown>>,\n  expandedKeys: Set<Key>,\n  key: Key\n): Set<Key> {\n  // toggling a non-expandable node should be no-op\n  if (!expandedKeys.has(key) && !tree.getItem(key).hasChildNodes) {\n    return expandedKeys;\n  }\n  const newKeys = toggleKey(expandedKeys, key);\n  // In Intellij impl, when a node is collapsed, all descendants are also collapsed. In other words, keys that are\n  // not a part of the list of visible nodes, will be excluded from the expanded keys, with the toggle action.\n  for (const aKey of newKeys) {\n    if (tree.getItem(aKey) == null) {\n      newKeys.delete(aKey);\n    }\n  }\n\n  // If we are toggling it open, expand all expandable single-child items\n  if (newKeys.has(key)) {\n    for (const aKey of getSingleChildrenKeys(tree.getItem(key))) {\n      newKeys.add(aKey);\n    }\n  }\n  return newKeys;\n}\n\nfunction toggleKey(set: Set<Key>, key: Key): Set<Key> {\n  let res = new Set(set);\n  if (res.has(key)) {\n    res.delete(key);\n  } else {\n    res.add(key);\n  }\n\n  return res;\n}\n","import { usePrevious } from \"@intellij-platform/core/utils/usePrevious\";\nimport { CacheInvalidationContext } from \"./Item\";\n\nexport interface CollectionCacheInvalidationProps {\n  /**\n   * Defines cache invalidation policy for items. By default, the render result is cached based on the item objects.\n   * This is equivalent of passing false or not passing anything for `cacheInvalidation`. If `true` is passed, it will\n   * always invalidate the render result, causing the collection to be recreated on each re-render. It can\n   * considerably affect performance in large collections. in addition to boolean value, an object with the list of\n   * invalidators can also be passed. renderer function is called each time any of the invalidators are changed.\n   * Think of it as [dependency array in react hooks](https://reactjs.org/docs/hooks-reference.html#usememo). Except\n   * that the length of the array can also safely change.\n   */\n  cacheInvalidation?: boolean | { invalidators: ReadonlyArray<unknown> };\n}\n\n/**\n * Allows cache invalidation options based on input props, for components that use collection\n */\nexport const useCollectionCacheInvalidation = ({\n  cacheInvalidation,\n}: CollectionCacheInvalidationProps): CacheInvalidationContext => {\n  const invalidators =\n    typeof cacheInvalidation === \"object\" ? cacheInvalidation.invalidators : [];\n  const lastInvalidators = usePrevious(invalidators);\n\n  const invalidated =\n    typeof cacheInvalidation === \"object\"\n      ? cacheInvalidation.invalidators.length !== lastInvalidators.length ||\n        cacheInvalidation.invalidators.some(\n          (anInvalidator, index) => anInvalidator !== lastInvalidators[index]\n        )\n      : cacheInvalidation;\n\n  return {\n    invalidated,\n  };\n};\n","import { ForwardedRef, Key, useImperativeHandle } from \"react\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { TreeSelectionManager } from \"./TreeSelectionManager\";\nimport { TreeCollection } from \"./useTreeState\";\n\nexport interface TreeRefValue {\n  focus(key: Key): void;\n  replaceSelection(key: Key): void;\n\n  /**\n   * Extends selection to all siblings of the currently focused node.\n   */\n  expandSelection(): void;\n  /**\n   * Shrinks selection towards currently focused node.\n   */\n  shrinkSelection(): void;\n\n  expandAll(): void;\n  collapseAll(): void;\n}\n\n/**\n * Sets up a tree ref for imperatively working with tree from outside. For imperatively focusing, expanding to\n * specific key, etc.\n */\nexport function useTreeRef<T extends {}>(\n  props: {\n    tree: TreeCollection<T>;\n    selectionManager: TreeSelectionManager;\n    setExpandedKeys: (keys: Set<Key>) => void;\n  },\n  forwardedRef?: ForwardedRef<TreeRefValue>\n) {\n  const latestState = useLatest(props);\n\n  useImperativeHandle(\n    forwardedRef,\n    () => {\n      return {\n        replaceSelection: (key: Key) => {\n          latestState.current.selectionManager.replaceSelection(key);\n        },\n        focus: (key: Key) => {\n          const selectionManager = latestState.current.selectionManager;\n          selectionManager.setFocused(true);\n          /**\n           * NOTE: we set focus key to null and set it to key again, to make sure scroll into view works even when\n           * the key is currently focused but not in view. It wouldn't be needed if there was an imperative handle\n           * for scrolling an item into view, but it's only implemented in way that is reactive to changes to the\n           * focused key. {@see useCollectionAutoScroll}\n           */\n          // @ts-expect-error: setFocusedKey typing mistakenly doesn't accept null, while it should\n          selectionManager.setFocusedKey(null);\n          setTimeout(() => {\n            selectionManager.setFocusedKey(key);\n          });\n        },\n        expandSelection() {\n          latestState.current.selectionManager.expandSelection();\n        },\n        shrinkSelection() {\n          latestState.current.selectionManager.shrinkSelection();\n        },\n        expandAll() {\n          latestState.current.setExpandedKeys(\n            latestState.current.tree.getAllExpandableKeys()\n          );\n        },\n        collapseAll() {\n          const { tree, setExpandedKeys, selectionManager } =\n            latestState.current;\n          const focusedKey = selectionManager.focusedKey;\n          setExpandedKeys(new Set());\n\n          // Find the root node that is a grandparent of focused node, and focus/select it.\n          // NOTE: this behaviour of updating selection when nodes are collapsed is something to be fixed in general,\n          // and then this custom logic here would be not necessary.\n          if (focusedKey && !tree.rootKeys.includes(focusedKey)) {\n            let item = tree.getItem(focusedKey);\n            while (item?.parentKey != null) {\n              item = tree.getItem(item.parentKey);\n            }\n            if (item) {\n              selectionManager.setFocusedKey(item.key);\n              if (selectionManager.isSelected(focusedKey)) {\n                selectionManager.select(item.key);\n              }\n            }\n          }\n        },\n      };\n    },\n    []\n  );\n}\n","import { HTMLAttributes, useMemo } from \"react\";\nimport { LayoutNode } from \"@react-stately/layout\";\nimport { Node } from \"@react-types/shared\";\nimport { TreeState } from \"@react-stately/tree\";\nimport { VirtualizerProps } from \"@react-aria/virtualizer\";\nimport { LayoutInfo, Rect, Size } from \"@react-stately/virtualizer\";\nimport { VariableWidthListLayout } from \"@intellij-platform/core/VariableWidthListLayout\";\n\nclass FlattenedTreeLayout<T> extends VariableWidthListLayout<T> {\n  buildChild(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildChild(node, x, y);\n    if (\n      node.parentKey &&\n      this.collection.getItem(node.parentKey)?.type === \"item\"\n    ) {\n      layoutNode.layoutInfo.parentKey = null;\n    }\n    return layoutNode;\n  }\n\n  doBuildCollection(): LayoutNode[] {\n    let y = this.padding;\n    let nodes = [];\n    /**\n     * The only difference here is that in tree, we need to use getKeys() to get the keys for a flattened list of items\n     * that are currently visible. With this difference only, things seem to work as expected, but sections are not\n     * tested, and not even sure if they would be applicable for Tree view.\n     * Diff compared to ListView#BuildCollection:\n     * -        for (let node of this.collection) {\n     * +        const visibleNodes = [...this.collection.getKeys()].map(key => this.collection.getItem(key));\n     * +        for (let node of visibleNodes) {\n     * This needs to be maintained with version upgrades, until TreeLayout is supported:\n     * https://github.com/adobe/react-spectrum/issues/2396\n     */\n    const visibleNodes = [...this.collection.getKeys()].map((key) =>\n      this.collection.getItem(key)\n    );\n    for (let node of visibleNodes) {\n      let layoutNode = this.buildChild(node, 0, y);\n      y = layoutNode.layoutInfo.rect.maxY;\n      nodes.push(layoutNode);\n    }\n\n    if (this.isLoading) {\n      let rect = new Rect(\n        0,\n        y,\n        this.virtualizer.visibleRect.width,\n        this.loaderHeight ?? this.virtualizer.visibleRect.height\n      );\n      let loader = new LayoutInfo(\"loader\", \"loader\", rect);\n      this.layoutInfos.set(\"loader\", loader);\n      nodes.push({ layoutInfo: loader });\n      y = loader.rect.maxY;\n    }\n\n    if (nodes.length === 0) {\n      let rect = new Rect(\n        0,\n        y,\n        this.virtualizer.visibleRect.width,\n        this.placeholderHeight ?? this.virtualizer.visibleRect.height\n      );\n      let placeholder = new LayoutInfo(\"placeholder\", \"placeholder\", rect);\n      this.layoutInfos.set(\"placeholder\", placeholder);\n      nodes.push({ layoutInfo: placeholder });\n      y = placeholder.rect.maxY;\n    }\n\n    this.contentSize = new Size(\n      this.virtualizer.visibleRect.width,\n      y + this.padding\n    );\n    return nodes;\n  }\n\n  getVisibleLayoutInfos(rect: Rect): LayoutInfo[] {\n    return super\n      .getVisibleLayoutInfos(rect)\n      .filter((layoutInfo) => this.collection.getItem(layoutInfo.key) != null);\n  }\n}\n\nexport const useTreeVirtualizer = <T extends object>({\n  state,\n}: {\n  state: TreeState<T>;\n}): {\n  virtualizerProps: Omit<\n    VirtualizerProps<any, unknown>,\n    \"children\" | keyof HTMLAttributes<HTMLElement>\n  >;\n} => {\n  const layout = useMemo(\n    () =>\n      new FlattenedTreeLayout({\n        /**\n         * there is currently no documentation available for these fields, but setting `rowHeight` enforces it, which\n         * wouldn't be good for custom tree UI with a different row height.\n         * wrong estimatedRowHeight seems to only affect small scrollbar position inaccuracy, which is a minor issue\n         * and not even noticeable in most cases. Also, it seems it slightly improves the performance if it exactly\n         * matches the real row height. But not even sure.\n         */\n        estimatedRowHeight: 20,\n      }),\n    []\n  );\n  layout.collection = state.collection;\n  layout.disabledKeys = state.disabledKeys;\n\n  return {\n    virtualizerProps: {\n      focusedKey: state.selectionManager.focusedKey,\n      collection: state.collection,\n      layout,\n      // Not clear how this sizeToFit is supposed to work, due to lack of documentation, but don't be tempted to\n      // think it solves the problem VariableWidthListLayout is trying to solve, because it doesn't :D\n      // Also, note that setting this to \"width\" prevents re-layout when container width is increased, which\n      // causes issues.\n      sizeToFit: \"height\",\n      scrollToItem: (key) => {\n        return layout.virtualizer.scrollToItem(key, {\n          shouldScrollX: false,\n          duration: 0,\n        });\n      },\n      scrollDirection: \"both\",\n    },\n  };\n};\n","import React, { RefObject } from \"react\";\nimport {\n  ActionDefinition,\n  CommonActionId,\n} from \"@intellij-platform/core/ActionSystem\";\nimport { PlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { TreeRefValue } from \"@intellij-platform/core/Tree\";\n\n/**\n * Returns action definitions object for common tree actions\n * TODO: add example in docs\n */\nexport function useTreeActions({\n  treeRef,\n}: {\n  treeRef: RefObject<TreeRefValue>;\n}): Array<ActionDefinition> {\n  return [\n    {\n      id: CommonActionId.EXPAND_ALL,\n      title: \"Expand All\",\n      icon: <PlatformIcon icon=\"actions/expandall\" />,\n      actionPerformed: () => {\n        treeRef.current?.expandAll();\n      },\n    },\n    {\n      id: CommonActionId.COLLAPSE_ALL,\n      title: \"Collapse All\",\n      icon: <PlatformIcon icon=\"actions/collapseall\" />,\n      actionPerformed: () => {\n        treeRef.current?.collapseAll();\n      },\n    },\n    {\n      id: CommonActionId.EXPAND_SELECTION,\n      title: \"Expand Selection\",\n      actionPerformed: () => {\n        treeRef.current?.expandSelection();\n      },\n    },\n    {\n      id: CommonActionId.SHRINK_SELECTION,\n      title: \"Shrink Selection\",\n      // TODO: disable if selection is only one item. Would need more data from treeRef. Maybe after treeRef is refactored\n      //  to implement/extend CollectionRef\n      actionPerformed: () => {\n        treeRef.current?.shrinkSelection();\n      },\n    },\n  ];\n}\n","import { Key } from \"react\";\n\ninterface SetState<T> {\n  items: Iterable<T>;\n\n  toggle(key: T): void;\n\n  add(...key: T[]): void;\n\n  delete(...key: T[]): void;\n}\n\nexport type SelectionState = \"NotSelected\" | \"Selected\" | \"PartiallySelected\";\n\nexport interface TreeModel<T, K = Key> {\n  rootNodes: ReadonlyArray<T>;\n  getChildren: (root: T) => ReadonlyArray<T> | /*for convenience*/ T | null;\n  getKey: (item: T) => K;\n}\n\nexport interface NestedSelectionState<T> {\n  getSelectionState: (item: T) => SelectionState;\n  toggle: (item: T) => void;\n}\n\nconst collectSelectableItems = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>\n) => {\n  const collectedItems: T[] = [];\n  collectSelectableItemsRecursive(item, getChildren, collectedItems);\n  return collectedItems;\n};\nconst collectSelectableItemsRecursive = <T>(\n  item: T,\n  getChildren: (item: T) => null | ReadonlyArray<T>,\n  collectedItems: T[] = []\n) => {\n  const children = getChildren(item);\n  if (children == null) {\n    collectedItems.push(item);\n  } else {\n    children.forEach((child) =>\n      collectSelectableItemsRecursive(child, getChildren, collectedItems)\n    );\n  }\n};\n\n// TODO: maybe change the interface to work with keys instead of items?\nexport class NestedSelection<T extends object, K = Key>\n  implements NestedSelectionState<T>\n{\n  cache = new WeakMap<T, SelectionState>();\n  constructor(private state: SetState<K>, private tree: TreeModel<T, K>) {\n    this.tree = tree;\n    this.state = state;\n  }\n\n  toggle(item: T) {\n    const children = this.tree.getChildren(item);\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    if (isSelectableNode) {\n      this.state.toggle(key);\n    } else {\n      const state = this.getSelectionState(item);\n      const itemsInSubtree = collectSelectableItems(item, (item) =>\n        normalizeChildren(this.tree.getChildren(item))\n      ).map(this.tree.getKey);\n      if (state === \"Selected\") {\n        this.state.delete(...itemsInSubtree);\n      } else {\n        this.state.add(...itemsInSubtree);\n      }\n    }\n  }\n\n  getSelectionState(item: T): SelectionState {\n    // caching can be refactored into a nice little decorator like WeakMapCached which would be applicable on a method\n    // with a single object argument.\n    const cachedState = this.cache.get(item);\n    if (cachedState) {\n      return cachedState;\n    }\n    const children = normalizeChildren(this.tree.getChildren(item));\n    const key = this.tree.getKey(item);\n    const isSelectableNode = children == null;\n    let state: SelectionState;\n    if (isSelectableNode) {\n      state = [...this.state.items].includes(key) ? \"Selected\" : \"NotSelected\";\n    } else {\n      const allDescendantsStates = children.map((child) =>\n        this.getSelectionState(child)\n      );\n      if (allDescendantsStates.every((state) => state === \"NotSelected\")) {\n        state = \"NotSelected\";\n      } else {\n        state = allDescendantsStates.every((state) => state === \"Selected\")\n          ? \"Selected\"\n          : \"PartiallySelected\";\n      }\n    }\n    this.cache.set(item, state);\n    return state;\n  }\n}\n\nfunction normalizeChildren<T>(children: T | ReadonlyArray<T> | null) {\n  if (children) {\n    return ([] as ReadonlyArray<T>).concat(children);\n  }\n  return null;\n}\n","import React, { ForwardedRef } from \"react\";\nimport {\n  SpeedSearchTree,\n  SpeedSearchTreeProps,\n  TreeRefValue,\n} from \"@intellij-platform/core/Tree\";\nimport { NestedSelectionState } from \"./NestedSelection\";\n\n/**\n * Experimental wrapper component around SpeedSearchTree, which allows rendering {@link TreeNodeCheckbox} in nodes.\n *\n * See [design-decisions.md](../Tree/design-decisions.md) for more thoughts about how should different features\n * like this be supported.\n *\n * @alpha\n */\nexport const SpeedSearchTreeWithCheckboxes = React.forwardRef(\n  <T extends object>(\n    {\n      nestedSelection,\n      cacheInvalidation,\n      onNodeKeyDown,\n      ...props\n    }: SpeedSearchTreeProps<T> & {\n      nestedSelection: NestedSelectionState<T>;\n    },\n    ref: ForwardedRef<HTMLDivElement>\n  ): React.ReactElement => {\n    const otherInvalidators =\n      typeof cacheInvalidation === \"object\"\n        ? cacheInvalidation.invalidators\n        : [];\n    return (\n      <SpeedSearchTree\n        ref={ref}\n        {...props}\n        // instead of passing cacheInvalidation, a better approach could be to provide nestedSelection as context.\n        cacheInvalidation={{\n          invalidators: [nestedSelection, ...otherInvalidators],\n        }}\n        onNodeKeyDown={(event, item) => {\n          if (event.key === \" \") {\n            nestedSelection.toggle(item.value);\n          }\n          onNodeKeyDown?.(event, item);\n        }}\n      />\n    );\n  }\n);\n","import React, { useContext } from \"react\";\nimport { Checkbox } from \"@intellij-platform/core/Checkbox\";\nimport { TreeContext } from \"@intellij-platform/core/Tree/TreeContext\";\nimport { SelectionState } from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\nimport { ItemStateContext } from \"@intellij-platform/core/Collections\";\nimport styled from \"styled-components\";\n\nexport type TreeNodeCheckboxProps<T extends unknown> = {\n  selectionState?: SelectionState;\n  selectItemOnPress?: boolean;\n  onToggle: () => void;\n  // maybe a isDisabled prop to be merged with isDisabled from the item?\n};\n\nconst StyledCheckboxWrapper = styled.span`\n  margin-right: 0.125rem;\n  display: inline-flex;\n`;\n\n/**\n * Checkbox to be used with {@link SpeedSearchTreeWithCheckboxes}. `SpeedSearchTreeWithCheckboxes` doesn't add the\n * checkboxes by default to the nodes, which makes it more flexible in terms of which nodes should have checkbox, or\n * it's exact placement within the tree rows.\n *\n * TreeNodeCheckbox renders a Checkbox with a few extras:\n * - `aria-label` set based on the encompassing item's textValue\n * - `isSelected` and `isIndeterminate` set based on `selectionState`\n * - `isDisabled` is set based in disabled state of the item.\n * - The encompassing item will be selected upon press, if `selectItemOnPress` is `true` (default is `true`).\n * - Small styling adjustment achieved by a wrapper StyledListIconWrapper.\n *\n * @see SpeedSearchTreeWithCheckboxes\n * @see useNestedSelectionState\n *\n * NOTE: this component currently uses TreeContext, to get a hold of selectionManager. If a more abstract component\n * like CollectionCheckbox is needed in the future, we can refactor TreeContext also to something more abstract like\n * CollectionContext which is provided by all such components like List, Tree or Table.\n */\nexport const TreeNodeCheckbox = <T extends unknown>({\n  selectionState,\n  onToggle,\n  selectItemOnPress = true,\n}: TreeNodeCheckboxProps<T>) => {\n  const treeContext = useContext(TreeContext);\n  const itemContext = useContext(ItemStateContext);\n  if (!itemContext) {\n    throw new Error(\"TreeNodeCheckbox is rendered outside tree nodes.\");\n  }\n\n  return (\n    <StyledCheckboxWrapper>\n      <Checkbox\n        preventFocus\n        aria-label={`Select ${itemContext.node.textValue}`}\n        isSelected={selectionState === \"Selected\"}\n        isIndeterminate={selectionState === \"PartiallySelected\"}\n        isDisabled={itemContext.isDisabled}\n        onChange={() => {\n          onToggle();\n          // this if and the whole need for treeContext could be avoided if event.stopPropagation() was not hard coded\n          // in useToggle: https://github.com/adobe/react-spectrum/blob/0d007bca9417c4b7b86fafd5842871bf997bd4c0/packages/@react-aria/toggle/src/useToggle.ts#L46\n          // An improvement could be to replace Checkbox with CheckboxIcon, and simply handle press on it (potential TODO)\n          if (treeContext && itemContext && selectItemOnPress) {\n            treeContext.state.selectionManager.setFocusedKey(\n              itemContext.node.key\n            );\n            treeContext.state.selectionManager.setFocused(true);\n            treeContext.state.selectionManager.setSelectedKeys([\n              itemContext.node.key,\n            ]);\n          }\n        }}\n      />\n    </StyledCheckboxWrapper>\n  );\n};\n","import { Key, useMemo } from \"react\";\nimport { ControlledStateProps } from \"../type-utils\";\nimport { useLatest } from \"@intellij-platform/core/utils/useLatest\";\nimport { useControllableSet } from \"@intellij-platform/core/utils/useSet\";\nimport {\n  NestedSelection,\n  NestedSelectionState,\n  TreeModel,\n} from \"@intellij-platform/core/TreeCheckboxes/NestedSelection\";\n\n/**\n * A state management util for a selectable list of items with an arbitrary nested grouping. In other words,\n * it manages selection of leaves in a tree.\n *\n * tree is represented as a `getChildren` function that returns children for a given root. if null is passed it\n * returns the top level nodes.\n * Important Note: the tree structure that can be generated by calling `getChildren` function is supposed to be\n * **immutable**. in other words, any change in the tree, should result in a new array of top level items.\n */\n\nexport const useNestedSelectionState = <T extends object, K = Key>(\n  tree: TreeModel<T, K>,\n  {\n    selectedKeys: selectedKeysProp,\n    defaultSelectedKeys,\n    onSelectedKeysChange,\n  }: ControlledStateProps<{\n    selectedKeys: Set<K>;\n  }>\n): NestedSelectionState<T> => {\n  const [selectedKeys, selectedKeysSetter] = useControllableSet(\n    selectedKeysProp!, // bad typing in useControlledState\n    defaultSelectedKeys || new Set(),\n    onSelectedKeysChange! // bad typing in useControlledState\n  );\n  const treeRef = useLatest(tree);\n\n  return useMemo(\n    () =>\n      new NestedSelection<T, K>(\n        { items: selectedKeys, ...selectedKeysSetter },\n        treeRef.current\n      ),\n    [selectedKeys, tree.rootNodes]\n  );\n};\n","import {\n  LayoutNode,\n  ListLayout,\n  ListLayoutOptions,\n} from \"@react-stately/layout\";\nimport React, { Key } from \"react\";\nimport {\n  InvalidationContext,\n  LayoutInfo,\n  Rect,\n  Size,\n} from \"@react-stately/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\n/**\n * Extends `ListLayout` and allows items of the list to have width based on the content. `ListLayout` by default\n * sets width based on the virtualizer's visible rect. This means the overflow of list items will be clipped.\n * In `VariableWidthListLayout`, the width of the list depends on the content of the visible items.\n *\n * NOTE: At the time of writing this class, Virtualization in @react-aria and @react-stately don't have proper\n * documentation, and it wasn't clear if there could be better ways of letting list's width grow based on the content.\n * Also, this implementation currently lacks support for sections. `buildSection()` would most probably need to be\n * overridden like how `buildItem` is.\n */\nexport class VariableWidthListLayout<T> extends ListLayout<T> {\n  /**\n   * content width of items are stored here, if the content width is bigger than the Virtualizer's visible rect's width.\n   */\n  keyToWidth = new Map<Key, number>();\n  private visibleContentWidth: number = 0;\n  private dividerHeight: number = 2;\n\n  constructor(options: ListLayoutOptions<T> & { dividerHeight?: number }) {\n    super(options);\n    if (options.dividerHeight != undefined) {\n      this.dividerHeight = options.dividerHeight;\n    }\n  }\n\n  buildItem(node: Node<T>, x: number, y: number): LayoutNode {\n    const layoutNode = super.buildItem(node, x, y);\n    if (this.visibleContentWidth) {\n      layoutNode.layoutInfo.rect.width = this.visibleContentWidth;\n    }\n    return layoutNode;\n  }\n\n  buildNode(node: Node<T>, x: number, y: number): LayoutNode {\n    if (node.type === \"divider\") {\n      return this.buildDivider(node, x, y);\n    }\n    return super.buildNode(node, x, y);\n  }\n\n  buildDivider(node: Node<T>, x: number, y: number): LayoutNode {\n    let width = this.virtualizer.visibleRect.width;\n    let rectHeight = this.dividerHeight;\n\n    let rect = new Rect(x, y, width - x, rectHeight);\n    let layoutInfo = new LayoutInfo(node.type, node.key, rect);\n    layoutInfo.estimatedSize = false;\n    return {\n      layoutInfo,\n      // validRect: layoutInfo.rect,\n    };\n  }\n\n  /**\n   * Allows for overriding buildCollection in a sub-class\n   */\n  protected doBuildCollection() {\n    return super.buildCollection();\n  }\n\n  buildCollection(): LayoutNode[] {\n    this.visibleContentWidth = this.getVisibleContentWidth();\n    // in buildChild, if invalidateEverything is false and y is not changed, it will reuse the existing layoutInfo.\n    // which can be problematic, if it was created in a time when the visible content width was different.\n    // A more efficient approach (instead of rebuilding the whole collection), might be to set layout width to\n    // visibleContentWidth, in getVisibleLayoutInfos, if mutation is ok.\n    // UPDATE: using getFinalLayoutInfo seems to be a legitimate last minute way to mutate layout infos.\n    this.invalidateEverything =\n      this.contentSize?.width !== this.visibleContentWidth;\n    const layoutNodes = this.doBuildCollection();\n    this.contentSize.width = this.visibleContentWidth;\n    return layoutNodes;\n  }\n\n  shouldInvalidate(newRect: Rect, oldRect: Rect): boolean {\n    return (\n      super.shouldInvalidate(newRect, oldRect) ||\n      this.getVisibleContentWidth() !== this.visibleContentWidth\n    );\n  }\n\n  // Setting lastWidth doesn't seem to be important, but we set it based on the content anyway.\n  validate(invalidationContext: InvalidationContext<Node<T>, unknown>) {\n    super.validate(invalidationContext);\n    this.lastWidth = this.contentSize.width;\n  }\n\n  updateItemSize(key: React.Key, size: Size): boolean {\n    const changed = super.updateItemSize(key, size);\n    const layoutInfo = this.layoutInfos.get(key);\n    if (layoutInfo && size.width > this.contentSize.width) {\n      this.keyToWidth.set(key, size.width);\n      return true;\n    } else {\n      this.keyToWidth.delete(key);\n      return changed;\n    }\n  }\n\n  private getVisibleContentWidth() {\n    return Math.max(\n      this.virtualizer.visibleRect.width,\n      ...this.virtualizer.visibleViews.map((view) => {\n        const layoutInfo = view.layoutInfo;\n        const itemContentWidth =\n          layoutInfo && this.keyToWidth.get(layoutInfo.key);\n        if (\n          itemContentWidth &&\n          layoutInfo.rect.intersects(this.virtualizer.getVisibleRect())\n        ) {\n          return itemContentWidth;\n        }\n        return 0;\n      })\n    );\n  }\n}\n","export function isWordSeparator(c: string) {\n  return (\n    isWhitespace(c) || c == \"_\" || c == \"-\" || c == \":\" || c == \"+\" || c == \".\"\n  );\n}\n\nexport function isWhitespace(char: string): boolean {\n  return /^\\s*$/.test(char);\n}\n\nexport function isUpperCase(str: string) {\n  return str.toUpperCase() === str && str.toLowerCase() !== str;\n}\n","import { createRangesFromIndices, TextRange } from \"./TextRange\";\nimport {\n  isUpperCase,\n  isWhitespace,\n  isWordSeparator,\n} from \"./utils/string-utils\";\n\nfunction isMeaningfulChar(ch: string) {\n  return !isWordSeparator(ch) && !isWhitespace(ch);\n}\n\n// Simplified version of https://github.com/JetBrains/intellij-community/blob/master/platform/util/text-matching/src/com/intellij/psi/codeStyle/MinusculeMatcherImpl.java\nexport const minusculeMatch = (\n  input: string,\n  rawPattern: string\n): Array<TextRange> | null => {\n  const isStarts = input.split(\"\").map(isStart);\n  const pattern = rawPattern.split(\"\").filter(isMeaningfulChar).join(\"\");\n  const matches: Array<{ patternIndex: number; inputIndex: number }> = [];\n  let continuous = false;\n  let inputIndex = 0,\n    patternIndex = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    if (matches.length === pattern.length) {\n      return createRangesFromIndices(matches.map(({ inputIndex: i }) => i));\n    }\n    if (inputIndex > input.length - 1) {\n      if (matches.length > 0) {\n        // TODO: the same character match can be popped out and in several times, if something\n        //  is popped out, it should never be added back again, since it's already examined without\n        //  a full match.\n        const lastMatch = matches.pop()!;\n        inputIndex = lastMatch.inputIndex + 1;\n        patternIndex = lastMatch.patternIndex;\n        continue;\n      }\n      break;\n    }\n    if (!isMeaningfulChar(input[inputIndex])) {\n      inputIndex++;\n      continue;\n    }\n    if (\n      pattern[patternIndex].toLowerCase() === input[inputIndex].toLowerCase() &&\n      (continuous || isStarts[inputIndex] || matches.length === 0)\n    ) {\n      matches.push({ patternIndex, inputIndex });\n      continuous = true;\n      patternIndex++;\n      inputIndex++;\n    } else {\n      continuous = false;\n      inputIndex++;\n    }\n  }\n  return null;\n};\n\nfunction isStart(char: string, index: number, chars: string[]): boolean {\n  const previousChar = chars[index - 1];\n  return (\n    index === 0 ||\n    (isWordSeparator(previousChar) && !isWordSeparator(char)) ||\n    (isUpperCase(char) && !isUpperCase(previousChar))\n  );\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport React, {\n  FocusEvent,\n  HTMLAttributes,\n  Key,\n  KeyboardEvent,\n  RefObject,\n  useEffect,\n} from \"react\";\nimport { focusSafely, getFocusableTreeWalker } from \"@react-aria/focus\";\nimport { FocusStrategy, KeyboardDelegate } from \"@react-types/shared\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { MultipleSelectionManager } from \"@react-stately/selection\";\nimport { useLocale } from \"@react-aria/i18n\";\nimport { useTypeSelect } from \"@react-aria/selection\";\nimport { isCtrlKeyPressed } from \"../utils/keyboard-utils\";\n\ninterface SelectableCollectionOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * A delegate object that implements behavior for keyboard focus movement.\n   */\n  keyboardDelegate: KeyboardDelegate;\n  /**\n   * The ref attached to the element representing the collection.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether the collection allows the user to select all items via keyboard shortcut.\n   * @default false\n   */\n  disallowSelectAll?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableCollectionAria {\n  /** Props for the collection element. */\n  collectionProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with selectable collections.\n */\nexport function useSelectableCollection(\n  options: SelectableCollectionOptions\n): SelectableCollectionAria {\n  let {\n    selectionManager: manager,\n    keyboardDelegate: delegate,\n    ref,\n    autoFocus = false,\n    shouldFocusWrap = false,\n    disallowEmptySelection = false,\n    disallowSelectAll = false,\n    selectOnFocus = false,\n    disallowTypeAhead = false,\n    shouldUseVirtualFocus,\n    allowsTabNavigation = false,\n  } = options;\n  let { direction } = useLocale();\n\n  let onKeyDown = (e: KeyboardEvent) => {\n    // Let child element (e.g. menu button) handle the event if the Alt key is pressed.\n    // Keyboard events bubble through portals. Don't handle keyboard events\n    // for elements outside the collection (e.g. menus).\n    if (e.altKey || !ref.current?.contains(e.target as HTMLElement)) {\n      return;\n    }\n\n    const navigateToKey = (\n      key: Key | undefined,\n      childFocus?: FocusStrategy\n    ) => {\n      if (key != null) {\n        manager.setFocusedKey(key, childFocus);\n\n        if (e.shiftKey && manager.selectionMode === \"multiple\") {\n          manager.extendSelection(key);\n        } else if (selectOnFocus) {\n          manager.replaceSelection(key);\n        }\n      }\n    };\n\n    switch (e.key) {\n      case \"ArrowDown\": {\n        if (delegate.getKeyBelow) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyBelow(manager.focusedKey)\n              : delegate.getFirstKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getFirstKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowUp\": {\n        if (delegate.getKeyAbove) {\n          e.preventDefault();\n          let nextKey =\n            manager.focusedKey != null\n              ? delegate.getKeyAbove(manager.focusedKey)\n              : delegate.getLastKey?.();\n          if (nextKey == null && shouldFocusWrap) {\n            nextKey = delegate.getLastKey?.(manager.focusedKey);\n          }\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      }\n      case \"ArrowLeft\": {\n        if (delegate.getKeyLeftOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyLeftOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"first\" : \"last\");\n        }\n        break;\n      }\n      case \"ArrowRight\": {\n        if (delegate.getKeyRightOf) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyRightOf(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey, direction === \"rtl\" ? \"last\" : \"first\");\n        }\n        break;\n      }\n      case \"Home\":\n        if (delegate.getFirstKey) {\n          e.preventDefault();\n          let firstKey = delegate.getFirstKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(firstKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(firstKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(firstKey);\n          }\n        }\n        break;\n      case \"End\":\n        if (delegate.getLastKey) {\n          e.preventDefault();\n          let lastKey = delegate.getLastKey(\n            manager.focusedKey,\n            isCtrlKeyPressed(e)\n          );\n          // @ts-expect-error ignored strictness error in copied code\n          manager.setFocusedKey(lastKey);\n          if (\n            isCtrlKeyPressed(e) &&\n            e.shiftKey &&\n            manager.selectionMode === \"multiple\"\n          ) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.extendSelection(lastKey);\n          } else if (selectOnFocus) {\n            // @ts-expect-error ignored strictness error in copied code\n            manager.replaceSelection(lastKey);\n          }\n        }\n        break;\n      case \"PageDown\":\n        if (delegate.getKeyPageBelow) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageBelow(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"PageUp\":\n        if (delegate.getKeyPageAbove) {\n          e.preventDefault();\n          let nextKey = delegate.getKeyPageAbove(manager.focusedKey);\n          // @ts-expect-error ignored strictness error in copied code\n          navigateToKey(nextKey);\n        }\n        break;\n      case \"a\":\n        if (\n          isCtrlKeyPressed(e) &&\n          manager.selectionMode === \"multiple\" &&\n          disallowSelectAll !== true\n        ) {\n          e.preventDefault();\n          manager.selectAll();\n        }\n        break;\n      case \"Escape\":\n        e.preventDefault();\n        if (!disallowEmptySelection) {\n          manager.clearSelection();\n        }\n        break;\n      case \"Tab\": {\n        if (!allowsTabNavigation) {\n          // There may be elements that are \"tabbable\" inside a collection (e.g. in a grid cell).\n          // However, collections should be treated as a single tab stop, with arrow key navigation internally.\n          // We don't control the rendering of these, so we can't override the tabIndex to prevent tabbing.\n          // Instead, we handle the Tab key, and move focus manually to the first/last tabbable element\n          // in the collection, so that the browser default behavior will apply starting from that element\n          // rather than the currently focused one.\n          if (e.shiftKey) {\n            ref.current.focus();\n          } else {\n            let walker = getFocusableTreeWalker(ref.current, {\n              tabbable: true,\n            });\n            let next: HTMLElement | undefined;\n            let last: HTMLElement;\n            do {\n              last = walker.lastChild() as HTMLElement;\n              if (last) {\n                next = last;\n              }\n            } while (last);\n\n            if (next && !next.contains(document.activeElement)) {\n              next.focus();\n            }\n          }\n          break;\n        }\n      }\n    }\n  };\n\n  let onFocus = (e: FocusEvent) => {\n    if (manager.isFocused) {\n      // If a focus event bubbled through a portal, reset focus state.\n      if (!e.currentTarget.contains(e.target)) {\n        manager.setFocused(false);\n      }\n\n      return;\n    }\n\n    // Focus events can bubble through portals. Ignore these events.\n    if (!e.currentTarget.contains(e.target)) {\n      return;\n    }\n\n    manager.setFocused(true);\n\n    if (manager.focusedKey == null) {\n      // If the user hasn't yet interacted with the collection, there will be no focusedKey set.\n      // Attempt to detect whether the user is tabbing forward or backward into the collection\n      // and either focus the first or last item accordingly.\n      let relatedTarget = e.relatedTarget as Element;\n      let key: Key | undefined;\n      if (\n        relatedTarget &&\n        e.currentTarget.compareDocumentPosition(relatedTarget) &\n          Node.DOCUMENT_POSITION_FOLLOWING\n      ) {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.lastSelectedKey ?? delegate.getLastKey?.();\n      } else {\n        // @ts-expect-error ignored strictness error in copied code\n        key = manager.firstSelectedKey ?? delegate.getFirstKey?.();\n      }\n      if (key != null) {\n        manager.setFocusedKey(key);\n      }\n    }\n  };\n\n  let onBlur = (e: FocusEvent) => {\n    // Don't set blurred and then focused again if moving focus within the collection.\n    if (!e.currentTarget.contains(e.relatedTarget as HTMLElement)) {\n      manager.setFocused(false);\n    }\n  };\n\n  useEffect(() => {\n    if (autoFocus) {\n      let focusedKey = null;\n\n      // Check focus strategy to determine which item to focus\n      if (autoFocus === \"first\") {\n        focusedKey = delegate.getFirstKey?.();\n      }\n      if (autoFocus === \"last\") {\n        focusedKey = delegate.getLastKey?.();\n      }\n\n      // If there are any selected keys, make the first one the new focus target\n      let selectedKeys = manager.selectedKeys;\n      if (selectedKeys.size) {\n        focusedKey = selectedKeys.values().next().value;\n      }\n\n      manager.setFocused(true);\n      manager.setFocusedKey(focusedKey);\n\n      // If no default focus key is selected, focus the collection itself.\n      if (focusedKey == null && !shouldUseVirtualFocus && ref.current) {\n        focusSafely(ref.current);\n      }\n\n      ///////////////////////////////////////////////////// MODIFICATION ///////////////////////////////////////////////\n      // Fixing https://github.com/adobe/react-spectrum/issues/4391\n      if (\n        options.selectOnFocus &&\n        (autoFocus === \"first\" || autoFocus === \"last\")\n      ) {\n        manager.replaceSelection(focusedKey);\n      }\n      /////////////////////////////////////////////////// END OF MODIFICATION //////////////////////////////////////////\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let handlers = {\n    onKeyDown,\n    onFocus,\n    onBlur,\n    onMouseDown(e: React.MouseEvent) {\n      // Prevent focus going to the collection when clicking on the scrollbar.\n      e.preventDefault();\n    },\n  };\n\n  let { typeSelectProps } = useTypeSelect({\n    keyboardDelegate: delegate,\n    selectionManager: manager,\n    onTypeSelect: selectOnFocus\n      ? (key) => {\n          manager.replaceSelection(key);\n        }\n      : undefined,\n  });\n\n  if (!disallowTypeAhead) {\n    handlers = mergeProps(typeSelectProps, handlers);\n  }\n\n  // If nothing is focused within the collection, make the collection itself tabbable.\n  // This will be marshalled to either the first or last item depending on where focus came from.\n  // If using virtual focus, don't set a tabIndex at all so that VoiceOver on iOS 14 doesn't try\n  // to move real DOM focus to the element anyway.\n  let tabIndex: number | undefined;\n  if (!shouldUseVirtualFocus) {\n    tabIndex = manager.focusedKey == null ? 0 : -1;\n  }\n\n  return {\n    collectionProps: {\n      ...handlers,\n      tabIndex,\n    },\n  };\n}\n","import { useSelectableItem as useOriginalSelectableItem } from \"@react-aria/selection\";\nimport { MouseEventHandler } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\n\n/**\n * A wrapper around useSelectableItem, which adjusts for intellij platform nuances:\n * - Selects item with right clicks as well, which allows ContextMenuContainer to be used with any collection component\n *   without the need for built-in context-menu support in such components. We won't need this if we move to a built-in\n *   context-menu support for List,Tree, etc.\n * @private\n */\nexport const useSelectableItem: typeof useOriginalSelectableItem = (\n  options\n) => {\n  const onContextMenu: MouseEventHandler<HTMLElement> = (e) => {\n    if (!options.selectionManager.isSelected(options.key)) {\n      options.selectionManager.select(options.key, {\n        type: \"press\",\n        pointerType: \"mouse\",\n        target: e.currentTarget,\n        shiftKey: e.shiftKey,\n        metaKey: e.metaKey,\n        ctrlKey: e.ctrlKey,\n        altKey: e.altKey,\n      });\n    }\n  };\n  const result = useOriginalSelectableItem(options);\n  return {\n    ...result,\n    itemProps: mergeProps(result.itemProps, { onContextMenu }),\n  };\n};\n","/**\n * Drop shadow of windows and other overlays.\n * The current value is not accurate and needs to be revisited. It should also be os-dependant.\n * FIXME: On windows, there is only a border-like shadow. No drop shadow\n * FIXME: On Mac, there is a border-like shadow and a drop shadow. the border-like shadow is missing in the current value\n */\nexport const WINDOW_SHADOW = \"box-shadow: 0 5px 15px rgb(0 0 0 / 30%)\";\n","import * as styledComponents from \"styled-components\";\nimport { ThemedStyledComponentsModule } from \"styled-components\";\nimport { Theme } from \"./Theme\";\nimport { KnownThemePropertyPath } from \"./Theme/types\";\n\ntype JuiStyledComponentsModule = ThemedStyledComponentsModule<\n  Theme<KnownThemePropertyPath>\n>;\n\nexport const styled =\n  styledComponents.default as JuiStyledComponentsModule[\"default\"];\nexport const useTheme =\n  styledComponents.useTheme as JuiStyledComponentsModule[\"useTheme\"];\nexport const css = styledComponents.css as JuiStyledComponentsModule[\"css\"];\nexport const ThemeConsumer =\n  styledComponents.ThemeConsumer as JuiStyledComponentsModule[\"ThemeConsumer\"];\n","import {\n  FocusManager,\n  focusSafely,\n  FocusScope as WrappedFocusScope,\n  FocusScopeProps,\n  useFocusManager,\n} from \"@react-aria/focus\";\nimport React, {\n  ForwardedRef,\n  useImperativeHandle,\n  useLayoutEffect,\n  useRef,\n} from \"react\";\n\ntype BetterFocusScopeProps = FocusScopeProps & {\n  /**\n   *\n   */\n  forceRestoreFocus?: boolean;\n};\nexport type FocusScopeRef = { focus: (forceFocusFirst?: boolean) => void };\n/**\n * A version of FocusScope which also allows for imperatively moving focus to the scope.\n * and has tiny patches/improvements\n * It's useful for\n */\nexport const FocusScope = React.forwardRef(function BetterFocusScope(\n  { children, forceRestoreFocus, ...otherProps }: BetterFocusScopeProps,\n  ref: ForwardedRef<FocusScopeRef>\n) {\n  const directChildRef = useRef<HTMLSpanElement>(null);\n  const focusManagerRef = useRef<FocusManager>(null);\n  useForceRestoreFocus(forceRestoreFocus);\n  useImperativeHandle(\n    ref,\n    () => ({\n      focus: (forceFocusFirst?: boolean) => {\n        const focusManager = focusManagerRef.current;\n        const containerElement = directChildRef.current?.parentElement;\n        if (!focusManager) {\n          throw new Error(\"focus manager not found!\");\n        }\n        if (!containerElement) {\n          throw new Error(\"container element not found\");\n        }\n        if (forceFocusFirst) {\n          return focusManager.focusFirst();\n        }\n        const alreadyHasFocused =\n          document.activeElement &&\n          document.activeElement !== containerElement &&\n          containerElement.contains(document.activeElement);\n        if (!alreadyHasFocused) {\n          focusManager.focusNext({ tabbable: true });\n        }\n      },\n    }),\n    []\n  );\n\n  return (\n    <WrappedFocusScope {...otherProps}>\n      <GetFocusManager ref={focusManagerRef} />\n      <span data-focus-root-direct-child=\"\" hidden ref={directChildRef} />\n      {children}\n    </WrappedFocusScope>\n  );\n});\nconst GetFocusManager = React.forwardRef(function FocusScopeHandle(\n  props: {},\n  ref: ForwardedRef<FocusManager>\n) {\n  const focusManager = useFocusManager();\n  useImperativeHandle(ref, () => focusManager, [focusManager]);\n  return null;\n});\n\n/**\n * Kind of a patchy solution for focus restoration when currently focused element is in a different focus scope, but\n * we still want focus restoration to work. So far the only use case is in nested menu, which is rendered as a separate\n * overlay with a focus scope. If focus is within that submenu, when the menu is closed, the default `restoreFocus`\n * doesn't work because there is a check in useRestoreFocus, which requires the currently focused element to be in\n * the focus scope, to do the focus restoration:\n * https://github.com/adobe/react-spectrum/blob/e14523fedd93ac1a4ede355aed70988af572ae74/packages/%40react-aria/focus/src/FocusScope.tsx#L460\n */\nfunction useForceRestoreFocus(restoreFocus?: boolean) {\n  useLayoutEffect(() => {\n    let nodeToRestore = document.activeElement as HTMLElement;\n\n    return () => {\n      if (restoreFocus && nodeToRestore) {\n        requestAnimationFrame(() => {\n          if (document.body.contains(nodeToRestore)) {\n            focusSafely(nodeToRestore);\n          }\n        });\n      }\n    };\n  }, [restoreFocus]);\n}\n","/**\n * Properly typed filter function for filtering out null/undefined items in array.\n */\nexport const notNull = <T>(\n  item: T | undefined | null\n): item is NonNullable<T> => item != null;\n","/**\n * IMPORTANT: this is a copy of a non-exported file from @react-aria/interactions\n */\n/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { runAfterTransition } from \"@react-aria/utils\";\n\n// Safari on iOS starts selecting text on long press. The only way to avoid this, it seems,\n// is to add user-select: none to the entire page. Adding it to the pressable element prevents\n// that element from being selected, but nearby elements may still receive selection. We add\n// user-select: none on touch start, and remove it again on touch end to prevent this.\n// This must be implemented using global state to avoid race conditions between multiple elements.\n\n// There are three possible states due to the delay before removing user-select: none after\n// pointer up. The 'default' state always transitions to the 'disabled' state, which transitions\n// to 'restoring'. The 'restoring' state can either transition back to 'disabled' or 'default'.\ntype State = \"default\" | \"disabled\" | \"restoring\";\n\nlet state: State = \"default\";\nlet savedUserSelect = \"\";\n\nexport function disableTextSelection() {\n  if (state === \"default\") {\n    savedUserSelect = document.documentElement.style.webkitUserSelect;\n    document.documentElement.style.webkitUserSelect = \"none\";\n  }\n\n  state = \"disabled\";\n}\n\nexport function restoreTextSelection() {\n  // If the state is already default, there's nothing to do.\n  // If it is restoring, then there's no need to queue a second restore.\n  if (state !== \"disabled\") {\n    return;\n  }\n\n  state = \"restoring\";\n\n  // There appears to be a delay on iOS where selection still might occur\n  // after pointer up, so wait a bit before removing user-select.\n  setTimeout(() => {\n    // Wait for any CSS transitions to complete so we don't recompute style\n    // for the whole page in the middle of the animation and cause jank.\n    runAfterTransition(() => {\n      // Avoid race conditions\n      if (state === \"restoring\") {\n        if (document.documentElement.style.webkitUserSelect === \"none\") {\n          document.documentElement.style.webkitUserSelect =\n            savedUserSelect || \"\";\n        }\n\n        savedUserSelect = \"\";\n        state = \"default\";\n      }\n    });\n  }, 300);\n}\n","import React, { MouseEventHandler } from \"react\";\nimport { disableTextSelection, restoreTextSelection } from \"./textSelection\";\nimport { useLatest } from \"../useLatest\";\n\nexport type XY = { x: number; y: number };\nexport type UseMoveOptions<S> = {\n  /**\n   * the amount of movement (in pixels) after which the move should start. It prevents interference\n   * with simple click (or more generally, press) events, and provides better UX.\n   * @default 0\n   */\n  dragThreshold?: number;\n  disabled?: boolean;\n  onMoveStart: (args: { from: XY }) => S;\n  onMove: (args: { from: XY; to: XY; movement: XY; startState: S }) => void;\n  onMoveEnd?: (args: { startState: S }) => void;\n};\n\n// TODO: cleanup if unmount happens during drag.\n// TODO: Better even handling for touch devices?\n//  wrapping `useMove` from react-aria to just add support for movement threshold should be the\n//  way to go, but there are a few problems:\n//    - it seemed a little buggy in the example here: https://react-spectrum.adobe.com/react-aria/useMove.html\n//    - the API is not great in a sense that it only gives the diff in last movement.\n//      Also onMoveStart doesn't give the initial position, so it's not possible to even calculate\n//\n// TODO: move should be finished by pressing Escape. onMoveCancel maybe?\n/**\n * Similar to https://react-spectrum.adobe.com/react-aria/useMove.html, with slightly different\n * features and API.\n * NOTE: initially the API was designed in a way that onMove and onMove end callbacks were\n * returned from onMoveStart, instead of being directly passed in the options.\n * This would enable capturing the initial state of each move transaction, by defining whatever\n * variable in onMoveStart and closing over them by onMove and onMoveEnd.\n * The problem with this approach was that although you could capture the initial state of the\n * movement, by closure, any other variable in the outer scopes was also closed over, and you were\n * stuck with the values from the particular render in which the movement was started.\n * Of course, you could work around it by using refs, but it would be unintuitive.\n * So because of that issue, it's redesigned to have onMoveStart, onMove, and onMoveEnd all\n * directly passed as options, but you can return anything from `onMoveStart` which will be passed\n * to onMove and onMoveEnd as `startState`.\n */\nexport function useMove<S>({\n  dragThreshold = 0,\n  disabled,\n  onMoveStart,\n  onMove,\n  onMoveEnd,\n}: UseMoveOptions<S>): { onMouseDown?: MouseEventHandler } {\n  const handlersRef = useLatest({ onMove, onMoveEnd });\n\n  const onMouseDown = (event: React.MouseEvent) => {\n    disableTextSelection();\n    if (event.button !== 0) {\n      restoreTextSelection();\n      return;\n    }\n    const from = { x: event.pageX, y: event.pageY };\n    let dragStarted = false;\n    let startState: S;\n\n    const onMouseMove = (event: MouseEvent) => {\n      const { pageX: x, pageY: y } = event;\n      const movement = { x: x - from.x, y: y - from.y };\n      const isDraggedEnough =\n        Math.abs(movement.x) >= dragThreshold ||\n        Math.abs(movement.y) >= dragThreshold;\n      if (isDraggedEnough && !dragStarted) {\n        dragStarted = true;\n        startState = onMoveStart({ from });\n      }\n      if (dragStarted) {\n        handlersRef.current.onMove({\n          from,\n          to: { x: from.x + movement.x, y: from.y + movement.y },\n          movement,\n          startState,\n        });\n      }\n    };\n    document.addEventListener(\"mousemove\", onMouseMove);\n\n    document.addEventListener(\n      \"mouseup\",\n      () => {\n        restoreTextSelection();\n        if (dragStarted) {\n          handlersRef.current.onMoveEnd?.({ startState });\n        }\n        document.removeEventListener(\"mousemove\", onMouseMove);\n      },\n      { once: true }\n    );\n  };\n  return disabled ? {} : { onMouseDown };\n}\n","import React from \"react\";\nimport { isMac } from \"@react-aria/utils\";\n\n/**\n * TODO: The current name is not accurate, and can be confusing. Rename to something better.\n */\nexport function isCtrlKeyPressed(\n  e: { metaKey: boolean; ctrlKey: boolean } | undefined\n) {\n  if (isMac()) {\n    return e?.metaKey;\n  }\n\n  return e?.ctrlKey;\n}\n\nexport function hasAnyModifier(e: KeyboardEvent | React.KeyboardEvent) {\n  return e.altKey || e.ctrlKey || e.metaKey || e.shiftKey;\n}\n","import { notNull } from \"@intellij-platform/core/utils/array-utils\";\n\nexport interface OverflowObserverRecord {\n  target: Element;\n  overflowedElements: Element[];\n  previouslyOverflowedElements: Element[];\n}\n\nexport type OverflowObserverCallback = (\n  change: OverflowObserverRecord,\n  observer: OverflowObserver\n) => void;\n\n/**\n * Allows observing the list of overflowing children of a given target element.\n * An `IntersectionObserver` is created for each target to observe the intersection between the target and each child\n * element. The child elements are observed/unobserved by the intersection observer as they are added/removed to the\n * DOM, which is observed using a `MutationObserver`.\n * `IntersectionObserver` options such as `rootMargin` are supported, to fine tune what should be considered as\n * overflowed.\n *\n * TODO: add a takeRecords method to allow processing pending mutations before disconnect\n * TODO: maybe add direction option?\n *\n */\nexport class OverflowObserver {\n  private mutationObserver: MutationObserver;\n  private data: Map<\n    Element,\n    {\n      intersectionObserver: IntersectionObserver;\n      currentOverflowElements: Element[];\n    }\n  > = new Map();\n\n  constructor(private callback: OverflowObserverCallback) {\n    this.mutationObserver = new MutationObserver((mutations) => {\n      mutations.forEach((mutation) => {\n        const target = mutation.target;\n        if (!(target instanceof Element)) {\n          return;\n        }\n        mutation.removedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.unobserve(node);\n          }\n        });\n        mutation.addedNodes.forEach((node) => {\n          if (node instanceof Element) {\n            this.data.get(target)?.intersectionObserver.observe(node);\n          }\n        });\n      });\n    });\n  }\n\n  observe(target: Element, options: Omit<IntersectionObserverInit, \"root\">) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n\n    const intersectionObserver = new IntersectionObserver(\n      (entries) => {\n        const data = this.data.get(target);\n        const newHiddenElements = entries\n          .map((entry) =>\n            !entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : undefined\n          )\n          .filter(notNull);\n        const newVisibleElements = entries\n          .map((entry) =>\n            entry.isIntersecting && entry.target instanceof Element\n              ? entry.target\n              : null\n          )\n          .filter(notNull);\n\n        //  Also cover this in Toolbar with a test case\n        const previouslyOverflowedElements =\n          data?.currentOverflowElements || [];\n        const overflowedElements = previouslyOverflowedElements\n          .filter((element) => !newVisibleElements.includes(element))\n          .concat(newHiddenElements)\n          .filter((element) => {\n            // In some cases some elements may be hidden by some styles (e.g. the first/last separator in a toolbar).\n            // It doesn't make sense to report them as overflowed.\n            const isHidden =\n              element instanceof HTMLElement &&\n              element.offsetWidth === 0 &&\n              element.offsetHeight === 0;\n            return !isHidden;\n          });\n        this.callback(\n          {\n            previouslyOverflowedElements,\n            overflowedElements: overflowedElements,\n            target,\n          },\n          this\n        );\n        if (data) {\n          data.currentOverflowElements = overflowedElements;\n        }\n      },\n      {\n        ...options,\n        root: target,\n      }\n    );\n    [...(target?.children || [])].forEach((childElement) => {\n      intersectionObserver.observe(childElement);\n    });\n    this.data.set(target, {\n      intersectionObserver,\n      currentOverflowElements: [],\n    });\n    this.mutationObserver.observe(target, {\n      childList: true,\n    });\n  }\n\n  unobserve(target: Element) {\n    this.data.get(target)?.intersectionObserver.disconnect();\n  }\n\n  disconnect() {\n    [...this.data.values()].forEach(({ intersectionObserver }) =>\n      intersectionObserver.disconnect()\n    );\n    this.data = new Map();\n    this.mutationObserver.disconnect();\n  }\n}\n","import { RefObject, useEffect, useState } from \"react\";\nimport { OverflowObserver } from \"@intellij-platform/core/utils/overflow-utils/OverflowObserver\";\n\n/**\n * Given a ref to a scrollable container, returns the child elements that are not completely visible and\n * are off view because of scroll.\n * @param scrollableContainerRef\n * @param threshold\n */\nexport function useOverflowObserver(\n  scrollableContainerRef: RefObject<HTMLElement>,\n  {\n    threshold = 0.9,\n    rootMargin = \"0px\",\n  }: Omit<IntersectionObserverInit, \"root\"> = {}\n) {\n  const [overflowedElements, setOverflowedElements] = useState<Element[]>([]);\n\n  useEffect(() => {\n    const overflowObserver = new OverflowObserver((change) => {\n      setOverflowedElements(change.overflowedElements);\n    });\n    overflowObserver.observe(scrollableContainerRef.current!, {\n      rootMargin,\n      threshold,\n    });\n    return () => {\n      overflowObserver.disconnect();\n    };\n  }, [\n    /**\n     * It's ok and needed to have the ref value as a dependency here. We don't know if ref is attached to different\n     * elements in each render, and it's ok that it's not a state, since we don't change it, and it's not supposed to\n     * change without a rerender\n     **/\n    scrollableContainerRef.current,\n  ]);\n\n  return {\n    overflowedElements,\n  };\n}\n","import { Key } from \"react\";\nimport { Ord } from \"ramda\";\n\ntype TreeNodeFn<T> = (root: T) => null | readonly T[];\ntype MutableTreeNodeFn<T> = (root: T) => null | T[];\n\ntype Tree<T> = {\n  getChildren: TreeNodeFn<T>;\n  roots: ReadonlyArray<T>;\n};\n\ntype MutableTree<T> = {\n  getChildren: MutableTreeNodeFn<T>;\n  roots: Array<T>;\n};\n\nexport const getExpandAllKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: ReadonlyArray<T>\n) => {\n  const keys: Key[] = roots.map(getKey);\n  const processItem = (node: T | null) => {\n    const children = node ? getChildren(node) : null;\n    if (node == null || !children) {\n      return;\n    }\n    keys.push(getKey(node));\n    children.forEach(processItem);\n  };\n  roots.map(getChildren).flat().forEach(processItem);\n  return keys;\n};\n\nexport const getExpandedToNodesKeys = <T>(\n  /**\n   * represents a tree as a function. Given a node, it should return the array of children or null, if the node is a\n   * leaf. Note that even an empty array will make the node to be considered a non-leaf node and the key is included.\n   * if null is passed, the root(s) node(s) should be returned.\n   */\n  getChildren: TreeNodeFn<T>,\n  /**\n   * a function that converts each node into a key\n   */\n  getKey: (t: T) => Key,\n  roots: ReadonlyArray<T>,\n  targetNodeKeys: Iterable<Key>\n) => {\n  const targetNodeKeySet = new Set(targetNodeKeys);\n  const expandedKeys: Key[] = [];\n  dfsVisit<T, boolean>(\n    getChildren,\n    (node, childValues) => {\n      const key = getKey(node);\n      const isExpanded: boolean =\n        childValues?.some((childValue) => childValue) ||\n        targetNodeKeySet.has(key);\n      if (isExpanded) {\n        expandedKeys.push(key);\n      }\n      return isExpanded;\n    },\n    roots\n  );\n  return expandedKeys;\n};\n\nexport const dfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, childrenValues: null | R[]) => R,\n  roots: ReadonlyArray<T>\n) => {\n  const dfs = (node: T): R => {\n    const children = getChildren(node);\n    const values = children?.map(dfs) ?? null;\n    return visit(node, values);\n  };\n  roots.forEach(dfs);\n};\n\nexport const bfsVisit = <T, R>(\n  getChildren: TreeNodeFn<T>,\n  visit: (node: T, parentValue: R | null) => R,\n  roots: ReadonlyArray<T>\n) => {\n  const bfs: typeof visit = (node, parentValue) => {\n    const result = visit(node, parentValue);\n    const children = getChildren(node);\n    children?.map((childNode) => bfs(childNode, result));\n    return result;\n  };\n  return roots.map((root) => bfs(root, null));\n};\n\nexport const sortTreeNodesInPlace = <T>(\n  by: (t: T) => Ord,\n  tree: MutableTree<T>\n) => {\n  const compareFn = (a: T, b: T) => {\n    const aa = by(a);\n    const bb = by(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  };\n  tree.roots.sort(compareFn);\n  bfsVisit(\n    tree.getChildren,\n    (node) => {\n      const children = tree.getChildren(node);\n      if (children) {\n        children.sort(compareFn);\n      }\n    },\n    tree.roots\n  );\n};\n","import React, { useContext } from \"react\";\n\nexport const useContextOrThrow = <ContextType extends unknown>(\n  Context: React.Context<ContextType | null>,\n  nullErrorMessage: string\n) => {\n  const context = useContext<ContextType | null>(Context);\n\n  if (context == null) {\n    throw new Error(nullErrorMessage);\n  }\n\n  return context;\n};\n","import { useCallback, useLayoutEffect, useRef } from \"react\";\n\n/**\n * Interim solution for non-reactive callbacks, until\n * [useEvent](https://github.com/reactjs/rfcs/blob/useevent/text/0000-useevent.md) (or whatever it will end up being\n * called), becomes available.\n */\nexport function useEventCallback<T extends (...args: any[]) => any>(fn: T): T {\n  let ref = useRef<typeof fn>();\n  useLayoutEffect(() => {\n    ref.current = fn;\n  });\n  const callback = ((...args: Parameters<T>) =>\n    ref.current?.apply(null, args)) as T;\n  return useCallback<T>(callback, []);\n}\n","import { FocusEventHandler } from \"react\";\nimport { getFocusableTreeWalker } from \"@react-aria/focus\";\n\n/**\n * Provides a focus management mechanism for a container that doesn't retain focus but forwards it to its focusable\n * descendants. More specifically:\n * - When the container gets focused, it automatically focuses the first focusable child element.\n *   The {@param forwardFocus} parameter can be used to customize which element should receive focus.\n * - By default, focus is prevented from returning to the container itself when focus is being moved from a descendant\n *   to the container. {@param ignoreFocusedDescendant} can be set to `true`, to disable this behaviour.\n *   If {@param ignoreFocusedDescendant} is true, focus will be forcibly moved to the first element (or the element\n *   specified by {@param forwardFocus}) when the container gets focused.\n *\n * NOTE: This hook does not make the container element focusable. It only returns the focus event handler that should be\n * passed to the container.\n */\nexport function useFocusForwarder({\n  forwardFocus,\n  ignoreFocusedDescendant = false,\n}: {\n  /**\n   * Called when the container gets focused, to forward focus to the appropriate focusable child element.\n   * If not passed, focus is forwarded to the first focusable element, by default.\n   */\n  forwardFocus?: () => void;\n  ignoreFocusedDescendant?: boolean;\n} = {}) {\n  const onFocus: FocusEventHandler = (event) => {\n    if (event.target !== event.currentTarget) {\n      // only when this container is focused. not when anything inside is focused.\n      return;\n    }\n    const possiblyBlurredElement = event.relatedTarget;\n    if (\n      possiblyBlurredElement instanceof Element &&\n      event.currentTarget?.contains(possiblyBlurredElement) &&\n      !ignoreFocusedDescendant\n    ) {\n      // If anything inside the content is being blurred while the container is getting focused, we don't let focus\n      // go from that element, to the container.\n      if (possiblyBlurredElement instanceof HTMLElement) {\n        possiblyBlurredElement.focus();\n      }\n      return;\n    }\n    if (forwardFocus) {\n      forwardFocus();\n    } else {\n      (\n        getFocusableTreeWalker(event.currentTarget).firstChild() as HTMLElement\n      )?.focus();\n    }\n  };\n  return { focusForwarderProps: { onFocus } };\n}\n","import React, { useRef } from \"react\";\n\n/**\n * For when a component needs to forward ref, but it too needs to use the same ref. Since forwarded ref can be in form\n * of a callback too, this will normalize it as a RefObject.\n * NOTE: Should we keep the ref in state because of edge cases?\n */\nexport default function useForwardedRef<T>(\n  forwardedRef: React.Ref<T>\n): React.RefObject<T> {\n  const innerRef = useRef<T>(null);\n  React.useEffect(() => {\n    if (!forwardedRef) {\n      return;\n    }\n\n    if (typeof forwardedRef === \"function\") {\n      forwardedRef(innerRef.current);\n    } else {\n      (forwardedRef as React.MutableRefObject<T | null>).current =\n        innerRef.current;\n    }\n  });\n\n  return innerRef;\n}\n","import { useLayoutEffect, useRef } from \"react\";\n\nexport function useLatest<T>(value: T) {\n  const ref = useRef(value);\n  useLayoutEffect(() => {\n    ref.current = value;\n  });\n  return ref;\n}\n","import React, { useRef } from \"react\";\nimport { useLayoutEffect } from \"@react-aria/utils\";\nimport {\n  AriaPositionProps,\n  PositionAria,\n  useOverlayPosition,\n} from \"@react-aria/overlays\";\n\n/**\n * `useOverlayPosition` only supports positioning overlay relative to an element, at the moment.\n *  For context menu or tooltip, we may want to position the overlay based on the coordinates of the mouse event which\n *  has triggered the overlay.\n *  This hook wraps `useOverlayPosition`, and is very similar to it, but you don't need to pass `targetRef`. Instead,\n *  you have to call the updatePosition in the event handler that triggers the overlay, passing the `MouseEvent` object.\n *\n * This is hopefully a temporary solution to circumvents the limitation of `useOverlayPosition`, until it supports\n * non-element based positioning as well. It works by appending a dummy 1x1 px element to body and positioning it\n * based on React.MouseEvent objects. Then it uses a ref to that element as the `targetRef`, passed to `useOverlayPosition`\n *\n * @example\n * ```ts\n * const { updatePosition, overlyProps} = useMouseEventOverlayPosition({ overlayRef });\n *\n * const onContextMenu = (event: React.ReactEvent) => {\n *  updatePosition(event);\n *  // ...\n * }\n * ```\n */\nlet globalMoveHandler: null | ((e: MouseEvent) => void) = null;\nlet lastMouseClientPos = { clientX: 0, clientY: 0 };\n\nexport function useMouseEventOverlayPosition(\n  options: Omit<AriaPositionProps, \"targetRef\">\n): Omit<PositionAria, \"updatePosition\"> & {\n  updatePosition: (event?: React.MouseEvent) => void;\n} {\n  const targetRef = useRef<HTMLElement>(null);\n\n  useLayoutEffect(() => {\n    if (!globalMoveHandler) {\n      // After the first use of the hook, the listener will be attached forever. Not a big deal but can be improved.\n      globalMoveHandler = ({ clientX, clientY }) => {\n        lastMouseClientPos = { clientX, clientY };\n      };\n      document.addEventListener(\"mousemove\", globalMoveHandler);\n    }\n    if (!targetRef.current) {\n      const fakeTarget = document.createElement(\"span\");\n      Object.assign(fakeTarget.style, {\n        width: \"0px\",\n        height: \"0px\",\n        pointerEvents: \"none\",\n        position: \"fixed\",\n        visibility: \"hidden\",\n      });\n      document.body.appendChild(fakeTarget);\n      // @ts-expect-error We intentionally don't pass null to generic argument, to not have it as a mutable nullable\n      // ref, since we are mimicking an element ref.\n      targetRef.current = fakeTarget;\n      return () => {\n        fakeTarget.remove();\n      };\n    }\n  }, []);\n\n  useLayoutEffect(() => {\n    if (options.isOpen && targetRef.current) {\n      targetRef.current.style.left = `${lastMouseClientPos.clientX}px`;\n      targetRef.current.style.top = `${lastMouseClientPos.clientY}px`;\n      updatePosition();\n    }\n  }, [options.isOpen, targetRef.current]);\n\n  const { updatePosition, ...result } = useOverlayPosition({\n    ...options,\n    targetRef,\n  });\n\n  return {\n    ...result,\n    /**\n     * Ref to be passed to be passed as targetRef\n     */\n    updatePosition: (e?: React.MouseEvent) => {\n      if (targetRef.current && e) {\n        targetRef.current.style.left = `${e.clientX}px`;\n        targetRef.current.style.top = `${e.clientY}px`;\n      }\n      updatePosition();\n    },\n  };\n}\n","import { useEffect, useRef } from \"react\";\n\nexport function usePrevious<T>(value: T): T {\n  const ref = useRef(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","export class ImmutableSet<T> implements ReadonlySet<T> {\n  readonly size: number;\n  private readonly set: ReadonlySet<T>;\n\n  constructor(values: Iterable<T>) {\n    this.set = new Set(values);\n    this.size = this.set.size;\n  }\n\n  add(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.add(item);\n      });\n    });\n  }\n\n  delete(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        newValue.delete(item);\n      });\n    });\n  }\n\n  toggle(...items: T[]): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      items.forEach((item) => {\n        if (!newValue.delete(item)) {\n          newValue.add(item);\n        }\n      });\n    });\n  }\n\n  clear(): ImmutableSet<T> {\n    return this.setValueWithMutation((newValue) => {\n      newValue.clear();\n    });\n  }\n\n  private setValueWithMutation(\n    mutate: (newValue: Set<T>) => void\n  ): ImmutableSet<T> {\n    const newValue = new Set(this.set);\n    mutate(newValue);\n    return new ImmutableSet(newValue);\n  }\n\n  ////////////////////////////////////////////////// delegated methods /////////////////////////////////////////////////\n  forEach(...args: Parameters<ReadonlySet<T>[\"forEach\"]>): void {\n    return this.set.forEach(...args);\n  }\n\n  has(value: T): boolean {\n    return this.set.has(value);\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this.set[Symbol.iterator]();\n  }\n\n  entries(): IterableIterator<[T, T]> {\n    return this.set.entries();\n  }\n\n  keys(): IterableIterator<T> {\n    return this.set.keys();\n  }\n\n  values(): IterableIterator<T> {\n    return this.set.values();\n  }\n}\n","import { useControlledState } from \"@react-stately/utils\";\nimport { useMemo } from \"react\";\nimport { ImmutableSet } from \"./immutableSet\";\n\n/**\n * Creates map interface out of a setter of form (currentValue: Map) => Map\n * Use {@link useControllableSet} instead if you need a Set state in a React component.\n * This is useful for use outside React components, such as state management libraries.\n */\nexport const createSetInterface = <T>(\n  set: (value: (prevState: Set<T>) => Set<T>) => void\n) => ({\n  add: (...values: T[]) =>\n    set(\n      (currentValue) => new Set(new ImmutableSet(currentValue).add(...values))\n    ),\n  delete: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).delete(...values))\n    ),\n  clear: () =>\n    set((currentValue) => new Set(new ImmutableSet(currentValue).clear())),\n  toggle: (...values: T[]) =>\n    set(\n      (currentValue) =>\n        new Set(new ImmutableSet(currentValue).toggle(...values))\n    ),\n});\n\nfunction useStateSetterForSet<T>(\n  setValue: (value: (prevState: Set<T>) => Set<T>, ...args: any[]) => void\n) {\n  return useMemo(() => createSetInterface(setValue), [setValue]);\n}\n\n/**\n * controllable state management for a Set. returns a tuple containing the value and an object with Set functions on it,\n * which would update the state.\n */\nexport const useControllableSet = <T>(\n  valueProp: Set<T> | undefined,\n  defaultValue: Set<T> = new Set(),\n  onChange: ((newValue: Set<T>) => void) | undefined\n) => {\n  const [value, setValue] = useControlledState(\n    valueProp!, // bad typing in useControlledState\n    defaultValue,\n    onChange! // bad typing in useControlledState\n  );\n\n  // @ts-expect-error FIXME https://github.com/adobe/react-spectrum/issues/2320\n  return [value, useStateSetterForSet(setValue)] as const;\n};\n","import React from \"react\";\nimport Markdown from \"markdown-to-jsx\";\n// @ts-expect-error ¯\\_(ツ)_/¯\nimport { DocgenInfo } from \"@storybook/addon-docs/dist/ts3.9/lib/docgen/types\";\nimport MDXComponents from \"@theme/MDXComponents\";\nimport { parse } from \"jsdoc-parse-plus\";\n// import { ApiModel, ApiPackage } from \"@microsoft/api-extractor-model\";\n\n// const apiModel: ApiModel = new ApiModel();\n// language=file-reference\n// const apiPackage: ApiPackage = apiModel.loadPackage(\n//   \"../../../jui/temp/core.api.json\"\n// );\n// console.log(\"apiPackage\", ApiPackage);\n\ntype WithDocGenInfo<T = any> = T & {\n  __docgenInfo?: DocgenInfo;\n};\n/**\n * Renders description (aka Summary) of an exported symbol, from it's jsdoc (tsdoc) comment block.\n * The plan is to use the ApiModel created by @microsoft/api-extractor, but there are issues preventing that at the\n * moment. So we are using a fallback implementation which relies on `react-docgen` babel plugin which adds\n * `__docgetInfo` property to all exports.\n */\nexport const ApiDescription = ({\n  of,\n}: {\n  of:\n    | WithDocGenInfo\n    | {\n        render?: WithDocGenInfo /*for ref forwarding components */;\n      };\n}) => {\n  const docgenInfo = of.render?.__docgenInfo || of.__docgenInfo;\n  if (!docgenInfo?.description) {\n    console.log(\"ApiDescription not found for:\", of);\n    // eslint-disable-next-line no-undef\n    if (process.env.NODE_ENV === \"development\")\n      return (\n        <div style={{ background: \"#ffd7d7\" }}>\n          Could not find API description for:\n          <pre style={{ background: \"none\" }}>\n            {JSON.stringify(of, null, 2)}\n          </pre>\n          See the console.\n        </div>\n      );\n    throw new Error(\"API documentation not found.\");\n  }\n  return (\n    <Markdown options={{ overrides: MDXComponents }}>\n      {deLinkify(docgenInfo.description)}\n    </Markdown>\n  );\n};\n\n/**\n * replaces jsdoc @link tags with inline code. Temporary hack until @microsoft/api-extractor-model is used.\n * Example: {@link something} will be converted to `something`\n */\nconst deLinkify = (description: string) => {\n  const comment = toCommentBlock(description);\n  return (parse(comment, [], (link) => `\\`${link.text}\\``).description as any)\n    ?.value;\n};\n\nconst toCommentBlock = (str: string) =>\n  [\"/**\", ...str.split(\"\\n\").map((line) => `* ${line}`), \"*/\"].join(\"\\n\");\n","import Link from \"@docusaurus/Link\";\nimport { useBaseUrlUtils } from \"@docusaurus/useBaseUrl\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledIframe = styled.iframe`\n  width: 100%;\n  border: none;\n`;\n\nconst externalLinkIcon = (\n  <svg\n    width=\"13.5\"\n    height=\"13.5\"\n    aria-hidden=\"true\"\n    viewBox=\"0 0 24 24\"\n    className=\"iconExternalLink__-_-node_modules-@docusaurus-theme-classic-lib-next-theme-IconExternalLink-styles-module\"\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M21 13v10h-21v-19h12v2h-10v15h17v-8h2zm3-12h-10.988l4.035 4-6.977 7.07 2.828 2.828 6.977-7.07 4.125 4.172v-11z\"\n    ></path>\n  </svg>\n);\nconst storybookBaseUrl =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://localhost:6008\"\n    : \"/storybook\";\n\n/**\n * A component for embedding a story based on storyId.\n *\n * TODO: pass theme based on docusaurus theme.\n */\nexport const EmbeddedStory = ({\n  height = 450,\n  storyId,\n}: {\n  storyId: string;\n  height?: number;\n}) => {\n  const { withBaseUrl } = useBaseUrlUtils();\n  return (\n    <>\n      <Link\n        href={`${storybookBaseUrl}/?path=/story/${storyId}`}\n        target=\"_blank\"\n      >\n        Open in storybook\n        {externalLinkIcon}\n      </Link>\n      <StyledIframe\n        style={{ height }}\n        src={withBaseUrl(\n          `${storybookBaseUrl}/iframe.html?id=${storyId}&args=&viewMode=story`\n        )}\n      />\n    </>\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledSvg = styled.svg`\n  position: absolute;\n  width: 24px;\n  left: 50%;\n  bottom: 1rem;\n  transform: translate(-50%, 0) rotate(180deg);\n`;\n\nconst StyledExpandButton = styled.div`\n  position: absolute;\n  width: 100%;\n  height: 50%;\n  bottom: 0;\n  background: linear-gradient(0deg, rgba(255, 255, 255, 1), transparent);\n  cursor: pointer;\n  ${StyledSvg} {\n    opacity: 0;\n    transition: opacity 0.3s;\n  }\n  &:hover ${StyledSvg} {\n    opacity: 1;\n  }\n`;\nconst StyledContainer = styled.div<{ expanded: boolean }>`\n  position: relative;\n  max-height: ${({ expanded }) => (expanded ? undefined : \"200px\")};\n`;\n\nexport function Expandable({\n  children,\n  expanded,\n  onExpand,\n  isExpandable,\n  setIsExpandable,\n}: {\n  children: React.ReactNode;\n  expanded: boolean;\n  onExpand: () => void;\n  isExpandable: boolean;\n  setIsExpandable: (isExpandable: boolean) => void;\n}) {\n  const ref = useRef<HTMLDivElement>();\n  useEffect(() => {\n    const expandable = ref.current?.scrollHeight > ref.current?.offsetHeight;\n    if (expandable !== isExpandable) {\n      setIsExpandable(expandable);\n    }\n  });\n  return (\n    <StyledContainer ref={ref} expanded={expanded}>\n      {children}\n      {!expanded && isExpandable && (\n        <StyledExpandButton onClick={onExpand}>\n          <StyledSvg viewBox=\"0 0 50 50\">\n            <path\n              fill=\"none\"\n              stroke=\"#000\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M-20 10 0-10l20 20\"\n              transform=\"translate(25 25)\"\n            />\n          </StyledSvg>\n        </StyledExpandButton>\n      )}\n    </StyledContainer>\n  );\n}\n","/**\n * NOTE: this file is copied from Docusaurus repo, to customize the live code blocks UI, since the exported\n * functionality doesn't allow for the needed customizations.\n * Original file: https://github.com/facebook/docusaurus/blob/main/packages/docusaurus-theme-live-codeblock/src/theme/Playground/index.tsx\n */\n\nimport React, { useState } from \"react\";\nimport clsx from \"clsx\";\nimport useIsBrowser from \"@docusaurus/useIsBrowser\";\nimport { LiveEditor, LiveError, LivePreview, LiveProvider } from \"react-live\";\nimport Translate from \"@docusaurus/Translate\";\nimport BrowserOnly from \"@docusaurus/BrowserOnly\";\nimport {\n  ErrorBoundaryTryAgainButton,\n  usePrismTheme,\n} from \"@docusaurus/theme-common\";\nimport ErrorBoundary from \"@docusaurus/ErrorBoundary\";\n\nimport type { Props } from \"@theme/Playground\";\nimport type { Props as ErrorProps } from \"@theme/Error\";\n\nimport styles from \"@docusaurus/theme-live-codeblock/lib/theme/Playground/styles.module.css\";\nimport { Expandable } from \"./Expandable\";\nimport {\n  PlatformIcon,\n  IconButton,\n  ThemeProvider,\n  Theme,\n  ActionTooltip,\n  TooltipTrigger,\n} from \"@intellij-platform/core\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\n\nfunction Header({\n  children,\n  icons,\n}: {\n  children: React.ReactNode;\n  icons?: React.ReactNode;\n}) {\n  return (\n    <div className={clsx(styles.playgroundHeader)} style={{ display: \"flex\" }}>\n      <span style={{ flex: 1 }}>{children}</span>\n      {icons}\n    </div>\n  );\n}\n\nfunction LivePreviewLoader() {\n  // Is it worth improving/translating?\n  return <div>Loading...</div>;\n}\n\nfunction ErrorFallback({ error, tryAgain }: ErrorProps): JSX.Element {\n  return (\n    <div className={styles.errorFallback}>\n      <p>{error.message}</p>\n      <ErrorBoundaryTryAgainButton onClick={tryAgain} />\n    </div>\n  );\n}\n\nfunction Preview() {\n  // No SSR for the live preview\n  // See https://github.com/facebook/docusaurus/issues/5747\n  return (\n    <BrowserOnly fallback={<LivePreviewLoader />}>\n      {() => (\n        <>\n          <ErrorBoundary fallback={(params) => <ErrorFallback {...params} />}>\n            <LivePreview />\n          </ErrorBoundary>\n          <LiveError />\n        </>\n      )}\n    </BrowserOnly>\n  );\n}\n\nfunction ResultWithHeader() {\n  return (\n    <>\n      <Header>\n        <Translate\n          id=\"theme.Playground.result\"\n          description=\"The result label of the live codeblocks\"\n        >\n          Result\n        </Translate>\n      </Header>\n      {/* https://github.com/facebook/docusaurus/issues/5747 */}\n      <div className={styles.playgroundPreview}>\n        <Preview />\n      </div>\n    </>\n  );\n}\n\nfunction ThemedLiveEditor({\n  expanded,\n  isExpandable,\n  onExpand,\n  setIsExpandable,\n}: {\n  expanded: boolean;\n  isExpandable: boolean;\n  onExpand: () => void;\n  setIsExpandable: (expandable: boolean) => void;\n}) {\n  const isBrowser = useIsBrowser();\n  return (\n    <Expandable\n      expanded={expanded}\n      isExpandable={isExpandable}\n      onExpand={onExpand}\n      setIsExpandable={setIsExpandable}\n    >\n      <LiveEditor\n        // We force remount the editor on hydration,\n        // otherwise dark prism theme is not applied\n        key={String(isBrowser)}\n        className={styles.playgroundEditor}\n      />\n    </Expandable>\n  );\n}\n\nfunction EditorWithHeader() {\n  const [expanded, setExpanded] = useState(false);\n  const [expandable, setExpandable] = useState(false);\n  return (\n    <>\n      <Header\n        icons={\n          <ThemeProvider theme={new Theme(lightThemeJson as any)}>\n            {(expanded || expandable) && (\n              <TooltipTrigger\n                tooltip={\n                  <ActionTooltip\n                    actionName={expanded ? \"Collapse code\" : \"Expand code\"}\n                  />\n                }\n              >\n                <IconButton\n                  onPress={() => setExpanded((expanded) => !expanded)}\n                >\n                  <PlatformIcon\n                    icon={\n                      expanded ? \"actions/collapseall\" : \"actions/expandall\"\n                    }\n                  />\n                </IconButton>\n              </TooltipTrigger>\n            )}\n          </ThemeProvider>\n        }\n      >\n        <Translate\n          id=\"theme.Playground.liveEditor\"\n          description=\"The live editor label of the live codeblocks\"\n        >\n          Live Editor\n        </Translate>\n      </Header>\n      <ThemedLiveEditor\n        expanded={expanded}\n        onExpand={() => setExpanded(true)}\n        isExpandable={expandable}\n        setIsExpandable={setExpandable}\n      />\n    </>\n  );\n}\n\nexport default function Playground({\n  children,\n  transformCode,\n  ...props\n}: Props): JSX.Element {\n  const prismTheme = usePrismTheme();\n\n  const noInline = props.metastring?.includes(\"noInline\") ?? false;\n\n  return (\n    <>\n      <div className={styles.playgroundContainer}>\n        <LiveProvider\n          code={children.replace(/\\n$/, \"\")}\n          noInline={noInline}\n          transformCode={transformCode ?? ((code) => `${code};`)}\n          theme={prismTheme}\n          {...props}\n        >\n          <ResultWithHeader />\n          <EditorWithHeader />\n        </LiveProvider>\n      </div>\n    </>\n  );\n}\n","import { styled } from \"../styled\";\n\nexport const SpeedSearchContainer = styled.div`\n  position: relative;\n  overflow: visible;\n  max-height: 100%;\n`;\n","import styled from \"styled-components\";\nimport { SpeedSearchContainer } from \"../SpeedSearch/SpeedSearchContainer\";\n\nexport const CollectionSpeedSearchContainer = styled(SpeedSearchContainer)<{\n  fillAvailableSpace?: boolean;\n}>`\n  display: flex;\n  flex-direction: column;\n  flex: ${({ fillAvailableSpace }) => (fillAvailableSpace ? 1 : undefined)};\n`;\n","import { ListState } from \"@react-stately/list\";\nimport { SelectionManager } from \"@react-stately/selection\";\nimport { HTMLProps, Key, RefObject } from \"react\";\nimport { mergeProps } from \"@react-aria/utils\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport {\n  CollectionSpeedSearchContextValue,\n  useCollectionSpeedSearch,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport { SpeedSearchProps } from \"@intellij-platform/core/SpeedSearch\";\nimport { SpeedSearchPopupProps } from \"../../SpeedSearch/SpeedSearchPopup\";\nimport { TextRange } from \"../../TextRange\";\nimport { ListProps, useList } from \"../useList\";\n\ninterface UseListProps\n  extends Omit<ListProps, \"keyboardDelegate\" | \"disallowTypeAhead\">,\n    Pick<SpeedSearchProps, \"keepSearchActiveOnBlur\"> {}\n\nexport function useSpeedSearchList<T>(\n  props: UseListProps,\n  listState: ListState<T>,\n  ref: RefObject<HTMLElement>\n): ReturnType<typeof useList<T>> & {\n  searchPopupProps: SpeedSearchPopupProps;\n  focused: boolean;\n  selectionManager: SelectionManager;\n  speedSearchContextValue: CollectionSpeedSearchContextValue;\n  matches: Map<Key, TextRange[]>;\n} {\n  const { keepSearchActiveOnBlur } = props;\n\n  const {\n    speedSearch,\n    selectionManager,\n    keyboardDelegate,\n    containerProps: speedSearchContainerProps,\n    searchPopupProps,\n    speedSearchContextValue,\n  } = useCollectionSpeedSearch({\n    collection: listState.collection,\n    selectionManager: listState.selectionManager,\n    keyboardDelegate: new ListKeyboardDelegate(\n      listState.collection,\n      listState.disabledKeys,\n      ref\n    ),\n    keepSearchActiveOnBlur,\n    ref,\n  });\n  const { listProps, ...otherOutputs } = useList(\n    {\n      ...props,\n      disallowTypeAhead: true,\n      keyboardDelegate,\n    },\n    { ...listState, selectionManager },\n    ref\n  );\n\n  return {\n    ...otherOutputs,\n    listProps: mergeProps(listProps, speedSearchContainerProps),\n    matches: speedSearch.matches,\n    selectionManager,\n    speedSearchContextValue,\n    searchPopupProps,\n  };\n}\n","import React, { ForwardedRef } from \"react\";\nimport { AriaListBoxProps } from \"@react-types/listbox\";\nimport { useObjectRef } from \"@react-aria/utils\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { Node } from \"@react-types/shared\";\n\nimport {\n  CollectionSpeedSearchContainer,\n  CollectionSpeedSearchContext,\n  SpeedSearchItemHighlightsProvider,\n} from \"@intellij-platform/core/CollectionSpeedSearch\";\nimport {\n  SpeedSearch,\n  SpeedSearchPopup,\n  SpeedSearchProps,\n} from \"@intellij-platform/core/SpeedSearch\";\nimport { CollectionRefProps } from \"@intellij-platform/core/Collections/useCollectionRef\";\n\nimport { StyledList } from \"../StyledList\";\nimport { ListProps } from \"../List\";\nimport { useListState } from \"../useListState\";\nimport { ListItem } from \"../ListItem\";\nimport { ListContext } from \"../ListContext\";\nimport { useListVirtualizer } from \"../useListVirtualizer\";\nimport { useSpeedSearchList } from \"./useSpeedSearchList\";\n\nexport interface SpeedSearchListProps<T extends object>\n  extends ListProps<T>,\n    SpeedSearchProps {}\n\n/**\n * List component with {@link SpeedSearch}, which is a more advanced version of typeahead.\n */\nexport const SpeedSearchList = React.forwardRef(function SpeedSearchList<\n  T extends object\n>(\n  {\n    allowEmptySelection = false,\n    fillAvailableSpace = false,\n    estimatedItemHeight,\n    ...inputProps\n  }: SpeedSearchListProps<T>,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const props: AriaListBoxProps<T> & CollectionRefProps = {\n    ...inputProps,\n    disallowEmptySelection: !allowEmptySelection,\n  };\n  const ref = useObjectRef(forwardedRef);\n  const state = useListState(props);\n\n  const { listProps, listContext, searchPopupProps, speedSearchContextValue } =\n    useSpeedSearchList({ ...props, isVirtualized: true }, state, ref);\n\n  const {\n    virtualizerProps: { children: renderNode, ...virtualizerProps },\n  } = useListVirtualizer({\n    state,\n    estimatedItemHeight,\n    renderItem: (item) => (\n      <SpeedSearchItemHighlightsProvider itemKey={item.key}>\n        <ListItem key={item.key} item={item} />\n      </SpeedSearchItemHighlightsProvider>\n    ),\n  });\n\n  return (\n    <ListContext.Provider value={listContext}>\n      <CollectionSpeedSearchContainer fillAvailableSpace={fillAvailableSpace}>\n        <CollectionSpeedSearchContext.Provider value={speedSearchContextValue}>\n          <SpeedSearchPopup {...searchPopupProps} />\n          <StyledList\n            as={Virtualizer<Node<any>, any>}\n            ref={ref}\n            fillAvailableSpace={fillAvailableSpace}\n            {...virtualizerProps}\n            {...listProps}\n          >\n            {renderNode}\n          </StyledList>\n        </CollectionSpeedSearchContext.Provider>\n      </CollectionSpeedSearchContainer>\n    </ListContext.Provider>\n  );\n});\n","import React from \"react\";\nimport { type ActionGroup } from \"@intellij-platform/core/ActionSystem/ActionGroup\";\nimport { type ActionMenuProps, ActionsMenu } from \"./ActionsMenu\";\n\nexport type ActionGroupMenuProps = Omit<ActionMenuProps, \"actions\"> & {\n  actionGroup: ActionGroup;\n};\n/**\n * Renders children of an action group as a menu.\n */\nexport const ActionGroupMenu = ({\n  actionGroup,\n  ...props\n}: ActionGroupMenuProps) => {\n  return (\n    <ActionsMenu\n      aria-label={actionGroup.title}\n      actions={actionGroup.children}\n      {...props}\n    />\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n/**\n * Green circle indicator used with icons.\n * Reference: platform/execution/src/com/intellij/execution/runners/IndicatorIcon.kt\n */\nexport const StyledIconLiveIndicator = styled.span`\n  position: absolute;\n  width: 4px;\n  height: 4px;\n  border-radius: 1000px;\n  background: #00ff00;\n  box-shadow: 0.5px 0.5px 1px 1px rgba(0, 0, 0, 0.4);\n  bottom: 1px;\n  right: 1px;\n`;\n","import { mergeProps, useObjectRef } from \"@react-aria/utils\";\nimport React, { ForwardedRef, HTMLProps } from \"react\";\nimport { SpeedSearchContainer } from \"./SpeedSearchContainer\";\nimport { SpeedSearchPopup } from \"./SpeedSearchPopup\";\nimport {\n  SpeedSearchStateProps,\n  useSpeedSearch,\n  useSpeedSearchState,\n} from \"./useSpeedSearch\";\n\ninterface Props extends SpeedSearchStateProps {\n  children: React.ReactNode;\n  keepSearchActiveOnBlur?: boolean;\n  match?: boolean;\n  className?: string;\n  containerProps?: Omit<HTMLProps<HTMLDivElement>, \"as\" | \"ref\">;\n}\n\n// Maybe no need for this component, now that almost everything is moved to hooks, and a couple of\n// styled components. Then useSpeedSearchState can also be moved to useSpeedSearch\nexport const SpeedSearch = React.forwardRef(function SpeedSearch(\n  {\n    children,\n    keepSearchActiveOnBlur = false,\n    className,\n    containerProps = {},\n    match,\n    ...otherProps\n  }: Props,\n  forwardedRef: ForwardedRef<HTMLDivElement>\n) {\n  const ref = useObjectRef(forwardedRef);\n  const speedSearchState = useSpeedSearchState(otherProps);\n  const { containerProps: speedSearchContainerProps } = useSpeedSearch(\n    { keepSearchActiveOnBlur: keepSearchActiveOnBlur },\n    speedSearchState,\n    ref\n  );\n\n  return (\n    <SpeedSearchContainer\n      /* We might as well use useFocusable. The return type was troublesome in the first try. */\n      tabIndex={-1}\n      ref={ref}\n      {...mergeProps(containerProps, speedSearchContainerProps, { className })}\n    >\n      <SpeedSearchPopup active={speedSearchState.active} match={match}>\n        {speedSearchState.searchTerm}\n      </SpeedSearchPopup>\n      {children}\n    </SpeedSearchContainer>\n  );\n});\n","import React, { ForwardedRef, RefObject, useRef } from \"react\";\nimport { Node } from \"@react-types/shared\";\nimport { Virtualizer } from \"@react-aria/virtualizer\";\nimport { TreeProps as StatelyTreeProps } from \"@react-stately/tree\";\nimport { StyledTree } from \"./StyledTree\";\nimport { TreeRefValue } from \"./useTreeRef\";\nimport { TreeNode } from \"./TreeNode\";\nimport { TreeContext } from \"./TreeContext\";\nimport { useTreeState } from \"./useTreeState\";\nimport { SelectableTreeProps, useSelectableTree } from \"./useSelectableTree\";\nimport { useTreeVirtualizer } from \"./useTreeVirtualizer\";\nimport { CollectionCacheInvalidationProps } from \"@intellij-platform/core/Collections/useCollectionCacheInvalidation\";\nimport {\n  CollectionRefProps,\n  useCollectionRef,\n} from \"@intellij-platform/core/Collections/useCollectionRef\";\nimport { useObjectRef } from \"@react-aria/utils\";\n\nexport interface TreeProps<T extends object>\n  extends Omit<StatelyTreeProps<T>, \"disallowEmptySelection\">,\n    CollectionCacheInvalidationProps,\n    CollectionRefProps,\n    Omit<SelectableTreeProps<T>, \"keyboardDelegate\" | \"isVirtualized\"> {\n  fillAvailableSpace?: boolean;\n  /**\n   * When true, shows the tree in focused style, even when it's not focused. A common use case is when the tree\n   * is virtually focused. i.e. the focus is physically on some other element (like a search input) which handles\n   * keyboard events as if the tree was focused.\n   */\n  showAsFocused?: boolean;\n  treeRef?: RefObject<TreeRefValue>;\n}\n\n/**\n * TODO:\n *  - Match select all behaviour. Currently, `getSelectAllKeys` in `SelectionManager` returns\n *   all nested keys too. But it's not aligned with Tree implementation in Intellij Platform. And\n *   beside from that, it seems to be a little inconsistent in some edge cases where you select all,\n *   and then deselect a node. Then all of a sudden, all collapsed nested keys are no longer selected.\n */\nexport const Tree = React.forwardRef(\n  <T extends object>(\n    { fillAvailableSpace = false, treeRef, ...props }: TreeProps<T>,\n    forwardedRef: ForwardedRef<HTMLDivElement>\n  ) => {\n    const state = useTreeState(props, treeRef);\n    useCollectionRef(props, state);\n    const ref = useObjectRef(forwardedRef);\n\n    const { treeProps, treeContext } = useSelectableTree(\n      {\n        ...props,\n        isVirtualized: true,\n      },\n      state,\n      ref\n    );\n    const { virtualizerProps } = useTreeVirtualizer({ state });\n\n    return (\n      <TreeContext.Provider value={treeContext}>\n        <StyledTree\n          as={Virtualizer<Node<any>, unknown>}\n          ref={ref}\n          fillAvailableSpace={fillAvailableSpace}\n          {...virtualizerProps}\n          {...treeProps}\n        >\n          {(itemType: string, item: Node<any>) => (\n            <TreeNode key={item.key} item={item as Node<T>} />\n          )}\n        </StyledTree>\n      </TreeContext.Provider>\n    );\n  }\n);\n","import React, { useRef } from \"react\";\nimport { AutoHoverPlatformIcon } from \"@intellij-platform/core/Icon\";\nimport { useProgressBarPauseIconButton } from \"./ProgressBar\";\n\ninterface ProgressBarPauseButtonProps {\n  /**\n   * Whether progress is paused.\n   */\n  paused: boolean;\n  /**\n   * Called when progress is paused or resumed.\n   * @param paused `true` when progress is being paused. `false` when resumed.\n   */\n  onPausedChange: (paused: boolean) => void | Promise<unknown>;\n\n  /**\n   * whether small icon should be used.\n   */\n  small?: boolean;\n}\n\n/**\n * Pause/Resume icon button for progress bar, to be used in {@link ProgressBarProps#button}.\n */\nexport const ProgressBarPauseButton = ({\n  paused,\n  onPausedChange,\n  small,\n}: ProgressBarPauseButtonProps) => {\n  const ref = useRef<HTMLSpanElement>(null);\n  const { buttonProps } = useProgressBarPauseIconButton(\n    {\n      onPress: () => onPausedChange(!paused),\n      hoverTooltip: paused ? \"Resume\" : \"Pause\",\n      paused,\n    },\n    ref\n  );\n  return (\n    <AutoHoverPlatformIcon\n      {...buttonProps}\n      icon={\n        paused\n          ? `process/progressResume${small ? \"Small\" : \"\"}.svg`\n          : `process/progressPause${small ? \"Small\" : \"\"}.svg`\n      }\n    />\n  );\n};\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as juiComponents from \"@intellij-platform/core\";\nimport darculaThemeJson from \"@intellij-platform/core/themes/darcula.theme.json\";\nimport lightThemeJson from \"@intellij-platform/core/themes/intellijlaf.theme.json\";\nimport highContrastThemeJson from \"@intellij-platform/core/themes/HighContrast.theme.json\";\n\nconst LazyExampleApp = React.lazy(() => import(\"jui-example-app/src/App\"));\nconst ExampleApp = () => (\n  // Because ReactLive doesn't render a Suspense around what it renders.\n  <React.Suspense fallback=\"loading\">\n    <LazyExampleApp />\n  </React.Suspense>\n);\nimport React from \"react\";\n\n// Add react-live imports you need here\nconst ReactLiveScope = {\n  React,\n  ...React,\n  ...juiComponents,\n  ExampleApp,\n  darculaThemeJson,\n  lightThemeJson,\n  highContrastThemeJson,\n};\n\nexport default ReactLiveScope;\n","// extracted by mini-css-extract-plugin\nexport default {\"playground\":\"playground_whuD\",\"noPadding\":\"noPadding_tWI2\"};","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from \"react\";\nimport { useTheme } from \"styled-components\";\nimport Playground from \"./Playground\";\nimport ReactLiveScope from \"@theme/ReactLiveScope\";\nimport CodeBlock from \"@theme-init/CodeBlock\";\nimport clsx from \"clsx\";\nimport styles from \"../Playground/style-overrides.module.css\";\n\nconst withLiveEditor = (Component) => {\n  function WithLiveEditor(props) {\n    if (props.live) {\n      // idea: We can support playground with alternative sources, where each of them will show up as a button\n      // below the default playground. Clicking on buttons will switch to that example. There can be a simple syntax\n      // for embedding multiple sources in one code block which then will be converted into examples here.\n      return <Playground scope={ReactLiveScope} {...props} />;\n    }\n\n    return <Component {...props} />;\n  }\n\n  return WithLiveEditor;\n};\n\nconst withThemeBackground = (Component) => {\n  function WithThemeBackground(props) {\n    const theme = useTheme();\n    const content = <Component {...props} />;\n    const style = {\n      \"--ifm-list-item-margin\": 0,\n    };\n\n    if (props.themed) {\n      style.color = theme.color(\"*.foreground\");\n      style[\"--ifm-pre-background\"] = theme.color(\"*.background\");\n      style[\"--ifm-code-background\"] = \"none\";\n    }\n    return (\n      <div\n        style={style}\n        className={clsx(styles.playground, {\n          [styles.noPadding]: props.noPadding,\n        })}\n      >\n        {content}\n      </div>\n    );\n  }\n\n  return WithThemeBackground;\n};\n\nexport default withThemeBackground(withLiveEditor(CodeBlock));\n","\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\n/* @jsxFrag React.Fragment */\n\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'Popup';\nexport const metadata = {\n  \"unversionedId\": \"components/Popup\",\n  \"id\": \"components/Popup\",\n  \"title\": \"Popup\",\n  \"description\": \"Features\",\n  \"source\": \"@site/docs/components/Popup.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/Popup\",\n  \"permalink\": \"/jui/docs/components/Popup\",\n  \"draft\": false,\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Popup.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"ModalWindow\",\n    \"permalink\": \"/jui/docs/components/ModalWindow\"\n  },\n  \"next\": {\n    \"title\": \"ProgressBar\",\n    \"permalink\": \"/jui/docs/components/ProgressBar\"\n  }\n};\nexport const assets = {\n\n};\n\nimport { ApiDescription } from \"@site/src/components/ApiDescription\";\nimport { EmbeddedStory } from \"@site/src/components/EmbeddedStory\";\nimport { Popup, PopupTrigger } from \"@intellij-platform/core\";\nexport const toc = [{\n  value: 'Features',\n  id: 'features',\n  level: 3\n}, {\n  value: 'Live example',\n  id: 'live-example',\n  level: 3\n}, {\n  value: 'Popup',\n  id: 'popup-1',\n  level: 2\n}, {\n  value: 'PopupTrigger',\n  id: 'popuptrigger',\n  level: 2\n}, {\n  value: 'Popup Content',\n  id: 'popup-content',\n  level: 2\n}, {\n  value: 'Popup.Layout',\n  id: 'popuplayout',\n  level: 3\n}, {\n  value: 'Popup.Header',\n  id: 'popupheader',\n  level: 3\n}, {\n  value: 'Custom header',\n  id: 'custom-header',\n  level: 4\n}, {\n  value: 'Hint',\n  id: 'hint',\n  level: 3\n}, {\n  value: 'Sizing and positioning',\n  id: 'sizing-and-positioning',\n  level: 2\n}, {\n  value: 'Imperative API',\n  id: 'imperative-api',\n  level: 2\n}, {\n  value: 'PopupManager',\n  id: 'popupmanager',\n  level: 3\n}, {\n  value: 'usePopupManager',\n  id: 'usepopupmanager',\n  level: 3\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"popup\"\n    }}>{`Popup`}</h1>\n    <h3 {...{\n      \"id\": \"features\"\n    }}>{`Features`}</h3>\n    <ul>\n      <li parentName=\"ul\">{`Sizing based on content`}</li>\n      <li parentName=\"ul\">{`Resizable and movable (by dragging header)`}</li>\n      <li parentName=\"ul\">{`Connected to, and positioned by a trigger, or positioned in center otherwise.`}</li>\n      <li parentName=\"ul\">{`Layout with Header, Content and Hint`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"live-example\"\n    }}>{`Live example`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live themed\",\n        \"live\": true,\n        \"themed\": true\n      }}>{`// import { PopupTrigger, Popup, Button } from \"@intellij-platform/core\";\n\n<PopupTrigger\n  interactions=\"move\" // Other values: \"all\", \"none\"\n  placement=\"bottom\" // Other values: \"top\"\n  nonDismissable={false} // Other values: true\n  allowScroll=\"auto\" // Other values: false, true\n  popup={\n    <Popup>\n      <Popup.Layout\n        header={<Popup.Header>Header</Popup.Header>}\n        content={\n          <div style={{ padding: \"0.5rem\" }}>\n            Popup Content. Popup Content. Popup Content. <br />\n            Popup Content. Popup Content. Popup Content. <br />\n            Popup Content. Popup Content. Popup Content. <br />\n          </div>\n        }\n        footer={<Popup.Hint>Hint text</Popup.Hint>}\n      />\n    </Popup>\n  }\n>\n  <Button>Open popup</Button>\n</PopupTrigger>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"popup-1\"\n    }}>{`Popup`}</h2>\n    <ApiDescription of={Popup} mdxType=\"ApiDescription\" />\n    <h2 {...{\n      \"id\": \"popuptrigger\"\n    }}>{`PopupTrigger`}</h2>\n    <ApiDescription of={PopupTrigger} mdxType=\"ApiDescription\" />\n    <h2 {...{\n      \"id\": \"popup-content\"\n    }}>{`Popup Content`}</h2>\n    <h3 {...{\n      \"id\": \"popuplayout\"\n    }}>{`Popup.Layout`}</h3>\n    <ApiDescription of={Popup.Layout} mdxType=\"ApiDescription\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Popup>\n  <Popup.Layout\n    header={<Popup.Header>Header</Popup.Header>}\n    content={<>...</>}\n    footer={<Popup.Hint>Hint text</Popup.Hint>}\n  />\n</Popup>\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"popupheader\"\n    }}>{`Popup.Header`}</h3>\n    <ApiDescription of={Popup.Header} mdxType=\"ApiDescription\" />\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Popup>\n  <Popup.Layout header={<Popup.Header>Header</Popup.Header>} />\n</Popup>\n`}</code></pre>\n    <h4 {...{\n      \"id\": \"custom-header\"\n    }}>{`Custom header`}</h4>\n    <p>{`By default, Popup header is a simple centered title. But more complex cases can be handled by just rendering a custom\nUI inside the header, without any specific support for those variations, from `}<inlineCode parentName=\"p\">{`Popup.Header`}</inlineCode>{`:`}</p>\n    <EmbeddedStory storyId=\"components-popup--custom-header\" height={350} mdxType=\"EmbeddedStory\" />\n    <p>{`Note how anywhere on the header, except for the action button, can still be used to move the Popup.`}</p>\n    <h3 {...{\n      \"id\": \"hint\"\n    }}>{`Hint`}</h3>\n    <p>{`Use `}<inlineCode parentName=\"p\">{`Popup.Hint`}</inlineCode>{` to render a hint (aka Advertiser) in Popup's footer.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx\"\n      }}>{`<Popup>\n  <Popup.Layout footer={<Popup.Hint>Hint text</Popup.Hint>} />\n</Popup>\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sizing-and-positioning\"\n    }}>{`Sizing and positioning`}</h2>\n    <p>{`TODO`}</p>\n    <h2 {...{\n      \"id\": \"imperative-api\"\n    }}>{`Imperative API`}</h2>\n    <h3 {...{\n      \"id\": \"popupmanager\"\n    }}>{`PopupManager`}</h3>\n    <p><inlineCode parentName=\"p\">{`PopupManager`}</inlineCode>{` allows for imperatively showing popups, via `}<a parentName=\"p\" {...{\n        \"href\": \"#usepopupmanager\"\n      }}>{`usePopupManager`}</a>{`. It holds the state of\nthe stack of opened popups, and renders those popups. Although it's technically not required, only a single\n`}<inlineCode parentName=\"p\">{`PopupManager`}</inlineCode>{` is usually rendered as a wrapper, in an application.`}</p>\n    <h3 {...{\n      \"id\": \"usepopupmanager\"\n    }}>{`usePopupManager`}</h3>\n    <p>{`Returns `}<inlineCode parentName=\"p\">{`PopupManagerAPI`}</inlineCode>{`, which has a `}<inlineCode parentName=\"p\">{`show`}</inlineCode>{` method to imperatively open a popup. Requires\n`}<a parentName=\"p\" {...{\n        \"href\": \"#popupmanager\"\n      }}>{`PopupManager`}</a>{` to be rendered above in the component hierarchy.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\"\n      }}>{`// import { Popup, usePopupManager } from \"@intellij-platform/core\";\nconst { show } = usePopupManager();\n\nshow(\n  <Popup>\n    <Popup.Layout>...</Popup.Layout>\n  </Popup>, // The content of the popup. Typically a PopupLayout element,\n  { interactions: \"all\" } // Other popup props\n);\n\n// More flexible interface which gets access to a \\`close\\` function to be called when needed.\nshow(({ close }) => <Popup.Layout>...</Popup.Layout>, { interactions: \"all\" });\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live noInline themed\",\n        \"live\": true,\n        \"noInline\": true,\n        \"themed\": true\n      }}>{`const App = () => (\n  <PopupManager>\n    <SomeComponent />\n  </PopupManager>\n);\nconst SomeComponent = () => {\n  const { show } = usePopupManager();\n  const showPopup = () => {\n    show(\n      ({ close }) => (\n        <Popup>\n          <Popup.Layout\n            header={<Popup.Header>Title</Popup.Header>}\n            content={\n              <SpeedSearchMenu\n                onClose={close}\n                autoFocus=\"first\"\n                fillAvailableSpace\n              >\n                <Item textValue=\"File\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/text\"} />}\n                    content=\"File\"\n                  />\n                </Item>\n                <Item textValue=\"Directory\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"nodes/folder\"} />}\n                    content=\"Directory\"\n                  />\n                </Item>\n                <Divider />\n                <Item textValue=\"HTML File\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/html\"} />}\n                    content=\"HTML File\"\n                  />\n                </Item>\n                <Item textValue=\"Stylesheet\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/css\"} />}\n                    content=\"Stylesheet\"\n                  />\n                </Item>\n                <Item textValue=\"Javascript\">\n                  <MenuItemLayout\n                    icon={<PlatformIcon icon={\"fileTypes/javaScript\"} />}\n                    content=\"Javascript\"\n                  />\n                </Item>\n                <Item\n                  title={\n                    <MenuItemLayout\n                      content=\".ignore File\"\n                      icon={<PlatformIcon icon={\"fileTypes/text\"} />}\n                    />\n                  }\n                >\n                  <Item>.gitignore File (Git)</Item>\n                  <Item>.bzrignore File (Bazaar)</Item>\n                  <Item>.npmignore File (Npm)</Item>\n                </Item>\n              </SpeedSearchMenu>\n            }\n          />\n        </Popup>\n      ),\n      { interactions: \"all\", allowScroll: false }\n    );\n  };\n  return <Button onPress={showPopup}>Show popup</Button>;\n};\n\nrender(<App />);\n`}</code></pre>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["isInResolvedActionGroup","action","isActionGroup","isResolvedActionGroup","isActionGroupDefinition","ActionShortcut","actionId","children","shortcutString","useGetActionShortcut","getShortcut","keymap","useKeymap","keyboardShortcut","find","type","shortcutToString","isKeyMatch","keyStroke","e","loose","code","modifiers","supportedModifiers","every","modifier","getModifierState","Boolean","includes","ActionsContext","React","generateId","Math","floor","random","ACTION_PROVIDER_ID_DATA_PREFIX","actionProvidersMap","Map","ActionsProvider","props","parentContext","useContext","actions","dfsVisit","push","recursivelyCreateActions","shortcuts","Object","fromEntries","map","id","actionProviderId","useState","shortcutHandlerProps","onAction","useCapture","firstKeyActivatedShortcutsRef","useRef","secondStrokeResetTimerIdRef","onKeyDown","useEventCallback","event","nativeEvent","location","repeat","current","window","clearTimeout","length","some","shortcut","secondKeyStroke","triggerAction","firstKeyMatches","entries","flatMap","filter","input","isKeyboardShortcut","firstKeyStroke","setTimeout","document","addEventListener","once","capture","stopPropagation","preventDefault","useShortcuts","perform","element","target","Element","allActions","ACTION_PROVIDER_ID_ATTRIBUTE","useEffect","set","delete","Provider","value","actionDefinitions","parent","actionDefinition","useShortcutsOf","undefined","firstShortcut","context","isDisabled","actionPerformed","isMutableActionGroup","getAvailableActionsFor","closestActionProvider","closest","HTMLElement","actionSets","keys","dataset","dataKey","startsWith","replace","get","values","concat","sortBy","actionSet","useActions","useAction","usePerformAction","console","error","CommonActionId","EXPAND_ALL","COLLAPSE_ALL","EXPAND_SELECTION","SHRINK_SELECTION","GO_TO_ACTION","GO_TO_FILE","SHOW_INTENTION_ACTIONS","EDIT_SOURCE","SHOW_SEARCH_HISTORY","COPY_REFERENCE","REFRESH","KeymapContext","defaultKeymap","KeymapProvider","keymapProp","parentKeyMap","assign","create","ActionButton","otherProps","actionButton","onPress","icon","title","tooltip","actionName","isAction","item","ActionsMenu","selectedKeys","menuProps","items","flatten","disabledKeys","key","autoFocus","DividerItem","renderActionAsMenuItem","isGroup","isPopup","hasDivider","textValue","childItems","content","useCreateDefaultActionGroup","show","usePopupManager","getActionShortcut","openActionsInPopup","close","onClose","header","groupDefinition","RESIZE_TOOL_WINDOW_RIGHT_ACTION_ID","RESIZE_TOOL_WINDOW_LEFT_ACTION_ID","RESIZE_TOOL_WINDOW_TOP_ACTION_ID","RESIZE_TOOL_WINDOW_BOTTOM_ACTION_ID","MAXIMIZE_TOOL_WINDOW_ACTION_ID","FOCUS_EDITOR_ACTION_ID","HIDE_ACTIVE_WINDOW_ACTION_ID","HIDE_ALL_WINDOWS_ACTION_ID","JUMP_TO_LAST_WINDOW_ACTION_ID","defaultKeyToStr","Control","ArrowDown","ArrowUp","ArrowLeft","ArrowRight","Enter","Quote","Minus","Equal","Backspace","fromPairs","Array","from","i","charCodeAt","x","String","fromCharCode","a","toUpperCase","KeystrokeToString","isMac","separator","codeToStr","Alt","Shift","Meta","Escape","modifiersOrder","keystrokeToString","keystroke","sort","b","indexOf","join","Error","useActionGroup","actionGroupId","bgColor","theme","color","dark","StyledHeaderActions","styled","StyledBalloonContainer","StyledIconContainer","StyledBalloonHeader","StyledBalloonBody","lineClamp","StyledBalloonFooter","StyledToggleIconContainer","StyledToggleExpandButtonContainer","StyledToggleExpandButtonFooterContainer","BalloonContext","BalloonActionLink","ref","args","Balloon","iconProp","expanded","expandedProp","defaultExpanded","onExpandedChange","headerActions","body","containerProps","bodyRef","expandable","setExpandable","setExpanded","useControlledState","maxLinesWhenNotExpanded","bodyElem","clientHeight","parseFloat","getComputedStyle","lineHeight","getNumLines","scrollHeight","iconType","index","arr","toggle","effectiveExpanded","onClick","role","style","marginLeft","ToggleWrapper","enabled","onToggle","Component","iconName","toggleIcon","hoverContainerSelector","className","NotImplementedFn","BalloonsContext","showSticky","useBalloonManager","BalloonManager","disablePortal","BalloonsContainer","StyledBalloonsStack","balloons","setBalloons","timeoutIdsRef","lastIdRef","api","useMemo","timeout","aBalloon","balloon","timeoutId","aTimeoutId","forEach","notificationsStack","position","ReactDOM","BareButton","elementType","buttonProps","useButton","useObjectRef","domProps","filterDOMProps","mergeProps","StyledButton","disabled","variants","default","Button","forwardedRef","variant","form","StyledWrapperLabel","StyledCheckboxLabelText","StyledInput","Checkbox","preventFocus","disableFocusAlwaysVisible","state","useToggleState","inputProps","useCheckbox","isFocusVisible","isFocused","focusProps","useFocusRing","focusDisabledProps","onFocusCapture","relatedTarget","focus","blur","tabIndex","isIndeterminate","isSelected","pointerEvents","CheckboxIcon","size","name","Disabled","Selected","Focused","CollectionSpeedSearchContext","CollectionSpeedSearchItemContext","SpeedSearchItemHighlightsProvider","itemKey","collection","getItem","text","warn","highlightedRanges","matches","HighlightedTextValue","speedSearchContext","highlights","useCollectionSpeedSearchResult","selectionManager","inputSelectionManager","speedSearch","focusBestMatch","searchTerm","active","getKeys","matchedRanges","minusculeMatch","wrappedSelectionManager","selectAll","setSelectedKeys","Set","has","createSpeedSearchSelectionManager","latestValues","useLatest","matchedKeys","noneOfTheMatchesAreSelected","matchedKey","keyToFocus","firstRange","rangeA","rangeB","to","getLongestCommonPrefixMatch","passedFirstSelection","firstSelectedKey","getMatchToSelect","setFocusedKey","replaceSelection","useCollectionSpeedSearch","keepSearchActiveOnBlur","keyboardDelegate","speedSearchStateProps","useSpeedSearchState","speedSearchSelectionManager","useSpeedSearch","speedSearchKeyboardDelegate","wrappedKeyboardDelegate","findFirstMatch","fromKey","direction","currentKey","getKeyAbove","getKeyBelow","getFirstKey","global","firstKey","next","getLastKey","lastKey","pop","createSpeedSearchKeyboardDelegate","speedSearchContextValue","searchPopupProps","match","seq","this","Divider","_Divider","getCollectionNode","rendered","hasChildNodes","Item","_Item","result","StatelyItem","originalShouldInvalidate","shouldInvalidate","invalidated","GAP","StyledItemLayout","StyledHint","currentForegroundAware","commonColors","inactiveTextColor","small","StyledGroup","ItemLayout","Hint","Group","ItemStateContext","useCollectionAutoScroll","isVirtualized","focusedKey","querySelector","scrollIntoView","useCollectionRef","selectionManagerRef","useImperativeHandle","useCollectionSearchInput","collectionRef","relayEventsToCollection","dispatchEvent","KeyboardEvent","collectionSearchInputProps","onKeyUp","onKeyPress","StyledHoverContainer","StyledIconHoverContainer","AutoHoverPlatformIcon","hoverIcon","amendName","LafIcon","themePath","resolvedIconPath","iconDescriptor","useTheme","resolvedValue","isUnderDarcula","reduce","soFar","findIconPath","useIconPath","useForwardedRef","useSvgIcon","path","iconNameOrPath","amendment","ext","split","getPlatformIconPath","relativePath","slice","PlatformIcon","darkIcon","darkPath","getDarkPath","fallbackPath","DEFAULT_ICON_SIZE","StyledIconWrapper","itemState","selected","isContainerFocused","unmounted","async","loadingIcon","svg","getSvgIcon","catch","remove","svgElement","createElement","appendChild","outerHTML","randomPostfix","toFixed","matchAll","modifiedSvg","_","newId","replaceAll","makeIdsUnique","fetchIcon","theOld","theNew","str","replaced","replacedAgain","DEFAULT_MINIMUM_BUTTON_SIZE","NAVBAR_MINIMUM_BUTTON_SIZE","StyledIconButton","minSize","IconButton","preventFocusOnPress","excludeFromTabOrder","isPressed","isPressedInput","onPressChange","onPressEnd","onPressStart","onPressUp","shouldCancelOnPointerExit","focusableProps","useFocusable","pressProps","usePress","ArrowIcon","IconButtonWithMenu","renderMenu","noArrow","previouslyFocusedElementRef","onOpenChange","open","onFocus","Img","darkSrc","src","StyledInputBox","focused","validationState","border","invalid","focusRing","StyledAddons","StyledRightAddons","StyledLeftAddons","Input","autoSelect","addonBefore","addonAfter","inputRef","inputRefProp","onBlur","setIsFocused","focusWithinProps","useFocusWithin","onFocusWithinChange","select","spellCheck","onMouseDown","StyledLabel","label","StyledInputContainer","labelPlacement","Label","StyledContextHelp","contextHelpForeground","StyledBoxAndContextHelpWrapper","InputField","contextHelp","fieldProps","errorMessageProps","labelProps","descriptionProps","useField","PositionedTooltipTrigger","placement","crossOffset","showOnFocus","errorMessage","ValidationTooltip","delay","I","placeholder","defaultValue","onChange","StyledLink","focusBorderColor","linkForegroundEnabled","Link","labelable","interactionHandlers","focusRingClass","as","List","allowEmptySelection","fillAvailableSpace","estimatedItemHeight","disallowEmptySelection","useListState","listProps","listContext","useList","virtualizerProps","renderNode","useListVirtualizer","renderItem","Virtualizer","ListContext","ListDivider","useSeparator","orientation","separatorProps","ListItem","listFocused","itemProps","useSelectableItem","containerFocused","node","StyledList","withConfig","shouldForwardProp","prop","css","StyledListItem","backgroundColor","labelForeground","asCurrentForeground","labelSelectedForeground","asCurrentBackground","showAsFocused","shouldFocusWrap","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","ListKeyboardDelegate","collectionProps","useSelectableCollection","useSelectableList","setFocused","isEmpty","onActionCallback","originalUseListState","selectionBehavior","StyledListSectionHeader","paddingLeft","fontWeight","outline","cursor","ListSection","reusableView","headerRef","useVirtualizerItem","layoutInfoToStyle","layoutInfo","renderWrapper","renderChildren","viewType","c","layout","VariableWidthListLayout","estimatedRowHeight","estimatedHeadingHeight","dividerHeight","sizeToFit","scrollToItem","virtualizer","shouldScrollX","duration","scrollDirection","ContextMenuContainer","useMenuTriggerState","overlayProps","overlayRef","positionProps","updatePosition","useMouseEventOverlayPosition","shouldFlip","offset","isOpen","useOverlay","shouldCloseOnBlur","isKeyboardDismissDisabled","isDismissable","shouldCloseOnInteractOutside","areInNestedOverlays","onContextMenu","useContextMenu","allProps","MenuOverlay","restoreFocus","patchCollectionItem","nodes","partialNode","result2","childNodes","partialChildNode","partialChildNodeWithoutType","PatchedItem","PatchedSection","Section","convertChildren","isArray","Item2","MenuOverlayContext","MenuContext","useMenu","onActionProp","submenuBehavior","menuContextValue","useMenuAria","useMenuState","patchCollectionProps","useTreeState","childExpansionBehaviour","expandedKeys","expandedKey","onExpandedKeyChange","defaultExpandedKeys","defaultExpandedKey","Menu","minWidth","StyledMenu","renderMenuNodes","StyledMenuItemText","StyledMenuItemPlatformIcon","StyledMenuItemLafIcon","MenuItemContext","keyboardShortcutProps","useMenuItemLayout","MenuItem","nestedMenuRef","isExpanded","renderSubmenu","itemWrapper","menuItemProps","hasSubmenu","ariaMenuItemProps","useMenuItemAria","onMouseEnter","onPointerEnter","onPointerDown","hoverProps","useHover","onHoverStart","isAnySubmenuOpen","parentKey","toggleKey","keyboardProps","togglePressProps","useMenuItem","useOverlayPosition","targetRef","MENU_VERTICAL_PADDING","MENU_BORDER_WIDTH","arrowProps","onPointerUp","isActive","OverlayComponent","SimpleOverlay","parentState","rootKey","portalContainer","StyledMenuItemLayout","Content","Shortcut","MenuItemLayout","useContextOrThrow","allowedIcon","forceRestoreFocus","MenuTrigger","align","positioningTargetRef","menuTriggerProps","triggerRef","triggerProps","useMenuTrigger","ariaButtonProps","getPlacement","containerPadding","StyledItemsContainer","StyledSearchFieldWrapper","StyledSpeedSearchMenu","StyledVerticalSeparator","StyledPlaceholder","useSpeedSearchMenu","containerRef","speedSearchContainerProps","ListCollection","MenuKeyboardDelegate","contains","activeElement","focusSafely","lastSize","setSize","measureSize","offsetWidth","offsetHeight","width","height","isSearchActive","useResizeObserver","onResize","useLayoutEffect","sizeStyleProps","minHeight","maxHeight","SpeedSearchMenu","emptyText","clear","SpeedSearchSubmenu","SpeedSearchMenuContent","menuRef","useSubmenuState","rootItem","submenuProps","useSubmenu","WINDOW_SHADOW","StyledMenuItem","StyledMenuItemIcon","StyledNestedArrow","highlightedStyle","defaultStyle","disabledStyle","useSubmenuAria","submenuBehaviorProps","Submenu","constructor","super","keyBelow","keyAbove","useKeyboard","continuePropagation","root","isFocusedRef","focusedKeyRef","defineProperties","SelectionManager","StyledMenuHeading","StyledMenuSectionItemsContainer","MenuSection","headingProps","groupProps","useMenuSection","heading","UNSAFE_React17SuspenseFix","measureContentSize","fallback","NullSuspenseFallback","afterUnsuspended","afterSuspended","afterSuspendedProp","afterUnsuspendedProp","StyledWindowUnderlay","StyledWindowContainer","StyledWindowInnerContainer","DEFAULT_WINDOW_MIN_WIDTH","DEFAULT_WINDOW_MIN_HEIGHT","WindowControllerContext","ModalWindow","interactions","propsContext","underlayProps","usePreventScroll","modalProps","useModal","dialogProps","titleProps","useDialog","bounds","overlayInteractionHandlerProps","UNSAFE_measureContentSize","useResizableMovableOverlay","focusContainmentFixProps","lastFocusedElementRef","probablyFocusedElement","currentTarget","elementToFocus","useFocusContainmentFix","OverlayInteractionHandler","contain","WindowContext","movable","OverlayResizeHandles","StyledFooter","hasBorder","contrastBorder","StyledFooterSide","WindowFooter","left","right","StyledWindowTitle","WindowHeader","renderTitle","OverlayMoveHandle","moveHandleProps","StyledWindowFooter","StyledWindowContentWrapper","WindowLayout","footer","Footer","Header","WindowsContext","useWindowManager","WindowManager","windows","setWindows","newKeyRef","currentWindows","aWindow","ParentOverlayContext","Overlay","AriaOverlay","element1","element2","overlayRoot1","overlayRoot2","OverlayInteractionHandlerContext","useOverlayInteractionHandler","useOverlayMoveHandle","interactionHandler","finishInteraction","startInteraction","updateBounds","useMove","onMoveStart","onMove","startState","movement","top","y","onMoveEnd","overlayResizer","initialBoundsRef","max","bottom","newWidth","initialBounds","newHeight","getResizerProps","side","onResizeStarted","onResizeEnd","useOverlayResizer","withMinSize","getCenteredBounds","innerWidth","innerHeight","targetElement","targetBounds","getBoundingClientRect","ensureInViewport","gap","viewportWidth","viewportHeight","clamp","getContentSize","fn","ceil","clone","cloneNode","returnValue","removeChild","useContentSize","observe","measuredSizes","setMeasuredSizes","lastMeasuredSize","at","Size","isEqual","requestAnimationFrame","newSize","cancelAnimationFrame","measure","currentSize","aSize","debouncedMeasure","fnRef","currentTimeoutId","useCallback","useDebouncedCallback","mutationObserver","MutationObserver","subtree","childList","disconnect","width2","height2","inputBounds","defaultBounds","onBoundsChange","onBoundsChanging","observeContentResize","setBounds","contentSize","currentInteraction","setCurrentInteraction","effectiveMinWidth","effectiveMinHeight","applyMinSize","getBounds","updatedBounds","partialBounds","centeredContentBounds","positioned","sized","StyledPopupContainer","StyledInnerContainer","DEFAULT_POPUP_MIN_WIDTH","DEFAULT_POPUP_MIN_HEIGHT","_Popup","nonDismissable","allowScroll","positioning","positioningProp","onCloseProp","PopupControllerContext","useInteractOutside","onInteractOutsideStart","onInteractOutside","positionedBounds","pipe","setActive","focusForwarderProps","useFocusForwarder","titleId","useSlotId","useOverlayFocusContain","zIndex","propsArray","mergeNonNullProps","PopupContext","Popup","PopupHeader","Layout","PopupLayout","StyledPopupHint","createContext","StyledPopupHeader","hasControls","labelDisabledForeground","renderHeader","StyledPopupLayout","StyledPopupLayoutHeader","StyledPopupLayoutContent","StyledPopupLayoutFooter","PopupsContext","PopupManager","popups","setPopups","popup","currentPopups","aPopup","wrappedPopup","PopupTrigger","useOverlayTriggerState","useOverlayTrigger","ProgressBar","maxValue","minValue","namePosition","details","secondaryDetails","button","dense","progressBarProps","useProgressBar","percentage","forcedDetails","setForcedDetails","setTooltip","contextValue","StyledProgressBarLabel","effectiveDetails","StyledProgressBarContainer","StyledProgressBarLineContainer","hasTopMargin","hasBottomMargin","StyledProgressBarTrack","indeterminate","StyledProgressBarProgress","showValueLabel","valueLabel","ProgressBarContext","StyledProgressBarDetails","getIndeterminateStartColor","getIndeterminateEndColor","indeterminateBackgroundAnimation","keyframes","useProgressBarIconButton","hoverTooltip","isHovered","useProgressBarPauseIconButton","paused","Container","LineContainer","Track","Progress","Details","ProgressBarStopButton","ResizableView","resizerPlacement","firstView","firstSize","onFirstResize","lastView","onLastResize","BottomResizer","resizerProps","useBottomResizer","StyledHorizontalResizer","StyledHorizontalResizerArea","handleSize","HorizontalResizer","outerPadding","background","LeftResizer","useLeftResizer","RightResizer","useRightResizer","TopResizer","useTopResizer","StyledVerticalResizer","StyledVerticalResizerArea","VerticalResizer","useResizer","invert","dragThreshold","SearchInput","searchHistory","onClear","onSubmit","onHistoryItemSelected","historyButtonTitle","valueProp","setValue","inputContainerRef","isSearchHistoryOpen","setSearchHistoryOpen","showSearchHistoryAction","searchIcon","historyItemText","parseInt","historyItem","tooltipTriggerProps","StyledSearchIcon","StyledSpeedSearchInput","noMatch","getOutlineColor","StyledSearchText","SpeedSearchInput","clearButtonRef","SpeedSearchPopup","StyledSpeedSearchPopup","red","tooltipForeground","useGhostInput","valueRef","ctrlKey","altKey","metaKey","elem","isContentEditable","HTMLInputElement","HTMLTextAreaElement","sliceEnd","defaultIsSearchActive","onIsSearchActiveChange","setSearchTerm","defaultSearchTerm","onSearchTermChange","ghostInputKeydown","trimmedValue","trimStart","onBlurWithin","StatusBar","StyledStatusBar","StyledStatusBarLeft","StyledStatusBarRight","StyledStatusBarSection","StatusBarWidget","StyledWrapper","StyledStatusBarWidget","StyledStatusBarIconWidget","inset","DarculaSeparatorUI","defaultSize","StyledSeparator","backgroundClip","boxSizing","margin","flexShrink","StyledHorizontalSeparator","DebuggerTabContent","closeButton","startIcon","endIcon","StyledDebuggerTab","StyledDefaultTab","getTabThemeStyles","underlineHeight","underlinedTabBackground","debuggerTabTheme","DebuggerTabs","Tabs","TabComponent","focusable","EditorTabContent","onUnpin","pinned","editorTabTheme","borderColor","underlinedTabInactiveBackground","hoverInactiveBackground","hoverBackground","inactiveUnderlineColor","underlineColor","underlinedTabInactiveForeground","underlinedTabForeground","StyledEditorTab","StyledEditorTabs","StyledDefaultTabs","getTabsThemeStyles","EditorTabs","TabsComponent","noBorders","TabCloseButton","StyledTabItemLayout","iconStyle","StyledStartIconWrapper","StyledEndIconWrapper","TabContentLayout","TabItem","horizontalOverflowIndicatorStyles","StyledHorizontalOverflowShadows","hasOverflowAtStart","panelBackground","hasOverflowAtEnd","Tab","forwardRef","shouldSelectOnPressUp","tabProps","useTab","selectedKey","scrollBarDisabledStyle","StyledTabList","multiRow","noOverflowMenu","noScroll","useTabListState","tabListProps","useTabList","scrolledIndicatorProps","hasOverflow","threshold","setHasOverflow","update","offsetLeft","scrollLeft","offsetRight","scrollWidth","offsetTop","scrollTop","offsetBottom","newHasOverflow","onScroll","useHasOverflow","overflowedElements","useOverflowObserver","overflowedKeys","notNull","scrollableContainer","selectedTabElement","TabsOverflowMenu","onSelect","setSelectedKey","menuItem","inOverflowMenu","ToolWindowTabContent","toolWindowTabTheme","StyledToolWindowTab","StyledToolWindowTabs","ToolWindowTabs","getAllRanges","ranges","gapRange","range","createRangesFromIndices","indices","lastRange","HighlightedMatch","TextWithHighlights","parts","highlighted","numberPattern","parseComponent","componentStr","round","min","parseHexRgba","parseShorthandHex","parseRgb","RegExp","parseRgba","Color","rgba","g","r","NaN","parse","Number","isInteger","parseColorString","isValid","withTransparency","alpha","brighter","int","FACTOR","darker","toString","blend","colorOrColorString","getBlendedValue","component","isNaN","padStart","StyledSplitterContainer","StyledView","StyledSplitterInnerView","ThreeViewSplitter","resizerPropsOverrides","innerView","firstViewMinSize","lastViewMinSize","innerViewMinSize","firstViewRef","lastViewRef","firstSizeState","setFirstSizeState","lastSizeState","setLastSizeState","horizontalValue","verticalValue","FirstResizer","SecondResizer","sizeStyleProp","minSizeStyleProp","isFractionSize","normalizeSize","getSize","getNewSize","newFractionSize","getActualSize","viewElem","actualSize","currentLastSize","currentFirstSize","StyledFloatView","FloatView","boundsStyle","FloatToolWindows","floatWindows","renderToolWindow","stackedFloatWindows","getKey","sortedKeys","setSortedKeys","sorted","bringToFront","move","useStackedLayersState","layersProps","toolWindow","MovableToolWindowStripeContext","MovableToolWindowStripeProvider","stripes","draggingRect","setDraggingRect","draggingKey","setDraggingKey","dropPosition","setDropPosition","getDropPositionRef","moveStartLocationRef","addStripe","propsRef","startMove","stripe","stripeElRef","stripeElement","getItemRect","toJSON","indexInMain","mainItems","findIndex","indexInSplit","splitItems","anchor","isSplit","dropPositionGetters","createGetDropPosition","getDropPosition","draggedRect","endMove","TopStripe","BottomStripe","LeftStripe","RightStripe","InnerView","StyledToolWindowOuterLayout","Shell","hideStripes","getSizeInAnchor","containerSize","isHorizontalToolWindow","mapToKey","sortAndMapToKey","compose","order","filterMains","getMains","filterSplits","filterVisible","expectedViewMode","viewMode","isVisible","getSplits","filterVisibleDocked","filterVisibleUnDocked","getDocked","toolWindows","docks","mains","splits","weight","mainKey","sizeFraction","sideWeight","getUnDocked","getSideState","main","activeKeys","undocked","docked","DEFAULT_HEIGHT","DEFAULT_WIDTH","getFloatWindowsState","floatingBounds","getFloatWindowState","getStripeRect","start","rect","end","getDropPositions","getRef","score","abs","relative","keyToOffsets","boundingRect","getKeyToOffsets","dropPositions","lastDropPosition","stripeRect","getCanDrop","bestMatch","candidate","STRIPE_BUTTON_LINE_HEIGHT","StyledToolWindowStripeButton","StyledToolWindowStripe","theOtherSide","preventCollapse","StyledSpacer","useElementMove","ghost","ghostOption","otherOptions","updateGhostPosition","defaultGhost","colors","computedBackground","unshift","parentElement","resultColor","nextColor","findEffectiveBackgroundColor","createDefaultGhost","append","ToolWindowStripe","render","onItemPress","getProps","latestPropsRef","moveDisabled","useMovableStripeButtons","isNotCurrentItem","anItem","ToolWindowStripeButton","getStripeButtonStyles","styles","marginValue","display","StyledUndockSide","UndockSide","ToolWindows","hideToolWindowBars","useWidescreenLayout","toolWindowsState","onToolWindowStateChange","mainContentMinWidth","windowsById","indexBy","mainContentFocusScopeRef","layoutState","setLayoutState","windowFocusableRefs","latestRef","container","_setLayoutState","windowIds","removedFromSideBarIds","groupBy","getToolWindowsLayoutState","observer","ResizeObserver","resize","contentRect","unobserve","hasFocus","focusLastActiveWindow","lastFocusedKey","focusMainContent","changeState","updater","interactionOutsideRef","onFocusLost","handleBodyFocus","focusLosingElement","focusReceivingElement","removeEventListener","useOnFocusLost","renderStripe","toolbarButton","all","lastFocused","FocusScope","ToolWindowStateProvider","mainContentFocusableRef","renderSideDockedView","resizeDockSplitView","onDockResize","containerBounds","resizeDock","getSplitViewProps","firstAnchor","secondAnchor","horizontalSplitterProps","verticalSplitterProps","outerSplitterProps","innerSplitterProps","undockLayers","resizeUndock","setFloatingBound","renderInnerLayout","ToolWindowStateContext","useToolWindowState","hide","removeFromSidebar","moveToSide","changeViewMode","stretchWidth","stretchHeight","setFloatingBounds","isDocked","areInSameSection","curry","window1","window2","getViewModeType","ToolWindowsState","layoutToRestore","invalidWindows","targetKey","mapWindows","hideAll","restoreWindows","closableViewModes","viewModeType","sideOrIndex","targetSide","targetIndex","targetSideWindows","indexInTargetSide","sortedTargetWindows","insert","newTargetSideWindows","newValue","targetViewMode","stretch","mapFn","options","mapObjIndexed","property","currentFloatingBound","resizeSide","dock","isInResizingView","toolWindowState","inputs","getAnchorOrientation","useToolWindow","contentRef","focusableContentRef","onFocusChange","contentHasFocus","setContentHasFocus","contentFocusWithinProps","toolWindowProps","autoHideProps","hideTimeoutId","windowFocusWithinProps","onFocusWithin","useAutoHide","forwardFocus","ignoreFocusedDescendant","toolWindowContentProps","toolWindowHeaderProps","ToolWindowSettingsIconMenu","viewModeActionGroup","VIEW_MODE_ACTION_GROUP_ID","moveToActionGroup","MOVE_TO_ACTION_GROUP_ID","resizeActions","TOOL_WINDOW_RESIZE_ACTION_GROUP_ID","maximizeAction","removeFromSideBarAction","REMOVE_TOOL_WINDOW_FROM_SIDEBAR_ACTION_ID","gearIconActions","ViewModeToActionId","StyledToolWindowHeader","StyledToolWindowHeaderActions","StyledToolWindowHeaderContent","DefaultToolWindowHeader","additionalActions","Toolbar","DOCK_TOOL_WINDOW_ACTION_ID","TooltipTrigger","ActionTooltip","StyledToolWindowContainer","StyledToolWindowContent","DefaultToolWindowContext","useDefaultToolWindowContext","DefaultToolWindow","headerContent","mainContentTitle","defaultToolWindowContext","useToolWindowActions","getToolWindowNumberFromShortcut","num","DefaultToolWindowToolbarButton","showNumber","getActivateToolWindowActionId","number","DefaultToolWindows","showNumbers","toolWindowsRef","windowById","useToolWindowsActions","getPresentation","MultiViewToolWindow","groupTabs","isToolWindowFocused","setToolWindowFocused","activeKey","setActiveKey","defaultActiveKey","onActiveKeyChange","contents","child","validChild","MultiContentToolWindowContent","renderedViewSwitcher","onSelectionChange","tabContent","previousKeys","usePrevious","newActiveKey","activeContent","View","DOCK_PINNED_MODE_ACTION_ID","DOCK_UNPINNED_MODE_ACTION_ID","UNDOCK_MODE_ACTION_ID","FLOAT_MODE_ACTION_ID","WINDOW_MODE_ACTION_ID","anchors","getAnchorName","docked_pinned","docked_unpinned","undock","float","createDefaultActionGroup","activeToolWindowActionGroup","alert","resizeGroup","isAnySideWindowWindowOpen","getOrdinal","description","n","ord","borderStyle","borderPropToCssProp","StyledToolbar","horizontal","vertical","StyledShowMoreButton","StyledHorizontalToolbar","StyledVerticalToolbar","StyledToolbarContent","shouldWrap","firstOverflowedIndex","OrientationContext","overflowBehavior","rootProps","showMoreButtonRef","isOverflowPopupVisible","setOverflowPopupVisible","popupHeight","setPopupHeight","firstOverflowedChildIndex","setFirstOverflowedChildIndex","firstOverflowedChildRef","childElements","firstOverflowedChild","toolbarProps","onMouseMove","firstOverflowedElement","shouldShow","clientY","clientX","onMouseLeave","toolbarOverflowPopupProps","ToolbarInOverlay","firstVisibleIndex","ToolbarSeparator","ActionHelpTooltip","helpText","link","tooltipProps","multiline","HelpTooltip","useTooltipTriggerState","positionAria","trigger","StyledTooltip","tooltipBackground","hasPointer","tooltipBorderColor","WITH_POINTER_BORDER_RADIUS","StyledShortcut","StyledHeader","fontSizeDelta","StyledDescription","placementToPointerSide","center","Tooltip","withPointer","isInteractive","pointerPositionStyle","TooltipContext","useTooltip","tooltipRef","_Tooltip","Description","POINTER_THICKNESS","TRANSLATE","sideStyles","StyledTooltipPointer","POINTER_WIDTH","POINTER_HEIGHT","normalizeCssValue","withMin","withMax","HEIGHT_OFFSET","WIDTH_OFFSET","limitPointerPositionStyles","applyVerticalMinMax","identity","applyHorizontalMinMax","getOffsetCssProp","pointerPositionToOffsetStyle","offsetValue","TooltipPointer","TooltipTriggerAndOverlay","setInteractive","useTooltipTrigger","normalizeChildren","useAriaTooltipTrigger","StyledValidationTooltip","StyledWarningValidationTooltip","SpeedSearchTreeNode","TreeNode","SpeedSearchTree","treeRef","hideSpeedSearchPopup","treeProps","treeContext","useSpeedSearchTree","useTreeVirtualizer","TreeContext","StyledTree","collectionSpeedSearch","TreeKeyboardDelegate","speedSearchKeyboardProps","hasAnyModifier","selectableTree","useSelectableTree","getKeyLeftOf","getKeyRightOf","StyledTreeNodeIcon","TreeNodeIcon","iconPath","getIcon","useTreeNodeToggleButton","treeNodeToggleButtonProps","selectedDescendantKeys","toggleSelection","StyledTreeNode","attrs","level","onActionRef","treeNodeProps","onDoubleClick","useTreeNode","selectionKeyDown","isExpandable","onNodeKeyDown","shouldToggle","shiftKey","Symbol","iterator","TreeCollection","keyMap","iterable","last","visit","nextKey","prevKey","getKeyBefore","getKeyAfter","idx","getSingleChildrenKeys","getSingleChildrenKeysRecursive","childNodesIterator","firstChild","done","noMoreChildren","isEmptyIterable","TreeSelectionManager","expandSelection","expandKeys","getExpandAndShrinkKeys","shrinkSelection","shrinkKeys","recursivelyGetExpandAndShrinkKeys","previousChild","newKeys","parentDescendants","getAllDescendants","getAllRoots","descendants","stopKeys","flat","_TreeCollection","rootKeys","getAllExpandableKeys","rootNodes","recursivelyAddExpandableKeys","add","setExpandedKeys","selectionState","useMultipleSelectionState","cacheInvalidation","invalidators","lastInvalidators","anInvalidator","useCollectionCacheInvalidation","tree","useCollection","latestState","expandAll","collapseAll","useTreeRef","newExpandedKeys","toggleTreeNode","expandedSiblings","getRootItemKeys","getChildItems","siblings","getSiblings","aKey","sectionItems","res","FlattenedTreeLayout","buildChild","layoutNode","doBuildCollection","padding","visibleNodes","maxY","isLoading","Rect","visibleRect","loaderHeight","loader","LayoutInfo","layoutInfos","placeholderHeight","getVisibleLayoutInfos","useTreeActions","collectSelectableItemsRecursive","getChildren","collectedItems","NestedSelection","cache","WeakMap","getSelectionState","itemsInSubtree","collectSelectableItems","cachedState","allDescendantsStates","SpeedSearchTreeWithCheckboxes","nestedSelection","otherInvalidators","StyledCheckboxWrapper","TreeNodeCheckbox","selectItemOnPress","itemContext","useNestedSelectionState","selectedKeysProp","defaultSelectedKeys","onSelectedKeysChange","selectedKeysSetter","useControllableSet","ListLayout","keyToWidth","visibleContentWidth","buildItem","buildNode","buildDivider","rectHeight","estimatedSize","buildCollection","getVisibleContentWidth","invalidateEverything","layoutNodes","newRect","oldRect","validate","invalidationContext","lastWidth","updateItemSize","changed","visibleViews","view","itemContentWidth","intersects","getVisibleRect","isWordSeparator","isWhitespace","char","test","isUpperCase","toLowerCase","isMeaningfulChar","ch","rawPattern","isStarts","isStart","pattern","continuous","inputIndex","patternIndex","lastMatch","chars","previousChar","manager","disallowSelectAll","useLocale","handlers","navigateToKey","childFocus","selectionMode","extendSelection","isCtrlKeyPressed","getKeyPageBelow","getKeyPageAbove","clearSelection","walker","getFocusableTreeWalker","tabbable","lastChild","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","lastSelectedKey","typeSelectProps","useTypeSelect","onTypeSelect","useOriginalSelectableItem","pointerType","styledComponents","ThemeConsumer","directChildRef","focusManagerRef","nodeToRestore","forceFocusFirst","focusManager","containerElement","focusFirst","focusNext","GetFocusManager","hidden","useFocusManager","savedUserSelect","restoreTextSelection","runAfterTransition","documentElement","webkitUserSelect","handlersRef","pageX","pageY","dragStarted","OverflowObserver","callback","data","mutations","mutation","removedNodes","intersectionObserver","addedNodes","IntersectionObserver","newHiddenElements","entry","isIntersecting","newVisibleElements","previouslyOverflowedElements","currentOverflowElements","childElement","scrollableContainerRef","rootMargin","setOverflowedElements","overflowObserver","change","getExpandAllKeys","roots","processItem","getExpandedToNodesKeys","targetNodeKeys","targetNodeKeySet","childValues","childValue","dfs","bfsVisit","bfs","parentValue","childNode","sortTreeNodesInPlace","by","compareFn","aa","bb","Context","nullErrorMessage","apply","possiblyBlurredElement","innerRef","globalMoveHandler","lastMouseClientPos","fakeTarget","visibility","ImmutableSet","setValueWithMutation","mutate","createSetInterface","currentValue","useStateSetterForSet","ApiDescription","of","docgenInfo","__docgenInfo","log","overrides","MDXComponents","deLinkify","comment","toCommentBlock","line","StyledIframe","externalLinkIcon","viewBox","fill","d","EmbeddedStory","storyId","withBaseUrl","useBaseUrlUtils","href","StyledSvg","StyledExpandButton","StyledContainer","Expandable","onExpand","setIsExpandable","stroke","strokeLinecap","strokeLinejoin","strokeWidth","transform","icons","clsx","flex","LivePreviewLoader","ErrorFallback","tryAgain","message","Preview","BrowserOnly","ErrorBoundary","params","ResultWithHeader","Translate","ThemedLiveEditor","isBrowser","useIsBrowser","EditorWithHeader","ThemeProvider","Theme","lightThemeJson","Playground","transformCode","prismTheme","usePrismTheme","noInline","metastring","SpeedSearchContainer","CollectionSpeedSearchContainer","useSpeedSearchList","listState","otherOutputs","SpeedSearchList","ActionGroupMenu","actionGroup","StyledIconLiveIndicator","SpeedSearch","speedSearchState","Tree","itemType","ProgressBarPauseButton","onPausedChange","LazyExampleApp","juiComponents","ExampleApp","darculaThemeJson","highContrastThemeJson","themed","noPadding","CodeBlock","live","scope","ReactLiveScope","frontMatter","contentTitle","metadata","assets","toc","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}