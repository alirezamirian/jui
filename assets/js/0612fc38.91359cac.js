"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7695],{26788:(e,t,n)=>{n.d(t,{e:()=>a});var i=n(2784);const a=e=>{let{path:t,name:n}=e;return i.createElement("a",{href:"https://github.com/JetBrains/intellij-community/blob/master/"+t,target:"_blank"},n||t.split("/").pop())};a.__docgenInfo={description:"To make relation between things in jui and original reference impl in Intellij Platform",methods:[],displayName:"RefToIntellijPlatform",props:{path:{required:!0,tsType:{name:"string"},description:""},name:{required:!1,tsType:{name:"string"},description:""}}}},50349:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>m,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var i=n(7896),a=(n(2784),n(30876));n(26788),n(30439);const o={},m="Menu",r={unversionedId:"components/Menu",id:"components/Menu",title:"Menu",description:"Features",source:"@site/docs/components/Menu.mdx",sourceDirName:"components",slug:"/components/Menu",permalink:"/jui/docs/components/Menu",draft:!1,editUrl:"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/Menu.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"List",permalink:"/jui/docs/components/List"},next:{title:"ProgressBar",permalink:"/jui/docs/components/ProgressBar"}},l={},s=[{value:"Features",id:"features",level:3},{value:"Remaining",id:"remaining",level:4},{value:"Known differences",id:"known-differences",level:4},{value:"Menu",id:"menu-1",level:2},{value:"Static API",id:"static-api",level:3},{value:"Dynamic API",id:"dynamic-api",level:3},{value:"MenuItemLayout",id:"menuitemlayout",level:3},{value:"Selection",id:"selection",level:3},{value:"Disabled items",id:"disabled-items",level:3},{value:"Full Example",id:"full-example",level:3},{value:"MenuTrigger",id:"menutrigger",level:2},{value:"Positioning options",id:"positioning-options",level:3},{value:"Controlled and uncontrolled",id:"controlled-and-uncontrolled",level:3},{value:"Focus restoration",id:"focus-restoration",level:3},{value:"ContextMenu",id:"contextmenu",level:2}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"menu"},"Menu"),(0,a.kt)("h3",{id:"features"},"Features"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Nested menu items"),(0,a.kt)("li",{parentName:"ul"},"Check-able menu items"),(0,a.kt)("li",{parentName:"ul"},"Default menu layout with icon, text and keyboard shortcut"),(0,a.kt)("li",{parentName:"ul"},"Full keyboard support"),(0,a.kt)("li",{parentName:"ul"},"Viewport-aware positioning with respect to a trigger.")),(0,a.kt)("h4",{id:"remaining"},"Remaining"),(0,a.kt)("ul",{className:"contains-task-list"},(0,a.kt)("li",{parentName:"ul",className:"task-list-item"},(0,a.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Advanced hover behaviour, which detects attempt to go to submenu and doesn't close the menu on mouse out.")),(0,a.kt)("h4",{id:"known-differences"},"Known differences"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"In the reference impl, hovering over disabled items removes previously highlighted menu item. Here it preserves\nit."),(0,a.kt)("li",{parentName:"ul"},"In the reference impl, there is a delay in opening submenu"),(0,a.kt)("li",{parentName:"ul"},"Moving mouse out of the menu de-highlights currently highlighted menu, if it's not a menu item with a nested menu.\nHere menu items are not de-highlighted when mouse goes away from the menu.")),(0,a.kt)("h2",{id:"menu-1"},"Menu"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," component implements the UI of the menu itself. While ",(0,a.kt)("a",{parentName:"p",href:"#menutrigger"},"MenuTrigger")," implements how the menu is opened via a\ntrigger and positioned with respect to it."),(0,a.kt)("p",null,"Similar to all ",(0,a.kt)("a",{parentName:"p",href:"../guides/Collections"},"collection components"),", there are two ways for defining menu items: as jsx, in\nchildren (static), and via ",(0,a.kt)("inlineCode",{parentName:"p"},"items")," prop (dynamic)."),(0,a.kt)("h3",{id:"static-api"},"Static API"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"Item")," component can be rendered in the children of ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu")," to define the menu items. It's best suited for the use cases\nwhere the menu items are static. Use ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," to give each item a unique identifier, which is used in props on ",(0,a.kt)("inlineCode",{parentName:"p"},"onAction"),",\nor ",(0,a.kt)("inlineCode",{parentName:"p"},"disabledKeys"),". If ",(0,a.kt)("inlineCode",{parentName:"p"},"key")," is not provided, an index-based auto-generated key will be assigned to each item."),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If the content of an ",(0,a.kt)("inlineCode",{parentName:"p"},"Item")," is not plain text, use ",(0,a.kt)("inlineCode",{parentName:"p"},"textValue")," to specify the plain text value for the item. It's needed\nfor making the menu item accessible via type-to-select."))),(0,a.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Render ",(0,a.kt)("inlineCode",{parentName:"p"},"Item"),"s inside another ",(0,a.kt)("inlineCode",{parentName:"p"},"Item")," to create nested menu. The parent item's content is provided via ",(0,a.kt)("inlineCode",{parentName:"p"},"title")," prop, in\nthis case."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'// import { Item, Menu } from "@intellij-platform/core";\n\n<Menu>\n  <Item key="copy">Copy</Item>\n  <Item key="cut" textValue="Cut">\n    <span>Cut</span>\n  </Item>\n  <Item title="History">\n    <Item>Show History</Item>\n    <Item>Put Label</Item>\n  </Item>\n</Menu>\n')),(0,a.kt)("h3",{id:"dynamic-api"},"Dynamic API"),(0,a.kt)("p",null,"While you can also dynamically map a list of objects to rendered ",(0,a.kt)("inlineCode",{parentName:"p"},"Item"),"s, ",(0,a.kt)("inlineCode",{parentName:"p"},"items")," prop is designed for dynamically\nrendering menu items based on an array of objects. Then you use a render function in children, to specify how each\nitem should be mapped to an ",(0,a.kt)("inlineCode",{parentName:"p"},"Item")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"Section"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'// import { Item, Menu } from "@intellij-platform/core";\n\n<Menu\n  items={[\n    { name: "Copy" },\n    { name: "Cut" },\n    {\n      name: "History",\n      children: [{ name: "Show History" }, { name: "Put Label" }],\n    },\n  ]}\n>\n  {(item) => (\n    <Item key={item.name} childItems={item.children}>\n      {item.name}\n    </Item>\n  )}\n</Menu>\n')),(0,a.kt)("h3",{id:"menuitemlayout"},"MenuItemLayout"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MenuItemLayout")," can be rendered inside ",(0,a.kt)("inlineCode",{parentName:"p"},"Item"),", when plain text is not enough for a menu item. ",(0,a.kt)("inlineCode",{parentName:"p"},"MenuItemLayout")," has\nthree parts:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"An icon rendered before the menu item text"),(0,a.kt)("li",{parentName:"ul"},"The text content of the menu item"),(0,a.kt)("li",{parentName:"ul"},"Shortcut rendered on the right side.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'<Menu>\n  <Item>\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/copy"} />}\n      content="Copy"\n      shortcut={"\u2318C"}\n    />\n  </Item>\n</Menu>\n')),(0,a.kt)("h3",{id:"selection"},"Selection"),(0,a.kt)("p",null,"Menu items can be marked as selected via ",(0,a.kt)("inlineCode",{parentName:"p"},"selectedKeys"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'<Menu selectedKeys={["enablePreviewTab"]}>\n  <Item key="enablePreviewTab">Enable Preview Tab</Item>\n  <Item key="fileNesting">File Nesting...</Item>\n</Menu>\n')),(0,a.kt)("p",null,"There is no ",(0,a.kt)("inlineCode",{parentName:"p"},"onSelectedKeys")," change callback. You should use ",(0,a.kt)("inlineCode",{parentName:"p"},"onAction")," and adjust ",(0,a.kt)("inlineCode",{parentName:"p"},"selectedKeys")," if needed."),(0,a.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"If a selected menu item renders ",(0,a.kt)("inlineCode",{parentName:"p"},"MenuItemLayout")," with an icon, the checkmark icon will replace the menu item icon."))),(0,a.kt)("h3",{id:"disabled-items"},"Disabled items"),(0,a.kt)("p",null,"Menu items can be disabled through ",(0,a.kt)("inlineCode",{parentName:"p"},"disabledKeys")," prop on the ",(0,a.kt)("inlineCode",{parentName:"p"},"Menu"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'<Menu disabledKeys={["paste"]}>\n  <Item key="copy">Copy</Item>\n  <Item key="paste">Paste</Item>\n  <Item key="cut">Cut</Item>\n</Menu>\n')),(0,a.kt)("h3",{id:"full-example"},"Full Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'<Menu\n  disabledKeys={["jumpToExternalEditor"]}\n  onAction={(key) => alert(`Selected: ${key}`)}\n>\n  <Item textValue="Cut">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/menu-cut"} />}\n      content="Cut"\n      shortcut={"\u2318X"}\n    />\n  </Item>\n  <Item textValue="Copy">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/copy"} />}\n      content="Copy"\n      shortcut={"\u2318C"}\n    />\n  </Item>\n  <Item textValue="Paste">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/menu-paste"} />}\n      content="Paste"\n      shortcut={"\u2318V"}\n    />\n  </Item>\n  <Divider />\n  <Item>Reformat Code</Item>\n  <Item textValue="Optimize Imports">\n    <MenuItemLayout content="Optimize Imports" shortcut={"\u2303\u2325O"} />\n  </Item>\n  <Item textValue="Delete">\n    <MenuItemLayout content="Delete" shortcut={"\u232b"} />\n  </Item>\n  <Divider />\n  <Item textValue="Compare with...">\n    <MenuItemLayout\n      icon={<PlatformIcon icon={"actions/diff"} />}\n      content="Compare with..."\n    />\n  </Item>\n  <Divider />\n  <Item key="jumpToExternalEditor" textValue="Jump to external editor">\n    <MenuItemLayout content="Jump to external editor" shortcut={"\u2325\u2318F4"} />\n  </Item>\n  <Divider />\n  <Item title={<MenuItemLayout content="History" />}>\n    <Item>Show History</Item>\n    <Item>Put label</Item>\n  </Item>\n</Menu>\n')),(0,a.kt)("h2",{id:"menutrigger"},"MenuTrigger"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"MenuTrigger")," links a menu to a trigger for the menu. It handles the opening/closing logic and renders the menu as an\noverlay, positioned with respect to the trigger element. ",(0,a.kt)("inlineCode",{parentName:"p"},"children")," of ",(0,a.kt)("inlineCode",{parentName:"p"},"MenuTrigger")," must be a render function which\nrenders the trigger. It's invoked with props and ref to be passed down to the trigger element."),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"Currently, menu is closed when a menu action is triggered. For some actions (e.g. toggleable view options), that's not\nthe best UX. In future releases, there will be a way to control if the menu should be kept open after the triggered\naction."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live themed",live:!0,themed:!0},'<MenuTrigger\n  renderMenu={({ menuProps }) => (\n    <Menu\n      {...menuProps}\n      onAction={(key) => {\n        console.log(key);\n      }}\n    >\n      <Item textValue="Cut">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/menu-cut"} />}\n          content="Cut"\n          shortcut={"\u2318X"}\n        />\n      </Item>\n      <Item textValue="Copy">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/copy"} />}\n          content="Copy"\n          shortcut={"\u2318C"}\n        />\n      </Item>\n      <Item textValue="Paste">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/menu-paste"} />}\n          content="Paste"\n          shortcut={"\u2318V"}\n        />\n      </Item>\n    </Menu>\n  )}\n>\n  {(props, ref) => (\n    <ActionButton {...props} ref={ref}>\n      <PlatformIcon icon={"general/gearPlain"} />\n    </ActionButton>\n  )}\n</MenuTrigger>\n')),(0,a.kt)("h3",{id:"positioning-options"},"Positioning options"),(0,a.kt)("p",null,"TODO"),(0,a.kt)("h3",{id:"controlled-and-uncontrolled"},"Controlled and uncontrolled"),(0,a.kt)("p",null,"TODO"),(0,a.kt)("h3",{id:"focus-restoration"},"Focus restoration"),(0,a.kt)("p",null,"Use ",(0,a.kt)("inlineCode",{parentName:"p"},"restoreFocus")," to have focus restored to the trigger, after the menu is closed. While it's an accessibility best\npractice to restore the focus, ",(0,a.kt)("inlineCode",{parentName:"p"},"restoreFocus")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," by default. That is based on the observed majority of the use\ncases in Intellij Platform applications."),(0,a.kt)("h2",{id:"contextmenu"},"ContextMenu"),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ContextMenuContainer")," provides a generic container component that is capable of opening a context menu. You can use it\nas a wrapper for ",(0,a.kt)("a",{parentName:"p",href:"./List"},"List"),", ",(0,a.kt)("a",{parentName:"p",href:"./Tree"},"Tree"),", or anything else, to let them have a context menu."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"live noPadding",live:!0,noPadding:!0},'<ContextMenuContainer\n  renderMenu={() => (\n    <Menu>\n      <Item textValue="Open in Right Split">\n        <MenuItemLayout\n          icon={<PlatformIcon icon={"actions/splitVertically.svg"} />}\n          content="Open in Right Split"\n          shortcut={"\u21e7\u23ce"}\n        />\n      </Item>\n      <Item textValue="Open in Right Split">\n        <MenuItemLayout\n          content="Open in Split with Chooser..."\n          shortcut={"\u2325\u21e7\u23ce"}\n        />\n      </Item>\n      <Item title="Open in">\n        <Item>Finder</Item>\n        <Item>Terminal</Item>\n        <Item textValue="Github">\n          <MenuItemLayout\n            icon={<PlatformIcon icon={"vcs/vendors/github.svg"} />}\n            content="Github"\n          />\n        </Item>\n      </Item>\n    </Menu>\n  )}\n>\n  <div style={{ padding: "5vw", textAlign: "center" }}>\n    Right click somewhere to open the context menu.\n  </div>\n</ContextMenuContainer>\n')),(0,a.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,a.kt)("div",{parentName:"div",className:"admonition-heading"},(0,a.kt)("h5",{parentName:"div"},(0,a.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,a.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,a.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,a.kt)("div",{parentName:"div",className:"admonition-content"},(0,a.kt)("p",{parentName:"div"},"In future versions, there might be an integrated support for context menu in List, Tree, etc. But for now it's done\njust by composition of those components and ",(0,a.kt)("inlineCode",{parentName:"p"},"ContextMenuContainer"),". A caveat to have in mind is the extra wrapper\nelement that will be added if you want context menu, which may need some styling to have no effect on the layout."))))}u.isMDXComponent=!0}}]);
//# sourceMappingURL=0612fc38.91359cac.js.map