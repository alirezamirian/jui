{"version":3,"file":"assets/js/b54e7c57.fc8982a5.js","mappings":"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","sources":["webpack://website/../jui/src/List/useList.ts","webpack://website/../jui/src/List/useSelectableList.ts","webpack://website/../jui/src/List/ListItem.tsx","webpack://website/../jui/src/List/StyledListSectionHeader.tsx","webpack://website/../jui/src/List/List.tsx","webpack://website/../jui/src/List/useListState.ts","webpack://website/../jui/src/List/listItemRenderer.tsx","webpack://website/../jui/test-data.ts","webpack://website/../jui/src/story-components.tsx","webpack://website/../jui/src/List/story-helpers.tsx","webpack://website/../jui/src/List/List.stories.tsx","webpack://website/./docs/components/List.mdx"],"sourcesContent":["import { SelectableListOptions } from \"@react-aria/selection\";\nimport { ListState } from \"@react-stately/list\";\nimport React, { useEffect, useState } from \"react\";\nimport { useSelectableList } from \"./useSelectableList\";\nimport { useFocusWithin } from \"@react-aria/interactions\";\nimport { mergeProps } from \"@react-aria/utils\";\n\nexport interface ListProps\n  extends Omit<\n    SelectableListOptions,\n    | \"selectOnFocus\"\n    | \"selectionManager\" // Grouped as state, the second argument, like in useListBox\n    | \"collection\" // Grouped as state, the second argument, like in useListBox\n    | \"disabledKeys\" // Grouped as state, the second argument, like in useListBox\n    | \"ref\" // Third argument\n  > {\n  id?: string;\n}\n// import { useSelectableList } from \"@react-aria/selection\";\n\nexport function useList<T>(\n  props: ListProps,\n  state: ListState<T>,\n  ref: React.RefObject<HTMLElement>\n) {\n  const {\n    listProps: { onMouseDown, ...listProps },\n  } = useSelectableList({\n    ...props,\n    ref,\n    selectionManager: state.selectionManager,\n    collection: state.collection,\n    disabledKeys: state.disabledKeys,\n    // if selectOnFocus is gonna be an option (which is not in intellij UI), we should also conditionally show outline on items\n    selectOnFocus: true,\n  });\n  const [focused, setFocused] = useState(false);\n\n  const { focusWithinProps } = useFocusWithin({\n    onFocusWithinChange: setFocused,\n  });\n\n  // auto select the first item, if selection is empty and disallowEmptySelection is true.\n  useEffect(() => {\n    const firstKey = state.collection.getFirstKey();\n    if (\n      props.disallowEmptySelection &&\n      state.selectionManager.isEmpty &&\n      firstKey\n    ) {\n      state.selectionManager.select(firstKey);\n    }\n  }, [props.disallowEmptySelection]);\n\n  return {\n    listProps: mergeProps(listProps, focusWithinProps),\n    focused,\n  };\n}\n","/*\n * Copyright 2020 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\n\nimport { Collection, FocusStrategy, KeyboardDelegate, Node, } from \"@react-types/shared\";\nimport { HTMLAttributes, Key, RefObject, useMemo } from \"react\";\nimport { ListKeyboardDelegate } from \"@react-aria/selection\";\nimport { MultipleSelectionManager, SelectionManager, } from \"@react-stately/selection\";\nimport { useCollator } from \"@react-aria/i18n\";\nimport { useSelectableCollection } from \"../selection/useSelectableCollection\";\nimport { useCollectionAutoScroll } from \"../Collections/useCollectionAutoScroll\";\n\ninterface SelectableListOptions {\n  /**\n   * An interface for reading and updating multiple selection state.\n   */\n  selectionManager: MultipleSelectionManager;\n  /**\n   * State of the collection.\n   */\n  collection: Collection<Node<unknown>>;\n  /**\n   * The item keys that are disabled. These items cannot be selected, focused, or otherwise\n   * interacted with.\n   */\n  disabledKeys: Set<Key>;\n  /**\n   * A ref to the item.\n   */\n  ref: RefObject<HTMLElement>;\n  /**\n   * A delegate that returns collection item keys with respect to visual layout.\n   */\n  keyboardDelegate?: KeyboardDelegate;\n  /**\n   * Whether the collection or one of its items should be automatically focused upon render.\n   * @default false\n   */\n  autoFocus?: boolean | FocusStrategy;\n  /**\n   * Whether focus should wrap around when the end/start is reached.\n   * @default false\n   */\n  shouldFocusWrap?: boolean;\n  /**\n   * Whether the option is contained in a virtual scroller.\n   */\n  isVirtualized?: boolean;\n  /**\n   * Whether the collection allows empty selection.\n   * @default false\n   */\n  disallowEmptySelection?: boolean;\n  /**\n   * Whether selection should occur automatically on focus.\n   * @default false\n   */\n  selectOnFocus?: boolean;\n  /**\n   * Whether typeahead is disabled.\n   * @default false\n   */\n  disallowTypeAhead?: boolean;\n  /**\n   * Whether the collection items should use virtual focus instead of being focused directly.\n   */\n  shouldUseVirtualFocus?: boolean;\n  /**\n   * Whether navigation through tab key is enabled.\n   */\n  allowsTabNavigation?: boolean;\n}\n\ninterface SelectableListAria {\n  /**\n   * Props for the option element.\n   */\n  listProps: HTMLAttributes<HTMLElement>;\n}\n\n/**\n * Handles interactions with a selectable list.\n */\nexport function useSelectableList(\n  props: SelectableListOptions\n): SelectableListAria {\n  let {\n    selectionManager,\n    collection,\n    disabledKeys,\n    ref,\n    keyboardDelegate,\n    autoFocus,\n    shouldFocusWrap,\n    isVirtualized,\n    disallowEmptySelection,\n    selectOnFocus = false,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  } = props;\n\n  // By default, a KeyboardDelegate is provided which uses the DOM to query layout information (e.g. for page up/page down).\n  // When virtualized, the layout object will be passed in as a prop and override this.\n  let collator = useCollator({ usage: \"search\", sensitivity: \"base\" });\n  let delegate = useMemo(\n    () =>\n      keyboardDelegate ||\n      new ListKeyboardDelegate(collection, disabledKeys, ref, collator),\n    [keyboardDelegate, collection, disabledKeys, ref, collator]\n  );\n  useCollectionAutoScroll(\n    { isVirtualized, selectionManager: selectionManager as SelectionManager },\n    ref\n  );\n\n  let { collectionProps } = useSelectableCollection({\n    ref,\n    selectionManager,\n    keyboardDelegate: delegate,\n    autoFocus,\n    shouldFocusWrap,\n    disallowEmptySelection,\n    selectOnFocus,\n    disallowTypeAhead,\n    shouldUseVirtualFocus,\n    allowsTabNavigation,\n  });\n\n  return {\n    listProps: collectionProps,\n  };\n}\n","import { Node } from \"@react-types/shared\";\nimport { ListState } from \"@react-stately/list\";\nimport React from \"react\";\nimport { useSelectableItem } from \"@react-aria/selection\";\nimport { usePress } from \"@react-aria/interactions\";\nimport { StyledListItem } from \"./StyledListItem\";\n\nexport interface ListItemProps<T> {\n  listFocused: boolean;\n  item: Node<T>;\n  state: ListState<T>;\n  onAction: () => void;\n  children?: React.ReactNode;\n}\n\nexport function ListItem<T>({\n  listFocused,\n  item,\n  state,\n  onAction,\n  children,\n}: ListItemProps<T>) {\n  const ref = React.useRef(null);\n  const disabled = state.disabledKeys.has(item.key);\n  const selected = state.selectionManager.isSelected(item.key);\n\n  const { itemProps } = useSelectableItem({\n    key: item.key,\n    ref,\n    selectionManager: state.selectionManager,\n  });\n  let { pressProps } = usePress({\n    ...itemProps,\n    isDisabled: disabled,\n    preventFocusOnPress: false,\n  });\n\n  return (\n    <StyledListItem\n      containerFocused={listFocused}\n      selected={selected}\n      disabled={disabled}\n      aria-disabled={disabled}\n      aria-selected={selected}\n      onDoubleClick={onAction}\n      {...pressProps}\n      ref={ref}\n    >\n      {children || item.rendered}\n    </StyledListItem>\n  );\n}\n","import { styled } from \"../styled\";\n\nexport const StyledListSectionHeader = styled.li(({ theme }) => ({\n  paddingLeft: 8,\n  fontWeight: \"bold\",\n  lineHeight: \"20px\",\n  outline: \"none\",\n  cursor: \"default\",\n  color: theme.color(\"*.textForeground\", theme.color(\"*.foreground\")),\n}));\n","import { AriaListBoxProps } from \"@react-types/listbox\";\nimport { AsyncLoadable } from \"@react-types/shared\";\nimport React, { Key, useRef } from \"react\";\nimport { useList } from \"./useList\";\nimport { ListItem } from \"./ListItem\";\nimport { StyledList } from \"./StyledList\";\nimport { listItemRenderer } from \"./listItemRenderer\";\nimport { useListState } from \"./useListState\";\n\nexport type ListProps<T extends object> = Omit<\n  AriaListBoxProps<T>,\n  keyof AsyncLoadable\n> & {\n  /**\n   * fills the available horizontal or vertical space, when rendered in a flex container.\n   */\n  fillAvailableSpace?: boolean;\n  /**\n   * By default, if list is not focused, it shows a different style on the selected item,\n   * which acts as a visual clue for list's focus state. This behaviour can be suppressed by setting\n   * `alwaysShowListAsFocused` to `true`. One use case is in master-detail views where you don't\n   * want the list to appear as blurred, when interacting with the details view of the selected\n   * list item. Note that in such use cases, there won't be any visual clue to distinguish focused\n   * state of the link, which is not great from UX perspective, but it's kept like this to match\n   * Jetbrains UI behaviour.\n   */\n  alwaysShowListAsFocused?: boolean;\n  /**\n   * Called when the action for the item should be triggered, which can be by double click or pressing Enter.\n   * Enter not implemented yet :D\n   */\n  onAction?: (key: Key) => void;\n};\n\n/**\n * List view with speedSearch instead of default typeahead.\n * TODO:\n *  - Support virtualization\n *  - Support custom rendering\n *  -\n */\nexport function List<T extends object>({\n  disallowEmptySelection = true,\n  alwaysShowListAsFocused = false,\n  fillAvailableSpace = false,\n  onAction,\n  ...inputProps\n}: ListProps<T>) {\n  const props = { ...inputProps, disallowEmptySelection };\n  const ref = useRef<HTMLUListElement>(null);\n  const state = useListState(props);\n  const { listProps, focused } = useList(props, state, ref);\n\n  return (\n    <StyledList\n      fillAvailableSpace={fillAvailableSpace}\n      {...listProps}\n      ref={ref}\n    >\n      {[...state.collection].map(\n        listItemRenderer({\n          item: (item) => (\n            <ListItem\n              key={item.key}\n              item={item}\n              state={state}\n              onAction={() => onAction?.(item.key)}\n              listFocused={alwaysShowListAsFocused || focused}\n            />\n          ),\n        })\n      )}\n    </StyledList>\n  );\n}\n","import {\n  ListProps,\n  ListState,\n  useListState as originalUseListState,\n} from \"@react-stately/list\";\nimport { replaceSelectionManager } from \"../selection/replaceSelectionManager\";\n\nexport function useListState<T extends object>(\n  props: ListProps<T>\n): ListState<T> {\n  return replaceSelectionManager(originalUseListState(props));\n}\n","import { Node } from \"@react-types/shared\";\nimport React from \"react\";\nimport { StyledListSectionHeader } from \"./StyledListSectionHeader\";\nimport { ListDivider } from \"./ListDivider\";\n\ninterface SectionNode<T> extends Node<T> {\n  type: \"section\";\n}\n\ninterface ItemNode<T> extends Node<T> {\n  type: \"item\";\n}\n\ninterface DividerNode<T> extends Node<T> {\n  type: \"divider\";\n}\n\nconst isItemNode = <T extends any>(node: Node<T>): node is ItemNode<T> =>\n  node.type === \"item\";\nconst isSectionNode = <T extends any>(node: Node<T>): node is SectionNode<T> =>\n  node.type === \"section\";\nconst isDividerNode = <T extends any>(node: Node<T>): node is DividerNode<T> =>\n  node.type === \"divider\";\n\ntype listItemRendererArgs<T extends any> = {\n  item: (item: ItemNode<T>) => React.ReactNode;\n  sectionHeader?: (item: SectionNode<T>) => React.ReactNode;\n};\nexport const listItemRenderer = <T extends any>({\n  item: renderItem,\n  sectionHeader: renderSectionHeader = (item) => (\n    <StyledListSectionHeader>{item.rendered}</StyledListSectionHeader>\n  ),\n}: listItemRendererArgs<T>) => {\n  return render;\n\n  function render(item: Node<T>): React.ReactNode {\n    if (isItemNode(item)) {\n      return renderItem(item);\n    }\n    if (isSectionNode(item)) {\n      return (\n        <React.Fragment key={item.key}>\n          {renderSectionHeader(item)}\n          {[...(item.childNodes as ItemNode<T>[])].map(render)}\n        </React.Fragment>\n      );\n    }\n    if (isDividerNode(item)) {\n      return <ListDivider key={item.key} />;\n    }\n    return null;\n  }\n};\n","import { DividerItem } from \"./src/Collections/Divider\";\n\nexport type Legend = { name: string };\nexport const legends: Array<\n  Legend | DividerItem | { items: Legend[]; title: string }\n> = [\n  { name: \"Paco de Lucia\" },\n  { name: \"Vicente Amigo\" },\n  new DividerItem(),\n  { name: \"Gerardo Nunez\" },\n  { name: \"Paco Serrano\" },\n  new DividerItem(),\n  { name: \"Sabicas\" },\n  {\n    title: \"Super legends\",\n    items: [{ name: \"Sabicas2\" }],\n  },\n  { name: \"Pepe Habichuela\" },\n  { name: \"El Amir\" },\n  { name: \"Paco Peña\" },\n];\n","import { Item } from \"@react-stately/collections\";\nimport { Selection } from \"@react-types/shared\";\nimport React, { HTMLProps, Key } from \"react\";\nimport { styled } from \"./styled\";\nimport { SpeedSearchTree } from \"./Tree/SpeedSearchTree/SpeedSearchTree\";\nimport { HighlightedTextValue } from \"@intellij-platform/core/CollectionSpeedSearch\";\n\nexport const Container = styled.div`\n  color: ${({ theme }) => theme.color(\"*.foreground\")};\n`;\nexport const Pane: React.FC<Omit<HTMLProps<HTMLDivElement>, \"style\">> = (\n  props\n) => (\n  <div\n    style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      width: 400,\n      marginTop: 25,\n      height: \"calc(100vh - 70px)\",\n    }}\n    {...props}\n  />\n);\n\nexport function SelectionLog({ selection }: { selection: Selection }) {\n  return (\n    <pre>\n      {selection instanceof Set && (\n        <div>{JSON.stringify([...selection], null, 2)}</div>\n      )}\n      {JSON.stringify(selection, null, 2)}\n    </pre>\n  );\n}\n\ntype SelectedKeysType = \"all\" | Set<Key>;\nexport const SpeedSearchTreeSample = ({\n  selectedKeys,\n  defaultSelectedKeys = new Set([\"BasicList\"]),\n  onSelectedKeysChange,\n}: {\n  selectedKeys?: SelectedKeysType;\n  defaultSelectedKeys?: SelectedKeysType;\n  onSelectedKeysChange?: (selectedKeys: SelectedKeysType) => void;\n}): React.ReactElement => {\n  return (\n    <SpeedSearchTree\n      fillAvailableSpace\n      selectionMode=\"multiple\"\n      defaultExpandedKeys={[\"List\", \"Theme\", \"BasicList\", \"Foo\"]}\n      selectedKeys={selectedKeys}\n      defaultSelectedKeys={defaultSelectedKeys}\n      onSelectionChange={onSelectedKeysChange}\n    >\n      <Item key=\"index.ts\">index.ts</Item>\n      <Item textValue=\"List\" title={<HighlightedTextValue />} key=\"List\">\n        <Item\n          textValue=\"BasicList\"\n          title={<HighlightedTextValue />}\n          key=\"BasicList\"\n        >\n          <Item textValue=\"BasicList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"BasicListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useBasicList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item\n          textValue=\"SpeedSearchList\"\n          title={<HighlightedTextValue />}\n          key=\"SpeedSearchList\"\n        >\n          <Item textValue=\"SpeedSearchList.stories.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchList.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"SpeedSearchListItem.tsx\">\n            <HighlightedTextValue />\n          </Item>\n          <Item textValue=\"useSpeedSearchList.ts\">\n            <HighlightedTextValue />\n          </Item>\n        </Item>\n\n        <Item textValue=\"ListDivider.tsx\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n      <Item textValue=\"Theme\" title={<HighlightedTextValue />} key=\"Theme\">\n        <Item textValue=\"createTheme.ts\">\n          <HighlightedTextValue />\n        </Item>\n      </Item>\n    </SpeedSearchTree>\n  );\n};\n","import { Legend, legends } from \"../../test-data\";\nimport React, { ReactNode } from \"react\";\nimport { Item, Section } from \"@react-stately/collections\";\nimport {\n  Divider,\n  DividerItem,\n  HighlightedTextValue,\n} from \"@intellij-platform/core\";\n\nexport const renderItemCustomUI = (item: Legend, content?: ReactNode) => (\n  <Item key={item.name} textValue={item.name}>\n    <div style={{ height: 40, display: \"flex\", alignItems: \"center\" }}>\n      🎸 &nbsp;\n      <b>{content || item.name}</b>\n    </div>\n  </Item>\n);\nexport const itemRenderer = (\n  renderItem: (item: Legend, content?: ReactNode) => JSX.Element,\n  content?: ReactNode\n) => (item: typeof legends[number]) => {\n  if (item instanceof DividerItem) {\n    return <Divider key={item.key} />;\n  }\n  if (\"items\" in item) {\n    return (\n      <Section items={item.items} key={item.title} title={item.title}>\n        {(item) => renderItem(item, content)}\n      </Section>\n    );\n  }\n  return renderItem(item as Legend, content);\n};\nexport const renderItemText = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    {item.name}\n  </Item>\n);\nexport const renderItemTextWithHighlights = (item: Legend) => (\n  <Item key={item.name} textValue={item.name}>\n    <HighlightedTextValue />\n  </Item>\n);\n","import React from \"react\";\nimport { Meta } from \"@storybook/react\";\nimport { List } from \"./List\";\nimport { legends } from \"../../test-data\";\nimport { Item, Section } from \"@react-stately/collections\";\nimport { Divider } from \"../Collections/Divider\";\nimport { Pane } from \"../story-components\";\nimport {\n  itemRenderer,\n  renderItemCustomUI,\n  renderItemText,\n} from \"./story-helpers\";\n\nexport default {\n  title: \"Components/List (Basic)\",\n  component: List,\n} as Meta;\n\nexport const Default = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"single\" items={legends} fillAvailableSpace>\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const AlwaysShownAsFocused = () => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"single\"\n        items={legends}\n        fillAvailableSpace\n        // alwaysShowListAsFocused\n      >\n        {itemRenderer(renderItemCustomUI)}\n      </List>\n    </Pane>\n  );\n};\n\nexport const WithStaticData = () => {\n  return (\n    <Pane>\n      <List selectionMode=\"multiple\" items={legends} fillAvailableSpace>\n        <Item>Paco de lucia</Item>\n        <Divider />\n        <Item>Vicente Amigo</Item>\n        <Section title=\"Other\">\n          <Item>Gerardo Nunez</Item>\n          <Item>El Amir</Item>\n        </Section>\n      </List>\n    </Pane>\n  );\n};\n\nexport const MultiSelect = ({\n  fillAvailableSpace,\n  shouldFocusWrap,\n  alwaysShowListAsFocused,\n}: any) => {\n  return (\n    <Pane>\n      <List\n        selectionMode=\"multiple\"\n        items={legends}\n        fillAvailableSpace={fillAvailableSpace}\n        shouldFocusWrap={shouldFocusWrap}\n        alwaysShowListAsFocused={alwaysShowListAsFocused}\n      >\n        {itemRenderer(renderItemText)}\n      </List>\n    </Pane>\n  );\n};\nMultiSelect.argTypes = {\n  shouldFocusWrap: { control: \"boolean\" },\n};\nMultiSelect.args = {\n  shouldFocusWrap: { value: false },\n};\n\nDefault.args = {};\n","\nimport React from 'react';\nimport { mdx } from '@mdx-js/react';\n\n\nexport const frontMatter = {};\nexport const contentTitle = 'List';\nexport const metadata = {\n  \"unversionedId\": \"components/List\",\n  \"id\": \"components/List\",\n  \"title\": \"List\",\n  \"description\": \"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\",\n  \"source\": \"@site/docs/components/List.mdx\",\n  \"sourceDirName\": \"components\",\n  \"slug\": \"/components/List\",\n  \"permalink\": \"/jui/docs/components/List\",\n  \"editUrl\": \"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/List.mdx\",\n  \"tags\": [],\n  \"version\": \"current\",\n  \"frontMatter\": {},\n  \"sidebar\": \"tutorialSidebar\",\n  \"previous\": {\n    \"title\": \"Icons\",\n    \"permalink\": \"/jui/docs/components/Icons\"\n  },\n  \"next\": {\n    \"title\": \"Menu\",\n    \"permalink\": \"/jui/docs/components/Menu\"\n  }\n};\n\n\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport { RefToIntellijPlatform } from \"../../src/components/RefToIntellijPlatform.tsx\";\nimport { Default } from \"@intellij-platform/core/List/List.stories\";\nimport { ExampleContext } from \"../../src/components/ExampleContext\";\nexport const toc = [{\n  value: 'Remaining',\n  id: 'remaining',\n  children: [],\n  level: 4\n}, {\n  value: 'SpeedSearchList',\n  id: 'speedsearchlist',\n  children: [],\n  level: 2\n}, {\n  value: 'Advanced use',\n  id: 'advanced-use',\n  children: [{\n    value: 'Custom list component with useList and useSpeedSearchList',\n    id: 'custom-list-component-with-uselist-and-usespeedsearchlist',\n    children: [],\n    level: 3\n  }],\n  level: 2\n}];\n\nconst layoutProps = {\n  toc\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"list\"\n    }}>{`List`}</h1>\n    <p>{`Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\na list of items with a single attribute. Here is some examples from JetBrains IDEs:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Tools -> SSH Configurations`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Appearance & Behavior -> Scopes`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> General -> Console -> Exceptions`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> File and Code Templates`}</strong>{` (master-detail)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Settings -> Editor -> Natural Languages`}</strong>{` (single attribute list of items)`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Show Local History`}</strong>{` window (advanced layout)`}</li>\n    </ul>\n    <h4 {...{\n      \"id\": \"remaining\"\n    }}>{`Remaining`}</h4>\n    <ul {...{\n      \"className\": \"contains-task-list\"\n    }}>\n      <li parentName=\"ul\" {...{\n        \"className\": \"task-list-item\"\n      }}><input parentName=\"li\" {...{\n          \"type\": \"checkbox\",\n          \"checked\": false,\n          \"disabled\": true\n        }}></input>{` `}{`Virtualized scrolling support for performance with long lists`}</li>\n    </ul>\n    <ExampleContext mdxType=\"ExampleContext\">\n  <Default mdxType=\"Default\" />\n    </ExampleContext>\n    <h2 {...{\n      \"id\": \"speedsearchlist\"\n    }}>{`SpeedSearchList`}</h2>\n    <h2 {...{\n      \"id\": \"advanced-use\"\n    }}>{`Advanced use`}</h2>\n    <h3 {...{\n      \"id\": \"custom-list-component-with-uselist-and-usespeedsearchlist\"\n    }}>{`Custom list component with useList and useSpeedSearchList`}</h3>\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;\n"],"names":["useList","props","state","ref","listProps","onMouseDown","selectionManager","collection","disabledKeys","keyboardDelegate","autoFocus","shouldFocusWrap","isVirtualized","disallowEmptySelection","selectOnFocus","disallowTypeAhead","shouldUseVirtualFocus","allowsTabNavigation","collator","useCollator","usage","sensitivity","delegate","useMemo","ListKeyboardDelegate","useCollectionAutoScroll","collectionProps","useSelectableCollection","useSelectableList","focused","setFocused","useState","focusWithinProps","useFocusWithin","onFocusWithinChange","useEffect","firstKey","getFirstKey","isEmpty","select","mergeProps","ListItem","listFocused","item","onAction","children","React","disabled","has","key","selected","isSelected","itemProps","useSelectableItem","pressProps","usePress","isDisabled","preventFocusOnPress","StyledListItem","containerFocused","onDoubleClick","rendered","StyledListSectionHeader","styled","theme","paddingLeft","fontWeight","lineHeight","outline","cursor","color","List","alwaysShowListAsFocused","fillAvailableSpace","inputProps","useRef","replaceSelectionManager","originalUseListState","useListState","StyledList","map","renderItem","sectionHeader","renderSectionHeader","render","type","node","isSectionNode","childNodes","isDividerNode","ListDivider","listItemRenderer","legends","name","DividerItem","title","items","Pane","style","display","flexDirection","width","marginTop","height","itemRenderer","content","Divider","renderItemText","textValue","Default","selectionMode","MultiSelect","argTypes","control","args","value","frontMatter","contentTitle","metadata","toc","id","level","layoutProps","MDXContent","components","mdxType","parentName","isMDXComponent"],"sourceRoot":""}