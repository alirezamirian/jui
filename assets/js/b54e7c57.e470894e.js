"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["3794"],{54756:function(e,t,n){n.d(t,{Ui:function(){return m},en:function(){return h}});var s=n(20569),i=n(2784),o=n(11538),l=n(93105),a=n(39395),r=n(95651),c=n(82376),d=n(33819),u=n(52322);let m=e=>{let{children:t,themeName:n="darcula"}=e,s={light:r,highContrast:a,darcula:l}[n],m=(0,i.useMemo)(()=>new c.Q(s),[s]);return p(),(0,u.jsx)(o.Z,{fallback:(0,u.jsx)(u.Fragment,{children:"Loading..."}),children:()=>(0,u.jsx)(d.f,{theme:m,children:t})})},h=e=>{let{children:t}=e;return(0,u.jsx)(m,{children:(0,u.jsx)(x,{children:t})})},p=()=>{(0,i.useEffect)(()=>{let e="example-context-patch";if(!document.body.classList.contains(e))try{document.querySelectorAll("link[rel=stylesheet]").forEach(e=>{if(e.sheet)for(let t=0;t<e.sheet.cssRules.length;t++){let n=e.sheet.cssRules.item(t);n?.cssText?.startsWith("body:not(.navigation-with-keyboard)")&&e.sheet.deleteRule(t)}}),document.body.classList.add(e)}catch(e){console.error("Could not undo useKeyboardNavigation")}},[])};var x=(0,s.ZP)("div").withConfig({displayName:"ExampleContext___StyledDiv",componentId:"sc-14mtscb-0"})(["background:",";"],e=>{let{theme:t}=e;return t.color("*.background")});m.__docgenInfo={description:"",methods:[],displayName:"ExampleContext",props:{themeName:{defaultValue:{value:'"darcula"',computed:!1},required:!1}}},h.__docgenInfo={description:"TODO: add a surrounding UI for examples, with tools for theme selection for example.",methods:[],displayName:"Example"}},5819:function(e,t,n){n.r(t),n.d(t,{default:()=>u,frontMatter:()=>l,metadata:()=>s,assets:()=>r,toc:()=>c,contentTitle:()=>a});var s=JSON.parse('{"id":"components/List","title":"List","description":"Used for showing a flat list of items with different selection modes. It\'s usually used in master-detail views, or for","source":"@site/docs/components/List.mdx","sourceDirName":"components","slug":"/components/List","permalink":"/jui/docs/components/List","draft":false,"unlisted":false,"editUrl":"https://github.com/alirezamirian/jui/edit/master/packages/website/docs/components/List.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Link","permalink":"/jui/docs/components/Link"},"next":{"title":"Menu","permalink":"/jui/docs/components/Menu"}}'),i=n("52322"),o=n("22840");n("54756");let l={},a="List",r={},c=[{value:"SpeedSearchList",id:"speedsearchlist",level:2},{value:"ItemLayout",id:"itemlayout",level:2},{value:"ContextMenu",id:"contextmenu",level:2},{value:"Advanced use",id:"advanced-use",level:2},{value:"Custom list component with useList and useSpeedSearchList",id:"custom-list-component-with-uselist-and-usespeedsearchlist",level:3}];function d(e){let t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"list",children:"List"})}),"\n",(0,i.jsx)(t.p,{children:"Used for showing a flat list of items with different selection modes. It's usually used in master-detail views, or for\na list of items with a single attribute. Here is some examples from JetBrains IDEs:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Settings -> Tools -> SSH Configurations"})," (master-detail)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Settings -> Appearance & Behavior -> Scopes"})," (master-detail)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Settings -> Editor -> General -> Console -> Exceptions"})," (single attribute list of items)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Settings -> Editor -> File and Code Templates"})," (master-detail)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Settings -> Editor -> Natural Languages"})," (single attribute list of items)"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:"Show Local History"})," window (advanced layout)"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-jsx",metastring:"themed live",live:!0,children:'<List selectionMode="multiple" fillAvailableSpace>\n  <Item>Paco de lucia</Item>\n  <Divider />\n  <Item>Vicente Amigo</Item>\n  <Section title="Other">\n    <Item>Gerardo Nunez</Item>\n    <Item>El Amir</Item>\n  </Section>\n</List>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"speedsearchlist",children:"SpeedSearchList"}),"\n",(0,i.jsx)(t.p,{children:"TODO"}),"\n",(0,i.jsx)(t.h2,{id:"itemlayout",children:"ItemLayout"}),"\n",(0,i.jsxs)(t.p,{children:["While you can render any custom content in ",(0,i.jsx)(t.code,{children:"Item"}),"s of a list, ",(0,i.jsx)(t.code,{children:"ItemLayout"})," is a useful helper component implementing\nthe most common cases. Render different parts of an item, such as icon, text, etc. inside a ",(0,i.jsx)(t.code,{children:"ItemLayout"})," and it handles\nthe layout, and the spacing between them. Some common parts that require a special style are implemented as components\naccessible on ",(0,i.jsx)(t.code,{children:"ItemLayout"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:"live themed",live:!0,children:'<SpeedSearchList selectionMode="multiple">\n  <Item textValue="jui">\n    <ItemLayout>\n      <PlatformIcon icon="nodes/folder" />\n      <HighlightedTextValue />\n      <ItemLayout.Hint>~/workspace/jui</ItemLayout.Hint>\n    </ItemLayout>\n  </Item>\n</SpeedSearchList>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"contextmenu",children:"ContextMenu"}),"\n",(0,i.jsxs)(t.p,{children:["In order to have context menu for list items, just wrap the list in a ",(0,i.jsx)(t.code,{children:"ContextMenuContainer"}),". When the context menu\nis triggered on an item, the selection is also updated right before the context menu opens, so you can render the\ncontext menu based on the selected item(s)."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",metastring:"live themed noPadding",live:!0,children:'function ListContextMenuExample() {\n  const [selectedKeys, setSelectedKeys] = useState(new Set());\n\n  return (\n    <ContextMenuContainer\n      renderMenu={() => {\n        const selectedKey = Array.from(selectedKeys)[0];\n        if (!selectedKey) {\n          return (\n            <Menu>\n              <Item>Nothing here</Item>\n            </Menu>\n          );\n        }\n        return (\n          <Menu>\n            <Item textValue={`Run \'${selectedKey}\'`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="debugger/threadRunning.svg" />}\n                content={`Run \'${selectedKey}\'`}\n                shortcut="\u21E7\u23CE"\n              />\n            </Item>\n            <Item textValue={`Debug \'${selectedKey}\'`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/startDebugger.svg" />}\n                content={`Debug \'${selectedKey}\'`}\n                shortcut="\u2303\u21E7D"\n              />\n            </Item>\n            <Item textValue={`Edit \'${selectedKey}\' Settings...`}>\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/editSource.svg" />}\n                content={`Edit \'${selectedKey}\' Settings...`}\n              />\n            </Item>\n            <Divider />\n            <Item textValue="Jump to source">\n              <MenuItemLayout\n                icon={<PlatformIcon icon="actions/editSource.svg" />}\n                content="Jump to source"\n                shortcut="\u2318\u2193"\n              />\n            </Item>\n          </Menu>\n        );\n      }}\n    >\n      <List\n        selectionMode="single"\n        selectedKeys={selectedKeys}\n        onSelectionChange={setSelectedKeys}\n      >\n        <Item key="start">start</Item>\n        <Item key="build">build</Item>\n        <Item key="test">test</Item>\n        <Item key="deploy">deploy</Item>\n      </List>\n    </ContextMenuContainer>\n  );\n}\n'})}),"\n",(0,i.jsx)(t.h2,{id:"advanced-use",children:"Advanced use"}),"\n",(0,i.jsx)(t.h3,{id:"custom-list-component-with-uselist-and-usespeedsearchlist",children:"Custom list component with useList and useSpeedSearchList"})]})}function u(e={}){let{wrapper:t}={...(0,o.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);
//# sourceMappingURL=b54e7c57.e470894e.js.map